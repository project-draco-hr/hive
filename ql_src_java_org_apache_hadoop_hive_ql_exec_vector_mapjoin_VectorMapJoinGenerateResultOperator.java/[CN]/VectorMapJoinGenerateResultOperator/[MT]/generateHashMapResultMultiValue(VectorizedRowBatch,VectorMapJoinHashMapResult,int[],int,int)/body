{
  if (useOverflowRepeatedThreshold && hashMapResult.isCappedCountAvailable() && hashMapResult.cappedCount() > overflowRepeatedThreshold) {
    generateHashMapResultLargeMultiValue(batch,hashMapResult,allMatchs,allMatchesIndex,duplicateCount);
    return;
  }
  for (int i=0; i < duplicateCount; i++) {
    int batchIndex=allMatchs[allMatchesIndex + i];
    ByteSegmentRef byteSegmentRef=hashMapResult.first();
    while (byteSegmentRef != null) {
      if (bigTableRetainedVectorCopy != null) {
        bigTableRetainedVectorCopy.copyByValue(batch,batchIndex,overflowBatch,overflowBatch.size);
      }
      if (smallTableVectorDeserializeRow != null) {
        doSmallTableDeserializeRow(overflowBatch,overflowBatch.size,byteSegmentRef,hashMapResult);
      }
      overflowBatch.size++;
      if (overflowBatch.size == overflowBatch.DEFAULT_SIZE) {
        forwardOverflow();
      }
      byteSegmentRef=hashMapResult.next();
    }
  }
}
