{
  Map<Rule,NodeProcessor> opRules=new LinkedHashMap<Rule,NodeProcessor>();
  HiveConf conf=pctx.getConf();
  if (!HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVEGROUPBYSKEW)) {
    opRules.put(new RuleRegExp("R1",GroupByOperator.getOperatorName() + "%" + ReduceSinkOperator.getOperatorName()+ "%"+ GroupByOperator.getOperatorName()+ "%"),getMapSortedGroupbyProc(pctx));
  }
 else {
    opRules.put(new RuleRegExp("R2",GroupByOperator.getOperatorName() + "%" + ReduceSinkOperator.getOperatorName()+ "%"+ GroupByOperator.getOperatorName()+ "%"+ ReduceSinkOperator.getOperatorName()+ "%"+ GroupByOperator.getOperatorName()+ "%"),getMapSortedGroupbySkewProc(pctx));
  }
  Dispatcher disp=new DefaultRuleDispatcher(getDefaultProc(),opRules,new GroupByOptimizerContext(conf));
  GraphWalker ogw=new DefaultGraphWalker(disp);
  List<Node> topNodes=new ArrayList<Node>();
  topNodes.addAll(pctx.getTopOps().values());
  ogw.startWalking(topNodes,null);
  return pctx;
}
