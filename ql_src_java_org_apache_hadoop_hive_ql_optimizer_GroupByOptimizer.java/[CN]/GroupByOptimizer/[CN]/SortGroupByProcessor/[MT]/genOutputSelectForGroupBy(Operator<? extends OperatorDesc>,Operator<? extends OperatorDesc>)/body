{
  assert(parentOp.getSchema().getSignature().size() == currOp.getSchema().getSignature().size());
  Iterator<ColumnInfo> pIter=parentOp.getSchema().getSignature().iterator();
  Iterator<ColumnInfo> cIter=currOp.getSchema().getSignature().iterator();
  List<ExprNodeDesc> columns=new ArrayList<ExprNodeDesc>();
  List<String> colName=new ArrayList<String>();
  Map<String,ExprNodeDesc> columnExprMap=new HashMap<String,ExprNodeDesc>();
  while (pIter.hasNext()) {
    ColumnInfo pInfo=pIter.next();
    ColumnInfo cInfo=cIter.next();
    ExprNodeDesc column=new ExprNodeColumnDesc(pInfo.getType(),pInfo.getInternalName(),pInfo.getTabAlias(),pInfo.getIsVirtualCol(),pInfo.isSkewedCol());
    columns.add(column);
    colName.add(cInfo.getInternalName());
    columnExprMap.put(cInfo.getInternalName(),column);
  }
  return OperatorFactory.getAndMakeChild(new SelectDesc(columns,colName),new RowSchema(currOp.getSchema().getSignature()),columnExprMap,parentOp);
}
