{
  Configuration conf=context.getConfiguration();
  LauncherDelegator.JobType jobType=LauncherDelegator.JobType.valueOf(conf.get(JOB_TYPE));
  String statusdir=conf.get(STATUSDIR_NAME);
  if (statusdir != null) {
    try {
      statusdir=TempletonUtils.addUserHomeDirectoryIfApplicable(statusdir,conf.get("user.name"));
    }
 catch (    URISyntaxException e) {
      String msg="Invalid status dir URI";
      LOG.error(msg,e);
      throw new IOException(msg,e);
    }
  }
  if (tryReconnectToRunningJob(conf,context,jobType,statusdir)) {
    return;
  }
  killLauncherChildJobs(conf,context.getJobID().toString());
  Process proc=startJob(conf,context.getJobID().toString(),conf.get("user.name"),conf.get(OVERRIDE_CLASSPATH));
  ExecutorService pool=Executors.newCachedThreadPool();
  executeWatcher(pool,conf,context.getJobID(),proc.getInputStream(),statusdir,STDOUT_FNAME);
  executeWatcher(pool,conf,context.getJobID(),proc.getErrorStream(),statusdir,STDERR_FNAME);
  KeepAlive keepAlive=startCounterKeepAlive(pool,context);
  proc.waitFor();
  keepAlive.sendReport=false;
  pool.shutdown();
  if (!pool.awaitTermination(WATCHER_TIMEOUT_SECS,TimeUnit.SECONDS)) {
    pool.shutdownNow();
  }
  updateJobStateToDoneAndWriteExitValue(conf,statusdir,context.getJobID().toString(),proc.exitValue());
  Boolean enablelog=Boolean.parseBoolean(conf.get(ENABLE_LOG));
  if (enablelog && TempletonUtils.isset(statusdir)) {
    LOG.info("templeton: collecting logs for " + context.getJobID().toString() + " to "+ statusdir+ "/logs");
    LogRetriever logRetriever=new LogRetriever(statusdir,jobType,conf);
    logRetriever.run();
  }
}
