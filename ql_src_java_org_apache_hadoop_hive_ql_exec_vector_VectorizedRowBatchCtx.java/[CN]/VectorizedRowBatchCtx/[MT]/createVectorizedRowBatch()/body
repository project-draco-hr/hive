{
  final int dataAndPartColumnCount=rowColumnTypeInfos.length;
  final int totalColumnCount=dataAndPartColumnCount + scratchColumnTypeNames.length;
  VectorizedRowBatch result=new VectorizedRowBatch(totalColumnCount);
  if (dataColumnNums == null) {
    for (int i=0; i < dataAndPartColumnCount; i++) {
      TypeInfo typeInfo=rowColumnTypeInfos[i];
      result.cols[i]=VectorizedBatchUtil.createColumnVector(typeInfo);
    }
  }
 else {
    for (int i=0; i < dataColumnNums.length; i++) {
      int columnNum=dataColumnNums[i];
      Preconditions.checkState(columnNum < dataAndPartColumnCount);
      TypeInfo typeInfo=rowColumnTypeInfos[columnNum];
      result.cols[columnNum]=VectorizedBatchUtil.createColumnVector(typeInfo);
    }
    final int endColumnNum=dataColumnCount + partitionColumnCount;
    for (int partitionColumnNum=dataColumnCount; partitionColumnNum < endColumnNum; partitionColumnNum++) {
      TypeInfo typeInfo=rowColumnTypeInfos[partitionColumnNum];
      result.cols[partitionColumnNum]=VectorizedBatchUtil.createColumnVector(typeInfo);
    }
  }
  for (int i=0; i < scratchColumnTypeNames.length; i++) {
    String typeName=scratchColumnTypeNames[i];
    result.cols[rowColumnTypeInfos.length + i]=VectorizedBatchUtil.createColumnVector(typeName);
  }
  result.setPartitionInfo(dataColumnCount,partitionColumnCount);
  result.reset();
  return result;
}
