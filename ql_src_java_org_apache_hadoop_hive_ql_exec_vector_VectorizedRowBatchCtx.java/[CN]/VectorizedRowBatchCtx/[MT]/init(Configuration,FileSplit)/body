{
  Map<String,PartitionDesc> pathToPartitionInfo=Utilities.getMapRedWork(hiveConf).getMapWork().getPathToPartitionInfo();
  PartitionDesc part=HiveFileFormatUtils.getPartitionDescFromPathRecursively(pathToPartitionInfo,split.getPath(),IOPrepareCache.get().getPartitionDescMap());
  String partitionPath=split.getPath().getParent().toString();
  scratchColumnTypeMap=Utilities.getMapWorkVectorScratchColumnTypeMap(hiveConf);
  Properties partProps=(part.getPartSpec() == null || part.getPartSpec().isEmpty()) ? part.getTableDesc().getProperties() : part.getProperties();
  Class serdeclass=hiveConf.getClassByName(part.getSerdeClassName());
  Deserializer partDeserializer=(Deserializer)serdeclass.newInstance();
  SerDeUtils.initializeSerDe(partDeserializer,hiveConf,part.getTableDesc().getProperties(),partProps);
  StructObjectInspector partRawRowObjectInspector=(StructObjectInspector)partDeserializer.getObjectInspector();
  deserializer=partDeserializer;
  String pcols=partProps.getProperty(hive_metastoreConstants.META_TABLE_PARTITION_COLUMNS);
  String[] partKeys=null;
  if (pcols != null && pcols.length() > 0) {
    LinkedHashMap<String,String> partSpec=part.getPartSpec();
    partKeys=pcols.trim().split("/");
    String pcolTypes=partProps.getProperty(hive_metastoreConstants.META_TABLE_PARTITION_COLUMN_TYPES);
    String[] partKeyTypes=pcolTypes.trim().split(":");
    if (partKeys.length > partKeyTypes.length) {
      throw new HiveException("Internal error : partKeys length, " + partKeys.length + " greater than partKeyTypes length, "+ partKeyTypes.length);
    }
    List<String> partNames=new ArrayList<String>(partKeys.length);
    List<ObjectInspector> partObjectInspectors=new ArrayList<ObjectInspector>(partKeys.length);
    partitionValues=new LinkedHashMap<String,Object>();
    partitionTypes=new LinkedHashMap<String,PrimitiveCategory>();
    for (int i=0; i < partKeys.length; i++) {
      String key=partKeys[i];
      partNames.add(key);
      ObjectInspector objectInspector=null;
      Object objectVal;
      if (partSpec == null) {
        objectVal=null;
        objectInspector=PrimitiveObjectInspectorFactory.javaStringObjectInspector;
        partitionTypes.put(key,PrimitiveCategory.STRING);
      }
 else {
        objectInspector=TypeInfoUtils.getStandardJavaObjectInspectorFromTypeInfo(TypeInfoFactory.getPrimitiveTypeInfo(partKeyTypes[i]));
        objectVal=ObjectInspectorConverters.getConverter(PrimitiveObjectInspectorFactory.javaStringObjectInspector,objectInspector).convert(partSpec.get(key));
        partitionTypes.put(key,TypeInfoFactory.getPrimitiveTypeInfo(partKeyTypes[i]).getPrimitiveCategory());
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug("Partition column: name: " + key + ", value: "+ objectVal+ ", type: "+ partitionTypes.get(key));
      }
      partitionValues.put(key,objectVal);
      partObjectInspectors.add(objectInspector);
    }
    StructObjectInspector partObjectInspector=ObjectInspectorFactory.getStandardStructObjectInspector(partNames,partObjectInspectors);
    StructObjectInspector rowObjectInspector=ObjectInspectorFactory.getUnionStructObjectInspector(Arrays.asList(new StructObjectInspector[]{partRawRowObjectInspector,partObjectInspector}));
    rowOI=rowObjectInspector;
    rawRowOI=partRawRowObjectInspector;
    partitionCols=new HashSet<Integer>();
    if (pcols != null && pcols.length() > 0) {
      for (int i=0; i < partKeys.length; i++) {
        partitionCols.add(getColIndexBasedOnColName(partKeys[i]));
      }
    }
  }
 else {
    rowOI=partRawRowObjectInspector;
    rawRowOI=partRawRowObjectInspector;
  }
  colsToInclude=ColumnProjectionUtils.getReadColumnIDs(hiveConf);
}
