{
  if (isSubQ || (joinExpr != null) || (!nameToSample.isEmpty())|| (!destToWhereExpr.isEmpty())|| (!destToGroupby.isEmpty())|| (!destToClusterby.isEmpty()))   return false;
  Iterator<Map.Entry<String,HashMap<String,CommonTree>>> aggrIter=destToAggregationExprs.entrySet().iterator();
  while (aggrIter.hasNext()) {
    HashMap<String,CommonTree> h=aggrIter.next().getValue();
    if ((h != null) && (!h.isEmpty()))     return false;
  }
  if (!destToDistinctFuncExpr.isEmpty()) {
    Iterator<Map.Entry<String,CommonTree>> distn=destToDistinctFuncExpr.entrySet().iterator();
    while (distn.hasNext()) {
      CommonTree ct=distn.next().getValue();
      if (ct != null)       return false;
    }
  }
  Iterator<Map.Entry<String,CommonTree>> iter=nameToDest.entrySet().iterator();
  while (iter.hasNext()) {
    Map.Entry<String,CommonTree> entry=iter.next();
    CommonTree v=entry.getValue();
    if (!(((CommonTree)v.getChild(0)).getToken().getType() == HiveParser.TOK_TMP_FILE))     return false;
  }
  iter=destToSelExpr.entrySet().iterator();
  while (iter.hasNext()) {
    Map.Entry<String,CommonTree> entry=iter.next();
    CommonTree selExprList=entry.getValue();
    for (int i=0; i < selExprList.getChildCount(); ++i) {
      CommonTree selExpr=(CommonTree)selExprList.getChild(i);
      CommonTree sel=(CommonTree)selExpr.getChild(0);
      if (sel.getToken().getType() != HiveParser.TOK_ALLCOLREF)       return false;
    }
  }
  return true;
}
