{
  String partitionInfoString=WritableUtils.readString(input);
  partitionInfo=(PartInfo)HCatUtil.deserialize(partitionInfoString);
  String baseSplitClassName=WritableUtils.readString(input);
  InputSplit split;
  try {
    Class<? extends InputSplit> splitClass=(Class<? extends InputSplit>)Class.forName(baseSplitClassName);
    Constructor<? extends InputSplit> constructor=splitClass.getDeclaredConstructor(new Class[]{});
    constructor.setAccessible(true);
    split=constructor.newInstance();
    ((Writable)split).readFields(input);
    this.baseSplit=split;
  }
 catch (  Exception e) {
    throw new IOException("Exception from " + baseSplitClassName + " : "+ e.getMessage());
  }
  String tableSchemaString=WritableUtils.readString(input);
  tableSchema=(HCatSchema)HCatUtil.deserialize(tableSchemaString);
}
