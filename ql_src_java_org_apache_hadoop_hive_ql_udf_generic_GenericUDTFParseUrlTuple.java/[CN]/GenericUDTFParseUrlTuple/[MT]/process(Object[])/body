{
  if (o[0] == null) {
    forward(nullCols);
    return;
  }
  if (!pathParsed) {
    for (int i=0; i < numCols; ++i) {
      paths[i]=((StringObjectInspector)inputOIs[i + 1]).getPrimitiveJavaObject(o[i + 1]);
      if (paths[i] == null) {
        partnames[i]=PARTNAME.NULLNAME;
      }
 else       if (paths[i].equals("HOST")) {
        partnames[i]=PARTNAME.HOST;
      }
 else       if (paths[i].equals("PATH")) {
        partnames[i]=PARTNAME.PATH;
      }
 else       if (paths[i].equals("QUERY")) {
        partnames[i]=PARTNAME.QUERY;
      }
 else       if (paths[i].equals("REF")) {
        partnames[i]=PARTNAME.REF;
      }
 else       if (paths[i].equals("PROTOCOL")) {
        partnames[i]=PARTNAME.PROTOCOL;
      }
 else       if (paths[i].equals("FILE")) {
        partnames[i]=PARTNAME.FILE;
      }
 else       if (paths[i].equals("AUTHORITY")) {
        partnames[i]=PARTNAME.AUTHORITY;
      }
 else       if (paths[i].equals("USERINFO")) {
        partnames[i]=PARTNAME.USERINFO;
      }
 else       if (paths[i].startsWith("QUERY:")) {
        partnames[i]=PARTNAME.QUERY_WITH_KEY;
        paths[i]=paths[i].substring(6);
      }
 else {
        partnames[i]=PARTNAME.NULLNAME;
      }
    }
    pathParsed=true;
  }
  String urlStr=((StringObjectInspector)inputOIs[0]).getPrimitiveJavaObject(o[0]);
  if (urlStr == null) {
    forward(nullCols);
    return;
  }
  try {
    String ret=null;
    url=new URL(urlStr);
    for (int i=0; i < numCols; ++i) {
      ret=evaluate(url,i);
      if (ret == null) {
        retCols[i]=null;
      }
 else {
        if (retCols[i] == null) {
          retCols[i]=cols[i];
        }
        retCols[i].set(ret);
      }
    }
    forward(retCols);
    return;
  }
 catch (  MalformedURLException e) {
    if (!seenErrors) {
      LOG.error("The input is not a valid url string: " + urlStr + ". Skipping such error messages in the future.");
      seenErrors=true;
    }
    forward(nullCols);
    return;
  }
}
