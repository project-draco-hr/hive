{
  inputOIs=args;
  numCols=args.length - 1;
  if (numCols < 1) {
    throw new UDFArgumentException("parse_url_tuple() takes at least two arguments: " + "the url string and a part name");
  }
  for (int i=0; i < args.length; ++i) {
    if (args[i].getCategory() != ObjectInspector.Category.PRIMITIVE || !args[i].getTypeName().equals(Constants.STRING_TYPE_NAME)) {
      throw new UDFArgumentException("parse_url_tuple()'s arguments have to be string type");
    }
  }
  seenErrors=false;
  pathParsed=false;
  url=null;
  p=null;
  lastKey=null;
  paths=new String[numCols];
  partnames=new PARTNAME[numCols];
  cols=new Text[numCols];
  retCols=new Text[numCols];
  nullCols=new Object[numCols];
  for (int i=0; i < numCols; ++i) {
    cols[i]=new Text();
    retCols[i]=cols[i];
    nullCols[i]=null;
  }
  ArrayList<String> fieldNames=new ArrayList<String>(numCols);
  ArrayList<ObjectInspector> fieldOIs=new ArrayList<ObjectInspector>(numCols);
  for (int i=0; i < numCols; ++i) {
    fieldNames.add("c" + i);
    fieldOIs.add(PrimitiveObjectInspectorFactory.writableStringObjectInspector);
  }
  return ObjectInspectorFactory.getStandardStructObjectInspector(fieldNames,fieldOIs);
}
