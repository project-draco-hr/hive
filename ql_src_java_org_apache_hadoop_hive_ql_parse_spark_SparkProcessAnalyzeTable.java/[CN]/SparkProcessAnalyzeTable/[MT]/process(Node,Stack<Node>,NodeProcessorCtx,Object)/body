{
  GenSparkProcContext context=(GenSparkProcContext)procContext;
  TableScanOperator tableScan=(TableScanOperator)nd;
  if (context.tempTS.contains(tableScan)) {
    return null;
  }
  ParseContext parseContext=context.parseContext;
  Class<? extends InputFormat> inputFormat=parseContext.getTopToTable().get(tableScan).getInputFormatClass();
  QB queryBlock=parseContext.getQB();
  QBParseInfo parseInfo=parseContext.getQB().getParseInfo();
  if (parseInfo.isAnalyzeCommand()) {
    Preconditions.checkArgument(tableScan.getChildOperators() == null || tableScan.getChildOperators().size() == 0,"AssertionError: expected tableScan.getChildOperators() to be null, " + "or tableScan.getChildOperators().size() to be 0");
    String alias=null;
    for (    String a : parseContext.getTopOps().keySet()) {
      if (tableScan == parseContext.getTopOps().get(a)) {
        alias=a;
      }
    }
    Preconditions.checkArgument(alias != null,"AssertionError: expected alias to be not null");
    SparkWork sparkWork=context.currentTask.getWork();
    boolean partialScan=parseInfo.isPartialScanAnalyzeCommand();
    boolean noScan=parseInfo.isNoScanAnalyzeCommand();
    if (inputFormat.equals(OrcInputFormat.class) && (noScan || partialScan)) {
      StatsNoJobWork snjWork=new StatsNoJobWork(parseContext.getQB().getParseInfo().getTableSpec());
      snjWork.setStatsReliable(parseContext.getConf().getBoolVar(HiveConf.ConfVars.HIVE_STATS_RELIABLE));
      Task<StatsNoJobWork> snjTask=TaskFactory.get(snjWork,parseContext.getConf());
      snjTask.setParentTasks(null);
      context.rootTasks.remove(context.currentTask);
      context.rootTasks.add(snjTask);
      return true;
    }
 else {
      StatsWork statsWork=new StatsWork(parseInfo.getTableSpec());
      statsWork.setAggKey(tableScan.getConf().getStatsAggPrefix());
      statsWork.setSourceTask(context.currentTask);
      statsWork.setStatsReliable(parseContext.getConf().getBoolVar(HiveConf.ConfVars.HIVE_STATS_RELIABLE));
      Task<StatsWork> statsTask=TaskFactory.get(statsWork,parseContext.getConf());
      context.currentTask.addDependentTask(statsTask);
      if (parseInfo.isNoScanAnalyzeCommand()) {
        statsTask.setParentTasks(null);
        statsWork.setNoScanAnalyzeCommand(true);
        context.rootTasks.remove(context.currentTask);
        context.rootTasks.add(statsTask);
      }
      if (parseInfo.isPartialScanAnalyzeCommand()) {
        handlePartialScanCommand(tableScan,parseContext,parseInfo,statsWork,context,statsTask);
      }
      Set<Partition> confirmedPartns=GenMapRedUtils.getConfirmedPartitionsForScan(parseInfo);
      PrunedPartitionList partitions=null;
      if (confirmedPartns.size() > 0) {
        Table source=queryBlock.getMetaData().getTableForAlias(alias);
        List<String> partCols=GenMapRedUtils.getPartitionColumns(parseInfo);
        partitions=new PrunedPartitionList(source,confirmedPartns,partCols,false);
      }
      MapWork w=utils.createMapWork(context,tableScan,sparkWork,partitions);
      w.setGatheringStats(true);
      return true;
    }
  }
  return null;
}
