{
  if (childExpressions != null) {
    super.evaluateChildren(batch);
  }
  if (inSet == null) {
    inSet=new CuckooSetBytes(inListValues.length);
    inSet.load(inListValues);
  }
  BytesColumnVector inputColVector=(BytesColumnVector)batch.cols[inputCol];
  LongColumnVector outputColVector=(LongColumnVector)batch.cols[outputColumn];
  int[] sel=batch.selected;
  boolean[] nullPos=inputColVector.isNull;
  int n=batch.size;
  byte[][] vector=inputColVector.vector;
  int[] start=inputColVector.start;
  int[] len=inputColVector.length;
  long[] outputVector=outputColVector.vector;
  if (n == 0) {
    return;
  }
  outputColVector.isRepeating=inputColVector.isRepeating;
  outputColVector.noNulls=inputColVector.noNulls;
  if (inputColVector.noNulls) {
    if (inputColVector.isRepeating) {
      outputVector[0]=inSet.lookup(vector[0],start[0],len[0]) ? 1 : 0;
    }
 else     if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        outputVector[i]=inSet.lookup(vector[i],start[i],len[i]) ? 1 : 0;
      }
    }
 else {
      for (int i=0; i != n; i++) {
        outputVector[i]=inSet.lookup(vector[i],start[i],len[i]) ? 1 : 0;
      }
    }
  }
 else {
    if (inputColVector.isRepeating) {
      if (!nullPos[0]) {
        outputVector[0]=inSet.lookup(vector[0],start[0],len[0]) ? 1 : 0;
      }
      outputColVector.isNull[0]=nullPos[0];
    }
 else     if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        if (!nullPos[i]) {
          outputVector[i]=inSet.lookup(vector[i],start[i],len[i]) ? 1 : 0;
        }
        outputColVector.isNull[i]=nullPos[i];
      }
    }
 else {
      System.arraycopy(nullPos,0,outputColVector.isNull,0,n);
      for (int i=0; i != n; i++) {
        if (!nullPos[i]) {
          outputVector[i]=inSet.lookup(vector[i],start[i],len[i]) ? 1 : 0;
        }
      }
    }
  }
}
