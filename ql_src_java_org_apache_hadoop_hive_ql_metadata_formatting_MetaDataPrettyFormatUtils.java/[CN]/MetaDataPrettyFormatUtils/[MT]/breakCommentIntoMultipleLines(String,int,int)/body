{
  if (prettyOutputNumCols == -1) {
    prettyOutputNumCols=80 - 1;
  }
  int commentNumCols=prettyOutputNumCols - columnsAlreadyConsumed;
  if (commentNumCols < MIN_COMMENT_COLUMN_LEN) {
    commentNumCols=MIN_COMMENT_COLUMN_LEN;
  }
  int commentNumColsConsumed=0;
  StringTokenizer st=new StringTokenizer(comment," \t\n\r\f",true);
  StringBuilder commentBuilder=new StringBuilder(comment.length());
  while (st.hasMoreTokens()) {
    String currWord=st.nextToken();
    if (currWord.equals("\n") || currWord.equals("\r") || currWord.equals("\f")) {
      commentBuilder.append(currWord);
      commentNumColsConsumed=0;
      continue;
    }
    if (commentNumColsConsumed + currWord.length() > commentNumCols) {
      if (currWord.length() > commentNumCols) {
        while (currWord.length() > commentNumCols) {
          int remainingLineLen=commentNumCols - commentNumColsConsumed;
          String wordChunk=currWord.substring(0,remainingLineLen);
          commentBuilder.append(wordChunk);
          commentBuilder.append(MetaDataFormatUtils.LINE_DELIM);
          commentNumColsConsumed=0;
          currWord=currWord.substring(remainingLineLen);
        }
        if (currWord.length() > 0) {
          commentBuilder.append(currWord);
          commentNumColsConsumed=currWord.length();
        }
      }
 else {
        commentBuilder.append(MetaDataFormatUtils.LINE_DELIM);
        if (!currWord.equals(" ")) {
          commentBuilder.append(currWord);
          commentNumColsConsumed=currWord.length();
        }
 else {
          commentNumColsConsumed=0;
        }
      }
    }
 else {
      commentBuilder.append(currWord);
      commentNumColsConsumed+=currWord.length();
    }
  }
  return commentBuilder.toString();
}
