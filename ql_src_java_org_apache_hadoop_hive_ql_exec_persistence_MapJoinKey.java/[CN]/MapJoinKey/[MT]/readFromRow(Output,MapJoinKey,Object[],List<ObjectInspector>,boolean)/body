{
  boolean useOptimized=useOptimizedKeyBasedOnPrev(key);
  if (useOptimized || key == null) {
    if (keyObject.length <= 8) {
      byte[] structBytes;
      if (keyObject.length == 0) {
        structBytes=EMPTY_BYTE_ARRAY;
      }
 else {
        output=serializeRow(output,keyObject,keyFieldsOI,null);
        structBytes=Arrays.copyOf(output.getData(),output.getLength());
      }
      return MapJoinKeyBytes.fromBytes(key,mayReuseKey,structBytes);
    }
    if (useOptimized) {
      throw new HiveException("Failed to serialize " + Arrays.toString(keyObject) + " even though optimized keys are used");
    }
  }
  MapJoinKeyObject result=mayReuseKey ? (MapJoinKeyObject)key : new MapJoinKeyObject();
  result.readFromRow(keyObject,keyFieldsOI);
  return result;
}
