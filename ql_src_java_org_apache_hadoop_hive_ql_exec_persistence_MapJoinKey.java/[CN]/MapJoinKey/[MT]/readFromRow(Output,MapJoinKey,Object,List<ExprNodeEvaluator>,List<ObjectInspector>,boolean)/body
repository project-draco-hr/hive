{
  Object[] fieldObjs=new Object[fields.size()];
  for (int keyIndex=0; keyIndex < fields.size(); ++keyIndex) {
    fieldObjs[keyIndex]=fields.get(keyIndex).evaluate(row);
  }
  boolean useOptimized=useOptimizedKeyBasedOnPrev(key);
  if (useOptimized || key == null) {
    try {
      byte[] structBytes=serializeRow(output,fieldObjs,keyFieldsOI);
      if (structBytes != null) {
        return MapJoinKeyBytes.fromBytes(key,mayReuseKey,structBytes);
      }
 else       if (useOptimized) {
        throw new HiveException("Failed to serialize " + row + " even though optimized keys are used");
      }
    }
 catch (    SerDeException ex) {
      throw new HiveException("Serialization error",ex);
    }
  }
  MapJoinKeyObject result=mayReuseKey ? (MapJoinKeyObject)key : new MapJoinKeyObject();
  result.readFromRow(fieldObjs,keyFieldsOI);
  return result;
}
