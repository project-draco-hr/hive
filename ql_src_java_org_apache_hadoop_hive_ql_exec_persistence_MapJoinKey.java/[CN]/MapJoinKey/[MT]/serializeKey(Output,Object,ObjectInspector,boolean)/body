{
  if (null == obj || !(oi instanceof StructObjectInspector)) {
    return null;
  }
  StructObjectInspector soi=(StructObjectInspector)oi;
  List<? extends StructField> fields=soi.getAllStructFieldRefs();
  int size=fields.size();
  if (size > 8) {
    return null;
  }
 else   if (size == 0) {
    return EMPTY_BYTE_ARRAY;
  }
  Object[] fieldData=new Object[size];
  List<ObjectInspector> fieldOis=new ArrayList<ObjectInspector>(size);
  for (int i=0; i < size; ++i) {
    StructField field=fields.get(i);
    ObjectInspector foi=field.getFieldObjectInspector();
    if (checkTypes) {
      if (foi.getCategory() != Category.PRIMITIVE)       return null;
      PrimitiveCategory pc=((PrimitiveObjectInspector)foi).getPrimitiveCategory();
      if (!SUPPORTED_PRIMITIVES.contains(pc))       return null;
    }
    fieldData[i]=soi.getStructFieldData(obj,field);
    fieldOis.add(foi);
  }
  return serializeRowCommon(byteStream,fieldData,fieldOis);
}
