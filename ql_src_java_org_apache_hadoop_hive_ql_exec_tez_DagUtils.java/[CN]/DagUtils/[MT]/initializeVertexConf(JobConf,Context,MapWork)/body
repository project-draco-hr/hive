{
  JobConf conf=new JobConf(baseConf);
  if (mapWork.getNumMapTasks() != null) {
    conf.setInt(MRJobConfig.NUM_MAPS,mapWork.getNumMapTasks().intValue());
  }
  if (mapWork.getMaxSplitSize() != null) {
    HiveConf.setLongVar(conf,HiveConf.ConfVars.MAPREDMAXSPLITSIZE,mapWork.getMaxSplitSize().longValue());
  }
  if (mapWork.getMinSplitSize() != null) {
    HiveConf.setLongVar(conf,HiveConf.ConfVars.MAPREDMINSPLITSIZE,mapWork.getMinSplitSize().longValue());
  }
  if (mapWork.getMinSplitSizePerNode() != null) {
    HiveConf.setLongVar(conf,HiveConf.ConfVars.MAPREDMINSPLITSIZEPERNODE,mapWork.getMinSplitSizePerNode().longValue());
  }
  if (mapWork.getMinSplitSizePerRack() != null) {
    HiveConf.setLongVar(conf,HiveConf.ConfVars.MAPREDMINSPLITSIZEPERRACK,mapWork.getMinSplitSizePerRack().longValue());
  }
  Utilities.setInputAttributes(conf,mapWork);
  String inpFormat=HiveConf.getVar(conf,HiveConf.ConfVars.HIVETEZINPUTFORMAT);
  if ((inpFormat == null) || (!StringUtils.isNotBlank(inpFormat))) {
    inpFormat=ShimLoader.getHadoopShims().getInputFormatClassName();
  }
  if (mapWork.isUseBucketizedHiveInputFormat()) {
    inpFormat=BucketizedHiveInputFormat.class.getName();
  }
  if (mapWork.isUseOneNullRowInputFormat()) {
    inpFormat=CombineHiveInputFormat.class.getName();
  }
  if (mapWork.getDummyTableScan()) {
    inpFormat=CombineHiveInputFormat.class.getName();
  }
  conf.set(TEZ_TMP_DIR_KEY,context.getMRTmpPath().toUri().toString());
  conf.set("mapred.mapper.class",ExecMapper.class.getName());
  conf.set("mapred.input.format.class",inpFormat);
  return conf;
}
