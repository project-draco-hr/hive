{
  int rowCount=rows.length;
  int columnCount=primitiveTypeInfos.length;
  boolean[] columnsToInclude=null;
  if (useIncludeColumns) {
    columnsToInclude=new boolean[columnCount];
    for (int i=0; i < columnCount; i++) {
      columnsToInclude[i]=r.nextBoolean();
    }
  }
  int writeColumnCount=columnCount;
  PrimitiveTypeInfo[] writePrimitiveTypeInfos=primitiveTypeInfos;
  if (doWriteFewerColumns) {
    writeColumnCount=writeRowOI.getAllStructFieldRefs().size();
    writePrimitiveTypeInfos=Arrays.copyOf(primitiveTypeInfos,writeColumnCount);
  }
  LazyBinarySerializeWrite lazyBinarySerializeWrite=new LazyBinarySerializeWrite(writeColumnCount);
  BytesWritable serializeWriteBytes[]=new BytesWritable[rowCount];
  for (int i=0; i < rowCount; i++) {
    Object[] row=rows[i];
    Output output=new Output();
    lazyBinarySerializeWrite.set(output);
    for (int index=0; index < writeColumnCount; index++) {
      Writable writable=(Writable)row[index];
      VerifyFast.serializeWrite(lazyBinarySerializeWrite,primitiveTypeInfos[index],writable);
    }
    BytesWritable bytesWritable=new BytesWritable();
    bytesWritable.set(output.getData(),0,output.getLength());
    serializeWriteBytes[i]=bytesWritable;
  }
  for (int i=0; i < rowCount; i++) {
    Object[] row=rows[i];
    LazyBinaryDeserializeRead lazyBinaryDeserializeRead=new LazyBinaryDeserializeRead(writePrimitiveTypeInfos);
    if (useIncludeColumns) {
      lazyBinaryDeserializeRead.setColumnsToInclude(columnsToInclude);
    }
    BytesWritable bytesWritable=serializeWriteBytes[i];
    lazyBinaryDeserializeRead.set(bytesWritable.getBytes(),0,bytesWritable.getLength());
    for (int index=0; index < columnCount; index++) {
      if (index >= writeColumnCount || (useIncludeColumns && !columnsToInclude[index])) {
        VerifyFast.verifyDeserializeRead(lazyBinaryDeserializeRead,primitiveTypeInfos[index],null);
      }
 else {
        Writable writable=(Writable)row[index];
        VerifyFast.verifyDeserializeRead(lazyBinaryDeserializeRead,primitiveTypeInfos[index],writable);
      }
    }
    lazyBinaryDeserializeRead.extraFieldsCheck();
    if (doWriteFewerColumns) {
      TestCase.assertTrue(lazyBinaryDeserializeRead.readBeyondConfiguredFieldsWarned());
    }
 else {
      TestCase.assertTrue(!lazyBinaryDeserializeRead.readBeyondConfiguredFieldsWarned());
    }
    TestCase.assertTrue(!lazyBinaryDeserializeRead.readBeyondBufferRangeWarned());
    TestCase.assertTrue(!lazyBinaryDeserializeRead.bufferRangeHasExtraDataWarned());
  }
  for (int i=0; i < rowCount; i++) {
    BytesWritable bytesWritable=serializeWriteBytes[i];
    LazyBinaryStruct lazyBinaryStruct;
    if (doWriteFewerColumns) {
      lazyBinaryStruct=(LazyBinaryStruct)serde_fewer.deserialize(bytesWritable);
    }
 else {
      lazyBinaryStruct=(LazyBinaryStruct)serde.deserialize(bytesWritable);
    }
    Object[] row=rows[i];
    for (int index=0; index < writeColumnCount; index++) {
      PrimitiveTypeInfo primitiveTypeInfo=primitiveTypeInfos[index];
      Writable writable=(Writable)row[index];
      Object object=lazyBinaryStruct.getField(index);
      if (writable == null || object == null) {
        if (writable != null || object != null) {
          fail("SerDe deserialized NULL column mismatch");
        }
      }
 else {
        if (!object.equals(writable)) {
          fail("SerDe deserialized value does not match");
        }
      }
    }
  }
  BytesWritable serdeBytes[]=new BytesWritable[rowCount];
  Object[] serdeRow=new Object[writeColumnCount];
  for (int i=0; i < rowCount; i++) {
    Object[] row=rows[i];
    for (int index=0; index < writeColumnCount; index++) {
      serdeRow[index]=row[index];
    }
    BytesWritable serialized;
    if (doWriteFewerColumns) {
      serialized=(BytesWritable)serde_fewer.serialize(serdeRow,writeRowOI);
    }
 else {
      serialized=(BytesWritable)serde.serialize(serdeRow,rowOI);
    }
    BytesWritable bytesWritable=new BytesWritable(Arrays.copyOfRange(serialized.getBytes(),0,serialized.getLength()));
    byte[] bytes1=bytesWritable.getBytes();
    BytesWritable lazySerializedWriteBytes=serializeWriteBytes[i];
    byte[] bytes2=Arrays.copyOfRange(lazySerializedWriteBytes.getBytes(),0,lazySerializedWriteBytes.getLength());
    if (bytes1.length != bytes2.length) {
      fail("SerializeWrite length " + bytes2.length + " and "+ "SerDe serialization length "+ bytes1.length+ " do not match ("+ Arrays.toString(primitiveTypeInfos)+ ")");
    }
    if (!Arrays.equals(bytes1,bytes2)) {
      fail("SerializeWrite and SerDe serialization does not match (" + Arrays.toString(primitiveTypeInfos) + ")");
    }
    serdeBytes[i]=bytesWritable;
  }
  for (int i=0; i < rowCount; i++) {
    Object[] row=rows[i];
    LazyBinaryDeserializeRead lazyBinaryDeserializeRead=new LazyBinaryDeserializeRead(primitiveTypeInfos);
    if (useIncludeColumns) {
      lazyBinaryDeserializeRead.setColumnsToInclude(columnsToInclude);
    }
    BytesWritable bytesWritable=serdeBytes[i];
    lazyBinaryDeserializeRead.set(bytesWritable.getBytes(),0,bytesWritable.getLength());
    for (int index=0; index < columnCount; index++) {
      if (index >= writeColumnCount || (useIncludeColumns && !columnsToInclude[index])) {
        VerifyFast.verifyDeserializeRead(lazyBinaryDeserializeRead,primitiveTypeInfos[index],null);
      }
 else {
        Writable writable=(Writable)row[index];
        VerifyFast.verifyDeserializeRead(lazyBinaryDeserializeRead,primitiveTypeInfos[index],writable);
      }
    }
    lazyBinaryDeserializeRead.extraFieldsCheck();
    TestCase.assertTrue(!lazyBinaryDeserializeRead.readBeyondConfiguredFieldsWarned());
    if (doWriteFewerColumns) {
    }
 else {
      TestCase.assertTrue(!lazyBinaryDeserializeRead.readBeyondBufferRangeWarned());
    }
    TestCase.assertTrue(!lazyBinaryDeserializeRead.bufferRangeHasExtraDataWarned());
  }
}
