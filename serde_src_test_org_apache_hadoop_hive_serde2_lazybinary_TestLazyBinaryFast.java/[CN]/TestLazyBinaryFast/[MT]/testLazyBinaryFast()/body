{
  try {
    int num=1000;
    Random r=new Random(1234);
    MyTestPrimitiveClass[] rows=new MyTestPrimitiveClass[num];
    PrimitiveTypeInfo[][] primitiveTypeInfosArray=new PrimitiveTypeInfo[num][];
    for (int i=0; i < num; i++) {
      int randField=r.nextInt(MyTestPrimitiveClass.primitiveCount);
      MyTestPrimitiveClass t=new MyTestPrimitiveClass();
      int field=0;
      ExtraTypeInfo extraTypeInfo=new ExtraTypeInfo();
      t.randomFill(r,randField,field,extraTypeInfo);
      PrimitiveTypeInfo[] primitiveTypeInfos=MyTestPrimitiveClass.getPrimitiveTypeInfos(extraTypeInfo);
      rows[i]=t;
      primitiveTypeInfosArray[i]=primitiveTypeInfos;
    }
    StructObjectInspector[] rowOIs=new StructObjectInspector[num];
    SerDe[] serdes=new SerDe[num];
    for (int i=0; i < num; i++) {
      MyTestPrimitiveClass t=rows[i];
      StructObjectInspector rowOI=t.getRowInspector(primitiveTypeInfosArray[i]);
      String fieldNames=ObjectInspectorUtils.getFieldNames(rowOI);
      String fieldTypes=ObjectInspectorUtils.getFieldTypes(rowOI);
      rowOIs[i]=rowOI;
      serdes[i]=TestLazyBinarySerDe.getSerDe(fieldNames,fieldTypes);
    }
    testLazyBinaryFast(rows,serdes,rowOIs,primitiveTypeInfosArray);
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw e;
  }
}
