{
  int rownum=1000;
  Path inputPath=new Path(workDir,"TestOrcFile." + testCaseName.getMethodName() + ".txt");
  Path outputPath=new Path(workDir,"TestOrcFile." + testCaseName.getMethodName() + ".orc");
  localFs.delete(outputPath,true);
  PrintWriter pw=new PrintWriter(new OutputStreamWriter(localFs.create(inputPath)));
  Random r=new Random(1000L);
  boolean firstRow=true;
  int firstIntValue=0;
  String firstStringValue=null;
  for (int i=0; i < rownum; i++) {
    int intValue=r.nextInt();
    String stringValue=UUID.randomUUID().toString();
    if (firstRow) {
      firstRow=false;
      firstIntValue=intValue;
      firstStringValue=stringValue;
    }
    pw.println(intValue + "," + stringValue);
  }
  pw.close();
  Job job=new Job(conf,"orc test");
  job.setOutputFormatClass(OrcNewOutputFormat.class);
  job.setJarByClass(TestNewInputOutputFormat.class);
  job.setMapperClass(OrcTestMapper2.class);
  job.setNumReduceTasks(0);
  job.setOutputKeyClass(NullWritable.class);
  job.setOutputValueClass(Writable.class);
  FileInputFormat.addInputPath(job,inputPath);
  FileOutputFormat.setOutputPath(job,outputPath);
  boolean result=job.waitForCompletion(true);
  assertTrue(result);
  Path outputFilePath=new Path(outputPath,"part-m-00000");
  assertTrue(localFs.exists(outputFilePath));
  Reader reader=OrcFile.createReader(localFs,outputFilePath,conf);
  assertTrue(reader.getNumberOfRows() == rownum);
  assertEquals(reader.getCompression(),CompressionKind.ZLIB);
  StructObjectInspector soi=(StructObjectInspector)reader.getObjectInspector();
  StructTypeInfo ti=(StructTypeInfo)TypeInfoUtils.getTypeInfoFromObjectInspector(soi);
  assertEquals(((PrimitiveTypeInfo)ti.getAllStructFieldTypeInfos().get(0)).getPrimitiveCategory(),PrimitiveObjectInspector.PrimitiveCategory.INT);
  assertEquals(((PrimitiveTypeInfo)ti.getAllStructFieldTypeInfos().get(1)).getPrimitiveCategory(),PrimitiveObjectInspector.PrimitiveCategory.STRING);
  RecordReader rows=reader.rows(null);
  Object row=rows.next(null);
  IntWritable intWritable=(IntWritable)soi.getStructFieldData(row,soi.getAllStructFieldRefs().get(0));
  Text text=(Text)soi.getStructFieldData(row,soi.getAllStructFieldRefs().get(1));
  assertEquals(intWritable.get(),firstIntValue);
  assertEquals(text.toString(),firstStringValue);
  localFs.delete(outputPath,true);
}
