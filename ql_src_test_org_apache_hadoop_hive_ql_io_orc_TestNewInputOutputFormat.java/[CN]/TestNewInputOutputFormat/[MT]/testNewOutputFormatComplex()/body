{
  Path inputPath=new Path(workDir,"TestOrcFile." + testCaseName.getMethodName() + ".txt");
  Path outputPath=new Path(workDir,"TestOrcFile." + testCaseName.getMethodName() + ".orc");
  localFs.delete(outputPath,true);
  PrintWriter pw=new PrintWriter(new OutputStreamWriter(localFs.create(inputPath)));
  pw.println("I have eaten");
  pw.println("the plums");
  pw.println("that were in");
  pw.println("the icebox");
  pw.println("and which");
  pw.println("you were probably");
  pw.println("saving");
  pw.println("for breakfast");
  pw.println("Forgive me");
  pw.println("they were delicious");
  pw.println("so sweet");
  pw.println("and so cold");
  pw.close();
  Job job=new Job(conf,"orc test");
  job.setOutputFormatClass(OrcNewOutputFormat.class);
  job.setJarByClass(TestNewInputOutputFormat.class);
  job.setMapperClass(OrcTestMapper3.class);
  job.setReducerClass(OrcTestReducer3.class);
  job.setMapOutputKeyClass(IntWritable.class);
  job.setMapOutputValueClass(Text.class);
  job.setOutputKeyClass(NullWritable.class);
  job.setOutputValueClass(OrcSerdeRow.class);
  FileInputFormat.addInputPath(job,inputPath);
  FileOutputFormat.setOutputPath(job,outputPath);
  boolean result=job.waitForCompletion(true);
  assertTrue(result);
  Path outputFilePath=new Path(outputPath,"part-r-00000");
  Reader reader=OrcFile.createReader(localFs,outputFilePath);
  RecordReader rows=reader.rows(null);
  ObjectInspector orcOi=reader.getObjectInspector();
  ObjectInspector stoi=TypeInfoUtils.getStandardJavaObjectInspectorFromTypeInfo(OrcTestReducer3.typeInfo);
  ObjectInspectorConverters.Converter converter=ObjectInspectorConverters.getConverter(orcOi,stoi);
  Object row=rows.next(null);
  List<Object> converted=(List<Object>)converter.convert(row);
  assertEquals(converted.get(0),1);
  assertEquals(converted.get(1),1);
  List<Object> list=(List<Object>)converted.get(2);
  assertEquals(list.size(),1);
  assertEquals(((List<Object>)list.get(0)).get(0),"saving");
  assertEquals(((List<Object>)list.get(0)).get(1),6);
  Map<String,Integer> map=(Map<String,Integer>)converted.get(3);
  assertEquals(map.size(),1);
  assertEquals(map.get("saving"),new Integer(1));
  row=rows.next(null);
  converted=(List<Object>)converter.convert(row);
  assertEquals(converted.get(0),2);
  assertEquals(converted.get(1),6);
  list=(List<Object>)converted.get(2);
  assertEquals(list.size(),6);
  assertEquals(((List<Object>)list.get(0)).get(0),"plums");
  assertEquals(((List<Object>)list.get(0)).get(1),5);
  map=(Map<String,Integer>)converted.get(3);
  assertEquals(map.size(),11);
  assertEquals(map.get("the"),new Integer(2));
  row=rows.next(null);
  converted=(List<Object>)converter.convert(row);
  assertEquals(converted.get(0),3);
  assertEquals(converted.get(1),5);
  list=(List<Object>)converted.get(2);
  assertEquals(list.size(),5);
  assertEquals(((List<Object>)list.get(0)).get(0),"eaten");
  assertEquals(((List<Object>)list.get(0)).get(1),5);
  map=(Map<String,Integer>)converted.get(3);
  assertEquals(map.size(),13);
  assertEquals(map.get("were"),new Integer(3));
  assertFalse(rows.hasNext());
  localFs.delete(outputPath,true);
}
