{
  Job job=new Job(conf,"orc test");
  job.setInputFormatClass(OrcNewInputFormat.class);
  job.setJarByClass(TestNewInputOutputFormat.class);
  job.setMapperClass(OrcTestMapper1.class);
  job.setNumReduceTasks(0);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(IntWritable.class);
  FileInputFormat.addInputPath(job,new Path(HiveTestUtils.getFileFromClasspath("orc-file-11-format.orc")));
  Path outputPath=new Path(workDir,"TestOrcFile." + testCaseName.getMethodName() + ".txt");
  localFs.delete(outputPath,true);
  FileOutputFormat.setOutputPath(job,outputPath);
  boolean result=job.waitForCompletion(true);
  assertTrue(result);
  Path outputFilePath=new Path(outputPath,"part-m-00000");
  assertTrue(localFs.exists(outputFilePath));
  BufferedReader reader=new BufferedReader(new InputStreamReader(localFs.open(outputFilePath)));
  int count=0;
  String line;
  String lastLine=null;
  while ((line=reader.readLine()) != null) {
    count++;
    lastLine=line;
  }
  reader.close();
  assertEquals(count,7500);
  assertEquals(lastLine,"{true, 100, 2048, 65536," + " 9223372036854775807, 2.0, -5.0" + ", , bye, {[{1, bye}, {2, sigh}]}, [{100000000, cat},"+ " {-100000, in}, {1234, hat}],"+ " {chani={5, chani}, mauddib={1, mauddib}},"+ " 2000-03-12 15:00:01, 12345678.6547457}");
  localFs.delete(outputPath,true);
}
