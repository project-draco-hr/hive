{
  driver.run("drop table if exists junit_parted_noisd");
  String createTable="create table junit_parted_noisd(a int) partitioned by (b string) stored as RCFILE";
  Assert.assertEquals(0,driver.run(createTable).getResponseCode());
  Table table=client.getTable("default","junit_parted_noisd");
  Assert.assertTrue(table.getSd().getInputFormat().equals(HCatConstants.HIVE_RCFILE_IF_CLASS));
  PigServer server=new PigServer(ExecType.LOCAL);
  logAndRegister(server,"A = load '" + INPUT_FILE_NAME + "' as (a:int);");
  logAndRegister(server,"store A into 'default.junit_parted_noisd' using org.apache.hive.hcatalog.pig.HCatStorer('b=42');");
  logAndRegister(server,"B = load 'default.junit_parted_noisd' using org.apache.hive.hcatalog.pig.HCatLoader();");
  Iterator<Tuple> itr=server.openIterator("B");
  int i=0;
  while (itr.hasNext()) {
    Tuple t=itr.next();
    Assert.assertEquals(2,t.size());
    Assert.assertEquals(t.get(0),i);
    Assert.assertEquals(t.get(1),"42");
    i++;
  }
  Assert.assertFalse(itr.hasNext());
  Assert.assertEquals(11,i);
  Table table2=client.getTable("default","junit_parted_noisd");
  Assert.assertTrue(table2.getSd().getInputFormat().equals(HCatConstants.HIVE_RCFILE_IF_CLASS));
  Partition ptn=client.getPartition("default","junit_parted_noisd",Arrays.asList("42"));
  Assert.assertNotNull(ptn);
  Assert.assertTrue(ptn.getSd().getInputFormat().equals(HCatConstants.HIVE_RCFILE_IF_CLASS));
  driver.run("drop table junit_unparted_noisd");
}
