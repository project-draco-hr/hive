{
  GroupByDesc desc=op.getConf();
  VectorGroupByDesc vectorDesc=desc.getVectorDesc();
  if (desc.isGroupingSetsPresent()) {
    LOG.info("Grouping sets not supported in vector mode");
    return false;
  }
  if (desc.pruneGroupingSetId()) {
    LOG.info("Pruning grouping set id not supported in vector mode");
    return false;
  }
  if (desc.getMode() != GroupByDesc.Mode.HASH && desc.isDistinct()) {
    LOG.info("DISTINCT not supported in vector mode");
    return false;
  }
  boolean ret=validateExprNodeDesc(desc.getKeys());
  if (!ret) {
    LOG.info("Cannot vectorize groupby key expression " + desc.getKeys().toString());
    return false;
  }
  boolean hasKeys=(desc.getKeys().size() > 0);
  ProcessingMode processingMode=VectorGroupByDesc.groupByDescModeToVectorProcessingMode(desc.getMode(),hasKeys);
  Pair<Boolean,Boolean> retPair=validateAggregationDescs(desc.getAggregators(),processingMode,hasKeys);
  if (!retPair.left) {
    return false;
  }
  vectorDesc.setVectorOutput(retPair.right);
  vectorDesc.setProcessingMode(processingMode);
  LOG.info("Vector GROUP BY operator will use processing mode " + processingMode.name() + ", isVectorOutput "+ vectorDesc.isVectorOutput());
  return true;
}
