{
  Operator<? extends OperatorDesc> vectorOp=null;
switch (op.getType()) {
case MAPJOIN:
{
      MapJoinDesc desc=(MapJoinDesc)op.getConf();
      boolean specialize=canSpecializeMapJoin(op,desc,isTez);
      if (!specialize) {
        Class<? extends Operator<?>> opClass=null;
        if (op instanceof MapJoinOperator) {
          List<ExprNodeDesc> bigTableFilters=desc.getFilters().get((byte)desc.getPosBigTable());
          boolean isOuterAndFiltered=(!desc.isNoOuterJoin() && bigTableFilters.size() > 0);
          if (!isOuterAndFiltered) {
            opClass=VectorMapJoinOperator.class;
          }
 else {
            opClass=VectorMapJoinOuterFilteredOperator.class;
          }
        }
 else         if (op instanceof SMBMapJoinOperator) {
          opClass=VectorSMBMapJoinOperator.class;
        }
        vectorOp=OperatorFactory.getVectorOperator(opClass,op.getConf(),vContext);
      }
 else {
        vectorOp=specializeMapJoinOperator(op,vContext,desc);
      }
    }
  break;
case GROUPBY:
case FILTER:
case SELECT:
case FILESINK:
case REDUCESINK:
case LIMIT:
case EXTRACT:
case EVENT:
vectorOp=OperatorFactory.getVectorOperator(op.getConf(),vContext);
break;
default :
vectorOp=op;
break;
}
LOG.info("vectorizeOperator " + (vectorOp == null ? "NULL" : vectorOp.getClass().getName()));
LOG.info("vectorizeOperator " + (vectorOp == null || vectorOp.getConf() == null ? "NULL" : vectorOp.getConf().getClass().getName()));
if (vectorOp != op) {
fixupParentChildOperators(op,vectorOp);
((AbstractOperatorDesc)vectorOp.getConf()).setVectorMode(true);
}
return vectorOp;
}
