{
  Comparator<String> comparerShorterString=new Comparator<String>(){
    @Override public int compare(    String o1,    String o2){
      Integer length1=o1.length();
      Integer length2=o2.length();
      return length1.compareTo(length2);
    }
  }
;
  Comparator<Integer> comparerInteger=new Comparator<Integer>(){
    @Override public int compare(    Integer o1,    Integer o2){
      return o1.compareTo(o2);
    }
  }
;
  Map<String,Map<Integer,String>> sortedAllColumnVectorMaps=new TreeMap<String,Map<Integer,String>>(comparerShorterString);
  for (  Map.Entry<String,Map<String,Integer>> entry : allColumnVectorMaps.entrySet()) {
    Map<Integer,String> sortedColumnMap=new TreeMap<Integer,String>(comparerInteger);
    for (    Map.Entry<String,Integer> innerEntry : entry.getValue().entrySet()) {
      sortedColumnMap.put(innerEntry.getValue(),innerEntry.getKey());
    }
    sortedAllColumnVectorMaps.put(entry.getKey(),sortedColumnMap);
  }
  LOG.debug("sortedAllColumnVectorMaps " + sortedAllColumnVectorMaps);
  Map<String,Map<Integer,String>> sortedAllScratchColumnVectorTypeMap=new TreeMap<String,Map<Integer,String>>(comparerShorterString);
  for (  Map.Entry<String,Map<Integer,String>> entry : allScratchColumnVectorTypeMaps.entrySet()) {
    Map<Integer,String> sortedScratchColumnTypeMap=new TreeMap<Integer,String>(comparerInteger);
    sortedScratchColumnTypeMap.putAll(entry.getValue());
    sortedAllScratchColumnVectorTypeMap.put(entry.getKey(),sortedScratchColumnTypeMap);
  }
  LOG.debug("sortedAllScratchColumnVectorTypeMap " + sortedAllScratchColumnVectorTypeMap);
}
