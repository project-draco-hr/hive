{
  ArrayList<String> reduceColumnNames=new ArrayList<String>();
  ArrayList<TypeInfo> reduceTypeInfos=new ArrayList<TypeInfo>();
  try {
    ObjectInspector keyObjectInspector=reduceWork.getKeyObjectInspector();
    if (keyObjectInspector == null || !(keyObjectInspector instanceof StructObjectInspector)) {
      return false;
    }
    StructObjectInspector keyStructObjectInspector=(StructObjectInspector)keyObjectInspector;
    List<? extends StructField> keyFields=keyStructObjectInspector.getAllStructFieldRefs();
    if (reduceWork.getNeedsTagging()) {
      return false;
    }
    ObjectInspector valueObjectInspector=reduceWork.getValueObjectInspector();
    if (valueObjectInspector == null || !(valueObjectInspector instanceof StructObjectInspector)) {
      return false;
    }
    StructObjectInspector valueStructObjectInspector=(StructObjectInspector)valueObjectInspector;
    List<? extends StructField> valueFields=valueStructObjectInspector.getAllStructFieldRefs();
    for (    StructField field : keyFields) {
      reduceColumnNames.add(Utilities.ReduceField.KEY.toString() + "." + field.getFieldName());
      reduceTypeInfos.add(TypeInfoUtils.getTypeInfoFromTypeString(field.getFieldObjectInspector().getTypeName()));
    }
    for (    StructField field : valueFields) {
      reduceColumnNames.add(Utilities.ReduceField.VALUE.toString() + "." + field.getFieldName());
      reduceTypeInfos.add(TypeInfoUtils.getTypeInfoFromTypeString(field.getFieldObjectInspector().getTypeName()));
    }
  }
 catch (  Exception e) {
    throw new SemanticException(e);
  }
  vectorTaskColumnInfo.setColumnNames(reduceColumnNames);
  vectorTaskColumnInfo.setTypeInfos(reduceTypeInfos);
  return true;
}
