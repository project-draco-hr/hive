{
  LOG.info("Vectorizing ReduceWork...");
  reduceWork.setVectorMode(true);
  Map<Rule,NodeProcessor> opRules=new LinkedHashMap<Rule,NodeProcessor>();
  ReduceWorkVectorizationNodeProcessor vnp=new ReduceWorkVectorizationNodeProcessor(reduceColumnNames);
  addReduceWorkRules(opRules,vnp);
  Dispatcher disp=new DefaultRuleDispatcher(vnp,opRules,null);
  GraphWalker ogw=new PreOrderWalker(disp);
  ArrayList<Node> topNodes=new ArrayList<Node>();
  topNodes.add(reduceWork.getReducer());
  LOG.info("vectorizeReduceWork reducer Operator: " + reduceWork.getReducer().getName() + "...");
  HashMap<Node,Object> nodeOutput=new HashMap<Node,Object>();
  ogw.startWalking(topNodes,nodeOutput);
  reduceWork.setReducer(vnp.getRootVectorOp());
  Map<String,Map<Integer,String>> allScratchColumnVectorTypeMaps=vnp.getAllScratchColumnVectorTypeMaps();
  reduceWork.setAllScratchColumnVectorTypeMaps(allScratchColumnVectorTypeMaps);
  Map<String,Map<String,Integer>> allColumnVectorMaps=vnp.getAllColumnVectorMaps();
  reduceWork.setAllColumnVectorMaps(allColumnVectorMaps);
  if (LOG.isDebugEnabled()) {
    debugDisplayAllMaps(allColumnVectorMaps,allScratchColumnVectorTypeMaps);
  }
}
