{
  LOG.info("Vectorizing ReduceWork...");
  reduceWork.setVectorMode(true);
  Map<Rule,NodeProcessor> opRules=new LinkedHashMap<Rule,NodeProcessor>();
  ReduceWorkVectorizationNodeProcessor vnp=new ReduceWorkVectorizationNodeProcessor(reduceWork,keyColCount,valueColCount);
  addReduceWorkRules(opRules,vnp);
  Dispatcher disp=new DefaultRuleDispatcher(vnp,opRules,null);
  GraphWalker ogw=new PreOrderWalker(disp);
  ArrayList<Node> topNodes=new ArrayList<Node>();
  topNodes.add(reduceWork.getReducer());
  LOG.info("vectorizeReduceWork reducer Operator: " + reduceWork.getReducer().getName() + "...");
  HashMap<Node,Object> nodeOutput=new HashMap<Node,Object>();
  ogw.startWalking(topNodes,nodeOutput);
  reduceWork.setReducer(vnp.getRootVectorOp());
  Operator<? extends OperatorDesc> reducer=reduceWork.getReducer();
  if (reducer.getType().equals(OperatorType.EXTRACT)) {
    ((VectorExtractOperator)reducer).setKeyAndValueColCounts(keyColCount,valueColCount);
  }
  Map<String,Map<Integer,String>> columnVectorTypes=vnp.getScratchColumnVectorTypes();
  reduceWork.setScratchColumnVectorTypes(columnVectorTypes);
  Map<String,Map<String,Integer>> columnMap=vnp.getScratchColumnMap();
  reduceWork.setScratchColumnMap(columnMap);
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format("vectorTypes: %s",columnVectorTypes.toString()));
    LOG.debug(String.format("columnMap: %s",columnMap.toString()));
  }
}
