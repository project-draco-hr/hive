{
  boolean isAcidTable=tableScanOperator.getConf().isAcidTable();
  final List<String> allColumnNameList=new ArrayList<String>();
  final List<TypeInfo> allTypeInfoList=new ArrayList<TypeInfo>();
  getTableScanOperatorSchemaInfo(tableScanOperator,allColumnNameList,allTypeInfoList);
  final List<Integer> dataColumnNums=new ArrayList<Integer>();
  final int allColumnCount=allColumnNameList.size();
  boolean isFirst=true;
  int dataColumnCount=0;
  int partitionColumnCount=0;
  List<String> tableDataColumnList=null;
  List<TypeInfo> tableDataTypeInfoList=null;
  LinkedHashMap<String,ArrayList<String>> pathToAliases=mapWork.getPathToAliases();
  LinkedHashMap<String,PartitionDesc> pathToPartitionInfo=mapWork.getPathToPartitionInfo();
  for (  Entry<String,ArrayList<String>> entry : pathToAliases.entrySet()) {
    String path=entry.getKey();
    List<String> aliases=entry.getValue();
    boolean isPresent=(aliases != null && aliases.indexOf(alias) != -1);
    if (!isPresent) {
      LOG.info("Alias " + alias + " not present in aliases "+ aliases);
      return false;
    }
    PartitionDesc partDesc=pathToPartitionInfo.get(path);
    if (partDesc.getVectorPartitionDesc() != null) {
      continue;
    }
    if (!verifyAndSetVectorPartDesc(partDesc,isAcidTable)) {
      return false;
    }
    VectorPartitionDesc vectorPartDesc=partDesc.getVectorPartitionDesc();
    if (LOG.isInfoEnabled()) {
      LOG.info("Vectorizer path: " + path + ", "+ vectorPartDesc.toString()+ ", aliases "+ aliases);
    }
    if (isFirst) {
      LinkedHashMap<String,String> partSpec=partDesc.getPartSpec();
      if (partSpec != null && partSpec.size() > 0) {
        partitionColumnCount=partSpec.size();
        dataColumnCount=allColumnCount - partitionColumnCount;
      }
 else {
        partitionColumnCount=0;
        dataColumnCount=allColumnCount;
      }
      determineDataColumnNums(tableScanOperator,allColumnNameList,dataColumnCount,dataColumnNums);
      tableDataColumnList=allColumnNameList.subList(0,dataColumnCount);
      tableDataTypeInfoList=allTypeInfoList.subList(0,dataColumnCount);
      isFirst=false;
    }
    Deserializer deserializer;
    StructObjectInspector partObjectInspector;
    try {
      deserializer=partDesc.getDeserializer(hiveConf);
      partObjectInspector=(StructObjectInspector)deserializer.getObjectInspector();
    }
 catch (    Exception e) {
      throw new SemanticException(e);
    }
    String nextDataColumnsString=ObjectInspectorUtils.getFieldNames(partObjectInspector);
    String[] nextDataColumns=nextDataColumnsString.split(",");
    List<String> nextDataColumnList=Arrays.asList(nextDataColumns);
    if (nextDataColumnList.size() > tableDataColumnList.size()) {
      LOG.info(String.format("Could not vectorize partition %s " + "(deserializer " + deserializer.getClass().getName() + ")"+ "The partition column names %d is greater than the number of table columns %d",path,nextDataColumnList.size(),tableDataColumnList.size()));
      return false;
    }
    if (!(deserializer instanceof NullStructSerDe)) {
      for (int i=0; i < nextDataColumnList.size(); i++) {
        String nextColumnName=nextDataColumnList.get(i);
        String tableColumnName=tableDataColumnList.get(i);
        if (!nextColumnName.equals(tableColumnName)) {
          LOG.info(String.format("Could not vectorize partition %s " + "(deserializer " + deserializer.getClass().getName() + ")"+ "The partition column name %s is does not match table column name %s",path,nextColumnName,tableColumnName));
          return false;
        }
      }
    }
    List<TypeInfo> nextDataTypeInfoList;
    if (vectorPartDesc.getIsInputFileFormatSelfDescribing()) {
      nextDataTypeInfoList=tableDataTypeInfoList;
    }
 else {
      String nextDataTypesString=ObjectInspectorUtils.getFieldTypes(partObjectInspector);
      nextDataTypeInfoList=TypeInfoUtils.getTypeInfosFromTypeString(nextDataTypesString);
    }
    vectorPartDesc.setDataTypeInfos(nextDataTypeInfoList);
  }
  vectorTaskColumnInfo.setAllColumnNames(allColumnNameList);
  vectorTaskColumnInfo.setAllTypeInfos(allTypeInfoList);
  vectorTaskColumnInfo.setDataColumnNums(dataColumnNums);
  vectorTaskColumnInfo.setPartitionColumnCount(partitionColumnCount);
  vectorTaskColumnInfo.setUseVectorizedInputFileFormat(useVectorizedInputFileFormat);
  vectorTaskColumnInfo.setTableScanOperator(tableScanOperator);
  return true;
}
