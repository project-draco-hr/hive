{
  Node firstOp=stack.firstElement();
  TableScanOperator tsOp=null;
  tsOp=(TableScanOperator)firstOp;
  VectorizationContext vContext=vContextsByTSOp.get(tsOp);
  if (vContext == null) {
    String fileKey="";
    for (    String onefile : mWork.getPathToAliases().keySet()) {
      List<String> aliases=mWork.getPathToAliases().get(onefile);
      for (      String alias : aliases) {
        Operator<? extends OperatorDesc> op=mWork.getAliasToWork().get(alias);
        if (op == tsOp) {
          fileKey=onefile;
          if (vContext == null) {
            vContext=getVectorizationContext(tsOp,physicalContext);
          }
          vContext.setFileKey(fileKey);
          vectorizationContexts.put(fileKey,vContext);
          break;
        }
      }
    }
    vContextsByTSOp.put(tsOp,vContext);
  }
  Operator<? extends OperatorDesc> op=(Operator<? extends OperatorDesc>)nd;
  if (op.getType().equals(OperatorType.REDUCESINK) && op.getParentOperators().get(0).getType().equals(OperatorType.GROUPBY)) {
    if (!opsDone.contains(op)) {
      opsDone.add(op);
    }
  }
 else {
    try {
      if (!opsDone.contains(op)) {
        Operator<? extends OperatorDesc> vectorOp=vectorizeOperator(op,vContext);
        opsDone.add(op);
        if (vectorOp != op) {
          opsDone.add(vectorOp);
        }
      }
    }
 catch (    HiveException e) {
      throw new SemanticException(e);
    }
  }
  return null;
}
