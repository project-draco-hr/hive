{
  mockBeeline=mock(BeeLine.class);
  mockBeeLineOpts=mock(BeeLineOpts.class);
  when(mockBeeLineOpts.getMaxColumnWidth()).thenReturn(BeeLineOpts.DEFAULT_MAX_COLUMN_WIDTH);
  when(mockBeeLineOpts.getNumberFormat()).thenReturn("default");
  when(mockBeeLineOpts.getNullString()).thenReturn("NULL");
  when(mockBeeline.getOpts()).thenReturn(mockBeeLineOpts);
  mockResultSet=mock(ResultSet.class);
  ResultSetMetaData mockResultSetMetaData=mock(ResultSetMetaData.class);
  when(mockResultSetMetaData.getColumnCount()).thenReturn(2);
  when(mockResultSetMetaData.getColumnLabel(1)).thenReturn("Key");
  when(mockResultSetMetaData.getColumnLabel(2)).thenReturn("Value");
  when(mockResultSet.getMetaData()).thenReturn(mockResultSetMetaData);
  mockRow=new MockRow();
  when(mockResultSet.next()).thenAnswer(new Answer<Boolean>(){
    private int mockRowDataIndex=0;
    public Boolean answer(    InvocationOnMock invocation){
      if (mockRowDataIndex < mockRowData.length) {
        mockRow.setCurrentRowData(mockRowData[mockRowDataIndex]);
        mockRowDataIndex++;
        return true;
      }
 else {
        return false;
      }
    }
  }
);
  when(mockResultSet.getString(Matchers.anyInt())).thenAnswer(new Answer<String>(){
    public String answer(    InvocationOnMock invocation){
      Object[] args=invocation.getArguments();
      int index=((Integer)args[0]).intValue();
      return mockRow.getColumn(index);
    }
  }
);
}
