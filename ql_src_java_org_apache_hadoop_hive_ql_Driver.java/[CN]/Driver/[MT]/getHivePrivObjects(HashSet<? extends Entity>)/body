{
  List<HivePrivilegeObject> hivePrivobjs=new ArrayList<HivePrivilegeObject>();
  if (privObjects == null) {
    return hivePrivobjs;
  }
  for (  Entity privObject : privObjects) {
    HivePrivilegeObjectType privObjType=AuthorizationUtils.getHivePrivilegeObjectType(privObject.getType());
    if (privObject instanceof ReadEntity && !((ReadEntity)privObject).isDirect()) {
      continue;
    }
    if (privObject instanceof WriteEntity && ((WriteEntity)privObject).isTempURI()) {
      continue;
    }
    String dbname=null;
    String objName=null;
switch (privObject.getType()) {
case DATABASE:
      dbname=privObject.getDatabase() == null ? null : privObject.getDatabase().getName();
    break;
case TABLE:
  dbname=privObject.getTable() == null ? null : privObject.getTable().getDbName();
objName=privObject.getTable() == null ? null : privObject.getTable().getTableName();
break;
case DFS_DIR:
case LOCAL_DIR:
objName=privObject.getD();
break;
case FUNCTION:
objName=privObject.getFunctionName();
break;
case DUMMYPARTITION:
case PARTITION:
continue;
default :
throw new AssertionError("Unexpected object type");
}
HivePrivObjectActionType actionType=AuthorizationUtils.getActionType(privObject);
HivePrivilegeObject hPrivObject=new HivePrivilegeObject(privObjType,dbname,objName,actionType);
hivePrivobjs.add(hPrivObject);
}
return hivePrivobjs;
}
