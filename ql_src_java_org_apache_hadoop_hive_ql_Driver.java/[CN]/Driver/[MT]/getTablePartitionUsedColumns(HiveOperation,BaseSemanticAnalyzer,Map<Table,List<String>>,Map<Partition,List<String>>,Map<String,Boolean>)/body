{
  if (op.equals(HiveOperation.CREATETABLE_AS_SELECT) || op.equals(HiveOperation.QUERY)) {
    SemanticAnalyzer querySem=(SemanticAnalyzer)sem;
    ParseContext parseCtx=querySem.getParseContext();
    for (    Map.Entry<String,TableScanOperator> topOpMap : querySem.getParseContext().getTopOps().entrySet()) {
      TableScanOperator topOp=topOpMap.getValue();
      TableScanOperator tableScanOp=topOp;
      Table tbl=tableScanOp.getConf().getTableMetadata();
      List<Integer> neededColumnIds=tableScanOp.getNeededColumnIDs();
      List<FieldSchema> columns=tbl.getCols();
      List<String> cols=new ArrayList<String>();
      for (int i=0; i < neededColumnIds.size(); i++) {
        cols.add(columns.get(neededColumnIds.get(i)).getName());
      }
      if (tbl.isPartitioned() && Boolean.TRUE.equals(tableUsePartLevelAuth.get(tbl.getTableName()))) {
        String alias_id=topOpMap.getKey();
        PrunedPartitionList partsList=PartitionPruner.prune(tableScanOp,parseCtx,alias_id);
        Set<Partition> parts=partsList.getPartitions();
        for (        Partition part : parts) {
          List<String> existingCols=part2Cols.get(part);
          if (existingCols == null) {
            existingCols=new ArrayList<String>();
          }
          existingCols.addAll(cols);
          part2Cols.put(part,existingCols);
        }
      }
 else {
        List<String> existingCols=tab2Cols.get(tbl);
        if (existingCols == null) {
          existingCols=new ArrayList<String>();
        }
        existingCols.addAll(cols);
        tab2Cols.put(tbl,existingCols);
      }
    }
  }
}
