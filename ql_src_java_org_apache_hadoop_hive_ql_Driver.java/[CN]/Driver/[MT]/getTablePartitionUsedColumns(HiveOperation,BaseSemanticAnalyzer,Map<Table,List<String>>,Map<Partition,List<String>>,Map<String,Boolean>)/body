{
  if (op.equals(HiveOperation.CREATETABLE_AS_SELECT) || op.equals(HiveOperation.QUERY)) {
    SemanticAnalyzer querySem=(SemanticAnalyzer)sem;
    ParseContext parseCtx=querySem.getParseContext();
    Map<TableScanOperator,Table> tsoTopMap=parseCtx.getTopToTable();
    for (    Map.Entry<String,Operator<? extends OperatorDesc>> topOpMap : querySem.getParseContext().getTopOps().entrySet()) {
      Operator<? extends OperatorDesc> topOp=topOpMap.getValue();
      if (topOp instanceof TableScanOperator && tsoTopMap.containsKey(topOp)) {
        TableScanOperator tableScanOp=(TableScanOperator)topOp;
        Table tbl=tsoTopMap.get(tableScanOp);
        List<Integer> neededColumnIds=tableScanOp.getNeededColumnIDs();
        List<FieldSchema> columns=tbl.getCols();
        List<String> cols=new ArrayList<String>();
        for (int i=0; i < neededColumnIds.size(); i++) {
          cols.add(columns.get(neededColumnIds.get(i)).getName());
        }
        if (tbl.isPartitioned() && tableUsePartLevelAuth.get(tbl.getTableName()) == Boolean.TRUE) {
          String alias_id=topOpMap.getKey();
          PrunedPartitionList partsList=PartitionPruner.prune(tableScanOp,parseCtx,alias_id);
          Set<Partition> parts=partsList.getPartitions();
          for (          Partition part : parts) {
            List<String> existingCols=part2Cols.get(part);
            if (existingCols == null) {
              existingCols=new ArrayList<String>();
            }
            existingCols.addAll(cols);
            part2Cols.put(part,existingCols);
          }
        }
 else {
          List<String> existingCols=tab2Cols.get(tbl);
          if (existingCols == null) {
            existingCols=new ArrayList<String>();
          }
          existingCols.addAll(cols);
          tab2Cols.put(tbl,existingCols);
        }
      }
    }
  }
}
