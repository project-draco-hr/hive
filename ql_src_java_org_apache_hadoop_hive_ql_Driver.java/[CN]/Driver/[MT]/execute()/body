{
  boolean noName=StringUtils.isEmpty(conf.getVar(HiveConf.ConfVars.HADOOPJOBNAME));
  int maxlen=conf.getIntVar(HiveConf.ConfVars.HIVEJOBNAMELENGTH);
  int curJobNo=0;
  String queryId=plan.getQueryId();
  String queryStr=plan.getQueryStr();
  conf.setVar(HiveConf.ConfVars.HIVEQUERYID,queryId);
  conf.setVar(HiveConf.ConfVars.HIVEQUERYSTRING,queryStr);
  maxthreads=HiveConf.getIntVar(conf,HiveConf.ConfVars.EXECPARALLETHREADNUMBER);
  try {
    LOG.info("Starting command: " + queryStr);
    plan.setStarted();
    if (SessionState.get() != null) {
      SessionState.get().getHiveHistory().startQuery(queryStr,conf.getVar(HiveConf.ConfVars.HIVEQUERYID));
      SessionState.get().getHiveHistory().logPlanProgress(plan);
    }
    resStream=null;
    for (    PreExecute peh : getPreExecHooks()) {
      peh.run(SessionState.get(),plan.getInputs(),plan.getOutputs(),UnixUserGroupInformation.readFromConf(conf,UnixUserGroupInformation.UGI_PROPERTY_NAME));
    }
    int jobs=countJobs(plan.getRootTasks());
    if (jobs > 0) {
      console.printInfo("Total MapReduce jobs = " + jobs);
    }
    if (SessionState.get() != null) {
      SessionState.get().getHiveHistory().setQueryProperty(queryId,Keys.QUERY_NUM_TASKS,String.valueOf(jobs));
      SessionState.get().getHiveHistory().setIdToTableMap(plan.getIdToTableNameMap());
    }
    String jobname=Utilities.abbreviate(queryStr,maxlen - 6);
    Queue<Task<? extends Serializable>> runnable=new LinkedList<Task<? extends Serializable>>();
    Map<TaskResult,TaskRunner> running=new HashMap<TaskResult,TaskRunner>();
    DriverContext driverCxt=new DriverContext(runnable);
    for (    Task<? extends Serializable> tsk : plan.getRootTasks()) {
      driverCxt.addToRunnable(tsk);
    }
    while (running.size() != 0 || runnable.peek() != null) {
      while (runnable.peek() != null && running.size() < maxthreads) {
        Task<? extends Serializable> tsk=runnable.remove();
        launchTask(tsk,queryId,noName,running,jobname,jobs,driverCxt);
      }
      TaskResult tskRes=pollTasks(running.keySet());
      TaskRunner tskRun=running.remove(tskRes);
      Task<? extends Serializable> tsk=tskRun.getTask();
      int exitVal=tskRes.getExitVal();
      if (exitVal != 0) {
        errorMessage="FAILED: Execution Error, return code " + exitVal + " from "+ tsk.getClass().getName();
        SQLState="08S01";
        console.printError(errorMessage);
        if (running.size() != 0) {
          taskCleanup();
        }
        return 9;
      }
      if (SessionState.get() != null) {
        SessionState.get().getHiveHistory().setTaskProperty(queryId,tsk.getId(),Keys.TASK_RET_CODE,String.valueOf(exitVal));
        SessionState.get().getHiveHistory().endTask(queryId,tsk);
      }
      if (tsk.getChildTasks() != null) {
        for (        Task<? extends Serializable> child : tsk.getChildTasks()) {
          if (DriverContext.isLaunchable(child)) {
            driverCxt.addToRunnable(child);
          }
        }
      }
    }
    for (    PostExecute peh : getPostExecHooks()) {
      peh.run(SessionState.get(),plan.getInputs(),plan.getOutputs(),(SessionState.get() != null ? SessionState.get().getLineageState().getLineageInfo() : null),UnixUserGroupInformation.readFromConf(conf,UnixUserGroupInformation.UGI_PROPERTY_NAME));
    }
    if (SessionState.get() != null) {
      SessionState.get().getHiveHistory().setQueryProperty(queryId,Keys.QUERY_RET_CODE,String.valueOf(0));
      SessionState.get().getHiveHistory().printRowCount(queryId);
    }
  }
 catch (  Exception e) {
    if (SessionState.get() != null) {
      SessionState.get().getHiveHistory().setQueryProperty(queryId,Keys.QUERY_RET_CODE,String.valueOf(12));
    }
    errorMessage="FAILED: Hive Internal Error: " + Utilities.getNameMessage(e);
    SQLState="08S01";
    console.printError(errorMessage + "\n" + org.apache.hadoop.util.StringUtils.stringifyException(e));
    return (12);
  }
 finally {
    if (SessionState.get() != null) {
      SessionState.get().getHiveHistory().endQuery(queryId);
    }
    if (noName) {
      conf.setVar(HiveConf.ConfVars.HADOOPJOBNAME,"");
    }
  }
  plan.setDone();
  if (SessionState.get() != null) {
    try {
      SessionState.get().getHiveHistory().logPlanProgress(plan);
    }
 catch (    Exception e) {
    }
  }
  console.printInfo("OK");
  return (0);
}
