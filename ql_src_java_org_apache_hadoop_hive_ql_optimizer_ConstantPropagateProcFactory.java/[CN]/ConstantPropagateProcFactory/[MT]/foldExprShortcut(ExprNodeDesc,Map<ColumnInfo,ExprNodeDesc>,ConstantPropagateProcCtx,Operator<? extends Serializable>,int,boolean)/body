{
  desc=foldNegative(desc);
  if (desc instanceof ExprNodeGenericFuncDesc) {
    ExprNodeGenericFuncDesc funcDesc=(ExprNodeGenericFuncDesc)desc;
    GenericUDF udf=funcDesc.getGenericUDF();
    boolean propagateNext=propagate && propagatableUdfs.contains(udf.getClass());
    List<ExprNodeDesc> newExprs=new ArrayList<ExprNodeDesc>();
    for (    ExprNodeDesc childExpr : desc.getChildren()) {
      newExprs.add(foldExpr(childExpr,constants,cppCtx,op,tag,propagateNext));
    }
    if (!isDeterministicUdf(udf,newExprs)) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Function " + udf.getClass() + " is undeterministic. Don't evalulate immediately.");
      }
      ((ExprNodeGenericFuncDesc)desc).setChildren(newExprs);
      return desc;
    }
    ExprNodeDesc shortcut=shortcutFunction(udf,newExprs,op);
    if (shortcut != null) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Folding expression:" + desc + " -> "+ shortcut);
      }
      return shortcut;
    }
    ((ExprNodeGenericFuncDesc)desc).setChildren(newExprs);
  }
  return desc;
}
