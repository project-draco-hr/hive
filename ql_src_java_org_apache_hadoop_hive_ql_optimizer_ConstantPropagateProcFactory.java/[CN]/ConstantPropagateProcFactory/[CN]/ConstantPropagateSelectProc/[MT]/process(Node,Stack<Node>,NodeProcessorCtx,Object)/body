{
  SelectOperator op=(SelectOperator)nd;
  ConstantPropagateProcCtx cppCtx=(ConstantPropagateProcCtx)ctx;
  Map<ColumnInfo,ExprNodeDesc> constants=cppCtx.getPropagatedConstants(op);
  cppCtx.getOpToConstantExprs().put(op,constants);
  foldOperator(op,cppCtx);
  List<ExprNodeDesc> colList=op.getConf().getColList();
  List<String> columnNames=op.getConf().getOutputColumnNames();
  Map<String,ExprNodeDesc> columnExprMap=op.getColumnExprMap();
  if (colList != null) {
    for (int i=0; i < colList.size(); i++) {
      ExprNodeDesc newCol=foldExpr(colList.get(i),constants,cppCtx,op,0,false);
      if (!(colList.get(i) instanceof ExprNodeConstantDesc) && newCol instanceof ExprNodeConstantDesc) {
        String colName=colList.get(i).getExprString();
        if (HiveConf.getPositionFromInternalName(colName) == -1) {
          ((ExprNodeConstantDesc)newCol).setFoldedFromCol(colName);
        }
 else {
          ExprNodeDesc desc=columnExprMap.get(colName);
          if (desc instanceof ExprNodeConstantDesc) {
            ((ExprNodeConstantDesc)newCol).setFoldedFromCol(((ExprNodeConstantDesc)desc).getFoldedFromCol());
          }
        }
      }
      colList.set(i,newCol);
      if (columnExprMap != null) {
        columnExprMap.put(columnNames.get(i),newCol);
      }
    }
    LOG.debug("New column list:(" + StringUtils.join(colList," ") + ")");
  }
  return null;
}
