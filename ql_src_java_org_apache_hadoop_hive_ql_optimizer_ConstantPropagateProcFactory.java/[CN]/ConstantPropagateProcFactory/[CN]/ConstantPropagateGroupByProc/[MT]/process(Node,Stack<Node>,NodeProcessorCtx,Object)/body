{
  GroupByOperator op=(GroupByOperator)nd;
  ConstantPropagateProcCtx cppCtx=(ConstantPropagateProcCtx)ctx;
  Map<ColumnInfo,ExprNodeDesc> colToConstants=cppCtx.getPropagatedConstants(op);
  cppCtx.getOpToConstantExprs().put(op,colToConstants);
  RowSchema rs=op.getSchema();
  if (op.getColumnExprMap() != null && rs != null) {
    for (    ColumnInfo colInfo : rs.getSignature()) {
      if (!VirtualColumn.isVirtualColumnBasedOnAlias(colInfo)) {
        ExprNodeDesc expr=op.getColumnExprMap().get(colInfo.getInternalName());
        if (expr instanceof ExprNodeConstantDesc) {
          colToConstants.put(colInfo,expr);
        }
      }
    }
  }
  if (colToConstants.isEmpty()) {
    return null;
  }
  GroupByDesc conf=op.getConf();
  ArrayList<ExprNodeDesc> keys=conf.getKeys();
  for (int i=0; i < keys.size(); i++) {
    ExprNodeDesc key=keys.get(i);
    ExprNodeDesc newkey=foldExpr(key,colToConstants,cppCtx,op,0,false);
    keys.set(i,newkey);
  }
  foldOperator(op,cppCtx);
  return null;
}
