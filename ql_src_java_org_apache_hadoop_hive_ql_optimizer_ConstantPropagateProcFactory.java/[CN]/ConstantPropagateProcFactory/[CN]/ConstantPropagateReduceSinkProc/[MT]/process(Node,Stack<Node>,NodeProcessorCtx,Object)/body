{
  ReduceSinkOperator op=(ReduceSinkOperator)nd;
  ReduceSinkDesc rsDesc=op.getConf();
  ConstantPropagateProcCtx cppCtx=(ConstantPropagateProcCtx)ctx;
  Map<ColumnInfo,ExprNodeDesc> constants=cppCtx.getPropagatedConstants(op);
  cppCtx.getOpToConstantExprs().put(op,constants);
  if (constants.isEmpty()) {
    return null;
  }
  if (op.getChildOperators().size() == 1 && op.getChildOperators().get(0) instanceof JoinOperator) {
    JoinOperator joinOp=(JoinOperator)op.getChildOperators().get(0);
    if (skipFolding(joinOp.getConf())) {
      LOG.debug("Skip folding in outer join " + op);
      cppCtx.getOpToConstantExprs().put(op,new HashMap<ColumnInfo,ExprNodeDesc>());
      return null;
    }
  }
  if (rsDesc.getDistinctColumnIndices() != null && !rsDesc.getDistinctColumnIndices().isEmpty()) {
    LOG.debug("Skip folding in distinct subqueries " + op);
    cppCtx.getOpToConstantExprs().put(op,new HashMap<ColumnInfo,ExprNodeDesc>());
    return null;
  }
  ArrayList<ExprNodeDesc> newKeyEpxrs=new ArrayList<ExprNodeDesc>();
  for (  ExprNodeDesc desc : rsDesc.getKeyCols()) {
    ExprNodeDesc newDesc=foldExpr(desc,constants,cppCtx,op,0,false);
    if (newDesc != desc && desc instanceof ExprNodeColumnDesc && newDesc instanceof ExprNodeConstantDesc) {
      ((ExprNodeConstantDesc)newDesc).setFoldedFromCol(((ExprNodeColumnDesc)desc).getColumn());
    }
    newKeyEpxrs.add(newDesc);
  }
  rsDesc.setKeyCols(newKeyEpxrs);
  ArrayList<ExprNodeDesc> newPartExprs=new ArrayList<ExprNodeDesc>();
  for (  ExprNodeDesc desc : rsDesc.getPartitionCols()) {
    ExprNodeDesc expr=foldExpr(desc,constants,cppCtx,op,0,false);
    if (expr != desc && desc instanceof ExprNodeColumnDesc && expr instanceof ExprNodeConstantDesc) {
      ((ExprNodeConstantDesc)expr).setFoldedFromCol(((ExprNodeColumnDesc)desc).getColumn());
    }
    newPartExprs.add(expr);
  }
  rsDesc.setPartitionCols(newPartExprs);
  ArrayList<ExprNodeDesc> newValExprs=new ArrayList<ExprNodeDesc>();
  for (  ExprNodeDesc desc : rsDesc.getValueCols()) {
    newValExprs.add(foldExpr(desc,constants,cppCtx,op,0,false));
  }
  rsDesc.setValueCols(newValExprs);
  foldOperator(op,cppCtx);
  return null;
}
