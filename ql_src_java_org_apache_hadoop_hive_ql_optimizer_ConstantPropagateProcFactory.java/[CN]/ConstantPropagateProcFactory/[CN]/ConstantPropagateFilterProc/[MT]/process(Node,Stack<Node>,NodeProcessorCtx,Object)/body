{
  FilterOperator op=(FilterOperator)nd;
  ConstantPropagateProcCtx cppCtx=(ConstantPropagateProcCtx)ctx;
  Map<ColumnInfo,ExprNodeDesc> constants=cppCtx.getPropagatedConstants(op);
  cppCtx.getOpToConstantExprs().put(op,constants);
  ExprNodeDesc condn=op.getConf().getPredicate();
  if (LOG.isDebugEnabled()) {
    LOG.debug("Old filter FIL[" + op.getIdentifier() + "] conditions:"+ condn.getExprString());
  }
  ExprNodeDesc newCondn=foldExpr(condn,constants,cppCtx,op,0,true);
  if (newCondn instanceof ExprNodeConstantDesc) {
    ExprNodeConstantDesc c=(ExprNodeConstantDesc)newCondn;
    if (Boolean.TRUE.equals(c.getValue())) {
      cppCtx.addOpToDelete(op);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Filter expression " + condn + " holds true. Will delete it.");
      }
    }
 else     if (Boolean.FALSE.equals(c.getValue())) {
      if (LOG.isWarnEnabled()) {
        LOG.warn("Filter expression " + condn + " holds false!");
      }
    }
  }
  if (newCondn instanceof ExprNodeConstantDesc && ((ExprNodeConstantDesc)newCondn).getValue() == null) {
    newCondn=new ExprNodeConstantDesc(Boolean.FALSE);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("New filter FIL[" + op.getIdentifier() + "] conditions:"+ newCondn.getExprString());
  }
  op.getConf().setPredicate(newCondn);
  foldOperator(op,cppCtx);
  return null;
}
