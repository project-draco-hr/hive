def write(self, oprot):
    if ((oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and (self.thrift_spec is not None) and (fastbinary is not None)):
        oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
        return
    oprot.writeStructBegin('get_schema_result')
    if (self.success != None):
        oprot.writeFieldBegin('success', TType.MAP, 0)
        oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
        for (kiter14, viter15) in self.success.items():
            oprot.writeString(kiter14)
            oprot.writeString(viter15)
        oprot.writeMapEnd()
        oprot.writeFieldEnd()
    if (self.ouch != None):
        oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
        self.ouch.write(oprot)
        oprot.writeFieldEnd()
    if (self.ouch2 != None):
        oprot.writeFieldBegin('ouch2', TType.STRUCT, (-1))
        self.ouch2.write(oprot)
        oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
