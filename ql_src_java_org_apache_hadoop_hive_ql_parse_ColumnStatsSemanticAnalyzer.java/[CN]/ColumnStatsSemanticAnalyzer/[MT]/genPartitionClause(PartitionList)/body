{
  StringBuilder whereClause=new StringBuilder(" where ");
  boolean predPresent=false;
  StringBuilder groupByClause=new StringBuilder(" group by ");
  boolean aggPresent=false;
  StringBuilder retClause=null;
  String[] partKeys=partList.getPartKeys();
  String[] partValues=partList.getPartValues();
  String[] partKeysType=getPartitionKeysType(partList);
  for (int i=0; i < partList.getNumPartitions(); i++) {
    if (partValues[i] != null) {
      if (!predPresent) {
        whereClause.append(partKeys[i]);
        whereClause.append(" = ");
        if (partKeysType[i].equalsIgnoreCase("string")) {
          whereClause.append("'");
        }
        whereClause.append(partValues[i]);
        if (partKeysType[i].equalsIgnoreCase("string")) {
          whereClause.append("'");
        }
        predPresent=true;
      }
 else {
        whereClause.append(" and ");
        whereClause.append(partKeys[i]);
        whereClause.append(" = ");
        if (partKeysType[i].equalsIgnoreCase("string")) {
          whereClause.append("'");
        }
        whereClause.append(partValues[i]);
        if (partKeysType[i].equalsIgnoreCase("string")) {
          whereClause.append("'");
        }
      }
    }
 else {
      if (!aggPresent) {
        groupByClause.append(partKeys[i]);
        aggPresent=true;
      }
 else {
        groupByClause.append(",");
        groupByClause.append(partKeys[i]);
      }
    }
  }
  if (predPresent) {
    retClause=new StringBuilder(whereClause);
  }
  if (aggPresent) {
    retClause.append(groupByClause);
  }
  return retClause;
}
