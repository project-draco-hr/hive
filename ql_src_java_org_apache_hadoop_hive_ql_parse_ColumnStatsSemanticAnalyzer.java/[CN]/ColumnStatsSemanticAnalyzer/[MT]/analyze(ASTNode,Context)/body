{
  QB qb;
  QBParseInfo qbp;
  init(true);
  super.processNoScanCommand(ast);
  super.processPartialScanCommand(ast);
  if (shouldRewrite(ast)) {
    tbl=getTable(ast);
    colNames=getColumnName(ast);
    originalTree=ast;
    boolean isPartitionStats=isPartitionLevelStats(ast);
    Map<String,String> partSpec=null;
    checkForPartitionColumns(colNames,Utilities.getColumnNamesFromFieldSchema(tbl.getPartitionKeys()));
    validateSpecifiedColumnNames(colNames);
    if (conf.getBoolVar(ConfVars.HIVE_STATS_COLLECT_PART_LEVEL_STATS) && tbl.isPartitioned()) {
      isPartitionStats=true;
    }
    if (isPartitionStats) {
      isTableLevel=false;
      partSpec=getPartKeyValuePairsFromAST(tbl,ast,conf);
      handlePartialPartitionSpec(partSpec);
    }
 else {
      isTableLevel=true;
    }
    colType=getColumnTypes(colNames);
    int numBitVectors=getNumBitVectorsForNDVEstimation(conf);
    rewrittenQuery=genRewrittenQuery(colNames,numBitVectors,partSpec,isPartitionStats);
    rewrittenTree=genRewrittenTree(rewrittenQuery);
  }
 else {
    originalTree=rewrittenTree=ast;
    rewrittenQuery=null;
    isRewritten=false;
  }
  if (isRewritten) {
    qb=getQB();
    qb.setAnalyzeRewrite(true);
    qbp=qb.getParseInfo();
    analyzeRewrite=new AnalyzeRewriteContext();
    analyzeRewrite.setTableName(tbl.getDbName() + "." + tbl.getTableName());
    analyzeRewrite.setTblLvl(isTableLevel);
    analyzeRewrite.setColName(colNames);
    analyzeRewrite.setColType(colType);
    qbp.setAnalyzeRewrite(analyzeRewrite);
    initCtx(ctx);
    LOG.info("Invoking analyze on rewritten query");
    analyzeInternal(rewrittenTree);
  }
 else {
    initCtx(origCtx);
    LOG.info("Invoking analyze on original query");
    analyzeInternal(originalTree);
  }
}
