{
  String selectStr="select field1, field2, sum(field3+field4)";
  String whereStr="field5=1 and field6 in ('a', 'b')";
  String havingStr="sum(field7) > 11";
  ASTNode tree=parseDriver.parse(selectStr + " from table1 where " + whereStr+ " group by field1, field2 having  "+ havingStr);
  assertEquals(tree.getType(),0);
  assertEquals(tree.getChildCount(),2);
  ASTNode queryTree=(ASTNode)tree.getChild(0);
  assertEquals(tree.getChild(1).getType(),HiveParser.EOF);
  assertEquals(queryTree.getChildCount(),2);
  ASTNode fromAST=(ASTNode)queryTree.getChild(0);
  ASTNode insertAST=(ASTNode)queryTree.getChild(1);
  assertEquals(fromAST.getType(),HiveParser.TOK_FROM);
  assertEquals(fromAST.getChildCount(),1);
  assertEquals(fromAST.getChild(0).getType(),HiveParser.TOK_TABREF);
  assertEquals(fromAST.getChild(0).getChildCount(),1);
  assertEquals(fromAST.getChild(0).getChild(0).getType(),HiveParser.TOK_TABNAME);
  assertEquals(fromAST.getChild(0).getChild(0).getChildCount(),1);
  assertEquals(fromAST.getChild(0).getChild(0).getChild(0).getType(),HiveParser.Identifier);
  assertEquals(fromAST.getChild(0).getChild(0).getChild(0).getText(),"table1");
  assertEquals(insertAST.getChildCount(),5);
  assertEquals(insertAST.getChild(0).getType(),HiveParser.TOK_DESTINATION);
  assertTree((ASTNode)insertAST.getChild(1),parseDriver.parseSelect(selectStr,null));
  assertEquals(insertAST.getChild(2).getType(),HiveParser.TOK_WHERE);
  assertTree((ASTNode)insertAST.getChild(2).getChild(0),parseDriver.parseExpression(whereStr));
  assertEquals(insertAST.getChild(3).getType(),HiveParser.TOK_GROUPBY);
  assertEquals(insertAST.getChild(3).getChildCount(),2);
  for (int i=0; i < 2; i++) {
    assertEquals(insertAST.getChild(3).getChild(i).getType(),HiveParser.TOK_TABLE_OR_COL);
    assertEquals(insertAST.getChild(3).getChild(i).getChild(0).getType(),HiveParser.Identifier);
    assertEquals(insertAST.getChild(3).getChild(i).getChild(0).getText(),"field" + (i + 1));
  }
  assertEquals(insertAST.getChild(4).getType(),HiveParser.TOK_HAVING);
  assertEquals(insertAST.getChild(4).getChildCount(),1);
  assertTree((ASTNode)insertAST.getChild(4).getChild(0),parseDriver.parseExpression(havingStr));
}
