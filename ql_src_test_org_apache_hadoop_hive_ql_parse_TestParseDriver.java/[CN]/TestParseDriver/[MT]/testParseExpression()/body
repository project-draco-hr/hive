{
  ASTNode plusNode=parseDriver.parseExpression("field3 + field4");
  assertEquals(plusNode.getType(),HiveParser.PLUS);
  assertEquals(plusNode.getChildCount(),2);
  for (int i=0; i < 2; i++) {
    assertEquals(plusNode.getChild(i).getType(),HiveParser.TOK_TABLE_OR_COL);
    assertEquals(plusNode.getChild(i).getChildCount(),1);
    assertEquals(plusNode.getChild(i).getChild(0).getType(),HiveParser.Identifier);
    assertEquals(plusNode.getChild(i).getChild(0).getText(),"field" + (i + 3));
  }
  ASTNode sumNode=parseDriver.parseExpression("sum(field3 + field4)");
  assertEquals(sumNode.getType(),HiveParser.TOK_FUNCTION);
  assertEquals(sumNode.getChildCount(),2);
  assertEquals(sumNode.getChild(0).getType(),HiveParser.Identifier);
  assertEquals(sumNode.getChild(0).getText(),"sum");
  assertTree((ASTNode)sumNode.getChild(1),plusNode);
  ASTNode tree=parseDriver.parseExpression("case when field1 = 1 then sum(field3 + field4) when field1 != 2 then " + "sum(field3-field4) else sum(field3 * field4) end");
  assertEquals(tree.getChildCount(),6);
  assertEquals(tree.getChild(0).getType(),HiveParser.KW_WHEN);
  assertEquals(tree.getChild(1).getType(),HiveParser.EQUAL);
  assertTree((ASTNode)tree.getChild(2),sumNode);
  assertEquals(tree.getChild(3).getType(),HiveParser.NOTEQUAL);
  assertTree((ASTNode)tree.getChild(4),parseDriver.parseExpression("sum(field3-field4)"));
  assertTree((ASTNode)tree.getChild(5),parseDriver.parseExpression("sum(field3*field4)"));
}
