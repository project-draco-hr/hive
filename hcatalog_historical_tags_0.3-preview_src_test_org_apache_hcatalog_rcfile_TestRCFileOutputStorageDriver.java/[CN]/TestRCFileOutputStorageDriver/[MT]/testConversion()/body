{
  Configuration conf=new Configuration();
  JobContext jc=new JobContext(conf,new JobID());
  String jobString=HCatUtil.serialize(OutputJobInfo.create(null,null,null,null,null));
  jc.getConfiguration().set(HCatConstants.HCAT_KEY_OUTPUT_INFO,jobString);
  HCatSchema schema=buildHiveSchema();
  HCatInputStorageDriver isd=new RCFileInputDriver();
  isd.setOriginalSchema(jc,schema);
  isd.setOutputSchema(jc,schema);
  isd.initialize(jc,new Properties());
  byte[][] byteArray=buildBytesArray();
  BytesRefArrayWritable bytesWritable=new BytesRefArrayWritable(byteArray.length);
  for (int i=0; i < byteArray.length; i++) {
    BytesRefWritable cu=new BytesRefWritable(byteArray[i],0,byteArray[i].length);
    bytesWritable.set(i,cu);
  }
  HCatRecord record=isd.convertToHCatRecord(null,bytesWritable);
  HCatOutputStorageDriver osd=new RCFileOutputDriver();
  osd.setSchema(jc,schema);
  osd.initialize(jc,new Properties());
  BytesRefArrayWritable bytesWritableOutput=(BytesRefArrayWritable)osd.convertValue(record);
  assertTrue(bytesWritableOutput.compareTo(bytesWritable) == 0);
}
