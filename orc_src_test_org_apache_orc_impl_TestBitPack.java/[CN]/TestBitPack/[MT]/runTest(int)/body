{
  long[] inp=new long[SIZE];
  for (int i=0; i < SIZE; i++) {
    long val=0;
    if (numBits <= 32) {
      if (numBits == 1) {
        val=-1 * rand.nextInt(2);
      }
 else {
        val=rand.nextInt((int)Math.pow(2,numBits - 1));
      }
    }
 else {
      val=nextLong(rand,(long)Math.pow(2,numBits - 2));
    }
    if (val % 2 == 0) {
      val=-val;
    }
    inp[i]=val;
  }
  long[] deltaEncoded=deltaEncode(inp);
  long minInput=Collections.min(Longs.asList(deltaEncoded));
  long maxInput=Collections.max(Longs.asList(deltaEncoded));
  long rangeInput=maxInput - minInput;
  SerializationUtils utils=new SerializationUtils();
  int fixedWidth=utils.findClosestNumBits(rangeInput);
  TestInStream.OutputCollector collect=new TestInStream.OutputCollector();
  OutStream output=new OutStream("test",SIZE,null,collect);
  utils.writeInts(deltaEncoded,0,deltaEncoded.length,fixedWidth,output);
  output.flush();
  ByteBuffer inBuf=ByteBuffer.allocate(collect.buffer.size());
  collect.buffer.setByteBuffer(inBuf,0,collect.buffer.size());
  inBuf.flip();
  long[] buff=new long[SIZE];
  utils.readInts(buff,0,SIZE,fixedWidth,InStream.create("test",new ByteBuffer[]{inBuf},new long[]{0},inBuf.remaining(),null,SIZE));
  for (int i=0; i < SIZE; i++) {
    buff[i]=utils.zigzagDecode(buff[i]);
  }
  assertEquals(numBits,fixedWidth);
  assertArrayEquals(inp,buff);
}
