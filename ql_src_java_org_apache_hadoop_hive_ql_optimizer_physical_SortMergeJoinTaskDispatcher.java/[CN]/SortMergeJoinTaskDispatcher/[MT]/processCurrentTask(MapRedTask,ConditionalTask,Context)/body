{
  MapredWork currWork=currTask.getWork();
  SMBMapJoinOperator originalSMBJoinOp=getSMBMapJoinOp(currWork);
  if (!isEligibleForOptimization(originalSMBJoinOp)) {
    return null;
  }
  currTask.setTaskTag(Task.CONVERTED_SORTMERGEJOIN);
  ParseContext parseCtx=physicalContext.getParseContext();
  QBJoinTree joinTree=parseCtx.getSmbMapJoinContext().get(originalSMBJoinOp);
  MapredWork currJoinWork=convertSMBWorkToJoinWork(currWork,originalSMBJoinOp);
  SMBMapJoinOperator newSMBJoinOp=getSMBMapJoinOp(currJoinWork);
  currWork.setOpParseCtxMap(parseCtx.getOpParseCtx());
  currWork.setJoinTree(joinTree);
  currJoinWork.setOpParseCtxMap(parseCtx.getOpParseCtx());
  currJoinWork.setJoinTree(joinTree);
  List<Serializable> listWorks=new ArrayList<Serializable>();
  List<Task<? extends Serializable>> listTasks=new ArrayList<Task<? extends Serializable>>();
  HashMap<String,Task<? extends Serializable>> aliasToTask=new HashMap<String,Task<? extends Serializable>>();
  HashMap<String,ArrayList<String>> pathToAliases=currJoinWork.getPathToAliases();
  SMBJoinDesc originalSMBJoinDesc=originalSMBJoinOp.getConf();
  Byte[] order=originalSMBJoinDesc.getTagOrder();
  int numAliases=order.length;
  Set<Integer> bigTableCandidates=MapJoinProcessor.getBigTableCandidates(originalSMBJoinDesc.getConds());
  if (bigTableCandidates == null) {
    return null;
  }
  HashMap<String,Long> aliasToSize=new HashMap<String,Long>();
  Configuration conf=context.getConf();
  try {
    long aliasTotalKnownInputSize=getTotalKnownInputSize(context,currJoinWork,pathToAliases,aliasToSize);
    String xml=currJoinWork.toXML();
    long ThresholdOfSmallTblSizeSum=HiveConf.getLongVar(conf,HiveConf.ConfVars.HIVESMALLTABLESFILESIZE);
    for (int bigTablePosition=0; bigTablePosition < numAliases; bigTablePosition++) {
      if (!bigTableCandidates.contains(bigTablePosition)) {
        continue;
      }
      ObjectPair<MapRedTask,String> newTaskAlias=convertSMBTaskToMapJoinTask(xml,bigTablePosition,newSMBJoinOp,joinTree);
      MapRedTask newTask=newTaskAlias.getFirst();
      String bigTableAlias=newTaskAlias.getSecond();
      Long aliasKnownSize=aliasToSize.get(bigTableAlias);
      if (aliasKnownSize != null && aliasKnownSize.longValue() > 0) {
        long smallTblTotalKnownSize=aliasTotalKnownInputSize - aliasKnownSize.longValue();
        if (smallTblTotalKnownSize > ThresholdOfSmallTblSizeSum) {
          continue;
        }
      }
      listWorks.add(newTask.getWork());
      listTasks.add(newTask);
      newTask.setTaskTag(Task.CONVERTED_MAPJOIN);
      newTask.setBackupTask(currTask);
      newTask.setBackupChildrenTasks(currTask.getChildTasks());
      aliasToTask.put(bigTableAlias,newTask);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new SemanticException("Generate Map Join Task Error: ",e);
  }
  listWorks.add(currTask.getWork());
  listTasks.add(currTask);
  currWork.setOpParseCtxMap(null);
  currWork.setJoinTree(null);
  ConditionalWork cndWork=new ConditionalWork(listWorks);
  ConditionalTask cndTsk=(ConditionalTask)TaskFactory.get(cndWork,parseCtx.getConf());
  cndTsk.setListTasks(listTasks);
  cndTsk.setResolver(new ConditionalResolverCommonJoin());
  ConditionalResolverCommonJoinCtx resolverCtx=new ConditionalResolverCommonJoinCtx();
  resolverCtx.setPathToAliases(pathToAliases);
  resolverCtx.setAliasToKnownSize(aliasToSize);
  resolverCtx.setAliasToTask(aliasToTask);
  resolverCtx.setCommonJoinTask(currTask);
  resolverCtx.setLocalTmpDir(context.getLocalScratchDir(false));
  resolverCtx.setHdfsTmpDir(context.getMRScratchDir());
  cndTsk.setResolverCtx(resolverCtx);
  replaceTaskWithConditionalTask(currTask,cndTsk,physicalContext);
  return cndTsk;
}
