{
  if (objInspector.getCategory() != Category.STRUCT) {
    throw new SerDeException(getClass().toString() + " can only serialize struct types, but we got: " + objInspector.getTypeName());
  }
  StructObjectInspector soi=(StructObjectInspector)objInspector;
  List<? extends StructField> fields=soi.getAllStructFieldRefs();
  List<Object> list=soi.getStructFieldsDataAsList(obj);
  LazyBinarySerDe.BooleanRef warnedOnceNullMapKey=new LazyBinarySerDe.BooleanRef(false);
  serializeStream.reset();
  serializedSize=0;
  int streamOffset=0;
  for (int i=0; i < fields.size(); i++) {
    ObjectInspector foi=fields.get(i).getFieldObjectInspector();
    Object f=(list == null ? null : list.get(i));
    if ((f != null) && (foi.getCategory().equals(ObjectInspector.Category.PRIMITIVE)) && ((PrimitiveObjectInspector)foi).getPrimitiveCategory().equals(PrimitiveObjectInspector.PrimitiveCategory.STRING)&& ((StringObjectInspector)foi).getPrimitiveJavaObject(f).length() == 0) {
      serializeStream.write(INVALID_UTF__SINGLE_BYTE,0,1);
    }
 else {
      LazyBinarySerDe.serialize(serializeStream,f,foi,true,warnedOnceNullMapKey);
    }
    field[i].set(serializeStream.getData(),streamOffset,serializeStream.getLength() - streamOffset);
    streamOffset=serializeStream.getLength();
  }
  serializedSize=serializeStream.getLength();
  lastOperationSerialize=true;
  lastOperationDeserialize=false;
  return serializeCache;
}
