{
  GSSManager manager=GSSManager.getInstance();
  GSSContext gssContext=null;
  String serverPrincipal=getPrincipalWithoutRealm(serviceUGI.getUserName());
  try {
    Oid kerberosMechOid=new Oid("1.2.840.113554.1.2.2");
    Oid spnegoMechOid=new Oid("1.3.6.1.5.5.2");
    Oid krb5PrincipalOid=new Oid("1.2.840.113554.1.2.2.1");
    GSSName serverName=manager.createName(serverPrincipal,krb5PrincipalOid);
    GSSCredential serverCreds=manager.createCredential(serverName,GSSCredential.DEFAULT_LIFETIME,new Oid[]{kerberosMechOid,spnegoMechOid},GSSCredential.ACCEPT_ONLY);
    gssContext=manager.createContext(serverCreds);
    String serviceTicketBase64=getAuthHeader(request,authType);
    byte[] inToken=Base64.decodeBase64(serviceTicketBase64.getBytes());
    gssContext.acceptSecContext(inToken,0,inToken.length);
    if (!gssContext.isEstablished()) {
      throw new HttpAuthenticationException("Kerberos authentication failed: " + "unable to establish context with the service ticket " + "provided by the client.");
    }
 else {
      return getPrincipalWithoutRealmAndHost(gssContext.getSrcName().toString());
    }
  }
 catch (  GSSException e) {
    throw new HttpAuthenticationException("Kerberos authentication failed: ",e);
  }
 finally {
    if (gssContext != null) {
      try {
        gssContext.dispose();
      }
 catch (      GSSException e) {
      }
    }
  }
}
