{
  parsed=true;
  byte itemSeparator=oi.getItemSeparator();
  byte keyValueSeparator=oi.getKeyValueSeparator();
  boolean isEscaped=oi.isEscaped();
  byte escapeChar=oi.getEscapeChar();
  if (length == 0) {
    mapSize=0;
    return;
  }
  mapSize=0;
  int arrayByteEnd=start + length;
  int elementByteBegin=start;
  int keyValueSeparatorPosition=-1;
  int elementByteEnd=start;
  byte[] bytes=this.bytes.getData();
  Set<Object> keySet=new HashSet<Object>();
  while (elementByteEnd <= arrayByteEnd) {
    if (elementByteEnd == arrayByteEnd || bytes[elementByteEnd] == itemSeparator) {
      if (keyStart == null || mapSize + 1 == keyStart.length) {
        enlargeArrays();
      }
      keyStart[mapSize]=elementByteBegin;
      keyEnd[mapSize]=(keyValueSeparatorPosition == -1 ? elementByteEnd : keyValueSeparatorPosition);
      valueLength[mapSize]=elementByteEnd - (keyEnd[mapSize] + 1);
      LazyPrimitive<?,?> lazyKey=uncheckedGetKey(mapSize);
      if (lazyKey == null) {
        LOG.warn("skipped empty entry or entry with empty key in the representation of column with MAP type.");
        keyInited[mapSize]=false;
      }
 else {
        Object key=lazyKey.getObject();
        if (!keySet.contains(key)) {
          mapSize++;
          keySet.add(key);
        }
 else {
          keyInited[mapSize]=false;
        }
      }
      keyValueSeparatorPosition=-1;
      elementByteBegin=elementByteEnd + 1;
      elementByteEnd++;
    }
 else {
      if (keyValueSeparatorPosition == -1 && bytes[elementByteEnd] == keyValueSeparator) {
        keyValueSeparatorPosition=elementByteEnd;
      }
      if (isEscaped && bytes[elementByteEnd] == escapeChar && elementByteEnd + 1 < arrayByteEnd) {
        elementByteEnd+=2;
      }
 else {
        elementByteEnd++;
      }
    }
  }
  keyStart[mapSize]=arrayByteEnd + 1;
  if (mapSize > 0) {
    Arrays.fill(valueInited,0,mapSize,false);
  }
}
