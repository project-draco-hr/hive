{
  int threads=4;
  ExecutorService executorService=Executors.newFixedThreadPool(threads);
  for (int i=0; i < threads; i++) {
    final int n=i;
    executorService.submit(new Callable<Void>(){
      @Override public Void call() throws Exception {
        MetricsFactory.getMetricsInstance().startScope("method2");
        MetricsFactory.getMetricsInstance().endScope("method2");
        return null;
      }
    }
);
  }
  executorService.shutdown();
  assertTrue(executorService.awaitTermination(10000,TimeUnit.MILLISECONDS));
  Timer timer=metricRegistry.getTimers().get("api_method2");
  Assert.assertEquals(4,timer.getCount());
  Assert.assertTrue(timer.getMeanRate() > 0);
}
