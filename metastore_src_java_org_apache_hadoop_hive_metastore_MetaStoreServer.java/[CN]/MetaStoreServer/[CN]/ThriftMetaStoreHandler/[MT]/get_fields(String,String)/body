{
  ArrayList<FieldSchema> str_fields=new ArrayList<FieldSchema>();
  String[] names=table_name.split("\\.");
  String base_table_name=names[0];
  List<SerDeField> hive_fields=new ArrayList<SerDeField>();
  AbstractMap<String,String> schema_map=get_schema(base_table_name);
  Properties p=new Properties();
  for (Iterator<Entry<String,String>> it=schema_map.entrySet().iterator(); it.hasNext(); ) {
    Entry<String,String> entry=it.next();
    p.setProperty(entry.getKey(),entry.getValue());
  }
  SerDeField hf=null;
  try {
    SerDe s=MetaStoreUtils.getSerDe(conf_,p);
    for (int i=1; i < names.length; i++) {
      hf=s.getFieldFromExpression(hf,names[i]);
    }
    if (hf != null && hf.isPrimitive()) {
      hive_fields.add(hf);
    }
 else     if (hf != null && hf.isList()) {
      try {
        hive_fields=s.getFields(hf);
      }
 catch (      Exception e) {
        hive_fields.add(hf);
      }
    }
 else     if (hf != null && hf.isMap()) {
      hive_fields.add(hf);
    }
 else {
      hive_fields=s.getFields(hf);
    }
    for (    SerDeField field : hive_fields) {
      String name=field.getName();
      String schema=this.hfToString(field);
      str_fields.add(new FieldSchema(name,schema,"automatically generated"));
    }
    return str_fields;
  }
 catch (  SerDeException e) {
    StringUtils.stringifyException(e);
    MetaException m=new MetaException();
    m.setMessage(e.getMessage());
    throw m;
  }
}
