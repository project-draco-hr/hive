{
  ArrayList<FieldSchema> str_fields=new ArrayList<FieldSchema>();
  String[] names=table_name.split("\\.");
  String base_table_name=names[0];
  String last_name=names[names.length - 1];
  AbstractMap<String,String> schema_map=get_schema(base_table_name);
  Properties p=new Properties();
  for (Iterator<Entry<String,String>> it=schema_map.entrySet().iterator(); it.hasNext(); ) {
    Entry<String,String> entry=it.next();
    p.setProperty(entry.getKey(),entry.getValue());
  }
  try {
    Deserializer s=MetaStoreUtils.getDeserializer(conf_,p);
    ObjectInspector oi=s.getObjectInspector();
    for (int i=1; i < names.length; i++) {
      if (!(oi instanceof StructObjectInspector)) {
        oi=s.getObjectInspector();
        break;
      }
      StructObjectInspector soi=(StructObjectInspector)oi;
      StructField sf=soi.getStructFieldRef(names[i]);
      if (sf == null) {
        oi=s.getObjectInspector();
        break;
      }
 else {
        oi=sf.getFieldObjectInspector();
      }
    }
    if (oi.getCategory() != Category.STRUCT) {
      str_fields.add(new FieldSchema(last_name,oi.getTypeName(),"automatically generated"));
    }
 else {
      List<? extends StructField> fields=((StructObjectInspector)oi).getAllStructFieldRefs();
      for (int i=0; i < fields.size(); i++) {
        String fieldName=fields.get(i).getFieldName();
        String fieldTypeName=fields.get(i).getFieldObjectInspector().getTypeName();
        str_fields.add(new FieldSchema(fieldName,fieldTypeName,"automatically generated"));
      }
    }
    return str_fields;
  }
 catch (  SerDeException e) {
    StringUtils.stringifyException(e);
    MetaException m=new MetaException();
    m.setMessage(e.getMessage());
    throw m;
  }
}
