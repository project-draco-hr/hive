{
  ReduceSinkDesc reduceConf=reduce.getConf();
  Map<String,ExprNodeDesc> oldMap=reduce.getColumnExprMap();
  LOG.info("RS " + reduce.getIdentifier() + " oldColExprMap: "+ oldMap);
  RowSchema oldRS=reduce.getSchema();
  ArrayList<ColumnInfo> old_signature=oldRS.getSignature();
  ArrayList<ColumnInfo> signature=new ArrayList<ColumnInfo>(old_signature);
  List<String> valueColNames=reduceConf.getOutputValueColumnNames();
  ArrayList<String> newValueColNames=new ArrayList<String>();
  List<ExprNodeDesc> keyExprs=reduceConf.getKeyCols();
  List<ExprNodeDesc> valueExprs=reduceConf.getValueCols();
  ArrayList<ExprNodeDesc> newValueExprs=new ArrayList<ExprNodeDesc>();
  for (int i=0; i < retainFlags.length; i++) {
    String outputCol=valueColNames.get(i);
    ExprNodeDesc outputColExpr=valueExprs.get(i);
    if (!retainFlags[i]) {
      ColumnInfo colInfo=oldRS.getColumnInfo(outputCol);
      if (colInfo == null) {
        outputCol=Utilities.ReduceField.VALUE.toString() + "." + outputCol;
        colInfo=oldRS.getColumnInfo(outputCol);
      }
      if (colInfo == null) {
        continue;
      }
      if (ExprNodeDescUtils.indexOf(outputColExpr,keyExprs) == -1) {
        oldMap.remove(outputCol);
        signature.remove(colInfo);
      }
    }
 else {
      newValueColNames.add(outputCol);
      newValueExprs.add(outputColExpr);
    }
  }
  oldRS.setSignature(signature);
  reduce.getSchema().setSignature(signature);
  reduceConf.setOutputValueColumnNames(newValueColNames);
  reduceConf.setValueCols(newValueExprs);
  TableDesc newValueTable=PlanUtils.getReduceValueTableDesc(PlanUtils.getFieldSchemasFromColumnList(reduceConf.getValueCols(),newValueColNames,0,""));
  reduceConf.setValueSerializeInfo(newValueTable);
  LOG.info("RS " + reduce.getIdentifier() + " newColExprMap: "+ oldMap);
}
