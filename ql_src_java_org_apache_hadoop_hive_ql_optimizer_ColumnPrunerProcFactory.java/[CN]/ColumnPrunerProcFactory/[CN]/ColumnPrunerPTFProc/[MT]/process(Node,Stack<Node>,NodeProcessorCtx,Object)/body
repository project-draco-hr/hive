{
  ColumnPrunerProcCtx cppCtx=(ColumnPrunerProcCtx)ctx;
  PTFOperator op=(PTFOperator)nd;
  PTFDesc conf=op.getConf();
  if (!conf.forWindowing()) {
    Operator<? extends OperatorDesc> parent=op.getParentOperators().get(0);
    RowResolver parentRR=cppCtx.getParseContext().getOpParseCtx().get(parent).getRowResolver();
    List<ColumnInfo> sig=parentRR.getRowSchema().getSignature();
    List<String> colList=new ArrayList<String>();
    for (    ColumnInfo cI : sig) {
      colList.add(cI.getInternalName());
    }
    cppCtx.getPrunedColLists().put(op,colList);
    return null;
  }
  WindowTableFunctionDef def=(WindowTableFunctionDef)conf.getFuncDef();
  ArrayList<ColumnInfo> sig=new ArrayList<ColumnInfo>();
  List<String> prunedCols=cppCtx.getPrunedColList(op.getChildOperators().get(0));
  prunedCols=new ArrayList<String>(prunedCols);
  prunedColumnsList(prunedCols,def);
  RowResolver oldRR=cppCtx.getOpToParseCtxMap().get(op).getRowResolver();
  RowResolver newRR=buildPrunedRR(prunedCols,oldRR,sig);
  cppCtx.getPrunedColLists().put(op,prunedInputList(prunedCols,def));
  cppCtx.getOpToParseCtxMap().get(op).setRowResolver(newRR);
  op.getSchema().setSignature(sig);
  return null;
}
