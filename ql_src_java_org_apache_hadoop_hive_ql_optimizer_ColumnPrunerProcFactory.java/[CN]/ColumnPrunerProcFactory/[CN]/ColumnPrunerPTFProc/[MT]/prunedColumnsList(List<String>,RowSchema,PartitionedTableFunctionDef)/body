{
  pDef.getOutputShape().setRr(null);
  pDef.getOutputShape().setColumnNames(null);
  if (pDef instanceof WindowTableFunctionDef) {
    WindowTableFunctionDef tDef=(WindowTableFunctionDef)pDef;
    if (tDef.getWindowFunctions() != null) {
      for (      WindowFunctionDef wDef : tDef.getWindowFunctions()) {
        if (wDef.getArgs() == null) {
          continue;
        }
        for (        PTFExpressionDef arg : wDef.getArgs()) {
          ExprNodeDesc exprNode=arg.getExprNode();
          Utilities.mergeUniqElems(prunedCols,exprNode.getCols());
        }
      }
    }
    if (tDef.getPartition() != null) {
      for (      PTFExpressionDef col : tDef.getPartition().getExpressions()) {
        ExprNodeDesc exprNode=col.getExprNode();
        Utilities.mergeUniqElems(prunedCols,exprNode.getCols());
      }
    }
    if (tDef.getOrder() != null) {
      for (      PTFExpressionDef col : tDef.getOrder().getExpressions()) {
        ExprNodeDesc exprNode=col.getExprNode();
        Utilities.mergeUniqElems(prunedCols,exprNode.getCols());
      }
    }
  }
 else {
    pDef.getOutputShape().setRr(buildPrunedRR(prunedCols,oldRS));
  }
  PTFInputDef input=pDef.getInput();
  if (input instanceof PartitionedTableFunctionDef) {
    return prunedColumnsList(prunedCols,oldRS,(PartitionedTableFunctionDef)input);
  }
  ArrayList<String> inputColumns=prunedInputList(prunedCols,input);
  input.getOutputShape().setRr(buildPrunedRR(inputColumns,oldRS));
  input.getOutputShape().setColumnNames(inputColumns);
  return buildPrunedRS(prunedCols,oldRS);
}
