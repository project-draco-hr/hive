{
  super.process(nd,stack,ctx,nodeOutputs);
  LateralViewForwardOperator op=(LateralViewForwardOperator)nd;
  ColumnPrunerProcCtx cppCtx=(ColumnPrunerProcCtx)ctx;
  Operator<?> select=op.getChildOperators().get(LateralViewJoinOperator.SELECT_TAG);
  List<String> cols=cppCtx.getPrunedColList(select);
  RowSchema rs=op.getSchema();
  if (rs.getSignature().size() != cols.size()) {
    ArrayList<ExprNodeDesc> colList=new ArrayList<ExprNodeDesc>();
    ArrayList<String> outputColNames=new ArrayList<String>();
    for (    String col : cols) {
      ColumnInfo colInfo=rs.getColumnInfo(col);
      ExprNodeColumnDesc colExpr=new ExprNodeColumnDesc(colInfo);
      colList.add(colExpr);
      outputColNames.add(col);
    }
    ((SelectDesc)select.getConf()).setSelStarNoCompute(false);
    ((SelectDesc)select.getConf()).setColList(colList);
    ((SelectDesc)select.getConf()).setOutputColumnNames(outputColNames);
    pruneOperator(ctx,select,outputColNames);
    Operator<?> udtfPath=op.getChildOperators().get(LateralViewJoinOperator.UDTF_TAG);
    List<String> lvFCols=new ArrayList<String>(cppCtx.getPrunedColLists().get(udtfPath));
    lvFCols=Utilities.mergeUniqElems(lvFCols,outputColNames);
    pruneOperator(ctx,op,lvFCols);
  }
  return null;
}
