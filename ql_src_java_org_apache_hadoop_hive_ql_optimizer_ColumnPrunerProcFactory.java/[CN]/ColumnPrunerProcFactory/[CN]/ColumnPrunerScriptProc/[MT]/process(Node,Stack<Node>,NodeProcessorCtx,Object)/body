{
  ColumnPrunerProcCtx cppCtx=(ColumnPrunerProcCtx)ctx;
  Operator<? extends OperatorDesc> op=(Operator<? extends OperatorDesc>)nd;
  RowSchema inputRS=op.getSchema();
  List<String> prunedCols=cppCtx.getPrunedColList(op.getChildOperators().get(0));
  Operator<? extends OperatorDesc> parent=op.getParentOperators().get(0);
  RowSchema parentRS=parent.getSchema();
  List<ColumnInfo> sig=parentRS.getSignature();
  List<String> colList=new ArrayList<String>();
  for (  ColumnInfo cI : sig) {
    colList.add(cI.getInternalName());
  }
  if (prunedCols.size() != inputRS.getSignature().size() && !(op.getChildOperators().get(0) instanceof SelectOperator)) {
    ArrayList<ExprNodeDesc> exprs=new ArrayList<ExprNodeDesc>();
    ArrayList<String> outputs=new ArrayList<String>();
    Map<String,ExprNodeDesc> colExprMap=new HashMap<String,ExprNodeDesc>();
    ArrayList<ColumnInfo> outputRS=new ArrayList<ColumnInfo>();
    for (    String internalName : prunedCols) {
      ColumnInfo valueInfo=inputRS.getColumnInfo(internalName);
      ExprNodeDesc colDesc=new ExprNodeColumnDesc(valueInfo.getType(),valueInfo.getInternalName(),valueInfo.getTabAlias(),valueInfo.getIsVirtualCol());
      exprs.add(colDesc);
      outputs.add(internalName);
      ColumnInfo newCol=new ColumnInfo(internalName,valueInfo.getType(),valueInfo.getTabAlias(),valueInfo.getIsVirtualCol(),valueInfo.isHiddenVirtualCol());
      newCol.setAlias(valueInfo.getAlias());
      outputRS.add(newCol);
      colExprMap.put(internalName,colDesc);
    }
    SelectDesc select=new SelectDesc(exprs,outputs,false);
    Operator<? extends OperatorDesc> child=op.getChildOperators().get(0);
    op.removeChild(child);
    SelectOperator sel=(SelectOperator)OperatorFactory.getAndMakeChild(select,new RowSchema(outputRS),op);
    OperatorFactory.makeChild(sel,child);
    sel.setColumnExprMap(colExprMap);
  }
  cppCtx.getPrunedColLists().put(op,colList);
  return null;
}
