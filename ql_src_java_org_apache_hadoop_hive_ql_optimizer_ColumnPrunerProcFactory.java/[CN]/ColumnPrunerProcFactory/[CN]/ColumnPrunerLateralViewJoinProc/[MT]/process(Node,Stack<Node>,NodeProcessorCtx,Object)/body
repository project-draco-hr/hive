{
  LateralViewJoinOperator op=(LateralViewJoinOperator)nd;
  ColumnPrunerProcCtx cppCtx=(ColumnPrunerProcCtx)ctx;
  List<String> cols=cppCtx.genColLists(op);
  if (cols == null) {
    return null;
  }
  Map<String,ExprNodeDesc> colExprMap=op.getColumnExprMap();
  List<String> outputCols=op.getConf().getOutputInternalColNames();
  int numSelColumns=op.getConf().getNumSelColumns();
  List<String> colsAfterReplacement=new ArrayList<String>();
  ArrayList<String> newColNames=new ArrayList<String>();
  for (  String col : cols) {
    int index=outputCols.indexOf(col);
    if (index >= 0 && index < numSelColumns) {
      ExprNodeDesc transformed=colExprMap.get(col);
      Utilities.mergeUniqElems(colsAfterReplacement,transformed.getCols());
      newColNames.add(col);
    }
  }
  op.getConf().setNumSelColumns(newColNames.size());
  newColNames.addAll(outputCols.subList(numSelColumns,outputCols.size()));
  op.getConf().setOutputInternalColNames(newColNames);
  pruneOperator(ctx,op,newColNames);
  cppCtx.getPrunedColLists().put(op,colsAfterReplacement);
  return null;
}
