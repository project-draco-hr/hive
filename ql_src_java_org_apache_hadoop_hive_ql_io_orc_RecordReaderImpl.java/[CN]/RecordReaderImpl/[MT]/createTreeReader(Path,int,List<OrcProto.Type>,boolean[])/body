{
  OrcProto.Type type=types.get(columnId);
switch (type.getKind()) {
case BOOLEAN:
    return new BooleanTreeReader(path,columnId);
case BYTE:
  return new ByteTreeReader(path,columnId);
case DOUBLE:
return new DoubleTreeReader(path,columnId);
case FLOAT:
return new FloatTreeReader(path,columnId);
case SHORT:
return new ShortTreeReader(path,columnId);
case INT:
return new IntTreeReader(path,columnId);
case LONG:
return new LongTreeReader(path,columnId);
case STRING:
return new StringTreeReader(path,columnId);
case BINARY:
return new BinaryTreeReader(path,columnId);
case TIMESTAMP:
return new TimestampTreeReader(path,columnId);
case DECIMAL:
return new DecimalTreeReader(path,columnId);
case STRUCT:
return new StructTreeReader(path,columnId,types,included);
case LIST:
return new ListTreeReader(path,columnId,types,included);
case MAP:
return new MapTreeReader(path,columnId,types,included);
case UNION:
return new UnionTreeReader(path,columnId,types,included);
default :
throw new IllegalArgumentException("Unsupported type " + type.getKind());
}
}
