{
  if (min == null) {
    if (predicate.getOperator() == PredicateLeaf.Operator.IS_NULL) {
      return TruthValue.YES;
    }
 else {
      return TruthValue.NULL;
    }
  }
  Location loc;
  try {
    Object baseObj=predicate.getLiteral(PredicateLeaf.FileFormat.ORC);
    Object minValue=getConvertedStatsObj(min,baseObj);
    Object maxValue=getConvertedStatsObj(max,baseObj);
    Object predObj=getBaseObjectForComparison(baseObj,minValue);
switch (predicate.getOperator()) {
case NULL_SAFE_EQUALS:
      loc=compareToRange((Comparable)predObj,minValue,maxValue);
    if (loc == Location.BEFORE || loc == Location.AFTER) {
      return TruthValue.NO;
    }
 else {
      return TruthValue.YES_NO;
    }
case EQUALS:
  loc=compareToRange((Comparable)predObj,minValue,maxValue);
if (minValue.equals(maxValue) && loc == Location.MIN) {
  return TruthValue.YES_NULL;
}
 else if (loc == Location.BEFORE || loc == Location.AFTER) {
  return TruthValue.NO_NULL;
}
 else {
  return TruthValue.YES_NO_NULL;
}
case LESS_THAN:
loc=compareToRange((Comparable)predObj,minValue,maxValue);
if (loc == Location.AFTER) {
return TruthValue.YES_NULL;
}
 else if (loc == Location.BEFORE || loc == Location.MIN) {
return TruthValue.NO_NULL;
}
 else {
return TruthValue.YES_NO_NULL;
}
case LESS_THAN_EQUALS:
loc=compareToRange((Comparable)predObj,minValue,maxValue);
if (loc == Location.AFTER || loc == Location.MAX) {
return TruthValue.YES_NULL;
}
 else if (loc == Location.BEFORE) {
return TruthValue.NO_NULL;
}
 else {
return TruthValue.YES_NO_NULL;
}
case IN:
if (minValue.equals(maxValue)) {
for (Object arg : predicate.getLiteralList(PredicateLeaf.FileFormat.ORC)) {
predObj=getBaseObjectForComparison(arg,minValue);
loc=compareToRange((Comparable)predObj,minValue,maxValue);
if (loc == Location.MIN) {
return TruthValue.YES_NULL;
}
}
return TruthValue.NO_NULL;
}
 else {
for (Object arg : predicate.getLiteralList(PredicateLeaf.FileFormat.ORC)) {
predObj=getBaseObjectForComparison(arg,minValue);
loc=compareToRange((Comparable)predObj,minValue,maxValue);
if (loc == Location.MIN || loc == Location.MIDDLE || loc == Location.MAX) {
return TruthValue.YES_NO_NULL;
}
}
return TruthValue.NO_NULL;
}
case BETWEEN:
List<Object> args=predicate.getLiteralList(PredicateLeaf.FileFormat.ORC);
Object predObj1=getBaseObjectForComparison(args.get(0),minValue);
loc=compareToRange((Comparable)predObj1,minValue,maxValue);
if (loc == Location.BEFORE || loc == Location.MIN) {
Object predObj2=getBaseObjectForComparison(args.get(1),minValue);
Location loc2=compareToRange((Comparable)predObj2,minValue,maxValue);
if (loc2 == Location.AFTER || loc2 == Location.MAX) {
return TruthValue.YES_NULL;
}
 else if (loc2 == Location.BEFORE) {
return TruthValue.NO_NULL;
}
 else {
return TruthValue.YES_NO_NULL;
}
}
 else if (loc == Location.AFTER) {
return TruthValue.NO_NULL;
}
 else {
return TruthValue.YES_NO_NULL;
}
case IS_NULL:
return TruthValue.YES_NO;
default :
return TruthValue.YES_NO_NULL;
}
}
 catch (NumberFormatException nfe) {
return TruthValue.YES_NO_NULL;
}
}
