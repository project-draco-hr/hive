{
  long nextRowInStripe=nextRow - rowBaseInStripe;
  if (rowIndexStride != 0 && includedRowGroups != null && nextRowInStripe < rowCountInStripe) {
    int rowGroup=(int)(nextRowInStripe / rowIndexStride);
    if (!includedRowGroups[rowGroup]) {
      while (rowGroup < includedRowGroups.length && !includedRowGroups[rowGroup]) {
        rowGroup+=1;
      }
      if (rowGroup >= includedRowGroups.length) {
        if (canAdvanceStripe) {
          advanceStripe();
        }
        return canAdvanceStripe;
      }
      nextRowInStripe=Math.min(rowCountInStripe,rowGroup * rowIndexStride);
    }
  }
  if (nextRowInStripe >= rowCountInStripe) {
    if (canAdvanceStripe) {
      advanceStripe();
    }
    return canAdvanceStripe;
  }
  if (nextRowInStripe != rowInStripe) {
    if (rowIndexStride != 0) {
      int rowGroup=(int)(nextRowInStripe / rowIndexStride);
      seekToRowEntry(reader,rowGroup);
      reader.skipRows(nextRowInStripe - rowGroup * rowIndexStride);
    }
 else {
      reader.skipRows(nextRowInStripe - rowInStripe);
    }
    rowInStripe=nextRowInStripe;
  }
  return true;
}
