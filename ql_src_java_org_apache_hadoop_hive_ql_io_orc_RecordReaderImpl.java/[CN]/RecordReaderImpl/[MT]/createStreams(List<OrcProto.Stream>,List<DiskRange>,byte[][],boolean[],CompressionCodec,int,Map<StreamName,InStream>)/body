{
  long offset=0;
  for (  OrcProto.Stream streamDesc : streamDescriptions) {
    int column=streamDesc.getColumn();
    if (includeColumn[column] && StreamName.getArea(streamDesc.getKind()) == StreamName.Area.DATA) {
      long length=streamDesc.getLength();
      int first=-1;
      int last=-2;
      for (int i=0; i < bytes.length; ++i) {
        DiskRange range=ranges.get(i);
        if (overlap(offset,offset + length,range.offset,range.end)) {
          if (first == -1) {
            first=i;
          }
          last=i;
        }
      }
      ByteBuffer[] buffers=new ByteBuffer[last - first + 1];
      long[] offsets=new long[last - first + 1];
      for (int i=0; i < buffers.length; ++i) {
        DiskRange range=ranges.get(i + first);
        long start=Math.max(range.offset,offset);
        long end=Math.min(range.end,offset + length);
        buffers[i]=ByteBuffer.wrap(bytes[first + i],Math.max(0,(int)(offset - range.offset)),(int)(end - start));
        offsets[i]=Math.max(0,range.offset - offset);
      }
      StreamName name=new StreamName(column,streamDesc.getKind());
      streams.put(name,InStream.create(name.toString(),buffers,offsets,length,codec,bufferSize));
    }
    offset+=streamDesc.getLength();
  }
}
