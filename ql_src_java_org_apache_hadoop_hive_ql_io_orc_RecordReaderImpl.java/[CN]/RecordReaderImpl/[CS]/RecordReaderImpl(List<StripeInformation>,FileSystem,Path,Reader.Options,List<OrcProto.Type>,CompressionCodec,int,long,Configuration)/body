{
  this.path=path;
  this.file=fileSystem.open(path);
  this.fileId=RecordReaderUtils.getFileId(fileSystem,path);
  this.codec=codec;
  this.types=types;
  this.bufferSize=bufferSize;
  this.included=options.getInclude();
  this.conf=conf;
  this.rowIndexStride=strideRate;
  this.metadata=new MetadataReader(fileSystem,path,codec,bufferSize,types.size());
  SearchArgument sarg=options.getSearchArgument();
  if (sarg != null && strideRate != 0) {
    sargApp=new SargApplier(sarg,options.getColumnNames(),strideRate,types);
    sargColumns=new boolean[included.length];
    for (    int i : sargApp.filterColumns) {
      if (i > 0) {
        sargColumns[i]=true;
      }
    }
  }
 else {
    sargApp=null;
    sargColumns=null;
  }
  long rows=0;
  long skippedRows=0;
  long offset=options.getOffset();
  long maxOffset=options.getMaxOffset();
  for (  StripeInformation stripe : stripes) {
    long stripeStart=stripe.getOffset();
    if (offset > stripeStart) {
      skippedRows+=stripe.getNumberOfRows();
    }
 else     if (stripeStart < maxOffset) {
      this.stripes.add(stripe);
      rows+=stripe.getNumberOfRows();
    }
  }
  final boolean zeroCopy=(conf != null) && (HiveConf.getBoolVar(conf,HIVE_ORC_ZEROCOPY));
  zcr=zeroCopy ? RecordReaderUtils.createZeroCopyShim(file,codec,pool) : null;
  firstRow=skippedRows;
  totalRowCount=rows;
  boolean skipCorrupt=HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_ORC_SKIP_CORRUPT_DATA);
  reader=createTreeReader(0,types,included,skipCorrupt);
  indexes=new OrcProto.RowIndex[types.size()];
  bloomFilterIndices=new OrcProto.BloomFilterIndex[types.size()];
  advanceToNextRow(reader,0L,true);
}
