{
  Reader.Options options=builder.options;
  this.types=builder.types;
  TreeReaderFactory.TreeReaderSchema treeReaderSchema;
  if (options.getSchema() == null) {
    if (LOG.isInfoEnabled()) {
      LOG.info("Schema on read not provided -- using file schema " + types.toString());
    }
    treeReaderSchema=new TreeReaderFactory.TreeReaderSchema().fileTypes(types).schemaTypes(types);
  }
 else {
    List<OrcProto.Type> schemaTypes=OrcUtils.getOrcTypes(options.getSchema());
    treeReaderSchema=SchemaEvolution.validateAndCreate(types,schemaTypes);
  }
  this.path=builder.path;
  this.codec=builder.codec;
  this.bufferSize=builder.bufferSize;
  this.included=options.getInclude();
  this.conf=builder.conf;
  this.rowIndexStride=builder.strideRate;
  this.metadata=builder.metadataReaderFactory.create(MetadataReaderProperties.builder().withFileSystem(builder.fileSystem).withPath(path).withCodec(codec).withBufferSize(bufferSize).withTypeCount(types.size()).build());
  SearchArgument sarg=options.getSearchArgument();
  if (sarg != null && builder.strideRate != 0) {
    sargApp=new SargApplier(sarg,options.getColumnNames(),builder.strideRate,types,included.length);
  }
 else {
    sargApp=null;
  }
  long rows=0;
  long skippedRows=0;
  long offset=options.getOffset();
  long maxOffset=options.getMaxOffset();
  for (  StripeInformation stripe : builder.stripes) {
    long stripeStart=stripe.getOffset();
    if (offset > stripeStart) {
      skippedRows+=stripe.getNumberOfRows();
    }
 else     if (stripeStart < maxOffset) {
      this.stripes.add(stripe);
      rows+=stripe.getNumberOfRows();
    }
  }
  Boolean zeroCopy=options.getUseZeroCopy();
  if (zeroCopy == null) {
    zeroCopy=OrcConf.USE_ZEROCOPY.getBoolean(conf);
  }
  this.dataReader=builder.dataReaderFactory.create(DataReaderProperties.builder().withFileSystem(builder.fileSystem).withCodec(codec).withPath(path).withZeroCopy(zeroCopy).build());
  this.dataReader.open();
  firstRow=skippedRows;
  totalRowCount=rows;
  Boolean skipCorrupt=options.getSkipCorruptRecords();
  if (skipCorrupt == null) {
    skipCorrupt=OrcConf.SKIP_CORRUPT_DATA.getBoolean(conf);
  }
  reader=TreeReaderFactory.createTreeReader(0,treeReaderSchema,included,skipCorrupt);
  indexes=new OrcProto.RowIndex[types.size()];
  bloomFilterIndices=new OrcProto.BloomFilterIndex[types.size()];
  advanceToNextRow(reader,0L,true);
}
