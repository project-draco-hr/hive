{
  long rowsInStripe=stripe.getNumberOfRows();
  int groupsInStripe=(int)((rowsInStripe + rowIndexStride - 1) / rowIndexStride);
  boolean[] result=new boolean[groupsInStripe];
  TruthValue[] leafValues=new TruthValue[sargLeaves.size()];
  for (int rowGroup=0; rowGroup < result.length; ++rowGroup) {
    for (int pred=0; pred < leafValues.length; ++pred) {
      if (filterColumns[pred] != -1) {
        OrcProto.ColumnStatistics stats=indexes[filterColumns[pred]].getEntry(rowGroup).getStatistics();
        OrcProto.BloomFilter bf=null;
        if (bloomFilterIndices[filterColumns[pred]] != null) {
          bf=bloomFilterIndices[filterColumns[pred]].getBloomFilter(rowGroup);
        }
        leafValues[pred]=evaluatePredicateProto(stats,sargLeaves.get(pred),bf);
        if (LOG.isDebugEnabled()) {
          LOG.debug("Stats = " + stats);
          LOG.debug("Setting " + sargLeaves.get(pred) + " to "+ leafValues[pred]);
        }
      }
 else {
        leafValues[pred]=TruthValue.YES_NO_NULL;
      }
    }
    result[rowGroup]=sarg.evaluate(leafValues).isNeeded();
    if (LOG.isDebugEnabled()) {
      LOG.debug("Row group " + (rowIndexStride * rowGroup) + " to "+ (rowIndexStride * (rowGroup + 1) - 1)+ " is "+ (result[rowGroup] ? "" : "not ")+ "included.");
    }
  }
  for (  boolean b : result) {
    if (!b) {
      return result;
    }
  }
  return null;
}
