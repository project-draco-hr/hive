{
  DecimalColumnVector result=null;
  if (previousVector == null) {
    result=new DecimalColumnVector(precision,scale);
  }
 else {
    result=(DecimalColumnVector)previousVector;
  }
  boolean[] scratchIsNull=scratchScaleVector.isNull;
  super.nextVector(result,batchSize);
  if (result.isRepeating) {
    if (!result.isNull[0]) {
      BigInteger bInt=SerializationUtils.readBigInteger(valueStream);
      short scaleInData=(short)scaleReader.next();
      HiveDecimal dec=HiveDecimal.create(bInt,scaleInData);
      dec=HiveDecimalUtils.enforcePrecisionScale(dec,precision,scale);
      result.set(0,dec);
    }
  }
 else {
    scratchScaleVector.isNull=result.isNull;
    scaleReader.nextVector(scratchScaleVector,batchSize);
    for (int i=0; i < batchSize; i++) {
      if (!result.isNull[i]) {
        BigInteger bInt=SerializationUtils.readBigInteger(valueStream);
        short scaleInData=(short)scratchScaleVector.vector[i];
        HiveDecimal dec=HiveDecimal.create(bInt,scaleInData);
        dec=HiveDecimalUtils.enforcePrecisionScale(dec,precision,scale);
        result.set(i,dec);
      }
    }
  }
  scratchScaleVector.isNull=scratchIsNull;
  return result;
}
