{
  ImmutableList.Builder<Integer> keysListBuilder=new ImmutableList.Builder<Integer>();
  ImmutableList.Builder<Integer> leftKeysListBuilder=new ImmutableList.Builder<Integer>();
  ImmutableList.Builder<Integer> rightKeysListBuilder=new ImmutableList.Builder<Integer>();
  JoinPredicateInfo joinPredInfo=HiveCalciteUtil.JoinPredicateInfo.constructJoinPredicateInfo(join);
  for (int i=0; i < joinPredInfo.getEquiJoinPredicateElements().size(); i++) {
    JoinLeafPredicateInfo joinLeafPredInfo=joinPredInfo.getEquiJoinPredicateElements().get(i);
    for (    int leftPos : joinLeafPredInfo.getProjsFromLeftPartOfJoinKeysInJoinSchema()) {
      keysListBuilder.add(leftPos);
      leftKeysListBuilder.add(leftPos);
    }
    for (    int rightPos : joinLeafPredInfo.getProjsFromRightPartOfJoinKeysInJoinSchema()) {
      keysListBuilder.add(rightPos);
      rightKeysListBuilder.add(rightPos);
    }
  }
  RelDistribution distribution;
switch (join.getJoinAlgorithm()) {
case SMB_JOIN:
case BUCKET_JOIN:
case COMMON_JOIN:
    distribution=new HiveRelDistribution(RelDistribution.Type.HASH_DISTRIBUTED,keysListBuilder.build());
  break;
case MAP_JOIN:
if (join.getMapJoinStreamingSide() == MapJoinStreamingRelation.LEFT_RELATION) {
  distribution=new HiveRelDistribution(RelDistribution.Type.HASH_DISTRIBUTED,leftKeysListBuilder.build());
}
 else if (join.getMapJoinStreamingSide() == MapJoinStreamingRelation.RIGHT_RELATION) {
  distribution=new HiveRelDistribution(RelDistribution.Type.HASH_DISTRIBUTED,rightKeysListBuilder.build());
}
 else {
  distribution=null;
}
break;
default :
distribution=null;
}
return distribution;
}
