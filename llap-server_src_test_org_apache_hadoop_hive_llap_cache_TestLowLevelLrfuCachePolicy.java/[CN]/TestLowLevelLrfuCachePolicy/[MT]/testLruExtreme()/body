{
  int heapSize=4;
  LOG.info("Testing lambda 1 (LRU)");
  Random rdm=new Random(1234);
  HiveConf conf=new HiveConf();
  ArrayList<LlapCacheableBuffer> inserted=new ArrayList<LlapCacheableBuffer>(heapSize);
  conf.setFloat(HiveConf.ConfVars.LLAP_LRFU_LAMBDA.varname,1.0f);
  EvictionTracker et=new EvictionTracker();
  LowLevelLrfuCachePolicy lru=new LowLevelLrfuCachePolicy(conf,1,heapSize,et);
  for (int i=0; i < heapSize; ++i) {
    LlapCacheableBuffer buffer=LowLevelCacheImpl.allocateFake();
    assertTrue(cache(lru,et,buffer));
    inserted.add(buffer);
  }
  Collections.shuffle(inserted,rdm);
  for (int i=0; i < inserted.size(); ++i) {
    for (int j=0; j < (inserted.size() - i); ++j) {
      lru.notifyLock(inserted.get(i));
      lru.notifyUnlock(inserted.get(i));
    }
  }
  verifyOrder(lru,et,inserted);
}
