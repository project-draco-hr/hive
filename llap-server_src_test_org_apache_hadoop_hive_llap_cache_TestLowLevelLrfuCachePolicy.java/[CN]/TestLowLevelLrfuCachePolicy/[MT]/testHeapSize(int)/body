{
  LOG.info("Testing heap size " + heapSize);
  Random rdm=new Random(1234);
  HiveConf conf=new HiveConf();
  conf.setFloat(HiveConf.ConfVars.LLAP_LRFU_LAMBDA.varname,0.05f);
  EvictionTracker et=new EvictionTracker();
  LowLevelLrfuCachePolicy lrfu=new LowLevelLrfuCachePolicy(conf,1,heapSize,et);
  int toEvict=2;
  ArrayList<LlapCacheableBuffer> inserted=new ArrayList<LlapCacheableBuffer>(heapSize);
  LlapCacheableBuffer[] evicted=new LlapCacheableBuffer[toEvict];
  Assume.assumeTrue(toEvict <= heapSize);
  for (int i=0; i < heapSize + toEvict; ++i) {
    LlapCacheableBuffer buffer=LowLevelBuddyCache.allocateFake();
    assertTrue(cache(lrfu,et,buffer));
    LlapCacheableBuffer evictedBuf=getOneEvictedBuffer(et);
    if (i < toEvict) {
      evicted[i]=buffer;
    }
 else {
      if (i >= heapSize) {
        assertSame(evicted[i - heapSize],evictedBuf);
        assertTrue(evictedBuf.isInvalid());
      }
 else {
        assertNull(evictedBuf);
      }
      inserted.add(buffer);
    }
  }
  LOG.info("Inserted " + dumpInserted(inserted));
  Collections.shuffle(inserted,rdm);
  LOG.info("Touch order " + dumpInserted(inserted));
  for (  LlapCacheableBuffer buf : inserted) {
    lock(lrfu,buf);
  }
  assertFalse(lrfu.reserveMemory(1,false));
  if (!et.evicted.isEmpty()) {
    assertTrue("Got " + et.evicted.get(0),et.evicted.isEmpty());
  }
  for (  LlapCacheableBuffer buf : inserted) {
    unlock(lrfu,buf);
  }
  for (  LlapCacheableBuffer buf : inserted) {
    for (int j=0; j < 10; ++j) {
      lrfu.notifyLock(buf);
      lrfu.notifyUnlock(buf);
    }
  }
  verifyOrder(lrfu,et,inserted);
}
