{
  int heapSize=4;
  LOG.info("Testing deadlock resolution");
  ArrayList<LlapCacheableBuffer> inserted=new ArrayList<LlapCacheableBuffer>(heapSize);
  EvictionTracker et=new EvictionTracker();
  Configuration conf=createConf(1,heapSize);
  LowLevelLrfuCachePolicy lrfu=new LowLevelLrfuCachePolicy(conf);
  LowLevelCacheMemoryManager mm=new LowLevelCacheMemoryManager(conf,lrfu,LlapDaemonCacheMetrics.create("test","1"));
  lrfu.setEvictionListener(et);
  for (int i=0; i < heapSize; ++i) {
    LlapCacheableBuffer buffer=LowLevelCacheImpl.allocateFake();
    assertTrue(cache(mm,lrfu,et,buffer));
    inserted.add(buffer);
  }
  LlapCacheableBuffer locked=inserted.get(0);
  lock(lrfu,locked);
  mm.reserveMemory(1,false);
  LlapCacheableBuffer evicted=et.evicted.get(0);
  assertNotNull(evicted);
  assertTrue(evicted.isInvalid());
  assertNotSame(locked,evicted);
  unlock(lrfu,locked);
}
