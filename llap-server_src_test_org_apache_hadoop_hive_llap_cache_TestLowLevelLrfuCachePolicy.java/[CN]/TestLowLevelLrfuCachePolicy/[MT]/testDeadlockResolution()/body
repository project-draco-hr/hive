{
  int heapSize=4;
  LOG.info("Testing deadlock resolution");
  ArrayList<LlapCacheableBuffer> inserted=new ArrayList<LlapCacheableBuffer>(heapSize);
  EvictionTracker et=new EvictionTracker();
  LowLevelLrfuCachePolicy lrfu=new LowLevelLrfuCachePolicy(new HiveConf(),1,heapSize,et);
  for (int i=0; i < heapSize; ++i) {
    LlapCacheableBuffer buffer=LowLevelCacheImpl.allocateFake();
    assertTrue(cache(lrfu,et,buffer));
    inserted.add(buffer);
  }
  LlapCacheableBuffer locked=inserted.get(0);
  lock(lrfu,locked);
  lrfu.reserveMemory(1,false);
  LlapCacheableBuffer evicted=et.evicted.get(0);
  assertNotNull(evicted);
  assertTrue(evicted.isInvalid());
  assertNotSame(locked,evicted);
  unlock(lrfu,locked);
}
