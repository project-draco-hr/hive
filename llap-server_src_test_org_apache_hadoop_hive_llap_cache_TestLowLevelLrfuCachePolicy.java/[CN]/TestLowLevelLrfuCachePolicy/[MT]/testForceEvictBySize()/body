{
  int heapSize=12;
  LOG.info("Testing force-eviction out of order");
  Configuration conf=new Configuration();
  ArrayList<LlapDataBuffer> sizeTwo=new ArrayList<LlapDataBuffer>(4), sizeOne=new ArrayList<LlapDataBuffer>(4);
  conf.setFloat(HiveConf.ConfVars.LLAP_LRFU_LAMBDA.varname,0.45f);
  EvictionTracker et=new EvictionTracker();
  LowLevelLrfuCachePolicy lrfu=new LowLevelLrfuCachePolicy(1,heapSize,conf);
  lrfu.setEvictionListener(et);
  for (int i=0; i < 2; ++i) {
    sizeTwo.add(cacheSizeTwoFake(et,lrfu));
    for (int j=0; j < 2; ++j) {
      LlapDataBuffer fake=LowLevelCacheImpl.allocateFake();
      assertTrue(cache(null,lrfu,et,fake));
      sizeOne.add(fake);
    }
    sizeTwo.add(cacheSizeTwoFake(et,lrfu));
  }
  et.evicted.clear();
  assertEquals(4,lrfu.tryEvictContiguousData(2,4));
  for (int i=0; i < sizeTwo.size(); ++i) {
    LlapDataBuffer block=et.evicted.get(i);
    assertTrue(block.isInvalid());
    assertSame(sizeTwo.get(i),block);
  }
  et.evicted.clear();
  assertEquals(0,lrfu.tryEvictContiguousData(2,1));
  assertEquals(4,lrfu.evictSomeBlocks(4));
  for (int i=0; i < sizeOne.size(); ++i) {
    LlapDataBuffer block=et.evicted.get(i);
    assertTrue(block.isInvalid());
    assertSame(sizeOne.get(i),block);
  }
}
