{
  super();
  this.inputPaths=inputPaths;
  this.outputDir=outputDir;
  this.hasDynamicPartitions=hasDynamicPartitions;
  this.dynPartCtx=dynPartCtx;
  this.srcTblInputFormat=srcTblInputFormat;
  PartitionDesc partDesc=new PartitionDesc();
  if (srcTblInputFormat.equals(OrcInputFormat.class)) {
    partDesc.setInputFileFormatClass(OrcFileStripeMergeInputFormat.class);
  }
 else   if (srcTblInputFormat.equals(RCFileInputFormat.class)) {
    partDesc.setInputFileFormatClass(RCFileBlockMergeInputFormat.class);
  }
  if (this.getPathToPartitionInfo() == null) {
    this.setPathToPartitionInfo(new LinkedHashMap<String,PartitionDesc>());
  }
  for (  Path path : this.inputPaths) {
    this.getPathToPartitionInfo().put(path.toString(),partDesc);
  }
}
