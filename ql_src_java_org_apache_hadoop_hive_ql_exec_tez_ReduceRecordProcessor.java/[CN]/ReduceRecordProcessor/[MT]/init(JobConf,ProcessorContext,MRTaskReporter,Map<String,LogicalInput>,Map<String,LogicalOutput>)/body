{
  perfLogger.PerfLogBegin(CLASS_NAME,PerfLogger.TEZ_INIT_OPERATORS);
  super.init(jconf,processorContext,mrReporter,inputs,outputs);
  ObjectCache cache=ObjectCacheFactory.getCache(jconf);
  redWork=(ReduceWork)cache.retrieve(REDUCE_PLAN_KEY);
  if (redWork == null) {
    redWork=Utilities.getReduceWork(jconf);
    cache.cache(REDUCE_PLAN_KEY,redWork);
  }
 else {
    Utilities.setReduceWork(jconf,redWork);
  }
  reducer=redWork.getReducer();
  reducer.getParentOperators().clear();
  reducer.setParentOperators(null);
  int numTags=redWork.getTagToValueDesc().size();
  ObjectInspector[] ois=new ObjectInspector[numTags];
  sources=new ReduceRecordSource[numTags];
  for (int tag=0; tag < redWork.getTagToValueDesc().size(); tag++) {
    TableDesc keyTableDesc=redWork.getKeyDesc();
    TableDesc valueTableDesc=redWork.getTagToValueDesc().get(tag);
    KeyValuesReader reader=(KeyValuesReader)inputs.get(redWork.getTagToInput().get(tag)).getReader();
    sources[tag]=new ReduceRecordSource();
    sources[tag].init(jconf,reducer,redWork.getVectorMode(),keyTableDesc,valueTableDesc,reader,tag == position,(byte)tag,redWork.getScratchColumnVectorTypes());
    ois[tag]=sources[tag].getObjectInspector();
  }
  MapredContext.init(false,new JobConf(jconf));
  ((TezContext)MapredContext.get()).setInputs(inputs);
  ((TezContext)MapredContext.get()).setTezProcessorContext(processorContext);
  ((TezContext)MapredContext.get()).setRecordSources(sources);
  try {
    l4j.info(reducer.dump(0));
    reducer.initialize(jconf,ois);
    List<HashTableDummyOperator> dummyOps=redWork.getDummyOps();
    if (dummyOps != null) {
      for (      Operator<? extends OperatorDesc> dummyOp : dummyOps) {
        dummyOp.initialize(jconf,null);
      }
    }
    List<Operator<? extends OperatorDesc>> children=new LinkedList<Operator<? extends OperatorDesc>>();
    children.add(reducer);
    if (dummyOps != null) {
      children.addAll(dummyOps);
    }
    createOutputMap();
    OperatorUtils.setChildrenCollector(children,outMap);
    reducer.setReporter(reporter);
    MapredContext.get().setReporter(reporter);
  }
 catch (  Throwable e) {
    abort=true;
    if (e instanceof OutOfMemoryError) {
      throw (OutOfMemoryError)e;
    }
 else {
      throw new RuntimeException("Reduce operator initialization failed",e);
    }
  }
  perfLogger.PerfLogEnd(CLASS_NAME,PerfLogger.TEZ_INIT_OPERATORS);
}
