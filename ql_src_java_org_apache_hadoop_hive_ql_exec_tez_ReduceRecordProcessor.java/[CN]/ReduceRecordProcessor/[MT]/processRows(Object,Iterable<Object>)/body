{
  if (reducer.getDone()) {
    return false;
  }
  execContext.resetRow();
  try {
    BytesWritable keyWritable=(BytesWritable)key;
    byte tag=0;
    if (isTagged) {
      int size=keyWritable.getLength() - 1;
      tag=keyWritable.getBytes()[size];
      keyWritable.setSize(size);
    }
    if (!keyWritable.equals(this.groupKey)) {
      if (groupKey == null) {
        this.groupKey=new BytesWritable();
      }
 else {
        if (isLogTraceEnabled) {
          l4j.trace("End Group");
        }
        reducer.endGroup();
      }
      try {
        this.keyObject=inputKeyDeserializer.deserialize(keyWritable);
      }
 catch (      Exception e) {
        throw new HiveException("Hive Runtime Error: Unable to deserialize reduce input key from " + Utilities.formatBinaryString(keyWritable.getBytes(),0,keyWritable.getLength()) + " with properties "+ keyTableDesc.getProperties(),e);
      }
      groupKey.set(keyWritable.getBytes(),0,keyWritable.getLength());
      if (isLogTraceEnabled) {
        l4j.trace("Start Group");
      }
      reducer.setGroupKeyObject(keyObject);
      reducer.startGroup();
    }
    if (vectorized) {
      return processVectors(values,tag);
    }
 else {
      return processKeyValues(values,tag);
    }
  }
 catch (  Throwable e) {
    abort=true;
    if (e instanceof OutOfMemoryError) {
      throw (OutOfMemoryError)e;
    }
 else {
      l4j.fatal(StringUtils.stringifyException(e));
      throw new RuntimeException(e);
    }
  }
}
