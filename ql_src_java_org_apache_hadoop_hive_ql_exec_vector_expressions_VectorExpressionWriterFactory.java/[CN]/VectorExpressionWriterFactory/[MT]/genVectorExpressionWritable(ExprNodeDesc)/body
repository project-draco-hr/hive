{
  String nodeType=nodeDesc.getTypeString();
  if (nodeType.equalsIgnoreCase("tinyint")) {
    return new VectorExpressionWriterLong(){
      private ByteWritable writable;
      @Override public VectorExpressionWriter init(      ExprNodeDesc nodeDesc) throws HiveException {
        super.init(nodeDesc);
        writable=new ByteWritable();
        return this;
      }
      @Override public Object writeValue(      long value){
        writable.set((byte)value);
        return writable;
      }
    }
.init(nodeDesc);
  }
 else   if (nodeType.equalsIgnoreCase("smallint")) {
    return new VectorExpressionWriterLong(){
      private ShortWritable writable;
      @Override public VectorExpressionWriter init(      ExprNodeDesc nodeDesc) throws HiveException {
        super.init(nodeDesc);
        writable=new ShortWritable();
        return this;
      }
      @Override public Object writeValue(      long value){
        writable.set((short)value);
        return writable;
      }
    }
.init(nodeDesc);
  }
 else   if (nodeType.equalsIgnoreCase("int")) {
    return new VectorExpressionWriterLong(){
      private IntWritable writable;
      @Override public VectorExpressionWriter init(      ExprNodeDesc nodeDesc) throws HiveException {
        super.init(nodeDesc);
        writable=new IntWritable();
        return this;
      }
      @Override public Object writeValue(      long value){
        writable.set((int)value);
        return writable;
      }
    }
.init(nodeDesc);
  }
 else   if (nodeType.equalsIgnoreCase("bigint")) {
    return new VectorExpressionWriterLong(){
      private LongWritable writable;
      @Override public VectorExpressionWriter init(      ExprNodeDesc nodeDesc) throws HiveException {
        super.init(nodeDesc);
        writable=new LongWritable();
        return this;
      }
      @Override public Object writeValue(      long value){
        writable.set(value);
        return writable;
      }
    }
.init(nodeDesc);
  }
 else   if (nodeType.equalsIgnoreCase("boolean")) {
    return new VectorExpressionWriterLong(){
      private BooleanWritable writable;
      @Override public VectorExpressionWriter init(      ExprNodeDesc nodeDesc) throws HiveException {
        super.init(nodeDesc);
        writable=new BooleanWritable();
        return this;
      }
      @Override public Object writeValue(      long value){
        writable.set(value != 0 ? true : false);
        return writable;
      }
    }
.init(nodeDesc);
  }
 else   if (nodeType.equalsIgnoreCase("timestamp")) {
    return new VectorExpressionWriterLong(){
      private TimestampWritable writable;
      private Timestamp timestamp;
      @Override public VectorExpressionWriter init(      ExprNodeDesc nodeDesc) throws HiveException {
        super.init(nodeDesc);
        writable=new TimestampWritable();
        timestamp=new Timestamp(0);
        return this;
      }
      @Override public Object writeValue(      long value){
        TimestampUtils.assignTimeInNanoSec(value,timestamp);
        writable.set(timestamp);
        return writable;
      }
    }
.init(nodeDesc);
  }
 else   if (nodeType.equalsIgnoreCase("string")) {
    return new VectorExpressionWriterBytes(){
      private Text writable;
      @Override public VectorExpressionWriter init(      ExprNodeDesc nodeDesc) throws HiveException {
        super.init(nodeDesc);
        writable=new Text();
        return this;
      }
      @Override public Object writeValue(      byte[] value,      int start,      int length) throws HiveException {
        writable.set(value,start,length);
        return writable;
      }
    }
.init(nodeDesc);
  }
 else   if (nodeType.equalsIgnoreCase("float")) {
    return new VectorExpressionWriterDouble(){
      private FloatWritable writable;
      @Override public VectorExpressionWriter init(      ExprNodeDesc nodeDesc) throws HiveException {
        super.init(nodeDesc);
        writable=new FloatWritable();
        return this;
      }
      @Override public Object writeValue(      double value){
        writable.set((float)value);
        return writable;
      }
    }
.init(nodeDesc);
  }
 else   if (nodeType.equalsIgnoreCase("double")) {
    return new VectorExpressionWriterDouble(){
      private DoubleWritable writable;
      @Override public VectorExpressionWriter init(      ExprNodeDesc nodeDesc) throws HiveException {
        super.init(nodeDesc);
        writable=new DoubleWritable();
        return this;
      }
      @Override public Object writeValue(      double value){
        writable.set(value);
        return writable;
      }
    }
.init(nodeDesc);
  }
  throw new HiveException(String.format("Unimplemented genVectorExpressionWritable type: %s for expression: %s",nodeType,nodeDesc));
}
