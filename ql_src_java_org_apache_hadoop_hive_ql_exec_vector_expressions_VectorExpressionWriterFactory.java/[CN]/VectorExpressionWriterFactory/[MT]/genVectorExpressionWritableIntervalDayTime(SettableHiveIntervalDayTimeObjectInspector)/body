{
  return new VectorExpressionWriterTimestamp(){
    private Object obj;
    private HiveIntervalDayTime interval;
    private PisaTimestamp pisaTimestamp;
    public VectorExpressionWriter init(    SettableHiveIntervalDayTimeObjectInspector objInspector) throws HiveException {
      super.init(objInspector);
      interval=new HiveIntervalDayTime();
      obj=initValue(null);
      pisaTimestamp=new PisaTimestamp();
      return this;
    }
    @Override public Object writeValue(    TimestampWritable value) throws HiveException {
      interval.set(pisaTimestamp.updateFromTimestamp(value.getTimestamp()));
      return ((SettableHiveIntervalDayTimeObjectInspector)this.objectInspector).set(obj,interval);
    }
    @Override public Object writeValue(    Timestamp value) throws HiveException {
      interval.set(pisaTimestamp.updateFromTimestamp(value));
      return ((SettableHiveIntervalDayTimeObjectInspector)this.objectInspector).set(obj,interval);
    }
    @Override public Object writeValue(    PisaTimestamp value) throws HiveException {
      interval.set(value);
      return ((SettableHiveIntervalDayTimeObjectInspector)this.objectInspector).set(obj,interval);
    }
    @Override public Object setValue(    Object field,    TimestampWritable value){
      if (null == field) {
        field=initValue(null);
      }
      interval.set(pisaTimestamp.updateFromTimestamp(value.getTimestamp()));
      return ((SettableHiveIntervalDayTimeObjectInspector)this.objectInspector).set(field,interval);
    }
    @Override public Object setValue(    Object field,    Timestamp value){
      if (null == field) {
        field=initValue(null);
      }
      interval.set(pisaTimestamp.updateFromTimestamp(value));
      return ((SettableHiveIntervalDayTimeObjectInspector)this.objectInspector).set(field,interval);
    }
    @Override public Object initValue(    Object ignored){
      return ((SettableHiveIntervalDayTimeObjectInspector)this.objectInspector).create(new HiveIntervalDayTime());
    }
  }
.init(fieldObjInspector);
}
