{
switch (fieldObjInspector.getCategory()) {
case PRIMITIVE:
switch (((PrimitiveObjectInspector)fieldObjInspector).getPrimitiveCategory()) {
case FLOAT:
      return genVectorExpressionWritableFloat((SettableFloatObjectInspector)fieldObjInspector);
case DOUBLE:
    return genVectorExpressionWritableDouble((SettableDoubleObjectInspector)fieldObjInspector);
case BOOLEAN:
  return genVectorExpressionWritableBoolean((SettableBooleanObjectInspector)fieldObjInspector);
case BYTE:
return genVectorExpressionWritableByte((SettableByteObjectInspector)fieldObjInspector);
case SHORT:
return genVectorExpressionWritableShort((SettableShortObjectInspector)fieldObjInspector);
case INT:
return genVectorExpressionWritableInt((SettableIntObjectInspector)fieldObjInspector);
case LONG:
return genVectorExpressionWritableLong((SettableLongObjectInspector)fieldObjInspector);
case VOID:
return genVectorExpressionWritableVoid((VoidObjectInspector)fieldObjInspector);
case BINARY:
return genVectorExpressionWritableBinary((SettableBinaryObjectInspector)fieldObjInspector);
case STRING:
return genVectorExpressionWritableString((SettableStringObjectInspector)fieldObjInspector);
case CHAR:
return genVectorExpressionWritableChar((SettableHiveCharObjectInspector)fieldObjInspector);
case VARCHAR:
return genVectorExpressionWritableVarchar((SettableHiveVarcharObjectInspector)fieldObjInspector);
case TIMESTAMP:
return genVectorExpressionWritableTimestamp((SettableTimestampObjectInspector)fieldObjInspector);
case DATE:
return genVectorExpressionWritableDate((SettableDateObjectInspector)fieldObjInspector);
case DECIMAL:
return genVectorExpressionWritableDecimal((SettableHiveDecimalObjectInspector)fieldObjInspector);
default :
throw new IllegalArgumentException("Unknown primitive type: " + ((PrimitiveObjectInspector)fieldObjInspector).getPrimitiveCategory());
}
case STRUCT:
case UNION:
case MAP:
case LIST:
throw new IllegalArgumentException("Unsupported complex type: " + fieldObjInspector.getCategory());
default :
throw new IllegalArgumentException("Unknown type " + fieldObjInspector.getCategory());
}
}
