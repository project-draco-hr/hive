{
  ArrayList<String> args=new ArrayList<String>();
  try {
    ArrayList<String> allFiles=new ArrayList<String>();
    allFiles.add(TempletonUtils.hadoopFsFilename(jar,appConf,runAs));
    args.addAll(makeLauncherArgs(appConf,statusdir,completedUrl,allFiles,enablelog,jobType));
    args.add("--");
    TempletonUtils.addCmdForWindows(args);
    if (usehcatalog) {
      addHiveMetaStoreTokenArg();
    }
    args.add(appConf.clusterHadoop());
    args.add("jar");
    args.add(TempletonUtils.hadoopFsPath(jar,appConf,runAs).getName());
    if (TempletonUtils.isset(mainClass)) {
      args.add(mainClass);
    }
    if (TempletonUtils.isset(libjars)) {
      String libjarsListAsString=TempletonUtils.hadoopFsListAsString(libjars,appConf,runAs);
      args.add("-libjars");
      args.add(TempletonUtils.quoteForWindows(libjarsListAsString));
    }
    if (TempletonUtils.isset(files)) {
      String filesListAsString=TempletonUtils.hadoopFsListAsString(files,appConf,runAs);
      args.add("-files");
      args.add(TempletonUtils.quoteForWindows(filesListAsString));
    }
    args.add("-D" + TempletonControllerJob.TOKEN_FILE_ARG_PLACEHOLDER);
    for (    String d : defines) {
      args.add("-D");
      TempletonUtils.quoteForWindows(d);
    }
    for (    String arg : jarArgs) {
      args.add(TempletonUtils.quoteForWindows(arg));
    }
  }
 catch (  FileNotFoundException e) {
    throw new BadParam(e.getMessage());
  }
catch (  URISyntaxException e) {
    throw new BadParam(e.getMessage());
  }
  return args;
}
