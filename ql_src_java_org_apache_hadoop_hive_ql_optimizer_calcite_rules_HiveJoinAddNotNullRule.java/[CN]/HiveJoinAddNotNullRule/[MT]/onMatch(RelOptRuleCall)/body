{
  final Join join=call.rel(0);
  RelNode leftInput=call.rel(1);
  RelNode rightInput=call.rel(2);
  if (join.getJoinType() != JoinRelType.INNER) {
    return;
  }
  if (join.getCondition().isAlwaysTrue()) {
    return;
  }
  JoinPredicateInfo joinPredInfo;
  try {
    joinPredInfo=HiveCalciteUtil.JoinPredicateInfo.constructJoinPredicateInfo(join);
  }
 catch (  CalciteSemanticException e) {
    return;
  }
  Set<Integer> joinLeftKeyPositions=new HashSet<Integer>();
  Set<Integer> joinRightKeyPositions=new HashSet<Integer>();
  for (int i=0; i < joinPredInfo.getEquiJoinPredicateElements().size(); i++) {
    JoinLeafPredicateInfo joinLeafPredInfo=joinPredInfo.getEquiJoinPredicateElements().get(i);
    joinLeftKeyPositions.addAll(joinLeafPredInfo.getProjsFromLeftPartOfJoinKeysInChildSchema());
    joinRightKeyPositions.addAll(joinLeafPredInfo.getProjsFromRightPartOfJoinKeysInChildSchema());
  }
  final RelOptCluster cluster=join.getCluster();
  final RexBuilder rexBuilder=join.getCluster().getRexBuilder();
  final Map<String,RexNode> newLeftConditions=getNotNullConditions(cluster,rexBuilder,leftInput,joinLeftKeyPositions);
  final Map<String,RexNode> newRightConditions=getNotNullConditions(cluster,rexBuilder,rightInput,joinRightKeyPositions);
  if (newLeftConditions == null && newRightConditions == null) {
    return;
  }
  if (newLeftConditions != null) {
    if (leftInput instanceof HiveFilter) {
      leftInput=leftInput.getInput(0);
    }
    leftInput=createHiveFilterConjunctiveCondition(filterFactory,rexBuilder,leftInput,newLeftConditions.values());
  }
  if (newRightConditions != null) {
    if (rightInput instanceof HiveFilter) {
      rightInput=rightInput.getInput(0);
    }
    rightInput=createHiveFilterConjunctiveCondition(filterFactory,rexBuilder,rightInput,newRightConditions.values());
  }
  Join newJoin=join.copy(join.getTraitSet(),join.getCondition(),leftInput,rightInput,join.getJoinType(),join.isSemiJoinDone());
  call.getPlanner().onCopy(join,newJoin);
  call.transformTo(newJoin);
}
