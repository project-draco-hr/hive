{
  boolean added=false;
  final RelDataType returnType=cluster.getTypeFactory().createSqlType(SqlTypeName.BOOLEAN);
  final Map<String,RexNode> newConditions;
  if (input instanceof HiveFilter) {
    newConditions=splitCondition(((HiveFilter)input).getCondition());
  }
 else {
    newConditions=new HashMap<String,RexNode>();
  }
  for (  int pos : inputKeyPositions) {
    try {
      RelDataType keyType=input.getRowType().getFieldList().get(pos).getType();
      SqlOperator funcCall=SqlFunctionConverter.getCalciteOperator(NOT_NULL_FUNC_NAME,FunctionRegistry.getFunctionInfo(NOT_NULL_FUNC_NAME).getGenericUDF(),ImmutableList.of(keyType),returnType);
      RexNode cond=rexBuilder.makeCall(funcCall,rexBuilder.makeInputRef(input,pos));
      String digest=cond.toString();
      if (!newConditions.containsKey(digest)) {
        newConditions.put(digest,cond);
        added=true;
      }
    }
 catch (    SemanticException e) {
      throw new AssertionError(e.getMessage());
    }
  }
  if (!added) {
    return null;
  }
  return newConditions;
}
