{
  itrCursor=0;
  this.readBlockSize=0;
  if (this.numFlushedBlocks == 0) {
    return false;
  }
  try {
    if (val == null) {
      val=serde.getSerializedClass().newInstance();
    }
    boolean nextSplit=true;
    int i=0;
    if (rr != null) {
      Object key=rr.createKey();
      while (i < this.currentReadBlock.length && rr.next(key,val)) {
        nextSplit=false;
        this.currentReadBlock[i++]=(Row)ObjectInspectorUtils.copyToStandardObject(serde.deserialize(val),serde.getObjectInspector(),ObjectInspectorCopyOption.WRITABLE);
      }
    }
    if (nextSplit && this.currentSplitPointer < this.acutalSplitNum) {
      JobConf localJc=getLocalFSJobConfClone(jc);
      rr=inputFormat.getRecordReader(inputSplits[currentSplitPointer],jobCloneUsingLocalFs,Reporter.NULL);
      currentSplitPointer++;
      return nextBlock();
    }
    this.readBlockSize=i;
    return this.readBlockSize > 0;
  }
 catch (  Exception e) {
    LOG.error(e.getMessage(),e);
    try {
      this.clear();
    }
 catch (    HiveException e1) {
      LOG.error(e.getMessage(),e);
    }
    throw new HiveException(e);
  }
}
