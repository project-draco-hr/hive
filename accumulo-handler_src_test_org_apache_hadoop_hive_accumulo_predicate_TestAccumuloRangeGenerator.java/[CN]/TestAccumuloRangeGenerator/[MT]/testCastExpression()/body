{
  ExprNodeDesc fourty=new ExprNodeConstantDesc(TypeInfoFactory.intTypeInfo,40), fifty=new ExprNodeConstantDesc(TypeInfoFactory.intTypeInfo,50);
  GenericUDFOPPlus plus=new GenericUDFOPPlus();
  ExprNodeGenericFuncDesc addition=new ExprNodeGenericFuncDesc(TypeInfoFactory.intTypeInfo,plus,Arrays.asList(fourty,fifty));
  UDFToString stringCast=new UDFToString();
  GenericUDFBridge stringCastBridge=new GenericUDFBridge("cast",false,stringCast.getClass().getName());
  ExprNodeGenericFuncDesc cast=new ExprNodeGenericFuncDesc(TypeInfoFactory.stringTypeInfo,stringCastBridge,"cast",Collections.<ExprNodeDesc>singletonList(addition));
  ExprNodeDesc key=new ExprNodeColumnDesc(TypeInfoFactory.stringTypeInfo,"key",null,false);
  ExprNodeGenericFuncDesc node=new ExprNodeGenericFuncDesc(TypeInfoFactory.stringTypeInfo,new GenericUDFOPEqualOrGreaterThan(),Arrays.asList(key,cast));
  AccumuloRangeGenerator rangeGenerator=new AccumuloRangeGenerator(handler,rowIdMapping,"key");
  Dispatcher disp=new DefaultRuleDispatcher(rangeGenerator,Collections.<Rule,NodeProcessor>emptyMap(),null);
  GraphWalker ogw=new DefaultGraphWalker(disp);
  ArrayList<Node> topNodes=new ArrayList<Node>();
  topNodes.add(node);
  HashMap<Node,Object> nodeOutput=new HashMap<Node,Object>();
  try {
    ogw.startWalking(topNodes,nodeOutput);
  }
 catch (  SemanticException ex) {
    throw new RuntimeException(ex);
  }
  Object result=nodeOutput.get(node);
  Assert.assertNull(result);
}
