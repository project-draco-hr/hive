{
  ExprNodeDesc column=new ExprNodeColumnDesc(TypeInfoFactory.stringTypeInfo,"rid",null,false);
  ExprNodeDesc constant=new ExprNodeConstantDesc(TypeInfoFactory.stringTypeInfo,"h");
  List<ExprNodeDesc> children=Lists.newArrayList();
  children.add(column);
  children.add(constant);
  ExprNodeDesc node=new ExprNodeGenericFuncDesc(TypeInfoFactory.stringTypeInfo,new GenericUDFOPEqualOrGreaterThan(),children);
  assertNotNull(node);
  ExprNodeDesc column2=new ExprNodeColumnDesc(TypeInfoFactory.stringTypeInfo,"rid",null,false);
  ExprNodeDesc constant2=new ExprNodeConstantDesc(TypeInfoFactory.stringTypeInfo,"d");
  List<ExprNodeDesc> children2=Lists.newArrayList();
  children2.add(column2);
  children2.add(constant2);
  ExprNodeDesc node2=new ExprNodeGenericFuncDesc(TypeInfoFactory.stringTypeInfo,new GenericUDFOPEqualOrLessThan(),children2);
  assertNotNull(node2);
  ExprNodeDesc column3=new ExprNodeColumnDesc(TypeInfoFactory.stringTypeInfo,"rid",null,false);
  ExprNodeDesc constant3=new ExprNodeConstantDesc(TypeInfoFactory.stringTypeInfo,"q");
  List<ExprNodeDesc> children3=Lists.newArrayList();
  children3.add(column3);
  children3.add(constant3);
  ExprNodeDesc node3=new ExprNodeGenericFuncDesc(TypeInfoFactory.stringTypeInfo,new GenericUDFOPEqualOrGreaterThan(),children3);
  assertNotNull(node3);
  List<ExprNodeDesc> orFilters=Lists.newArrayList();
  orFilters.add(node2);
  orFilters.add(node3);
  ExprNodeGenericFuncDesc orNode=new ExprNodeGenericFuncDesc(TypeInfoFactory.stringTypeInfo,new GenericUDFOPOr(),orFilters);
  List<ExprNodeDesc> andFilters=Lists.newArrayList();
  andFilters.add(node);
  andFilters.add(orNode);
  ExprNodeGenericFuncDesc both=new ExprNodeGenericFuncDesc(TypeInfoFactory.stringTypeInfo,new GenericUDFOPAnd(),andFilters);
  List<Range> expectedRanges=Arrays.asList(new Range(new Key("q"),true,null,false));
  AccumuloRangeGenerator rangeGenerator=new AccumuloRangeGenerator(handler,rowIdMapping,"rid");
  Dispatcher disp=new DefaultRuleDispatcher(rangeGenerator,Collections.<Rule,NodeProcessor>emptyMap(),null);
  GraphWalker ogw=new DefaultGraphWalker(disp);
  ArrayList<Node> topNodes=new ArrayList<Node>();
  topNodes.add(both);
  HashMap<Node,Object> nodeOutput=new HashMap<Node,Object>();
  try {
    ogw.startWalking(topNodes,nodeOutput);
  }
 catch (  SemanticException ex) {
    throw new RuntimeException(ex);
  }
  Object result=nodeOutput.get(both);
  Assert.assertNotNull(result);
  Assert.assertTrue("Result from graph walk was not a List",result instanceof List);
  @SuppressWarnings("unchecked") List<Range> actualRanges=(List<Range>)result;
  Assert.assertEquals(expectedRanges,actualRanges);
}
