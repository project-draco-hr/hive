{
  Connection conn=null;
  ArrayList<Statement> statements=new ArrayList<Statement>();
  try {
    Properties props=new Properties();
    props.put("user",conf.get("javax.jdo.option.ConnectionUserName"));
    props.put("password",conf.get("javax.jdo.option.ConnectionPassword"));
    conn=DriverManager.getConnection(conf.get("javax.jdo.option.ConnectionURL"),props);
    ResultSet rs=null;
    Statement s=conn.createStatement();
    if (LOG.isDebugEnabled()) {
      LOG.debug("Connected to metastore database ");
    }
    String mdbPath="../../data/files/tpcds-perf/metastore_export/";
    BufferedReader br=new BufferedReader(new FileReader(new File("../../metastore/scripts/upgrade/derby/022-HIVE-11107.derby.sql")));
    String command;
    s.execute("DROP TABLE APP.TABLE_PARAMS");
    s.execute("DROP TABLE APP.TAB_COL_STATS");
    while ((command=br.readLine()) != null) {
      if (!command.endsWith(";")) {
        continue;
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug("Going to run command : " + command);
      }
      try {
        PreparedStatement psCommand=conn.prepareStatement(command.substring(0,command.length() - 1));
        statements.add(psCommand);
        psCommand.execute();
        if (LOG.isDebugEnabled()) {
          LOG.debug("successfully completed " + command);
        }
      }
 catch (      SQLException e) {
        LOG.info("Got SQL Exception " + e.getMessage());
      }
    }
    br.close();
    File tabColStatsCsv=new File(mdbPath + "csv/TAB_COL_STATS.txt");
    File tabParamsCsv=new File(mdbPath + "csv/TABLE_PARAMS.txt");
    String tmpBaseDir=System.getProperty("test.tmp.dir");
    File tmpFileLoc1=new File(tmpBaseDir + "/TAB_COL_STATS.txt");
    File tmpFileLoc2=new File(tmpBaseDir + "/TABLE_PARAMS.txt");
    FileUtils.copyFile(tabColStatsCsv,tmpFileLoc1);
    FileUtils.copyFile(tabParamsCsv,tmpFileLoc2);
class MyComp implements Comparator<String> {
      @Override public int compare(      String str1,      String str2){
        if (str2.length() != str1.length()) {
          return str2.length() - str1.length();
        }
        return str1.compareTo(str2);
      }
    }
    SortedMap<String,Integer> tableNameToID=new TreeMap<String,Integer>(new MyComp());
    rs=s.executeQuery("SELECT * FROM APP.TBLS");
    while (rs.next()) {
      String tblName=rs.getString("TBL_NAME");
      Integer tblId=rs.getInt("TBL_ID");
      tableNameToID.put(tblName,tblId);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Resultset : " + tblName + " | "+ tblId);
      }
    }
    for (    Map.Entry<String,Integer> entry : tableNameToID.entrySet()) {
      String toReplace1=",_" + entry.getKey() + "_";
      String replacementString1="," + entry.getValue();
      String toReplace2="_" + entry.getKey() + "_@";
      String replacementString2="" + entry.getValue() + "@";
      try {
        String content1=FileUtils.readFileToString(tmpFileLoc1,"UTF-8");
        content1=content1.replaceAll(toReplace1,replacementString1);
        FileUtils.writeStringToFile(tmpFileLoc1,content1,"UTF-8");
        String content2=FileUtils.readFileToString(tmpFileLoc2,"UTF-8");
        content2=content2.replaceAll(toReplace2,replacementString2);
        FileUtils.writeStringToFile(tmpFileLoc2,content2,"UTF-8");
      }
 catch (      IOException e) {
        LOG.info("Generating file failed",e);
      }
    }
    String importStatement1="CALL SYSCS_UTIL.SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE(null, '" + "TAB_COL_STATS" + "', '" + tmpFileLoc1.getAbsolutePath() + "', ',', null, 'UTF-8', 1)";
    String importStatement2="CALL SYSCS_UTIL.SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE(null, '" + "TABLE_PARAMS" + "', '" + tmpFileLoc2.getAbsolutePath() + "', '@', null, 'UTF-8', 1)";
    try {
      PreparedStatement psImport1=conn.prepareStatement(importStatement1);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Going to execute : " + importStatement1);
      }
      statements.add(psImport1);
      psImport1.execute();
      if (LOG.isDebugEnabled()) {
        LOG.debug("successfully completed " + importStatement1);
      }
      PreparedStatement psImport2=conn.prepareStatement(importStatement2);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Going to execute : " + importStatement2);
      }
      statements.add(psImport2);
      psImport2.execute();
      if (LOG.isDebugEnabled()) {
        LOG.debug("successfully completed " + importStatement2);
      }
    }
 catch (    SQLException e) {
      LOG.info("Got SQL Exception  " + e.getMessage());
    }
  }
 catch (  FileNotFoundException e1) {
    LOG.info("Got File not found Exception " + e1.getMessage());
  }
catch (  IOException e1) {
    LOG.info("Got IOException " + e1.getMessage());
  }
catch (  SQLException e1) {
    LOG.info("Got SQLException " + e1.getMessage());
  }
 finally {
    int i=0;
    while (!statements.isEmpty()) {
      Statement st=(Statement)statements.remove(i);
      try {
        if (st != null) {
          st.close();
          st=null;
        }
      }
 catch (      SQLException sqle) {
      }
    }
    try {
      if (conn != null) {
        conn.close();
        conn=null;
      }
    }
 catch (    SQLException sqle) {
    }
  }
}
