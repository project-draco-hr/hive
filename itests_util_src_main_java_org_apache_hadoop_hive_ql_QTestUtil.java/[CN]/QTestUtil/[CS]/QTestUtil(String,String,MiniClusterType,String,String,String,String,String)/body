{
  this.outDir=outDir;
  this.logDir=logDir;
  this.tezDir=tezDirectory;
  if (confDir != null && !confDir.isEmpty()) {
    HiveConf.setHiveSiteLocation(new URL("file://" + new File(confDir).toURI().getPath() + "/hive-site.xml"));
    System.out.println("Setting hive-site: " + HiveConf.getHiveSiteLocation());
  }
  conf=new HiveConf(Driver.class);
  this.hadoopVer=getHadoopMainVersion(hadoopVer);
  qMap=new TreeMap<String,String>();
  qSkipSet=new HashSet<String>();
  qSortSet=new HashSet<String>();
  qSortQuerySet=new HashSet<String>();
  qHashQuerySet=new HashSet<String>();
  qSortNHashQuerySet=new HashSet<String>();
  qJavaVersionSpecificOutput=new HashSet<String>();
  QTestUtil.clusterType=clusterType;
  HadoopShims shims=ShimLoader.getHadoopShims();
  int numberOfDataNodes=4;
  if (clusterType != MiniClusterType.none && clusterType != MiniClusterType.spark) {
    FileSystem fs=null;
    if (clusterType == MiniClusterType.encrypted) {
      conf.set(SECURITY_KEY_PROVIDER_URI_NAME,getKeyProviderURI());
      dfs=shims.getMiniDfs(conf,numberOfDataNodes,true,null);
      fs=dfs.getFileSystem();
      hes=shims.createHdfsEncryptionShim(fs,conf);
      LOG.info("key provider is initialized");
    }
 else {
      dfs=shims.getMiniDfs(conf,numberOfDataNodes,true,null);
      fs=dfs.getFileSystem();
    }
    String uriString=WindowsPathUtil.getHdfsUriString(fs.getUri().toString());
    if (clusterType == MiniClusterType.tez) {
      mr=shims.getMiniTezCluster(conf,4,uriString,1,false,tezDir + "/staging");
    }
 else     if (clusterType == MiniClusterType.tezlocal) {
      mr=shims.getMiniTezCluster(conf,4,uriString,1,true,tezDir + "/staging");
    }
 else {
      mr=shims.getMiniMrCluster(conf,4,uriString,1);
    }
  }
  initConf();
  String dataDir=conf.get("test.data.files");
  if (dataDir == null) {
    dataDir=new File(".").getAbsolutePath() + "/data/files";
  }
  testFiles=dataDir;
  String scriptsDir=conf.get("test.data.scripts");
  if (scriptsDir == null) {
    scriptsDir=new File(".").getAbsolutePath() + "/data/scripts";
  }
  if (initScript.isEmpty()) {
    initScript=defaultInitScript;
  }
  if (cleanupScript.isEmpty()) {
    cleanupScript=defaultCleanupScript;
  }
  this.initScript=scriptsDir + "/" + initScript;
  this.cleanupScript=scriptsDir + "/" + cleanupScript;
  overWrite="true".equalsIgnoreCase(System.getProperty("test.output.overwrite"));
  setup=new QTestSetup();
  setup.preTest(conf);
  init();
}
