{
  JobInfo jobInfo;
  try {
    jobInfo=getJobInfo(jobContext);
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
  List<InputSplit> splits=new ArrayList<InputSplit>();
  List<PartInfo> partitionInfoList=jobInfo.getPartitions();
  if (partitionInfoList == null) {
    return splits;
  }
  for (  PartInfo partitionInfo : partitionInfoList) {
    Job localJob=new Job(jobContext.getConfiguration());
    HCatInputStorageDriver storageDriver;
    try {
      storageDriver=getInputDriverInstance(partitionInfo.getInputStorageDriverClass());
    }
 catch (    Exception e) {
      throw new IOException(e);
    }
    initStorageDriver(storageDriver,localJob,partitionInfo,jobInfo.getTableSchema());
    InputFormat inputFormat=storageDriver.getInputFormat(partitionInfo.getInputStorageDriverProperties());
    List<InputSplit> baseSplits=inputFormat.getSplits(localJob);
    for (    InputSplit split : baseSplits) {
      splits.add(new HCatSplit(partitionInfo,split,jobInfo.getTableSchema()));
    }
  }
  return splits;
}
