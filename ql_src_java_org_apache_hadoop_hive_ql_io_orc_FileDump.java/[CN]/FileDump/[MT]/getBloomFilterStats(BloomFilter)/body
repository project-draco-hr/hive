{
  StringBuilder sb=new StringBuilder();
  int bitCount=bf.getBitSize();
  int popCount=0;
  for (  long l : bf.getBitSet()) {
    popCount+=Long.bitCount(l);
  }
  int k=bf.getNumHashFunctions();
  float loadFactor=(float)popCount / (float)bitCount;
  float expectedFpp=(float)Math.pow(loadFactor,k);
  DecimalFormat df=new DecimalFormat("###.####");
  sb.append(" numHashFunctions: ").append(k);
  sb.append(" bitCount: ").append(bitCount);
  sb.append(" popCount: ").append(popCount);
  sb.append(" loadFactor: ").append(df.format(loadFactor));
  sb.append(" expectedFpp: ").append(expectedFpp);
  return sb.toString();
}
