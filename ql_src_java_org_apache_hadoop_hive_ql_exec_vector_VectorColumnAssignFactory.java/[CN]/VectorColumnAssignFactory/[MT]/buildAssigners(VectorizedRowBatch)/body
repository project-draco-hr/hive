{
  VectorColumnAssign[] vca=new VectorColumnAssign[outputBatch.cols.length];
  for (int i=0; i < vca.length; ++i) {
    ColumnVector cv=outputBatch.cols[i];
    if (cv == null) {
      continue;
    }
 else     if (cv instanceof LongColumnVector) {
      vca[i]=new VectorLongColumnAssign(){
        @Override protected void copyValue(        LongColumnVector in,        int srcIndex,        int destIndex){
          assignLong(in.vector[srcIndex],destIndex);
        }
      }
.init(outputBatch,(LongColumnVector)cv);
    }
 else     if (cv instanceof DoubleColumnVector) {
      vca[i]=new VectorDoubleColumnAssign(){
        @Override protected void copyValue(        DoubleColumnVector in,        int srcIndex,        int destIndex){
          assignDouble(in.vector[srcIndex],destIndex);
        }
      }
.init(outputBatch,(DoubleColumnVector)cv);
    }
 else     if (cv instanceof BytesColumnVector) {
      vca[i]=new VectorBytesColumnAssign(){
        @Override protected void copyValue(        BytesColumnVector src,        int srcIndex,        int destIndex){
          assignBytes(src.vector[srcIndex],src.start[srcIndex],src.length[srcIndex],destIndex);
        }
      }
.init(outputBatch,(BytesColumnVector)cv);
    }
 else     if (cv instanceof DecimalColumnVector) {
      vca[i]=new VectorDecimalColumnAssign(){
        @Override protected void copyValue(        DecimalColumnVector src,        int srcIndex,        int destIndex){
          assignDecimal(src.vector[srcIndex],destIndex);
        }
      }
;
    }
 else {
      throw new HiveException("Unimplemented vector column type: " + cv.getClass().getName());
    }
  }
  return vca;
}
