{
  VectorColumnAssign outVCA=null;
  ColumnVector destCol=outputBatch.cols[outColIndex];
  if (destCol == null) {
switch (category) {
case VOID:
      outVCA=new VectorLongColumnAssign(){
        @Override public void assignObjectValue(        Object val,        int destIndex) throws HiveException {
          assert(val == null);
        }
      }
;
    break;
default :
  throw new HiveException("Incompatible (null) vector column and primitive category " + category);
}
}
 else if (destCol instanceof LongColumnVector) {
switch (category) {
case BOOLEAN:
outVCA=new VectorLongColumnAssign(){
  @Override public void assignObjectValue(  Object val,  int destIndex) throws HiveException {
    if (val == null) {
      assignNull(destIndex);
    }
 else {
      BooleanWritable bw=(BooleanWritable)val;
      assignLong(bw.get() ? 1 : 0,destIndex);
    }
  }
}
.init(outputBatch,(LongColumnVector)destCol);
break;
case BYTE:
outVCA=new VectorLongColumnAssign(){
@Override public void assignObjectValue(Object val,int destIndex) throws HiveException {
if (val == null) {
  assignNull(destIndex);
}
 else {
  ByteWritable bw=(ByteWritable)val;
  assignLong(bw.get(),destIndex);
}
}
}
.init(outputBatch,(LongColumnVector)destCol);
break;
case SHORT:
outVCA=new VectorLongColumnAssign(){
@Override public void assignObjectValue(Object val,int destIndex) throws HiveException {
if (val == null) {
assignNull(destIndex);
}
 else {
ShortWritable bw=(ShortWritable)val;
assignLong(bw.get(),destIndex);
}
}
}
.init(outputBatch,(LongColumnVector)destCol);
break;
case INT:
outVCA=new VectorLongColumnAssign(){
@Override public void assignObjectValue(Object val,int destIndex) throws HiveException {
if (val == null) {
assignNull(destIndex);
}
 else {
IntWritable bw=(IntWritable)val;
assignLong(bw.get(),destIndex);
}
}
}
.init(outputBatch,(LongColumnVector)destCol);
break;
case LONG:
outVCA=new VectorLongColumnAssign(){
@Override public void assignObjectValue(Object val,int destIndex) throws HiveException {
if (val == null) {
assignNull(destIndex);
}
 else {
LongWritable bw=(LongWritable)val;
assignLong(bw.get(),destIndex);
}
}
}
.init(outputBatch,(LongColumnVector)destCol);
break;
case TIMESTAMP:
outVCA=new VectorLongColumnAssign(){
@Override public void assignObjectValue(Object val,int destIndex) throws HiveException {
if (val == null) {
assignNull(destIndex);
}
 else {
TimestampWritable bw=(TimestampWritable)val;
Timestamp t=bw.getTimestamp();
assignLong(TimestampUtils.getTimeNanoSec(t),destIndex);
}
}
}
.init(outputBatch,(LongColumnVector)destCol);
break;
case DATE:
outVCA=new VectorLongColumnAssign(){
@Override public void assignObjectValue(Object val,int destIndex) throws HiveException {
if (val == null) {
assignNull(destIndex);
}
 else {
DateWritable bw=(DateWritable)val;
assignLong(bw.getDays(),destIndex);
}
}
}
.init(outputBatch,(LongColumnVector)destCol);
break;
default :
throw new HiveException("Incompatible Long vector column and primitive category " + category);
}
}
 else if (destCol instanceof DoubleColumnVector) {
switch (category) {
case DOUBLE:
outVCA=new VectorDoubleColumnAssign(){
@Override public void assignObjectValue(Object val,int destIndex) throws HiveException {
if (val == null) {
assignNull(destIndex);
}
 else {
DoubleWritable bw=(DoubleWritable)val;
assignDouble(bw.get(),destIndex);
}
}
}
.init(outputBatch,(DoubleColumnVector)destCol);
break;
case FLOAT:
outVCA=new VectorDoubleColumnAssign(){
@Override public void assignObjectValue(Object val,int destIndex) throws HiveException {
if (val == null) {
assignNull(destIndex);
}
 else {
FloatWritable bw=(FloatWritable)val;
assignDouble(bw.get(),destIndex);
}
}
}
.init(outputBatch,(DoubleColumnVector)destCol);
break;
default :
throw new HiveException("Incompatible Double vector column and primitive category " + category);
}
}
 else if (destCol instanceof BytesColumnVector) {
switch (category) {
case BINARY:
outVCA=new VectorBytesColumnAssign(){
@Override public void assignObjectValue(Object val,int destIndex) throws HiveException {
if (val == null) {
assignNull(destIndex);
}
 else {
BytesWritable bw=(BytesWritable)val;
byte[] bytes=bw.getBytes();
assignBytes(bytes,0,bw.getLength(),destIndex);
}
}
}
.init(outputBatch,(BytesColumnVector)destCol);
break;
case STRING:
outVCA=new VectorBytesColumnAssign(){
@Override public void assignObjectValue(Object val,int destIndex) throws HiveException {
if (val == null) {
assignNull(destIndex);
}
 else {
Text bw=(Text)val;
byte[] bytes=bw.getBytes();
assignBytes(bytes,0,bw.getLength(),destIndex);
}
}
}
.init(outputBatch,(BytesColumnVector)destCol);
break;
case VARCHAR:
outVCA=new VectorBytesColumnAssign(){
@Override public void assignObjectValue(Object val,int destIndex) throws HiveException {
if (val == null) {
assignNull(destIndex);
}
 else {
HiveVarchar hiveVarchar=(HiveVarchar)val;
byte[] bytes=hiveVarchar.getValue().getBytes();
assignBytes(bytes,0,bytes.length,destIndex);
}
}
}
.init(outputBatch,(BytesColumnVector)destCol);
break;
case CHAR:
outVCA=new VectorBytesColumnAssign(){
@Override public void assignObjectValue(Object val,int destIndex) throws HiveException {
if (val == null) {
assignNull(destIndex);
}
 else {
HiveChar hiveChar=(HiveChar)val;
byte[] bytes=hiveChar.getStrippedValue().getBytes();
assignBytes(bytes,0,bytes.length,destIndex);
}
}
}
.init(outputBatch,(BytesColumnVector)destCol);
break;
default :
throw new HiveException("Incompatible Bytes vector column and primitive category " + category);
}
}
 else if (destCol instanceof DecimalColumnVector) {
switch (category) {
case DECIMAL:
outVCA=new VectorDecimalColumnAssign(){
@Override public void assignObjectValue(Object val,int destIndex) throws HiveException {
if (val == null) {
assignNull(destIndex);
}
 else {
if (val instanceof HiveDecimal) {
assignDecimal((HiveDecimal)val,destIndex);
}
 else {
assignDecimal((HiveDecimalWritable)val,destIndex);
}
}
}
}
.init(outputBatch,(DecimalColumnVector)destCol);
break;
default :
throw new HiveException("Incompatible Decimal vector column and primitive category " + category);
}
}
 else {
throw new HiveException("Unknown vector column type " + destCol.getClass().getName());
}
return outVCA;
}
