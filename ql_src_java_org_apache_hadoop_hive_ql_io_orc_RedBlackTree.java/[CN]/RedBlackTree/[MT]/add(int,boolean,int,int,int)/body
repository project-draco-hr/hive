{
  if (node == NULL) {
    if (root == NULL) {
      lastAdd=insert(NULL,NULL,false);
      root=lastAdd;
      wasAdd=true;
      return false;
    }
 else {
      lastAdd=insert(NULL,NULL,true);
      node=lastAdd;
      wasAdd=true;
      if (fromLeft) {
        setLeft(parent,node);
      }
 else {
        setRight(parent,node);
      }
    }
  }
 else {
    int compare=compareValue(node);
    boolean keepGoing;
    if (compare < 0) {
      keepGoing=add(getLeft(node),true,node,parent,grandparent);
    }
 else     if (compare > 0) {
      keepGoing=add(getRight(node),false,node,parent,grandparent);
    }
 else {
      lastAdd=node;
      wasAdd=false;
      incrementCount(node,1);
      return false;
    }
    if (node == root || !keepGoing) {
      return false;
    }
  }
  if (isRed(node) && isRed(parent)) {
    if (parent == getLeft(grandparent)) {
      int uncle=getRight(grandparent);
      if (isRed(uncle)) {
        setRed(parent,false);
        setRed(uncle,false);
        setRed(grandparent,true);
        return true;
      }
 else {
        if (node == getRight(parent)) {
          int tmp=node;
          node=parent;
          parent=tmp;
          setLeft(grandparent,parent);
          setRight(node,getLeft(parent));
          setLeft(parent,node);
        }
        setRed(parent,false);
        setRed(grandparent,true);
        if (greatGrandparent == NULL) {
          root=parent;
        }
 else         if (getLeft(greatGrandparent) == grandparent) {
          setLeft(greatGrandparent,parent);
        }
 else {
          setRight(greatGrandparent,parent);
        }
        setLeft(grandparent,getRight(parent));
        setRight(parent,grandparent);
        return false;
      }
    }
 else {
      int uncle=getLeft(grandparent);
      if (isRed(uncle)) {
        setRed(parent,false);
        setRed(uncle,false);
        setRed(grandparent,true);
        return true;
      }
 else {
        if (node == getLeft(parent)) {
          int tmp=node;
          node=parent;
          parent=tmp;
          setRight(grandparent,parent);
          setLeft(node,getRight(parent));
          setRight(parent,node);
        }
        setRed(parent,false);
        setRed(grandparent,true);
        if (greatGrandparent == NULL) {
          root=parent;
        }
 else         if (getRight(greatGrandparent) == grandparent) {
          setRight(greatGrandparent,parent);
        }
 else {
          setLeft(greatGrandparent,parent);
        }
        setRight(grandparent,getLeft(parent));
        setLeft(parent,grandparent);
        return false;
      }
    }
  }
 else {
    return true;
  }
}
