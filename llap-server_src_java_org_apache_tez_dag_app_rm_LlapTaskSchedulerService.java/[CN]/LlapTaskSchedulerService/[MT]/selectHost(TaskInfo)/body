{
  String[] requestedHosts=request.requestedHosts;
  readLock.lock();
  try {
    if (getAvailableResources().getMemory() <= 0) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Refreshing instances since total memory is 0");
      }
      refreshInstances();
    }
    if (getTotalResources().getMemory() <= 0) {
      return null;
    }
    if (requestedHosts != null) {
      int prefHostCount=-1;
      for (      String host : requestedHosts) {
        prefHostCount++;
        Set<ServiceInstance> instances=activeInstances.getByHost(host);
        if (!instances.isEmpty()) {
          for (          ServiceInstance inst : instances) {
            NodeInfo nodeInfo=instanceToNodeMap.get(inst);
            if (nodeInfo != null && nodeInfo.canAcceptTask()) {
              LOG.info("Assigning " + inst + " when looking for "+ host+ "."+ " FirstRequestedHost="+ (prefHostCount == 0));
              return new NodeServiceInstancePair(inst,nodeInfo);
            }
          }
        }
      }
    }
    Entry<ServiceInstance,NodeInfo>[] all=instanceToNodeMap.entrySet().toArray(new Entry[instanceToNodeMap.size()]);
    if (all.length > 0) {
      int n=random.nextInt(all.length);
      for (int i=0; i < all.length; i++) {
        Entry<ServiceInstance,NodeInfo> inst=all[(i + n) % all.length];
        if (inst.getValue().canAcceptTask()) {
          LOG.info("Assigning " + inst + " when looking for any host, from #hosts="+ all.length);
          return new NodeServiceInstancePair(inst.getKey(),inst.getValue());
        }
      }
    }
    return null;
  }
  finally {
    readLock.unlock();
  }
}
