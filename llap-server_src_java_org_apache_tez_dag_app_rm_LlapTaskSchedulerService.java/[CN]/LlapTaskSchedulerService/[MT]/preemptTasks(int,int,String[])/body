{
  Set<String> preemptHosts;
  if (potentialHosts == null) {
    preemptHosts=null;
  }
 else {
    preemptHosts=Sets.newHashSet(potentialHosts);
  }
  writeLock.lock();
  List<TaskInfo> preemptedTaskList=null;
  try {
    NavigableMap<Integer,TreeSet<TaskInfo>> orderedMap=runningTasks.descendingMap();
    Iterator<Entry<Integer,TreeSet<TaskInfo>>> iterator=orderedMap.entrySet().iterator();
    int preemptedCount=0;
    while (iterator.hasNext() && preemptedCount < numTasksToPreempt) {
      Entry<Integer,TreeSet<TaskInfo>> entryAtPriority=iterator.next();
      if (entryAtPriority.getKey() > forPriority) {
        Iterator<TaskInfo> taskInfoIterator=entryAtPriority.getValue().iterator();
        while (taskInfoIterator.hasNext() && preemptedCount < numTasksToPreempt) {
          TaskInfo taskInfo=taskInfoIterator.next();
          if (preemptHosts == null || preemptHosts.contains(taskInfo.assignedInstance.getHost())) {
            preemptedCount++;
            LOG.info("preempting {} for task at priority {} with potentialHosts={}",taskInfo,forPriority,potentialHosts == null ? "" : Arrays.toString(potentialHosts));
            taskInfo.setPreemptedInfo(clock.getTime());
            if (preemptedTaskList == null) {
              preemptedTaskList=new LinkedList<>();
            }
            dagStats.registerTaskPreempted(taskInfo.assignedInstance.getHost());
            preemptedTaskList.add(taskInfo);
            registerPendingPreemption(taskInfo.assignedInstance.getHost());
            taskInfoIterator.remove();
          }
        }
        if (entryAtPriority.getValue().isEmpty()) {
          iterator.remove();
        }
      }
 else {
        LOG.info("DBG: No tasks qualify as killable to schedule tasks at priority {}",forPriority);
        break;
      }
    }
  }
  finally {
    writeLock.unlock();
  }
  if (preemptedTaskList != null) {
    for (    TaskInfo taskInfo : preemptedTaskList) {
      LOG.info("DBG: Preempting task {}",taskInfo);
      getContext().preemptContainer(taskInfo.containerId);
    }
  }
}
