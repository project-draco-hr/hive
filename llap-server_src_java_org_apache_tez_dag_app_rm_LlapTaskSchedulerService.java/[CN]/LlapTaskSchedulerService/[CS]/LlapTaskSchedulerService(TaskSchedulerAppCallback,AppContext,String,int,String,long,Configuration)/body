{
  super(LlapTaskSchedulerService.class.getName());
  this.appCallbackExecutor=createAppCallbackExecutorService();
  this.appClientDelegate=createAppCallbackDelegate(appClient);
  this.clock=appContext.getClock();
  this.containerFactory=new ContainerFactory(appContext,customAppIdIdentifier);
  this.memoryPerInstance=conf.getInt(LlapConfiguration.LLAP_DAEMON_MEMORY_PER_INSTANCE_MB,LlapConfiguration.LLAP_DAEMON_MEMORY_PER_INSTANCE_MB_DEFAULT);
  this.coresPerInstance=conf.getInt(LlapConfiguration.LLAP_DAEMON_VCPUS_PER_INSTANCE,LlapConfiguration.LLAP_DAEMON_VCPUS_PER_INSTANCE_DEFAULT);
  this.executorsPerInstance=conf.getInt(LlapConfiguration.LLAP_DAEMON_NUM_EXECUTORS,LlapConfiguration.LLAP_DAEMON_NUM_EXECUTORS_DEFAULT);
  this.nodeReEnableTimeout=conf.getLong(LlapConfiguration.LLAP_DAEMON_TASK_SCHEDULER_NODE_REENABLE_TIMEOUT_MILLIS,LlapConfiguration.LLAP_DAEMON_TASK_SCHEDULER_NODE_REENABLE_TIMEOUT_MILLIS_DEFAULT);
  int memoryPerExecutor=(int)(memoryPerInstance / (float)executorsPerInstance);
  int coresPerExecutor=(int)(coresPerInstance / (float)executorsPerInstance);
  this.resourcePerExecutor=Resource.newInstance(memoryPerExecutor,coresPerExecutor);
  String instanceId=conf.getTrimmed(LlapConfiguration.LLAP_DAEMON_SERVICE_HOSTS);
  Preconditions.checkNotNull(instanceId,LlapConfiguration.LLAP_DAEMON_SERVICE_HOSTS + " must be defined");
  ExecutorService executorService=Executors.newFixedThreadPool(1,new ThreadFactoryBuilder().setDaemon(true).setNameFormat("LlapScheduler").build());
  executor=MoreExecutors.listeningDecorator(executorService);
  LOG.info("Running with configuration: " + "memoryPerInstance=" + memoryPerInstance + ", vCoresPerInstance="+ coresPerInstance+ ", executorsPerInstance="+ executorsPerInstance+ ", resourcePerInstanceInferred="+ resourcePerExecutor+ ", nodeReEnableTimeout="+ nodeReEnableTimeout+ ", nodeReEnableBackOffFactor="+ BACKOFF_FACTOR);
}
