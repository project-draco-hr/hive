{
  final String columns=configuration.get(IOConstants.COLUMNS);
  final Map<String,String> contextMetadata=new HashMap<String,String>();
  final boolean indexAccess=configuration.getBoolean(PARQUET_COLUMN_INDEX_ACCESS,false);
  if (columns != null) {
    final List<String> listColumns=getColumns(columns);
    final Map<String,String> lowerCaseFileSchemaColumns=new HashMap<String,String>();
    for (    ColumnDescriptor c : fileSchema.getColumns()) {
      lowerCaseFileSchemaColumns.put(c.getPath()[0].toLowerCase(),c.getPath()[0]);
    }
    final List<Type> typeListTable=new ArrayList<Type>();
    if (indexAccess) {
      for (int index=0; index < listColumns.size(); index++) {
        if (index < fileSchema.getFieldCount()) {
          typeListTable.add(fileSchema.getType(index));
        }
 else {
          typeListTable.add(new PrimitiveType(Repetition.OPTIONAL,PrimitiveTypeName.BINARY,"_mask_" + listColumns.get(index)));
        }
      }
    }
 else {
      for (      String col : listColumns) {
        col=col.toLowerCase();
        if (lowerCaseFileSchemaColumns.containsKey(col)) {
          typeListTable.add(fileSchema.getType(lowerCaseFileSchemaColumns.get(col)));
        }
 else {
          typeListTable.add(new PrimitiveType(Repetition.OPTIONAL,PrimitiveTypeName.BINARY,col));
        }
      }
    }
    MessageType tableSchema=new MessageType(TABLE_SCHEMA,typeListTable);
    contextMetadata.put(HIVE_SCHEMA_KEY,tableSchema.toString());
    final List<Integer> indexColumnsWanted=ColumnProjectionUtils.getReadColumnIDs(configuration);
    final List<Type> typeListWanted=new ArrayList<Type>();
    for (    final Integer idx : indexColumnsWanted) {
      if (idx < listColumns.size()) {
        String col=listColumns.get(idx);
        if (indexAccess) {
          typeListWanted.add(fileSchema.getFields().get(idx));
        }
 else {
          col=col.toLowerCase();
          if (lowerCaseFileSchemaColumns.containsKey(col)) {
            typeListWanted.add(tableSchema.getType(lowerCaseFileSchemaColumns.get(col)));
          }
        }
      }
    }
    MessageType requestedSchemaByUser=new MessageType(fileSchema.getName(),typeListWanted);
    return new ReadContext(requestedSchemaByUser,contextMetadata);
  }
 else {
    contextMetadata.put(HIVE_SCHEMA_KEY,fileSchema.toString());
    return new ReadContext(fileSchema,contextMetadata);
  }
}
