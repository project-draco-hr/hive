{
  Configuration configuration=context.getConfiguration();
  MessageType fileSchema=context.getFileSchema();
  String columnNames=configuration.get(IOConstants.COLUMNS);
  Map<String,String> contextMetadata=new HashMap<String,String>();
  boolean indexAccess=configuration.getBoolean(PARQUET_COLUMN_INDEX_ACCESS,false);
  if (columnNames != null) {
    List<String> columnNamesList=getColumnNames(columnNames);
    String columnTypes=configuration.get(IOConstants.COLUMNS_TYPES);
    List<TypeInfo> columnTypesList=getColumnTypes(columnTypes);
    MessageType tableSchema;
    if (indexAccess) {
      List<Integer> indexSequence=new ArrayList<Integer>();
      for (int i=0; i < columnNamesList.size(); i++) {
        indexSequence.add(i);
      }
      tableSchema=getSchemaByIndex(fileSchema,columnNamesList,indexSequence);
    }
 else {
      tableSchema=getSchemaByName(fileSchema,columnNamesList,columnTypesList);
    }
    contextMetadata.put(HIVE_TABLE_AS_PARQUET_SCHEMA,tableSchema.toString());
    contextMetadata.put(PARQUET_COLUMN_INDEX_ACCESS,String.valueOf(indexAccess));
    this.hiveTypeInfo=TypeInfoFactory.getStructTypeInfo(columnNamesList,columnTypesList);
    List<Integer> indexColumnsWanted=ColumnProjectionUtils.getReadColumnIDs(configuration);
    if (!ColumnProjectionUtils.isReadAllColumns(configuration) && !indexColumnsWanted.isEmpty()) {
      MessageType requestedSchemaByUser=getSchemaByIndex(tableSchema,columnNamesList,indexColumnsWanted);
      return new ReadContext(requestedSchemaByUser,contextMetadata);
    }
 else {
      return new ReadContext(tableSchema,contextMetadata);
    }
  }
 else {
    contextMetadata.put(HIVE_TABLE_AS_PARQUET_SCHEMA,fileSchema.toString());
    return new ReadContext(fileSchema,contextMetadata);
  }
}
