{
  if (reducer.getDone()) {
    return;
  }
  if (oc == null) {
    oc=output;
    rp=reporter;
    reducer.setOutputCollector(oc);
    reducer.setReporter(rp);
    reducer.setOperatorHooks(opHooks);
  }
  try {
    BytesWritable keyWritable=(BytesWritable)key;
    tag.set((byte)0);
    if (isTagged) {
      int size=keyWritable.getSize() - 1;
      tag.set(keyWritable.get()[size]);
      keyWritable.setSize(size);
    }
    if (!keyWritable.equals(groupKey)) {
      if (groupKey == null) {
        groupKey=new BytesWritable();
      }
 else {
        l4j.trace("End Group");
        reducer.endGroup();
      }
      try {
        keyObject=inputKeyDeserializer.deserialize(keyWritable);
      }
 catch (      Exception e) {
        throw new HiveException("Hive Runtime Error: Unable to deserialize reduce input key from " + Utilities.formatBinaryString(keyWritable.get(),0,keyWritable.getSize()) + " with properties "+ keyTableDesc.getProperties(),e);
      }
      groupKey.set(keyWritable.get(),0,keyWritable.getSize());
      l4j.trace("Start Group");
      reducer.startGroup();
      reducer.setGroupKeyObject(keyObject);
    }
    while (values.hasNext()) {
      BytesWritable valueWritable=(BytesWritable)values.next();
      try {
        valueObject[tag.get()]=inputValueDeserializer[tag.get()].deserialize(valueWritable);
      }
 catch (      SerDeException e) {
        throw new HiveException("Hive Runtime Error: Unable to deserialize reduce input value (tag=" + tag.get() + ") from "+ Utilities.formatBinaryString(valueWritable.get(),0,valueWritable.getSize())+ " with properties "+ valueTableDesc[tag.get()].getProperties(),e);
      }
      row.clear();
      row.add(keyObject);
      row.add(valueObject[tag.get()]);
      row.add(tag);
      if (isLogInfoEnabled) {
        cntr++;
        if (cntr == nextCntr) {
          long used_memory=memoryMXBean.getHeapMemoryUsage().getUsed();
          l4j.info("ExecReducer: processing " + cntr + " rows: used memory = "+ used_memory);
          nextCntr=getNextCntr(cntr);
        }
      }
      try {
        reducer.process(row,tag.get());
      }
 catch (      Exception e) {
        String rowString=null;
        try {
          rowString=SerDeUtils.getJSONString(row,rowObjectInspector[tag.get()]);
        }
 catch (        Exception e2) {
          rowString="[Error getting row data with exception " + StringUtils.stringifyException(e2) + " ]";
        }
        throw new HiveException("Hive Runtime Error while processing row (tag=" + tag.get() + ") "+ rowString,e);
      }
    }
  }
 catch (  Throwable e) {
    abort=true;
    if (e instanceof OutOfMemoryError) {
      throw (OutOfMemoryError)e;
    }
 else {
      l4j.fatal(StringUtils.stringifyException(e));
      throw new RuntimeException(e);
    }
  }
}
