{
  Set<String> participants=getParticipants(ctx);
  Map<String,Long> aliasToKnownSize=ctx.getAliasToKnownSize();
  Map<String,ArrayList<String>> pathToAliases=ctx.getPathToAliases();
  Map<Task<? extends Serializable>,Set<String>> taskToAliases=ctx.getTaskToAliases();
  long threshold=HiveConf.getLongVar(conf,HiveConf.ConfVars.HIVESMALLTABLESFILESIZE);
  Long bigTableSize=null;
  Long smallTablesSize=null;
  Map.Entry<Task<? extends Serializable>,Set<String>> nextTask=null;
  for (  Map.Entry<Task<? extends Serializable>,Set<String>> entry : taskToAliases.entrySet()) {
    Set<String> aliases=entry.getValue();
    long sumOfOthers=Utilities.sumOfExcept(aliasToKnownSize,participants,aliases);
    if (sumOfOthers < 0 || sumOfOthers > threshold) {
      continue;
    }
    long aliasSize=Utilities.sumOf(aliasToKnownSize,aliases);
    if (bigTableSize == null || aliasSize > bigTableSize) {
      nextTask=entry;
      bigTableSize=aliasSize;
      smallTablesSize=sumOfOthers;
    }
  }
  if (nextTask != null) {
    LOG.info("Driver alias is " + nextTask.getValue() + " with size "+ bigTableSize+ " (total size of others : "+ smallTablesSize+ ", threshold : "+ threshold+ ")");
    return nextTask.getKey();
  }
  LOG.info("Failed to resolve driver alias (threshold : " + threshold + ", length mapping : "+ aliasToKnownSize+ ")");
  return null;
}
