{
  String bigTableFileAlias=null;
  long smallTablesFileSizeSum=0;
  Map<String,AliasFileSizePair> aliasToFileSizeMap=new HashMap<String,AliasFileSizePair>();
  for (  Map.Entry<String,Long> entry : aliasToKnownSize.entrySet()) {
    String alias=entry.getKey();
    AliasFileSizePair pair=new AliasFileSizePair(alias,entry.getValue());
    aliasToFileSizeMap.put(alias,pair);
  }
  try {
    for (    Map.Entry<String,ArrayList<String>> oneEntry : pathToAliases.entrySet()) {
      String p=oneEntry.getKey();
      if (p.startsWith(hdfsTmpDir) || p.startsWith(localTmpDir)) {
        ArrayList<String> aliasArray=oneEntry.getValue();
        if (aliasArray.size() <= 0) {
          continue;
        }
        Path path=new Path(p);
        FileSystem fs=path.getFileSystem(conf);
        long fileSize=fs.getContentSummary(path).getLength();
        for (        String alias : aliasArray) {
          AliasFileSizePair pair=aliasToFileSizeMap.get(alias);
          if (pair == null) {
            pair=new AliasFileSizePair(alias,0);
            aliasToFileSizeMap.put(alias,pair);
          }
          pair.size+=fileSize;
        }
      }
    }
    List<AliasFileSizePair> aliasFileSizeList=new ArrayList<AliasFileSizePair>(aliasToFileSizeMap.values());
    Collections.sort(aliasFileSizeList);
    int idx=aliasFileSizeList.size() - 1;
    boolean bigAliasFound=false;
    while (idx >= 0) {
      AliasFileSizePair pair=aliasFileSizeList.get(idx);
      String alias=pair.alias;
      long size=pair.size;
      if (!bigAliasFound && aliasToTask.get(alias) != null) {
        bigAliasFound=true;
        bigTableFileAlias=alias;
        continue;
      }
      smallTablesFileSizeSum+=size;
      idx--;
    }
    long threshold=HiveConf.getLongVar(conf,HiveConf.ConfVars.HIVESMALLTABLESFILESIZE);
    if (smallTablesFileSizeSum <= threshold) {
      return bigTableFileAlias;
    }
 else {
      return null;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}
