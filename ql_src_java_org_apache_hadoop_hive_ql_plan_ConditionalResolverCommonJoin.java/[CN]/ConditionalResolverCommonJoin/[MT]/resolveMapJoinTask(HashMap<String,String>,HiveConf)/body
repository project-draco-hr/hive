{
  if (aliasToPath.size() == 0) {
    return null;
  }
  List<String> aliasList=new ArrayList<String>();
  List<Long> fileSizeList=new ArrayList<Long>();
  try {
    for (    Map.Entry<String,String> entry : aliasToPath.entrySet()) {
      String alias=entry.getKey();
      String pathStr=entry.getValue();
      Path path=new Path(pathStr);
      FileSystem fs=path.getFileSystem(conf);
      FileStatus[] fstatus=fs.listStatus(path);
      long fileSize=0;
      for (int i=0; i < fstatus.length; i++) {
        fileSize+=fstatus[i].getLen();
      }
      aliasList.add(alias);
      fileSizeList.add(fileSize);
    }
    List<Long> sortedList=new ArrayList<Long>(fileSizeList);
    Collections.sort(sortedList);
    long bigTableFileSize=0;
    long smallTablesFileSizeSum=0;
    String bigTableFileAlias=null;
    int size=sortedList.size();
    int tmpIndex;
    for (int index=0; index < sortedList.size(); index++) {
      Long key=sortedList.get(index);
      if (index != (size - 1)) {
        smallTablesFileSizeSum+=key.longValue();
      }
 else {
        tmpIndex=fileSizeList.indexOf(key);
        String alias=aliasList.get(tmpIndex);
        bigTableFileSize+=key.longValue();
        bigTableFileAlias=alias;
      }
    }
    long threshold=HiveConf.getLongVar(conf,HiveConf.ConfVars.HIVESMALLTABLESFILESIZE);
    if (smallTablesFileSizeSum <= threshold) {
      return bigTableFileAlias;
    }
 else {
      return null;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}
