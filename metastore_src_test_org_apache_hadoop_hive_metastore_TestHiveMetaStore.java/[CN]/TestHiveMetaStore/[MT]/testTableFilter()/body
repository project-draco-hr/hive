{
  try {
    String dbName="testTableFilter";
    String owner1="testOwner1";
    String owner2="testOwner2";
    int lastAccessTime1=90;
    int lastAccessTime2=30;
    String tableName1="table1";
    String tableName2="table2";
    String tableName3="table3";
    client.dropTable(dbName,tableName1);
    client.dropTable(dbName,tableName2);
    client.dropTable(dbName,tableName3);
    silentDropDatabase(dbName);
    Database db=new Database();
    db.setName(dbName);
    db.setDescription("Alter Partition Test database");
    client.createDatabase(db);
    Table table1=createTableForTestFilter(dbName,tableName1,owner1,lastAccessTime1,true);
    Table table2=createTableForTestFilter(dbName,tableName2,owner2,lastAccessTime2,true);
    Table table3=createTableForTestFilter(dbName,tableName3,owner1,lastAccessTime2,false);
    List<String> tableNames;
    String filter;
    filter=org.apache.hadoop.hive.metastore.api.Constants.HIVE_FILTER_FIELD_OWNER + " like \".*Owner.*\" and " + org.apache.hadoop.hive.metastore.api.Constants.HIVE_FILTER_FIELD_OWNER+ " like  \"test.*\"";
    tableNames=client.listTableNamesByFilter(dbName,filter,(short)-1);
    assertEquals(tableNames.size(),3);
    assert(tableNames.contains(table1.getTableName()));
    assert(tableNames.contains(table2.getTableName()));
    assert(tableNames.contains(table3.getTableName()));
    filter=org.apache.hadoop.hive.metastore.api.Constants.HIVE_FILTER_FIELD_OWNER + " = \"testOwner1\"";
    tableNames=client.listTableNamesByFilter(dbName,filter,(short)-1);
    assertEquals(2,tableNames.size());
    assert(tableNames.contains(table1.getTableName()));
    assert(tableNames.contains(table3.getTableName()));
    filter=org.apache.hadoop.hive.metastore.api.Constants.HIVE_FILTER_FIELD_LAST_ACCESS + " < 90";
    tableNames=client.listTableNamesByFilter(dbName,filter,(short)-1);
    assertEquals(2,tableNames.size());
    assert(tableNames.contains(table2.getTableName()));
    assert(tableNames.contains(table3.getTableName()));
    filter=org.apache.hadoop.hive.metastore.api.Constants.HIVE_FILTER_FIELD_LAST_ACCESS + " > 90";
    tableNames=client.listTableNamesByFilter(dbName,filter,(short)-1);
    assertEquals(0,tableNames.size());
    filter=org.apache.hadoop.hive.metastore.api.Constants.HIVE_FILTER_FIELD_PARAMS + "test_param_2 = \"50\"";
    tableNames=client.listTableNamesByFilter(dbName,filter,(short)-1);
    assertEquals(2,tableNames.size());
    assert(tableNames.contains(table1.getTableName()));
    assert(tableNames.contains(table2.getTableName()));
    filter=org.apache.hadoop.hive.metastore.api.Constants.HIVE_FILTER_FIELD_PARAMS + "test_param_2 = \"75\"";
    tableNames=client.listTableNamesByFilter(dbName,filter,(short)-1);
    assertEquals(0,tableNames.size());
    filter=org.apache.hadoop.hive.metastore.api.Constants.HIVE_FILTER_FIELD_PARAMS + "key_dne = \"50\"";
    tableNames=client.listTableNamesByFilter(dbName,filter,(short)-1);
    assertEquals(0,tableNames.size());
    filter=org.apache.hadoop.hive.metastore.api.Constants.HIVE_FILTER_FIELD_PARAMS + "test_param_1 <> \"yellow\"";
    tableNames=client.listTableNamesByFilter(dbName,filter,(short)2);
    assertEquals(2,tableNames.size());
    filter=org.apache.hadoop.hive.metastore.api.Constants.HIVE_FILTER_FIELD_PARAMS + "test_param_1 != \"yellow\"";
    tableNames=client.listTableNamesByFilter(dbName,filter,(short)2);
    assertEquals(2,tableNames.size());
    filter=org.apache.hadoop.hive.metastore.api.Constants.HIVE_FILTER_FIELD_OWNER + " = \"testOwner1\" and (" + org.apache.hadoop.hive.metastore.api.Constants.HIVE_FILTER_FIELD_LAST_ACCESS+ " = 30 or "+ org.apache.hadoop.hive.metastore.api.Constants.HIVE_FILTER_FIELD_PARAMS+ "test_param_1 = \"hi\")";
    tableNames=client.listTableNamesByFilter(dbName,filter,(short)-1);
    assertEquals(2,tableNames.size());
    assert(tableNames.contains(table1.getTableName()));
    assert(tableNames.contains(table3.getTableName()));
    Exception me=null;
    try {
      filter="badKey = \"testOwner1\"";
      tableNames=client.listTableNamesByFilter(dbName,filter,(short)-1);
    }
 catch (    MetaException e) {
      me=e;
    }
    assertNotNull(me);
    assertTrue("Bad filter key test",me.getMessage().contains("Invalid key name in filter"));
    client.dropTable(dbName,tableName1);
    client.dropTable(dbName,tableName2);
    client.dropTable(dbName,tableName3);
    client.dropDatabase(dbName);
  }
 catch (  Exception e) {
    System.err.println(StringUtils.stringifyException(e));
    System.err.println("testTableFilter() failed.");
    throw e;
  }
}
