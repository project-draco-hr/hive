{
  try {
    client.dropType("Person");
    Type typ1=new Type();
    typ1.setName("Person");
    typ1.setFields(new ArrayList<FieldSchema>(2));
    typ1.getFields().add(new FieldSchema("name",Constants.STRING_TYPE_NAME,""));
    typ1.getFields().add(new FieldSchema("income",Constants.INT_TYPE_NAME,""));
    boolean ret=client.createType(typ1);
    assertTrue("Unable to create type",ret);
    Type typ1_2=client.getType("Person");
    assertNotNull("type Person not found",typ1_2);
    assertEquals(typ1.getName(),typ1_2.getName());
    assertEquals(typ1.getFields().size(),typ1_2.getFields().size());
    assertEquals(typ1.getFields().get(0),typ1_2.getFields().get(0));
    assertEquals(typ1.getFields().get(1),typ1_2.getFields().get(1));
    client.dropType("Family");
    Type fam=new Type();
    fam.setName("Family");
    fam.setFields(new ArrayList<FieldSchema>(2));
    fam.getFields().add(new FieldSchema("name",Constants.STRING_TYPE_NAME,""));
    fam.getFields().add(new FieldSchema("members",MetaStoreUtils.getListType(typ1.getName()),""));
    ret=client.createType(fam);
    assertTrue("Unable to create type " + fam.getName(),ret);
    Type fam2=client.getType("Family");
    assertNotNull("type Person not found",fam2);
    assertEquals(fam.getName(),fam2.getName());
    assertEquals(fam.getFields().size(),fam2.getFields().size());
    assertEquals(fam.getFields().get(0),fam2.getFields().get(0));
    assertEquals(fam.getFields().get(1),fam2.getFields().get(1));
    ret=client.dropType("Family");
    assertTrue("unable to drop type Family",ret);
    ret=client.dropType("Person");
    assertTrue("unable to drop type Person",ret);
    Type typ1_3=null;
    typ1_3=client.getType("Person");
    assertNull("unable to drop type Person",typ1_3);
  }
 catch (  Exception e) {
    System.err.println(StringUtils.stringifyException(e));
    System.err.println("testComplexTypeApi() failed.");
    throw e;
  }
}
