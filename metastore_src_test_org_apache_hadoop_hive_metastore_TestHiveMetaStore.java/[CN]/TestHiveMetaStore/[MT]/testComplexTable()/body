{
  String dbName="compdb";
  String tblName="comptbl";
  String typeName="Person";
  try {
    client.dropTable(dbName,tblName);
    silentDropDatabase(dbName);
    Database db=new Database();
    db.setName(dbName);
    client.createDatabase(db);
    client.dropType(typeName);
    Type typ1=new Type();
    typ1.setName(typeName);
    typ1.setFields(new ArrayList<FieldSchema>(2));
    typ1.getFields().add(new FieldSchema("name",serdeConstants.STRING_TYPE_NAME,""));
    typ1.getFields().add(new FieldSchema("income",serdeConstants.INT_TYPE_NAME,""));
    client.createType(typ1);
    Table tbl=new Table();
    tbl.setDbName(dbName);
    tbl.setTableName(tblName);
    StorageDescriptor sd=new StorageDescriptor();
    tbl.setSd(sd);
    sd.setCols(typ1.getFields());
    sd.setCompressed(false);
    sd.setNumBuckets(1);
    sd.setParameters(new HashMap<String,String>());
    sd.getParameters().put("test_param_1","Use this for comments etc");
    sd.setBucketCols(new ArrayList<String>(2));
    sd.getBucketCols().add("name");
    sd.setSerdeInfo(new SerDeInfo());
    sd.getSerdeInfo().setName(tbl.getTableName());
    sd.getSerdeInfo().setParameters(new HashMap<String,String>());
    sd.getSerdeInfo().getParameters().put(org.apache.hadoop.hive.serde.serdeConstants.SERIALIZATION_FORMAT,"9");
    sd.getSerdeInfo().setSerializationLib(org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe.class.getName());
    tbl.setPartitionKeys(new ArrayList<FieldSchema>(2));
    tbl.getPartitionKeys().add(new FieldSchema("ds",org.apache.hadoop.hive.serde.serdeConstants.DATE_TYPE_NAME,""));
    tbl.getPartitionKeys().add(new FieldSchema("hr",org.apache.hadoop.hive.serde.serdeConstants.INT_TYPE_NAME,""));
    client.createTable(tbl);
    Table tbl2=client.getTable(dbName,tblName);
    assertEquals(tbl2.getDbName(),dbName);
    assertEquals(tbl2.getTableName(),tblName);
    assertEquals(tbl2.getSd().getCols().size(),typ1.getFields().size());
    assertFalse(tbl2.getSd().isCompressed());
    assertEquals(tbl2.getSd().getNumBuckets(),1);
    assertEquals("Use this for comments etc",tbl2.getSd().getParameters().get("test_param_1"));
    assertEquals("name",tbl2.getSd().getBucketCols().get(0));
    assertNotNull(tbl2.getPartitionKeys());
    assertEquals(2,tbl2.getPartitionKeys().size());
    assertEquals(serdeConstants.DATE_TYPE_NAME,tbl2.getPartitionKeys().get(0).getType());
    assertEquals(serdeConstants.INT_TYPE_NAME,tbl2.getPartitionKeys().get(1).getType());
    assertEquals("ds",tbl2.getPartitionKeys().get(0).getName());
    assertEquals("hr",tbl2.getPartitionKeys().get(1).getName());
    List<FieldSchema> fieldSchemas=client.getFields(dbName,tblName);
    assertNotNull(fieldSchemas);
    assertEquals(fieldSchemas.size(),tbl.getSd().getCols().size());
    for (    FieldSchema fs : tbl.getSd().getCols()) {
      assertTrue(fieldSchemas.contains(fs));
    }
    List<FieldSchema> fieldSchemasFull=client.getSchema(dbName,tblName);
    assertNotNull(fieldSchemasFull);
    assertEquals(fieldSchemasFull.size(),tbl.getSd().getCols().size() + tbl.getPartitionKeys().size());
    for (    FieldSchema fs : tbl.getSd().getCols()) {
      assertTrue(fieldSchemasFull.contains(fs));
    }
    for (    FieldSchema fs : tbl.getPartitionKeys()) {
      assertTrue(fieldSchemasFull.contains(fs));
    }
  }
 catch (  Exception e) {
    System.err.println(StringUtils.stringifyException(e));
    System.err.println("testComplexTable() failed.");
    throw e;
  }
 finally {
    client.dropTable(dbName,tblName);
    boolean ret=client.dropType(typeName);
    assertTrue("Unable to drop type " + typeName,ret);
    client.dropDatabase(dbName);
  }
}
