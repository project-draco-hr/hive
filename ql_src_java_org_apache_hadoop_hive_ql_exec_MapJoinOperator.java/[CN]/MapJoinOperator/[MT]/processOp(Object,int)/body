{
  try {
    if (firstRow) {
      generateMapMetaData();
      firstRow=false;
    }
    if (this.getExecContext().inputFileChanged()) {
      loadJDBM();
    }
    alias=order[tag];
    if ((lastAlias == null) || (!lastAlias.equals(alias))) {
      nextSz=joinEmitInterval;
    }
    ArrayList<Object> key=JoinUtil.computeKeys(row,joinKeys.get(alias),joinKeysObjectInspectors.get(alias));
    ArrayList<Object> value=JoinUtil.computeValues(row,joinValues.get(alias),joinValuesObjectInspectors.get(alias),joinFilters.get(alias),joinFilterObjectInspectors.get(alias),noOuterJoin);
    storage.get((byte)tag).add(value);
    for (    Byte pos : order) {
      if (pos.intValue() != tag) {
        MapJoinObjectKey keyMap=new MapJoinObjectKey(metadataKeyTag,key);
        MapJoinObjectValue o=mapJoinTables.get(pos).getMapJoinValueObject(keyMap);
        if (o == null || (hasAnyNulls(key))) {
          if (noOuterJoin) {
            storage.put(pos,emptyList);
          }
 else {
            storage.put(pos,dummyObjVectors[pos.intValue()]);
          }
        }
 else {
          storage.put(pos,o.getObj());
        }
      }
    }
    checkAndGenObject();
    storage.get((byte)tag).clear();
    for (    Byte pos : order) {
      if (pos.intValue() != tag) {
        storage.put(pos,null);
      }
    }
  }
 catch (  SerDeException e) {
    e.printStackTrace();
    throw new HiveException(e);
  }
}
