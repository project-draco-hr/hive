{
  try {
    if (firstRow) {
      generateMapMetaData();
      firstRow=false;
    }
    alias=(byte)tag;
    if ((lastAlias == null) || (!lastAlias.equals(alias))) {
      nextSz=joinEmitInterval;
    }
    AbstractMapJoinKey key=JoinUtil.computeMapJoinKeys(row,joinKeys[alias],joinKeysObjectInspectors[alias]);
    boolean joinNeeded=false;
    for (byte pos=0; pos < order.length; pos++) {
      if (pos != alias) {
        MapJoinObjectValue o=mapJoinTables[pos].get(key);
        MapJoinRowContainer<ArrayList<Object>> rowContainer=rowContainerMap[pos];
        if (o == null || key.hasAnyNulls(nullsafes)) {
          if (!noOuterJoin) {
            joinNeeded=true;
            storage[pos]=dummyObjVectors[pos];
          }
 else {
            storage[pos]=emptyList;
          }
        }
 else {
          joinNeeded=true;
          rowContainer.reset(o.getObj());
          storage[pos]=rowContainer;
          aliasFilterTags[pos]=o.getAliasFilter();
        }
      }
    }
    if (joinNeeded) {
      ArrayList<Object> value=getFilteredValue(alias,row);
      storage[alias].add(value);
      checkAndGenObject();
    }
    storage[tag].clear();
    for (byte pos=0; pos < order.length; pos++) {
      if (pos != tag) {
        storage[pos]=null;
      }
    }
  }
 catch (  SerDeException e) {
    e.printStackTrace();
    throw new HiveException(e);
  }
}
