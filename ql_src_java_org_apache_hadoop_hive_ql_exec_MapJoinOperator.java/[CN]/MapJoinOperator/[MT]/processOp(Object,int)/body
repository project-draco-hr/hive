{
  try {
    if (firstRow) {
      generateMapMetaData();
      firstRow=false;
    }
    alias=(byte)tag;
    if ((lastAlias == null) || (!lastAlias.equals(alias))) {
      nextSz=joinEmitInterval;
    }
    AbstractMapJoinKey key=JoinUtil.computeMapJoinKeys(row,joinKeys.get(alias),joinKeysObjectInspectors.get(alias));
    ArrayList<Object> value=JoinUtil.computeValues(row,joinValues.get(alias),joinValuesObjectInspectors.get(alias),joinFilters.get(alias),joinFilterObjectInspectors.get(alias),filterMap == null ? null : filterMap[alias]);
    storage.get(alias).add(value);
    for (byte pos=0; pos < order.length; pos++) {
      if (pos != alias) {
        MapJoinObjectValue o=mapJoinTables.get(pos).get(key);
        MapJoinRowContainer<ArrayList<Object>> rowContainer=rowContainerMap.get(pos);
        if (o == null || key.hasAnyNulls(nullsafes)) {
          if (noOuterJoin) {
            storage.put(pos,emptyList);
          }
 else {
            storage.put(pos,dummyObjVectors[pos]);
          }
        }
 else {
          rowContainer.reset(o.getObj());
          storage.put(pos,rowContainer);
        }
      }
    }
    checkAndGenObject();
    storage.get((byte)tag).clear();
    for (byte pos=0; pos < order.length; pos++) {
      if (pos != tag) {
        storage.put(pos,null);
      }
    }
  }
 catch (  SerDeException e) {
    e.printStackTrace();
    throw new HiveException(e);
  }
}
