{
  try {
    alias=(byte)tag;
    if (hashMapRowGetters == null) {
      hashMapRowGetters=new ReusableGetAdaptor[mapJoinTables.length];
      MapJoinKey refKey=getRefKey(alias);
      for (byte pos=0; pos < order.length; pos++) {
        if (pos != alias) {
          hashMapRowGetters[pos]=mapJoinTables[pos].createGetter(refKey);
        }
      }
    }
    if (hybridMapJoinLeftover) {
      MapJoinKey refKey=getRefKey(alias);
      for (byte pos=0; pos < order.length; pos++) {
        if (pos != alias && spilledMapJoinTables[pos] != null) {
          hashMapRowGetters[pos]=spilledMapJoinTables[pos].createGetter(refKey);
        }
      }
    }
    ReusableGetAdaptor firstSetKey=null;
    int fieldCount=joinKeys[alias].size();
    boolean joinNeeded=false;
    boolean bigTableRowSpilled=false;
    for (byte pos=0; pos < order.length; pos++) {
      if (pos != alias) {
        JoinUtil.JoinResult joinResult;
        ReusableGetAdaptor adaptor;
        if (firstSetKey == null) {
          adaptor=firstSetKey=hashMapRowGetters[pos];
          joinResult=setMapJoinKey(firstSetKey,row,alias);
        }
 else {
          adaptor=hashMapRowGetters[pos];
          joinResult=adaptor.setFromOther(firstSetKey);
        }
        MapJoinRowContainer rowContainer=adaptor.getCurrentRows();
        if (rowContainer != null && unwrapContainer[pos] != null) {
          Object[] currentKey=firstSetKey.getCurrentKey();
          rowContainer=unwrapContainer[pos].setInternal(rowContainer,currentKey);
        }
        if (rowContainer == null || firstSetKey.hasAnyNulls(fieldCount,nullsafes)) {
          if (!noOuterJoin) {
            if (!conf.isHybridHashJoin() || hybridMapJoinLeftover || (!hybridMapJoinLeftover && joinResult != JoinUtil.JoinResult.SPILL)) {
              joinNeeded=true;
              storage[pos]=dummyObjVectors[pos];
            }
          }
 else {
            storage[pos]=emptyList;
          }
        }
 else {
          joinNeeded=true;
          storage[pos]=rowContainer.copy();
          aliasFilterTags[pos]=rowContainer.getAliasFilter();
        }
        if (joinResult == JoinUtil.JoinResult.SPILL && !bigTableRowSpilled) {
          spillBigTableRow(mapJoinTables[pos],row);
          bigTableRowSpilled=true;
        }
      }
    }
    if (joinNeeded) {
      List<Object> value=getFilteredValue(alias,row);
      storage[alias].addRow(value);
      checkAndGenObject();
    }
    storage[tag].clearRows();
    for (byte pos=0; pos < order.length; pos++) {
      if (pos != tag) {
        storage[pos]=null;
      }
    }
  }
 catch (  Exception e) {
    String msg="Unexpected exception from " + this.getClass().getSimpleName() + " : "+ e.getMessage();
    LOG.error(msg,e);
    throw new HiveException(msg,e);
  }
}
