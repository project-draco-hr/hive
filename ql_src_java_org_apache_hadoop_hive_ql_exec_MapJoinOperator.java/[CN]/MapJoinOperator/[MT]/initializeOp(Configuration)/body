{
  this.hconf=hconf;
  unwrapContainer=new UnwrapRowContainer[conf.getTagLength()];
  super.initializeOp(hconf);
  int tagLen=conf.getTagLength();
  String queryId=HiveConf.getVar(hconf,HiveConf.ConfVars.HIVEQUERYID);
  cacheKey="HASH_MAP_" + this.getOperatorId() + "_container";
  cache=ObjectCacheFactory.getCache(hconf,queryId);
  loader=getHashTableLoader(hconf);
  hashMapRowGetters=null;
  mapJoinTables=new MapJoinTableContainer[tagLen];
  mapJoinTableSerdes=new MapJoinTableContainerSerDe[tagLen];
  hashTblInitedOnce=false;
  hybridMapJoinLeftover=false;
  firstSmallTable=null;
  generateMapMetaData();
  final ExecMapperContext mapContext=getExecContext();
  final MapredContext mrContext=MapredContext.get();
  if (!conf.isBucketMapJoin() && !conf.isDynamicPartitionHashJoin()) {
    if (isLogDebugEnabled) {
      LOG.debug("This is not bucket map join, so cache");
    }
    Future<Pair<MapJoinTableContainer[],MapJoinTableContainerSerDe[]>> future=cache.retrieveAsync(cacheKey,new Callable<Pair<MapJoinTableContainer[],MapJoinTableContainerSerDe[]>>(){
      @Override public Pair<MapJoinTableContainer[],MapJoinTableContainerSerDe[]> call() throws HiveException {
        return loadHashTable(mapContext,mrContext);
      }
    }
);
    asyncInitOperations.add(future);
  }
 else   if (!isInputFileChangeSensitive(mapContext)) {
    loadHashTable(mapContext,mrContext);
    hashTblInitedOnce=true;
  }
}
