{
  super.initializeOp(hconf);
  numMapRowsRead=0;
  firstRow=true;
  heartbeatInterval=HiveConf.getIntVar(hconf,HiveConf.ConfVars.HIVESENDHEARTBEAT);
  joinKeys=new HashMap<Byte,List<ExprNodeEvaluator>>();
  populateJoinKeyValue(joinKeys,conf.getKeys());
  joinKeysObjectInspectors=getObjectInspectorsFromEvaluators(joinKeys,inputObjInspectors);
  joinKeysStandardObjectInspectors=getStandardObjectInspectors(joinKeysObjectInspectors);
  posBigTable=conf.getPosBigTable();
  metadataValueTag=new int[numAliases];
  for (int pos=0; pos < numAliases; pos++)   metadataValueTag[pos]=-1;
  mapJoinTables=new HashMap<Byte,HashMapWrapper<MapJoinObjectKey,MapJoinObjectValue>>();
  hTables=new ArrayList<File>();
  for (int pos=0; pos < numAliases; pos++) {
    if (pos == posBigTable)     continue;
    int cacheSize=HiveConf.getIntVar(hconf,HiveConf.ConfVars.HIVEMAPJOINCACHEROWS);
    HashMapWrapper<MapJoinObjectKey,MapJoinObjectValue> hashTable=new HashMapWrapper<MapJoinObjectKey,MapJoinObjectValue>(cacheSize);
    mapJoinTables.put(Byte.valueOf((byte)pos),hashTable);
  }
  storage.put((byte)posBigTable,new ArrayList<ArrayList<Object>>());
  mapJoinRowsKey=HiveConf.getIntVar(hconf,HiveConf.ConfVars.HIVEMAPJOINROWSIZE);
  List<? extends StructField> structFields=((StructObjectInspector)outputObjInspector).getAllStructFieldRefs();
  if (conf.getOutputColumnNames().size() < structFields.size()) {
    List<ObjectInspector> structFieldObjectInspectors=new ArrayList<ObjectInspector>();
    for (    Byte alias : order) {
      int sz=conf.getExprs().get(alias).size();
      List<Integer> retained=conf.getRetainList().get(alias);
      for (int i=0; i < sz; i++) {
        int pos=retained.get(i);
        structFieldObjectInspectors.add(structFields.get(pos).getFieldObjectInspector());
      }
    }
    outputObjInspector=ObjectInspectorFactory.getStandardStructObjectInspector(conf.getOutputColumnNames(),structFieldObjectInspectors);
  }
  initializeChildren(hconf);
}
