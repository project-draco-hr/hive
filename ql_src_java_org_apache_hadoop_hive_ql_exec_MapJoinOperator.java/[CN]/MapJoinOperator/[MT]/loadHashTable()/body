{
  if (!this.getExecContext().getLocalWork().getInputFileChangeSensitive()) {
    if (hashTblInitedOnce) {
      return;
    }
 else {
      hashTblInitedOnce=true;
    }
  }
  String baseDir=null;
  String currentInputFile=getExecContext().getCurrentInputFile();
  LOG.info("******* Load from HashTable File: input : " + currentInputFile);
  String fileName=getExecContext().getLocalWork().getBucketFileName(currentInputFile);
  try {
    if (ShimLoader.getHadoopShims().isLocalMode(hconf)) {
      baseDir=this.getExecContext().getLocalWork().getTmpFileURI();
    }
 else {
      Path[] localArchives;
      String stageID=this.getExecContext().getLocalWork().getStageID();
      String suffix=Utilities.generateTarFileName(stageID);
      FileSystem localFs=FileSystem.getLocal(hconf);
      localArchives=DistributedCache.getLocalCacheArchives(this.hconf);
      Path archive;
      for (int j=0; j < localArchives.length; j++) {
        archive=localArchives[j];
        if (!archive.getName().endsWith(suffix)) {
          continue;
        }
        Path archiveLocalLink=archive.makeQualified(localFs);
        baseDir=archiveLocalLink.toUri().getPath();
      }
    }
    for (byte pos=0; pos < mapJoinTables.length; pos++) {
      HashMapWrapper<AbstractMapJoinKey,MapJoinObjectValue> hashtable=mapJoinTables[pos];
      if (hashtable == null) {
        continue;
      }
      String filePath=Utilities.generatePath(baseDir,conf.getDumpFilePrefix(),pos,fileName);
      Path path=new Path(filePath);
      LOG.info("\tLoad back 1 hashtable file from tmp file uri:" + path.toString());
      hashtable.initilizePersistentHash(path.toUri().getPath());
    }
  }
 catch (  Exception e) {
    LOG.error("Load Distributed Cache Error",e);
    throw new HiveException(e);
  }
}
