{
  if (!this.getExecContext().getLocalWork().getInputFileChangeSensitive()) {
    if (hashTblInitedOnce) {
      return;
    }
 else {
      hashTblInitedOnce=true;
    }
  }
  boolean localMode=HiveConf.getVar(hconf,HiveConf.ConfVars.HADOOPJT).equals("local");
  String baseDir=null;
  String currentInputFile=HiveConf.getVar(hconf,HiveConf.ConfVars.HADOOPMAPFILENAME);
  LOG.info("******* Load from HashTable File: input : " + currentInputFile);
  String currentFileName;
  if (this.getExecContext().getLocalWork().getInputFileChangeSensitive()) {
    currentFileName=this.getFileName(currentInputFile);
  }
 else {
    currentFileName="-";
  }
  try {
    if (localMode) {
      baseDir=this.getExecContext().getLocalWork().getTmpFileURI();
    }
 else {
      Path[] localArchives;
      String stageID=this.getExecContext().getLocalWork().getStageID();
      String suffix=Utilities.generateTarFileName(stageID);
      FileSystem localFs=FileSystem.getLocal(hconf);
      localArchives=DistributedCache.getLocalCacheArchives(this.hconf);
      Path archive;
      for (int j=0; j < localArchives.length; j++) {
        archive=localArchives[j];
        if (!archive.getName().endsWith(suffix)) {
          continue;
        }
        Path archiveLocalLink=archive.makeQualified(localFs);
        baseDir=archiveLocalLink.toUri().getPath();
      }
    }
    for (    Map.Entry<Byte,HashMapWrapper<AbstractMapJoinKey,MapJoinObjectValue>> entry : mapJoinTables.entrySet()) {
      Byte pos=entry.getKey();
      HashMapWrapper<AbstractMapJoinKey,MapJoinObjectValue> hashtable=entry.getValue();
      String filePath=Utilities.generatePath(baseDir,conf.getDumpFilePrefix(),pos,currentFileName);
      Path path=new Path(filePath);
      LOG.info("\tLoad back 1 hashtable file from tmp file uri:" + path.toString());
      hashtable.initilizePersistentHash(path.toUri().getPath());
    }
  }
 catch (  Exception e) {
    LOG.error("Load Distributed Cache Error");
    throw new HiveException(e.getMessage());
  }
}
