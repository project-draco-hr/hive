{
  JobConf newJob=new JobConf(job);
  FileSystem fs=dataDir1.getFileSystem(newJob);
  int symbolLinkedFileSize=0;
  Path dir1_file1=new Path(dataDir1,"combinefile1_1");
  writeTextFile(dir1_file1,"dir1_file1_line1\n" + "dir1_file1_line2\n");
  symbolLinkedFileSize+=fs.getFileStatus(dir1_file1).getLen();
  Path dir2_file1=new Path(dataDir2,"combinefile2_1");
  writeTextFile(dir2_file1,"dir2_file1_line1\n" + "dir2_file1_line2\n");
  symbolLinkedFileSize+=fs.getFileStatus(dir2_file1).getLen();
  writeSymlinkFile(new Path(symlinkDir,"symlink_file"),new Path(dataDir1,"combinefile1_1"),new Path(dataDir2,"combinefile2_1"));
  HiveConf hiveConf=new HiveConf(TestSymlinkTextInputFormat.class);
  HiveConf.setBoolVar(hiveConf,HiveConf.ConfVars.HIVE_REWORK_MAPREDWORK,true);
  HiveConf.setBoolVar(hiveConf,HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY,false);
  Driver drv=new Driver(hiveConf);
  drv.init();
  String tblName="text_symlink_text";
  String createSymlinkTableCmd="create table " + tblName + " (key int) stored as "+ " inputformat 'org.apache.hadoop.hive.ql.io.SymlinkTextInputFormat' "+ " outputformat 'org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat'";
  SessionState.start(hiveConf);
  boolean tblCreated=false;
  try {
    int ecode=0;
    ecode=drv.run(createSymlinkTableCmd).getResponseCode();
    if (ecode != 0) {
      throw new Exception("Create table command: " + createSymlinkTableCmd + " failed with exit code= "+ ecode);
    }
    tblCreated=true;
    String loadFileCommand="LOAD DATA LOCAL INPATH '" + new Path(symlinkDir,"symlink_file").toString() + "' INTO TABLE "+ tblName;
    ecode=drv.run(loadFileCommand).getResponseCode();
    if (ecode != 0) {
      throw new Exception("Load data command: " + loadFileCommand + " failed with exit code= "+ ecode);
    }
    String cmd="select key from " + tblName;
    drv.compile(cmd);
    Context ctx=new Context(newJob);
    Path emptyScratchDir=ctx.getMRTmpPath();
    FileSystem fileSys=emptyScratchDir.getFileSystem(newJob);
    fileSys.mkdirs(emptyScratchDir);
    QueryPlan plan=drv.getPlan();
    MapRedTask selectTask=(MapRedTask)plan.getRootTasks().get(0);
    List<Path> inputPaths=Utilities.getInputPaths(newJob,selectTask.getWork().getMapWork(),emptyScratchDir,ctx);
    Utilities.setInputPaths(newJob,inputPaths);
    Utilities.setMapRedWork(newJob,selectTask.getWork(),ctx.getMRTmpPath());
    CombineHiveInputFormat combineInputFormat=ReflectionUtils.newInstance(CombineHiveInputFormat.class,newJob);
    InputSplit[] retSplits=combineInputFormat.getSplits(newJob,1);
    assertEquals(1,retSplits.length);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("Caught exception " + e);
  }
 finally {
    if (tblCreated) {
      drv.run("drop table text_symlink_text").getResponseCode();
    }
  }
}
