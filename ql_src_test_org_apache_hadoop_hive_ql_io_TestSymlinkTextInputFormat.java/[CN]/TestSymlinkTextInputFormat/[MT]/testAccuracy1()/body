{
  FileSystem fs=dataDir1.getFileSystem(job);
  int symbolLinkedFileSize=0;
  Path dir1_file1=new Path(dataDir1,"file1");
  writeTextFile(dir1_file1,"dir1_file1_line1\n" + "dir1_file1_line2\n");
  symbolLinkedFileSize+=fs.getFileStatus(dir1_file1).getLen();
  Path dir1_file2=new Path(dataDir1,"file2");
  writeTextFile(dir1_file2,"dir1_file2_line1\n" + "dir1_file2_line2\n");
  Path dir2_file1=new Path(dataDir2,"file1");
  writeTextFile(dir2_file1,"dir2_file1_line1\n" + "dir2_file1_line2\n");
  Path dir2_file2=new Path(dataDir2,"file2");
  writeTextFile(dir2_file2,"dir2_file2_line1\n" + "dir2_file2_line2\n");
  symbolLinkedFileSize+=fs.getFileStatus(dir2_file2).getLen();
  writeSymlinkFile(new Path(symlinkDir,"symlink_file"),new Path(dataDir1,"file1"),new Path(dataDir2,"file2"));
  SymlinkTextInputFormat inputFormat=new SymlinkTextInputFormat();
  ContentSummary cs=inputFormat.getContentSummary(symlinkDir,job);
  assertEquals(symbolLinkedFileSize,cs.getLength());
  assertEquals(2,cs.getFileCount());
  assertEquals(0,cs.getDirectoryCount());
  FileInputFormat.setInputPaths(job,symlinkDir);
  InputSplit[] splits=inputFormat.getSplits(job,2);
  log.info("Number of splits: " + splits.length);
  List<String> received=new ArrayList<String>();
  for (  InputSplit split : splits) {
    RecordReader<LongWritable,Text> reader=inputFormat.getRecordReader(split,job,reporter);
    LongWritable key=reader.createKey();
    Text value=reader.createValue();
    while (reader.next(key,value)) {
      received.add(value.toString());
    }
    reader.close();
  }
  List<String> expected=new ArrayList<String>();
  expected.add("dir1_file1_line1");
  expected.add("dir1_file1_line2");
  expected.add("dir2_file2_line1");
  expected.add("dir2_file2_line2");
  assertEquals(expected,received);
}
