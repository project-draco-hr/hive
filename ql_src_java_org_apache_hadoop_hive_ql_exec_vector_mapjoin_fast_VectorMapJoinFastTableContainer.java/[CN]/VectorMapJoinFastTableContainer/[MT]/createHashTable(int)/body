{
  boolean isOuterJoin=!desc.isNoOuterJoin();
  VectorMapJoinDesc vectorDesc=desc.getVectorDesc();
  HashTableImplementationType hashTableImplementationType=vectorDesc.hashTableImplementationType();
  HashTableKind hashTableKind=vectorDesc.hashTableKind();
  HashTableKeyType hashTableKeyType=vectorDesc.hashTableKeyType();
  boolean minMaxEnabled=vectorDesc.minMaxEnabled();
  int writeBufferSize=HiveConf.getIntVar(hconf,HiveConf.ConfVars.HIVEHASHTABLEWBSIZE);
  VectorMapJoinFastHashTable hashTable=null;
switch (hashTableKeyType) {
case BOOLEAN:
case BYTE:
case SHORT:
case INT:
case LONG:
switch (hashTableKind) {
case HASH_MAP:
      hashTable=new VectorMapJoinFastLongHashMap(minMaxEnabled,isOuterJoin,hashTableKeyType,newThreshold,loadFactor,writeBufferSize);
    break;
case HASH_MULTISET:
  hashTable=new VectorMapJoinFastLongHashMultiSet(minMaxEnabled,isOuterJoin,hashTableKeyType,newThreshold,loadFactor,writeBufferSize);
break;
case HASH_SET:
hashTable=new VectorMapJoinFastLongHashSet(minMaxEnabled,isOuterJoin,hashTableKeyType,newThreshold,loadFactor,writeBufferSize);
break;
}
break;
case STRING:
switch (hashTableKind) {
case HASH_MAP:
hashTable=new VectorMapJoinFastStringHashMap(isOuterJoin,newThreshold,loadFactor,writeBufferSize);
break;
case HASH_MULTISET:
hashTable=new VectorMapJoinFastStringHashMultiSet(isOuterJoin,newThreshold,loadFactor,writeBufferSize);
break;
case HASH_SET:
hashTable=new VectorMapJoinFastStringHashSet(isOuterJoin,newThreshold,loadFactor,writeBufferSize);
break;
}
break;
case MULTI_KEY:
switch (hashTableKind) {
case HASH_MAP:
hashTable=new VectorMapJoinFastMultiKeyHashMap(isOuterJoin,newThreshold,loadFactor,writeBufferSize);
break;
case HASH_MULTISET:
hashTable=new VectorMapJoinFastMultiKeyHashMultiSet(isOuterJoin,newThreshold,loadFactor,writeBufferSize);
break;
case HASH_SET:
hashTable=new VectorMapJoinFastMultiKeyHashSet(isOuterJoin,newThreshold,loadFactor,writeBufferSize);
break;
}
break;
}
return hashTable;
}
