{
switch (oi.getCategory()) {
case PRIMITIVE:
{
      PrimitiveObjectInspector poi=(PrimitiveObjectInspector)oi;
      if (o == null) {
        sb.append("null");
      }
 else       if (oi.getTypeName().equals(Constants.STRING_TYPE_NAME)) {
        String s=(String)poi.getPrimitiveJavaObject(o);
        sb.append(QUOTE);
        sb.append(escapeString(s));
        sb.append(QUOTE);
      }
 else       if (oi.getTypeName().equals(Constants.BOOLEAN_TYPE_NAME)) {
        Boolean b=(Boolean)poi.getPrimitiveJavaObject(o);
        sb.append(b.booleanValue() ? "True" : "False");
      }
 else {
        sb.append(o.toString());
      }
      break;
    }
case LIST:
{
    ListObjectInspector loi=(ListObjectInspector)oi;
    ObjectInspector listElementObjectInspector=loi.getListElementObjectInspector();
    List<?> olist=loi.getList(o);
    if (olist == null) {
      sb.append("null");
    }
 else {
      sb.append(LBRACKET);
      for (int i=0; i < olist.size(); i++) {
        if (i > 0)         sb.append(COMMA);
        buildJSONString(sb,olist.get(i),listElementObjectInspector);
      }
      sb.append(RBRACKET);
    }
    break;
  }
case MAP:
{
  MapObjectInspector moi=(MapObjectInspector)oi;
  ObjectInspector mapKeyObjectInspector=moi.getMapKeyObjectInspector();
  ObjectInspector mapValueObjectInspector=moi.getMapValueObjectInspector();
  Map<?,?> omap=moi.getMap(o);
  if (omap == null) {
    sb.append("null");
  }
 else {
    sb.append(LBRACE);
    boolean first=true;
    for (    Object entry : omap.entrySet()) {
      if (first) {
        first=false;
      }
 else {
        sb.append(COMMA);
      }
      Map.Entry<?,?> e=(Map.Entry<?,?>)entry;
      buildJSONString(sb,e.getKey(),mapKeyObjectInspector);
      sb.append(COLON);
      buildJSONString(sb,e.getValue(),mapValueObjectInspector);
    }
    sb.append(RBRACE);
  }
  break;
}
case STRUCT:
{
StructObjectInspector soi=(StructObjectInspector)oi;
List<? extends StructField> structFields=soi.getAllStructFieldRefs();
if (structFields == null) {
  sb.append("null");
}
 else {
  sb.append(LBRACE);
  for (int i=0; i < structFields.size(); i++) {
    if (i > 0) {
      sb.append(COMMA);
    }
    sb.append(QUOTE);
    sb.append(structFields.get(i).getFieldName());
    sb.append(QUOTE);
    sb.append(COLON);
    buildJSONString(sb,soi.getStructFieldData(o,structFields.get(i)),structFields.get(i).getFieldObjectInspector());
  }
  sb.append(RBRACE);
}
break;
}
default :
throw new RuntimeException("Unknown type in ObjectInspector!");
}
;
}
