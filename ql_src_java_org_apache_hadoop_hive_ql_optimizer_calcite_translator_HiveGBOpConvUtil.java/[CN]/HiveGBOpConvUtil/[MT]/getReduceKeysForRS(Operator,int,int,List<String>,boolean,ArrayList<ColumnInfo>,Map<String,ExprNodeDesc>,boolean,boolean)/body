{
  ArrayList<ExprNodeDesc> reduceKeys=null;
  if (endPos < 0) {
    reduceKeys=new ArrayList<ExprNodeDesc>();
  }
 else {
    reduceKeys=ExprNodeDescUtils.genExprNodeDesc(inOp,startPos,endPos,addEmptyTabAlias,setColToNonVirtual);
    int outColNameIndx=startPos;
    for (int i=0; i < reduceKeys.size(); ++i) {
      String outputColName=SemanticAnalyzer.getColumnInternalName(outColNameIndx);
      outColNameIndx++;
      if (!addOnlyOneKeyColName || i == 0) {
        outputKeyColumnNames.add(outputColName);
      }
      String tabAlias=addEmptyTabAlias ? "" : null;
      ColumnInfo colInfo=new ColumnInfo(Utilities.ReduceField.KEY.toString() + "." + outputColName,reduceKeys.get(i).getTypeInfo(),tabAlias,false);
      colInfoLst.add(colInfo);
      colExprMap.put(colInfo.getInternalName(),reduceKeys.get(i));
    }
  }
  return reduceKeys;
}
