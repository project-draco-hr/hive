{
  Map<String,ExprNodeDesc> colExprMap=new HashMap<String,ExprNodeDesc>();
  ArrayList<String> outputColumnNames=new ArrayList<String>();
  ArrayList<ColumnInfo> colInfoLst=new ArrayList<ColumnInfo>();
  GroupByOperator reduceSideGB1=(GroupByOperator)inputOpAf.inputs.get(0);
  List<ColumnInfo> gb1ColInfoLst=reduceSideGB1.getSchema().getSignature();
  ArrayList<ExprNodeDesc> reduceKeys=getReduceKeysForRS(reduceSideGB1,0,gbInfo.gbKeys.size() - 1,outputColumnNames,false,colInfoLst,colExprMap,true,true);
  if (inclGrpSetInReduceSide(gbInfo)) {
    addGrpSetCol(false,gb1ColInfoLst.get(reduceKeys.size()).getInternalName(),true,reduceKeys,outputColumnNames,colInfoLst,colExprMap);
  }
  ArrayList<ExprNodeDesc> reduceValues=getValueKeysForRS(reduceSideGB1,reduceSideGB1.getConf().getKeys().size(),outputColumnNames,colInfoLst,colExprMap,true,true);
  ReduceSinkOperator rsOp=(ReduceSinkOperator)OperatorFactory.getAndMakeChild(PlanUtils.getReduceSinkDesc(reduceKeys,reduceValues,outputColumnNames,true,-1,getNumPartFieldsForReduceSideRS(gbInfo),getParallelismForReduceSideRS(gbInfo),AcidUtils.Operation.NOT_ACID),new RowSchema(colInfoLst),reduceSideGB1);
  rsOp.setColumnExprMap(colExprMap);
  return new OpAttr("",new HashSet<Integer>(),rsOp);
}
