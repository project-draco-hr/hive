{
  int numFields=0;
  if (format.equals("student")) {
    rand=new Random(numRows);
    numFields=3;
  }
 else   if (format.equals("voter")) {
    rand=new Random(1000000000 + numRows);
    numFields=4;
  }
 else   if (format.equals("alltypes")) {
    rand=new Random(2000000000L + numRows);
    numFields=10;
  }
  RCFileOutputFormat.setColumnNumber(conf,numFields);
  RCFile.Writer writer=new RCFile.Writer(fs,conf,getFile(output),null,new DefaultCodec());
  PrintWriter pw=new PrintWriter(new FileWriter(plainOutput));
  for (int j=0; j < numRows; j++) {
    BytesRefArrayWritable row=new BytesRefArrayWritable(numFields);
    byte[][] fields=null;
    if (format.equals("student")) {
      byte[][] f={randomName().getBytes("UTF-8"),Integer.valueOf(randomAge()).toString().getBytes("UTF-8"),Double.valueOf(randomGpa()).toString().getBytes("UTF-8")};
      fields=f;
    }
 else     if (format.equals("voter")) {
      byte[][] f={randomName().getBytes("UTF-8"),Integer.valueOf(randomAge()).toString().getBytes("UTF-8"),randomRegistration().getBytes("UTF-8"),Double.valueOf(randomContribution()).toString().getBytes("UTF-8")};
      fields=f;
    }
 else     if (format.equals("alltypes")) {
      byte[][] f={Integer.valueOf(rand.nextInt(Byte.MAX_VALUE)).toString().getBytes("UTF-8"),Integer.valueOf(rand.nextInt(Short.MAX_VALUE)).toString().getBytes("UTF-8"),Integer.valueOf(rand.nextInt()).toString().getBytes("UTF-8"),Long.valueOf(rand.nextLong()).toString().getBytes("UTF-8"),Float.valueOf(rand.nextFloat() * 1000).toString().getBytes("UTF-8"),Double.valueOf(rand.nextDouble() * 1000000).toString().getBytes("UTF-8"),randomName().getBytes("UTF-8"),randomMap(),randomArray()};
      fields=f;
    }
    for (int i=0; i < fields.length; i++) {
      BytesRefWritable field=new BytesRefWritable(fields[i],0,fields[i].length);
      row.set(i,field);
      pw.print(new String(fields[i]));
      if (i != fields.length - 1)       pw.print("\t");
 else       pw.println();
    }
    writer.append(row);
  }
  writer.close();
  pw.close();
}
