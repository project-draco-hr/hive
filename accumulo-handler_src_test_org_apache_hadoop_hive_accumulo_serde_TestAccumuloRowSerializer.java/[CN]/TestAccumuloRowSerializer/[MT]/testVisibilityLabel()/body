{
  List<String> columns=Arrays.asList("row","cq1","cq2","cq3");
  List<TypeInfo> types=Arrays.<TypeInfo>asList(TypeInfoFactory.stringTypeInfo,TypeInfoFactory.intTypeInfo,TypeInfoFactory.intTypeInfo,TypeInfoFactory.stringTypeInfo);
  List<String> typeNames=new ArrayList<String>(types.size());
  for (  TypeInfo type : types) {
    typeNames.add(type.getTypeName());
  }
  Properties tableProperties=new Properties();
  tableProperties.setProperty(AccumuloSerDeParameters.COLUMN_MAPPINGS,":rowid,cf:cq1#b,cf:cq2#b,cf:cq3");
  tableProperties.setProperty(serdeConstants.FIELD_DELIM," ");
  tableProperties.setProperty(serdeConstants.LIST_COLUMNS,Joiner.on(',').join(columns));
  tableProperties.setProperty(serdeConstants.LIST_COLUMN_TYPES,Joiner.on(',').join(typeNames));
  AccumuloSerDeParameters accumuloSerDeParams=new AccumuloSerDeParameters(new Configuration(),tableProperties,AccumuloSerDe.class.getSimpleName());
  SerDeParameters serDeParams=accumuloSerDeParams.getSerDeParameters();
  LazySimpleStructObjectInspector oi=(LazySimpleStructObjectInspector)LazyFactory.createLazyStructInspector(columns,types,serDeParams.getSeparators(),serDeParams.getNullSequence(),serDeParams.isLastColumnTakesRest(),serDeParams.isEscaped(),serDeParams.getEscapeChar());
  AccumuloRowSerializer serializer=new AccumuloRowSerializer(0,serDeParams,accumuloSerDeParams.getColumnMappings(),new ColumnVisibility("foo"),accumuloSerDeParams.getRowIdFactory());
  LazyStruct obj=(LazyStruct)LazyFactory.createLazyObject(oi);
  ByteArrayRef byteRef=new ByteArrayRef();
  byteRef.setData(new byte[]{'r','o','w','1',' ','1','0',' ','2','0',' ','v','a','l','u','e'});
  obj.init(byteRef,0,byteRef.getData().length);
  Mutation m=(Mutation)serializer.serialize(obj,oi);
  Assert.assertArrayEquals("row1".getBytes(),m.getRow());
  List<ColumnUpdate> updates=m.getUpdates();
  Assert.assertEquals(3,updates.size());
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DataOutputStream out=new DataOutputStream(baos);
  ColumnUpdate update=updates.get(0);
  Assert.assertEquals("cf",new String(update.getColumnFamily()));
  Assert.assertEquals("cq1",new String(update.getColumnQualifier()));
  Assert.assertEquals("foo",new String(update.getColumnVisibility()));
  out.writeInt(10);
  Assert.assertArrayEquals(baos.toByteArray(),update.getValue());
  update=updates.get(1);
  Assert.assertEquals("cf",new String(update.getColumnFamily()));
  Assert.assertEquals("cq2",new String(update.getColumnQualifier()));
  Assert.assertEquals("foo",new String(update.getColumnVisibility()));
  baos.reset();
  out.writeInt(20);
  Assert.assertArrayEquals(baos.toByteArray(),update.getValue());
  update=updates.get(2);
  Assert.assertEquals("cf",new String(update.getColumnFamily()));
  Assert.assertEquals("cq3",new String(update.getColumnQualifier()));
  Assert.assertEquals("foo",new String(update.getColumnVisibility()));
  Assert.assertEquals("value",new String(update.getValue()));
}
