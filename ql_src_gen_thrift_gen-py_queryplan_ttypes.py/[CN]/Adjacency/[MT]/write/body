def write(self, oprot):
    if ((oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and (self.thrift_spec is not None) and (fastbinary is not None)):
        oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
        return
    oprot.writeStructBegin('Adjacency')
    if (self.node != None):
        oprot.writeFieldBegin('node', TType.STRING, 1)
        oprot.writeString(self.node)
        oprot.writeFieldEnd()
    if (self.children != None):
        oprot.writeFieldBegin('children', TType.LIST, 2)
        oprot.writeListBegin(TType.STRING, len(self.children))
        for iter6 in self.children:
            oprot.writeString(iter6)
        oprot.writeListEnd()
        oprot.writeFieldEnd()
    if (self.adjacencyType != None):
        oprot.writeFieldBegin('adjacencyType', TType.I32, 3)
        oprot.writeI32(self.adjacencyType)
        oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

    def validate(self):
        return
