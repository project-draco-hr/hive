{
  String offsetStr=repeat("  ",level);
  if (p == null || c == String.class || c.isPrimitive() || ClassUtils.wrapperToPrimitive(c) != null) {
    errorStr.append(offsetStr).append(name + ": [" + p+ "]\n");
  }
 else   if (ClassUtils.isAssignable(c,Iterable.class)) {
    errorStr.append(offsetStr).append(name + " is an iterable\n");
    Iterator<?> i1=((Iterable<?>)p).iterator();
    int i=0;
    while (i1.hasNext()) {
      Object o1=i1.next();
      Class<?> t=o1 == null ? Object.class : o1.getClass();
      dumpObject(errorStr,name + "[" + (i++)+ "]",o1,t,level + 1);
    }
  }
 else   if (c.isArray()) {
    int len=Array.getLength(p);
    Class<?> t=c.getComponentType();
    errorStr.append(offsetStr).append(name + " is an array\n");
    for (int i=0; i < len; ++i) {
      dumpObject(errorStr,name + "[" + i+ "]",Array.get(p,i),t,level + 1);
    }
  }
 else   if (ClassUtils.isAssignable(c,Map.class)) {
    Map<?,?> c1=(Map<?,?>)p;
    errorStr.append(offsetStr).append(name + " is a map\n");
    dumpObject(errorStr,name + ".keys",c1.keySet(),Set.class,level + 1);
    dumpObject(errorStr,name + ".vals",c1.values(),Collection.class,level + 1);
  }
 else {
    errorStr.append(offsetStr).append(name + " is of type " + c.getCanonicalName()+ "\n");
    Field[] fields=c.getDeclaredFields();
    AccessibleObject.setAccessible(fields,true);
    for (int i=0; i < fields.length; i++) {
      Field f=fields[i];
      if (f.getName().indexOf('$') != -1 || Modifier.isStatic(f.getModifiers()))       continue;
      dumpObject(errorStr,name + "." + f.getName(),f.get(p),f.getType(),level + 1);
    }
  }
}
