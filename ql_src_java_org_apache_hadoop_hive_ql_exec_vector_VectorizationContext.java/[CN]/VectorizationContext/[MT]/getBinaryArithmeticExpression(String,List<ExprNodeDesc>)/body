{
  ExprNodeDesc leftExpr=childExpr.get(0);
  ExprNodeDesc rightExpr=childExpr.get(1);
  VectorExpression expr=null;
  if ((leftExpr instanceof ExprNodeColumnDesc) && (rightExpr instanceof ExprNodeConstantDesc)) {
    ExprNodeColumnDesc leftColDesc=(ExprNodeColumnDesc)leftExpr;
    ExprNodeConstantDesc constDesc=(ExprNodeConstantDesc)rightExpr;
    int inputCol=columnMap.get(leftColDesc.getColumn());
    String colType=leftColDesc.getTypeString();
    String scalarType=constDesc.getTypeString();
    String className=getBinaryColumnScalarExpressionClassName(colType,scalarType,method);
    int outputCol=this.nextOutputColumn++;
    try {
      expr=(VectorExpression)Class.forName(className).getDeclaredConstructors()[0].newInstance(inputCol,getScalarValue(constDesc),outputCol);
    }
 catch (    Exception ex) {
      throw new RuntimeException((ex));
    }
  }
 else   if ((rightExpr instanceof ExprNodeColumnDesc) && (leftExpr instanceof ExprNodeConstantDesc)) {
    ExprNodeColumnDesc rightColDesc=(ExprNodeColumnDesc)rightExpr;
    ExprNodeConstantDesc constDesc=(ExprNodeConstantDesc)leftExpr;
    int inputCol=columnMap.get(rightColDesc.getColumn());
    String colType=rightColDesc.getTypeString();
    String scalarType=constDesc.getTypeString();
    String className=getBinaryColumnScalarExpressionClassName(colType,scalarType,method);
    int outputCol=this.nextOutputColumn++;
    try {
      expr=(VectorExpression)Class.forName(className).getDeclaredConstructors()[0].newInstance(inputCol,getScalarValue(constDesc),outputCol);
    }
 catch (    Exception ex) {
      throw new RuntimeException((ex));
    }
  }
 else   if ((rightExpr instanceof ExprNodeColumnDesc) && (leftExpr instanceof ExprNodeColumnDesc)) {
    ExprNodeColumnDesc rightColDesc=(ExprNodeColumnDesc)rightExpr;
    ExprNodeColumnDesc leftColDesc=(ExprNodeColumnDesc)leftExpr;
    int inputCol1=columnMap.get(rightColDesc.getColumn());
    int inputCol2=columnMap.get(leftColDesc.getColumn());
    String colType1=rightColDesc.getTypeString();
    String colType2=leftColDesc.getTypeString();
    String className=getBinaryColumnColumnExpressionClassName(colType1,colType2,method);
    int outputCol=this.nextOutputColumn++;
    try {
      expr=(VectorExpression)Class.forName(className).getDeclaredConstructors()[0].newInstance(inputCol1,inputCol2,outputCol);
    }
 catch (    Exception ex) {
      throw new RuntimeException((ex));
    }
  }
 else   if ((leftExpr instanceof ExprNodeGenericFuncDesc) && (rightExpr instanceof ExprNodeColumnDesc)) {
    ExprNodeColumnDesc colDesc=(ExprNodeColumnDesc)rightExpr;
    int outputCol=this.nextOutputColumn++;
    VectorExpression v1=getVectorExpression(leftExpr);
    int inputCol1=v1.getOutputColumn();
    int inputCol2=columnMap.get(colDesc.getColumn());
    String colType1=v1.getOutputType();
    String colType2=colDesc.getTypeString();
    String className=getBinaryColumnColumnExpressionClassName(colType1,colType2,method);
    this.nextOutputColumn=outputCol + 1;
    try {
      expr=(VectorExpression)Class.forName(className).getDeclaredConstructors()[0].newInstance(inputCol1,inputCol2,outputCol);
    }
 catch (    Exception ex) {
      throw new RuntimeException((ex));
    }
    expr.setChildExpressions(new VectorExpression[]{v1});
  }
 else   if ((leftExpr instanceof ExprNodeGenericFuncDesc) && (rightExpr instanceof ExprNodeConstantDesc)) {
    ExprNodeConstantDesc constDesc=(ExprNodeConstantDesc)rightExpr;
    int outputCol=this.nextOutputColumn++;
    VectorExpression v1=getVectorExpression(leftExpr);
    int inputCol1=v1.getOutputColumn();
    String colType1=v1.getOutputType();
    String scalarType=constDesc.getTypeString();
    String className=getBinaryColumnScalarExpressionClassName(colType1,scalarType,method);
    this.nextOutputColumn=outputCol + 1;
    try {
      expr=(VectorExpression)Class.forName(className).getDeclaredConstructors()[0].newInstance(inputCol1,getScalarValue(constDesc),outputCol);
    }
 catch (    Exception ex) {
      throw new RuntimeException((ex));
    }
    expr.setChildExpressions(new VectorExpression[]{v1});
  }
 else   if ((leftExpr instanceof ExprNodeColumnDesc) && (rightExpr instanceof ExprNodeGenericFuncDesc)) {
    ExprNodeColumnDesc colDesc=(ExprNodeColumnDesc)leftExpr;
    int outputCol=this.nextOutputColumn++;
    VectorExpression v2=getVectorExpression(rightExpr);
    int inputCol1=columnMap.get(colDesc.getColumn());
    int inputCol2=v2.getOutputColumn();
    String colType1=colDesc.getTypeString();
    String colType2=v2.getOutputType();
    String className=getBinaryColumnColumnExpressionClassName(colType1,colType2,method);
    this.nextOutputColumn=outputCol + 1;
    try {
      expr=(VectorExpression)Class.forName(className).getDeclaredConstructors()[0].newInstance(inputCol1,inputCol2,outputCol);
    }
 catch (    Exception ex) {
      throw new RuntimeException((ex));
    }
    expr.setChildExpressions(new VectorExpression[]{v2});
  }
 else   if ((leftExpr instanceof ExprNodeConstantDesc) && (rightExpr instanceof ExprNodeGenericFuncDesc)) {
    ExprNodeConstantDesc constDesc=(ExprNodeConstantDesc)leftExpr;
    int outputCol=this.nextOutputColumn++;
    VectorExpression v2=getVectorExpression(rightExpr);
    int inputCol2=v2.getOutputColumn();
    String colType2=v2.getOutputType();
    String scalarType=constDesc.getTypeString();
    String className=getBinaryScalarColumnExpressionClassName(colType2,scalarType,method);
    this.nextOutputColumn=outputCol + 1;
    try {
      expr=(VectorExpression)Class.forName(className).getDeclaredConstructors()[0].newInstance(inputCol2,getScalarValue(constDesc),outputCol);
    }
 catch (    Exception ex) {
      throw new RuntimeException((ex));
    }
    expr.setChildExpressions(new VectorExpression[]{v2});
  }
 else   if ((leftExpr instanceof ExprNodeGenericFuncDesc) && (rightExpr instanceof ExprNodeGenericFuncDesc)) {
    int outputCol=this.nextOutputColumn++;
    VectorExpression v1=getVectorExpression(leftExpr);
    VectorExpression v2=getVectorExpression(rightExpr);
    int inputCol1=v1.getOutputColumn();
    int inputCol2=v2.getOutputColumn();
    String colType1=v1.getOutputType();
    String colType2=v2.getOutputType();
    String className=getBinaryColumnColumnExpressionClassName(colType1,colType2,method);
    this.nextOutputColumn=outputCol + 1;
    try {
      expr=(VectorExpression)Class.forName(className).getDeclaredConstructors()[0].newInstance(inputCol1,inputCol2,outputCol);
    }
 catch (    Exception ex) {
      throw new RuntimeException((ex));
    }
    expr.setChildExpressions(new VectorExpression[]{v1,v2});
  }
  return expr;
}
