{
  ExprNodeDesc colExpr=childExpr.get(0);
  TypeInfo colTypeInfo=colExpr.getTypeInfo();
  String colType=colExpr.getTypeString();
  List<ExprNodeDesc> childrenForInList=foldConstantsForUnaryExprs(childExpr.subList(1,childExpr.size()));
  VectorExpression expr=null;
  Class<?> cl=null;
  if (isIntFamily(colType)) {
    cl=(mode == Mode.FILTER ? FilterLongColumnInList.class : LongColumnInList.class);
    long[] inVals=new long[childrenForInList.size()];
    for (int i=0; i != inVals.length; i++) {
      inVals[i]=getIntFamilyScalarAsLong((ExprNodeConstantDesc)childrenForInList.get(i));
    }
    expr=createVectorExpression(cl,childExpr.subList(0,1),Mode.PROJECTION,colTypeInfo);
    ((ILongInExpr)expr).setInListValues(inVals);
  }
 else   if (colType.equals("timestamp")) {
    cl=(mode == Mode.FILTER ? FilterLongColumnInList.class : LongColumnInList.class);
    long[] inVals=new long[childrenForInList.size()];
    for (int i=0; i != inVals.length; i++) {
      inVals[i]=getTimestampScalar(childrenForInList.get(i));
    }
    expr=createVectorExpression(cl,childExpr.subList(0,1),Mode.PROJECTION,colTypeInfo);
    ((ILongInExpr)expr).setInListValues(inVals);
  }
 else   if (colType.equals("string")) {
    cl=(mode == Mode.FILTER ? FilterStringColumnInList.class : StringColumnInList.class);
    byte[][] inVals=new byte[childrenForInList.size()][];
    for (int i=0; i != inVals.length; i++) {
      inVals[i]=getStringScalarAsByteArray((ExprNodeConstantDesc)childrenForInList.get(i));
    }
    expr=createVectorExpression(cl,childExpr.subList(0,1),Mode.PROJECTION,colTypeInfo);
    ((IStringInExpr)expr).setInListValues(inVals);
  }
 else   if (isFloatFamily(colType)) {
    cl=(mode == Mode.FILTER ? FilterDoubleColumnInList.class : DoubleColumnInList.class);
    double[] inValsD=new double[childrenForInList.size()];
    for (int i=0; i != inValsD.length; i++) {
      inValsD[i]=getNumericScalarAsDouble(childrenForInList.get(i));
    }
    expr=createVectorExpression(cl,childExpr.subList(0,1),Mode.PROJECTION,colTypeInfo);
    ((IDoubleInExpr)expr).setInListValues(inValsD);
  }
  return expr;
}
