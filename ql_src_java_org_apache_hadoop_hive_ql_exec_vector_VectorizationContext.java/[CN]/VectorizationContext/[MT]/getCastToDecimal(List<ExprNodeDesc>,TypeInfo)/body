{
  ExprNodeDesc child=childExpr.get(0);
  String inputType=childExpr.get(0).getTypeString();
  if (child instanceof ExprNodeConstantDesc) {
    Object constantValue=((ExprNodeConstantDesc)child).getValue();
    HiveDecimal decimalValue=castConstantToDecimal(constantValue,child.getTypeInfo());
    return getConstantVectorExpression(decimalValue,returnType,VectorExpressionDescriptor.Mode.PROJECTION);
  }
  if (isIntFamily(inputType)) {
    return createVectorExpression(CastLongToDecimal.class,childExpr,VectorExpressionDescriptor.Mode.PROJECTION,returnType);
  }
 else   if (isFloatFamily(inputType)) {
    return createVectorExpression(CastDoubleToDecimal.class,childExpr,VectorExpressionDescriptor.Mode.PROJECTION,returnType);
  }
 else   if (decimalTypePattern.matcher(inputType).matches()) {
    return createVectorExpression(CastDecimalToDecimal.class,childExpr,VectorExpressionDescriptor.Mode.PROJECTION,returnType);
  }
 else   if (isStringFamily(inputType)) {
    return createVectorExpression(CastStringToDecimal.class,childExpr,VectorExpressionDescriptor.Mode.PROJECTION,returnType);
  }
 else   if (inputType.equals("timestamp")) {
    return createVectorExpression(CastTimestampToDecimal.class,childExpr,VectorExpressionDescriptor.Mode.PROJECTION,returnType);
  }
  return null;
}
