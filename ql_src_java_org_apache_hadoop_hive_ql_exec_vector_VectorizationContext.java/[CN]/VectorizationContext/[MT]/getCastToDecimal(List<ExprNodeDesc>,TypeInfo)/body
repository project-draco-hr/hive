{
  ExprNodeDesc child=childExpr.get(0);
  String inputType=childExpr.get(0).getTypeString();
  if (child instanceof ExprNodeConstantDesc) {
    Object constantValue=((ExprNodeConstantDesc)child).getValue();
    Decimal128 decimalValue=castConstantToDecimal(constantValue,child.getTypeInfo());
    return getConstantVectorExpression(decimalValue,returnType,Mode.PROJECTION);
  }
 else   if (child instanceof ExprNodeNullDesc) {
    return getConstantVectorExpression(null,returnType,Mode.PROJECTION);
  }
  if (isIntFamily(inputType)) {
    return createVectorExpression(CastLongToDecimal.class,childExpr,Mode.PROJECTION,returnType);
  }
 else   if (isFloatFamily(inputType)) {
    return createVectorExpression(CastDoubleToDecimal.class,childExpr,Mode.PROJECTION,returnType);
  }
 else   if (decimalTypePattern.matcher(inputType).matches()) {
    return createVectorExpression(CastDecimalToDecimal.class,childExpr,Mode.PROJECTION,returnType);
  }
 else   if (isStringFamily(inputType)) {
    return createVectorExpression(CastStringToDecimal.class,childExpr,Mode.PROJECTION,returnType);
  }
 else   if (isDatetimeFamily(inputType)) {
    return createVectorExpression(CastTimestampToDecimal.class,childExpr,Mode.PROJECTION,returnType);
  }
  throw new HiveException("Unhandled cast input type: " + inputType);
}
