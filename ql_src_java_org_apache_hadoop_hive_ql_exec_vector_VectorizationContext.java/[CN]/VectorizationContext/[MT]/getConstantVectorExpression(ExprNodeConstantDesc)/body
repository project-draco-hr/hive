{
  String type=exprDesc.getTypeString();
  String colVectorType=this.getOutputColType(type,"constant");
  int outCol=ocm.allocateOutputColumn(colVectorType);
  if (type.equalsIgnoreCase("long") || type.equalsIgnoreCase("int") || type.equalsIgnoreCase("short")|| type.equalsIgnoreCase("byte")) {
    return new ConstantVectorExpression(outCol,((Number)exprDesc.getValue()).longValue());
  }
 else   if (type.equalsIgnoreCase("double") || type.equalsIgnoreCase("float")) {
    return new ConstantVectorExpression(outCol,((Number)exprDesc.getValue()).doubleValue());
  }
 else   if (type.equalsIgnoreCase("string")) {
    return new ConstantVectorExpression(outCol,((String)exprDesc.getValue()).getBytes());
  }
 else   if (type.equalsIgnoreCase("boolean")) {
    if (this.opType == OperatorType.FILTER) {
      if (((Boolean)exprDesc.getValue()).booleanValue()) {
        return new FilterConstantBooleanVectorExpression(1);
      }
 else {
        return new FilterConstantBooleanVectorExpression(0);
      }
    }
 else {
      if (((Boolean)exprDesc.getValue()).booleanValue()) {
        return new ConstantVectorExpression(outCol,1);
      }
 else {
        return new ConstantVectorExpression(outCol,0);
      }
    }
  }
 else {
    throw new HiveException("Unsupported constant type: " + type.toString());
  }
}
