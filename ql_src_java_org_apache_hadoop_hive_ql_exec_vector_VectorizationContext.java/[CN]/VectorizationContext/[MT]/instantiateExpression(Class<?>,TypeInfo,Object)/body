{
  VectorExpression ve=null;
  Constructor<?> ctor=getConstructor(vclass);
  int numParams=ctor.getParameterTypes().length;
  int argsLength=(args == null) ? 0 : args.length;
  if (numParams == 0) {
    try {
      ve=(VectorExpression)ctor.newInstance();
    }
 catch (    Exception ex) {
      throw new HiveException("Could not instantiate " + vclass.getSimpleName() + " with 0 arguments, exception: "+ StringUtils.stringifyException(ex));
    }
  }
 else   if (numParams == argsLength) {
    try {
      ve=(VectorExpression)ctor.newInstance(args);
    }
 catch (    Exception ex) {
      throw new HiveException("Could not instantiate " + vclass.getSimpleName() + " with "+ getNewInstanceArgumentString(args)+ ", exception: "+ StringUtils.stringifyException(ex));
    }
  }
 else   if (numParams == argsLength + 1) {
    Object[] newArgs=null;
    try {
      String outType;
      if (returnType != null) {
        outType=getNormalizedName(returnType.getTypeName()).toLowerCase();
        if (outType == null) {
          throw new HiveException("No vector type for type name " + returnType);
        }
      }
 else {
        outType=((VectorExpression)vclass.newInstance()).getOutputType();
      }
      int outputCol=ocm.allocateOutputColumn(outType);
      newArgs=Arrays.copyOf(args,numParams);
      newArgs[numParams - 1]=outputCol;
      ve=(VectorExpression)ctor.newInstance(newArgs);
      ve.setOutputType(outType);
    }
 catch (    Exception ex) {
      throw new HiveException("Could not instantiate " + vclass.getSimpleName() + " with arguments "+ getNewInstanceArgumentString(newArgs)+ ", exception: "+ StringUtils.stringifyException(ex));
    }
  }
  if (ve instanceof TruncStringOutput) {
    TruncStringOutput truncStringOutput=(TruncStringOutput)ve;
    if (returnType instanceof BaseCharTypeInfo) {
      BaseCharTypeInfo baseCharTypeInfo=(BaseCharTypeInfo)returnType;
      truncStringOutput.setMaxLength(baseCharTypeInfo.getLength());
    }
  }
  return ve;
}
