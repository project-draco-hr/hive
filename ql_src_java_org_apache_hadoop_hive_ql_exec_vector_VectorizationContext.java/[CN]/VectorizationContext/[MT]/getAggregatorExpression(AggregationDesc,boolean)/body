{
  ArrayList<ExprNodeDesc> paramDescList=desc.getParameters();
  VectorExpression[] vectorParams=new VectorExpression[paramDescList.size()];
  for (int i=0; i < paramDescList.size(); ++i) {
    ExprNodeDesc exprDesc=paramDescList.get(i);
    vectorParams[i]=this.getVectorExpression(exprDesc,Mode.PROJECTION);
  }
  String aggregateName=desc.getGenericUDAFName();
  VectorExpressionDescriptor.ArgumentType inputType=VectorExpressionDescriptor.ArgumentType.NONE;
  if (paramDescList.size() > 0) {
    ExprNodeDesc inputExpr=paramDescList.get(0);
    inputType=VectorExpressionDescriptor.ArgumentType.fromHiveTypeName(inputExpr.getTypeString());
    if (inputType == VectorExpressionDescriptor.ArgumentType.NONE) {
      throw new HiveException("No vector argument type for Hive type name " + inputExpr.getTypeString());
    }
  }
  for (  AggregateDefinition aggDef : aggregatesDefinition) {
    if (aggregateName.equalsIgnoreCase(aggDef.getName()) && ((aggDef.getType() == VectorExpressionDescriptor.ArgumentType.NONE && inputType == VectorExpressionDescriptor.ArgumentType.NONE) || (aggDef.getType().isSameTypeOrFamily(inputType)))) {
      if (aggDef.getMode() == GroupByDesc.Mode.HASH && isReduce) {
        continue;
      }
 else       if (aggDef.getMode() == GroupByDesc.Mode.MERGEPARTIAL && !isReduce) {
        continue;
      }
      Class<? extends VectorAggregateExpression> aggClass=aggDef.getAggClass();
      try {
        Constructor<? extends VectorAggregateExpression> ctor=aggClass.getConstructor(VectorExpression.class);
        VectorAggregateExpression aggExpr=ctor.newInstance(vectorParams.length > 0 ? vectorParams[0] : null);
        aggExpr.init(desc);
        return aggExpr;
      }
 catch (      Exception e) {
        throw new HiveException("Internal exception for vector aggregate : \"" + aggregateName + "\" for type: \""+ inputType+ "",e);
      }
    }
  }
  throw new HiveException("Vector aggregate not implemented: \"" + aggregateName + "\" for type: \""+ inputType.name()+ " (reduce-side = "+ isReduce+ ")");
}
