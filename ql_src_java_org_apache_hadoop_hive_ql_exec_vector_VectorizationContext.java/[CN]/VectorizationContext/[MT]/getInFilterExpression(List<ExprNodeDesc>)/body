{
  ExprNodeDesc colExpr=childExpr.get(0);
  String colType=colExpr.getTypeString();
  List<ExprNodeDesc> childrenForInList=foldConstantsForUnaryExprs(childExpr.subList(1,childExpr.size()));
  VectorExpression expr=null;
  Class<?> cl=null;
  if (isIntFamily(colType)) {
    cl=FilterLongColumnInList.class;
    long[] inVals=new long[childrenForInList.size()];
    for (int i=0; i != inVals.length; i++) {
      inVals[i]=getIntFamilyScalarAsLong((ExprNodeConstantDesc)childrenForInList.get(i));
    }
    FilterLongColumnInList f=(FilterLongColumnInList)createVectorExpression(cl,childExpr.subList(0,1),Mode.PROJECTION);
    f.setInListValues(inVals);
    expr=f;
  }
 else   if (colType.equals("timestamp")) {
    cl=FilterLongColumnInList.class;
    long[] inVals=new long[childrenForInList.size()];
    for (int i=0; i != inVals.length; i++) {
      inVals[i]=getTimestampScalar(childrenForInList.get(i));
    }
    FilterLongColumnInList f=(FilterLongColumnInList)createVectorExpression(cl,childExpr.subList(0,1),Mode.PROJECTION);
    f.setInListValues(inVals);
    expr=f;
  }
 else   if (colType.equals("string")) {
    cl=FilterStringColumnInList.class;
    byte[][] inVals=new byte[childrenForInList.size()][];
    for (int i=0; i != inVals.length; i++) {
      inVals[i]=getStringScalarAsByteArray((ExprNodeConstantDesc)childrenForInList.get(i));
    }
    FilterStringColumnInList f=(FilterStringColumnInList)createVectorExpression(cl,childExpr.subList(0,1),Mode.PROJECTION);
    f.setInListValues(inVals);
    expr=f;
  }
 else   if (isFloatFamily(colType)) {
    cl=FilterDoubleColumnInList.class;
    double[] inValsD=new double[childrenForInList.size()];
    for (int i=0; i != inValsD.length; i++) {
      inValsD[i]=getNumericScalarAsDouble(childrenForInList.get(i));
    }
    FilterDoubleColumnInList f=(FilterDoubleColumnInList)createVectorExpression(cl,childExpr.subList(0,1),Mode.PROJECTION);
    f.setInListValues(inValsD);
    expr=f;
  }
 else {
    throw new HiveException("Type " + colType + " not supported for IN in vectorized mode");
  }
  return expr;
}
