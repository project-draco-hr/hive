{
  String type=typeInfo.getTypeName();
  String colVectorType=getNormalizedTypeName(type);
  int outCol=-1;
  if (mode == Mode.PROJECTION) {
    outCol=ocm.allocateOutputColumn(colVectorType);
  }
  if (constantValue == null) {
    return new ConstantVectorExpression(outCol,type,true);
  }
 else   if (decimalTypePattern.matcher(type).matches()) {
    VectorExpression ve=new ConstantVectorExpression(outCol,(Decimal128)constantValue);
    ve.setOutputType(typeInfo.getTypeName());
    return ve;
  }
 else   if (type.equalsIgnoreCase("long") || type.equalsIgnoreCase("int") || type.equalsIgnoreCase("short")|| type.equalsIgnoreCase("byte")) {
    return new ConstantVectorExpression(outCol,((Number)constantValue).longValue());
  }
 else   if (type.equalsIgnoreCase("double") || type.equalsIgnoreCase("float")) {
    return new ConstantVectorExpression(outCol,((Number)constantValue).doubleValue());
  }
 else   if (type.equalsIgnoreCase("string")) {
    return new ConstantVectorExpression(outCol,((String)constantValue).getBytes());
  }
 else   if (type.equalsIgnoreCase("boolean")) {
    if (mode == Mode.FILTER) {
      if (((Boolean)constantValue).booleanValue()) {
        return new FilterConstantBooleanVectorExpression(1);
      }
 else {
        return new FilterConstantBooleanVectorExpression(0);
      }
    }
 else {
      if (((Boolean)constantValue).booleanValue()) {
        return new ConstantVectorExpression(outCol,1);
      }
 else {
        return new ConstantVectorExpression(outCol,0);
      }
    }
  }
  throw new HiveException("Unsupported constant type: " + type.toString());
}
