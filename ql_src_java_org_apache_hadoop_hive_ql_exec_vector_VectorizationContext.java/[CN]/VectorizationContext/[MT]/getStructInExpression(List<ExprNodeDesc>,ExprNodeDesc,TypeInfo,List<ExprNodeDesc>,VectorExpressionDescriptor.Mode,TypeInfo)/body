{
  VectorExpression expr=null;
  StructTypeInfo structTypeInfo=(StructTypeInfo)colTypeInfo;
  ArrayList<TypeInfo> fieldTypeInfos=structTypeInfo.getAllStructFieldTypeInfos();
  final int fieldCount=fieldTypeInfos.size();
  ColumnVector.Type[] fieldVectorColumnTypes=new ColumnVector.Type[fieldCount];
  InConstantType[] fieldInConstantTypes=new InConstantType[fieldCount];
  for (int f=0; f < fieldCount; f++) {
    TypeInfo fieldTypeInfo=fieldTypeInfos.get(f);
    if (fieldTypeInfo.getCategory() != Category.PRIMITIVE) {
      return null;
    }
    ColumnVector.Type fieldVectorColumnType=getColumnVectorTypeFromTypeInfo(fieldTypeInfo);
    fieldVectorColumnTypes[f]=fieldVectorColumnType;
    PrimitiveCategory fieldPrimitiveCategory=((PrimitiveTypeInfo)fieldTypeInfo).getPrimitiveCategory();
    InConstantType inConstantType=getInConstantTypeFromPrimitiveCategory(fieldPrimitiveCategory);
    fieldInConstantTypes[f]=inConstantType;
  }
  Output buffer=new Output();
  BinarySortableSerializeWrite binarySortableSerializeWrite=new BinarySortableSerializeWrite(fieldCount);
  final int inChildrenCount=inChildren.size();
  byte[][] serializedInChildren=new byte[inChildrenCount][];
  try {
    for (int i=0; i < inChildrenCount; i++) {
      final ExprNodeDesc node=inChildren.get(i);
      final Object[] constants;
      if (node instanceof ExprNodeConstantDesc) {
        ExprNodeConstantDesc constNode=(ExprNodeConstantDesc)node;
        ConstantObjectInspector output=constNode.getWritableObjectInspector();
        constants=((List<?>)output.getWritableConstantValue()).toArray();
      }
 else {
        ExprNodeGenericFuncDesc exprNode=(ExprNodeGenericFuncDesc)node;
        ExprNodeEvaluator<?> evaluator=ExprNodeEvaluatorFactory.get(exprNode);
        ObjectInspector output=evaluator.initialize(exprNode.getWritableObjectInspector());
        constants=(Object[])evaluator.evaluate(null);
      }
      binarySortableSerializeWrite.set(buffer);
      for (int f=0; f < fieldCount; f++) {
        Object constant=constants[f];
        if (constant == null) {
          binarySortableSerializeWrite.writeNull();
        }
 else {
          InConstantType inConstantType=fieldInConstantTypes[f];
switch (inConstantType) {
case STRING_FAMILY:
{
              byte[] bytes;
              if (constant instanceof Text) {
                Text text=(Text)constant;
                bytes=text.getBytes();
                binarySortableSerializeWrite.writeString(bytes,0,text.getLength());
              }
 else {
                throw new HiveException("Unexpected constant String type " + constant.getClass().getSimpleName());
              }
            }
          break;
case INT_FAMILY:
{
          long value;
          if (constant instanceof IntWritable) {
            value=((IntWritable)constant).get();
          }
 else           if (constant instanceof LongWritable) {
            value=((LongWritable)constant).get();
          }
 else {
            throw new HiveException("Unexpected constant Long type " + constant.getClass().getSimpleName());
          }
          binarySortableSerializeWrite.writeLong(value);
        }
      break;
case FLOAT_FAMILY:
{
      double value;
      if (constant instanceof DoubleWritable) {
        value=((DoubleWritable)constant).get();
      }
 else {
        throw new HiveException("Unexpected constant Double type " + constant.getClass().getSimpleName());
      }
      binarySortableSerializeWrite.writeDouble(value);
    }
  break;
case DATE:
case TIMESTAMP:
case DECIMAL:
default :
throw new RuntimeException("Unexpected IN constant type " + inConstantType.name());
}
}
}
serializedInChildren[i]=Arrays.copyOfRange(buffer.getData(),0,buffer.getLength());
}
}
 catch (Exception e) {
throw new HiveException(e);
}
int scratchBytesCol=ocm.allocateOutputColumn("string");
Class<?> cl=(mode == VectorExpressionDescriptor.Mode.FILTER ? FilterStructColumnInList.class : StructColumnInList.class);
expr=createVectorExpression(cl,null,VectorExpressionDescriptor.Mode.PROJECTION,returnType);
((IStringInExpr)expr).setInListValues(serializedInChildren);
((IStructInExpr)expr).setScratchBytesColumn(scratchBytesCol);
((IStructInExpr)expr).setStructColumnExprs(this,colExpr.getChildren(),fieldVectorColumnTypes);
return expr;
}
