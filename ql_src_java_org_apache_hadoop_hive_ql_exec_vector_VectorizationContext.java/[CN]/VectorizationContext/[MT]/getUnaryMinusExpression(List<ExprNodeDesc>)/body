{
  ExprNodeDesc childExpr=childExprList.get(0);
  int inputCol;
  String colType;
  VectorExpression v1=null;
  if (childExpr instanceof ExprNodeGenericFuncDesc) {
    v1=getVectorExpression(childExpr);
    inputCol=v1.getOutputColumn();
    colType=v1.getOutputType();
  }
 else   if (childExpr instanceof ExprNodeColumnDesc) {
    ExprNodeColumnDesc colDesc=(ExprNodeColumnDesc)childExpr;
    inputCol=columnMap.get(colDesc.getColumn());
    colType=colDesc.getTypeString();
  }
 else {
    throw new RuntimeException("Expression not supported: " + childExpr);
  }
  int outputCol=ocm.allocateOutputColumn(colType);
  String className=getNormalizedTypeName(colType) + "colUnaryMinus";
  VectorExpression expr;
  try {
    expr=(VectorExpression)Class.forName(className).getDeclaredConstructors()[0].newInstance(inputCol,outputCol);
  }
 catch (  Exception ex) {
    throw new RuntimeException((ex));
  }
  if (v1 != null) {
    expr.setChildExpressions(new VectorExpression[]{v1});
    ocm.freeOutputColumn(v1.getOutputColumn());
  }
  return expr;
}
