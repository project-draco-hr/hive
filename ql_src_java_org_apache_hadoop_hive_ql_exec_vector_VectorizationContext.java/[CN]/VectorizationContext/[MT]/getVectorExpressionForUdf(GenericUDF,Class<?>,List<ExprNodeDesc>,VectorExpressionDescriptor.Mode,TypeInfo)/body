{
  int numChildren=(childExpr == null) ? 0 : childExpr.size();
  if (numChildren > 2 && genericeUdf != null && mode == VectorExpressionDescriptor.Mode.FILTER && ((genericeUdf instanceof GenericUDFOPOr) || (genericeUdf instanceof GenericUDFOPAnd))) {
    for (int i=0; i < numChildren; i++) {
      ExprNodeDesc child=childExpr.get(i);
      String childTypeString=child.getTypeString();
      if (childTypeString == null) {
        throw new HiveException("Null child type name string");
      }
      TypeInfo typeInfo=TypeInfoUtils.getTypeInfoFromTypeString(childTypeString);
      Type columnVectorType=VectorizationContext.getColumnVectorTypeFromTypeInfo(typeInfo);
      if (columnVectorType != ColumnVector.Type.LONG) {
        return null;
      }
      if (!(child instanceof ExprNodeGenericFuncDesc) && !(child instanceof ExprNodeColumnDesc)) {
        return null;
      }
    }
    Class<?> vclass;
    if (genericeUdf instanceof GenericUDFOPOr) {
      vclass=FilterExprOrExpr.class;
    }
 else     if (genericeUdf instanceof GenericUDFOPAnd) {
      vclass=FilterExprAndExpr.class;
    }
 else {
      throw new RuntimeException("Unexpected multi-child UDF");
    }
    VectorExpressionDescriptor.Mode childrenMode=getChildrenMode(mode,udfClass);
    return createVectorExpression(vclass,childExpr,childrenMode,returnType);
  }
  if (numChildren > VectorExpressionDescriptor.MAX_NUM_ARGUMENTS) {
    return null;
  }
  VectorExpressionDescriptor.Builder builder=new VectorExpressionDescriptor.Builder();
  builder.setNumArguments(numChildren);
  builder.setMode(mode);
  for (int i=0; i < numChildren; i++) {
    ExprNodeDesc child=childExpr.get(i);
    String childTypeString=child.getTypeString();
    if (childTypeString == null) {
      throw new HiveException("Null child type name string");
    }
    String undecoratedTypeName=getUndecoratedName(childTypeString);
    if (undecoratedTypeName == null) {
      throw new HiveException("No match for type string " + childTypeString + " from undecorated type name method");
    }
    builder.setArgumentType(i,undecoratedTypeName);
    if ((child instanceof ExprNodeGenericFuncDesc) || (child instanceof ExprNodeColumnDesc)) {
      builder.setInputExpressionType(i,InputExpressionType.COLUMN);
    }
 else     if (child instanceof ExprNodeConstantDesc) {
      builder.setInputExpressionType(i,InputExpressionType.SCALAR);
    }
 else {
      throw new HiveException("Cannot handle expression type: " + child.getClass().getSimpleName());
    }
  }
  VectorExpressionDescriptor.Descriptor descriptor=builder.build();
  Class<?> vclass=this.vMap.getVectorExpressionClass(udfClass,descriptor);
  if (vclass == null) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("No vector udf found for " + udfClass.getSimpleName() + ", descriptor: "+ descriptor);
    }
    return null;
  }
  VectorExpressionDescriptor.Mode childrenMode=getChildrenMode(mode,udfClass);
  return createVectorExpression(vclass,childExpr,childrenMode,returnType);
}
