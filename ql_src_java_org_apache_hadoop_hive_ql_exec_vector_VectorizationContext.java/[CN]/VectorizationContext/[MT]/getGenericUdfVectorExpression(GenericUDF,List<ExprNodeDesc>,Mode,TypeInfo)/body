{
  List<ExprNodeDesc> castedChildren=evaluateCastOnConstants(childExpr);
  childExpr=castedChildren;
  VectorExpression ve=null;
  if (udf instanceof GenericUDFBetween && mode == Mode.FILTER) {
    ve=getBetweenFilterExpression(childExpr,mode,returnType);
  }
 else   if (udf instanceof GenericUDFIn) {
    ve=getInExpression(childExpr,mode,returnType);
  }
 else   if (udf instanceof GenericUDFOPPositive) {
    ve=getIdentityExpression(childExpr);
  }
 else   if (udf instanceof GenericUDFCoalesce || udf instanceof GenericUDFNvl) {
    ve=getCoalesceExpression(childExpr,returnType);
  }
 else   if (udf instanceof GenericUDFElt) {
    ve=getEltExpression(childExpr,returnType);
  }
 else   if (udf instanceof GenericUDFBridge) {
    ve=getGenericUDFBridgeVectorExpression((GenericUDFBridge)udf,childExpr,mode,returnType);
  }
 else   if (udf instanceof GenericUDFToDecimal) {
    ve=getCastToDecimal(childExpr,returnType);
  }
 else   if (udf instanceof GenericUDFToChar) {
    ve=getCastToChar(childExpr,returnType);
  }
 else   if (udf instanceof GenericUDFToVarchar) {
    ve=getCastToVarChar(childExpr,returnType);
  }
 else   if (udf instanceof GenericUDFTimestamp) {
    ve=getCastToTimestamp((GenericUDFTimestamp)udf,childExpr,mode,returnType);
  }
  if (ve != null) {
    return ve;
  }
  Class<?> udfClass=udf.getClass();
  boolean isSubstituted=false;
  if (udf instanceof GenericUDFBridge) {
    udfClass=((GenericUDFBridge)udf).getUdfClass();
    isSubstituted=true;
  }
  ve=getVectorExpressionForUdf((!isSubstituted ? udf : null),udfClass,castedChildren,mode,returnType);
  return ve;
}
