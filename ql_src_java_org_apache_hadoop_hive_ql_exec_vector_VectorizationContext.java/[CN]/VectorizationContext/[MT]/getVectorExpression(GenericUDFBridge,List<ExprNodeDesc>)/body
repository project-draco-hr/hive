{
  Class<? extends UDF> cl=udf.getUdfClass();
  if (cl.equals(UDFOPPlus.class)) {
    return getBinaryArithmeticExpression("Add",childExpr);
  }
 else   if (cl.equals(UDFOPMinus.class)) {
    return getBinaryArithmeticExpression("Subtract",childExpr);
  }
 else   if (cl.equals(UDFOPMultiply.class)) {
    return getBinaryArithmeticExpression("Multiply",childExpr);
  }
 else   if (cl.equals(UDFOPDivide.class)) {
    return getBinaryArithmeticExpression("Divide",childExpr);
  }
 else   if (cl.equals(UDFOPMod.class)) {
    return getBinaryArithmeticExpression("Modulo",childExpr);
  }
 else   if (cl.equals(UDFOPNegative.class)) {
    return getUnaryMinusExpression(childExpr);
  }
 else   if (cl.equals(UDFOPPositive.class)) {
    return getUnaryPlusExpression(childExpr);
  }
 else   if (cl.equals(UDFYear.class) || cl.equals(UDFMonth.class) || cl.equals(UDFWeekOfYear.class)|| cl.equals(UDFDayOfMonth.class)|| cl.equals(UDFHour.class)|| cl.equals(UDFMinute.class)|| cl.equals(UDFSecond.class)) {
    return getTimestampFieldExpression(cl.getSimpleName(),childExpr);
  }
 else   if (cl.equals(UDFLike.class)) {
    return getLikeExpression(childExpr);
  }
 else   if (cl.equals(UDFLower.class)) {
    return getUnaryStringExpression("StringLower","String",childExpr);
  }
 else   if (cl.equals(UDFUpper.class)) {
    return getUnaryStringExpression("StringUpper","String",childExpr);
  }
 else   if (cl.equals(UDFLength.class)) {
    return getUnaryStringExpression("StringLength","Long",childExpr);
  }
  throw new HiveException("Udf: " + udf.getClass().getSimpleName() + ", is not supported");
}
