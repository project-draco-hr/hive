{
  Class<? extends UDF> cl=udf.getUdfClass();
  if (cl.equals(UDFOPPlus.class)) {
    return getBinaryArithmeticExpression("Add",childExpr);
  }
 else   if (cl.equals(UDFOPMinus.class)) {
    return getBinaryArithmeticExpression("Subtract",childExpr);
  }
 else   if (cl.equals(UDFOPMultiply.class)) {
    return getBinaryArithmeticExpression("Multiply",childExpr);
  }
 else   if (cl.equals(UDFOPDivide.class)) {
    return getBinaryArithmeticExpression("Divide",childExpr);
  }
 else   if (cl.equals(UDFOPMod.class)) {
    return getBinaryArithmeticExpression("Modulo",childExpr);
  }
 else   if (cl.equals(UDFOPNegative.class)) {
    return getUnaryMinusExpression(childExpr);
  }
 else   if (cl.equals(UDFOPPositive.class)) {
    return getUnaryPlusExpression(childExpr);
  }
 else   if (cl.equals(UDFYear.class) || cl.equals(UDFMonth.class) || cl.equals(UDFWeekOfYear.class)|| cl.equals(UDFDayOfMonth.class)|| cl.equals(UDFHour.class)|| cl.equals(UDFMinute.class)|| cl.equals(UDFSecond.class)) {
    return getTimestampFieldExpression(cl.getSimpleName(),childExpr);
  }
 else   if (cl.equals(UDFLike.class)) {
    return getLikeExpression(childExpr,true);
  }
 else   if (cl.equals(UDFRegExp.class)) {
    return getLikeExpression(childExpr,false);
  }
 else   if (cl.equals(UDFLength.class)) {
    return getUnaryStringExpression("StringLength","Long",childExpr);
  }
 else   if (cl.equals(UDFSubstr.class)) {
    return getSubstrExpression(childExpr);
  }
 else   if (cl.equals(UDFLTrim.class)) {
    return getUnaryStringExpression("StringLTrim","String",childExpr);
  }
 else   if (cl.equals(UDFRTrim.class)) {
    return getUnaryStringExpression("StringRTrim","String",childExpr);
  }
 else   if (cl.equals(UDFTrim.class)) {
    return getUnaryStringExpression("StringTrim","String",childExpr);
  }
 else   if (cl.equals(UDFSin.class)) {
    return getUnaryFunctionExpression("FuncSin","Double",childExpr,GENERATED_EXPR_PACKAGE);
  }
 else   if (cl.equals(UDFCos.class)) {
    return getUnaryFunctionExpression("FuncCos","Double",childExpr,GENERATED_EXPR_PACKAGE);
  }
 else   if (cl.equals(UDFTan.class)) {
    return getUnaryFunctionExpression("FuncTan","Double",childExpr,GENERATED_EXPR_PACKAGE);
  }
 else   if (cl.equals(UDFAsin.class)) {
    return getUnaryFunctionExpression("FuncASin","Double",childExpr,GENERATED_EXPR_PACKAGE);
  }
 else   if (cl.equals(UDFAcos.class)) {
    return getUnaryFunctionExpression("FuncACos","Double",childExpr,GENERATED_EXPR_PACKAGE);
  }
 else   if (cl.equals(UDFAtan.class)) {
    return getUnaryFunctionExpression("FuncATan","Double",childExpr,GENERATED_EXPR_PACKAGE);
  }
 else   if (cl.equals(UDFFloor.class)) {
    return getUnaryFunctionExpression("FuncFloor","Long",childExpr,GENERATED_EXPR_PACKAGE);
  }
 else   if (cl.equals(UDFCeil.class)) {
    return getUnaryFunctionExpression("FuncCeil","Long",childExpr,GENERATED_EXPR_PACKAGE);
  }
 else   if (cl.equals(UDFDegrees.class)) {
    return getUnaryFunctionExpression("FuncDegrees","Double",childExpr,GENERATED_EXPR_PACKAGE);
  }
 else   if (cl.equals(UDFRadians.class)) {
    return getUnaryFunctionExpression("FuncRadians","Double",childExpr,GENERATED_EXPR_PACKAGE);
  }
 else   if (cl.equals(UDFLn.class)) {
    return getUnaryFunctionExpression("FuncLn","Double",childExpr,GENERATED_EXPR_PACKAGE);
  }
 else   if (cl.equals(UDFLog2.class)) {
    return getUnaryFunctionExpression("FuncLog2","Double",childExpr,GENERATED_EXPR_PACKAGE);
  }
 else   if (cl.equals(UDFLog10.class)) {
    return getUnaryFunctionExpression("FuncLog10","Double",childExpr,GENERATED_EXPR_PACKAGE);
  }
 else   if (cl.equals(UDFSign.class)) {
    return getUnaryFunctionExpression("FuncSign","Double",childExpr,GENERATED_EXPR_PACKAGE);
  }
 else   if (cl.equals(UDFSqrt.class)) {
    return getUnaryFunctionExpression("FuncSqrt","Double",childExpr,GENERATED_EXPR_PACKAGE);
  }
 else   if (cl.equals(UDFExp.class)) {
    return getUnaryFunctionExpression("FuncExp","Double",childExpr,GENERATED_EXPR_PACKAGE);
  }
 else   if (cl.equals(UDFLog.class)) {
    return getLogWithBaseExpression(childExpr);
  }
 else   if (cl.equals(UDFPower.class)) {
    return getPowerExpression(childExpr);
  }
 else   if (cl.equals(UDFRound.class)) {
    return getRoundExpression(childExpr);
  }
 else   if (cl.equals(UDFRand.class)) {
    return getRandExpression(childExpr);
  }
 else   if (cl.equals(UDFBin.class)) {
    return getUnaryStringExpression("FuncBin","String",childExpr);
  }
  throw new HiveException("Udf: " + udf.getClass().getSimpleName() + ", is not supported");
}
