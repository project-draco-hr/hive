{
  int numChildren=childExpr == null ? 0 : childExpr.size();
  VectorExpression.Type[] inputTypes=new VectorExpression.Type[numChildren];
  List<VectorExpression> children=new ArrayList<VectorExpression>();
  Object[] arguments=new Object[numChildren];
  try {
    determineChildrenVectorExprAndArguments(vectorClass,childExpr,numChildren,childrenMode,inputTypes,children,arguments);
    VectorExpression vectorExpression=instantiateExpression(vectorClass,returnType,arguments);
    vectorExpression.setInputTypes(inputTypes);
    if ((vectorExpression != null) && !children.isEmpty()) {
      vectorExpression.setChildExpressions(children.toArray(new VectorExpression[0]));
    }
    return vectorExpression;
  }
 catch (  Exception ex) {
    throw new HiveException(ex);
  }
 finally {
    for (    VectorExpression ve : children) {
      ocm.freeOutputColumn(ve.getOutputColumn());
    }
  }
}
