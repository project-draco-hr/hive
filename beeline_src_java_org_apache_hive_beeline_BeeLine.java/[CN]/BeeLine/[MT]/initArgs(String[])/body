{
  List<String> commands=Collections.emptyList();
  CommandLine cl;
  BeelineParser beelineParser;
  try {
    beelineParser=new BeelineParser();
    cl=beelineParser.parse(options,args);
  }
 catch (  ParseException e1) {
    output(e1.getMessage());
    usage();
    return -1;
  }
  String driver=null, user=null, pass=null, url=null;
  String auth=null;
  if (cl.hasOption("help")) {
    usage();
    getOpts().setHelpAsked(true);
    return 0;
  }
  Properties hiveVars=cl.getOptionProperties("hivevar");
  for (  String key : hiveVars.stringPropertyNames()) {
    getOpts().getHiveVariables().put(key,hiveVars.getProperty(key));
  }
  Properties hiveConfs=cl.getOptionProperties("hiveconf");
  for (  String key : hiveConfs.stringPropertyNames()) {
    setHiveConfVar(key,hiveConfs.getProperty(key));
  }
  driver=cl.getOptionValue("d");
  auth=cl.getOptionValue("a");
  user=cl.getOptionValue("n");
  getOpts().setAuthType(auth);
  if (cl.hasOption("w")) {
    pass=obtainPasswordFromFile(cl.getOptionValue("w"));
  }
 else {
    pass=cl.getOptionValue("p");
  }
  url=cl.getOptionValue("u");
  if ((url == null) && cl.hasOption("reconnect")) {
    url=getOpts().getLastConnectedUrl();
  }
  getOpts().setInitFiles(cl.getOptionValues("i"));
  getOpts().setScriptFile(cl.getOptionValue("f"));
  if (cl.getOptionValues('e') != null) {
    commands=Arrays.asList(cl.getOptionValues('e'));
  }
  if (url != null) {
    if (user == null) {
      user=Utils.parsePropertyFromUrl(url,JdbcConnectionParams.AUTH_USER);
    }
    if (pass == null) {
      pass=Utils.parsePropertyFromUrl(url,JdbcConnectionParams.AUTH_PASSWD);
    }
    String com=constructCmd(url,user,pass,driver,false);
    String comForDebug=constructCmd(url,user,pass,driver,true);
    debug("issuing: " + comForDebug);
    dispatch(com);
  }
  String propertyFile=cl.getOptionValue("property-file");
  if (propertyFile != null) {
    try {
      this.consoleReader=new ConsoleReader();
    }
 catch (    IOException e) {
      handleException(e);
    }
    if (!dispatch("!properties " + propertyFile)) {
      exit=true;
      return 1;
    }
  }
  int code=0;
  if (!commands.isEmpty()) {
    for (Iterator<String> i=commands.iterator(); i.hasNext(); ) {
      String command=i.next().toString();
      debug(loc("executing-command",command));
      if (!dispatch(command)) {
        code++;
      }
    }
    exit=true;
  }
  return code;
}
