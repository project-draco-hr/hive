{
  try {
    VectorizedRowBatch batch=(VectorizedRowBatch)row;
    alias=(byte)tag;
    if (needCommonSetup) {
      commonSetup(batch);
      keyVectorSerializeWrite=new VectorSerializeRow(new BinarySortableSerializeWrite(bigTableKeyColumnMap.length));
      keyVectorSerializeWrite.init(bigTableKeyTypeNames,bigTableKeyColumnMap);
      currentKeyOutput=new Output();
      saveKeyOutput=new Output();
      needCommonSetup=false;
    }
    if (needHashTableSetup) {
      hashMap=(VectorMapJoinBytesHashMap)vectorMapJoinHashTable;
      needHashTableSetup=false;
    }
    batchCounter++;
    final int inputLogicalSize=batch.size;
    if (inputLogicalSize == 0) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(CLASS_NAME + " batch #" + batchCounter+ " empty");
      }
      return;
    }
    outerPerBatchSetup(batch);
    boolean inputSelectedInUse=batch.selectedInUse;
    if (inputSelectedInUse) {
      System.arraycopy(batch.selected,0,inputSelected,0,inputLogicalSize);
    }
    boolean someRowsFilteredOut=false;
    if (bigTableFilterExpressions.length > 0) {
      for (      VectorExpression ve : bigTableFilterExpressions) {
        ve.evaluate(batch);
      }
      someRowsFilteredOut=(batch.size != inputLogicalSize);
      if (LOG.isDebugEnabled()) {
        if (batch.selectedInUse) {
          if (inputSelectedInUse) {
            LOG.debug(CLASS_NAME + " inputSelected " + intArrayToRangesString(inputSelected,inputLogicalSize)+ " filtered batch.selected "+ intArrayToRangesString(batch.selected,batch.size));
          }
 else {
            LOG.debug(CLASS_NAME + " inputLogicalSize " + inputLogicalSize+ " filtered batch.selected "+ intArrayToRangesString(batch.selected,batch.size));
          }
        }
      }
    }
    if (bigTableKeyExpressions != null) {
      for (      VectorExpression ve : bigTableKeyExpressions) {
        ve.evaluate(batch);
      }
    }
    boolean allKeyInputColumnsRepeating;
    boolean someKeyInputColumnIsNull=false;
    if (bigTableKeyColumnMap.length == 0) {
      allKeyInputColumnsRepeating=false;
    }
 else {
      allKeyInputColumnsRepeating=true;
      for (int i=0; i < bigTableKeyColumnMap.length; i++) {
        ColumnVector colVector=batch.cols[bigTableKeyColumnMap[i]];
        if (!colVector.isRepeating) {
          allKeyInputColumnsRepeating=false;
          break;
        }
        if (!colVector.noNulls && colVector.isNull[0]) {
          someKeyInputColumnIsNull=true;
        }
      }
    }
    if (allKeyInputColumnsRepeating) {
      JoinUtil.JoinResult joinResult;
      if (batch.size == 0) {
        joinResult=JoinUtil.JoinResult.NOMATCH;
      }
 else       if (someKeyInputColumnIsNull) {
        joinResult=JoinUtil.JoinResult.NOMATCH;
      }
 else {
        keyVectorSerializeWrite.setOutput(currentKeyOutput);
        keyVectorSerializeWrite.serializeWrite(batch,0);
        byte[] keyBytes=currentKeyOutput.getData();
        int keyLength=currentKeyOutput.getLength();
        joinResult=hashMap.lookup(keyBytes,0,keyLength,hashMapResults[0]);
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug(CLASS_NAME + " batch #" + batchCounter+ " repeated joinResult "+ joinResult.name());
      }
      finishOuterRepeated(batch,joinResult,hashMapResults[0],someRowsFilteredOut,inputSelectedInUse,inputLogicalSize);
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug(CLASS_NAME + " batch #" + batchCounter+ " non-repeated");
      }
      int selected[]=batch.selected;
      boolean selectedInUse=batch.selectedInUse;
      int hashMapResultCount=0;
      int allMatchCount=0;
      int equalKeySeriesCount=0;
      int spillCount=0;
      boolean atLeastOneNonMatch=someRowsFilteredOut;
      Output temp;
      boolean haveSaveKey=false;
      JoinUtil.JoinResult saveJoinResult=JoinUtil.JoinResult.NOMATCH;
      for (int logical=0; logical < batch.size; logical++) {
        int batchIndex=(selectedInUse ? selected[logical] : logical);
        keyVectorSerializeWrite.setOutput(currentKeyOutput);
        keyVectorSerializeWrite.serializeWrite(batch,batchIndex);
        if (keyVectorSerializeWrite.getHasAnyNulls()) {
          atLeastOneNonMatch=true;
        }
 else {
          if (!haveSaveKey || !saveKeyOutput.arraysEquals(currentKeyOutput)) {
            if (haveSaveKey) {
switch (saveJoinResult) {
case MATCH:
                hashMapResultCount++;
              equalKeySeriesCount++;
            break;
case SPILL:
          hashMapResultCount++;
        break;
case NOMATCH:
      break;
  }
}
haveSaveKey=true;
temp=saveKeyOutput;
saveKeyOutput=currentKeyOutput;
currentKeyOutput=temp;
byte[] keyBytes=saveKeyOutput.getData();
int keyLength=saveKeyOutput.getLength();
saveJoinResult=hashMap.lookup(keyBytes,0,keyLength,hashMapResults[hashMapResultCount]);
switch (saveJoinResult) {
case MATCH:
  equalKeySeriesHashMapResultIndices[equalKeySeriesCount]=hashMapResultCount;
equalKeySeriesAllMatchIndices[equalKeySeriesCount]=allMatchCount;
equalKeySeriesIsSingleValue[equalKeySeriesCount]=hashMapResults[hashMapResultCount].isSingleRow();
equalKeySeriesDuplicateCounts[equalKeySeriesCount]=1;
allMatchs[allMatchCount++]=batchIndex;
break;
case SPILL:
spills[spillCount]=batchIndex;
spillHashMapResultIndices[spillCount]=hashMapResultCount;
spillCount++;
break;
case NOMATCH:
atLeastOneNonMatch=true;
break;
}
}
 else {
switch (saveJoinResult) {
case MATCH:
equalKeySeriesDuplicateCounts[equalKeySeriesCount]++;
allMatchs[allMatchCount++]=batchIndex;
break;
case SPILL:
spills[spillCount]=batchIndex;
spillHashMapResultIndices[spillCount]=hashMapResultCount;
spillCount++;
break;
case NOMATCH:
break;
}
}
}
}
if (haveSaveKey) {
switch (saveJoinResult) {
case MATCH:
hashMapResultCount++;
equalKeySeriesCount++;
break;
case SPILL:
hashMapResultCount++;
break;
case NOMATCH:
break;
}
}
if (LOG.isDebugEnabled()) {
LOG.debug(CLASS_NAME + " batch #" + batchCounter+ " allMatchs "+ intArrayToRangesString(allMatchs,allMatchCount)+ " equalKeySeriesHashMapResultIndices "+ intArrayToRangesString(equalKeySeriesHashMapResultIndices,equalKeySeriesCount)+ " equalKeySeriesAllMatchIndices "+ intArrayToRangesString(equalKeySeriesAllMatchIndices,equalKeySeriesCount)+ " equalKeySeriesIsSingleValue "+ Arrays.toString(Arrays.copyOfRange(equalKeySeriesIsSingleValue,0,equalKeySeriesCount))+ " equalKeySeriesDuplicateCounts "+ Arrays.toString(Arrays.copyOfRange(equalKeySeriesDuplicateCounts,0,equalKeySeriesCount))+ " atLeastOneNonMatch "+ atLeastOneNonMatch+ " inputSelectedInUse "+ inputSelectedInUse+ " inputLogicalSize "+ inputLogicalSize+ " spills "+ intArrayToRangesString(spills,spillCount)+ " spillHashMapResultIndices "+ intArrayToRangesString(spillHashMapResultIndices,spillCount)+ " hashMapResults "+ Arrays.toString(Arrays.copyOfRange(hashMapResults,0,hashMapResultCount)));
}
finishOuter(batch,allMatchCount,equalKeySeriesCount,atLeastOneNonMatch,inputSelectedInUse,inputLogicalSize,spillCount,hashMapResultCount);
}
if (batch.size > 0) {
forwardBigTableBatch(batch);
}
}
 catch (IOException e) {
throw new HiveException(e);
}
catch (Exception e) {
throw new HiveException(e);
}
}
