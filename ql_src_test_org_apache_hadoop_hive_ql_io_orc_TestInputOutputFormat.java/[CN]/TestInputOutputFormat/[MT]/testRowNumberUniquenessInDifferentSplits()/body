{
  Properties properties=new Properties();
  properties.setProperty("columns","x,y");
  properties.setProperty("columns.types","int:int");
  StructObjectInspector inspector;
synchronized (TestOrcFile.class) {
    inspector=(StructObjectInspector)ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,ObjectInspectorFactory.ObjectInspectorOptions.JAVA);
  }
  long oldDefaultStripeSize=conf.getLong(HiveConf.ConfVars.HIVE_ORC_DEFAULT_STRIPE_SIZE.varname,-1L);
  long oldMaxSplitSize=conf.getLong(HiveConf.ConfVars.MAPREDMAXSPLITSIZE.varname,-1L);
  long newStripeSize=10000L;
  long newMaxSplitSize=100L;
  conf.setLong(HiveConf.ConfVars.HIVE_ORC_DEFAULT_STRIPE_SIZE.varname,newStripeSize);
  conf.setLong(HiveConf.ConfVars.MAPREDMAXSPLITSIZE.varname,newMaxSplitSize);
  SerDe serde=new OrcSerde();
  HiveOutputFormat<?,?> outFormat=new OrcOutputFormat();
  org.apache.hadoop.hive.ql.exec.FileSinkOperator.RecordWriter writer=outFormat.getHiveRecordWriter(conf,testFilePath,MyRow.class,true,properties,Reporter.NULL);
  for (int i=0; i < newStripeSize * 10; ++i) {
    writer.write(serde.serialize(new MyRow(i,i + 1),inspector));
  }
  writer.close(true);
  serde=new OrcSerde();
  SerDeUtils.initializeSerDe(serde,conf,properties,null);
  assertEquals(OrcSerde.OrcSerdeRow.class,serde.getSerializedClass());
  inspector=(StructObjectInspector)serde.getObjectInspector();
  assertEquals("struct<x:int,y:int>",inspector.getTypeName());
  InputFormat<?,?> in=new OrcInputFormat();
  FileInputFormat.setInputPaths(conf,testFilePath.toString());
  int numExpectedSplits=20;
  InputSplit[] splits=in.getSplits(conf,numExpectedSplits);
  assertEquals(numExpectedSplits,splits.length);
  for (int i=0; i < numExpectedSplits; ++i) {
    OrcSplit split=(OrcSplit)splits[i];
    Reader.Options orcReaderOptions=new Reader.Options();
    orcReaderOptions.range(split.getStart(),split.getLength());
    OrcFile.ReaderOptions qlReaderOptions=OrcFile.readerOptions(conf).maxLength(split.getFileLength());
    Reader reader=OrcFile.createReader(split.getPath(),qlReaderOptions);
    RecordReader recordReader=reader.rowsOptions(orcReaderOptions);
    for (int j=0; recordReader.hasNext(); j++) {
      long rowNum=(i * 5000) + j;
      long rowNumActual=recordReader.getRowNumber();
      assertEquals("rowNum=" + rowNum,rowNum,rowNumActual);
      Object row=recordReader.next(null);
    }
    recordReader.close();
  }
  if (oldDefaultStripeSize != -1L) {
    conf.setLong(HiveConf.ConfVars.HIVE_ORC_DEFAULT_STRIPE_SIZE.varname,oldDefaultStripeSize);
  }
 else {
    conf.unset(HiveConf.ConfVars.HIVE_ORC_DEFAULT_STRIPE_SIZE.varname);
  }
  if (oldMaxSplitSize != -1L) {
    conf.setLong(HiveConf.ConfVars.MAPREDMAXSPLITSIZE.varname,oldMaxSplitSize);
  }
 else {
    conf.unset(HiveConf.ConfVars.MAPREDMAXSPLITSIZE.varname);
  }
}
