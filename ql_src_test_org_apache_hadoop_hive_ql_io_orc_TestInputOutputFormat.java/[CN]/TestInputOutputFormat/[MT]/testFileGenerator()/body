{
  TestContext context=new TestContext(conf);
  MockFileSystem fs=new MockFileSystem(conf,new MockFile("mock:/a/b/part-00",1000,new byte[0]),new MockFile("mock:/a/b/part-01",1000,new byte[0]),new MockFile("mock:/a/b/_part-02",1000,new byte[0]),new MockFile("mock:/a/b/.part-03",1000,new byte[0]),new MockFile("mock:/a/b/part-04",1000,new byte[0]));
  OrcInputFormat.FileGenerator gen=new OrcInputFormat.FileGenerator(context,fs,new MockPath(fs,"mock:/a/b"),false);
  gen.run();
  if (context.getErrors().size() > 0) {
    for (    Throwable th : context.getErrors()) {
      System.out.println(StringUtils.stringifyException(th));
    }
    throw new IOException("Errors during file generation");
  }
  assertEquals(-1,context.getSchedulers());
  assertEquals(3,context.queue.size());
  assertEquals(new Path("mock:/a/b/part-00"),((OrcInputFormat.SplitGenerator)context.queue.get(0)).getPath());
  assertEquals(new Path("mock:/a/b/part-01"),((OrcInputFormat.SplitGenerator)context.queue.get(1)).getPath());
  assertEquals(new Path("mock:/a/b/part-04"),((OrcInputFormat.SplitGenerator)context.queue.get(2)).getPath());
}
