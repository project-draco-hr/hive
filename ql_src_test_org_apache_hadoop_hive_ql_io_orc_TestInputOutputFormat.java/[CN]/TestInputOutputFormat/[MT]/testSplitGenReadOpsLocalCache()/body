{
  MockFileSystem fs=new MockFileSystem(conf);
  MockPath mockPath=new MockPath(fs,"mock:///mocktbl");
  conf.set("hive.orc.cache.stripe.details.size","-1");
  conf.set("mapred.input.dir",mockPath.toString());
  conf.set("fs.defaultFS","mock:///");
  conf.set("fs.mock.impl",MockFileSystem.class.getName());
  StructObjectInspector inspector;
synchronized (TestOrcFile.class) {
    inspector=(StructObjectInspector)ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,ObjectInspectorFactory.ObjectInspectorOptions.JAVA);
  }
  Writer writer=OrcFile.createWriter(new Path(mockPath + "/0_0"),OrcFile.writerOptions(conf).blockPadding(false).bufferSize(1024).inspector(inspector));
  for (int i=0; i < 10; ++i) {
    writer.addRow(new MyRow(i,2 * i));
  }
  writer.close();
  writer=OrcFile.createWriter(new Path(mockPath + "/0_1"),OrcFile.writerOptions(conf).blockPadding(false).bufferSize(1024).inspector(inspector));
  for (int i=0; i < 10; ++i) {
    writer.addRow(new MyRow(i,2 * i));
  }
  writer.close();
  int readOpsBefore=-1;
  for (  FileSystem.Statistics statistics : FileSystem.getAllStatistics()) {
    if (statistics.getScheme().equalsIgnoreCase("mock")) {
      readOpsBefore=statistics.getReadOps();
    }
  }
  assertTrue("MockFS has stats. Read ops not expected to be -1",readOpsBefore != -1);
  OrcInputFormat orcInputFormat=new OrcInputFormat();
  InputSplit[] splits=orcInputFormat.getSplits(conf,2);
  assertEquals(2,splits.length);
  int readOpsDelta=-1;
  for (  FileSystem.Statistics statistics : FileSystem.getAllStatistics()) {
    if (statistics.getScheme().equalsIgnoreCase("mock")) {
      readOpsDelta=statistics.getReadOps() - readOpsBefore;
    }
  }
  assertEquals(3,readOpsDelta);
  conf.set(HiveConf.ConfVars.HIVE_ORC_SPLIT_STRATEGY.varname,"BI");
  for (  FileSystem.Statistics statistics : FileSystem.getAllStatistics()) {
    if (statistics.getScheme().equalsIgnoreCase("mock")) {
      readOpsBefore=statistics.getReadOps();
    }
  }
  orcInputFormat=new OrcInputFormat();
  splits=orcInputFormat.getSplits(conf,2);
  assertEquals(2,splits.length);
  for (  FileSystem.Statistics statistics : FileSystem.getAllStatistics()) {
    if (statistics.getScheme().equalsIgnoreCase("mock")) {
      readOpsDelta=statistics.getReadOps() - readOpsBefore;
    }
  }
  assertEquals(1,readOpsDelta);
  conf.set("hive.orc.cache.stripe.details.size","100");
  conf.set(HiveConf.ConfVars.HIVE_ORC_SPLIT_STRATEGY.varname,"HYBRID");
  for (  FileSystem.Statistics statistics : FileSystem.getAllStatistics()) {
    if (statistics.getScheme().equalsIgnoreCase("mock")) {
      readOpsBefore=statistics.getReadOps();
    }
  }
  orcInputFormat=new OrcInputFormat();
  splits=orcInputFormat.getSplits(conf,2);
  assertEquals(2,splits.length);
  for (  FileSystem.Statistics statistics : FileSystem.getAllStatistics()) {
    if (statistics.getScheme().equalsIgnoreCase("mock")) {
      readOpsDelta=statistics.getReadOps() - readOpsBefore;
    }
  }
  assertEquals(3,readOpsDelta);
  for (  FileSystem.Statistics statistics : FileSystem.getAllStatistics()) {
    if (statistics.getScheme().equalsIgnoreCase("mock")) {
      readOpsBefore=statistics.getReadOps();
    }
  }
  orcInputFormat=new OrcInputFormat();
  splits=orcInputFormat.getSplits(conf,2);
  assertEquals(2,splits.length);
  for (  FileSystem.Statistics statistics : FileSystem.getAllStatistics()) {
    if (statistics.getScheme().equalsIgnoreCase("mock")) {
      readOpsDelta=statistics.getReadOps() - readOpsBefore;
    }
  }
  assertEquals(1,readOpsDelta);
  conf.set("fs.defaultFS","file:///");
}
