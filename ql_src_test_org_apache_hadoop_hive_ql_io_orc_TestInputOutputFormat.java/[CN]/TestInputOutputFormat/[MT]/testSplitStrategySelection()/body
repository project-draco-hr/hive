{
  conf.set("mapreduce.input.fileinputformat.split.maxsize","500");
  conf.setLong(HiveConf.ConfVars.HIVE_ORC_CACHE_STRIPE_DETAILS_SIZE.varname,100);
  final int[] counts={1,10,100,256};
  final int[] sizes={100,1000};
  final int[] numSplits={1,9,10,11,99,111};
  final String[] strategyResults=new String[]{"ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","BISplitStrategy","BISplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","BISplitStrategy","BISplitStrategy","BISplitStrategy","BISplitStrategy","BISplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","BISplitStrategy","BISplitStrategy","BISplitStrategy","BISplitStrategy","BISplitStrategy","BISplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy","ETLSplitStrategy"};
  int k=0;
  for (  int c : counts) {
    for (    int s : sizes) {
      final FileSystem fs=generateMockFiles(c,s);
      for (      int n : numSplits) {
        final OrcInputFormat.Context context=new OrcInputFormat.Context(conf,n);
        OrcInputFormat.FileGenerator gen=new OrcInputFormat.FileGenerator(context,fs,new MockPath(fs,"mock:/a/b"));
        final SplitStrategy splitStrategy=gen.call();
        assertTrue(String.format("Split strategy for %d files x %d size for %d splits",c,s,n),splitStrategy.getClass().getSimpleName().equals(strategyResults[k++]));
      }
    }
  }
}
