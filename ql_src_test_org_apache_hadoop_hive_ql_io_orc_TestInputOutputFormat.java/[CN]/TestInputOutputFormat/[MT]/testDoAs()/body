{
  conf.setInt(ConfVars.HIVE_ORC_COMPUTE_SPLITS_NUM_THREADS.varname,1);
  conf.set(ConfVars.HIVE_ORC_SPLIT_STRATEGY.varname,"ETL");
  conf.setBoolean(ConfVars.HIVE_IN_TEST.varname,true);
  conf.setClass("fs.mock.impl",MockFileSystem.class,FileSystem.class);
  String badUser=UserGroupInformation.getCurrentUser().getShortUserName() + "-foo";
  MockFileSystem.setBlockedUgi(badUser);
  MockFileSystem.clearGlobalFiles();
  OrcInputFormat.Context.resetThreadPool();
  try {
    MockFileSystem.addGlobalFile(new MockFile("mock:/ugi/1/file",10000,createMockOrcFile(197,300,600),new MockBlock("host1-1","host1-2","host1-3")));
    MockFileSystem.addGlobalFile(new MockFile("mock:/ugi/2/file",10000,createMockOrcFile(197,300,600),new MockBlock("host1-1","host1-2","host1-3")));
    FileInputFormat.setInputPaths(conf,"mock:/ugi/1");
    UserGroupInformation ugi=UserGroupInformation.createUserForTesting(badUser,new String[0]);
    assertEquals(0,OrcInputFormat.Context.getCurrentThreadPoolSize());
    try {
      ugi.doAs(new PrivilegedExceptionAction<Void>(){
        @Override public Void run() throws Exception {
          OrcInputFormat.generateSplitsInfo(conf,-1);
          return null;
        }
      }
);
      fail("Didn't throw");
    }
 catch (    Exception ex) {
      Throwable cause=ex;
      boolean found=false;
      while (cause != null) {
        if (cause instanceof MockFileSystem.MockAccessDenied) {
          found=true;
          break;
        }
        cause=cause.getCause();
      }
      if (!found)       throw ex;
    }
    assertEquals(1,OrcInputFormat.Context.getCurrentThreadPoolSize());
    FileInputFormat.setInputPaths(conf,"mock:/ugi/2");
    List<OrcSplit> splits=OrcInputFormat.generateSplitsInfo(conf,-1);
    assertEquals(1,splits.size());
  }
  finally {
    MockFileSystem.clearGlobalFiles();
  }
}
