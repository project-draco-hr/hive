{
  conf.set("bucket_count","2");
  conf.set(hive_metastoreConstants.TABLE_IS_TRANSACTIONAL,"true");
  conf.set(hive_metastoreConstants.TABLE_TRANSACTIONAL_PROPERTIES,"default");
  OrcInputFormat.Context context=new OrcInputFormat.Context(conf);
  MockFileSystem fs=new MockFileSystem(conf,new MockFile("mock:/a/b/000000_0",1000,new byte[1],new MockBlock("host1")),new MockFile("mock:/a/b/000000_1",1000,new byte[1],new MockBlock("host1")));
  OrcInputFormat.FileGenerator gen=new OrcInputFormat.FileGenerator(context,fs,new MockPath(fs,"mock:/a"),false,null);
  List<OrcInputFormat.SplitStrategy<?>> splitStrategies=createSplitStrategies(context,gen);
  assertEquals(1,splitStrategies.size());
  assertEquals(true,splitStrategies.get(0) instanceof OrcInputFormat.ACIDSplitStrategy);
  List<OrcSplit> splits=((OrcInputFormat.ACIDSplitStrategy)splitStrategies.get(0)).getSplits();
  assertEquals(2,splits.size());
  assertEquals("mock:/a/b/000000_0",splits.get(0).getPath().toUri().toString());
  assertEquals("mock:/a/b/000000_1",splits.get(1).getPath().toUri().toString());
  assertTrue(splits.get(0).isOriginal());
  assertTrue(splits.get(1).isOriginal());
  fs=new MockFileSystem(conf,new MockFile("mock:/a/b/000000_0",1000,new byte[1],new MockBlock("host1")),new MockFile("mock:/a/b/000000_1",1000,new byte[1],new MockBlock("host1")),new MockFile("mock:/a/base_0000001/bucket_00000",1000,new byte[1],new MockBlock("host1")),new MockFile("mock:/a/base_0000001/bucket_00001",1000,new byte[1],new MockBlock("host1")));
  gen=new OrcInputFormat.FileGenerator(context,fs,new MockPath(fs,"mock:/a"),false,null);
  splitStrategies=createSplitStrategies(context,gen);
  assertEquals(1,splitStrategies.size());
  assertEquals(true,splitStrategies.get(0) instanceof OrcInputFormat.ACIDSplitStrategy);
  splits=((OrcInputFormat.ACIDSplitStrategy)splitStrategies.get(0)).getSplits();
  assertEquals(2,splits.size());
  assertEquals("mock:/a/base_0000001/bucket_00000",splits.get(0).getPath().toUri().toString());
  assertEquals("mock:/a/base_0000001/bucket_00001",splits.get(1).getPath().toUri().toString());
  assertFalse(splits.get(0).isOriginal());
  assertFalse(splits.get(1).isOriginal());
  fs=new MockFileSystem(conf,new MockFile("mock:/a/b/000000_0",1000,new byte[1],new MockBlock("host1")),new MockFile("mock:/a/b/000000_1",1000,new byte[1],new MockBlock("host1")),new MockFile("mock:/a/delta_0000001_0000001_0000/bucket_00000",1000,new byte[1],new MockBlock("host1")),new MockFile("mock:/a/delta_0000001_0000001_0000/bucket_00001",1000,new byte[1],new MockBlock("host1")),new MockFile("mock:/a/delete_delta_0000001_0000001_0000/bucket_00000",1000,new byte[1],new MockBlock("host1")),new MockFile("mock:/a/delete_delta_0000001_0000001_0000/bucket_00001",1000,new byte[1],new MockBlock("host1")));
  gen=new OrcInputFormat.FileGenerator(context,fs,new MockPath(fs,"mock:/a"),false,null);
  splitStrategies=createSplitStrategies(context,gen);
  assertEquals(2,splitStrategies.size());
  assertEquals(true,splitStrategies.get(0) instanceof OrcInputFormat.ACIDSplitStrategy);
  splits=((OrcInputFormat.ACIDSplitStrategy)splitStrategies.get(0)).getSplits();
  assertEquals(2,splits.size());
  assertEquals("mock:/a/b/000000_0",splits.get(0).getPath().toUri().toString());
  assertEquals("mock:/a/b/000000_1",splits.get(1).getPath().toUri().toString());
  assertTrue(splits.get(0).isOriginal());
  assertTrue(splits.get(1).isOriginal());
  assertEquals(true,splitStrategies.get(1) instanceof OrcInputFormat.ACIDSplitStrategy);
  splits=((OrcInputFormat.ACIDSplitStrategy)splitStrategies.get(1)).getSplits();
  assertEquals(2,splits.size());
  assertEquals("mock:/a/delta_0000001_0000001_0000/bucket_00000",splits.get(0).getPath().toUri().toString());
  assertEquals("mock:/a/delta_0000001_0000001_0000/bucket_00001",splits.get(1).getPath().toUri().toString());
  assertFalse(splits.get(0).isOriginal());
  assertFalse(splits.get(1).isOriginal());
  fs=new MockFileSystem(conf,new MockFile("mock:/a/b/000000_0",1000,new byte[1],new MockBlock("host1")),new MockFile("mock:/a/delta_0000001_0000001_0000/bucket_00000",1000,new byte[1],new MockBlock("host1")),new MockFile("mock:/a/delete_delta_0000001_0000001_0000/bucket_00000",1000,new byte[1],new MockBlock("host1")),new MockFile("mock:/a/delete_delta_0000001_0000001_0000/bucket_00001",1000,new byte[1],new MockBlock("host1")));
  gen=new OrcInputFormat.FileGenerator(context,fs,new MockPath(fs,"mock:/a"),false,null);
  splitStrategies=createSplitStrategies(context,gen);
  assertEquals(2,splitStrategies.size());
  assertEquals(true,splitStrategies.get(0) instanceof OrcInputFormat.ACIDSplitStrategy);
  splits=((OrcInputFormat.ACIDSplitStrategy)splitStrategies.get(0)).getSplits();
  assertEquals(1,splits.size());
  assertEquals("mock:/a/b/000000_0",splits.get(0).getPath().toUri().toString());
  assertTrue(splits.get(0).isOriginal());
  assertEquals(true,splitStrategies.get(1) instanceof OrcInputFormat.ACIDSplitStrategy);
  splits=((OrcInputFormat.ACIDSplitStrategy)splitStrategies.get(1)).getSplits();
  assertEquals(1,splits.size());
  assertEquals("mock:/a/delta_0000001_0000001_0000/bucket_00000",splits.get(0).getPath().toUri().toString());
  assertFalse(splits.get(0).isOriginal());
  fs=new MockFileSystem(conf,new MockFile("mock:/a/b/000000_0",1000,new byte[1],new MockBlock("host1")),new MockFile("mock:/a/b/000000_1",1000,new byte[1],new MockBlock("host1")),new MockFile("mock:/a/base_0000001/bucket_00000",1000,new byte[1],new MockBlock("host1")),new MockFile("mock:/a/base_0000001/bucket_00001",1000,new byte[1],new MockBlock("host1")),new MockFile("mock:/a/delta_0000002_0000002_0000/bucket_00000",1000,new byte[1],new MockBlock("host1")),new MockFile("mock:/a/delta_0000002_0000002_0000/bucket_00001",1000,new byte[1],new MockBlock("host1")),new MockFile("mock:/a/delete_delta_0000002_0000002_0000/bucket_00000",1000,new byte[1],new MockBlock("host1")),new MockFile("mock:/a/delete_delta_0000002_0000002_0000/bucket_00001",1000,new byte[1],new MockBlock("host1")));
  gen=new OrcInputFormat.FileGenerator(context,fs,new MockPath(fs,"mock:/a"),false,null);
  splitStrategies=createSplitStrategies(context,gen);
  assertEquals(1,splitStrategies.size());
  assertEquals(true,splitStrategies.get(0) instanceof OrcInputFormat.ACIDSplitStrategy);
  splits=((OrcInputFormat.ACIDSplitStrategy)splitStrategies.get(0)).getSplits();
  assertEquals(4,splits.size());
  assertEquals("mock:/a/base_0000001/bucket_00000",splits.get(0).getPath().toUri().toString());
  assertEquals("mock:/a/base_0000001/bucket_00001",splits.get(1).getPath().toUri().toString());
  assertEquals("mock:/a/delta_0000002_0000002_0000/bucket_00000",splits.get(2).getPath().toUri().toString());
  assertEquals("mock:/a/delta_0000002_0000002_0000/bucket_00001",splits.get(3).getPath().toUri().toString());
  assertFalse(splits.get(0).isOriginal());
  assertFalse(splits.get(1).isOriginal());
  assertFalse(splits.get(2).isOriginal());
  assertFalse(splits.get(3).isOriginal());
}
