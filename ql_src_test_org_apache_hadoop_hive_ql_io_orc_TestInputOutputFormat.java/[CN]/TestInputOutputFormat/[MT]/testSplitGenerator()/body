{
  long[] stripeSizes=new long[]{197,300,600,200,200,100,100,100,100,100};
  MockFileSystem fs=new MockFileSystem(conf,new MockFile("mock:/a/file",500,createMockOrcFile(stripeSizes),new MockBlock("host1-1","host1-2","host1-3"),new MockBlock("host2-1","host0","host2-3"),new MockBlock("host0","host3-2","host3-3"),new MockBlock("host4-1","host4-2","host4-3"),new MockBlock("host5-1","host5-2","host5-3")));
  HiveConf.setLongVar(conf,HiveConf.ConfVars.MAPREDMAXSPLITSIZE,300);
  HiveConf.setLongVar(conf,HiveConf.ConfVars.MAPREDMINSPLITSIZE,200);
  OrcInputFormat.Context context=new OrcInputFormat.Context(conf);
  OrcInputFormat.SplitGenerator splitter=new OrcInputFormat.SplitGenerator(new OrcInputFormat.SplitInfo(context,fs,AcidUtils.createOriginalObj(null,fs.getFileStatus(new Path("/a/file"))),null,true,new ArrayList<AcidInputFormat.DeltaMetaData>(),true,null,null));
  List<OrcSplit> results=splitter.call();
  OrcSplit result=results.get(0);
  assertEquals(3,result.getStart());
  assertEquals(497,result.getLength());
  result=results.get(1);
  assertEquals(500,result.getStart());
  assertEquals(600,result.getLength());
  result=results.get(2);
  assertEquals(1100,result.getStart());
  assertEquals(400,result.getLength());
  result=results.get(3);
  assertEquals(1500,result.getStart());
  assertEquals(300,result.getLength());
  result=results.get(4);
  assertEquals(1800,result.getStart());
  assertEquals(200,result.getLength());
  HiveConf.setLongVar(conf,HiveConf.ConfVars.MAPREDMAXSPLITSIZE,0);
  HiveConf.setLongVar(conf,HiveConf.ConfVars.MAPREDMINSPLITSIZE,0);
  context=new OrcInputFormat.Context(conf);
  splitter=new OrcInputFormat.SplitGenerator(new OrcInputFormat.SplitInfo(context,fs,AcidUtils.createOriginalObj(null,fs.getFileStatus(new Path("/a/file"))),null,true,new ArrayList<AcidInputFormat.DeltaMetaData>(),true,null,null));
  results=splitter.call();
  for (int i=0; i < stripeSizes.length; ++i) {
    assertEquals("checking stripe " + i + " size",stripeSizes[i],results.get(i).getLength());
  }
}
