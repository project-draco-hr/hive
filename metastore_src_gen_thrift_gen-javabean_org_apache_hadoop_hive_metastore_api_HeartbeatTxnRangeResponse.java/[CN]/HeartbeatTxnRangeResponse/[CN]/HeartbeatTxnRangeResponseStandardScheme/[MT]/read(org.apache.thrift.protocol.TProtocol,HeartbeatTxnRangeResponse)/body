{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
{
          org.apache.thrift.protocol.TSet _set508=iprot.readSetBegin();
          struct.aborted=new HashSet<Long>(2 * _set508.size);
          long _elem509;
          for (int _i510=0; _i510 < _set508.size; ++_i510) {
            _elem509=iprot.readI64();
            struct.aborted.add(_elem509);
          }
          iprot.readSetEnd();
        }
        struct.setAbortedIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
{
      org.apache.thrift.protocol.TSet _set511=iprot.readSetBegin();
      struct.nosuch=new HashSet<Long>(2 * _set511.size);
      long _elem512;
      for (int _i513=0; _i513 < _set511.size; ++_i513) {
        _elem512=iprot.readI64();
        struct.nosuch.add(_elem512);
      }
      iprot.readSetEnd();
    }
    struct.setNosuchIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
