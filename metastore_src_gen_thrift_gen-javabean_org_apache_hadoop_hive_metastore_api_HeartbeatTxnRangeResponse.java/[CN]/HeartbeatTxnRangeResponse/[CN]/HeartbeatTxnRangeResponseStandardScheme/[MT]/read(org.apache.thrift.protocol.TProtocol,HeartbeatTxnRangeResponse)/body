{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
{
          org.apache.thrift.protocol.TSet _set418=iprot.readSetBegin();
          struct.aborted=new HashSet<Long>(2 * _set418.size);
          for (int _i419=0; _i419 < _set418.size; ++_i419) {
            long _elem420;
            _elem420=iprot.readI64();
            struct.aborted.add(_elem420);
          }
          iprot.readSetEnd();
        }
        struct.setAbortedIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
{
      org.apache.thrift.protocol.TSet _set421=iprot.readSetBegin();
      struct.nosuch=new HashSet<Long>(2 * _set421.size);
      for (int _i422=0; _i422 < _set421.size; ++_i422) {
        long _elem423;
        _elem423=iprot.readI64();
        struct.nosuch.add(_elem423);
      }
      iprot.readSetEnd();
    }
    struct.setNosuchIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
