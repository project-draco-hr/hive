{
  super.registerRunningTaskAttempt(containerId,taskSpec,additionalResources,credentials,credentialsChanged,priority);
  int dagId=taskSpec.getTaskAttemptID().getTaskID().getVertexID().getDAGId().getId();
  if (currentQueryIdentifierProto == null || (dagId != currentQueryIdentifierProto.getDagIdentifier())) {
    resetCurrentDag(dagId);
  }
  ContainerInfo containerInfo=getContainerInfo(containerId);
  String host;
  int port;
  if (containerInfo != null) {
synchronized (containerInfo) {
      host=containerInfo.host;
      port=containerInfo.port;
    }
  }
 else {
    throw new RuntimeException("ContainerInfo not found for container: " + containerId + ", while trying to launch task: "+ taskSpec.getTaskAttemptID());
  }
  LlapNodeId nodeId=LlapNodeId.getInstance(host,port);
  registerKnownNode(nodeId);
  entityTracker.registerTaskAttempt(containerId,taskSpec.getTaskAttemptID(),host,port);
  nodesForQuery.add(nodeId);
  sourceStateTracker.registerTaskForStateUpdates(host,port,taskSpec.getInputs());
  FragmentRuntimeInfo fragmentRuntimeInfo=sourceStateTracker.getFragmentRuntimeInfo(taskSpec.getVertexName(),taskSpec.getTaskAttemptID().getTaskID().getId(),priority);
  SubmitWorkRequestProto requestProto;
  try {
    requestProto=constructSubmitWorkRequest(containerId,taskSpec,fragmentRuntimeInfo);
  }
 catch (  IOException e) {
    throw new RuntimeException("Failed to construct request",e);
  }
  getContext().taskStartedRemotely(taskSpec.getTaskAttemptID(),containerId);
  communicator.sendSubmitWork(requestProto,host,port,new LlapProtocolClientProxy.ExecuteRequestCallback<SubmitWorkResponseProto>(){
    @Override public void setResponse(    SubmitWorkResponseProto response){
      if (response.hasSubmissionState()) {
        LlapDaemonProtocolProtos.SubmissionStateProto ss=response.getSubmissionState();
        if (ss.equals(LlapDaemonProtocolProtos.SubmissionStateProto.REJECTED)) {
          LOG.info("Unable to run task: " + taskSpec.getTaskAttemptID() + " on containerId: "+ containerId+ ", Service Busy");
          getContext().taskKilled(taskSpec.getTaskAttemptID(),TaskAttemptEndReason.EXECUTOR_BUSY,"Service Busy");
          return;
        }
      }
 else {
        throw new RuntimeException("SubmissionState in response is expected!");
      }
      LOG.info("Successfully launched task: " + taskSpec.getTaskAttemptID());
    }
    @Override public void indicateError(    Throwable t){
      if (t instanceof ServiceException) {
        ServiceException se=(ServiceException)t;
        t=se.getCause();
      }
      if (t instanceof RemoteException) {
        RemoteException re=(RemoteException)t;
        LOG.info("Failed to run task: " + taskSpec.getTaskAttemptID() + " on containerId: "+ containerId,t);
        getContext().taskFailed(taskSpec.getTaskAttemptID(),TaskAttemptEndReason.OTHER,t.toString());
      }
 else {
        if (t instanceof IOException) {
          LOG.info("Unable to run task: " + taskSpec.getTaskAttemptID() + " on containerId: "+ containerId+ ", Communication Error");
          getContext().taskKilled(taskSpec.getTaskAttemptID(),TaskAttemptEndReason.COMMUNICATION_ERROR,"Communication Error");
        }
 else {
          LOG.info("Failed to run task: " + taskSpec.getTaskAttemptID() + " on containerId: "+ containerId,t);
          getContext().taskFailed(taskSpec.getTaskAttemptID(),TaskAttemptEndReason.OTHER,t.getMessage());
        }
      }
    }
  }
);
}
