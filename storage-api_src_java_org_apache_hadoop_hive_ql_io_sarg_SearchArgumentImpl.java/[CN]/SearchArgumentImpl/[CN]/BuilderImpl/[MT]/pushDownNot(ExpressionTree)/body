{
  if (root.getOperator() == ExpressionTree.Operator.NOT) {
    ExpressionTree child=root.getChildren().get(0);
switch (child.getOperator()) {
case NOT:
      return pushDownNot(child.getChildren().get(0));
case CONSTANT:
    return new ExpressionTree(child.getConstant().not());
case AND:
  root=new ExpressionTree(ExpressionTree.Operator.OR);
for (ExpressionTree kid : child.getChildren()) {
  root.getChildren().add(pushDownNot(new ExpressionTree(ExpressionTree.Operator.NOT,kid)));
}
break;
case OR:
root=new ExpressionTree(ExpressionTree.Operator.AND);
for (ExpressionTree kid : child.getChildren()) {
root.getChildren().add(pushDownNot(new ExpressionTree(ExpressionTree.Operator.NOT,kid)));
}
break;
default :
break;
}
}
 else if (root.getChildren() != null) {
for (int i=0; i < root.getChildren().size(); ++i) {
root.getChildren().set(i,pushDownNot(root.getChildren().get(i)));
}
}
return root;
}
