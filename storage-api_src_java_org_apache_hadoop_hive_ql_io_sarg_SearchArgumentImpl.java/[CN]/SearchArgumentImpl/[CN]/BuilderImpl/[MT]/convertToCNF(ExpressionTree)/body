{
  if (root.getChildren() != null) {
    int size=root.getChildren().size();
    for (int i=0; i < size; ++i) {
      root.getChildren().set(i,convertToCNF(root.getChildren().get(i)));
    }
    if (root.getOperator() == ExpressionTree.Operator.OR) {
      List<ExpressionTree> nonAndList=new ArrayList<ExpressionTree>();
      List<ExpressionTree> andList=new ArrayList<ExpressionTree>();
      for (      ExpressionTree child : root.getChildren()) {
        if (child.getOperator() == ExpressionTree.Operator.AND) {
          andList.add(child);
        }
 else         if (child.getOperator() == ExpressionTree.Operator.OR) {
          for (          ExpressionTree grandkid : child.getChildren()) {
            nonAndList.add(grandkid);
          }
        }
 else {
          nonAndList.add(child);
        }
      }
      if (!andList.isEmpty()) {
        if (checkCombinationsThreshold(andList)) {
          root=new ExpressionTree(ExpressionTree.Operator.AND);
          generateAllCombinations(root.getChildren(),andList,nonAndList);
        }
 else {
          root=new ExpressionTree(TruthValue.YES_NO_NULL);
        }
      }
    }
  }
  return root;
}
