{
  Random r=new Random(1234);
  for (int i=0; i < TEST_COUNT; i++) {
    BigDecimal[] random1=randomEpochDayAndNanoOfDay(r);
    long epochDay1=random1[0].longValue();
    long nanoOfDay1=random1[1].longValue();
    PisaTimestamp pisa1=new PisaTimestamp(epochDay1,nanoOfDay1);
    BigDecimal big1=random1[2];
    BigDecimal[] random2=randomEpochDayAndNanoOfDay(r);
    long epochDay2=random2[0].longValue();
    long nanoOfDay2=random2[1].longValue();
    PisaTimestamp pisa2=new PisaTimestamp(epochDay2,nanoOfDay2);
    BigDecimal big2=random2[2];
    BigDecimal expectedBig;
    PisaTimestamp pisaResult=new PisaTimestamp();
    if (i % 2 == 0) {
      expectedBig=big1.add(big2);
      PisaTimestamp.add(pisa1,pisa2,pisaResult);
    }
 else {
      expectedBig=big1.add(big2.negate());
      PisaTimestamp.subtract(pisa1,pisa2,pisaResult);
    }
    BigDecimal resultBig=pisaTimestampToBig(pisaResult);
    assertEquals(expectedBig,resultBig);
  }
}
