{
  try {
    jc.setMonitorCb(new MonitorCallback(){
      @Override public void call(      JavaFutureAction<?> future,      SparkCounters sparkCounters){
        monitorJob(future,sparkCounters);
      }
    }
);
    T result=req.job.call(jc);
synchronized (completed) {
      while (completed.get() < jobs.size()) {
        LOG.debug("Client job {} finished, {} of {} Spark jobs finished.",req.id,completed.get(),jobs.size());
        completed.wait();
      }
    }
    if (sparkCounters != null) {
      sparkCounters.dumpAllCounters();
    }
    client.tell(new Protocol.JobResult(req.id,result,null,sparkCounters),actor);
  }
 catch (  Throwable t) {
    LOG.info("Failed to run job " + req.id,t);
    client.tell(new Protocol.JobResult(req.id,null,t,null),actor);
    throw new ExecutionException(t);
  }
 finally {
    jc.setMonitorCb(null);
    activeJobs.remove(req.id);
  }
  return null;
}
