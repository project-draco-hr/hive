{
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.apache.hadoop.hive.llap.daemon.rpc.LlapDaemonProtocolProtos.SubmitWorkRequestProto)) {
    return super.equals(obj);
  }
  org.apache.hadoop.hive.llap.daemon.rpc.LlapDaemonProtocolProtos.SubmitWorkRequestProto other=(org.apache.hadoop.hive.llap.daemon.rpc.LlapDaemonProtocolProtos.SubmitWorkRequestProto)obj;
  boolean result=true;
  result=result && (hasWorkSpec() == other.hasWorkSpec());
  if (hasWorkSpec()) {
    result=result && getWorkSpec().equals(other.getWorkSpec());
  }
  result=result && (hasWorkSpecSignature() == other.hasWorkSpecSignature());
  if (hasWorkSpecSignature()) {
    result=result && getWorkSpecSignature().equals(other.getWorkSpecSignature());
  }
  result=result && (hasFragmentNumber() == other.hasFragmentNumber());
  if (hasFragmentNumber()) {
    result=result && (getFragmentNumber() == other.getFragmentNumber());
  }
  result=result && (hasAttemptNumber() == other.hasAttemptNumber());
  if (hasAttemptNumber()) {
    result=result && (getAttemptNumber() == other.getAttemptNumber());
  }
  result=result && (hasContainerIdString() == other.hasContainerIdString());
  if (hasContainerIdString()) {
    result=result && getContainerIdString().equals(other.getContainerIdString());
  }
  result=result && (hasAmHost() == other.hasAmHost());
  if (hasAmHost()) {
    result=result && getAmHost().equals(other.getAmHost());
  }
  result=result && (hasAmPort() == other.hasAmPort());
  if (hasAmPort()) {
    result=result && (getAmPort() == other.getAmPort());
  }
  result=result && (hasCredentialsBinary() == other.hasCredentialsBinary());
  if (hasCredentialsBinary()) {
    result=result && getCredentialsBinary().equals(other.getCredentialsBinary());
  }
  result=result && (hasFragmentRuntimeInfo() == other.hasFragmentRuntimeInfo());
  if (hasFragmentRuntimeInfo()) {
    result=result && getFragmentRuntimeInfo().equals(other.getFragmentRuntimeInfo());
  }
  result=result && (hasInitialEventBytes() == other.hasInitialEventBytes());
  if (hasInitialEventBytes()) {
    result=result && getInitialEventBytes().equals(other.getInitialEventBytes());
  }
  result=result && (hasInitialEventSignature() == other.hasInitialEventSignature());
  if (hasInitialEventSignature()) {
    result=result && getInitialEventSignature().equals(other.getInitialEventSignature());
  }
  result=result && getUnknownFields().equals(other.getUnknownFields());
  return result;
}
