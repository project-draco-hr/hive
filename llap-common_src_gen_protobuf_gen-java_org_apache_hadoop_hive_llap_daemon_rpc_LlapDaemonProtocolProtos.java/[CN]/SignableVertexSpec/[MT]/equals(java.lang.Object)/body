{
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.apache.hadoop.hive.llap.daemon.rpc.LlapDaemonProtocolProtos.SignableVertexSpec)) {
    return super.equals(obj);
  }
  org.apache.hadoop.hive.llap.daemon.rpc.LlapDaemonProtocolProtos.SignableVertexSpec other=(org.apache.hadoop.hive.llap.daemon.rpc.LlapDaemonProtocolProtos.SignableVertexSpec)obj;
  boolean result=true;
  result=result && (hasUser() == other.hasUser());
  if (hasUser()) {
    result=result && getUser().equals(other.getUser());
  }
  result=result && (hasSignatureKeyId() == other.hasSignatureKeyId());
  if (hasSignatureKeyId()) {
    result=result && (getSignatureKeyId() == other.getSignatureKeyId());
  }
  result=result && (hasQueryIdentifier() == other.hasQueryIdentifier());
  if (hasQueryIdentifier()) {
    result=result && getQueryIdentifier().equals(other.getQueryIdentifier());
  }
  result=result && (hasHiveQueryId() == other.hasHiveQueryId());
  if (hasHiveQueryId()) {
    result=result && getHiveQueryId().equals(other.getHiveQueryId());
  }
  result=result && (hasDagName() == other.hasDagName());
  if (hasDagName()) {
    result=result && getDagName().equals(other.getDagName());
  }
  result=result && (hasVertexName() == other.hasVertexName());
  if (hasVertexName()) {
    result=result && getVertexName().equals(other.getVertexName());
  }
  result=result && (hasVertexIndex() == other.hasVertexIndex());
  if (hasVertexIndex()) {
    result=result && (getVertexIndex() == other.getVertexIndex());
  }
  result=result && (hasTokenIdentifier() == other.hasTokenIdentifier());
  if (hasTokenIdentifier()) {
    result=result && getTokenIdentifier().equals(other.getTokenIdentifier());
  }
  result=result && (hasProcessorDescriptor() == other.hasProcessorDescriptor());
  if (hasProcessorDescriptor()) {
    result=result && getProcessorDescriptor().equals(other.getProcessorDescriptor());
  }
  result=result && getInputSpecsList().equals(other.getInputSpecsList());
  result=result && getOutputSpecsList().equals(other.getOutputSpecsList());
  result=result && getGroupedInputSpecsList().equals(other.getGroupedInputSpecsList());
  result=result && (hasVertexParallelism() == other.hasVertexParallelism());
  if (hasVertexParallelism()) {
    result=result && (getVertexParallelism() == other.getVertexParallelism());
  }
  result=result && getUnknownFields().equals(other.getUnknownFields());
  return result;
}
