{
  if (!enabled) {
    return;
  }
  if (node.getOrigin() != null) {
    return;
  }
  int tokenStartIndex=node.getTokenStartIndex();
  int tokenStopIndex=node.getTokenStopIndex();
  if (tokenStopIndex < 0) {
    return;
  }
  Translation translation=new Translation();
  translation.tokenStopIndex=tokenStopIndex;
  translation.replacementText=replacementText;
  assert(tokenStopIndex >= tokenStartIndex);
  List<Integer> subsetEntries=new ArrayList<Integer>();
  for (  Map.Entry<Integer,Translation> existingEntry : translations.headMap(tokenStopIndex,true).entrySet()) {
    if (existingEntry.getValue().tokenStopIndex <= tokenStopIndex && existingEntry.getKey() >= tokenStartIndex) {
      assert(replacementText.contains(existingEntry.getValue().replacementText));
      subsetEntries.add(existingEntry.getKey());
    }
 else     if (existingEntry.getValue().tokenStopIndex >= tokenStopIndex && existingEntry.getKey() <= tokenStartIndex) {
      assert(existingEntry.getValue().replacementText.contains(replacementText));
      return;
    }
  }
  for (  Integer index : subsetEntries) {
    translations.remove(index);
  }
  translations.put(tokenStartIndex,translation);
}
