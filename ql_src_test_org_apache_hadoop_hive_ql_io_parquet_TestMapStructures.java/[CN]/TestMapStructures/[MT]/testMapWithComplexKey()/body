{
  Path test=writeDirect("MapWithComplexKey",Types.buildMessage().optionalGroup().as(MAP).repeatedGroup().requiredGroup().required(INT32).named("x").required(INT32).named("y").named("key").optional(DOUBLE).named("value").named("key_value").named("matrix").named("MapWithComplexKey"),new TestArrayCompatibility.DirectWriter(){
    @Override public void write(    RecordConsumer rc){
      rc.startMessage();
      rc.startField("matrix",0);
      rc.startGroup();
      rc.startField("key_value",0);
      rc.startGroup();
      rc.startField("key",0);
      rc.startGroup();
      rc.startField("x",0);
      rc.addInteger(7);
      rc.endField("x",0);
      rc.startField("y",1);
      rc.addInteger(22);
      rc.endField("y",1);
      rc.endGroup();
      rc.endField("key",0);
      rc.startField("value",1);
      rc.addDouble(3.14);
      rc.endField("value",1);
      rc.endGroup();
      rc.endField("key_value",0);
      rc.endGroup();
      rc.endField("matrix",0);
      rc.endMessage();
    }
  }
);
  ObjectArrayWritable expected=record(list(record(record(new IntWritable(7),new IntWritable(22)),new DoubleWritable(3.14))));
  List<ObjectArrayWritable> records=read(test);
  Assert.assertEquals("Should have only one record",1,records.size());
  assertEquals("Should match expected record",expected,records.get(0));
  deserialize(records.get(0),Arrays.asList("matrix"),Arrays.asList("map<struct<x:int,y:int>,bigint>"));
}
