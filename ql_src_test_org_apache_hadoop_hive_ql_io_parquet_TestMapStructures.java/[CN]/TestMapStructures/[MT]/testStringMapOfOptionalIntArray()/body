{
  Path test=writeDirect("StringMapOfOptionalIntArray",Types.buildMessage().optionalGroup().as(MAP).repeatedGroup().required(BINARY).as(UTF8).named("key").optionalGroup().as(LIST).repeatedGroup().optional(INT32).named("element").named("list").named("value").named("key_value").named("examples").named("StringMapOfOptionalIntArray"),new TestArrayCompatibility.DirectWriter(){
    @Override public void write(    RecordConsumer rc){
      rc.startMessage();
      rc.startField("examples",0);
      rc.startGroup();
      rc.startField("key_value",0);
      rc.startGroup();
      rc.startField("key",0);
      rc.addBinary(Binary.fromString("low"));
      rc.endField("key",0);
      rc.startField("value",1);
      rc.startGroup();
      rc.startField("list",0);
      rc.startGroup();
      rc.startField("element",0);
      rc.addInteger(34);
      rc.endField("element",0);
      rc.endGroup();
      rc.startGroup();
      rc.startField("element",0);
      rc.addInteger(35);
      rc.endField("element",0);
      rc.endGroup();
      rc.startGroup();
      rc.endGroup();
      rc.endField("list",0);
      rc.endGroup();
      rc.endField("value",1);
      rc.endGroup();
      rc.startGroup();
      rc.startField("key",0);
      rc.addBinary(Binary.fromString("high"));
      rc.endField("key",0);
      rc.startField("value",1);
      rc.startGroup();
      rc.startField("list",0);
      rc.startGroup();
      rc.startField("element",0);
      rc.addInteger(340);
      rc.endField("element",0);
      rc.endGroup();
      rc.startGroup();
      rc.startField("element",0);
      rc.addInteger(360);
      rc.endField("element",0);
      rc.endGroup();
      rc.endField("list",0);
      rc.endGroup();
      rc.endField("value",1);
      rc.endGroup();
      rc.endField("key_value",0);
      rc.endGroup();
      rc.endField("examples",0);
      rc.endMessage();
    }
  }
);
  ObjectArrayWritable expected=record(list(record(new Text("low"),list(new IntWritable(34),new IntWritable(35),null)),record(new Text("high"),list(new IntWritable(340),new IntWritable(360)))));
  List<ObjectArrayWritable> records=read(test);
  Assert.assertEquals("Should have only one record",1,records.size());
  assertEquals("Should match expected record",expected,records.get(0));
  deserialize(records.get(0),Arrays.asList("examples"),Arrays.asList("map<string,array<int>>"));
}
