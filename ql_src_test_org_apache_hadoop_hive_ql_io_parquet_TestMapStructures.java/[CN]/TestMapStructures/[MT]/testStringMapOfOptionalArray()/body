{
  Path test=writeDirect("StringMapOfOptionalArray",Types.buildMessage().optionalGroup().as(MAP).repeatedGroup().required(BINARY).as(UTF8).named("key").optionalGroup().as(LIST).repeatedGroup().optional(BINARY).as(UTF8).named("element").named("list").named("value").named("key_value").named("examples").named("StringMapOfOptionalArray"),new TestArrayCompatibility.DirectWriter(){
    @Override public void write(    RecordConsumer rc){
      rc.startMessage();
      rc.startField("examples",0);
      rc.startGroup();
      rc.startField("key_value",0);
      rc.startGroup();
      rc.startField("key",0);
      rc.addBinary(Binary.fromString("green"));
      rc.endField("key",0);
      rc.startField("value",1);
      rc.startGroup();
      rc.startField("list",0);
      rc.startGroup();
      rc.startField("element",0);
      rc.addBinary(Binary.fromString("lettuce"));
      rc.endField("element",0);
      rc.endGroup();
      rc.startGroup();
      rc.startField("element",0);
      rc.addBinary(Binary.fromString("kale"));
      rc.endField("element",0);
      rc.endGroup();
      rc.startGroup();
      rc.endGroup();
      rc.endField("list",0);
      rc.endGroup();
      rc.endField("value",1);
      rc.endGroup();
      rc.startGroup();
      rc.startField("key",0);
      rc.addBinary(Binary.fromString("brown"));
      rc.endField("key",0);
      rc.endGroup();
      rc.endField("key_value",0);
      rc.endGroup();
      rc.endField("examples",0);
      rc.endMessage();
    }
  }
);
  ArrayWritable expected=record(list(record(new Text("green"),list(new Text("lettuce"),new Text("kale"),null)),record(new Text("brown"),null)));
  List<ArrayWritable> records=read(test);
  Assert.assertEquals("Should have only one record",1,records.size());
  assertEquals("Should match expected record",expected,records.get(0));
  deserialize(records.get(0),Arrays.asList("examples"),Arrays.asList("map<string,array<string>>"));
}
