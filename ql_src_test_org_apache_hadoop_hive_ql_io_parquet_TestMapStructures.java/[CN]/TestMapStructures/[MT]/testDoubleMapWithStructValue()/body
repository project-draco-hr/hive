{
  Path test=writeDirect("DoubleMapWithStructValue",Types.buildMessage().optionalGroup().as(MAP).repeatedGroup().optional(DOUBLE).named("key").optionalGroup().required(INT32).named("x").required(INT32).named("y").named("value").named("key_value").named("approx").named("DoubleMapWithStructValue"),new TestArrayCompatibility.DirectWriter(){
    @Override public void write(    RecordConsumer rc){
      rc.startMessage();
      rc.startField("approx",0);
      rc.startGroup();
      rc.startField("key_value",0);
      rc.startGroup();
      rc.startField("key",0);
      rc.addDouble(3.14);
      rc.endField("key",0);
      rc.startField("value",1);
      rc.startGroup();
      rc.startField("x",0);
      rc.addInteger(7);
      rc.endField("x",0);
      rc.startField("y",1);
      rc.addInteger(22);
      rc.endField("y",1);
      rc.endGroup();
      rc.endField("value",1);
      rc.endGroup();
      rc.endField("key_value",0);
      rc.endGroup();
      rc.endField("approx",0);
      rc.endMessage();
    }
  }
);
  ArrayWritable expected=record(list(record(new DoubleWritable(3.14),record(new IntWritable(7),new IntWritable(22)))));
  List<ArrayWritable> records=read(test);
  Assert.assertEquals("Should have only one record",1,records.size());
  assertEquals("Should match expected record",expected,records.get(0));
  deserialize(records.get(0),Arrays.asList("approx"),Arrays.asList("map<bigint,struct<x:int,y:int>>"));
}
