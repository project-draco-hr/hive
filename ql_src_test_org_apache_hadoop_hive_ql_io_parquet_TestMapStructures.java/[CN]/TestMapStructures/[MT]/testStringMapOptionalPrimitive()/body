{
  Path test=writeDirect("StringMapOptionalPrimitive",Types.buildMessage().optionalGroup().as(MAP).repeatedGroup().required(BINARY).as(UTF8).named("key").optional(INT32).named("value").named("key_value").named("votes").named("StringMapOptionalPrimitive"),new TestArrayCompatibility.DirectWriter(){
    @Override public void write(    RecordConsumer rc){
      rc.startMessage();
      rc.startField("votes",0);
      rc.startGroup();
      rc.startField("key_value",0);
      rc.startGroup();
      rc.startField("key",0);
      rc.addBinary(Binary.fromString("lettuce"));
      rc.endField("key",0);
      rc.startField("value",1);
      rc.addInteger(34);
      rc.endField("value",1);
      rc.endGroup();
      rc.startGroup();
      rc.startField("key",0);
      rc.addBinary(Binary.fromString("kale"));
      rc.endField("key",0);
      rc.endGroup();
      rc.startGroup();
      rc.startField("key",0);
      rc.addBinary(Binary.fromString("cabbage"));
      rc.endField("key",0);
      rc.startField("value",1);
      rc.addInteger(18);
      rc.endField("value",1);
      rc.endGroup();
      rc.endField("key_value",0);
      rc.endGroup();
      rc.endField("votes",0);
      rc.endMessage();
    }
  }
);
  ArrayWritable expected=list(record(new Text("lettuce"),new IntWritable(34)),record(new Text("kale"),null),record(new Text("cabbage"),new IntWritable(18)));
  List<ArrayWritable> records=read(test);
  Assert.assertEquals("Should have only one record",1,records.size());
  assertEquals("Should match expected record",expected,records.get(0));
  deserialize(records.get(0),Arrays.asList("votes"),Arrays.asList("map<string,int>"));
}
