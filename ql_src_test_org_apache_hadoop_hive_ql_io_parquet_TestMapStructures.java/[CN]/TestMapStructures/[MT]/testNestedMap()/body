{
  Path test=writeDirect("DoubleMapWithStructValue",Types.buildMessage().optionalGroup().as(MAP).repeatedGroup().optional(BINARY).as(UTF8).named("key").optionalGroup().as(MAP).repeatedGroup().optional(BINARY).as(UTF8).named("key").required(INT32).named("value").named("key_value").named("value").named("key_value").named("map_of_maps").named("NestedMap"),new TestArrayCompatibility.DirectWriter(){
    @Override public void write(    RecordConsumer rc){
      rc.startMessage();
      rc.startField("map_of_maps",0);
      rc.startGroup();
      rc.startField("key_value",0);
      rc.startGroup();
      rc.startField("key",0);
      rc.addBinary(Binary.fromString("a"));
      rc.endField("key",0);
      rc.startField("value",1);
      rc.startGroup();
      rc.startField("key_value",0);
      rc.startGroup();
      rc.startField("key",0);
      rc.addBinary(Binary.fromString("b"));
      rc.endField("key",0);
      rc.startField("value",1);
      rc.addInteger(1);
      rc.endField("value",1);
      rc.endGroup();
      rc.endField("key_value",0);
      rc.endGroup();
      rc.endField("value",1);
      rc.endGroup();
      rc.startGroup();
      rc.startField("key",0);
      rc.addBinary(Binary.fromString("b"));
      rc.endField("key",0);
      rc.startField("value",1);
      rc.startGroup();
      rc.startField("key_value",0);
      rc.startGroup();
      rc.startField("key",0);
      rc.addBinary(Binary.fromString("a"));
      rc.endField("key",0);
      rc.startField("value",1);
      rc.addInteger(-1);
      rc.endField("value",1);
      rc.endGroup();
      rc.startGroup();
      rc.startField("key",0);
      rc.addBinary(Binary.fromString("b"));
      rc.endField("key",0);
      rc.startField("value",1);
      rc.addInteger(-2);
      rc.endField("value",1);
      rc.endGroup();
      rc.endField("key_value",0);
      rc.endGroup();
      rc.endField("value",1);
      rc.endGroup();
      rc.endField("key_value",0);
      rc.endGroup();
      rc.endField("map_of_maps",0);
      rc.endMessage();
    }
  }
);
  ArrayWritable expected=list(record(new Text("a"),record(record(new Text("b"),new IntWritable(1)))),record(new Text("b"),record(record(new Text("a"),new IntWritable(-1)),record(new Text("b"),new IntWritable(-2)))));
  List<ArrayWritable> records=read(test);
  Assert.assertEquals("Should have only one record",1,records.size());
  assertEquals("Should match expected record",expected,records.get(0));
  deserialize(records.get(0),Arrays.asList("map_of_maps"),Arrays.asList("map<string,map<string,int>>"));
}
