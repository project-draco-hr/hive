{
  hcatProperties=(Properties)hcatProperties.clone();
  super.initialize(context,hcatProperties);
  String jobString=context.getConfiguration().get(HCatConstants.HCAT_KEY_OUTPUT_INFO);
  if (jobString == null) {
    throw new IOException("OutputJobInfo information not found in JobContext. HCatInputFormat.setOutput() not called?");
  }
  outputJobInfo=(OutputJobInfo)HCatUtil.deserialize(jobString);
  hcatProperties.putAll(outputJobInfo.getProperties());
  outputJobInfo.getProperties().putAll(hcatProperties);
  hcatProperties=outputJobInfo.getProperties();
  String revision=outputJobInfo.getProperties().getProperty(HBaseConstants.PROPERTY_OUTPUT_VERSION_KEY);
  if (revision == null) {
    outputJobInfo.getProperties().setProperty(HBaseConstants.PROPERTY_OUTPUT_VERSION_KEY,Long.toString(System.currentTimeMillis()));
  }
  tableInfo=outputJobInfo.getTableInfo();
  schema=tableInfo.getDataColumns();
  List<FieldSchema> fields=HCatUtil.getFieldSchemaList(outputSchema.getFields());
  hcatProperties.setProperty(Constants.LIST_COLUMNS,MetaStoreUtils.getColumnNamesFromFieldSchema(fields));
  hcatProperties.setProperty(Constants.LIST_COLUMN_TYPES,MetaStoreUtils.getColumnTypesFromFieldSchema(fields));
  converter=new HBaseSerDeResultConverter(schema,outputSchema,hcatProperties);
  context.getConfiguration().set(HBaseConstants.PROPERTY_OUTPUT_TABLE_NAME_KEY,HBaseHCatStorageHandler.getFullyQualifiedName(tableInfo));
}
