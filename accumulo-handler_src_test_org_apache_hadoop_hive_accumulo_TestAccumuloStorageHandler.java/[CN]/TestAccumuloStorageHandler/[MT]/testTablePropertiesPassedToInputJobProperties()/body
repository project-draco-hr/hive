{
  TableDesc tableDesc=Mockito.mock(TableDesc.class);
  Properties props=new Properties();
  Map<String,String> jobProperties=new HashMap<String,String>();
  props.setProperty(AccumuloSerDeParameters.COLUMN_MAPPINGS,"cf:cq1,cf:cq2,cf:cq3");
  props.setProperty(AccumuloSerDeParameters.TABLE_NAME,"table");
  props.setProperty(AccumuloSerDeParameters.ITERATOR_PUSHDOWN_KEY,"true");
  props.setProperty(AccumuloSerDeParameters.DEFAULT_STORAGE_TYPE,ColumnEncoding.BINARY.getName());
  props.setProperty(AccumuloSerDeParameters.AUTHORIZATIONS_KEY,"foo,bar");
  Mockito.when(tableDesc.getProperties()).thenReturn(props);
  storageHandler.configureInputJobProperties(tableDesc,jobProperties);
  Assert.assertEquals(5,jobProperties.size());
  Assert.assertTrue(jobProperties.containsKey(AccumuloSerDeParameters.COLUMN_MAPPINGS));
  Assert.assertEquals(props.getProperty(AccumuloSerDeParameters.COLUMN_MAPPINGS),jobProperties.get(AccumuloSerDeParameters.COLUMN_MAPPINGS));
  Assert.assertTrue(jobProperties.containsKey(AccumuloSerDeParameters.TABLE_NAME));
  Assert.assertEquals(props.getProperty(AccumuloSerDeParameters.TABLE_NAME),jobProperties.get(AccumuloSerDeParameters.TABLE_NAME));
  Assert.assertTrue(jobProperties.containsKey(AccumuloSerDeParameters.ITERATOR_PUSHDOWN_KEY));
  Assert.assertEquals(props.getProperty(AccumuloSerDeParameters.ITERATOR_PUSHDOWN_KEY),jobProperties.get(AccumuloSerDeParameters.ITERATOR_PUSHDOWN_KEY));
  Assert.assertTrue(jobProperties.containsKey(AccumuloSerDeParameters.DEFAULT_STORAGE_TYPE));
  Assert.assertEquals(props.getProperty(AccumuloSerDeParameters.DEFAULT_STORAGE_TYPE),jobProperties.get(AccumuloSerDeParameters.DEFAULT_STORAGE_TYPE));
  Assert.assertTrue(jobProperties.containsKey(AccumuloSerDeParameters.AUTHORIZATIONS_KEY));
  Assert.assertEquals(props.getProperty(AccumuloSerDeParameters.AUTHORIZATIONS_KEY),jobProperties.get(AccumuloSerDeParameters.AUTHORIZATIONS_KEY));
}
