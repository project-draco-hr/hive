{
  long testIterationTimeout=System.currentTimeMillis() + 100000;
  long longPollingStart;
  long longPollingEnd;
  long longPollingTimeDelta;
  OperationStatus opStatus=null;
  OperationState state=null;
  int count=0;
  long start=System.currentTimeMillis();
  while (true) {
    if (System.currentTimeMillis() > testIterationTimeout) {
      System.out.println("Polling timed out");
      break;
    }
    longPollingStart=System.currentTimeMillis();
    System.out.println("Long polling starts at: " + longPollingStart);
    opStatus=client.getOperationStatus(opHandle);
    state=opStatus.getState();
    longPollingEnd=System.currentTimeMillis();
    System.out.println("Long polling ends at: " + longPollingEnd);
    System.out.println("Polling: " + opHandle + " count="+ (++count)+ " state="+ state);
    if (state == OperationState.CANCELED || state == OperationState.CLOSED || state == OperationState.FINISHED || state == OperationState.ERROR) {
      break;
    }
 else {
      longPollingTimeDelta=longPollingEnd - longPollingStart;
      long elapsed=longPollingStart - start;
      long expectedTimeout=Math.min(maxLongPollingTimeout,(elapsed / TimeUnit.SECONDS.toMillis(10) + 1) * 500);
      assertTrue(longPollingTimeDelta - 0.9 * expectedTimeout > 0);
    }
  }
  assertEquals(expectedState,client.getOperationStatus(opHandle).getState());
  client.closeOperation(opHandle);
  return opStatus;
}
