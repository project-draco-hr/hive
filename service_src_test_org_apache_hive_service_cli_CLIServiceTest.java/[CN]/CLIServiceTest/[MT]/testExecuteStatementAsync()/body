{
  HashMap<String,String> confOverlay=new HashMap<String,String>();
  SessionHandle sessionHandle=client.openSession("tom","password",new HashMap<String,String>());
  long pollTimeout=System.currentTimeMillis() + 100000;
  assertNotNull(sessionHandle);
  OperationState state=null;
  OperationHandle ophandle;
  String queryString="SET hive.lock.manager=" + "org.apache.hadoop.hive.ql.lockmgr.EmbeddedLockManager";
  client.executeStatement(sessionHandle,queryString,confOverlay);
  queryString="DROP TABLE IF EXISTS TEST_EXEC_ASYNC";
  client.executeStatement(sessionHandle,queryString,confOverlay);
  queryString="CREATE TABLE TEST_EXEC_ASYNC(ID STRING)";
  client.executeStatement(sessionHandle,queryString,confOverlay);
  String wrongQueryString="SELECT NAME FROM TEST_EXEC";
  ophandle=client.executeStatementAsync(sessionHandle,wrongQueryString,confOverlay);
  int count=0;
  while (true) {
    if (System.currentTimeMillis() > pollTimeout) {
      System.out.println("Polling timed out");
      break;
    }
    state=client.getOperationStatus(ophandle);
    System.out.println("Polling: " + ophandle + " count="+ (++count)+ " state="+ state);
    if (OperationState.CANCELED == state || state == OperationState.CLOSED || state == OperationState.FINISHED || state == OperationState.ERROR) {
      break;
    }
    Thread.sleep(1000);
  }
  assertEquals("Query should return an error state",OperationState.ERROR,client.getOperationStatus(ophandle));
  queryString="SELECT ID FROM TEST_EXEC_ASYNC";
  ophandle=client.executeStatementAsync(sessionHandle,queryString,confOverlay);
  count=0;
  while (true) {
    if (System.currentTimeMillis() > pollTimeout) {
      System.out.println("Polling timed out");
      break;
    }
    state=client.getOperationStatus(ophandle);
    System.out.println("Polling: " + ophandle + " count="+ (++count)+ " state="+ state);
    if (OperationState.CANCELED == state || state == OperationState.CLOSED || state == OperationState.FINISHED || state == OperationState.ERROR) {
      break;
    }
    Thread.sleep(1000);
  }
  assertEquals("Query should be finished",OperationState.FINISHED,client.getOperationStatus(ophandle));
  ophandle=client.executeStatementAsync(sessionHandle,queryString,confOverlay);
  System.out.println("cancelling " + ophandle);
  client.cancelOperation(ophandle);
  state=client.getOperationStatus(ophandle);
  System.out.println(ophandle + " after cancelling, state= " + state);
  assertEquals("Query should be cancelled",OperationState.CANCELED,state);
}
