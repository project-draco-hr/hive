{
  URL hive_l4j=null;
switch (confVarName) {
case HIVE_EXEC_LOG4J_FILE:
    hive_l4j=LogUtils.class.getClassLoader().getResource(HIVE_EXEC_L4J);
  if (hive_l4j == null) {
    hive_l4j=LogUtils.class.getClassLoader().getResource(HIVE_L4J);
  }
System.setProperty(HiveConf.ConfVars.HIVEQUERYID.toString(),HiveConf.getVar(conf,HiveConf.ConfVars.HIVEQUERYID));
break;
case HIVE_LOG4J_FILE:
hive_l4j=LogUtils.class.getClassLoader().getResource(HIVE_L4J);
break;
default :
break;
}
if (hive_l4j != null) {
final boolean async=checkAndSetAsyncLogging(conf);
Configurator.initialize(null,hive_l4j.toString());
logConfigLocation(conf);
return (logMessage + "\n" + "Logging initialized using configuration in "+ hive_l4j+ " Async: "+ async);
}
 else {
throw new LogInitializationException(logMessage + "Unable to initialize logging using " + LogUtils.HIVE_L4J+ ", not found on CLASSPATH!");
}
}
