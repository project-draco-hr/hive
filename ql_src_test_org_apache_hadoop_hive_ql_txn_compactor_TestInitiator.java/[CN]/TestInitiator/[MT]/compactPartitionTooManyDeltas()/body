{
  Table t=newTable("default","cptmd",true);
  Partition p=newPartition(t,"today");
  addBaseFile(t,p,200L,200);
  addDeltaFile(t,p,201L,201L,1);
  addDeltaFile(t,p,202L,202L,1);
  addDeltaFile(t,p,203L,203L,1);
  addDeltaFile(t,p,204L,204L,1);
  addDeltaFile(t,p,205L,205L,1);
  addDeltaFile(t,p,206L,206L,1);
  addDeltaFile(t,p,207L,207L,1);
  addDeltaFile(t,p,208L,208L,1);
  addDeltaFile(t,p,209L,209L,1);
  addDeltaFile(t,p,210L,210L,1);
  addDeltaFile(t,p,211L,211L,1);
  burnThroughTransactions(210);
  long txnid=openTxn();
  LockComponent comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.PARTITION,"default");
  comp.setTablename("cptmd");
  comp.setPartitionname("ds=today");
  comp.setOperationType(DataOperationType.UPDATE);
  List<LockComponent> components=new ArrayList<LockComponent>(1);
  components.add(comp);
  LockRequest req=new LockRequest(components,"me","localhost");
  req.setTxnid(txnid);
  LockResponse res=txnHandler.lock(req);
  txnHandler.commitTxn(new CommitTxnRequest(txnid));
  startInitiator();
  ShowCompactResponse rsp=txnHandler.showCompact(new ShowCompactRequest());
  List<ShowCompactResponseElement> compacts=rsp.getCompacts();
  Assert.assertEquals(1,compacts.size());
  Assert.assertEquals("initiated",compacts.get(0).getState());
  Assert.assertEquals("cptmd",compacts.get(0).getTablename());
  Assert.assertEquals("ds=today",compacts.get(0).getPartitionname());
  Assert.assertEquals(CompactionType.MINOR,compacts.get(0).getType());
}
