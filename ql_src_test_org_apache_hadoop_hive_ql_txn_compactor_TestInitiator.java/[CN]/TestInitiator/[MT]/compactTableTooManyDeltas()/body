{
  Table t=newTable("default","cttmd",false);
  HiveConf conf=new HiveConf();
  addBaseFile(conf,t,null,200L,200);
  addDeltaFile(conf,t,null,201L,201L,1);
  addDeltaFile(conf,t,null,202L,202L,1);
  addDeltaFile(conf,t,null,203L,203L,1);
  addDeltaFile(conf,t,null,204L,204L,1);
  addDeltaFile(conf,t,null,205L,205L,1);
  addDeltaFile(conf,t,null,206L,206L,1);
  addDeltaFile(conf,t,null,207L,207L,1);
  addDeltaFile(conf,t,null,208L,208L,1);
  addDeltaFile(conf,t,null,209L,209L,1);
  addDeltaFile(conf,t,null,210L,210L,1);
  addDeltaFile(conf,t,null,211L,211L,1);
  burnThroughTransactions(210);
  long txnid=openTxn();
  LockComponent comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.TABLE,"default");
  comp.setTablename("cttmd");
  List<LockComponent> components=new ArrayList<LockComponent>(1);
  components.add(comp);
  LockRequest req=new LockRequest(components,"me","localhost");
  req.setTxnid(txnid);
  LockResponse res=txnHandler.lock(req);
  txnHandler.commitTxn(new CommitTxnRequest(txnid));
  startInitiator(conf);
  ShowCompactResponse rsp=txnHandler.showCompact(new ShowCompactRequest());
  List<ShowCompactResponseElement> compacts=rsp.getCompacts();
  Assert.assertEquals(1,compacts.size());
  Assert.assertEquals("initiated",compacts.get(0).getState());
  Assert.assertEquals("cttmd",compacts.get(0).getTablename());
  Assert.assertEquals(CompactionType.MINOR,compacts.get(0).getType());
}
