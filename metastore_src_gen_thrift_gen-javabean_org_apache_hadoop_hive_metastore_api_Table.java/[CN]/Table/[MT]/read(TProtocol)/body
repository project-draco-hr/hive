{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == TType.STRING) {
        this.tableName=iprot.readString();
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == TType.STRING) {
    this.dbName=iprot.readString();
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == TType.STRING) {
this.owner=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 4:
if (field.type == TType.I32) {
this.createTime=iprot.readI32();
setCreateTimeIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 5:
if (field.type == TType.I32) {
this.lastAccessTime=iprot.readI32();
setLastAccessTimeIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 6:
if (field.type == TType.I32) {
this.retention=iprot.readI32();
setRetentionIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 7:
if (field.type == TType.STRUCT) {
this.sd=new StorageDescriptor();
this.sd.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 8:
if (field.type == TType.LIST) {
{
TList _list31=iprot.readListBegin();
this.partitionKeys=new ArrayList<FieldSchema>(_list31.size);
for (int _i32=0; _i32 < _list31.size; ++_i32) {
FieldSchema _elem33;
_elem33=new FieldSchema();
_elem33.read(iprot);
this.partitionKeys.add(_elem33);
}
iprot.readListEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 9:
if (field.type == TType.MAP) {
{
TMap _map34=iprot.readMapBegin();
this.parameters=new HashMap<String,String>(2 * _map34.size);
for (int _i35=0; _i35 < _map34.size; ++_i35) {
String _key36;
String _val37;
_key36=iprot.readString();
_val37=iprot.readString();
this.parameters.put(_key36,_val37);
}
iprot.readMapEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 10:
if (field.type == TType.STRING) {
this.viewOriginalText=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 11:
if (field.type == TType.STRING) {
this.viewExpandedText=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 12:
if (field.type == TType.STRING) {
this.tableType=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
