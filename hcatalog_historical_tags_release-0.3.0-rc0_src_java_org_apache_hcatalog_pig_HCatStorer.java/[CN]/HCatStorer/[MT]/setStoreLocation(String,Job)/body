{
  job.getConfiguration().set(INNER_SIGNATURE,INNER_SIGNATURE_PREFIX + "_" + sign);
  Properties p=UDFContext.getUDFContext().getUDFProperties(this.getClass(),new String[]{sign});
  String[] userStr=location.split("\\.");
  OutputJobInfo outputJobInfo;
  if (userStr.length == 2) {
    outputJobInfo=OutputJobInfo.create(userStr[0],userStr[1],partitions,PigHCatUtil.getHCatServerUri(job),PigHCatUtil.getHCatServerPrincipal(job));
  }
 else {
    outputJobInfo=OutputJobInfo.create(null,userStr[0],partitions,PigHCatUtil.getHCatServerUri(job),PigHCatUtil.getHCatServerPrincipal(job));
  }
  Configuration config=job.getConfiguration();
  if (!HCatUtil.checkJobContextIfRunningFromBackend(job)) {
    Schema schema=(Schema)ObjectSerializer.deserialize(p.getProperty(PIG_SCHEMA));
    if (schema != null) {
      pigSchema=schema;
    }
    if (pigSchema == null) {
      throw new FrontendException("Schema for data cannot be determined.",PigHCatUtil.PIG_EXCEPTION_CODE);
    }
    try {
      HCatOutputFormat.setOutput(job,outputJobInfo);
    }
 catch (    HCatException he) {
      throw new PigException(he.getMessage(),PigHCatUtil.PIG_EXCEPTION_CODE,he);
    }
    HCatSchema hcatTblSchema=HCatOutputFormat.getTableSchema(job);
    try {
      doSchemaValidations(pigSchema,hcatTblSchema);
    }
 catch (    HCatException he) {
      throw new FrontendException(he.getMessage(),PigHCatUtil.PIG_EXCEPTION_CODE,he);
    }
    computedSchema=convertPigSchemaToHCatSchema(pigSchema,hcatTblSchema);
    HCatOutputFormat.setSchema(job,computedSchema);
    p.setProperty(HCatConstants.HCAT_KEY_OUTPUT_INFO,config.get(HCatConstants.HCAT_KEY_OUTPUT_INFO));
    PigHCatUtil.saveConfigIntoUDFProperties(p,config,HCatConstants.HCAT_KEY_HIVE_CONF);
    PigHCatUtil.saveConfigIntoUDFProperties(p,config,HCatConstants.HCAT_DYNAMIC_PTN_JOBID);
    PigHCatUtil.saveConfigIntoUDFProperties(p,config,HCatConstants.HCAT_KEY_TOKEN_SIGNATURE);
    PigHCatUtil.saveConfigIntoUDFProperties(p,config,HCatConstants.HCAT_KEY_JOBCLIENT_TOKEN_SIGNATURE);
    PigHCatUtil.saveConfigIntoUDFProperties(p,config,HCatConstants.HCAT_KEY_JOBCLIENT_TOKEN_STRFORM);
    p.setProperty(COMPUTED_OUTPUT_SCHEMA,ObjectSerializer.serialize(computedSchema));
  }
 else {
    config.set(HCatConstants.HCAT_KEY_OUTPUT_INFO,p.getProperty(HCatConstants.HCAT_KEY_OUTPUT_INFO));
    PigHCatUtil.getConfigFromUDFProperties(p,config,HCatConstants.HCAT_KEY_HIVE_CONF);
    PigHCatUtil.getConfigFromUDFProperties(p,config,HCatConstants.HCAT_DYNAMIC_PTN_JOBID);
    PigHCatUtil.getConfigFromUDFProperties(p,config,HCatConstants.HCAT_KEY_TOKEN_SIGNATURE);
    PigHCatUtil.getConfigFromUDFProperties(p,config,HCatConstants.HCAT_KEY_JOBCLIENT_TOKEN_SIGNATURE);
    PigHCatUtil.getConfigFromUDFProperties(p,config,HCatConstants.HCAT_KEY_JOBCLIENT_TOKEN_STRFORM);
  }
}
