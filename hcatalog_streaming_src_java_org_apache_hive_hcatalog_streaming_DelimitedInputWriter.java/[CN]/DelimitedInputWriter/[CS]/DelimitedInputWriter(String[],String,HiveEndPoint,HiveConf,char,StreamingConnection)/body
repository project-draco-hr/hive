{
  super(endPoint,conf,conn);
  this.tableColumns=getCols(tbl);
  this.serdeSeparator=serdeSeparator;
  this.delimiter=delimiter;
  this.fieldToColMapping=getFieldReordering(colNamesForFields,getTableColumns());
  this.reorderingNeeded=isReorderingNeeded(delimiter,getTableColumns());
  LOG.debug("Field reordering needed = " + this.reorderingNeeded + ", for endpoint "+ endPoint);
  this.serdeSeparator=serdeSeparator;
  this.serde=createSerde(tbl,conf,serdeSeparator);
  try {
    this.recordObjInspector=(LazySimpleStructObjectInspector)serde.getObjectInspector();
    this.bucketObjInspectors=getObjectInspectorsForBucketedCols(bucketIds,recordObjInspector);
  }
 catch (  SerDeException e) {
    throw new SerializationError("Unable to get ObjectInspector for bucket columns",e);
  }
  bucketStructFields=new StructField[bucketIds.size()];
  List<? extends StructField> allFields=recordObjInspector.getAllStructFieldRefs();
  for (int i=0; i < bucketIds.size(); i++) {
    bucketStructFields[i]=allFields.get(bucketIds.get(i));
  }
}
