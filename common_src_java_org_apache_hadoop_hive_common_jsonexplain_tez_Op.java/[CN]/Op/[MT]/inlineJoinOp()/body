{
  if (this.name.equals("Map Join Operator")) {
    JSONObject mapjoinObj=opObject.getJSONObject("Map Join Operator");
    JSONObject verticeObj=mapjoinObj.getJSONObject("input vertices:");
    Map<String,String> posToVertex=new LinkedHashMap<>();
    for (    String pos : JSONObject.getNames(verticeObj)) {
      String vertexName=verticeObj.getString(pos);
      posToVertex.put(pos,vertexName);
      Connection c=null;
      for (      Connection connection : vertex.parentConnections) {
        if (connection.from.name.equals(vertexName)) {
          c=connection;
          break;
        }
      }
      if (c != null) {
        parser.addInline(this,c);
      }
    }
    removeAttr("input vertices:");
    JSONObject keys=mapjoinObj.getJSONObject("keys:");
    if (keys.length() != 0) {
      JSONObject newKeys=new JSONObject(new LinkedHashMap<>());
      for (      String key : JSONObject.getNames(keys)) {
        String vertexName=posToVertex.get(key);
        if (vertexName != null) {
          newKeys.put(vertexName,keys.get(key));
        }
 else {
          newKeys.put(this.vertex.name,keys.get(key));
        }
      }
      removeAttr("keys:");
      this.attrs.add(new Attr("keys:",newKeys.toString()));
    }
  }
 else {
    if (this.vertex != null) {
      for (      Vertex v : this.vertex.mergeJoinDummyVertexs) {
        parser.addInline(this,new Connection(null,v));
      }
    }
  }
}
