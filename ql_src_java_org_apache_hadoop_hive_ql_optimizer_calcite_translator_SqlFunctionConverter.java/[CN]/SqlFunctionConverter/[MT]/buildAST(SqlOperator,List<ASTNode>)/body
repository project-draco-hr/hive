{
  HiveToken hToken=calciteToHiveToken.get(op);
  ASTNode node;
  if (hToken != null) {
switch (op.kind) {
case IN:
case BETWEEN:
case ROW:
case IS_NOT_NULL:
case CASE:
      node=(ASTNode)ParseDriver.adaptor.create(HiveParser.TOK_FUNCTION,"TOK_FUNCTION");
    node.addChild((ASTNode)ParseDriver.adaptor.create(hToken.type,hToken.text));
  break;
default :
node=(ASTNode)ParseDriver.adaptor.create(hToken.type,hToken.text);
}
}
 else {
node=(ASTNode)ParseDriver.adaptor.create(HiveParser.TOK_FUNCTION,"TOK_FUNCTION");
if (op.kind != SqlKind.CAST) {
if (op.kind == SqlKind.MINUS_PREFIX) {
node=(ASTNode)ParseDriver.adaptor.create(HiveParser.MINUS,"MINUS");
}
 else if (op.kind == SqlKind.PLUS_PREFIX) {
node=(ASTNode)ParseDriver.adaptor.create(HiveParser.PLUS,"PLUS");
}
 else {
if (op instanceof HiveSqlCountAggFunction || op instanceof HiveSqlSumAggFunction || (op instanceof CalciteUDAF && op.getName().equalsIgnoreCase(SqlStdOperatorTable.AVG.getName()))) {
  if (children.size() == 0) {
    node=(ASTNode)ParseDriver.adaptor.create(HiveParser.TOK_FUNCTIONSTAR,"TOK_FUNCTIONSTAR");
  }
 else {
    CanAggregateDistinct distinctFunction=(CanAggregateDistinct)op;
    if (distinctFunction.isDistinct()) {
      node=(ASTNode)ParseDriver.adaptor.create(HiveParser.TOK_FUNCTIONDI,"TOK_FUNCTIONDI");
    }
  }
}
node.addChild((ASTNode)ParseDriver.adaptor.create(HiveParser.Identifier,op.getName()));
}
}
}
for (ASTNode c : children) {
ParseDriver.adaptor.addChild(node,c);
}
return node;
}
