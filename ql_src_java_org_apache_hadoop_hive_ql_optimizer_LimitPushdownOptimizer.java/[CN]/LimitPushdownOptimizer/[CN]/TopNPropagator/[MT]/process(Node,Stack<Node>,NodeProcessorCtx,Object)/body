{
  ReduceSinkOperator cRS=(ReduceSinkOperator)nd;
  if (cRS.getConf().getTopN() == -1) {
    return false;
  }
  ReduceSinkOperator pRS=null;
  for (int i=stack.size() - 2; i >= 0; i--) {
    Operator<?> operator=(Operator<?>)stack.get(i);
    if (operator.getNumChild() != 1) {
      return false;
    }
    if (operator instanceof ReduceSinkOperator) {
      pRS=(ReduceSinkOperator)operator;
      break;
    }
    if (!operator.acceptLimitPushdown()) {
      return false;
    }
  }
  if (pRS != null) {
    if (OperatorUtils.findOperators(pRS,GroupByOperator.class).size() > 1) {
      return false;
    }
    if (!checkKeys(cRS.getConf().getKeyCols(),pRS.getConf().getKeyCols(),cRS,pRS)) {
      return false;
    }
    StringBuilder order=new StringBuilder(cRS.getConf().getOrder());
    StringBuilder orderNull=new StringBuilder(cRS.getConf().getNullOrder());
    order.append(pRS.getConf().getOrder().substring(order.length()));
    orderNull.append(pRS.getConf().getNullOrder().substring(orderNull.length()));
    pRS.getConf().setOrder(order.toString());
    pRS.getConf().setNullOrder(orderNull.toString());
    pRS.getConf().setTopN(cRS.getConf().getTopN());
    pRS.getConf().setTopNMemoryUsage(cRS.getConf().getTopNMemoryUsage());
    if (pRS.getNumChild() == 1 && pRS.getChildren().get(0) instanceof GroupByOperator) {
      pRS.getConf().setMapGroupBy(true);
    }
  }
  return true;
}
