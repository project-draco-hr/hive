{
  int largeMaxLength=100;
  int resultLen;
  Assert.assertTrue(StringExpr.characterCount(blue,0,blue.length) == 4);
  resultLen=StringExpr.truncate(blue,0,blue.length,largeMaxLength);
  Assert.assertTrue(resultLen == blue.length);
  Assert.assertTrue(StringExpr.characterCount(blue,0,resultLen) == 4);
  Assert.assertTrue(StringExpr.characterCount(redgreen,0,redgreen.length) == 8);
  resultLen=StringExpr.truncate(redgreen,0,redgreen.length,largeMaxLength);
  Assert.assertTrue(resultLen == redgreen.length);
  Assert.assertTrue(StringExpr.characterCount(ascii_sentence,0,ascii_sentence.length) == 31);
  resultLen=StringExpr.truncate(ascii_sentence,0,ascii_sentence.length,largeMaxLength);
  Assert.assertTrue(resultLen == ascii_sentence.length);
  Assert.assertTrue(StringExpr.characterCount(blanksLeft,0,blanksLeft.length) == 5);
  resultLen=StringExpr.truncate(blanksLeft,0,blanksLeft.length,largeMaxLength);
  Assert.assertTrue(resultLen == blanksLeft.length);
  Assert.assertTrue(StringExpr.characterCount(blue,0,blue.length) == 4);
  resultLen=StringExpr.truncate(blue,0,blue.length,4);
  Assert.assertTrue(resultLen == blue.length);
  Assert.assertTrue(StringExpr.characterCount(blue,0,resultLen) == 4);
  Assert.assertTrue(StringExpr.characterCount(redgreen,0,redgreen.length) == 8);
  resultLen=StringExpr.truncate(redgreen,0,redgreen.length,8);
  Assert.assertTrue(resultLen == redgreen.length);
  Assert.assertTrue(StringExpr.characterCount(ascii_sentence,0,ascii_sentence.length) == 31);
  resultLen=StringExpr.truncate(ascii_sentence,0,ascii_sentence.length,31);
  Assert.assertTrue(resultLen == ascii_sentence.length);
  Assert.assertTrue(StringExpr.characterCount(blanksLeft,0,blanksLeft.length) == 5);
  resultLen=StringExpr.truncate(blanksLeft,0,blanksLeft.length,5);
  Assert.assertTrue(resultLen == blanksLeft.length);
  Assert.assertTrue(StringExpr.characterCount(blue,0,blue.length) == 4);
  resultLen=StringExpr.truncate(blue,0,blue.length,3);
  Assert.assertTrue(resultLen == 3);
  Assert.assertTrue(StringExpr.characterCount(blue,0,resultLen) == 3);
  Assert.assertTrue(StringExpr.characterCount(redgreen,0,redgreen.length) == 8);
  resultLen=StringExpr.truncate(redgreen,0,redgreen.length,6);
  Assert.assertTrue(resultLen == 6);
  Assert.assertTrue(StringExpr.characterCount(ascii_sentence,0,ascii_sentence.length) == 31);
  resultLen=StringExpr.truncate(ascii_sentence,0,ascii_sentence.length,14);
  Assert.assertTrue(resultLen == 14);
  Assert.assertTrue(StringExpr.characterCount(blanksLeft,0,blanksLeft.length) == 5);
  resultLen=StringExpr.truncate(blanksLeft,0,blanksLeft.length,2);
  Assert.assertTrue(resultLen == 2);
  Assert.assertTrue(StringExpr.characterCount(blanksRight,0,blanksRight.length) == 5);
  resultLen=StringExpr.truncate(blanksRight,0,blanksRight.length,4);
  Assert.assertTrue(resultLen == 4);
  Assert.assertTrue(StringExpr.characterCount(blanksRight,0,resultLen) == 4);
  Assert.assertTrue(StringExpr.characterCount(blanksBoth,0,blanksBoth.length) == 7);
  resultLen=StringExpr.truncate(blanksBoth,0,blanksBoth.length,2);
  Assert.assertTrue(resultLen == 2);
  Assert.assertTrue(StringExpr.characterCount(blanksBoth,0,resultLen) == 2);
  Assert.assertTrue(StringExpr.characterCount(blankString,0,blankString.length) == 2);
  resultLen=StringExpr.truncate(blankString,0,blankString.length,1);
  Assert.assertTrue(resultLen == 1);
  Assert.assertTrue(StringExpr.characterCount(blankString,0,resultLen) == 1);
  Assert.assertTrue(StringExpr.characterCount(blankRanges,0,blankRanges.length) == 30);
  resultLen=StringExpr.truncate(blankRanges,0,blankRanges.length,29);
  Assert.assertTrue(resultLen == 29);
  Assert.assertTrue(StringExpr.characterCount(blankRanges,0,resultLen) == 29);
  Assert.assertTrue(StringExpr.characterCount(blanksRight,1,blanksRight.length - 1) == 4);
  resultLen=StringExpr.truncate(blanksRight,1,blanksRight.length - 1,3);
  Assert.assertTrue(resultLen == 3);
  Assert.assertTrue(StringExpr.characterCount(blanksRight,1,resultLen) == 3);
  Assert.assertTrue(StringExpr.characterCount(blanksBoth,4,blanksBoth.length - 4) == 3);
  resultLen=StringExpr.truncate(blanksBoth,4,blanksBoth.length - 4,2);
  Assert.assertTrue(resultLen == 2);
  Assert.assertTrue(StringExpr.characterCount(blanksBoth,4,resultLen) == 2);
  Assert.assertTrue(StringExpr.characterCount(blanksBoth,5,blanksBoth.length - 5) == 2);
  resultLen=StringExpr.truncate(blanksBoth,5,blanksBoth.length - 5,1);
  Assert.assertTrue(resultLen == 1);
  Assert.assertTrue(StringExpr.characterCount(blanksBoth,5,resultLen) == 1);
  Assert.assertTrue(StringExpr.characterCount(blankRanges,4,blankRanges.length - 4) == 26);
  resultLen=StringExpr.truncate(blankRanges,4,blankRanges.length - 4,22);
  Assert.assertTrue(resultLen == 22);
  Assert.assertTrue(StringExpr.characterCount(blankRanges,4,resultLen) == 22);
  Assert.assertTrue(StringExpr.characterCount(blankRanges,6,blankRanges.length - 6) == 24);
  resultLen=StringExpr.truncate(blankRanges,6,blankRanges.length - 6,7);
  Assert.assertTrue(resultLen == 7);
  Assert.assertTrue(StringExpr.characterCount(blankRanges,6,resultLen) == 7);
  Assert.assertTrue(StringExpr.characterCount(blankRanges,7,blankRanges.length - 7) == 23);
  resultLen=StringExpr.truncate(blankRanges,7,blankRanges.length - 7,20);
  Assert.assertTrue(resultLen == 20);
  Assert.assertTrue(StringExpr.characterCount(blankRanges,7,resultLen) == 20);
  byte[] multiByte=new byte[100];
  addMultiByteCharRightPadded1_1(multiByte);
  Assert.assertTrue(StringExpr.characterCount(multiByte,0,4) == 2);
  resultLen=StringExpr.truncate(multiByte,0,4,1);
  Assert.assertTrue(resultLen == 3);
  Assert.assertTrue(StringExpr.characterCount(multiByte,0,resultLen) == 1);
  addMultiByteCharRightPadded1_2(multiByte);
  Assert.assertTrue(StringExpr.characterCount(multiByte,0,5) == 3);
  resultLen=StringExpr.truncate(multiByte,0,5,2);
  Assert.assertTrue(resultLen == 4);
  Assert.assertTrue(StringExpr.characterCount(multiByte,0,resultLen) == 2);
  addMultiByteCharRightPadded1_3(multiByte);
  Assert.assertTrue(StringExpr.characterCount(multiByte,0,9) == 4);
  resultLen=StringExpr.truncate(multiByte,0,9,2);
  Assert.assertTrue(resultLen == 5);
  Assert.assertTrue(StringExpr.characterCount(multiByte,0,resultLen) == 2);
  addMultiByteCharRightPadded1_2(multiByte);
  Assert.assertTrue(StringExpr.characterCount(multiByte,3,2) == 2);
  resultLen=StringExpr.truncate(multiByte,3,2,1);
  Assert.assertTrue(resultLen == 1);
  Assert.assertTrue(StringExpr.characterCount(multiByte,3,resultLen) == 1);
  byte[] sentenceOne=new byte[100];
  int sentenceOneLen=addMultiByteCharSentenceOne(sentenceOne,0);
  Assert.assertTrue(StringExpr.characterCount(sentenceOne,0,sentenceOneLen) == 10);
  resultLen=StringExpr.truncate(sentenceOne,0,sentenceOneLen,8);
  Assert.assertTrue(resultLen == 20);
  Assert.assertTrue(StringExpr.characterCount(sentenceOne,0,sentenceOneLen - 3) == 9);
  resultLen=StringExpr.truncate(sentenceOne,0,sentenceOneLen - 3,3);
  Assert.assertTrue(resultLen == 9);
  byte[] sentenceTwo=new byte[100];
  int sentenceTwoLen=addMultiByteCharSentenceTwo(sentenceTwo,0);
  Assert.assertTrue(StringExpr.characterCount(sentenceTwo,0,sentenceTwoLen) == 13);
  resultLen=StringExpr.truncate(sentenceTwo,0,sentenceTwoLen,9);
  Assert.assertTrue(resultLen == 16);
  Assert.assertTrue(StringExpr.characterCount(sentenceTwo,0,sentenceTwoLen - 5) == 10);
  resultLen=StringExpr.truncate(sentenceTwo,0,sentenceTwoLen - 5,6);
  Assert.assertTrue(resultLen == 11);
  int start;
  byte[] sentenceOnePaddedLeft=new byte[100];
  start=addPads(sentenceOnePaddedLeft,0,3);
  int sentenceOnePaddedLeftLen=addMultiByteCharSentenceOne(sentenceOnePaddedLeft,start);
  Assert.assertTrue(StringExpr.characterCount(sentenceOnePaddedLeft,0,sentenceOnePaddedLeftLen) == 3 + 10);
  resultLen=StringExpr.truncate(sentenceOnePaddedLeft,0,sentenceOnePaddedLeftLen,4);
  Assert.assertTrue(resultLen == 6);
  Assert.assertTrue(StringExpr.characterCount(sentenceOnePaddedLeft,0,sentenceOnePaddedLeftLen - 3) == 3 + 9);
  resultLen=StringExpr.truncate(sentenceOnePaddedLeft,0,sentenceOnePaddedLeftLen - 3,7);
  Assert.assertTrue(resultLen == 13);
  byte[] sentenceTwoPaddedLeft=new byte[100];
  start=addPads(sentenceTwoPaddedLeft,0,2);
  int sentenceTwoPaddedLeftLen=addMultiByteCharSentenceTwo(sentenceTwoPaddedLeft,start);
  Assert.assertTrue(StringExpr.characterCount(sentenceTwoPaddedLeft,0,sentenceTwoPaddedLeftLen) == 2 + 13);
  resultLen=StringExpr.truncate(sentenceTwoPaddedLeft,0,sentenceTwoPaddedLeftLen,14);
  Assert.assertTrue(resultLen == 24);
  Assert.assertTrue(StringExpr.characterCount(sentenceTwoPaddedLeft,0,sentenceTwoPaddedLeftLen - 5) == 2 + 10);
  resultLen=StringExpr.truncate(sentenceTwoPaddedLeft,0,sentenceTwoPaddedLeftLen - 5,9);
  Assert.assertTrue(resultLen == 15);
  byte[] sentenceOnePaddedRight=new byte[100];
  start=addMultiByteCharSentenceOne(sentenceOnePaddedRight,0);
  int sentenceOnePaddedRightLen=addPads(sentenceOnePaddedRight,start,4);
  Assert.assertTrue(StringExpr.characterCount(sentenceOnePaddedRight,0,sentenceOnePaddedRightLen) == 10 + 4);
  resultLen=StringExpr.truncate(sentenceOnePaddedRight,0,sentenceOnePaddedRightLen,1);
  Assert.assertTrue(resultLen == 3);
  Assert.assertTrue(StringExpr.characterCount(sentenceOnePaddedRight,0,sentenceOnePaddedRightLen - 3 - 4) == 9);
  resultLen=StringExpr.truncate(sentenceOnePaddedRight,0,sentenceOnePaddedRightLen - 3 - 4,5);
  Assert.assertTrue(resultLen == 13);
  byte[] sentenceTwoPaddedRight=new byte[100];
  start=addMultiByteCharSentenceTwo(sentenceTwoPaddedRight,0);
  int sentenceTwoPaddedRightLen=addPads(sentenceTwoPaddedRight,start,1);
  Assert.assertTrue(StringExpr.characterCount(sentenceTwoPaddedRight,0,sentenceTwoPaddedRightLen) == 13 + 1);
  resultLen=StringExpr.truncate(sentenceTwoPaddedRight,0,sentenceTwoPaddedRightLen,6);
  Assert.assertTrue(resultLen == 11);
  Assert.assertTrue(StringExpr.characterCount(sentenceTwoPaddedRight,0,sentenceTwoPaddedRightLen - 5 - 1) == 10);
  resultLen=StringExpr.truncate(sentenceTwoPaddedRight,0,sentenceTwoPaddedRightLen - 5 - 1,8);
  Assert.assertTrue(resultLen == 14);
  byte[] sentenceBlankRanges=new byte[100];
  int sentenceBlankRangesLen=addMultiByteCharSentenceBlankRanges(sentenceBlankRanges,0);
  Assert.assertTrue(StringExpr.characterCount(sentenceBlankRanges,0,sentenceBlankRangesLen) == 17);
  resultLen=StringExpr.truncate(sentenceBlankRanges,0,sentenceBlankRangesLen,4);
  Assert.assertTrue(resultLen == 9);
  Assert.assertTrue(StringExpr.characterCount(sentenceBlankRanges,0,sentenceBlankRangesLen - 3) == 16);
  resultLen=StringExpr.truncate(sentenceBlankRanges,0,sentenceBlankRangesLen - 3,14);
  Assert.assertTrue(resultLen == 23);
  Assert.assertTrue(StringExpr.characterCount(sentenceBlankRanges,7,17) == 13);
  resultLen=StringExpr.truncate(sentenceBlankRanges,7,17,11);
  Assert.assertTrue(resultLen == 15);
  Assert.assertTrue(StringExpr.characterCount(sentenceBlankRanges,7,resultLen) == 11);
}
