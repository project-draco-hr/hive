{
  VectorizedRowBatch batch=makeStringBatchMixedCase();
  StringLower expr=new StringLower(0,1);
  expr.evaluate(batch);
  BytesColumnVector outCol=(BytesColumnVector)batch.cols[1];
  int cmp=StringExpr.compare(mixedUpLower,0,mixedUpLower.length,outCol.vector[0],outCol.start[0],outCol.length[0]);
  Assert.assertEquals(0,cmp);
  Assert.assertTrue(outCol.isNull[2]);
  int cmp2=StringExpr.compare(green,0,green.length,outCol.vector[1],outCol.start[1],outCol.length[1]);
  Assert.assertEquals(0,cmp2);
  batch=makeStringBatchMixedCase();
  batch.cols[0].noNulls=true;
  expr.evaluate(batch);
  outCol=(BytesColumnVector)batch.cols[1];
  cmp=StringExpr.compare(mixedUpLower,0,mixedUpLower.length,outCol.vector[0],outCol.start[0],outCol.length[0]);
  Assert.assertEquals(0,cmp);
  Assert.assertTrue(outCol.noNulls);
  batch=makeStringBatchMixedCase();
  batch.cols[0].isRepeating=true;
  expr.evaluate(batch);
  outCol=(BytesColumnVector)batch.cols[1];
  cmp=StringExpr.compare(mixedUpLower,0,mixedUpLower.length,outCol.vector[0],outCol.start[0],outCol.length[0]);
  Assert.assertEquals(0,cmp);
  Assert.assertTrue(outCol.isRepeating);
  Assert.assertFalse(outCol.noNulls);
  batch=makeStringBatchMixedCase();
  batch.cols[0].isRepeating=true;
  batch.cols[0].noNulls=true;
  expr.evaluate(batch);
  outCol=(BytesColumnVector)batch.cols[1];
  cmp=StringExpr.compare(mixedUpLower,0,mixedUpLower.length,outCol.vector[0],outCol.start[0],outCol.length[0]);
  Assert.assertEquals(0,cmp);
  Assert.assertTrue(outCol.isRepeating);
  Assert.assertTrue(outCol.noNulls);
}
