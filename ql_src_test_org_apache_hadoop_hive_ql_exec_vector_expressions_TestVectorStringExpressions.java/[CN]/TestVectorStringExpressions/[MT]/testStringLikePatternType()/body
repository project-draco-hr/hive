{
  FilterStringColLikeStringScalar expr;
  VectorizedRowBatch vrb=VectorizedRowGroupGenUtil.getVectorizedRowBatch(1,1,1);
  vrb.cols[0]=new BytesColumnVector(1);
  BytesColumnVector bcv=(BytesColumnVector)vrb.cols[0];
  vrb.size=0;
  expr=new FilterStringColLikeStringScalar(0,"abc%".getBytes());
  expr.evaluate(vrb);
  Assert.assertEquals(FilterStringColLikeStringScalar.BeginChecker.class,expr.checker.getClass());
  expr=new FilterStringColLikeStringScalar(0,"%abc".getBytes("UTF-8"));
  expr.evaluate(vrb);
  Assert.assertEquals(FilterStringColLikeStringScalar.EndChecker.class,expr.checker.getClass());
  expr=new FilterStringColLikeStringScalar(0,"%abc%".getBytes());
  expr.evaluate(vrb);
  Assert.assertEquals(FilterStringColLikeStringScalar.MiddleChecker.class,expr.checker.getClass());
  expr=new FilterStringColLikeStringScalar(0,"%abc%de".getBytes());
  expr.evaluate(vrb);
  Assert.assertEquals(FilterStringColLikeStringScalar.ChainedChecker.class,expr.checker.getClass());
  expr=new FilterStringColLikeStringScalar(0,"%abc_%de".getBytes());
  expr.evaluate(vrb);
  Assert.assertEquals(FilterStringColLikeStringScalar.ComplexChecker.class,expr.checker.getClass());
  expr=new FilterStringColLikeStringScalar(0,"abc".getBytes());
  expr.evaluate(vrb);
  Assert.assertEquals(FilterStringColLikeStringScalar.NoneChecker.class,expr.checker.getClass());
}
