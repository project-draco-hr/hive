{
  int largeMaxLength=100;
  byte[] result;
  Assert.assertTrue(StringExpr.characterCount(blue) == 4);
  result=StringExpr.rightTrimAndTruncateScalar(blue,largeMaxLength);
  Assert.assertTrue(Arrays.equals(blue,result));
  Assert.assertTrue(StringExpr.characterCount(redgreen) == 8);
  result=StringExpr.rightTrimAndTruncateScalar(redgreen,largeMaxLength);
  Assert.assertTrue(Arrays.equals(redgreen,result));
  Assert.assertTrue(StringExpr.characterCount(ascii_sentence) == 31);
  result=StringExpr.rightTrimAndTruncateScalar(ascii_sentence,largeMaxLength);
  Assert.assertTrue(Arrays.equals(ascii_sentence,result));
  Assert.assertTrue(StringExpr.characterCount(blanksLeft) == 5);
  result=StringExpr.rightTrimAndTruncateScalar(blanksLeft,largeMaxLength);
  Assert.assertTrue(Arrays.equals(blanksLeft,result));
  Assert.assertTrue(StringExpr.characterCount(blue) == 4);
  result=StringExpr.rightTrimAndTruncateScalar(blue,blue.length);
  Assert.assertTrue(Arrays.equals(blue,result));
  Assert.assertTrue(StringExpr.characterCount(redgreen) == 8);
  result=StringExpr.rightTrimAndTruncateScalar(redgreen,redgreen.length);
  Assert.assertTrue(Arrays.equals(redgreen,result));
  Assert.assertTrue(StringExpr.characterCount(ascii_sentence) == 31);
  result=StringExpr.rightTrimAndTruncateScalar(ascii_sentence,ascii_sentence.length);
  Assert.assertTrue(Arrays.equals(ascii_sentence,result));
  Assert.assertTrue(StringExpr.characterCount(blanksLeft) == 5);
  result=StringExpr.rightTrimAndTruncateScalar(blanksLeft,blanksLeft.length);
  Assert.assertTrue(Arrays.equals(blanksLeft,result));
  result=StringExpr.rightTrimAndTruncateScalar(blue,3);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(blue,3),result));
  result=StringExpr.rightTrimAndTruncateScalar(redgreen,6);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(redgreen,6),result));
  result=StringExpr.rightTrimAndTruncateScalar(ascii_sentence,14);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(ascii_sentence,14),result));
  result=StringExpr.rightTrimAndTruncateScalar(blanksLeft,2);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(blanksLeft,0),result));
  result=StringExpr.rightTrimAndTruncateScalar(blanksRight,4);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(blanksRight,3),result));
  result=StringExpr.rightTrimAndTruncateScalar(blanksBoth,2);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(blanksBoth,0),result));
  result=StringExpr.rightTrimAndTruncateScalar(blankString,1);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(blankString,0),result));
  result=StringExpr.rightTrimAndTruncateScalar(blankRanges,29);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(blankRanges,26),result));
  byte[] scratch=new byte[100];
  byte[] multiByte;
  addMultiByteCharRightPadded1_1(scratch);
  multiByte=Arrays.copyOf(scratch,4);
  Assert.assertTrue(StringExpr.characterCount(multiByte,0,4) == 2);
  result=StringExpr.rightTrimAndTruncateScalar(multiByte,1);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(multiByte,3),result));
  addMultiByteCharRightPadded1_2(scratch);
  multiByte=Arrays.copyOf(scratch,5);
  Assert.assertTrue(StringExpr.characterCount(multiByte,0,5) == 3);
  result=StringExpr.rightTrimAndTruncateScalar(multiByte,2);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(multiByte,4),result));
  addMultiByteCharRightPadded1_3(scratch);
  multiByte=Arrays.copyOf(scratch,9);
  Assert.assertTrue(StringExpr.characterCount(multiByte,0,9) == 4);
  result=StringExpr.rightTrimAndTruncateScalar(multiByte,2);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(multiByte,5),result));
  addMultiByteCharRightPadded1_2(scratch);
  multiByte=Arrays.copyOfRange(scratch,3,3 + 2);
  Assert.assertTrue(StringExpr.characterCount(multiByte) == 2);
  result=StringExpr.rightTrimAndTruncateScalar(multiByte,1);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(multiByte,1),result));
  int sentenceOneLen=addMultiByteCharSentenceOne(scratch,0);
  byte[] sentenceOne=Arrays.copyOf(scratch,sentenceOneLen);
  Assert.assertTrue(StringExpr.characterCount(sentenceOne) == 10);
  result=StringExpr.rightTrimAndTruncateScalar(sentenceOne,8);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(sentenceOne,20),result));
  byte[] sentenceOnePortion=Arrays.copyOf(sentenceOne,sentenceOneLen - 3);
  Assert.assertTrue(StringExpr.characterCount(sentenceOnePortion) == 9);
  result=StringExpr.rightTrimAndTruncateScalar(sentenceOnePortion,3);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(sentenceOnePortion,9),result));
  int sentenceTwoLen=addMultiByteCharSentenceTwo(scratch,0);
  byte[] sentenceTwo=Arrays.copyOf(scratch,sentenceTwoLen);
  Assert.assertTrue(StringExpr.characterCount(sentenceTwo) == 13);
  result=StringExpr.rightTrimAndTruncateScalar(sentenceTwo,9);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(sentenceTwo,16),result));
  byte[] sentenceTwoPortion=Arrays.copyOf(sentenceTwo,sentenceTwoLen - 5);
  Assert.assertTrue(StringExpr.characterCount(sentenceTwoPortion) == 10);
  result=StringExpr.rightTrimAndTruncateScalar(sentenceTwoPortion,6);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(sentenceTwoPortion,11),result));
  int start;
  start=addPads(scratch,0,3);
  int sentenceOnePaddedLeftLen=addMultiByteCharSentenceOne(scratch,start);
  byte[] sentenceOnePaddedLeft=Arrays.copyOf(scratch,sentenceOnePaddedLeftLen);
  Assert.assertTrue(StringExpr.characterCount(sentenceOnePaddedLeft) == 3 + 10);
  result=StringExpr.rightTrimAndTruncateScalar(sentenceOnePaddedLeft,4);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(sentenceOnePaddedLeft,6),result));
  byte[] sentenceOnePaddedLeftPortion=Arrays.copyOf(sentenceOnePaddedLeft,sentenceOnePaddedLeftLen - 3);
  Assert.assertTrue(StringExpr.characterCount(sentenceOnePaddedLeftPortion) == 3 + 9);
  result=StringExpr.rightTrimAndTruncateScalar(sentenceOnePaddedLeftPortion,7);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(sentenceOnePaddedLeftPortion,12),result));
  start=addPads(scratch,0,2);
  int sentenceTwoPaddedLeftLen=addMultiByteCharSentenceTwo(scratch,start);
  byte[] sentenceTwoPaddedLeft=Arrays.copyOf(scratch,sentenceTwoPaddedLeftLen);
  Assert.assertTrue(StringExpr.characterCount(sentenceTwoPaddedLeft) == 2 + 13);
  result=StringExpr.rightTrimAndTruncateScalar(sentenceTwoPaddedLeft,14);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(sentenceTwoPaddedLeft,24),result));
  byte[] sentenceTwoPaddedLeftPortion=Arrays.copyOf(sentenceTwoPaddedLeft,sentenceTwoPaddedLeftLen - 5);
  Assert.assertTrue(StringExpr.characterCount(sentenceTwoPaddedLeftPortion) == 2 + 10);
  result=StringExpr.rightTrimAndTruncateScalar(sentenceTwoPaddedLeftPortion,9);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(sentenceTwoPaddedLeftPortion,15),result));
  start=addMultiByteCharSentenceOne(scratch,0);
  int sentenceOnePaddedRightLen=addPads(scratch,start,4);
  byte[] sentenceOnePaddedRight=Arrays.copyOf(scratch,sentenceOnePaddedRightLen);
  Assert.assertTrue(StringExpr.characterCount(sentenceOnePaddedRight) == 10 + 4);
  result=StringExpr.rightTrimAndTruncateScalar(sentenceOnePaddedRight,1);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(sentenceOnePaddedRight,3),result));
  byte[] sentenceOnePaddedRightPortion=Arrays.copyOf(sentenceOnePaddedRight,sentenceOnePaddedRightLen - 3 - 4);
  Assert.assertTrue(StringExpr.characterCount(sentenceOnePaddedRightPortion) == 9);
  result=StringExpr.rightTrimAndTruncateScalar(sentenceOnePaddedRightPortion,5);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(sentenceOnePaddedRightPortion,13),result));
  start=addMultiByteCharSentenceTwo(scratch,0);
  int sentenceTwoPaddedRightLen=addPads(scratch,start,1);
  byte[] sentenceTwoPaddedRight=Arrays.copyOf(scratch,sentenceTwoPaddedRightLen);
  Assert.assertTrue(StringExpr.characterCount(sentenceTwoPaddedRight) == 13 + 1);
  result=StringExpr.rightTrimAndTruncateScalar(sentenceTwoPaddedRight,6);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(sentenceTwoPaddedRight,11),result));
  byte[] sentenceTwoPaddedRightPortion=Arrays.copyOf(sentenceTwoPaddedRight,sentenceTwoPaddedRightLen - 5 - 1);
  Assert.assertTrue(StringExpr.characterCount(sentenceTwoPaddedRightPortion) == 10);
  result=StringExpr.rightTrimAndTruncateScalar(sentenceTwoPaddedRightPortion,8);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(sentenceTwoPaddedRightPortion,13),result));
  int sentenceBlankRangesLen=addMultiByteCharSentenceBlankRanges(scratch,0);
  byte[] sentenceBlankRanges=Arrays.copyOf(scratch,sentenceBlankRangesLen);
  Assert.assertTrue(StringExpr.characterCount(sentenceBlankRanges) == 17);
  result=StringExpr.rightTrimAndTruncateScalar(sentenceBlankRanges,4);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(sentenceBlankRanges,7),result));
  byte[] sentenceBlankRangesPortion=Arrays.copyOf(sentenceBlankRanges,sentenceBlankRangesLen - 3);
  Assert.assertTrue(StringExpr.characterCount(sentenceBlankRangesPortion) == 16);
  result=StringExpr.rightTrimAndTruncateScalar(sentenceBlankRangesPortion,14);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(sentenceBlankRangesPortion,19),result));
  sentenceBlankRangesPortion=Arrays.copyOfRange(sentenceBlankRanges,7,7 + 17);
  Assert.assertTrue(StringExpr.characterCount(sentenceBlankRangesPortion) == 13);
  result=StringExpr.rightTrimAndTruncateScalar(sentenceBlankRangesPortion,11);
  Assert.assertTrue(Arrays.equals(Arrays.copyOf(sentenceBlankRangesPortion,12),result));
  Assert.assertTrue(StringExpr.characterCount(result) == 8);
}
