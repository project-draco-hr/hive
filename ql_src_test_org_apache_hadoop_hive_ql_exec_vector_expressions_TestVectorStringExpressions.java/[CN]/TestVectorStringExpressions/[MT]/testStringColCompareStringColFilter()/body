{
  VectorizedRowBatch batch;
  VectorExpression expr;
  batch=makeStringBatchForColColCompare();
  expr=new FilterStringColLessStringCol(0,1);
  expr.evaluate(batch);
  Assert.assertEquals(1,batch.size);
  Assert.assertEquals(0,batch.selected[0]);
  batch=makeStringBatchForColColCompare();
  batch.cols[0].noNulls=true;
  batch.cols[1].noNulls=true;
  expr.evaluate(batch);
  Assert.assertEquals(2,batch.size);
  Assert.assertEquals(3,batch.selected[1]);
  batch=makeStringBatchForColColCompare();
  batch.cols[1].noNulls=true;
  expr.evaluate(batch);
  Assert.assertEquals(1,batch.size);
  Assert.assertEquals(0,batch.selected[0]);
  batch=makeStringBatchForColColCompare();
  batch.cols[0].noNulls=true;
  batch.cols[1].isNull[3]=true;
  expr.evaluate(batch);
  Assert.assertEquals(1,batch.size);
  Assert.assertEquals(0,batch.selected[0]);
  batch=makeStringBatchForColColCompare();
  batch.cols[0].isRepeating=true;
  expr.evaluate(batch);
  Assert.assertEquals(3,batch.size);
  Assert.assertEquals(3,batch.selected[2]);
  batch=makeStringBatchForColColCompare();
  batch.cols[1].isRepeating=true;
  expr.evaluate(batch);
  Assert.assertEquals(2,batch.size);
  Assert.assertEquals(1,batch.selected[1]);
  batch=makeStringBatchForColColCompare();
  batch.cols[0].isRepeating=true;
  batch.cols[1].isRepeating=true;
  expr.evaluate(batch);
  Assert.assertEquals(4,batch.size);
  batch=makeStringBatchForColColCompare();
  batch.cols[0].isRepeating=true;
  batch.cols[1].noNulls=true;
  expr.evaluate(batch);
  Assert.assertEquals(3,batch.size);
  Assert.assertEquals(3,batch.selected[2]);
  batch=makeStringBatchForColColCompare();
  batch.cols[0].isRepeating=true;
  batch.cols[1].noNulls=true;
  batch.cols[0].isNull[0]=true;
  expr.evaluate(batch);
  Assert.assertEquals(0,batch.size);
  batch=makeStringBatchForColColCompare();
  batch.cols[1].isRepeating=true;
  batch.cols[1].noNulls=true;
  expr.evaluate(batch);
  Assert.assertEquals(3,batch.size);
  Assert.assertEquals(1,batch.selected[1]);
  batch=makeStringBatchForColColCompare();
  batch.cols[0].isRepeating=true;
  batch.cols[1].isRepeating=true;
  batch.cols[1].noNulls=true;
  expr.evaluate(batch);
  Assert.assertEquals(4,batch.size);
  batch=makeStringBatchForColColCompare();
  batch.cols[0].isRepeating=true;
  batch.cols[0].noNulls=true;
  batch.cols[1].isNull[0]=true;
  expr.evaluate(batch);
  Assert.assertEquals(2,batch.size);
  Assert.assertEquals(3,batch.selected[1]);
  batch=makeStringBatchForColColCompare();
  batch.cols[1].isRepeating=true;
  batch.cols[0].noNulls=true;
  expr.evaluate(batch);
  Assert.assertEquals(3,batch.size);
  Assert.assertEquals(3,batch.selected[2]);
  batch=makeStringBatchForColColCompare();
  batch.cols[1].isRepeating=true;
  batch.cols[0].noNulls=true;
  batch.cols[1].isNull[0]=true;
  expr.evaluate(batch);
  Assert.assertEquals(0,batch.size);
  batch=makeStringBatchForColColCompare();
  batch.cols[0].isRepeating=true;
  batch.cols[1].isRepeating=true;
  batch.cols[0].noNulls=true;
  expr.evaluate(batch);
  Assert.assertEquals(4,batch.size);
  batch=makeStringBatchForColColCompare();
  batch.cols[0].isRepeating=true;
  batch.cols[1].isRepeating=true;
  batch.cols[0].noNulls=true;
  batch.cols[1].isNull[0]=true;
  expr.evaluate(batch);
  Assert.assertEquals(0,batch.size);
}
