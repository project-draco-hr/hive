{
  Preconditions.checkState(PisaTimestamp.validateIntegrity(epochDay1,nanoOfDay1));
  Preconditions.checkState(PisaTimestamp.validateIntegrity(epochDay2,nanoOfDay2));
  long intermediateEpochDay=epochDay1 + epochDay2;
  long intermediateNanoOfDay=nanoOfDay1 + nanoOfDay2;
  long normalizedEpochDay;
  long normalizedNanoOfDay;
  if (intermediateEpochDay > 0 && intermediateNanoOfDay < 0) {
    normalizedEpochDay=intermediateEpochDay - 1;
    normalizedNanoOfDay=intermediateNanoOfDay + NANOSECONDS_PER_DAY;
  }
 else   if (intermediateEpochDay < 0 && intermediateNanoOfDay > 0) {
    normalizedEpochDay=intermediateEpochDay + 1;
    normalizedNanoOfDay=intermediateNanoOfDay - NANOSECONDS_PER_DAY;
  }
 else {
    normalizedEpochDay=intermediateEpochDay;
    normalizedNanoOfDay=intermediateNanoOfDay;
  }
  long resultEpochDay;
  long resultNanoOfDay;
  if (normalizedNanoOfDay >= NANOSECONDS_PER_DAY || normalizedNanoOfDay <= -NANOSECONDS_PER_DAY) {
    resultEpochDay=normalizedEpochDay + normalizedNanoOfDay / NANOSECONDS_PER_DAY;
    resultNanoOfDay=normalizedNanoOfDay % NANOSECONDS_PER_DAY;
  }
 else {
    resultEpochDay=normalizedEpochDay;
    resultNanoOfDay=normalizedNanoOfDay;
  }
  result.update(resultEpochDay,resultNanoOfDay);
}
