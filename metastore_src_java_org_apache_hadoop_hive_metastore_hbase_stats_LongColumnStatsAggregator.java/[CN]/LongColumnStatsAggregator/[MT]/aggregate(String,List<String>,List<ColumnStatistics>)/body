{
  ColumnStatisticsObj statsObj=null;
  boolean doAllPartitionContainStats=partNames.size() == css.size();
  boolean isNDVBitVectorSet=true;
  String colType=null;
  for (  ColumnStatistics cs : css) {
    if (cs.getStatsObjSize() != 1) {
      throw new MetaException("The number of columns should be exactly one in aggrStats, but found " + cs.getStatsObjSize());
    }
    ColumnStatisticsObj cso=cs.getStatsObjIterator().next();
    if (statsObj == null) {
      colType=cso.getColType();
      statsObj=ColumnStatsAggregatorFactory.newColumnStaticsObj(colName,colType,cso.getStatsData().getSetField());
    }
    if (numBitVectors <= 0 || !cso.getStatsData().getLongStats().isSetBitVectors() || cso.getStatsData().getLongStats().getBitVectors().length() == 0) {
      isNDVBitVectorSet=false;
      break;
    }
  }
  ColumnStatisticsData columnStatisticsData=new ColumnStatisticsData();
  if (doAllPartitionContainStats || css.size() < 2) {
    LongColumnStatsData aggregateData=null;
    long lowerBound=0;
    long higherBound=0;
    double densityAvgSum=0.0;
    NumDistinctValueEstimator ndvEstimator=null;
    if (isNDVBitVectorSet) {
      ndvEstimator=new NumDistinctValueEstimator(numBitVectors);
    }
    for (    ColumnStatistics cs : css) {
      ColumnStatisticsObj cso=cs.getStatsObjIterator().next();
      LongColumnStatsData newData=cso.getStatsData().getLongStats();
      if (useDensityFunctionForNDVEstimation) {
        lowerBound=Math.max(lowerBound,newData.getNumDVs());
        higherBound+=newData.getNumDVs();
        densityAvgSum+=(newData.getHighValue() - newData.getLowValue()) / newData.getNumDVs();
      }
      if (isNDVBitVectorSet) {
        ndvEstimator.mergeEstimators(new NumDistinctValueEstimator(newData.getBitVectors(),ndvEstimator.getnumBitVectors()));
      }
      if (aggregateData == null) {
        aggregateData=newData.deepCopy();
      }
 else {
        aggregateData.setLowValue(Math.min(aggregateData.getLowValue(),newData.getLowValue()));
        aggregateData.setHighValue(Math.max(aggregateData.getHighValue(),newData.getHighValue()));
        aggregateData.setNumNulls(aggregateData.getNumNulls() + newData.getNumNulls());
        aggregateData.setNumDVs(Math.max(aggregateData.getNumDVs(),newData.getNumDVs()));
      }
    }
    if (isNDVBitVectorSet) {
      aggregateData.setNumDVs(ndvEstimator.estimateNumDistinctValues());
    }
 else {
      if (useDensityFunctionForNDVEstimation) {
        double densityAvg=densityAvgSum / partNames.size();
        long estimation=(long)((aggregateData.getHighValue() - aggregateData.getLowValue()) / densityAvg);
        if (estimation < lowerBound) {
          aggregateData.setNumDVs(lowerBound);
        }
 else         if (estimation > higherBound) {
          aggregateData.setNumDVs(higherBound);
        }
 else {
          aggregateData.setNumDVs(estimation);
        }
      }
 else {
      }
    }
    columnStatisticsData.setLongStats(aggregateData);
  }
 else {
    Map<String,Integer> indexMap=new HashMap<String,Integer>();
    for (int index=0; index < partNames.size(); index++) {
      indexMap.put(partNames.get(index),index);
    }
    Map<String,Double> adjustedIndexMap=new HashMap<String,Double>();
    Map<String,ColumnStatisticsData> adjustedStatsMap=new HashMap<String,ColumnStatisticsData>();
    double densityAvgSum=0.0;
    if (!isNDVBitVectorSet) {
      for (      ColumnStatistics cs : css) {
        String partName=cs.getStatsDesc().getPartName();
        ColumnStatisticsObj cso=cs.getStatsObjIterator().next();
        LongColumnStatsData newData=cso.getStatsData().getLongStats();
        if (useDensityFunctionForNDVEstimation) {
          densityAvgSum+=(newData.getHighValue() - newData.getLowValue()) / newData.getNumDVs();
        }
        adjustedIndexMap.put(partName,(double)indexMap.get(partName));
        adjustedStatsMap.put(partName,cso.getStatsData());
      }
    }
 else {
      NumDistinctValueEstimator ndvEstimator=new NumDistinctValueEstimator(numBitVectors);
      StringBuilder pseudoPartName=new StringBuilder();
      double pseudoIndexSum=0;
      int length=0;
      int curIndex=-1;
      LongColumnStatsData aggregateData=null;
      for (      ColumnStatistics cs : css) {
        String partName=cs.getStatsDesc().getPartName();
        ColumnStatisticsObj cso=cs.getStatsObjIterator().next();
        LongColumnStatsData newData=cso.getStatsData().getLongStats();
        if (indexMap.get(partName) != curIndex) {
          if (length > 0) {
            adjustedIndexMap.put(pseudoPartName.toString(),pseudoIndexSum / length);
            aggregateData.setNumDVs(ndvEstimator.estimateNumDistinctValues());
            ColumnStatisticsData csd=new ColumnStatisticsData();
            csd.setLongStats(aggregateData);
            adjustedStatsMap.put(pseudoPartName.toString(),csd);
            if (useDensityFunctionForNDVEstimation) {
              densityAvgSum+=(aggregateData.getHighValue() - aggregateData.getLowValue()) / aggregateData.getNumDVs();
            }
            pseudoPartName=new StringBuilder();
            pseudoIndexSum=0;
            length=0;
          }
          aggregateData=null;
        }
        curIndex=indexMap.get(partName);
        pseudoPartName.append(partName);
        pseudoIndexSum+=curIndex;
        length++;
        curIndex++;
        if (aggregateData == null) {
          aggregateData=newData.deepCopy();
        }
 else {
          aggregateData.setLowValue(Math.min(aggregateData.getLowValue(),newData.getLowValue()));
          aggregateData.setHighValue(Math.max(aggregateData.getHighValue(),newData.getHighValue()));
          aggregateData.setNumNulls(aggregateData.getNumNulls() + newData.getNumNulls());
        }
        ndvEstimator.mergeEstimators(new NumDistinctValueEstimator(newData.getBitVectors(),ndvEstimator.getnumBitVectors()));
      }
      if (length > 0) {
        adjustedIndexMap.put(pseudoPartName.toString(),pseudoIndexSum / length);
        aggregateData.setNumDVs(ndvEstimator.estimateNumDistinctValues());
        ColumnStatisticsData csd=new ColumnStatisticsData();
        csd.setLongStats(aggregateData);
        adjustedStatsMap.put(pseudoPartName.toString(),csd);
        if (useDensityFunctionForNDVEstimation) {
          densityAvgSum+=(aggregateData.getHighValue() - aggregateData.getLowValue()) / aggregateData.getNumDVs();
        }
      }
    }
    extrapolate(columnStatisticsData,partNames.size(),css.size(),adjustedIndexMap,adjustedStatsMap,densityAvgSum / adjustedStatsMap.size());
  }
  statsObj.setStatsData(columnStatisticsData);
  return statsObj;
}
