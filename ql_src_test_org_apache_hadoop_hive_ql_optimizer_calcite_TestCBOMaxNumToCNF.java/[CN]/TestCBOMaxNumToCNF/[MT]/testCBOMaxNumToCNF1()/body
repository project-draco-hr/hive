{
  final RelDataTypeFactory typeFactory=new JavaTypeFactoryImpl();
  final RexBuilder rexBuilder=new RexBuilder(typeFactory);
  final RexNode cond=rexBuilder.makeCall(SqlStdOperatorTable.OR,rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.INTEGER),0),rexBuilder.makeLiteral(1,typeFactory.createSqlType(SqlTypeName.INTEGER),false)),rexBuilder.makeCall(SqlStdOperatorTable.AND,rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.INTEGER),0),rexBuilder.makeLiteral(0,typeFactory.createSqlType(SqlTypeName.INTEGER),false)),rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.INTEGER),1),rexBuilder.makeLiteral(8,typeFactory.createSqlType(SqlTypeName.INTEGER),false))));
  final RexNode newCond=HiveRexUtil.toCnf(rexBuilder,maxNumNodesCNF,cond);
  assertEquals(newCond.toString(),"AND(OR(=($0, 1), =($0, 0)), OR(=($0, 1), =($1, 8)))");
}
