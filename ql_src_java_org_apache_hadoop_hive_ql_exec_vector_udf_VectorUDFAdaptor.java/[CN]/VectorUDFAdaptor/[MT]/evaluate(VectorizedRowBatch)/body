{
  if (genericUDF == null) {
    try {
      init();
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  if (childExpressions != null) {
    super.evaluateChildren(batch);
  }
  int[] sel=batch.selected;
  int n=batch.size;
  ColumnVector outV=batch.cols[outputColumn];
  if (outV instanceof BytesColumnVector) {
    ((BytesColumnVector)outV).initBuffer();
  }
  if (n == 0) {
    return;
  }
  batch.cols[outputColumn].noNulls=true;
  if (allInputColsRepeating(batch)) {
    setResult(0,batch);
    batch.cols[outputColumn].isRepeating=true;
    return;
  }
 else {
    batch.cols[outputColumn].isRepeating=false;
  }
  if (batch.selectedInUse) {
    for (int j=0; j != n; j++) {
      int i=sel[j];
      setResult(i,batch);
    }
  }
 else {
    for (int i=0; i != n; i++) {
      setResult(i,batch);
    }
  }
}
