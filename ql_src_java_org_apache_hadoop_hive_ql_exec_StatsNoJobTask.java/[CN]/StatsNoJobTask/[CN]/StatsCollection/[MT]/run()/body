{
  org.apache.hadoop.hive.metastore.api.Partition tPart=partn.getTPartition();
  Map<String,String> parameters=tPart.getParameters();
  try {
    Path dir=new Path(tPart.getSd().getLocation());
    long numRows=0;
    long rawDataSize=0;
    long fileSize=0;
    long numFiles=0;
    FileSystem fs=dir.getFileSystem(conf);
    List<FileStatus> fileList=ShimLoader.getHadoopShims().listLocatedStatus(fs,dir,hiddenFileFilter);
    boolean statsAvailable=false;
    for (    FileStatus file : fileList) {
      if (!file.isDir()) {
        InputFormat<?,?> inputFormat=(InputFormat<?,?>)ReflectionUtils.newInstance(partn.getInputFormatClass(),jc);
        InputSplit dummySplit=new FileSplit(file.getPath(),0,0,new String[]{partn.getLocation()});
        Object recordReader=inputFormat.getRecordReader(dummySplit,jc,Reporter.NULL);
        StatsProvidingRecordReader statsRR;
        if (recordReader instanceof StatsProvidingRecordReader) {
          statsRR=(StatsProvidingRecordReader)recordReader;
          rawDataSize+=statsRR.getStats().getRawDataSize();
          numRows+=statsRR.getStats().getRowCount();
          fileSize+=file.getLen();
          numFiles+=1;
          statsAvailable=true;
        }
      }
    }
    if (statsAvailable) {
      parameters.put(StatsSetupConst.ROW_COUNT,String.valueOf(numRows));
      parameters.put(StatsSetupConst.RAW_DATA_SIZE,String.valueOf(rawDataSize));
      parameters.put(StatsSetupConst.TOTAL_SIZE,String.valueOf(fileSize));
      parameters.put(StatsSetupConst.NUM_FILES,String.valueOf(numFiles));
      parameters.put(StatsSetupConst.STATS_GENERATED_VIA_STATS_TASK,StatsSetupConst.TRUE);
      partUpdates.put(tPart.getSd().getLocation(),new Partition(table,tPart));
      String threadName=Thread.currentThread().getName();
      String msg="Partition " + tableFullName + partn.getSpec()+ " stats: ["+ toString(parameters)+ ']';
      LOG.debug(threadName + ": " + msg);
      console.printInfo(msg);
    }
 else {
      String threadName=Thread.currentThread().getName();
      String msg="Partition " + tableFullName + partn.getSpec()+ " does not provide stats.";
      LOG.debug(threadName + ": " + msg);
    }
  }
 catch (  Exception e) {
    console.printInfo("[Warning] could not update stats for " + tableFullName + partn.getSpec()+ ".","Failed with exception " + e.getMessage() + "\n"+ StringUtils.stringifyException(e));
    if (work.isStatsReliable()) {
      partUpdates.put(tPart.getSd().getLocation(),null);
    }
  }
}
