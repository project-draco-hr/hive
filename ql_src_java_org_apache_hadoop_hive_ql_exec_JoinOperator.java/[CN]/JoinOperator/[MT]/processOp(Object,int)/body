{
  try {
    reportProgress();
    alias=(byte)tag;
    if ((lastAlias == null) || (!lastAlias.equals(alias))) {
      nextSz=joinEmitInterval;
    }
    ArrayList<Object> nr=computeValues(row,joinValues.get(alias),joinValuesObjectInspectors.get(alias));
    if (handleSkewJoin) {
      skewJoinKeyContext.handleSkew(tag);
    }
    int sz=storage.get(alias).size();
    StructObjectInspector soi=(StructObjectInspector)inputObjInspectors[tag];
    StructField sf=soi.getStructFieldRef(Utilities.ReduceField.KEY.toString());
    Object keyObject=soi.getStructFieldData(row,sf);
    if (alias == numAliases - 1 && !(handleSkewJoin && skewJoinKeyContext.currBigKeyTag >= 0)) {
      if (sz == joinEmitInterval) {
        checkAndGenObject();
        storage.get(alias).clear();
      }
    }
 else {
      if (sz == nextSz) {
        LOG.warn("table " + alias + " has "+ sz+ " rows for join key "+ keyObject);
        nextSz=getNextSize(nextSz);
      }
    }
    storage.get(alias).add(nr);
    if (SerDeUtils.hasAnyNullObject(keyObject,sf.getFieldObjectInspector())) {
      endGroup();
      startGroup();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new HiveException(e);
  }
}
