{
  try {
    reportProgress();
    alias=(byte)tag;
    List<Object> nr=getFilteredValue(alias,row);
    if (handleSkewJoin) {
      skewJoinKeyContext.handleSkew(tag);
    }
    long sz=storage[alias].size();
    StructObjectInspector soi=(StructObjectInspector)inputObjInspectors[tag];
    StructField sf=soi.getStructFieldRef(Utilities.ReduceField.KEY.toString());
    List keyObject=(List)soi.getStructFieldData(row,sf);
    if (alias == numAliases - 1 && !(handleSkewJoin && skewJoinKeyContext.currBigKeyTag >= 0) && !hasLeftSemiJoin) {
      if (sz == joinEmitInterval && !hasFilter(alias)) {
        checkAndGenObject();
        storage[alias].clear();
      }
    }
 else {
      if (sz == nextSz) {
        LOG.info("table " + alias + " has "+ sz+ " rows for join key "+ keyObject);
        nextSz=getNextSize(nextSz);
      }
    }
    StructObjectInspector inspector=(StructObjectInspector)sf.getFieldObjectInspector();
    if (SerDeUtils.hasAnyNullObject(keyObject,inspector,nullsafes)) {
      endGroup();
      startGroup();
    }
    storage[alias].add(nr);
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new HiveException(e);
  }
}
