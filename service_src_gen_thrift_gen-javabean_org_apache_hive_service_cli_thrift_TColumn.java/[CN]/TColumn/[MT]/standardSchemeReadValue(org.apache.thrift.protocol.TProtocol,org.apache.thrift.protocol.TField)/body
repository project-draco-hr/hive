{
  _Fields setField=_Fields.findByThriftId(field.id);
  if (setField != null) {
switch (setField) {
case BOOL_COLUMN:
      if (field.type == BOOL_COLUMN_FIELD_DESC.type) {
        List<TBoolValue> boolColumn;
{
          org.apache.thrift.protocol.TList _list46=iprot.readListBegin();
          boolColumn=new ArrayList<TBoolValue>(_list46.size);
          for (int _i47=0; _i47 < _list46.size; ++_i47) {
            TBoolValue _elem48;
            _elem48=new TBoolValue();
            _elem48.read(iprot);
            boolColumn.add(_elem48);
          }
          iprot.readListEnd();
        }
        return boolColumn;
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
        return null;
      }
case BYTE_COLUMN:
    if (field.type == BYTE_COLUMN_FIELD_DESC.type) {
      List<TByteValue> byteColumn;
{
        org.apache.thrift.protocol.TList _list49=iprot.readListBegin();
        byteColumn=new ArrayList<TByteValue>(_list49.size);
        for (int _i50=0; _i50 < _list49.size; ++_i50) {
          TByteValue _elem51;
          _elem51=new TByteValue();
          _elem51.read(iprot);
          byteColumn.add(_elem51);
        }
        iprot.readListEnd();
      }
      return byteColumn;
    }
 else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      return null;
    }
case I16_COLUMN:
  if (field.type == I16_COLUMN_FIELD_DESC.type) {
    List<TI16Value> i16Column;
{
      org.apache.thrift.protocol.TList _list52=iprot.readListBegin();
      i16Column=new ArrayList<TI16Value>(_list52.size);
      for (int _i53=0; _i53 < _list52.size; ++_i53) {
        TI16Value _elem54;
        _elem54=new TI16Value();
        _elem54.read(iprot);
        i16Column.add(_elem54);
      }
      iprot.readListEnd();
    }
    return i16Column;
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
    return null;
  }
case I32_COLUMN:
if (field.type == I32_COLUMN_FIELD_DESC.type) {
  List<TI32Value> i32Column;
{
    org.apache.thrift.protocol.TList _list55=iprot.readListBegin();
    i32Column=new ArrayList<TI32Value>(_list55.size);
    for (int _i56=0; _i56 < _list55.size; ++_i56) {
      TI32Value _elem57;
      _elem57=new TI32Value();
      _elem57.read(iprot);
      i32Column.add(_elem57);
    }
    iprot.readListEnd();
  }
  return i32Column;
}
 else {
  org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  return null;
}
case I64_COLUMN:
if (field.type == I64_COLUMN_FIELD_DESC.type) {
List<TI64Value> i64Column;
{
  org.apache.thrift.protocol.TList _list58=iprot.readListBegin();
  i64Column=new ArrayList<TI64Value>(_list58.size);
  for (int _i59=0; _i59 < _list58.size; ++_i59) {
    TI64Value _elem60;
    _elem60=new TI64Value();
    _elem60.read(iprot);
    i64Column.add(_elem60);
  }
  iprot.readListEnd();
}
return i64Column;
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
case DOUBLE_COLUMN:
if (field.type == DOUBLE_COLUMN_FIELD_DESC.type) {
List<TDoubleValue> doubleColumn;
{
org.apache.thrift.protocol.TList _list61=iprot.readListBegin();
doubleColumn=new ArrayList<TDoubleValue>(_list61.size);
for (int _i62=0; _i62 < _list61.size; ++_i62) {
  TDoubleValue _elem63;
  _elem63=new TDoubleValue();
  _elem63.read(iprot);
  doubleColumn.add(_elem63);
}
iprot.readListEnd();
}
return doubleColumn;
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
case STRING_COLUMN:
if (field.type == STRING_COLUMN_FIELD_DESC.type) {
List<TStringValue> stringColumn;
{
org.apache.thrift.protocol.TList _list64=iprot.readListBegin();
stringColumn=new ArrayList<TStringValue>(_list64.size);
for (int _i65=0; _i65 < _list64.size; ++_i65) {
TStringValue _elem66;
_elem66=new TStringValue();
_elem66.read(iprot);
stringColumn.add(_elem66);
}
iprot.readListEnd();
}
return stringColumn;
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
default :
throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
}
}
 else {
return null;
}
}
