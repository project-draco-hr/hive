{
  _Fields setField=_Fields.findByThriftId(field.id);
  if (setField != null) {
switch (setField) {
case BOOL_COLUMN:
      if (field.type == BOOL_COLUMN_FIELD_DESC.type) {
        List<TBoolValue> boolColumn;
{
          org.apache.thrift.protocol.TList _list36=iprot.readListBegin();
          boolColumn=new ArrayList<TBoolValue>(_list36.size);
          for (int _i37=0; _i37 < _list36.size; ++_i37) {
            TBoolValue _elem38;
            _elem38=new TBoolValue();
            _elem38.read(iprot);
            boolColumn.add(_elem38);
          }
          iprot.readListEnd();
        }
        return boolColumn;
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
        return null;
      }
case BYTE_COLUMN:
    if (field.type == BYTE_COLUMN_FIELD_DESC.type) {
      List<TByteValue> byteColumn;
{
        org.apache.thrift.protocol.TList _list39=iprot.readListBegin();
        byteColumn=new ArrayList<TByteValue>(_list39.size);
        for (int _i40=0; _i40 < _list39.size; ++_i40) {
          TByteValue _elem41;
          _elem41=new TByteValue();
          _elem41.read(iprot);
          byteColumn.add(_elem41);
        }
        iprot.readListEnd();
      }
      return byteColumn;
    }
 else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      return null;
    }
case I16_COLUMN:
  if (field.type == I16_COLUMN_FIELD_DESC.type) {
    List<TI16Value> i16Column;
{
      org.apache.thrift.protocol.TList _list42=iprot.readListBegin();
      i16Column=new ArrayList<TI16Value>(_list42.size);
      for (int _i43=0; _i43 < _list42.size; ++_i43) {
        TI16Value _elem44;
        _elem44=new TI16Value();
        _elem44.read(iprot);
        i16Column.add(_elem44);
      }
      iprot.readListEnd();
    }
    return i16Column;
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
    return null;
  }
case I32_COLUMN:
if (field.type == I32_COLUMN_FIELD_DESC.type) {
  List<TI32Value> i32Column;
{
    org.apache.thrift.protocol.TList _list45=iprot.readListBegin();
    i32Column=new ArrayList<TI32Value>(_list45.size);
    for (int _i46=0; _i46 < _list45.size; ++_i46) {
      TI32Value _elem47;
      _elem47=new TI32Value();
      _elem47.read(iprot);
      i32Column.add(_elem47);
    }
    iprot.readListEnd();
  }
  return i32Column;
}
 else {
  org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  return null;
}
case I64_COLUMN:
if (field.type == I64_COLUMN_FIELD_DESC.type) {
List<TI64Value> i64Column;
{
  org.apache.thrift.protocol.TList _list48=iprot.readListBegin();
  i64Column=new ArrayList<TI64Value>(_list48.size);
  for (int _i49=0; _i49 < _list48.size; ++_i49) {
    TI64Value _elem50;
    _elem50=new TI64Value();
    _elem50.read(iprot);
    i64Column.add(_elem50);
  }
  iprot.readListEnd();
}
return i64Column;
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
case DOUBLE_COLUMN:
if (field.type == DOUBLE_COLUMN_FIELD_DESC.type) {
List<TDoubleValue> doubleColumn;
{
org.apache.thrift.protocol.TList _list51=iprot.readListBegin();
doubleColumn=new ArrayList<TDoubleValue>(_list51.size);
for (int _i52=0; _i52 < _list51.size; ++_i52) {
  TDoubleValue _elem53;
  _elem53=new TDoubleValue();
  _elem53.read(iprot);
  doubleColumn.add(_elem53);
}
iprot.readListEnd();
}
return doubleColumn;
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
case STRING_COLUMN:
if (field.type == STRING_COLUMN_FIELD_DESC.type) {
List<TStringValue> stringColumn;
{
org.apache.thrift.protocol.TList _list54=iprot.readListBegin();
stringColumn=new ArrayList<TStringValue>(_list54.size);
for (int _i55=0; _i55 < _list54.size; ++_i55) {
TStringValue _elem56;
_elem56=new TStringValue();
_elem56.read(iprot);
stringColumn.add(_elem56);
}
iprot.readListEnd();
}
return stringColumn;
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
default :
throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
}
}
 else {
return null;
}
}
