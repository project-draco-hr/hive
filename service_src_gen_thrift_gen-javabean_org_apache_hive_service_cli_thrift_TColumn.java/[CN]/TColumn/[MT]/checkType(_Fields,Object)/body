{
switch (setField) {
case BOOL_COLUMN:
    if (value instanceof List) {
      break;
    }
  throw new ClassCastException("Was expecting value of type List<TBoolValue> for field 'boolColumn', but got " + value.getClass().getSimpleName());
case BYTE_COLUMN:
if (value instanceof List) {
  break;
}
throw new ClassCastException("Was expecting value of type List<TByteValue> for field 'byteColumn', but got " + value.getClass().getSimpleName());
case I16_COLUMN:
if (value instanceof List) {
break;
}
throw new ClassCastException("Was expecting value of type List<TI16Value> for field 'i16Column', but got " + value.getClass().getSimpleName());
case I32_COLUMN:
if (value instanceof List) {
break;
}
throw new ClassCastException("Was expecting value of type List<TI32Value> for field 'i32Column', but got " + value.getClass().getSimpleName());
case I64_COLUMN:
if (value instanceof List) {
break;
}
throw new ClassCastException("Was expecting value of type List<TI64Value> for field 'i64Column', but got " + value.getClass().getSimpleName());
case DOUBLE_COLUMN:
if (value instanceof List) {
break;
}
throw new ClassCastException("Was expecting value of type List<TDoubleValue> for field 'doubleColumn', but got " + value.getClass().getSimpleName());
case STRING_COLUMN:
if (value instanceof List) {
break;
}
throw new ClassCastException("Was expecting value of type List<TStringValue> for field 'stringColumn', but got " + value.getClass().getSimpleName());
default :
throw new IllegalArgumentException("Unknown field id " + setField);
}
}
