{
  Set<Integer> nonCombinablePathIndices=new HashSet<Integer>();
  for (int i=0; i < length; i++) {
    PartitionDesc part=HiveFileFormatUtils.getPartitionDescFromPathRecursively(pathToPartitionInfo,paths[i + start],IOPrepareCache.get().allocatePartitionDescMap());
    Class<? extends InputFormat> inputFormatClass=part.getInputFileFormatClass();
    InputFormat<WritableComparable,Writable> inputFormat=getInputFormatFromCache(inputFormatClass,conf);
    if (inputFormat instanceof AvoidSplitCombination && ((AvoidSplitCombination)inputFormat).shouldSkipCombine(paths[i + start],conf)) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("The path [" + paths[i + start] + "] is being parked for HiveInputFormat.getSplits");
      }
      nonCombinablePathIndices.add(i + start);
    }
  }
  return nonCombinablePathIndices;
}
