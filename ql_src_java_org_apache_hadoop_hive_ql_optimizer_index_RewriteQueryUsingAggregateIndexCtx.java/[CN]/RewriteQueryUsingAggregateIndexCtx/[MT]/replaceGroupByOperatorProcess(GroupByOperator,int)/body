{
  RewriteQueryUsingAggregateIndexCtx rewriteQueryCtx=this;
  if (index == 0) {
    String selReplacementCommand="select sum(`" + rewriteQueryCtx.getAggregateFunction() + "`)"+ " from "+ rewriteQueryCtx.getIndexName()+ " group by "+ rewriteQueryCtx.getIndexKey()+ " ";
    Operator<?> newOperatorTree=RewriteParseContextGenerator.generateOperatorTree(rewriteQueryCtx.getParseContext().getConf(),selReplacementCommand);
    GroupByOperator newGbyOperator=OperatorUtils.findLastOperatorUpstream(newOperatorTree,GroupByOperator.class);
    if (newGbyOperator == null) {
      throw new SemanticException("Error replacing GroupBy operator.");
    }
    ExprNodeColumnDesc aggrExprNode=null;
    GroupByDesc newConf=newGbyOperator.getConf();
    List<AggregationDesc> newAggrList=newConf.getAggregators();
    if (newAggrList != null && newAggrList.size() > 0) {
      for (      AggregationDesc aggregationDesc : newAggrList) {
        rewriteQueryCtx.setEval(aggregationDesc.getGenericUDAFEvaluator());
        aggrExprNode=(ExprNodeColumnDesc)aggregationDesc.getParameters().get(0);
        rewriteQueryCtx.setAggrExprNode(aggrExprNode);
      }
    }
    GroupByDesc oldConf=operator.getConf();
    oldConf.setAggregators((ArrayList<AggregationDesc>)newAggrList);
    operator.setConf(oldConf);
  }
 else {
    GroupByDesc childConf=(GroupByDesc)operator.getConf();
    List<AggregationDesc> childAggrList=childConf.getAggregators();
    if (childAggrList != null && childAggrList.size() > 0) {
      for (      AggregationDesc aggregationDesc : childAggrList) {
        List<ExprNodeDesc> paraList=aggregationDesc.getParameters();
        List<ObjectInspector> parametersOIList=new ArrayList<ObjectInspector>();
        for (        ExprNodeDesc expr : paraList) {
          parametersOIList.add(expr.getWritableObjectInspector());
        }
        GenericUDAFEvaluator evaluator=FunctionRegistry.getGenericUDAFEvaluator("sum",parametersOIList,false,false);
        aggregationDesc.setGenericUDAFEvaluator(evaluator);
        aggregationDesc.setGenericUDAFName("sum");
      }
    }
  }
}
