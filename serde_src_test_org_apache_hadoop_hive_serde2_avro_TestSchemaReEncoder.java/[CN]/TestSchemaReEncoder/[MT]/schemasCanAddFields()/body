{
  String original="{\n" + "    \"namespace\": \"org.apache.hadoop.hive\",\n" + "    \"name\": \"Line\",\n"+ "    \"type\": \"record\",\n"+ "    \"fields\": [\n"+ "        {\n"+ "            \"name\":\"text\",\n"+ "            \"type\":\"string\"\n"+ "        }\n"+ "    ]\n"+ "}";
  String evolved="{\n" + "    \"namespace\": \"org.apache.hadoop.hive\",\n" + "    \"name\": \"Line\",\n"+ "    \"type\": \"record\",\n"+ "    \"fields\": [\n"+ "        {\n"+ "            \"name\":\"text\",\n"+ "            \"type\":\"string\"\n"+ "        },\n"+ "        {\n"+ "            \"name\":\"new_kid\",\n"+ "            \"type\":\"string\",\n"+ "            \"default\":\"Hi!\"\n"+ "        }\n"+ "    ]\n"+ "}";
  Schema originalSchema=Schema.parse(original);
  Schema evolvedSchema=Schema.parse(evolved);
  GenericRecord record=new GenericData.Record(originalSchema);
  record.put("text","it is a far better thing I do, yadda, yadda");
  assertTrue(GenericData.get().validate(originalSchema,record));
  AvroDeserializer.SchemaReEncoder schemaReEncoder=new AvroDeserializer.SchemaReEncoder(record.getSchema(),evolvedSchema);
  GenericRecord r2=schemaReEncoder.reencode(record);
  assertTrue(GenericData.get().validate(evolvedSchema,r2));
  assertEquals("Hi!",r2.get("new_kid").toString());
  String original2="{\n" + "    \"namespace\": \"somebody.else\",\n" + "    \"name\": \"something_else\",\n"+ "    \"type\": \"record\",\n"+ "    \"fields\": [\n"+ "        {\n"+ "            \"name\":\"a\",\n"+ "            \"type\":\"int\"\n"+ "        }\n"+ "    ]\n"+ "}";
  String evolved2="{\n" + "    \"namespace\": \"somebody.else\",\n" + "    \"name\": \"something_else\",\n"+ "    \"type\": \"record\",\n"+ "    \"fields\": [\n"+ "        {\n"+ "            \"name\":\"a\",\n"+ "            \"type\":\"int\"\n"+ "        },\n"+ "        {\n"+ "            \"name\":\"b\",\n"+ "            \"type\":\"long\",\n"+ "            \"default\":42\n"+ "        }\n"+ "    ]\n"+ "}";
  Schema originalSchema2=Schema.parse(original2);
  Schema evolvedSchema2=Schema.parse(evolved2);
  record=new GenericData.Record(originalSchema2);
  record.put("a",19);
  assertTrue(GenericData.get().validate(originalSchema2,record));
  schemaReEncoder=new AvroDeserializer.SchemaReEncoder(record.getSchema(),evolvedSchema2);
  r2=schemaReEncoder.reencode(record);
  assertTrue(GenericData.get().validate(evolvedSchema2,r2));
  assertEquals(42l,r2.get("b"));
}
