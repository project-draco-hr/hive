{
  Path tmpURI=getExecContext().getLocalWork().getTmpPath();
  LOG.info("Temp URI for side table: " + tmpURI);
  for (byte tag=0; tag < mapJoinTables.length; tag++) {
    MapJoinPersistableTableContainer tableContainer=mapJoinTables[tag];
    if (tableContainer == null) {
      continue;
    }
    String bigBucketFileName=getExecContext().getCurrentBigBucketFile();
    String fileName=getExecContext().getLocalWork().getBucketFileName(bigBucketFileName);
    String dumpFilePrefix=conf.getDumpFilePrefix();
    Path path=Utilities.generatePath(tmpURI,dumpFilePrefix,tag,fileName);
    FileSystem fs=path.getFileSystem(hconf);
    short replication=fs.getDefaultReplication(path);
    if (HiveConf.getVar(hconf,ConfVars.HIVE_EXECUTION_ENGINE).equals("spark")) {
      fs.mkdirs(path);
      path=new Path(path,getOperatorId() + "-" + (fileIndex++));
      int numOfPartitions=10;
      replication=(short)Math.min(10,numOfPartitions);
    }
    console.printInfo(Utilities.now() + "\tDump the side-table for tag: " + tag+ " with group count: "+ tableContainer.size()+ " into file: "+ path);
    ObjectOutputStream out=new ObjectOutputStream(new BufferedOutputStream(fs.create(path,replication),4096));
    try {
      mapJoinTableSerdes[tag].persist(out,tableContainer);
    }
  finally {
      out.close();
    }
    tableContainer.clear();
    FileStatus status=fs.getFileStatus(path);
    console.printInfo(Utilities.now() + "\tUploaded 1 File to: " + path+ " ("+ status.getLen()+ " bytes)");
  }
}
