{
  boolean isSilent=HiveConf.getBoolVar(hconf,HiveConf.ConfVars.HIVESESSIONSILENT);
  console=new LogHelper(LOG,isSilent);
  memoryExhaustionHandler=new MapJoinMemoryExhaustionHandler(console,conf.getHashtableMemoryUsage());
  posBigTableAlias=conf.getPosBigTable();
  order=conf.getTagOrder();
  this.hconf=hconf;
  filterMaps=conf.getFilterMap();
  int tagLen=conf.getTagLength();
  joinKeys=new List[tagLen];
  JoinUtil.populateJoinKeyValue(joinKeys,conf.getKeys(),posBigTableAlias);
  joinKeysObjectInspectors=JoinUtil.getObjectInspectorsFromEvaluators(joinKeys,inputObjInspectors,posBigTableAlias,tagLen);
  joinValues=new List[tagLen];
  JoinUtil.populateJoinKeyValue(joinValues,conf.getExprs(),posBigTableAlias);
  joinValuesObjectInspectors=JoinUtil.getObjectInspectorsFromEvaluators(joinValues,inputObjInspectors,posBigTableAlias,tagLen);
  joinFilters=new List[tagLen];
  JoinUtil.populateJoinKeyValue(joinFilters,conf.getFilters(),posBigTableAlias);
  joinFilterObjectInspectors=JoinUtil.getObjectInspectorsFromEvaluators(joinFilters,inputObjInspectors,posBigTableAlias,tagLen);
  if (!conf.isNoOuterJoin()) {
    for (    Byte alias : order) {
      if (alias == posBigTableAlias || joinValues[alias] == null) {
        continue;
      }
      List<ObjectInspector> rcOIs=joinValuesObjectInspectors[alias];
      if (filterMaps != null && filterMaps[alias] != null) {
        rcOIs=new ArrayList<ObjectInspector>(rcOIs);
        rcOIs.add(PrimitiveObjectInspectorFactory.writableShortObjectInspector);
      }
    }
  }
  mapJoinTables=new MapJoinTableContainer[tagLen];
  mapJoinTableSerdes=new MapJoinTableContainerSerDe[tagLen];
  int hashTableThreshold=HiveConf.getIntVar(hconf,HiveConf.ConfVars.HIVEHASHTABLETHRESHOLD);
  float hashTableLoadFactor=HiveConf.getFloatVar(hconf,HiveConf.ConfVars.HIVEHASHTABLELOADFACTOR);
  hashTableScale=HiveConf.getLongVar(hconf,HiveConf.ConfVars.HIVEHASHTABLESCALE);
  if (hashTableScale <= 0) {
    hashTableScale=1;
  }
  try {
    TableDesc keyTableDesc=conf.getKeyTblDesc();
    SerDe keySerde=(SerDe)ReflectionUtils.newInstance(keyTableDesc.getDeserializerClass(),null);
    keySerde.initialize(null,keyTableDesc.getProperties());
    MapJoinObjectSerDeContext keyContext=new MapJoinObjectSerDeContext(keySerde,false);
    for (    Byte pos : order) {
      if (pos == posBigTableAlias) {
        continue;
      }
      mapJoinTables[pos]=new HashMapWrapper(hashTableThreshold,hashTableLoadFactor);
      TableDesc valueTableDesc=conf.getValueTblFilteredDescs().get(pos);
      SerDe valueSerDe=(SerDe)ReflectionUtils.newInstance(valueTableDesc.getDeserializerClass(),null);
      valueSerDe.initialize(null,valueTableDesc.getProperties());
      mapJoinTableSerdes[pos]=new MapJoinTableContainerSerDe(keyContext,new MapJoinObjectSerDeContext(valueSerDe,hasFilter(pos)));
    }
  }
 catch (  SerDeException e) {
    throw new HiveException(e);
  }
}
