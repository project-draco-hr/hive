{
  boolean isSilent=HiveConf.getBoolVar(hconf,HiveConf.ConfVars.HIVESESSIONSILENT);
  console=new LogHelper(LOG,isSilent);
  numMapRowsRead=0;
  firstRow=true;
  posBigTableAlias=conf.getPosBigTable();
  order=conf.getTagOrder();
  numAliases=conf.getExprs().size();
  this.hconf=hconf;
  totalSz=0;
  noOuterJoin=conf.isNoOuterJoin();
  filterMaps=conf.getFilterMap();
  int tagLen=conf.getTagLength();
  joinKeys=new List[tagLen];
  JoinUtil.populateJoinKeyValue(joinKeys,conf.getKeys(),posBigTableAlias);
  joinKeysObjectInspectors=JoinUtil.getObjectInspectorsFromEvaluators(joinKeys,inputObjInspectors,posBigTableAlias,tagLen);
  joinKeysStandardObjectInspectors=JoinUtil.getStandardObjectInspectors(joinKeysObjectInspectors,posBigTableAlias,tagLen);
  joinValues=new List[tagLen];
  JoinUtil.populateJoinKeyValue(joinValues,conf.getExprs(),posBigTableAlias);
  joinValuesObjectInspectors=JoinUtil.getObjectInspectorsFromEvaluators(joinValues,inputObjInspectors,posBigTableAlias,tagLen);
  joinValuesStandardObjectInspectors=JoinUtil.getStandardObjectInspectors(joinValuesObjectInspectors,posBigTableAlias,tagLen);
  joinFilters=new List[tagLen];
  JoinUtil.populateJoinKeyValue(joinFilters,conf.getFilters(),posBigTableAlias);
  joinFilterObjectInspectors=JoinUtil.getObjectInspectorsFromEvaluators(joinFilters,inputObjInspectors,posBigTableAlias,tagLen);
  if (noOuterJoin) {
    rowContainerStandardObjectInspectors=joinValuesStandardObjectInspectors;
  }
 else {
    List<ObjectInspector>[] rowContainerObjectInspectors=new List[tagLen];
    for (    Byte alias : order) {
      if (alias == posBigTableAlias) {
        continue;
      }
      List<ObjectInspector> rcOIs=joinValuesObjectInspectors[alias];
      if (filterMaps != null && filterMaps[alias] != null) {
        rcOIs=new ArrayList<ObjectInspector>(rcOIs);
        rcOIs.add(PrimitiveObjectInspectorFactory.writableShortObjectInspector);
      }
      rowContainerObjectInspectors[alias]=rcOIs;
    }
    rowContainerStandardObjectInspectors=getStandardObjectInspectors(rowContainerObjectInspectors,tagLen);
  }
  metadataValueTag=new int[numAliases];
  for (int pos=0; pos < numAliases; pos++) {
    metadataValueTag[pos]=-1;
  }
  mapJoinTables=new HashMapWrapper[tagLen];
  int hashTableThreshold=HiveConf.getIntVar(hconf,HiveConf.ConfVars.HIVEHASHTABLETHRESHOLD);
  float hashTableLoadFactor=HiveConf.getFloatVar(hconf,HiveConf.ConfVars.HIVEHASHTABLELOADFACTOR);
  float hashTableMaxMemoryUsage=this.getConf().getHashtableMemoryUsage();
  hashTableScale=HiveConf.getLongVar(hconf,HiveConf.ConfVars.HIVEHASHTABLESCALE);
  if (hashTableScale <= 0) {
    hashTableScale=1;
  }
  for (  Byte pos : order) {
    if (pos == posBigTableAlias) {
      continue;
    }
    HashMapWrapper<AbstractMapJoinKey,MapJoinObjectValue> hashTable=new HashMapWrapper<AbstractMapJoinKey,MapJoinObjectValue>(hashTableThreshold,hashTableLoadFactor,hashTableMaxMemoryUsage);
    mapJoinTables[pos]=hashTable;
  }
}
