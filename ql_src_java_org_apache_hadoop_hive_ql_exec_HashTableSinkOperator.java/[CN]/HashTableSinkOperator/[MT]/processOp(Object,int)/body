{
  alias=(byte)tag;
  MapJoinKey key=JoinUtil.computeMapJoinKeys(null,row,joinKeys[alias],joinKeysObjectInspectors[alias]);
  Object[] value=EMPTY_OBJECT_ARRAY;
  if ((hasFilter(alias) && filterMaps[alias].length > 0) || joinValues[alias].size() > 0) {
    value=JoinUtil.computeMapJoinValues(row,joinValues[alias],joinValuesObjectInspectors[alias],joinFilters[alias],joinFilterObjectInspectors[alias],filterMaps == null ? null : filterMaps[alias]);
  }
  MapJoinTableContainer tableContainer=mapJoinTables[alias];
  MapJoinRowContainer rowContainer=tableContainer.get(key);
  if (rowContainer == null) {
    if (value.length != 0) {
      rowContainer=new MapJoinEagerRowContainer();
      rowContainer.add(value);
    }
 else {
      rowContainer=EMPTY_ROW_CONTAINER;
    }
    rowNumber++;
    if (rowNumber > hashTableScale && rowNumber % hashTableScale == 0) {
      memoryExhaustionHandler.checkMemoryStatus(tableContainer.size(),rowNumber);
    }
    tableContainer.put(key,rowContainer);
  }
 else   if (rowContainer == EMPTY_ROW_CONTAINER) {
    rowContainer=rowContainer.copy();
    rowContainer.add(value);
    tableContainer.put(key,rowContainer);
  }
 else {
    rowContainer.add(value);
  }
}
