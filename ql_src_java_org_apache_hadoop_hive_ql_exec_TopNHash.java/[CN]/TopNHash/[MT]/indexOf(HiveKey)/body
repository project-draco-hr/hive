{
  int size=size();
  if (usage > threshold) {
    return excluded == 0 ? DISABLE : FLUSH;
  }
  int index=size < topN ? size : evicted;
  keys[index]=Arrays.copyOf(key.getBytes(),key.getLength());
  hashes[index]=key.hashCode();
  if (!store(index)) {
    return FORWARD;
  }
  if (size == topN) {
    evicted=removeBiggest();
    if (index == evicted) {
      excluded++;
      return EXCLUDED;
    }
    removed(evicted);
  }
  return index;
}
