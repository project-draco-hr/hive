{
  int size=indexes.size();
  int index=size < topN ? size : evicted;
  keys[index]=Arrays.copyOf(key.getBytes(),key.getLength());
  Integer collisionIndex=indexes.store(index);
  if (null != collisionIndex) {
    ++batchNumForwards;
    results[batchIndex]=MAY_FORWARD - collisionIndex;
    return;
  }
  indexToBatchIndex[index]=batchIndex;
  results[batchIndex]=index;
  if (size != topN)   return;
  evicted=indexes.removeBiggest();
  if (index == evicted) {
    excluded++;
    results[batchIndex]=EXCLUDED;
    indexToBatchIndex[index]=-1;
    return;
  }
  removed(evicted);
  int evictedBatchIndex=indexToBatchIndex[evicted];
  if (evictedBatchIndex >= 0) {
    results[evictedBatchIndex]=EXCLUDED;
    indexToBatchIndex[evicted]=-1;
  }
  if (batchNumForwards > 0) {
    int evictedForward=(MAY_FORWARD - evicted);
    boolean forwardRemoved=false;
    for (int i=evictedBatchIndex + 1; i < batchIndex; ++i) {
      if (results[i] == evictedForward) {
        results[i]=EXCLUDED;
        forwardRemoved=true;
      }
    }
    if (forwardRemoved) {
      --batchNumForwards;
    }
  }
}
