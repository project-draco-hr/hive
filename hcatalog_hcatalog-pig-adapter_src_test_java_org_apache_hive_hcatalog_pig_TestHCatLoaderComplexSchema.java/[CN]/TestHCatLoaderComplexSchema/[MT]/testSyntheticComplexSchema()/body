{
  assumeTrue(!TestUtil.shouldSkip(storageFormat,DISABLED_STORAGE_FORMATS));
  String pigSchema="a: " + "(" + "aa: chararray, "+ "ab: long, "+ "ac: map[], "+ "ad: { t: (ada: long) }, "+ "ae: { t: (aea:long, aeb: ( aeba: chararray, aebb: long)) },"+ "af: (afa: chararray, afb: long) "+ "),"+ "b: chararray, "+ "c: long, "+ "d:  { t: (da:long, db: ( dba: chararray, dbb: long), dc: { t: (dca: long) } ) } ";
  String tableSchema="a struct<" + "aa: string, " + "ab: bigint, "+ "ac: map<string, string>, "+ "ad: array<struct<ada:bigint>>, "+ "ae: array<struct<aea:bigint, aeb: struct<aeba: string, aebb: bigint>>>,"+ "af: struct<afa: string, afb: bigint> "+ ">, "+ "b string, "+ "c bigint, "+ "d array<struct<da: bigint, db: struct<dba:string, dbb:bigint>, dc: array<struct<dca: bigint>>>>";
  String tableSchema2="a struct<" + "aa: string, " + "ab: bigint, "+ "ac: map<string, string>, "+ "ad: array<bigint>, "+ "ae: array<struct<aea:bigint, aeb: struct<aeba: string, aebb: bigint>>>,"+ "af: struct<afa: string, afb: bigint> "+ ">, "+ "b string, "+ "c bigint, "+ "d array<struct<da: bigint, db: struct<dba:string, dbb:bigint>, dc: array<bigint>>>";
  List<Tuple> data=new ArrayList<Tuple>();
  for (int i=0; i < 10; i++) {
    Tuple t=t(t("aa test",2l,new HashMap<String,String>(){
{
        put("ac test1","test 1");
        put("ac test2","test 2");
      }
    }
,b(t(3l),t(4l)),b(t(5l,t("aeba test",6l))),t("afa test",7l)),"b test",(long)i,b(t(8l,t("dba test",9l),b(t(10l)))));
    data.add(t);
  }
  verifyWriteRead("testSyntheticComplexSchema",pigSchema,tableSchema,data,true);
  verifyWriteRead("testSyntheticComplexSchema",pigSchema,tableSchema,data,false);
  verifyWriteRead("testSyntheticComplexSchema2",pigSchema,tableSchema2,data,true);
  verifyWriteRead("testSyntheticComplexSchema2",pigSchema,tableSchema2,data,false);
}
