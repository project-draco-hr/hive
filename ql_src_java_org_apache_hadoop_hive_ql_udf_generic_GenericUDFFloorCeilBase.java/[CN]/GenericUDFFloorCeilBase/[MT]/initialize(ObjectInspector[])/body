{
  if (arguments.length != 1) {
    throw new UDFArgumentException(opName + " requires one argument.");
  }
  Category category=arguments[0].getCategory();
  if (category != Category.PRIMITIVE) {
    throw new UDFArgumentTypeException(0,"The " + GenericUDFUtils.getOrdinal(1) + " argument of "+ opName+ "  is expected to a "+ Category.PRIMITIVE.toString().toLowerCase()+ " type, but "+ category.toString().toLowerCase()+ " is found");
  }
  inputOI=(PrimitiveObjectInspector)arguments[0];
  if (!FunctionRegistry.isNumericType(inputOI.getTypeInfo())) {
    throw new UDFArgumentTypeException(0,"The " + GenericUDFUtils.getOrdinal(1) + " argument of "+ opName+ "  is expected to a "+ "numeric type, but "+ inputOI.getTypeName()+ " is found");
  }
  PrimitiveTypeInfo resultTypeInfo=null;
  PrimitiveTypeInfo inputTypeInfo=inputOI.getTypeInfo();
  if (inputTypeInfo instanceof DecimalTypeInfo) {
    DecimalTypeInfo decTypeInfo=(DecimalTypeInfo)inputTypeInfo;
    resultTypeInfo=TypeInfoFactory.getDecimalTypeInfo(decTypeInfo.precision() - decTypeInfo.scale() + 1,0);
    ObjectInspector decimalOI=PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(decTypeInfo);
    converter=ObjectInspectorConverters.getConverter(inputOI,decimalOI);
  }
 else {
    resultTypeInfo=TypeInfoFactory.longTypeInfo;
    ObjectInspector doubleObjectInspector=PrimitiveObjectInspectorFactory.writableDoubleObjectInspector;
    converter=ObjectInspectorConverters.getConverter(inputOI,doubleObjectInspector);
  }
  return resultOI=PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(resultTypeInfo);
}
