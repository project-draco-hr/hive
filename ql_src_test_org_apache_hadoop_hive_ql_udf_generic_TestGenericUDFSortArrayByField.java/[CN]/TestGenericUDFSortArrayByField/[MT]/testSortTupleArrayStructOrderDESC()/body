{
  List<ObjectInspector> tuple=new ArrayList<ObjectInspector>();
  tuple.add(PrimitiveObjectInspectorFactory.writableStringObjectInspector);
  tuple.add(ObjectInspectorFactory.getStandardListObjectInspector(PrimitiveObjectInspectorFactory.writableIntObjectInspector));
  ObjectInspector field=PrimitiveObjectInspectorFactory.getPrimitiveWritableConstantObjectInspector(TypeInfoFactory.stringTypeInfo,new Text("Scores"));
  ObjectInspector orderField=PrimitiveObjectInspectorFactory.getPrimitiveWritableConstantObjectInspector(TypeInfoFactory.stringTypeInfo,new Text("desc"));
  ObjectInspector[] inputOIs={ObjectInspectorFactory.getStandardListObjectInspector(ObjectInspectorFactory.getStandardStructObjectInspector(asList("Student","Scores"),tuple)),field,orderField};
  udf.initialize(inputOIs);
  Object i1=asList(new Text("Foo"),asList(new IntWritable(4),new IntWritable(3),new IntWritable(2),new IntWritable(1)));
  Object i2=asList(new Text("Boo"),asList(new IntWritable(2),new IntWritable(3),new IntWritable(2),new IntWritable(1)));
  Object i3=asList(new Text("Tom"),asList(new IntWritable(10),new IntWritable(3),new IntWritable(2),new IntWritable(1)));
  GenericUDF.DeferredJavaObject[] argas={new GenericUDF.DeferredJavaObject(asList(i1,i2,i3)),new GenericUDF.DeferredJavaObject(field),new GenericUDF.DeferredJavaObject(orderField)};
  runAndVerify(argas,asList(i3,i1,i2));
}
