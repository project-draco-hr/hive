{
  DynamicSerDeNamespace jjtn000=new DynamicSerDeNamespace(JJTNAMESPACE);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  try {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case tok_namespace:
      jj_consume_token(tok_namespace);
    jj_consume_token(IDENTIFIER);
  jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
if (true) return jjtn000;
}
break;
case tok_cpp_namespace:
jj_consume_token(tok_cpp_namespace);
jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
if (true) return jjtn000;
}
break;
case tok_cpp_include:
jj_consume_token(tok_cpp_include);
jj_consume_token(tok_literal);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
if (true) return jjtn000;
}
break;
case tok_php_namespace:
jj_consume_token(tok_php_namespace);
jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
if (true) return jjtn000;
}
break;
case tok_py_module:
jj_consume_token(tok_py_module);
jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
if (true) return jjtn000;
}
break;
case tok_perl_package:
jj_consume_token(tok_perl_package);
jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
if (true) return jjtn000;
}
break;
case tok_ruby_namespace:
jj_consume_token(tok_ruby_namespace);
jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
if (true) return jjtn000;
}
break;
case tok_smalltalk_category:
jj_consume_token(tok_smalltalk_category);
jj_consume_token(tok_st_identifier);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
if (true) return jjtn000;
}
break;
case tok_smalltalk_prefix:
jj_consume_token(tok_smalltalk_prefix);
jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
if (true) return jjtn000;
}
break;
case tok_java_package:
jj_consume_token(tok_java_package);
jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
if (true) return jjtn000;
}
break;
case tok_cocoa_prefix:
jj_consume_token(tok_cocoa_prefix);
jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
if (true) return jjtn000;
}
break;
case tok_xsd_namespace:
jj_consume_token(tok_xsd_namespace);
jj_consume_token(tok_literal);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
if (true) return jjtn000;
}
break;
case tok_csharp_namespace:
jj_consume_token(tok_csharp_namespace);
jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
if (true) return jjtn000;
}
break;
default :
jj_la1[3]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
  finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
}
}
throw new Error("Missing return statement in function");
}
