{
  TaskWrapper r1=createTaskWrapper(createRequest(1,2,5,100),false,100000);
  TaskWrapper r2=createTaskWrapper(createRequest(2,4,4,200),false,100000);
  TaskWrapper r3=createTaskWrapper(createRequest(3,6,3,300),false,1000000);
  TaskWrapper r4=createTaskWrapper(createRequest(4,8,2,400),false,1000000);
  TaskWrapper r5=createTaskWrapper(createRequest(5,10,1,500),false,1000000);
  EvictingPriorityBlockingQueue<TaskWrapper> queue=new EvictingPriorityBlockingQueue<>(new FirstInFirstOutComparator(),4);
  assertNull(queue.offer(r1));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r2));
  assertEquals(r2,queue.peek());
  assertNull(queue.offer(r3));
  assertEquals(r3,queue.peek());
  assertNull(queue.offer(r4));
  assertEquals(r4,queue.peek());
  assertEquals(r1,queue.offer(r5));
  assertEquals(r5,queue.take());
  assertEquals(r4,queue.take());
  assertEquals(r3,queue.take());
  assertEquals(r2,queue.take());
  r1=createTaskWrapper(createRequest(1,2,5,100),true,100000);
  r2=createTaskWrapper(createRequest(2,4,4,200),true,100000);
  r3=createTaskWrapper(createRequest(3,6,3,300),true,1000000);
  r4=createTaskWrapper(createRequest(4,8,2,400),true,1000000);
  r5=createTaskWrapper(createRequest(5,10,1,500),true,1000000);
  queue=new EvictingPriorityBlockingQueue(new FirstInFirstOutComparator(),4);
  assertNull(queue.offer(r1));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r2));
  assertEquals(r2,queue.peek());
  assertNull(queue.offer(r3));
  assertEquals(r3,queue.peek());
  assertNull(queue.offer(r4));
  assertEquals(r4,queue.peek());
  assertEquals(r1,queue.offer(r5));
  assertEquals(r5,queue.take());
  assertEquals(r4,queue.take());
  assertEquals(r3,queue.take());
  assertEquals(r2,queue.take());
  r1=createTaskWrapper(createRequest(1,1,5,100),true,100000);
  r2=createTaskWrapper(createRequest(2,1,4,200),false,100000);
  r3=createTaskWrapper(createRequest(3,1,3,300),true,1000000);
  r4=createTaskWrapper(createRequest(4,1,2,400),false,1000000);
  r5=createTaskWrapper(createRequest(5,10,1,500),true,1000000);
  queue=new EvictingPriorityBlockingQueue(new FirstInFirstOutComparator(),4);
  assertNull(queue.offer(r1));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r2));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r3));
  assertEquals(r3,queue.peek());
  assertNull(queue.offer(r4));
  assertEquals(r3,queue.peek());
  assertEquals(r2,queue.offer(r5));
  assertEquals(r5,queue.take());
  assertEquals(r3,queue.take());
  assertEquals(r1,queue.take());
  assertEquals(r4,queue.take());
  r1=createTaskWrapper(createRequest(1,2,5,100),true,100000);
  r2=createTaskWrapper(createRequest(2,4,4,200),false,100000);
  r3=createTaskWrapper(createRequest(3,6,3,300),true,1000000);
  r4=createTaskWrapper(createRequest(4,8,2,400),false,1000000);
  r5=createTaskWrapper(createRequest(5,10,1,500),true,1000000);
  queue=new EvictingPriorityBlockingQueue(new FirstInFirstOutComparator(),4);
  assertNull(queue.offer(r1));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r2));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r3));
  assertEquals(r3,queue.peek());
  assertNull(queue.offer(r4));
  assertEquals(r3,queue.peek());
  assertEquals(r2,queue.offer(r5));
  assertEquals(r5,queue.take());
  assertEquals(r3,queue.take());
  assertEquals(r1,queue.take());
  assertEquals(r4,queue.take());
  r1=createTaskWrapper(createRequest(1,2,5,100),true,100000);
  r2=createTaskWrapper(createRequest(2,4,4,200),false,100000);
  r3=createTaskWrapper(createRequest(3,6,3,300),false,1000000);
  r4=createTaskWrapper(createRequest(4,8,2,400),false,1000000);
  r5=createTaskWrapper(createRequest(5,10,1,500),true,1000000);
  queue=new EvictingPriorityBlockingQueue(new FirstInFirstOutComparator(),4);
  assertNull(queue.offer(r1));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r2));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r3));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r4));
  assertEquals(r1,queue.peek());
  assertEquals(r2,queue.offer(r5));
  assertEquals(r5,queue.take());
  assertEquals(r1,queue.take());
  assertEquals(r4,queue.take());
  assertEquals(r3,queue.take());
  r1=createTaskWrapper(createRequest(1,2,5,100),false,100000);
  r2=createTaskWrapper(createRequest(2,4,4,200),true,100000);
  r3=createTaskWrapper(createRequest(3,6,3,300),true,1000000);
  r4=createTaskWrapper(createRequest(4,8,2,400),true,1000000);
  r5=createTaskWrapper(createRequest(5,10,1,500),true,1000000);
  queue=new EvictingPriorityBlockingQueue(new FirstInFirstOutComparator(),4);
  assertNull(queue.offer(r1));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r2));
  assertEquals(r2,queue.peek());
  assertNull(queue.offer(r3));
  assertEquals(r3,queue.peek());
  assertNull(queue.offer(r4));
  assertEquals(r4,queue.peek());
  assertEquals(r1,queue.offer(r5));
  assertEquals(r5,queue.take());
  assertEquals(r4,queue.take());
  assertEquals(r3,queue.take());
  assertEquals(r2,queue.take());
  r1=createTaskWrapper(createRequest(1,2,5,100),false,100000);
  r2=createTaskWrapper(createRequest(2,4,4,200),true,100000);
  r3=createTaskWrapper(createRequest(3,6,3,300),true,1000000);
  r4=createTaskWrapper(createRequest(4,8,2,400),true,1000000);
  r5=createTaskWrapper(createRequest(5,10,2,500),true,1000000);
  queue=new EvictingPriorityBlockingQueue(new FirstInFirstOutComparator(),4);
  assertNull(queue.offer(r1));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r2));
  assertEquals(r2,queue.peek());
  assertNull(queue.offer(r3));
  assertEquals(r3,queue.peek());
  assertNull(queue.offer(r4));
  assertEquals(r4,queue.peek());
  assertEquals(r1,queue.offer(r5));
  assertEquals(r4,queue.take());
  assertEquals(r5,queue.take());
  assertEquals(r3,queue.take());
  assertEquals(r2,queue.take());
}
