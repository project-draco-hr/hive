{
  JoinPredicateInfo joinPredInfo=join.getJoinPredicateInfo();
  List<ImmutableIntList> joinKeysInChildren=new ArrayList<ImmutableIntList>();
  joinKeysInChildren.add(ImmutableIntList.copyOf(joinPredInfo.getProjsFromLeftPartOfJoinKeysInChildSchema()));
  joinKeysInChildren.add(ImmutableIntList.copyOf(joinPredInfo.getProjsFromRightPartOfJoinKeysInChildSchema()));
  for (int i=0; i < join.getInputs().size(); i++) {
    RelNode input=join.getInputs().get(i);
    boolean orderFound=join.getSortedInputs().get(i);
    if (!orderFound) {
      return false;
    }
    RelDistribution distribution=RelMetadataQuery.distribution(input);
    if (distribution.getType() != Type.HASH_DISTRIBUTED) {
      return false;
    }
    if (!distribution.getKeys().containsAll(joinKeysInChildren.get(i))) {
      return false;
    }
  }
  return true;
}
