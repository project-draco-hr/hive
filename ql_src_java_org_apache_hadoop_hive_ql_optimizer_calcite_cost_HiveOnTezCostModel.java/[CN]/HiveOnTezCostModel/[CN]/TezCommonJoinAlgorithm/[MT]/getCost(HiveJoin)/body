{
  RelMetadataQuery mq=RelMetadataQuery.instance();
  final Double leftRCount=mq.getRowCount(join.getLeft());
  final Double rightRCount=mq.getRowCount(join.getRight());
  if (leftRCount == null || rightRCount == null) {
    return null;
  }
  final double rCount=leftRCount + rightRCount;
  ImmutableList<Double> cardinalities=new ImmutableList.Builder<Double>().add(leftRCount).add(rightRCount).build();
  double cpuCost;
  try {
    cpuCost=algoUtils.computeSortMergeCPUCost(cardinalities,join.getSortedInputs());
  }
 catch (  CalciteSemanticException e) {
    LOG.trace("Failed to compute sort merge cpu cost ",e);
    return null;
  }
  final Double leftRAverageSize=mq.getAverageRowSize(join.getLeft());
  final Double rightRAverageSize=mq.getAverageRowSize(join.getRight());
  if (leftRAverageSize == null || rightRAverageSize == null) {
    return null;
  }
  ImmutableList<Pair<Double,Double>> relationInfos=new ImmutableList.Builder<Pair<Double,Double>>().add(new Pair<Double,Double>(leftRCount,leftRAverageSize)).add(new Pair<Double,Double>(rightRCount,rightRAverageSize)).build();
  final double ioCost=algoUtils.computeSortMergeIOCost(relationInfos);
  return HiveCost.FACTORY.makeCost(rCount,cpuCost,ioCost);
}
