{
  int numSel=0;
  if (allMatchCount > 0 && bigTableValueExpressions != null) {
    performValueExpressions(batch,allMatchs,allMatchCount);
  }
  for (int i=0; i < equalKeySeriesCount; i++) {
    int hashMapResultIndex=equalKeySeriesHashMapResultIndices[i];
    VectorMapJoinHashMapResult hashMapResult=hashMapResults[hashMapResultIndex];
    int allMatchesIndex=equalKeySeriesAllMatchIndices[i];
    boolean isSingleValue=equalKeySeriesIsSingleValue[i];
    int duplicateCount=equalKeySeriesDuplicateCounts[i];
    if (isSingleValue) {
      numSel=generateHashMapResultSingleValue(batch,hashMapResult,allMatchs,allMatchesIndex,duplicateCount,numSel);
    }
 else {
      generateHashMapResultMultiValue(batch,hashMapResult,allMatchs,allMatchesIndex,duplicateCount);
    }
  }
  if (spillCount > 0) {
    spillHashMapBatch(batch,(VectorMapJoinHashTableResult[])hashMapResults,spills,spillHashMapResultIndices,spillCount);
  }
  return numSel;
}
