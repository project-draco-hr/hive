{
  pGraphContext=pctx;
  ReduceSinkDeduplicateProcCtx cppCtx=new ReduceSinkDeduplicateProcCtx(pGraphContext);
  boolean mergeJoins=!pctx.getConf().getBoolVar(HIVECONVERTJOIN) && !pctx.getConf().getBoolVar(HIVECONVERTJOINNOCONDITIONALTASK) && !pctx.getConf().getBoolVar(ConfVars.HIVE_CONVERT_JOIN_BUCKET_MAPJOIN_TEZ)&& !pctx.getConf().getBoolVar(ConfVars.HIVEDYNAMICPARTITIONHASHJOIN);
  Map<Rule,NodeProcessor> opRules=new LinkedHashMap<Rule,NodeProcessor>();
  opRules.put(new RuleRegExp("R1",RS + "%.*%" + RS+ "%"),ReduceSinkDeduplicateProcFactory.getReducerReducerProc());
  opRules.put(new RuleRegExp("R2",RS + "%" + GBY+ "%.*%"+ RS+ "%"),ReduceSinkDeduplicateProcFactory.getGroupbyReducerProc());
  if (mergeJoins) {
    opRules.put(new RuleRegExp("R3",JOIN + "%.*%" + RS+ "%"),ReduceSinkDeduplicateProcFactory.getJoinReducerProc());
  }
  Dispatcher disp=new DefaultRuleDispatcher(ReduceSinkDeduplicateProcFactory.getDefaultProc(),opRules,cppCtx);
  GraphWalker ogw=new DefaultGraphWalker(disp);
  ArrayList<Node> topNodes=new ArrayList<Node>();
  topNodes.addAll(pGraphContext.getTopOps().values());
  ogw.startWalking(topNodes,null);
  return pGraphContext;
}
