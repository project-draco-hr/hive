{
  List<Operator<?>> parents=pJoin.getParentOperators();
  ReduceSinkOperator[] pRSs=parents.toArray(new ReduceSinkOperator[parents.size()]);
  ReduceSinkDesc cRSc=cRS.getConf();
  for (  ReduceSinkOperator pRSNs : pRSs) {
    ReduceSinkDesc pRSNc=pRSNs.getConf();
    if (cRSc.getKeyCols().size() < pRSNc.getKeyCols().size()) {
      return false;
    }
    if (cRSc.getPartitionCols().size() != pRSNc.getPartitionCols().size()) {
      return false;
    }
    Integer moveReducerNumTo=checkNumReducer(cRSc.getNumReducers(),pRSNc.getNumReducers());
    if (moveReducerNumTo == null || moveReducerNumTo > 0 && cRSc.getNumReducers() < minReducer) {
      return false;
    }
    Integer moveRSOrderTo=checkOrder(true,cRSc.getOrder(),pRSNc.getOrder(),cRSc.getNullOrder(),pRSNc.getNullOrder());
    if (moveRSOrderTo == null) {
      return false;
    }
  }
  boolean[] sorted=CorrelationUtilities.getSortedTags(pJoin);
  int cKeySize=cRSc.getKeyCols().size();
  for (int i=0; i < cKeySize; i++) {
    ExprNodeDesc cexpr=cRSc.getKeyCols().get(i);
    ExprNodeDesc[] pexprs=new ExprNodeDesc[pRSs.length];
    for (int tag=0; tag < pRSs.length; tag++) {
      pexprs[tag]=pRSs[tag].getConf().getKeyCols().get(i);
    }
    int found=CorrelationUtilities.indexOf(cexpr,pexprs,cRS,pRSs,sorted);
    if (found != i) {
      return false;
    }
  }
  int cPartSize=cRSc.getPartitionCols().size();
  for (int i=0; i < cPartSize; i++) {
    ExprNodeDesc cexpr=cRSc.getPartitionCols().get(i);
    ExprNodeDesc[] pexprs=new ExprNodeDesc[pRSs.length];
    for (int tag=0; tag < pRSs.length; tag++) {
      pexprs[tag]=pRSs[tag].getConf().getPartitionCols().get(i);
    }
    int found=CorrelationUtilities.indexOf(cexpr,pexprs,cRS,pRSs,sorted);
    if (found != i) {
      return false;
    }
  }
  for (  ReduceSinkOperator pRS : pRSs) {
    pRS.getConf().setNumReducers(cRS.getConf().getNumReducers());
  }
  return true;
}
