{
  int[] result=checkStatus(cRS,pRS,minReducer);
  if (result == null) {
    return false;
  }
  if (result[0] > 0) {
    List<ExprNodeDesc> childKCs=cRS.getConf().getKeyCols();
    pRS.getConf().setKeyCols(ExprNodeDescUtils.backtrack(childKCs,cRS,pRS));
  }
  if (result[1] < 0) {
    List<ExprNodeDesc> childPCs=cRS.getConf().getPartitionCols();
    if (childPCs != null && !childPCs.isEmpty()) {
      pRS.getConf().setPartitionCols(ExprNodeDescUtils.backtrack(childPCs,cRS,pRS));
    }
  }
 else   if (result[1] > 0) {
    List<ExprNodeDesc> parentPCs=pRS.getConf().getPartitionCols();
    if (parentPCs == null || parentPCs.isEmpty()) {
      ArrayList<ExprNodeDesc> childPCs=cRS.getConf().getPartitionCols();
      pRS.getConf().setPartitionCols(ExprNodeDescUtils.backtrack(childPCs,cRS,pRS));
    }
  }
  if (result[2] > 0) {
    if (result[0] <= 0) {
      throw new SemanticException("Sorting columns and order don't match. " + "Try set " + HiveConf.ConfVars.HIVEOPTREDUCEDEDUPLICATION + "=false;");
    }
    pRS.getConf().setOrder(cRS.getConf().getOrder());
    pRS.getConf().setNullOrder(cRS.getConf().getNullOrder());
  }
  if (result[3] > 0) {
    pRS.getConf().setNumReducers(cRS.getConf().getNumReducers());
  }
  if (result[4] > 0) {
    if (pRS.getConf().getKeyCols() != null && pRS.getConf().getKeyCols().size() == 0 && cRS.getConf().getKeyCols() != null && cRS.getConf().getKeyCols().size() == 0) {
      TableDesc keyTable=PlanUtils.getReduceKeyTableDesc(new ArrayList<FieldSchema>(),pRS.getConf().getOrder(),pRS.getConf().getNullOrder());
      pRS.getConf().setKeySerializeInfo(keyTable);
    }
  }
  return true;
}
