{
  driver.run("drop table junit_unparted");
  String createTable="create table junit_unparted(a int) partitioned by (b string) stored as RCFILE " + "tblproperties('hcat.isd'='" + RCFileInputDriver.class.getName() + "',"+ "'"+ HCatConstants.HCAT_OSD_CLASS+ "'='org.apache.hcatalog.rcfile.RCFileOutputDriver') ";
  int retCode=driver.run(createTable).getResponseCode();
  if (retCode != 0) {
    throw new IOException("Failed to create table.");
  }
  MiniCluster.deleteFile(cluster,fileName);
  int LOOP_SIZE=11;
  String[] input=new String[LOOP_SIZE];
  for (int i=0; i < LOOP_SIZE; i++) {
    input[i]=i + "";
  }
  MiniCluster.createInputFile(cluster,fileName,input);
  PigServer server=new PigServer(ExecType.LOCAL,props);
  UDFContext.getUDFContext().setClientSystemProps();
  server.registerQuery("A = load '" + fullFileName + "' as (a:int);");
  server.registerQuery("store A into 'default.junit_unparted' using " + HCatStorer.class.getName() + "('b=1');");
  server.registerQuery("B = load 'default.junit_unparted' using " + HCatLoader.class.getName() + "();");
  Iterator<Tuple> itr=server.openIterator("B");
  int i=0;
  while (itr.hasNext()) {
    Tuple t=itr.next();
    assertEquals(2,t.size());
    assertEquals(t.get(0),i);
    assertEquals(t.get(1),"1");
    i++;
  }
  assertFalse(itr.hasNext());
  assertEquals(11,i);
  MiniCluster.deleteFile(cluster,fileName);
}
