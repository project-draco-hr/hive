{
switch (schema.getCategory()) {
case STRUCT:
    return nextStruct(vector,row,(StructTypeInfo)schema,previous);
case UNION:
  return nextUnion(vector,row,(UnionTypeInfo)schema,previous);
case LIST:
return nextList(vector,row,(ListTypeInfo)schema,previous);
case MAP:
return nextMap(vector,row,(MapTypeInfo)schema,previous);
case PRIMITIVE:
{
PrimitiveTypeInfo pschema=(PrimitiveTypeInfo)schema;
switch (pschema.getPrimitiveCategory()) {
case BOOLEAN:
return nextBoolean(vector,row,previous);
case BYTE:
return nextByte(vector,row,previous);
case SHORT:
return nextShort(vector,row,previous);
case INT:
return nextInt(vector,row,previous);
case LONG:
return nextLong(vector,row,previous);
case FLOAT:
return nextFloat(vector,row,previous);
case DOUBLE:
return nextDouble(vector,row,previous);
case STRING:
return nextString(vector,row,previous);
case CHAR:
return nextChar(vector,row,((CharTypeInfo)pschema).getLength(),previous);
case VARCHAR:
return nextVarchar(vector,row,((VarcharTypeInfo)pschema).getLength(),previous);
case BINARY:
return nextBinary(vector,row,previous);
case DECIMAL:
return nextDecimal(vector,row,previous);
case DATE:
return nextDate(vector,row,previous);
case TIMESTAMP:
return nextTimestamp(vector,row,previous);
default :
throw new IllegalArgumentException("Unknown type " + schema);
}
}
default :
throw new IllegalArgumentException("Unknown type " + schema);
}
}
