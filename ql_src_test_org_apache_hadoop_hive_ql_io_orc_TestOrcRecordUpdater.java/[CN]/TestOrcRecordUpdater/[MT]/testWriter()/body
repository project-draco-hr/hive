{
  Path root=new Path(workDir,"testWriter");
  Configuration conf=new Configuration();
  FileSystem fs=FileSystem.getLocal(conf).getRaw();
  ObjectInspector inspector;
synchronized (TestOrcFile.class) {
    inspector=ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,ObjectInspectorFactory.ObjectInspectorOptions.JAVA);
  }
  AcidOutputFormat.Options options=new AcidOutputFormat.Options(conf).filesystem(fs).bucket(10).writingBase(false).minimumTransactionId(10).maximumTransactionId(19).inspector(inspector).reporter(Reporter.NULL).finalDestination(root);
  RecordUpdater updater=new OrcRecordUpdater(root,options);
  updater.insert(11,new MyRow("first"));
  updater.insert(11,new MyRow("second"));
  updater.insert(11,new MyRow("third"));
  updater.flush();
  updater.insert(12,new MyRow("fourth"));
  updater.insert(12,new MyRow("fifth"));
  updater.flush();
  assertEquals(5L,updater.getStats().getRowCount());
  Path bucketPath=AcidUtils.createFilename(root,options);
  Path sidePath=OrcAcidUtils.getSideFile(bucketPath);
  DataInputStream side=fs.open(sidePath);
  long len=side.readLong();
  Reader reader=OrcFile.createReader(bucketPath,new OrcFile.ReaderOptions(conf).filesystem(fs).maxLength(len));
  assertEquals(3,reader.getNumberOfRows());
  len=side.readLong();
  side.close();
  reader=OrcFile.createReader(bucketPath,new OrcFile.ReaderOptions(conf).filesystem(fs).maxLength(len));
  assertEquals(5,reader.getNumberOfRows());
  RecordReader rows=reader.rows();
  assertEquals(true,rows.hasNext());
  OrcStruct row=(OrcStruct)rows.next(null);
  assertEquals(OrcRecordUpdater.INSERT_OPERATION,OrcRecordUpdater.getOperation(row));
  assertEquals(11,OrcRecordUpdater.getCurrentTransaction(row));
  assertEquals(11,OrcRecordUpdater.getOriginalTransaction(row));
  assertEquals(10,OrcRecordUpdater.getBucket(row));
  assertEquals(0,OrcRecordUpdater.getRowId(row));
  assertEquals("first",OrcRecordUpdater.getRow(row).getFieldValue(0).toString());
  assertEquals(true,rows.hasNext());
  row=(OrcStruct)rows.next(null);
  assertEquals(1,OrcRecordUpdater.getRowId(row));
  assertEquals(10,OrcRecordUpdater.getBucket(row));
  assertEquals("second",OrcRecordUpdater.getRow(row).getFieldValue(0).toString());
  assertEquals(true,rows.hasNext());
  row=(OrcStruct)rows.next(null);
  assertEquals(2,OrcRecordUpdater.getRowId(row));
  assertEquals(10,OrcRecordUpdater.getBucket(row));
  assertEquals("third",OrcRecordUpdater.getRow(row).getFieldValue(0).toString());
  assertEquals(true,rows.hasNext());
  row=(OrcStruct)rows.next(null);
  assertEquals(12,OrcRecordUpdater.getCurrentTransaction(row));
  assertEquals(12,OrcRecordUpdater.getOriginalTransaction(row));
  assertEquals(10,OrcRecordUpdater.getBucket(row));
  assertEquals(0,OrcRecordUpdater.getRowId(row));
  assertEquals("fourth",OrcRecordUpdater.getRow(row).getFieldValue(0).toString());
  assertEquals(true,rows.hasNext());
  row=(OrcStruct)rows.next(null);
  assertEquals(1,OrcRecordUpdater.getRowId(row));
  assertEquals("fifth",OrcRecordUpdater.getRow(row).getFieldValue(0).toString());
  assertEquals(false,rows.hasNext());
  updater.insert(20,new MyRow("sixth"));
  updater.close(false);
  reader=OrcFile.createReader(bucketPath,new OrcFile.ReaderOptions(conf).filesystem(fs));
  assertEquals(6,reader.getNumberOfRows());
  assertEquals(6L,updater.getStats().getRowCount());
  assertEquals(false,fs.exists(sidePath));
}
