{
  Path root=new Path(workDir,"testUpdates");
  Configuration conf=new Configuration();
  FileSystem fs=root.getFileSystem(conf);
  ObjectInspector inspector;
synchronized (TestOrcFile.class) {
    inspector=ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,ObjectInspectorFactory.ObjectInspectorOptions.JAVA);
  }
  AcidOutputFormat.Options options=new AcidOutputFormat.Options(conf).filesystem(fs).bucket(20).writingBase(false).minimumTransactionId(100).maximumTransactionId(100).inspector(inspector).reporter(Reporter.NULL);
  RecordUpdater updater=new OrcRecordUpdater(root,options);
  updater.update(100,10,30,new MyRow("update"));
  updater.delete(100,40,60);
  updater.close(false);
  Path bucketPath=AcidUtils.createFilename(root,options);
  Reader reader=OrcFile.createReader(bucketPath,new OrcFile.ReaderOptions(conf).filesystem(fs));
  assertEquals(2,reader.getNumberOfRows());
  RecordReader rows=reader.rows();
  assertEquals(true,rows.hasNext());
  OrcStruct row=(OrcStruct)rows.next(null);
  assertEquals(OrcRecordUpdater.UPDATE_OPERATION,OrcRecordUpdater.getOperation(row));
  assertEquals(100,OrcRecordUpdater.getCurrentTransaction(row));
  assertEquals(10,OrcRecordUpdater.getOriginalTransaction(row));
  assertEquals(20,OrcRecordUpdater.getBucket(row));
  assertEquals(30,OrcRecordUpdater.getRowId(row));
  assertEquals("update",OrcRecordUpdater.getRow(row).getFieldValue(0).toString());
  assertEquals(true,rows.hasNext());
  row=(OrcStruct)rows.next(null);
  assertEquals(100,OrcRecordUpdater.getCurrentTransaction(row));
  assertEquals(40,OrcRecordUpdater.getOriginalTransaction(row));
  assertEquals(20,OrcRecordUpdater.getBucket(row));
  assertEquals(60,OrcRecordUpdater.getRowId(row));
  assertEquals(null,OrcRecordUpdater.getRow(row));
  assertEquals(false,rows.hasNext());
}
