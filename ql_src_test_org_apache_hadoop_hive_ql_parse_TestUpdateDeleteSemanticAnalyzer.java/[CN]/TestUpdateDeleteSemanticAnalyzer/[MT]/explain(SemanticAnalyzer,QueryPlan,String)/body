{
  FileSystem fs=FileSystem.get(conf);
  File f=File.createTempFile("TestSemanticAnalyzer","explain");
  Path tmp=new Path(f.getPath());
  fs.create(tmp);
  fs.deleteOnExit(tmp);
  ExplainWork work=new ExplainWork(tmp,sem.getParseContext(),sem.getRootTasks(),sem.getFetchTask(),astStringTree,sem,true,false,false,false,false);
  ExplainTask task=new ExplainTask();
  task.setWork(work);
  task.initialize(conf,plan,null);
  task.execute(null);
  FSDataInputStream in=fs.open(tmp);
  StringBuilder builder=new StringBuilder();
  final int bufSz=4096;
  byte[] buf=new byte[bufSz];
  long pos=0L;
  while (true) {
    int bytesRead=in.read(pos,buf,0,bufSz);
    if (bytesRead > 0) {
      pos+=bytesRead;
      builder.append(new String(buf,0,bytesRead));
    }
 else {
      in.close();
      break;
    }
  }
  return builder.toString().replaceAll("pfile:/.*\n","pfile:MASKED-OUT\n").replaceAll("location file:/.*\n","location file:MASKED-OUT\n").replaceAll("file:/.*\n","file:MASKED-OUT\n").replaceAll("transient_lastDdlTime.*\n","transient_lastDdlTime MASKED-OUT\n");
}
