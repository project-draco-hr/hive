{
  RandomByteArrayStream randomByteArrayStream=new RandomByteArrayStream(random);
  VectorMapJoinRowBytesContainer vectorMapJoinRowBytesContainer=new VectorMapJoinRowBytesContainer();
  int count=Math.min(maxCount,random.nextInt(500));
  for (int i=0; i < count; i++) {
    byte[] bytes=randomByteArrayStream.next();
    Output output=vectorMapJoinRowBytesContainer.getOuputForRowBytes();
    output.write(bytes);
    vectorMapJoinRowBytesContainer.finishRow();
  }
  vectorMapJoinRowBytesContainer.prepareForReading();
  for (int i=0; i < count; i++) {
    if (!vectorMapJoinRowBytesContainer.readNext()) {
      assertTrue(false);
    }
    byte[] readBytes=vectorMapJoinRowBytesContainer.currentBytes();
    int readOffset=vectorMapJoinRowBytesContainer.currentOffset();
    int readLength=vectorMapJoinRowBytesContainer.currentLength();
    byte[] expectedBytes=randomByteArrayStream.get(i);
    if (readLength != expectedBytes.length) {
      assertTrue(false);
    }
    for (int j=0; j < readLength; j++) {
      byte readByte=readBytes[readOffset + j];
      byte expectedByte=expectedBytes[j];
      if (readByte != expectedByte) {
        assertTrue(false);
      }
    }
  }
}
