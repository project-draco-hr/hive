{
  QBJoinTree jT=new QBJoinTree();
  JoinCond[] condn=new JoinCond[1];
  condn[0]=new JoinCond(0,1,type);
  if (leftTree == null) {
    jT.setLeftAlias(leftAlias);
    String[] leftAliases=new String[1];
    leftAliases[0]=leftAlias;
    jT.setLeftAliases(leftAliases);
  }
 else {
    jT.setJoinSrc(leftTree);
    String[] leftChildAliases=leftTree.getLeftAliases();
    String leftAliases[]=new String[leftChildAliases.length + 1];
    for (int i=0; i < leftChildAliases.length; i++) {
      leftAliases[i]=leftChildAliases[i];
    }
    leftAliases[leftChildAliases.length]=leftTree.getRightAliases()[0];
    jT.setLeftAliases(leftAliases);
  }
  String[] rightAliases=new String[1];
  rightAliases[0]=rightAlias;
  jT.setRightAliases(rightAliases);
  String[] children=new String[2];
  children[0]=leftAlias;
  children[1]=rightAlias;
  jT.setBaseSrc(children);
  ArrayList<ArrayList<ASTNode>> expressions=new ArrayList<ArrayList<ASTNode>>();
  expressions.add(new ArrayList<ASTNode>());
  expressions.add(new ArrayList<ASTNode>());
  jT.setExpressions(expressions);
  ArrayList<Boolean> nullsafes=new ArrayList<Boolean>();
  jT.setNullSafes(nullsafes);
  ArrayList<ArrayList<ASTNode>> filters=new ArrayList<ArrayList<ASTNode>>();
  filters.add(new ArrayList<ASTNode>());
  filters.add(new ArrayList<ASTNode>());
  jT.setFilters(filters);
  jT.setFilterMap(new int[2][]);
  ArrayList<ArrayList<ASTNode>> filtersForPushing=new ArrayList<ArrayList<ASTNode>>();
  filtersForPushing.add(new ArrayList<ASTNode>());
  filtersForPushing.add(new ArrayList<ASTNode>());
  jT.setFiltersForPushing(filtersForPushing);
  return jT;
}
