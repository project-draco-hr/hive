{
  VectorizedRowBatch overflowBatch;
  Map<Integer,String> scratchColumnTypeMap=vOutContext.getScratchColumnTypeMap();
  int maxColumn=0;
  for (int i=0; i < outputProjection.length; i++) {
    int outputColumn=outputProjection[i];
    if (maxColumn < outputColumn) {
      maxColumn=outputColumn;
    }
  }
  for (  int outputColumn : scratchColumnTypeMap.keySet()) {
    if (maxColumn < outputColumn) {
      maxColumn=outputColumn;
    }
  }
  overflowBatch=new VectorizedRowBatch(maxColumn + 1);
  for (int i=0; i < outputProjection.length; i++) {
    int outputColumn=outputProjection[i];
    String typeName=outputTypeNames[i];
    allocateOverflowBatchColumnVector(overflowBatch,outputColumn,typeName);
  }
  for (  int outputColumn : scratchColumnTypeMap.keySet()) {
    String typeName=scratchColumnTypeMap.get(outputColumn);
    allocateOverflowBatchColumnVector(overflowBatch,outputColumn,typeName);
  }
  overflowBatch.projectedColumns=outputProjection;
  overflowBatch.projectionSize=outputProjection.length;
  overflowBatch.reset();
  return overflowBatch;
}
