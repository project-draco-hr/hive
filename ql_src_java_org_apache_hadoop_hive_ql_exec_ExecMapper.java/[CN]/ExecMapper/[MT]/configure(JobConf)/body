{
  try {
    init();
    jc=job;
    mapredWork mrwork=Utilities.getMapRedWork(job);
    mo=new MapOperator();
    mo.setConf(mrwork);
    mapredLocalWork mlo=mrwork.getMapLocalWork();
    if (mlo != null) {
      fetchOperators=new HashMap<String,FetchOperator>();
      Map<String,fetchWork> aliasToFetchWork=mlo.getAliasToFetchWork();
      Iterator<Map.Entry<String,fetchWork>> fetchWorkSet=aliasToFetchWork.entrySet().iterator();
      while (fetchWorkSet.hasNext()) {
        Map.Entry<String,fetchWork> entry=fetchWorkSet.next();
        String alias=entry.getKey();
        fetchWork fWork=entry.getValue();
        fetchOperators.put(alias,new FetchOperator(fWork,job));
        l4j.info("fetchoperator for " + alias + " initialized");
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
