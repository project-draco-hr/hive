{
  try {
    l4j.info("conf classpath = " + Arrays.asList(((URLClassLoader)job.getClassLoader()).getURLs()));
    l4j.info("thread classpath = " + Arrays.asList(((URLClassLoader)Thread.currentThread().getContextClassLoader()).getURLs()));
  }
 catch (  Exception e) {
    l4j.info("cannot get classpath: " + e.getMessage());
  }
  try {
    jc=job;
    mapredWork mrwork=Utilities.getMapRedWork(job);
    mo=new MapOperator();
    mo.setConf(mrwork);
    mo.setChildren(job);
    l4j.info(mo.dump(0));
    mo.initialize(jc,null);
    mapredLocalWork localWork=mrwork.getMapLocalWork();
    if (localWork == null) {
      return;
    }
    fetchOperators=new HashMap<String,FetchOperator>();
    for (    Map.Entry<String,fetchWork> entry : localWork.getAliasToFetchWork().entrySet()) {
      fetchOperators.put(entry.getKey(),new FetchOperator(entry.getValue(),job));
      l4j.info("fetchoperator for " + entry.getKey() + " created");
    }
    for (    Map.Entry<String,FetchOperator> entry : fetchOperators.entrySet()) {
      Operator<? extends Serializable> forwardOp=localWork.getAliasToWork().get(entry.getKey());
      forwardOp.initialize(jc,new ObjectInspector[]{entry.getValue().getOutputObjectInspector()});
      l4j.info("fetchoperator for " + entry.getKey() + " initialized");
    }
  }
 catch (  Throwable e) {
    abort=true;
    if (e instanceof OutOfMemoryError) {
      throw (OutOfMemoryError)e;
    }
 else {
      throw new RuntimeException("Map operator initialization failed",e);
    }
  }
}
