{
  if (oc == null) {
    oc=output;
    rp=reporter;
    mo.setOutputCollector(oc);
    mo.setReporter(rp);
  }
  if (inputFileChanged()) {
    if (this.localWork != null && (localWork.getInputFileChangeSensitive() || this.lastInputFile == null)) {
      processMapLocalWork(localWork.getInputFileChangeSensitive());
    }
    this.lastInputFile=HiveConf.getVar(jc,HiveConf.ConfVars.HADOOPMAPFILENAME);
  }
  try {
    if (mo.getDone()) {
      done=true;
    }
 else {
      mo.process((Writable)value);
      if (l4j.isInfoEnabled()) {
        numRows++;
        if (numRows == nextCntr) {
          long used_memory=memoryMXBean.getHeapMemoryUsage().getUsed();
          l4j.info("ExecMapper: processing " + numRows + " rows: used memory = "+ used_memory);
          nextCntr=getNextCntr(numRows);
        }
      }
    }
  }
 catch (  Throwable e) {
    abort=true;
    if (e instanceof OutOfMemoryError) {
      throw (OutOfMemoryError)e;
    }
 else {
      l4j.fatal(StringUtils.stringifyException(e));
      throw new RuntimeException(e);
    }
  }
}
