{
  LOG.info("Starting cleaning for " + ci.getFullPartitionName());
  try {
    Table t=resolveTable(ci);
    if (t == null) {
      LOG.info("Unable to find table " + ci.getFullTableName() + ", assuming it was dropped");
      txnHandler.markCleaned(ci);
      return;
    }
    Partition p=null;
    if (ci.partName != null) {
      p=resolvePartition(ci);
      if (p == null) {
        LOG.info("Unable to find partition " + ci.getFullPartitionName() + ", assuming it was dropped");
        txnHandler.markCleaned(ci);
        return;
      }
    }
    StorageDescriptor sd=resolveStorageDescriptor(t,p);
    final String location=sd.getLocation();
    final ValidTxnList txnList=ci.highestTxnId > 0 ? new ValidReadTxnList(new long[0],ci.highestTxnId) : new ValidReadTxnList();
    if (runJobAsSelf(ci.runAs)) {
      removeFiles(location,txnList);
    }
 else {
      LOG.info("Cleaning as user " + ci.runAs + " for "+ ci.getFullPartitionName());
      UserGroupInformation ugi=UserGroupInformation.createProxyUser(ci.runAs,UserGroupInformation.getLoginUser());
      ugi.doAs(new PrivilegedExceptionAction<Object>(){
        @Override public Object run() throws Exception {
          removeFiles(location,txnList);
          return null;
        }
      }
);
    }
    txnHandler.markCleaned(ci);
  }
 catch (  Exception e) {
    LOG.error("Caught exception when cleaning, unable to complete cleaning of " + ci + " "+ StringUtils.stringifyException(e));
    txnHandler.markFailed(ci);
  }
}
