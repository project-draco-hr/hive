{
  if (cleanerCheckInterval == 0) {
    cleanerCheckInterval=conf.getTimeVar(HiveConf.ConfVars.HIVE_COMPACTOR_CLEANER_RUN_INTERVAL,TimeUnit.MILLISECONDS);
  }
  do {
    boolean setLooped=!looped.get();
    TxnStore.MutexAPI.LockHandle handle=null;
    long startedAt=-1;
    try {
      handle=txnHandler.getMutexAPI().acquireLock(TxnStore.MUTEX_KEY.Cleaner.name());
      startedAt=System.currentTimeMillis();
      List<CompactionInfo> toClean=txnHandler.findReadyToClean();
{
        Set<Long> currentToCleanSet=new HashSet<>();
        for (        CompactionInfo ci : toClean) {
          currentToCleanSet.add(ci.id);
        }
        Set<Long> cleanPerformedByOthers=new HashSet<>();
        for (        long id : compactId2CompactInfoMap.keySet()) {
          if (!currentToCleanSet.contains(id)) {
            cleanPerformedByOthers.add(id);
          }
        }
        for (        long id : cleanPerformedByOthers) {
          compactId2CompactInfoMap.remove(id);
          compactId2LockMap.remove(id);
        }
      }
      if (toClean.size() > 0 || compactId2LockMap.size() > 0) {
        ShowLocksResponse locksResponse=txnHandler.showLocks(new ShowLocksRequest());
        for (        CompactionInfo ci : toClean) {
          if (!compactId2LockMap.containsKey(ci.id)) {
            compactId2LockMap.put(ci.id,findRelatedLocks(ci,locksResponse));
            compactId2CompactInfoMap.put(ci.id,ci);
          }
        }
        Set<Long> currentLocks=buildCurrentLockSet(locksResponse);
        List<Long> expiredLocks=new ArrayList<Long>();
        List<Long> compactionsCleaned=new ArrayList<Long>();
        try {
          for (          Map.Entry<Long,Set<Long>> queueEntry : compactId2LockMap.entrySet()) {
            boolean sawLock=false;
            for (            Long lockId : queueEntry.getValue()) {
              if (currentLocks.contains(lockId)) {
                sawLock=true;
                break;
              }
 else {
                expiredLocks.add(lockId);
              }
            }
            if (!sawLock) {
              compactionsCleaned.add(queueEntry.getKey());
              clean(compactId2CompactInfoMap.get(queueEntry.getKey()));
            }
 else {
              for (              Long lockId : expiredLocks) {
                queueEntry.getValue().remove(lockId);
              }
            }
          }
        }
  finally {
          if (compactionsCleaned.size() > 0) {
            for (            Long compactId : compactionsCleaned) {
              compactId2LockMap.remove(compactId);
              compactId2CompactInfoMap.remove(compactId);
            }
          }
        }
      }
    }
 catch (    Throwable t) {
      LOG.error("Caught an exception in the main loop of compactor cleaner, " + StringUtils.stringifyException(t));
    }
 finally {
      if (handle != null) {
        handle.releaseLocks();
      }
    }
    if (setLooped) {
      looped.set(true);
    }
    long elapsedTime=System.currentTimeMillis() - startedAt;
    if (elapsedTime >= cleanerCheckInterval || stop.get()) {
      continue;
    }
 else {
      try {
        Thread.sleep(cleanerCheckInterval - elapsedTime);
      }
 catch (      InterruptedException ie) {
      }
    }
  }
 while (!stop.get());
}
