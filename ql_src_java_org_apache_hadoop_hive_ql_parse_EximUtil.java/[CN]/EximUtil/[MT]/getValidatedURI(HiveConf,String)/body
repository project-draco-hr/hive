{
  try {
    boolean testMode=conf.getBoolVar(HiveConf.ConfVars.HIVETESTMODE);
    URI uri=new Path(dcPath).toUri();
    String scheme=uri.getScheme();
    String authority=uri.getAuthority();
    String path=uri.getPath();
    LOG.debug("Path before norm :" + path);
    if (!path.startsWith("/")) {
      if (testMode) {
        path=(new Path(System.getProperty("build.dir.hive"),path)).toUri().getPath();
      }
 else {
        path=(new Path(new Path("/user/" + System.getProperty("user.name")),path)).toUri().getPath();
      }
    }
    if (StringUtils.isEmpty(scheme)) {
      if (testMode) {
        scheme="pfile";
      }
 else {
        scheme="hdfs";
      }
    }
    if (StringUtils.isEmpty(authority)) {
      URI defaultURI=FileSystem.get(conf).getUri();
      authority=defaultURI.getAuthority();
    }
    LOG.debug("Scheme:" + scheme + ", authority:"+ authority+ ", path:"+ path);
    Collection<String> eximSchemes=conf.getStringCollection(HiveConf.ConfVars.HIVE_EXIM_URI_SCHEME_WL.varname);
    if (!eximSchemes.contains(scheme)) {
      throw new SemanticException(ErrorMsg.INVALID_PATH.getMsg("only the following file systems accepted for export/import : " + conf.get(HiveConf.ConfVars.HIVE_EXIM_URI_SCHEME_WL.varname)));
    }
    try {
      return new URI(scheme,authority,path,null,null);
    }
 catch (    URISyntaxException e) {
      throw new SemanticException(ErrorMsg.INVALID_PATH.getMsg(),e);
    }
  }
 catch (  IOException e) {
    throw new SemanticException(ErrorMsg.GENERIC_ERROR.getMsg(),e);
  }
}
