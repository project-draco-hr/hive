{
  if (version == null) {
    throw new SemanticException(ErrorMsg.INVALID_METADATA.getMsg("Version number missing"));
  }
  StringTokenizer st=new StringTokenizer(version,".");
  int data_major=Integer.parseInt(st.nextToken());
  StringTokenizer st2=new StringTokenizer(currVersion,".");
  int code_major=Integer.parseInt(st2.nextToken());
  int code_minor=Integer.parseInt(st2.nextToken());
  if (code_major > data_major) {
    throw new SemanticException(ErrorMsg.INVALID_METADATA.getMsg("Not backward compatible." + " Producer version " + version + ", Consumer version "+ currVersion));
  }
 else {
    if ((fcVersion == null) || fcVersion.isEmpty()) {
      if (code_major < data_major) {
        throw new SemanticException(ErrorMsg.INVALID_METADATA.getMsg("Not forward compatible." + "Producer version " + version + ", Consumer version "+ currVersion));
      }
    }
 else {
      StringTokenizer st3=new StringTokenizer(fcVersion,".");
      int fc_major=Integer.parseInt(st3.nextToken());
      int fc_minor=Integer.parseInt(st3.nextToken());
      if ((fc_major > code_major) || ((fc_major == code_major) && (fc_minor > code_minor))) {
        throw new SemanticException(ErrorMsg.INVALID_METADATA.getMsg("Not forward compatible." + "Minimum version " + fcVersion + ", Consumer version "+ currVersion));
      }
    }
  }
}
