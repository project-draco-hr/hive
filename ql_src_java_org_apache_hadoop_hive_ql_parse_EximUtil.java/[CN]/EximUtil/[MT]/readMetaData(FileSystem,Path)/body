{
  FSDataInputStream mdstream=null;
  try {
    mdstream=fs.open(metadataPath);
    byte[] buffer=new byte[1024];
    ByteArrayOutputStream sb=new ByteArrayOutputStream();
    int read=mdstream.read(buffer);
    while (read != -1) {
      sb.write(buffer,0,read);
      read=mdstream.read(buffer);
    }
    String md=new String(sb.toByteArray(),"UTF-8");
    JSONObject jsonContainer=new JSONObject(md);
    String version=jsonContainer.getString("version");
    String fcversion=getJSONStringEntry(jsonContainer,"fcversion");
    checkCompatibility(version,fcversion);
    String tableDesc=getJSONStringEntry(jsonContainer,"table");
    Table table=null;
    List<Partition> partitionsList=null;
    if (tableDesc != null) {
      table=new Table();
      TDeserializer deserializer=new TDeserializer(new TJSONProtocol.Factory());
      deserializer.deserialize(table,tableDesc,"UTF-8");
      JSONArray jsonPartitions=new JSONArray(jsonContainer.getString("partitions"));
      partitionsList=new ArrayList<Partition>(jsonPartitions.length());
      for (int i=0; i < jsonPartitions.length(); ++i) {
        String partDesc=jsonPartitions.getString(i);
        Partition partition=new Partition();
        deserializer.deserialize(partition,partDesc,"UTF-8");
        partitionsList.add(partition);
      }
    }
    return new ReadMetaData(table,partitionsList,readReplicationSpec(jsonContainer));
  }
 catch (  JSONException e) {
    throw new SemanticException(ErrorMsg.ERROR_SERIALIZE_METADATA.getMsg(),e);
  }
catch (  TException e) {
    throw new SemanticException(ErrorMsg.ERROR_SERIALIZE_METADATA.getMsg(),e);
  }
 finally {
    if (mdstream != null) {
      mdstream.close();
    }
  }
}
