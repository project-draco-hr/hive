{
  try {
    if (!HIVE_AUTH_SIMPLE.equals(sessConfMap.get(HIVE_AUTH_TYPE))) {
      if (sessConfMap.containsKey(HIVE_AUTH_PRINCIPAL)) {
        Map<String,String> saslProps=new HashMap<String,String>();
        SaslQOP saslQOP=SaslQOP.AUTH;
        if (sessConfMap.containsKey(HIVE_AUTH_QOP)) {
          try {
            saslQOP=SaslQOP.fromString(sessConfMap.get(HIVE_AUTH_QOP));
          }
 catch (          IllegalArgumentException e) {
            throw new SQLException("Invalid " + HIVE_AUTH_QOP + " parameter. "+ e.getMessage(),"42000",e);
          }
        }
        saslProps.put(Sasl.QOP,saslQOP.toString());
        saslProps.put(Sasl.SERVER_AUTH,"true");
        boolean assumeSubject=HIVE_AUTH_KERBEROS_AUTH_TYPE_FROM_SUBJECT.equals(sessConfMap.get(HIVE_AUTH_KERBEROS_AUTH_TYPE));
        transport=KerberosSaslHelper.getKerberosTransport(sessConfMap.get(HIVE_AUTH_PRINCIPAL),host,HiveAuthFactory.getSocketTransport(host,port,loginTimeout),saslProps,assumeSubject);
      }
 else {
        String userName=sessConfMap.get(HIVE_AUTH_USER);
        if ((userName == null) || userName.isEmpty()) {
          userName=HIVE_ANONYMOUS_USER;
        }
        String passwd=sessConfMap.get(HIVE_AUTH_PASSWD);
        if ((passwd == null) || passwd.isEmpty()) {
          passwd=HIVE_ANONYMOUS_PASSWD;
        }
        String useSslStr=sessConfMap.get(HIVE_USE_SSL);
        if ("true".equalsIgnoreCase(useSslStr)) {
          String sslTrustStore=sessConfMap.get(HIVE_SSL_TRUST_STORE);
          String sslTrustStorePassword=sessConfMap.get(HIVE_SSL_TRUST_STORE_PASSWORD);
          if (sslTrustStore == null || sslTrustStore.isEmpty()) {
            transport=HiveAuthFactory.getSSLSocket(host,port,loginTimeout);
          }
 else {
            transport=HiveAuthFactory.getSSLSocket(host,port,loginTimeout,sslTrustStore,sslTrustStorePassword);
          }
        }
 else {
          transport=HiveAuthFactory.getSocketTransport(host,port,loginTimeout);
        }
        transport=PlainSaslHelper.getPlainTransport(userName,passwd,transport);
      }
    }
 else {
      transport=HiveAuthFactory.getSocketTransport(host,port,loginTimeout);
    }
  }
 catch (  SaslException e) {
    throw new SQLException("Could not create secure connection to " + jdbcURI + ": "+ e.getMessage()," 08S01",e);
  }
catch (  TTransportException e) {
    throw new SQLException("Could not create connection to " + jdbcURI + ": "+ e.getMessage()," 08S01",e);
  }
  return transport;
}
