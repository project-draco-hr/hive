{
  try {
    TTransport socketTransport=createUnderlyingTransport();
    if (!JdbcConnectionParams.AUTH_SIMPLE.equals(sessConfMap.get(JdbcConnectionParams.AUTH_TYPE))) {
      Map<String,String> saslProps=new HashMap<String,String>();
      SaslQOP saslQOP=SaslQOP.AUTH;
      if (sessConfMap.containsKey(JdbcConnectionParams.AUTH_QOP)) {
        try {
          saslQOP=SaslQOP.fromString(sessConfMap.get(JdbcConnectionParams.AUTH_QOP));
        }
 catch (        IllegalArgumentException e) {
          throw new SQLException("Invalid " + JdbcConnectionParams.AUTH_QOP + " parameter. "+ e.getMessage(),"42000",e);
        }
        saslProps.put(Sasl.QOP,saslQOP.toString());
      }
 else {
        saslProps.put(Sasl.QOP,"auth-conf,auth-int,auth");
      }
      saslProps.put(Sasl.SERVER_AUTH,"true");
      if (sessConfMap.containsKey(JdbcConnectionParams.AUTH_PRINCIPAL)) {
        transport=KerberosSaslHelper.getKerberosTransport(sessConfMap.get(JdbcConnectionParams.AUTH_PRINCIPAL),host,socketTransport,saslProps,assumeSubject);
      }
 else {
        String tokenStr=getClientDelegationToken(sessConfMap);
        if (tokenStr != null) {
          transport=KerberosSaslHelper.getTokenTransport(tokenStr,host,socketTransport,saslProps);
        }
 else {
          String userName=getUserName();
          String passwd=getPassword();
          transport=PlainSaslHelper.getPlainTransport(userName,passwd,socketTransport);
        }
      }
    }
 else {
      transport=socketTransport;
    }
  }
 catch (  SaslException e) {
    throw new SQLException("Could not create secure connection to " + jdbcUriString + ": "+ e.getMessage()," 08S01",e);
  }
  return transport;
}
