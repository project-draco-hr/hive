{
  boolean isCookieEnabled=sessConfMap.get(JdbcConnectionParams.COOKIE_AUTH) == null || (!JdbcConnectionParams.COOKIE_AUTH_FALSE.equalsIgnoreCase(sessConfMap.get(JdbcConnectionParams.COOKIE_AUTH)));
  String cookieName=sessConfMap.get(JdbcConnectionParams.COOKIE_NAME) == null ? JdbcConnectionParams.DEFAULT_COOKIE_NAMES_HS2 : sessConfMap.get(JdbcConnectionParams.COOKIE_NAME);
  CookieStore cookieStore=isCookieEnabled ? new BasicCookieStore() : null;
  HttpClientBuilder httpClientBuilder;
  HttpRequestInterceptor requestInterceptor;
  Map<String,String> additionalHttpHeaders=new HashMap<String,String>();
  for (  Map.Entry<String,String> entry : sessConfMap.entrySet()) {
    String key=entry.getKey();
    if (key.startsWith(JdbcConnectionParams.HTTP_HEADER_PREFIX)) {
      additionalHttpHeaders.put(key.substring(JdbcConnectionParams.HTTP_HEADER_PREFIX.length()),entry.getValue());
    }
  }
  if (isKerberosAuthMode()) {
    requestInterceptor=new HttpKerberosRequestInterceptor(sessConfMap.get(JdbcConnectionParams.AUTH_PRINCIPAL),host,getServerHttpUrl(useSsl),assumeSubject,cookieStore,cookieName,useSsl,additionalHttpHeaders);
  }
 else {
    requestInterceptor=new HttpBasicAuthInterceptor(getUserName(),getPassword(),cookieStore,cookieName,useSsl,additionalHttpHeaders);
  }
  if (isCookieEnabled) {
    httpClientBuilder=HttpClients.custom().setServiceUnavailableRetryStrategy(new ServiceUnavailableRetryStrategy(){
      @Override public boolean retryRequest(      final HttpResponse response,      final int executionCount,      final HttpContext context){
        int statusCode=response.getStatusLine().getStatusCode();
        boolean ret=statusCode == 401 && executionCount <= 1;
        if (ret) {
          context.setAttribute(Utils.HIVE_SERVER2_RETRY_KEY,Utils.HIVE_SERVER2_RETRY_TRUE);
        }
        return ret;
      }
      @Override public long getRetryInterval(){
        return 0;
      }
    }
);
  }
 else {
    httpClientBuilder=HttpClientBuilder.create();
  }
  httpClientBuilder.addInterceptorFirst(requestInterceptor);
  if (useSsl) {
    String useTwoWaySSL=sessConfMap.get(JdbcConnectionParams.USE_TWO_WAY_SSL);
    String sslTrustStorePath=sessConfMap.get(JdbcConnectionParams.SSL_TRUST_STORE);
    String sslTrustStorePassword=sessConfMap.get(JdbcConnectionParams.SSL_TRUST_STORE_PASSWORD);
    KeyStore sslTrustStore;
    SSLSocketFactory socketFactory;
    try {
      if (useTwoWaySSL != null && useTwoWaySSL.equalsIgnoreCase(JdbcConnectionParams.TRUE)) {
        socketFactory=getTwoWaySSLSocketFactory();
      }
 else       if (sslTrustStorePath == null || sslTrustStorePath.isEmpty()) {
        socketFactory=SSLSocketFactory.getSocketFactory();
      }
 else {
        sslTrustStore=KeyStore.getInstance(JdbcConnectionParams.SSL_TRUST_STORE_TYPE);
        sslTrustStore.load(new FileInputStream(sslTrustStorePath),sslTrustStorePassword.toCharArray());
        socketFactory=new SSLSocketFactory(sslTrustStore);
      }
      socketFactory.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
      final Registry<ConnectionSocketFactory> registry=RegistryBuilder.<ConnectionSocketFactory>create().register("https",socketFactory).build();
      httpClientBuilder.setConnectionManager(new BasicHttpClientConnectionManager(registry));
    }
 catch (    Exception e) {
      String msg="Could not create an https connection to " + jdbcUriString + ". "+ e.getMessage();
      throw new SQLException(msg," 08S01",e);
    }
  }
  return httpClientBuilder.build();
}
