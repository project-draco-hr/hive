{
  HiveMetaStoreClient client=null;
  try {
    Configuration conf=job.getConfiguration();
    client=createHiveClient(outputInfo.getServerUri(),conf);
    Table table=client.getTable(outputInfo.getDatabaseName(),outputInfo.getTableName());
    if (outputInfo.getPartitionValues() == null) {
      outputInfo.setPartitionValues(new HashMap<String,String>());
    }
 else {
      Map<String,String> valueMap=new HashMap<String,String>();
      for (      Map.Entry<String,String> entry : outputInfo.getPartitionValues().entrySet()) {
        valueMap.put(entry.getKey().toLowerCase(),entry.getValue());
      }
      outputInfo.setPartitionValues(valueMap);
    }
    handleDuplicatePublish(job,outputInfo,client,table);
    StorageDescriptor tblSD=table.getSd();
    HCatSchema tableSchema=HCatUtil.extractSchemaFromStorageDescriptor(tblSD);
    StorerInfo storerInfo=InitializeInput.extractStorerInfo(tblSD,table.getParameters());
    List<String> partitionCols=new ArrayList<String>();
    for (    FieldSchema schema : table.getPartitionKeys()) {
      partitionCols.add(schema.getName());
    }
    Class<? extends HCatOutputStorageDriver> driverClass=(Class<? extends HCatOutputStorageDriver>)Class.forName(storerInfo.getOutputSDClass());
    HCatOutputStorageDriver driver=driverClass.newInstance();
    String tblLocation=tblSD.getLocation();
    String location=driver.getOutputLocation(job,tblLocation,partitionCols,outputInfo.getPartitionValues());
    OutputJobInfo jobInfo=new OutputJobInfo(outputInfo,tableSchema,tableSchema,storerInfo,location,table);
    conf.set(HCatConstants.HCAT_KEY_OUTPUT_INFO,HCatUtil.serialize(jobInfo));
    Path tblPath=new Path(tblLocation);
    FsPermission.setUMask(conf,FsPermission.getDefault().applyUMask(tblPath.getFileSystem(conf).getFileStatus(tblPath).getPermission()));
    if (UserGroupInformation.isSecurityEnabled()) {
      UserGroupInformation ugi=UserGroupInformation.getCurrentUser();
      TokenSelector<? extends TokenIdentifier> tokenSelector=new DelegationTokenSelector();
      Token<? extends TokenIdentifier> token=tokenSelector.selectToken(new Text(),ugi.getTokens());
      if (token != null) {
        job.getCredentials().addToken(new Text(ugi.getUserName()),token);
      }
 else {
        String tokenSignature=getTokenSignature(outputInfo);
        if (tokenMap.get(tokenSignature) == null) {
          String tokenStrForm=client.getDelegationTokenWithSignature(ugi.getUserName(),tokenSignature);
          Token<DelegationTokenIdentifier> t=new Token<DelegationTokenIdentifier>();
          t.decodeFromUrlString(tokenStrForm);
          tokenMap.put(tokenSignature,t);
        }
        job.getCredentials().addToken(new Text(ugi.getUserName() + tokenSignature),tokenMap.get(tokenSignature));
        job.getConfiguration().set(HCatConstants.HCAT_KEY_TOKEN_SIGNATURE,tokenSignature);
      }
    }
  }
 catch (  Exception e) {
    if (e instanceof HCatException) {
      throw (HCatException)e;
    }
 else {
      throw new HCatException(ErrorType.ERROR_SET_OUTPUT,e);
    }
  }
 finally {
    if (client != null) {
      client.close();
    }
  }
}
