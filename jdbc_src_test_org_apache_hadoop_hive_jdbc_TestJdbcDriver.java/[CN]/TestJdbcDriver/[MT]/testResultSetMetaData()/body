{
  Statement stmt=con.createStatement();
  ResultSet res=stmt.executeQuery("drop table " + tableName);
  res=stmt.executeQuery("create table " + tableName + " (a string, b boolean, c bigint, d int, f double)");
  res=stmt.executeQuery("select * from " + tableName + " limit 1");
  ResultSetMetaData meta=res.getMetaData();
  assertEquals("Unexpected column type",Types.VARCHAR,meta.getColumnType(1));
  assertEquals("Unexpected column type",Types.BOOLEAN,meta.getColumnType(2));
  assertEquals("Unexpected column type",Types.BIGINT,meta.getColumnType(3));
  assertEquals("Unexpected column type",Types.INTEGER,meta.getColumnType(4));
  assertEquals("Unexpected column type",Types.DOUBLE,meta.getColumnType(5));
  assertEquals("Unexpected column type name","string",meta.getColumnTypeName(1));
  assertEquals("Unexpected column type name","boolean",meta.getColumnTypeName(2));
  assertEquals("Unexpected column type name","bigint",meta.getColumnTypeName(3));
  assertEquals("Unexpected column type name","int",meta.getColumnTypeName(4));
  assertEquals("Unexpected column type name","double",meta.getColumnTypeName(5));
  assertEquals("Unexpected column display size",32,meta.getColumnDisplaySize(1));
  assertEquals("Unexpected column display size",8,meta.getColumnDisplaySize(2));
  assertEquals("Unexpected column display size",32,meta.getColumnDisplaySize(3));
  assertEquals("Unexpected column display size",16,meta.getColumnDisplaySize(4));
  assertEquals("Unexpected column display size",16,meta.getColumnDisplaySize(5));
  for (int i=1; i <= 5; i++) {
    assertFalse(meta.isAutoIncrement(i));
    assertFalse(meta.isCurrency(i));
    assertEquals(ResultSetMetaData.columnNullable,meta.isNullable(i));
    int expectedPrecision=i == 5 ? -1 : 0;
    int expectedScale=i == 5 ? -1 : 0;
    assertEquals("Unexpected precision",expectedPrecision,meta.getPrecision(i));
    assertEquals("Unexpected scale",expectedScale,meta.getScale(i));
  }
}
