{
  Statement stmt=con.createStatement();
  ResultSet res=stmt.executeQuery("select c1, c2, c3, c4, c5 as a, c6, c7, c8, c9, c10, c11, c12, " + "c1*2, sentences(null, null, null) as b from " + dataTypeTableName + " limit 1");
  ResultSetMetaData meta=res.getMetaData();
  assertEquals(14,meta.getColumnCount());
  assertEquals("c1",meta.getColumnName(1));
  assertEquals("c2",meta.getColumnName(2));
  assertEquals("c3",meta.getColumnName(3));
  assertEquals("c4",meta.getColumnName(4));
  assertEquals("a",meta.getColumnName(5));
  assertEquals("c6",meta.getColumnName(6));
  assertEquals("c7",meta.getColumnName(7));
  assertEquals("c8",meta.getColumnName(8));
  assertEquals("c9",meta.getColumnName(9));
  assertEquals("c10",meta.getColumnName(10));
  assertEquals("c11",meta.getColumnName(11));
  assertEquals("c12",meta.getColumnName(12));
  assertEquals("_c12",meta.getColumnName(13));
  assertEquals("b",meta.getColumnName(14));
  assertEquals(Types.INTEGER,meta.getColumnType(1));
  assertEquals(Types.BOOLEAN,meta.getColumnType(2));
  assertEquals(Types.DOUBLE,meta.getColumnType(3));
  assertEquals(Types.VARCHAR,meta.getColumnType(4));
  assertEquals(Types.VARCHAR,meta.getColumnType(5));
  assertEquals(Types.VARCHAR,meta.getColumnType(6));
  assertEquals(Types.VARCHAR,meta.getColumnType(7));
  assertEquals(Types.VARCHAR,meta.getColumnType(8));
  assertEquals(Types.TINYINT,meta.getColumnType(9));
  assertEquals(Types.SMALLINT,meta.getColumnType(10));
  assertEquals(Types.FLOAT,meta.getColumnType(11));
  assertEquals(Types.BIGINT,meta.getColumnType(12));
  assertEquals(Types.INTEGER,meta.getColumnType(13));
  assertEquals(Types.VARCHAR,meta.getColumnType(14));
  assertEquals("int",meta.getColumnTypeName(1));
  assertEquals("boolean",meta.getColumnTypeName(2));
  assertEquals("double",meta.getColumnTypeName(3));
  assertEquals("string",meta.getColumnTypeName(4));
  assertEquals("string",meta.getColumnTypeName(5));
  assertEquals("string",meta.getColumnTypeName(6));
  assertEquals("string",meta.getColumnTypeName(7));
  assertEquals("string",meta.getColumnTypeName(8));
  assertEquals("tinyint",meta.getColumnTypeName(9));
  assertEquals("smallint",meta.getColumnTypeName(10));
  assertEquals("float",meta.getColumnTypeName(11));
  assertEquals("bigint",meta.getColumnTypeName(12));
  assertEquals("int",meta.getColumnTypeName(13));
  assertEquals("string",meta.getColumnTypeName(14));
  assertEquals(16,meta.getColumnDisplaySize(1));
  assertEquals(8,meta.getColumnDisplaySize(2));
  assertEquals(16,meta.getColumnDisplaySize(3));
  assertEquals(32,meta.getColumnDisplaySize(4));
  assertEquals(32,meta.getColumnDisplaySize(5));
  assertEquals(32,meta.getColumnDisplaySize(6));
  assertEquals(32,meta.getColumnDisplaySize(7));
  assertEquals(32,meta.getColumnDisplaySize(8));
  assertEquals(2,meta.getColumnDisplaySize(9));
  assertEquals(32,meta.getColumnDisplaySize(10));
  assertEquals(32,meta.getColumnDisplaySize(11));
  assertEquals(32,meta.getColumnDisplaySize(12));
  assertEquals(16,meta.getColumnDisplaySize(13));
  assertEquals(32,meta.getColumnDisplaySize(14));
  for (int i=1; i <= meta.getColumnCount(); i++) {
    assertFalse(meta.isAutoIncrement(i));
    assertFalse(meta.isCurrency(i));
    assertEquals(ResultSetMetaData.columnNullable,meta.isNullable(i));
    int expectedPrecision=i == 3 ? -1 : 0;
    int expectedScale=i == 3 ? -1 : 0;
    assertEquals(expectedPrecision,meta.getPrecision(i));
    assertEquals(expectedScale,meta.getScale(i));
  }
}
