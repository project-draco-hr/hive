{
  do {
    boolean launchedJob=false;
    try {
      CompactionInfo ci=txnHandler.findNextToCompact(name);
      if (ci == null && !stop.get()) {
        try {
          Thread.sleep(SLEEP_TIME);
          continue;
        }
 catch (        InterruptedException e) {
          LOG.warn("Worker thread sleep interrupted " + e.getMessage());
          continue;
        }
      }
      Table t1=null;
      try {
        t1=resolveTable(ci);
      }
 catch (      MetaException e) {
        txnHandler.markCleaned(ci);
        continue;
      }
      final Table t=t1;
      Partition p=null;
      try {
        p=resolvePartition(ci);
      }
 catch (      Exception e) {
        txnHandler.markCleaned(ci);
        continue;
      }
      final StorageDescriptor sd=resolveStorageDescriptor(t,p);
      if (sd.getSortCols() != null && !sd.getSortCols().isEmpty()) {
        LOG.error("Attempt to compact sorted table, which is not yet supported!");
        txnHandler.markCleaned(ci);
        continue;
      }
      final boolean isMajor=ci.isMajorCompaction();
      final ValidTxnList txns=CompactionTxnHandler.createValidCompactTxnList(txnHandler.getOpenTxnsInfo());
      LOG.debug("ValidCompactTxnList: " + txns.writeToString());
      final StringBuffer jobName=new StringBuffer(name);
      jobName.append("-compactor-");
      jobName.append(ci.getFullPartitionName());
      String runAs;
      if (ci.runAs == null) {
        runAs=findUserToRunAs(sd.getLocation(),t);
        txnHandler.setRunAs(ci.id,runAs);
      }
 else {
        runAs=ci.runAs;
      }
      LOG.info("Starting " + ci.type.toString() + " compaction for "+ ci.getFullPartitionName());
      final StatsUpdater su=StatsUpdater.init(ci,txnHandler.findColumnsWithStats(ci),conf,runJobAsSelf(runAs) ? runAs : t.getOwner());
      final CompactorMR mr=new CompactorMR();
      launchedJob=true;
      try {
        if (runJobAsSelf(runAs)) {
          mr.run(conf,jobName.toString(),t,sd,txns,isMajor,su);
        }
 else {
          UserGroupInformation ugi=UserGroupInformation.createProxyUser(t.getOwner(),UserGroupInformation.getLoginUser());
          ugi.doAs(new PrivilegedExceptionAction<Object>(){
            @Override public Object run() throws Exception {
              mr.run(conf,jobName.toString(),t,sd,txns,isMajor,su);
              return null;
            }
          }
);
        }
        txnHandler.markCompacted(ci);
      }
 catch (      Exception e) {
        LOG.error("Caught exception while trying to compact " + ci.getFullPartitionName() + ".  Marking clean to avoid repeated failures, "+ StringUtils.stringifyException(e));
        txnHandler.markCleaned(ci);
      }
    }
 catch (    Throwable t) {
      LOG.error("Caught an exception in the main loop of compactor worker " + name + ", "+ StringUtils.stringifyException(t));
    }
    if (!launchedJob && !stop.get()) {
      try {
        Thread.sleep(SLEEP_TIME);
      }
 catch (      InterruptedException e) {
      }
    }
  }
 while (!stop.get());
}
