{
  Project topProject=call.rel(0);
  Join join=call.rel(1);
  final Permutation topPermutation=topProject.getPermutation();
  if (topPermutation == null) {
    return;
  }
  if (topPermutation.isIdentity()) {
    return;
  }
  final RelNode swapped=JoinCommuteRule.swap(join,true);
  if (swapped == null) {
    return;
  }
  if (swapped instanceof Join) {
    return;
  }
  final Project bottomProject=(Project)swapped;
  final Permutation bottomPermutation=bottomProject.getPermutation();
  if (bottomPermutation == null) {
    return;
  }
  if (bottomPermutation.isIdentity()) {
    return;
  }
  final Permutation product=topPermutation.product(bottomPermutation);
  if (!product.isIdentity()) {
    return;
  }
  final Join swappedJoin=(Join)bottomProject.getInput(0);
  call.transformTo(swappedJoin);
}
