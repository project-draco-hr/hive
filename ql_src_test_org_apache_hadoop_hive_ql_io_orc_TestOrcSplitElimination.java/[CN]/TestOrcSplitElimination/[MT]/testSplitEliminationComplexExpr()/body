{
  ObjectInspector inspector;
synchronized (TestOrcFile.class) {
    inspector=ObjectInspectorFactory.getReflectionObjectInspector(AllTypesRow.class,ObjectInspectorFactory.ObjectInspectorOptions.JAVA);
  }
  Writer writer=OrcFile.createWriter(fs,testFilePath,conf,inspector,100000,CompressionKind.NONE,10000,10000);
  writeData(writer);
  writer.close();
  conf.set("mapred.min.split.size","1000");
  conf.set("mapred.max.split.size","150000");
  InputFormat<?,?> in=new OrcInputFormat();
  FileInputFormat.setInputPaths(conf,testFilePath.toString());
  GenericUDF udf=new GenericUDFOPEqualOrLessThan();
  List<ExprNodeDesc> childExpr=Lists.newArrayList();
  ExprNodeColumnDesc col=new ExprNodeColumnDesc(Long.class,"userid","T",false);
  ExprNodeConstantDesc con=new ExprNodeConstantDesc(100);
  childExpr.add(col);
  childExpr.add(con);
  ExprNodeGenericFuncDesc en=new ExprNodeGenericFuncDesc(inspector,udf,childExpr);
  GenericUDF udf1=new GenericUDFOPEqualOrLessThan();
  List<ExprNodeDesc> childExpr1=Lists.newArrayList();
  ExprNodeColumnDesc col1=new ExprNodeColumnDesc(Double.class,"subtype","T",false);
  ExprNodeConstantDesc con1=new ExprNodeConstantDesc(1000.0);
  childExpr1.add(col1);
  childExpr1.add(con1);
  ExprNodeGenericFuncDesc en1=new ExprNodeGenericFuncDesc(inspector,udf1,childExpr1);
  GenericUDF udf2=new GenericUDFOPAnd();
  List<ExprNodeDesc> childExpr2=Lists.newArrayList();
  childExpr2.add(en);
  childExpr2.add(en1);
  ExprNodeGenericFuncDesc en2=new ExprNodeGenericFuncDesc(inspector,udf2,childExpr2);
  String sargStr=Utilities.serializeExpression(en2);
  conf.set("hive.io.filter.expr.serialized",sargStr);
  InputSplit[] splits=in.getSplits(conf,1);
  assertEquals(2,splits.length);
  con=new ExprNodeConstantDesc(2);
  childExpr.set(1,con);
  en=new ExprNodeGenericFuncDesc(inspector,udf,childExpr);
  con1=new ExprNodeConstantDesc(0.0);
  childExpr1.set(1,con1);
  en1=new ExprNodeGenericFuncDesc(inspector,udf1,childExpr1);
  childExpr2.set(0,en);
  childExpr2.set(1,en1);
  en2=new ExprNodeGenericFuncDesc(inspector,udf2,childExpr2);
  sargStr=Utilities.serializeExpression(en2);
  conf.set("hive.io.filter.expr.serialized",sargStr);
  splits=in.getSplits(conf,1);
  assertEquals(0,splits.length);
  con=new ExprNodeConstantDesc(2);
  childExpr.set(1,con);
  en=new ExprNodeGenericFuncDesc(inspector,udf,childExpr);
  con1=new ExprNodeConstantDesc(1.0);
  childExpr1.set(1,con1);
  en1=new ExprNodeGenericFuncDesc(inspector,udf1,childExpr1);
  childExpr2.set(0,en);
  childExpr2.set(1,en1);
  en2=new ExprNodeGenericFuncDesc(inspector,udf2,childExpr2);
  sargStr=Utilities.serializeExpression(en2);
  conf.set("hive.io.filter.expr.serialized",sargStr);
  splits=in.getSplits(conf,1);
  assertEquals(1,splits.length);
  udf=new GenericUDFOPEqual();
  con=new ExprNodeConstantDesc(13);
  childExpr.set(1,con);
  en=new ExprNodeGenericFuncDesc(inspector,udf,childExpr);
  con1=new ExprNodeConstantDesc(80.0);
  childExpr1.set(1,con1);
  en1=new ExprNodeGenericFuncDesc(inspector,udf1,childExpr1);
  childExpr2.set(0,en);
  childExpr2.set(1,en1);
  en2=new ExprNodeGenericFuncDesc(inspector,udf2,childExpr2);
  sargStr=Utilities.serializeExpression(en2);
  conf.set("hive.io.filter.expr.serialized",sargStr);
  splits=in.getSplits(conf,1);
  assertEquals(2,splits.length);
  udf=new GenericUDFOPEqual();
  con=new ExprNodeConstantDesc(13);
  childExpr.set(1,con);
  en=new ExprNodeGenericFuncDesc(inspector,udf,childExpr);
  udf1=new GenericUDFOPEqual();
  con1=new ExprNodeConstantDesc(80.0);
  childExpr1.set(1,con1);
  en1=new ExprNodeGenericFuncDesc(inspector,udf1,childExpr1);
  childExpr2.set(0,en);
  childExpr2.set(1,en1);
  en2=new ExprNodeGenericFuncDesc(inspector,udf2,childExpr2);
  sargStr=Utilities.serializeExpression(en2);
  conf.set("hive.io.filter.expr.serialized",sargStr);
  splits=in.getSplits(conf,1);
  assertEquals(1,splits.length);
}
