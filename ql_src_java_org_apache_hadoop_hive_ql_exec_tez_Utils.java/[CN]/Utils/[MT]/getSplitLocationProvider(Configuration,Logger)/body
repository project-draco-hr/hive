{
  boolean useCustomLocations=HiveConf.getBoolVar(conf,HiveConf.ConfVars.LLAP_CLIENT_CONSISTENT_SPLITS);
  SplitLocationProvider splitLocationProvider;
  LOG.info("SplitGenerator using llap affinitized locations: " + useCustomLocations);
  if (useCustomLocations) {
    LlapRegistryService serviceRegistry;
    serviceRegistry=LlapRegistryService.getClient(conf);
    Collection<ServiceInstance> serviceInstances=serviceRegistry.getInstances().getAllInstancesOrdered(true);
    ArrayList<String> locations=new ArrayList<>(serviceInstances.size());
    for (    ServiceInstance serviceInstance : serviceInstances) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Adding " + serviceInstance.getWorkerIdentity() + " with hostname="+ serviceInstance.getHost()+ " to list for split locations");
      }
      locations.add(serviceInstance.getHost());
    }
    splitLocationProvider=new HostAffinitySplitLocationProvider(locations);
  }
 else {
    splitLocationProvider=new SplitLocationProvider(){
      @Override public String[] getLocations(      InputSplit split) throws IOException {
        if (split == null) {
          return null;
        }
        String[] locations=split.getLocations();
        if (locations != null && locations.length == 1) {
          if ("localhost".equals(locations[0])) {
            return ArrayUtils.EMPTY_STRING_ARRAY;
          }
        }
        return locations;
      }
    }
;
  }
  return splitLocationProvider;
}
