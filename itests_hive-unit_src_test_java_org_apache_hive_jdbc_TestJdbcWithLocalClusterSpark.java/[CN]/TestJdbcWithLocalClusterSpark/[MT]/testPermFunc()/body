{
  String udfClassName="org.apache.hadoop.hive.contrib.udf.example.UDFExampleAdd";
  String mvnRepo=System.getProperty("maven.local.repository");
  String hiveVersion=System.getProperty("hive.version");
  String jarFileName="hive-contrib-" + hiveVersion + ".jar";
  String[] pathParts={"org","apache","hive","hive-contrib",hiveVersion,jarFileName};
  Path contribJarPath=new Path(mvnRepo);
  for (  String pathPart : pathParts) {
    contribJarPath=new Path(contribJarPath,pathPart);
  }
  FileSystem localFs=FileSystem.getLocal(conf);
  assertTrue("Hive contrib JAR exists at " + contribJarPath,localFs.exists(contribJarPath));
  String hdfsJarPathStr="hdfs:///" + jarFileName;
  Path hdfsJarPath=new Path(hdfsJarPathStr);
  FileSystem dfs=miniHS2.getDFS().getFileSystem();
  dfs.copyFromLocalFile(contribJarPath,hdfsJarPath);
  assertTrue("Verify contrib JAR copied to HDFS at " + hdfsJarPath,dfs.exists(hdfsJarPath));
  String queryStr="CREATE FUNCTION example_add AS '" + udfClassName + "'"+ " USING JAR '"+ hdfsJarPathStr+ "'";
  stmt.execute(queryStr);
  ResultSet res;
  res=stmt.executeQuery("DESCRIBE FUNCTION " + dbName + ".example_add");
  checkForNotExist(res);
  String tableName="testTab3";
  setupKv1Tabs(tableName);
  res=stmt.executeQuery("SELECT EXAMPLE_ADD(1, 2) FROM " + tableName + " LIMIT 1");
  assertTrue("query has results",res.next());
  assertEquals(3,res.getInt(1));
  assertFalse("no more results",res.next());
  Connection conn2=DriverManager.getConnection(miniHS2.getJdbcURL(dbName),System.getProperty("user.name"),"bar");
  Statement stmt2=conn2.createStatement();
  stmt2.execute("USE " + dbName);
  res=stmt2.executeQuery("DESCRIBE FUNCTION " + dbName + ".example_add");
  checkForNotExist(res);
  res=stmt2.executeQuery("SELECT " + dbName + ".example_add(1, 1) FROM "+ tableName+ " LIMIT 1");
  assertTrue("query has results",res.next());
  assertEquals(2,res.getInt(1));
  assertFalse("no more results",res.next());
  stmt.execute("DROP TABLE " + tableName);
}
