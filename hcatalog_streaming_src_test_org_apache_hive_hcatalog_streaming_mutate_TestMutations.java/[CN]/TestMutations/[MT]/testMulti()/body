{
  Table table=partitionedTableBuilder.addPartition(ASIA_INDIA).create(metaStoreClient);
  MutatorClient client=new MutatorClientBuilder().addSinkTable(table.getDbName(),table.getTableName(),true).metaStoreUri(metaStoreUri).build();
  client.connect();
  Transaction transaction=client.newTransaction();
  List<AcidTable> destinations=client.getTables();
  transaction.begin();
  MutatorFactory mutatorFactory=new ReflectiveMutatorFactory(conf,MutableRecord.class,RECORD_ID_COLUMN,BUCKET_COLUMN_INDEXES);
  MutatorCoordinator coordinator=new MutatorCoordinatorBuilder().metaStoreUri(metaStoreUri).table(destinations.get(0)).mutatorFactory(mutatorFactory).build();
  BucketIdResolver bucketIdResolver=mutatorFactory.newBucketIdResolver(destinations.get(0).getTotalBuckets());
  MutableRecord asiaIndiaRecord1=(MutableRecord)bucketIdResolver.attachBucketIdToRecord(new MutableRecord(1,"Hello streaming"));
  MutableRecord europeUkRecord1=(MutableRecord)bucketIdResolver.attachBucketIdToRecord(new MutableRecord(2,"Hello streaming"));
  MutableRecord europeFranceRecord1=(MutableRecord)bucketIdResolver.attachBucketIdToRecord(new MutableRecord(3,"Hello streaming"));
  MutableRecord europeFranceRecord2=(MutableRecord)bucketIdResolver.attachBucketIdToRecord(new MutableRecord(4,"Bonjour streaming"));
  coordinator.insert(ASIA_INDIA,asiaIndiaRecord1);
  coordinator.insert(EUROPE_UK,europeUkRecord1);
  coordinator.insert(EUROPE_FRANCE,europeFranceRecord1);
  coordinator.insert(EUROPE_FRANCE,europeFranceRecord2);
  coordinator.close();
  transaction.commit();
  StreamingAssert streamingAssertions=assertionFactory.newStreamingAssert(table,ASIA_INDIA);
  streamingAssertions.assertMinTransactionId(1L);
  streamingAssertions.assertMaxTransactionId(1L);
  streamingAssertions.assertExpectedFileCount(1);
  List<Record> readRecords=streamingAssertions.readRecords();
  assertThat(readRecords.size(),is(1));
  assertThat(readRecords.get(0).getRow(),is("{1, Hello streaming}"));
  assertThat(readRecords.get(0).getRecordIdentifier(),is(new RecordIdentifier(1L,0,0L)));
  streamingAssertions=assertionFactory.newStreamingAssert(table,EUROPE_UK);
  streamingAssertions.assertMinTransactionId(1L);
  streamingAssertions.assertMaxTransactionId(1L);
  streamingAssertions.assertExpectedFileCount(1);
  readRecords=streamingAssertions.readRecords();
  assertThat(readRecords.size(),is(1));
  assertThat(readRecords.get(0).getRow(),is("{2, Hello streaming}"));
  assertThat(readRecords.get(0).getRecordIdentifier(),is(new RecordIdentifier(1L,0,0L)));
  streamingAssertions=assertionFactory.newStreamingAssert(table,EUROPE_FRANCE);
  streamingAssertions.assertMinTransactionId(1L);
  streamingAssertions.assertMaxTransactionId(1L);
  streamingAssertions.assertExpectedFileCount(1);
  readRecords=streamingAssertions.readRecords();
  assertThat(readRecords.size(),is(2));
  assertThat(readRecords.get(0).getRow(),is("{3, Hello streaming}"));
  assertThat(readRecords.get(0).getRecordIdentifier(),is(new RecordIdentifier(1L,0,0L)));
  assertThat(readRecords.get(1).getRow(),is("{4, Bonjour streaming}"));
  assertThat(readRecords.get(1).getRecordIdentifier(),is(new RecordIdentifier(1L,0,1L)));
  client.close();
}
