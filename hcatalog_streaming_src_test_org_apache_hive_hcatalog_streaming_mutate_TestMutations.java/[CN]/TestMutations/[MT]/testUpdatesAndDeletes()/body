{
  MutatorFactory mutatorFactory=new ReflectiveMutatorFactory(conf,MutableRecord.class,RECORD_ID_COLUMN,BUCKET_COLUMN_INDEXES);
  Table table=partitionedTableBuilder.addPartition(ASIA_INDIA).addPartition(EUROPE_FRANCE).create(metaStoreClient);
  MutatorClient client=new MutatorClientBuilder().addSinkTable(table.getDbName(),table.getTableName(),true).metaStoreUri(metaStoreUri).build();
  client.connect();
  Transaction insertTransaction=client.newTransaction();
  List<AcidTable> destinations=client.getTables();
  insertTransaction.begin();
  MutatorCoordinator insertCoordinator=new MutatorCoordinatorBuilder().metaStoreUri(metaStoreUri).table(destinations.get(0)).mutatorFactory(mutatorFactory).build();
  BucketIdResolver bucketIdResolver=mutatorFactory.newBucketIdResolver(destinations.get(0).getTotalBuckets());
  MutableRecord asiaIndiaRecord1=(MutableRecord)bucketIdResolver.attachBucketIdToRecord(new MutableRecord(1,"Namaste streaming 1"));
  MutableRecord asiaIndiaRecord2=(MutableRecord)bucketIdResolver.attachBucketIdToRecord(new MutableRecord(2,"Namaste streaming 2"));
  MutableRecord europeUkRecord1=(MutableRecord)bucketIdResolver.attachBucketIdToRecord(new MutableRecord(3,"Hello streaming 1"));
  MutableRecord europeUkRecord2=(MutableRecord)bucketIdResolver.attachBucketIdToRecord(new MutableRecord(4,"Hello streaming 2"));
  MutableRecord europeFranceRecord1=(MutableRecord)bucketIdResolver.attachBucketIdToRecord(new MutableRecord(5,"Bonjour streaming 1"));
  MutableRecord europeFranceRecord2=(MutableRecord)bucketIdResolver.attachBucketIdToRecord(new MutableRecord(6,"Bonjour streaming 2"));
  insertCoordinator.insert(ASIA_INDIA,asiaIndiaRecord1);
  insertCoordinator.insert(ASIA_INDIA,asiaIndiaRecord2);
  insertCoordinator.insert(EUROPE_UK,europeUkRecord1);
  insertCoordinator.insert(EUROPE_UK,europeUkRecord2);
  insertCoordinator.insert(EUROPE_FRANCE,europeFranceRecord1);
  insertCoordinator.insert(EUROPE_FRANCE,europeFranceRecord2);
  insertCoordinator.close();
  insertTransaction.commit();
  assertThat(insertTransaction.getState(),is(COMMITTED));
  client.close();
  client=new MutatorClientBuilder().addSinkTable(table.getDbName(),table.getTableName(),true).metaStoreUri(metaStoreUri).build();
  client.connect();
  Transaction mutateTransaction=client.newTransaction();
  destinations=client.getTables();
  mutateTransaction.begin();
  MutatorCoordinator mutateCoordinator=new MutatorCoordinatorBuilder().metaStoreUri(metaStoreUri).table(destinations.get(0)).mutatorFactory(mutatorFactory).build();
  bucketIdResolver=mutatorFactory.newBucketIdResolver(destinations.get(0).getTotalBuckets());
  MutableRecord asiaIndiaRecord3=(MutableRecord)bucketIdResolver.attachBucketIdToRecord(new MutableRecord(20,"Namaste streaming 3"));
  mutateCoordinator.update(ASIA_INDIA,new MutableRecord(2,"UPDATED: Namaste streaming 2",new RecordIdentifier(1L,0,1L)));
  mutateCoordinator.insert(ASIA_INDIA,asiaIndiaRecord3);
  mutateCoordinator.delete(EUROPE_UK,new MutableRecord(3,"Hello streaming 1",new RecordIdentifier(1L,0,0L)));
  mutateCoordinator.delete(EUROPE_FRANCE,new MutableRecord(5,"Bonjour streaming 1",new RecordIdentifier(1L,0,0L)));
  mutateCoordinator.update(EUROPE_FRANCE,new MutableRecord(6,"UPDATED: Bonjour streaming 2",new RecordIdentifier(1L,0,1L)));
  mutateCoordinator.close();
  mutateTransaction.commit();
  assertThat(mutateTransaction.getState(),is(COMMITTED));
  StreamingAssert indiaAssertions=assertionFactory.newStreamingAssert(table,ASIA_INDIA);
  indiaAssertions.assertMinTransactionId(1L);
  indiaAssertions.assertMaxTransactionId(2L);
  List<Record> indiaRecords=indiaAssertions.readRecords();
  assertThat(indiaRecords.size(),is(3));
  assertThat(indiaRecords.get(0).getRow(),is("{1, Namaste streaming 1}"));
  assertThat(indiaRecords.get(0).getRecordIdentifier(),is(new RecordIdentifier(1L,0,0L)));
  assertThat(indiaRecords.get(1).getRow(),is("{2, UPDATED: Namaste streaming 2}"));
  assertThat(indiaRecords.get(1).getRecordIdentifier(),is(new RecordIdentifier(1L,0,1L)));
  assertThat(indiaRecords.get(2).getRow(),is("{20, Namaste streaming 3}"));
  assertThat(indiaRecords.get(2).getRecordIdentifier(),is(new RecordIdentifier(2L,0,0L)));
  StreamingAssert ukAssertions=assertionFactory.newStreamingAssert(table,EUROPE_UK);
  ukAssertions.assertMinTransactionId(1L);
  ukAssertions.assertMaxTransactionId(2L);
  List<Record> ukRecords=ukAssertions.readRecords();
  assertThat(ukRecords.size(),is(1));
  assertThat(ukRecords.get(0).getRow(),is("{4, Hello streaming 2}"));
  assertThat(ukRecords.get(0).getRecordIdentifier(),is(new RecordIdentifier(1L,0,1L)));
  StreamingAssert franceAssertions=assertionFactory.newStreamingAssert(table,EUROPE_FRANCE);
  franceAssertions.assertMinTransactionId(1L);
  franceAssertions.assertMaxTransactionId(2L);
  List<Record> franceRecords=franceAssertions.readRecords();
  assertThat(franceRecords.size(),is(1));
  assertThat(franceRecords.get(0).getRow(),is("{6, UPDATED: Bonjour streaming 2}"));
  assertThat(franceRecords.get(0).getRecordIdentifier(),is(new RecordIdentifier(1L,0,1L)));
  client.close();
}
