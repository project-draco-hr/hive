{
  try {
    StandardMapObjectInspector moi1=ObjectInspectorFactory.getStandardMapObjectInspector(ObjectInspectorFactory.getStandardPrimitiveObjectInspector(String.class),ObjectInspectorFactory.getStandardPrimitiveObjectInspector(Integer.class));
    StandardMapObjectInspector moi2=ObjectInspectorFactory.getStandardMapObjectInspector(ObjectInspectorFactory.getStandardPrimitiveObjectInspector(String.class),ObjectInspectorFactory.getStandardPrimitiveObjectInspector(Integer.class));
    assertEquals(moi1,moi2);
    assertEquals(Category.MAP,moi1.getCategory());
    assertEquals(moi1.getMapKeyObjectInspector(),ObjectInspectorFactory.getStandardPrimitiveObjectInspector(String.class));
    assertEquals(moi2.getMapValueObjectInspector(),ObjectInspectorFactory.getStandardPrimitiveObjectInspector(Integer.class));
    assertNull(moi1.getMap(null));
    assertNull(moi1.getMapValueElement(null,null));
    assertNull(moi1.getMapValueElement(null,"nokey"));
    assertEquals(-1,moi1.getMapSize(null));
    assertEquals("map<" + ObjectInspectorFactory.getStandardPrimitiveObjectInspector(String.class).getTypeName() + ","+ ObjectInspectorFactory.getStandardPrimitiveObjectInspector(Integer.class).getTypeName()+ ">",moi1.getTypeName());
    HashMap<String,Integer> map=new HashMap<String,Integer>();
    map.put("one",1);
    map.put("two",2);
    map.put("three",3);
    assertEquals(map,moi1.getMap(map));
    assertEquals(3,moi1.getMapSize(map));
    assertEquals(1,moi1.getMapValueElement(map,"one"));
    assertEquals(2,moi1.getMapValueElement(map,"two"));
    assertEquals(3,moi1.getMapValueElement(map,"three"));
    assertNull(moi1.getMapValueElement(map,null));
    assertNull(moi1.getMapValueElement(map,"null"));
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw e;
  }
}
