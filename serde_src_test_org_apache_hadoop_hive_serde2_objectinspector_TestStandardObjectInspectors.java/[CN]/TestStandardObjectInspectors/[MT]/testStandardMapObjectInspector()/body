{
  try {
    StandardMapObjectInspector moi1=ObjectInspectorFactory.getStandardMapObjectInspector(PrimitiveObjectInspectorFactory.javaStringObjectInspector,PrimitiveObjectInspectorFactory.javaIntObjectInspector);
    StandardMapObjectInspector moi2=ObjectInspectorFactory.getStandardMapObjectInspector(PrimitiveObjectInspectorFactory.javaStringObjectInspector,PrimitiveObjectInspectorFactory.javaIntObjectInspector);
    assertEquals(moi1,moi2);
    assertEquals(Category.MAP,moi1.getCategory());
    assertEquals(moi1.getMapKeyObjectInspector(),PrimitiveObjectInspectorFactory.javaStringObjectInspector);
    assertEquals(moi2.getMapValueObjectInspector(),PrimitiveObjectInspectorFactory.javaIntObjectInspector);
    assertNull(moi1.getMap(null));
    assertNull(moi1.getMapValueElement(null,null));
    assertNull(moi1.getMapValueElement(null,"nokey"));
    assertEquals(-1,moi1.getMapSize(null));
    assertEquals("map<" + PrimitiveObjectInspectorFactory.javaStringObjectInspector.getTypeName() + ","+ PrimitiveObjectInspectorFactory.javaIntObjectInspector.getTypeName()+ ">",moi1.getTypeName());
    HashMap<String,Integer> map=new HashMap<String,Integer>();
    map.put("one",1);
    map.put("two",2);
    map.put("three",3);
    assertEquals(map,moi1.getMap(map));
    assertEquals(3,moi1.getMapSize(map));
    assertEquals(1,moi1.getMapValueElement(map,"one"));
    assertEquals(2,moi1.getMapValueElement(map,"two"));
    assertEquals(3,moi1.getMapValueElement(map,"three"));
    assertNull(moi1.getMapValueElement(map,null));
    assertNull(moi1.getMapValueElement(map,"null"));
    Object map3=moi1.create();
    moi1.put(map3,"one",1);
    moi1.put(map3,"two",2);
    moi1.put(map3,"three",3);
    assertEquals(map,map3);
    moi1.clear(map3);
    assertEquals(0,moi1.getMapSize(map3));
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw e;
  }
}
