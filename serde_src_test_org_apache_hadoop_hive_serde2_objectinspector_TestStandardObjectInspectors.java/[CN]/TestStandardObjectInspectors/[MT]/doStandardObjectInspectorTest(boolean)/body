{
  ArrayList<String> fieldNames=new ArrayList<String>();
  fieldNames.add("firstInteger");
  fieldNames.add("secondString");
  fieldNames.add("thirdBoolean");
  ArrayList<ObjectInspector> fieldObjectInspectors=new ArrayList<ObjectInspector>();
  fieldObjectInspectors.add(PrimitiveObjectInspectorFactory.javaIntObjectInspector);
  fieldObjectInspectors.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);
  fieldObjectInspectors.add(PrimitiveObjectInspectorFactory.javaBooleanObjectInspector);
  ArrayList<String> fieldComments=new ArrayList<String>(3);
  if (testComments) {
    fieldComments.add("firstInteger comment");
    fieldComments.add("secondString comment");
    fieldComments.add("thirdBoolean comment");
  }
 else {
    for (int i=0; i < 3; i++) {
      fieldComments.add(null);
    }
  }
  StandardStructObjectInspector soi1=testComments ? ObjectInspectorFactory.getStandardStructObjectInspector(fieldNames,fieldObjectInspectors,fieldComments) : ObjectInspectorFactory.getStandardStructObjectInspector(fieldNames,fieldObjectInspectors);
  StandardStructObjectInspector soi2=testComments ? ObjectInspectorFactory.getStandardStructObjectInspector((ArrayList<String>)fieldNames.clone(),(ArrayList<ObjectInspector>)fieldObjectInspectors.clone(),(ArrayList<String>)fieldComments.clone()) : ObjectInspectorFactory.getStandardStructObjectInspector((ArrayList<String>)fieldNames.clone(),(ArrayList<ObjectInspector>)fieldObjectInspectors.clone());
  assertEquals(soi1,soi2);
  assertEquals(Category.STRUCT,soi1.getCategory());
  List<? extends StructField> fields=soi1.getAllStructFieldRefs();
  assertEquals(3,fields.size());
  for (int i=0; i < 3; i++) {
    assertEquals(fieldNames.get(i).toLowerCase(),fields.get(i).getFieldName());
    assertEquals(fieldObjectInspectors.get(i),fields.get(i).getFieldObjectInspector());
    assertEquals(fieldComments.get(i),fields.get(i).getFieldComment());
  }
  assertEquals(fields.get(1),soi1.getStructFieldRef("secondString"));
  StringBuilder structTypeName=new StringBuilder();
  structTypeName.append("struct<");
  for (int i=0; i < fields.size(); i++) {
    if (i > 0) {
      structTypeName.append(",");
    }
    structTypeName.append(fields.get(i).getFieldName());
    structTypeName.append(":");
    structTypeName.append(fields.get(i).getFieldObjectInspector().getTypeName());
  }
  structTypeName.append(">");
  assertEquals(structTypeName.toString(),soi1.getTypeName());
  assertNull(soi1.getStructFieldData(null,fields.get(0)));
  assertNull(soi1.getStructFieldData(null,fields.get(1)));
  assertNull(soi1.getStructFieldData(null,fields.get(2)));
  assertNull(soi1.getStructFieldsDataAsList(null));
  ArrayList<Object> struct=new ArrayList<Object>(3);
  struct.add(1);
  struct.add("two");
  struct.add(true);
  assertEquals(1,soi1.getStructFieldData(struct,fields.get(0)));
  assertEquals("two",soi1.getStructFieldData(struct,fields.get(1)));
  assertEquals(true,soi1.getStructFieldData(struct,fields.get(2)));
  Object struct3=soi1.create();
  System.out.println(struct3);
  soi1.setStructFieldData(struct3,fields.get(0),1);
  soi1.setStructFieldData(struct3,fields.get(1),"two");
  soi1.setStructFieldData(struct3,fields.get(2),true);
  assertEquals(struct,struct3);
}
