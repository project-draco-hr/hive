{
  try {
    PrimitiveObjectInspector oi1=PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(PrimitiveObjectInspectorUtils.getTypeEntryFromPrimitiveWritableClass(writableClass).primitiveCategory);
    PrimitiveObjectInspector oi2=PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(PrimitiveObjectInspectorUtils.getTypeEntryFromPrimitiveWritableClass(writableClass).primitiveCategory);
    assertEquals(oi1,oi2);
    assertEquals(Category.PRIMITIVE,oi1.getCategory());
    assertEquals(writableClass,oi1.getPrimitiveWritableClass());
    assertEquals(javaClass,oi1.getJavaPrimitiveClass());
    if (!NullWritable.class.equals(writableClass)) {
      assertEquals(writableClass,oi1.getPrimitiveWritableObject(writableClass.newInstance()).getClass());
      assertEquals(javaClass,oi1.getPrimitiveJavaObject(writableClass.newInstance()).getClass());
    }
    assertEquals(PrimitiveObjectInspectorUtils.getTypeNameFromPrimitiveWritable(writableClass),oi1.getTypeName());
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw e;
  }
}
