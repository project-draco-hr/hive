{
  try {
    PrimitiveObjectInspector oi1=PrimitiveObjectInspectorFactory.getPrimitiveJavaObjectInspector(PrimitiveObjectInspectorUtils.getTypeEntryFromPrimitiveJavaClass(javaClass).primitiveCategory);
    PrimitiveObjectInspector oi2=PrimitiveObjectInspectorFactory.getPrimitiveJavaObjectInspector(PrimitiveObjectInspectorUtils.getTypeEntryFromPrimitiveJavaClass(javaClass).primitiveCategory);
    assertEquals(oi1,oi2);
    assertEquals(Category.PRIMITIVE,oi1.getCategory());
    assertEquals(javaClass,oi1.getJavaPrimitiveClass());
    assertEquals(writableClass,oi1.getPrimitiveWritableClass());
    if (javaObject != null) {
      assertEquals(javaClass,oi1.getPrimitiveJavaObject(javaObject).getClass());
      assertEquals(writableClass,oi1.getPrimitiveWritableObject(javaObject).getClass());
    }
    assertEquals(PrimitiveObjectInspectorUtils.getTypeNameFromPrimitiveJava(javaClass),oi1.getTypeName());
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw e;
  }
}
