{
  JoinCondDesc[] condns=op.getConf().getConds();
  if (!noCheckOuterJoin) {
    if (checkMapJoin(bigTablePos,condns) < 0) {
      throw new SemanticException(ErrorMsg.NO_OUTER_MAPJOIN.getMsg());
    }
  }
  MapJoinOperator mapJoinOp=convertJoinOpMapJoinOp(conf,op,op.getConf().isLeftInputJoin(),op.getConf().getBaseSrc(),op.getConf().getMapAliases(),bigTablePos,noCheckOuterJoin);
  List<Operator<? extends OperatorDesc>> parentOps=mapJoinOp.getParentOperators();
  for (int i=0; i < parentOps.size(); i++) {
    Operator<? extends OperatorDesc> parentOp=parentOps.get(i);
    parentOp.getChildOperators().remove(op);
    if (i == bigTablePos) {
      List<Operator<? extends OperatorDesc>> grandParentOps=parentOp.getParentOperators();
      Preconditions.checkArgument(grandParentOps.size() == 1,"AssertionError: expect number of parents to be 1, but was " + grandParentOps.size());
      Operator<? extends OperatorDesc> grandParentOp=grandParentOps.get(0);
      grandParentOp.replaceChild(parentOp,mapJoinOp);
      mapJoinOp.replaceParent(parentOp,grandParentOp);
    }
  }
  return mapJoinOp;
}
