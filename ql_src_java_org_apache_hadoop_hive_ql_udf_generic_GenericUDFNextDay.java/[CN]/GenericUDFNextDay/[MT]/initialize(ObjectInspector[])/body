{
  if (arguments.length != 2) {
    throw new UDFArgumentLengthException("next_day() requires 2 argument, got " + arguments.length);
  }
  if (arguments[0].getCategory() != ObjectInspector.Category.PRIMITIVE) {
    throw new UDFArgumentTypeException(0,"Only primitive type arguments are accepted but " + arguments[0].getTypeName() + " is passed as first arguments");
  }
  if (arguments[1].getCategory() != ObjectInspector.Category.PRIMITIVE) {
    throw new UDFArgumentTypeException(1,"Only primitive type arguments are accepted but " + arguments[1].getTypeName() + " is passed as second arguments");
  }
  inputType1=((PrimitiveObjectInspector)arguments[0]).getPrimitiveCategory();
  ObjectInspector outputOI=PrimitiveObjectInspectorFactory.writableStringObjectInspector;
switch (inputType1) {
case STRING:
case VARCHAR:
case CHAR:
    inputType1=PrimitiveCategory.STRING;
  textConverter0=ObjectInspectorConverters.getConverter((PrimitiveObjectInspector)arguments[0],PrimitiveObjectInspectorFactory.writableStringObjectInspector);
break;
case TIMESTAMP:
timestampConverter=new TimestampConverter((PrimitiveObjectInspector)arguments[0],PrimitiveObjectInspectorFactory.writableTimestampObjectInspector);
break;
case DATE:
dateWritableConverter=ObjectInspectorConverters.getConverter((PrimitiveObjectInspector)arguments[0],PrimitiveObjectInspectorFactory.writableDateObjectInspector);
break;
default :
throw new UDFArgumentTypeException(0,"next_day() only takes STRING/TIMESTAMP/DATEWRITABLE types as first argument, got " + inputType1);
}
inputType2=((PrimitiveObjectInspector)arguments[1]).getPrimitiveCategory();
if (PrimitiveObjectInspectorUtils.getPrimitiveGrouping(inputType2) != PrimitiveGrouping.STRING_GROUP) {
throw new UDFArgumentTypeException(1,"next_day() only takes STRING_GROUP types as second argument, got " + inputType2);
}
textConverter1=ObjectInspectorConverters.getConverter((PrimitiveObjectInspector)arguments[1],PrimitiveObjectInspectorFactory.writableStringObjectInspector);
return outputOI;
}
