{
  final DoubleColumnVector result;
  if (previousVector == null) {
    result=new DoubleColumnVector();
  }
 else {
    result=(DoubleColumnVector)previousVector;
  }
  super.nextVector(result,batchSize);
  final boolean hasNulls=!result.noNulls;
  boolean allNulls=hasNulls;
  if (hasNulls) {
    for (int i=0; i < batchSize && batchSize <= result.isNull.length; i++) {
      allNulls=allNulls & result.isNull[i];
    }
    if (allNulls) {
      result.vector[0]=Double.NaN;
      result.isRepeating=true;
    }
 else {
      result.isRepeating=false;
      for (int i=0; batchSize <= result.isNull.length && batchSize <= result.vector.length && i < batchSize; i++) {
        if (!result.isNull[i]) {
          result.vector[i]=utils.readDouble(stream);
        }
 else {
          result.vector[i]=Double.NaN;
        }
      }
    }
  }
 else {
    boolean repeating=(batchSize > 1);
    final double d1=utils.readDouble(stream);
    result.vector[0]=d1;
    for (int i=1; i < batchSize && batchSize <= result.vector.length; i++) {
      final double d2=utils.readDouble(stream);
      repeating=repeating && (d1 == d2);
      result.vector[i]=d2;
    }
    result.isRepeating=repeating;
  }
  return result;
}
