{
  super(columnId);
  OrcProto.Type fileStructType=treeReaderSchema.getFileTypes().get(columnId);
  OrcProto.Type schemaStructType=treeReaderSchema.getSchemaTypes().get(columnId);
  readColumnCount=Math.min(fileStructType.getFieldNamesCount(),schemaStructType.getFieldNamesCount());
  if (columnId == treeReaderSchema.getInnerStructSubtype()) {
    resultColumnCount=schemaStructType.getFieldNamesCount();
  }
 else {
    resultColumnCount=readColumnCount;
  }
  this.fields=new TreeReader[readColumnCount];
  this.fieldNames=new String[readColumnCount];
  if (included == null) {
    for (int i=0; i < readColumnCount; ++i) {
      int subtype=schemaStructType.getSubtypes(i);
      this.fields[i]=createTreeReader(subtype,treeReaderSchema,included,skipCorrupt);
      this.fieldNames[i]=schemaStructType.getFieldNames(i);
    }
  }
 else {
    for (int i=0; i < readColumnCount; ++i) {
      int subtype=schemaStructType.getSubtypes(i);
      if (subtype >= included.length) {
        throw new IOException("subtype " + subtype + " exceeds the included array size "+ included.length+ " fileTypes "+ treeReaderSchema.getFileTypes().toString()+ " schemaTypes "+ treeReaderSchema.getSchemaTypes().toString()+ " innerStructSubtype "+ treeReaderSchema.getInnerStructSubtype());
      }
      if (included[subtype]) {
        this.fields[i]=createTreeReader(subtype,treeReaderSchema,included,skipCorrupt);
      }
      this.fieldNames[i]=schemaStructType.getFieldNames(i);
    }
  }
}
