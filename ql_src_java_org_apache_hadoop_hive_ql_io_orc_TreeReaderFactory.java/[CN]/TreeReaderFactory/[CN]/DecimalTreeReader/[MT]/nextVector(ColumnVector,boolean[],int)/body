{
  final DecimalColumnVector result=(DecimalColumnVector)previousVector;
  super.nextVector(result,isNull,batchSize);
  if (batchSize > scratchScaleVector.length) {
    scratchScaleVector=new int[(int)batchSize];
  }
  scaleReader.nextVector(result,scratchScaleVector,batchSize);
  if (result.noNulls) {
    for (int r=0; r < batchSize; ++r) {
      BigInteger bInt=SerializationUtils.readBigInteger(valueStream);
      HiveDecimal dec=HiveDecimal.create(bInt,scratchScaleVector[r]);
      result.set(r,dec);
    }
  }
 else   if (!result.isRepeating || !result.isNull[0]) {
    for (int r=0; r < batchSize; ++r) {
      if (!result.isNull[r]) {
        BigInteger bInt=SerializationUtils.readBigInteger(valueStream);
        HiveDecimal dec=HiveDecimal.create(bInt,scratchScaleVector[r]);
        result.set(r,dec);
      }
    }
  }
}
