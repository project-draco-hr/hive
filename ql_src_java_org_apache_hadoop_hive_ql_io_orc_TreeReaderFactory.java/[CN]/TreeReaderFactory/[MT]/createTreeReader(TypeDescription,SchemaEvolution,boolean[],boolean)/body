{
  TypeDescription fileType=evolution.getFileType(readerType);
  if (fileType == null || (included != null && !included[readerType.getId()])) {
    return new NullTreeReader(0);
  }
switch (readerType.getCategory()) {
case BOOLEAN:
    return new BooleanTreeReader(fileType.getId());
case BYTE:
  return new ByteTreeReader(fileType.getId());
case DOUBLE:
return new DoubleTreeReader(fileType.getId());
case FLOAT:
return new FloatTreeReader(fileType.getId());
case SHORT:
return new ShortTreeReader(fileType.getId());
case INT:
return new IntTreeReader(fileType.getId());
case LONG:
return new LongTreeReader(fileType.getId(),skipCorrupt);
case STRING:
return new StringTreeReader(fileType.getId());
case CHAR:
return new CharTreeReader(fileType.getId(),readerType.getMaxLength());
case VARCHAR:
return new VarcharTreeReader(fileType.getId(),readerType.getMaxLength());
case BINARY:
return new BinaryTreeReader(fileType.getId());
case TIMESTAMP:
return new TimestampTreeReader(fileType.getId(),skipCorrupt);
case DATE:
return new DateTreeReader(fileType.getId());
case DECIMAL:
return new DecimalTreeReader(fileType.getId(),readerType.getPrecision(),readerType.getScale());
case STRUCT:
return new StructTreeReader(fileType.getId(),readerType,evolution,included,skipCorrupt);
case LIST:
return new ListTreeReader(fileType.getId(),readerType,evolution,included,skipCorrupt);
case MAP:
return new MapTreeReader(fileType.getId(),readerType,evolution,included,skipCorrupt);
case UNION:
return new UnionTreeReader(fileType.getId(),readerType,evolution,included,skipCorrupt);
default :
throw new IllegalArgumentException("Unsupported type " + readerType.getCategory());
}
}
