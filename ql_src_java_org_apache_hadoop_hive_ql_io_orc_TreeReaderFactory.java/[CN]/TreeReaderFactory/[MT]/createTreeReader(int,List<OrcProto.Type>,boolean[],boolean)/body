{
  OrcProto.Type type=types.get(columnId);
switch (type.getKind()) {
case BOOLEAN:
    return new BooleanTreeReader(columnId);
case BYTE:
  return new ByteTreeReader(columnId);
case DOUBLE:
return new DoubleTreeReader(columnId);
case FLOAT:
return new FloatTreeReader(columnId);
case SHORT:
return new ShortTreeReader(columnId);
case INT:
return new IntTreeReader(columnId);
case LONG:
return new LongTreeReader(columnId,skipCorrupt);
case STRING:
return new StringTreeReader(columnId);
case CHAR:
if (!type.hasMaximumLength()) {
throw new IllegalArgumentException("ORC char type has no length specified");
}
return new CharTreeReader(columnId,type.getMaximumLength());
case VARCHAR:
if (!type.hasMaximumLength()) {
throw new IllegalArgumentException("ORC varchar type has no length specified");
}
return new VarcharTreeReader(columnId,type.getMaximumLength());
case BINARY:
return new BinaryTreeReader(columnId);
case TIMESTAMP:
return new TimestampTreeReader(columnId,skipCorrupt);
case DATE:
return new DateTreeReader(columnId);
case DECIMAL:
int precision=type.hasPrecision() ? type.getPrecision() : HiveDecimal.SYSTEM_DEFAULT_PRECISION;
int scale=type.hasScale() ? type.getScale() : HiveDecimal.SYSTEM_DEFAULT_SCALE;
return new DecimalTreeReader(columnId,precision,scale);
case STRUCT:
return new StructTreeReader(columnId,types,included,skipCorrupt);
case LIST:
return new ListTreeReader(columnId,types,included,skipCorrupt);
case MAP:
return new MapTreeReader(columnId,types,included,skipCorrupt);
case UNION:
return new UnionTreeReader(columnId,types,included,skipCorrupt);
default :
throw new IllegalArgumentException("Unsupported type " + type.getKind());
}
}
