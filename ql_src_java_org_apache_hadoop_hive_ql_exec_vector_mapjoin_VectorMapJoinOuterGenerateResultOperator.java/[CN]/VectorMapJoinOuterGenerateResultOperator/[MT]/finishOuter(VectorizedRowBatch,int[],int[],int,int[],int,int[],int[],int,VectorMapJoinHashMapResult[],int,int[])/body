{
  int numSel=0;
  if (matchCount > 0 && bigTableFilterExpressions.length > 0) {
    System.arraycopy(matchs,0,batch.selected,0,matchCount);
    batch.size=matchCount;
    for (    VectorExpression ve : bigTableFilterExpressions) {
      ve.evaluate(batch);
    }
    if (batch.size < matchCount) {
      int numMatch=0;
      int[] selected=batch.selected;
      for (int i=0; i < batch.size; i++) {
        if (selected[i] == matchs[numMatch]) {
          matchHashMapResultIndices[numMatch]=matchHashMapResultIndices[i];
          numMatch++;
          if (numMatch == matchCount) {
            break;
          }
        }
      }
      System.arraycopy(batch.selected,0,matchs,0,matchCount);
    }
  }
  if (bigTableValueExpressions != null) {
    System.arraycopy(nonSpills,0,batch.selected,0,nonSpillCount);
    batch.size=nonSpillCount;
    for (    VectorExpression ve : bigTableValueExpressions) {
      ve.evaluate(batch);
    }
  }
  int[] noMatchs=scratch1;
  int noMatchCount=0;
  if (matchCount < nonSpillCount) {
    int matchIndex=0;
    for (int i=0; i < nonSpillCount; i++) {
      int candidateIndex=nonSpills[i];
      if (matchIndex < matchCount && candidateIndex == matchs[matchIndex]) {
        matchIndex++;
      }
 else {
        noMatchs[noMatchCount++]=candidateIndex;
      }
    }
  }
  if (matchCount > 0) {
    numSel=generateOuterHashMapMatchResults(batch,matchs,matchHashMapResultIndices,matchCount,hashMapResults,numSel);
  }
  if (noMatchCount > 0) {
    numSel=generateOuterHashMapNoMatchResults(batch,noMatchs,noMatchCount,numSel);
  }
  if (spillCount > 0) {
    spillHashMapBatch(batch,(VectorMapJoinHashTableResult[])hashMapResults,spills,spillHashMapResultIndices,spillCount);
  }
  return numSel;
}
