{
  int[] selected=batch.selected;
  for (int i=0; i < matchSize; i++) {
    int batchIndex=matchs[i];
    int hashMapResultIndex=matchHashMapResultIndices[i];
    VectorMapJoinHashMapResult hashMapResult=hashMapResults[hashMapResultIndex];
    if (!hashMapResult.isSingleRow()) {
      copyOuterHashMapResultToOverflow(batch,batchIndex,hashMapResult);
    }
 else {
      ByteSegmentRef byteSegmentRef=hashMapResult.first();
      if (bigTableVectorCopyOuterKeys != null) {
        bigTableVectorCopyOuterKeys.copyByReference(batch,batchIndex,batch,batchIndex);
      }
      if (smallTableVectorDeserializeRow != null) {
        byte[] bytes=byteSegmentRef.getBytes();
        int offset=(int)byteSegmentRef.getOffset();
        int length=byteSegmentRef.getLength();
        smallTableVectorDeserializeRow.setBytes(bytes,offset,length);
        smallTableVectorDeserializeRow.deserializeByValue(batch,batchIndex);
      }
      selected[numSel++]=batchIndex;
    }
  }
  return numSel;
}
