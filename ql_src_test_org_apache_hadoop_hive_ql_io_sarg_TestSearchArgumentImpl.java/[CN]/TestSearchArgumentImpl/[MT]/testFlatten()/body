{
  assertEquals("leaf-1",SearchArgumentImpl.BuilderImpl.flatten(leaf(1)).toString());
  assertEquals("NO",SearchArgumentImpl.BuilderImpl.flatten(constant(TruthValue.NO)).toString());
  assertEquals("(not (not leaf-1))",SearchArgumentImpl.BuilderImpl.flatten(not(not(leaf(1)))).toString());
  assertEquals("(and leaf-1 leaf-2)",SearchArgumentImpl.BuilderImpl.flatten(and(leaf(1),leaf(2))).toString());
  assertEquals("(and (or leaf-1 leaf-2) leaf-3)",SearchArgumentImpl.BuilderImpl.flatten(and(or(leaf(1),leaf(2)),leaf(3))).toString());
  assertEquals("(and leaf-1 leaf-2 leaf-3 leaf-4)",SearchArgumentImpl.BuilderImpl.flatten(and(and(leaf(1),leaf(2)),and(leaf(3),leaf(4)))).toString());
  assertEquals("(or leaf-1 leaf-2 leaf-3 leaf-4)",SearchArgumentImpl.BuilderImpl.flatten(or(leaf(1),or(leaf(2),or(leaf(3),leaf(4))))).toString());
  assertEquals("(or leaf-1 leaf-2 leaf-3 leaf-4)",SearchArgumentImpl.BuilderImpl.flatten(or(or(or(leaf(1),leaf(2)),leaf(3)),leaf(4))).toString());
  assertEquals("(or leaf-1 leaf-2 leaf-3 leaf-4 leaf-5 leaf-6)",SearchArgumentImpl.BuilderImpl.flatten(or(or(leaf(1),or(leaf(2),leaf(3))),or(or(leaf(4),leaf(5)),leaf(6)))).toString());
  assertEquals("(and (not leaf-1) leaf-2 (not leaf-3) leaf-4 (not leaf-5) leaf-6)",SearchArgumentImpl.BuilderImpl.flatten(and(and(not(leaf(1)),and(leaf(2),not(leaf(3)))),and(and(leaf(4),not(leaf(5))),leaf(6)))).toString());
  assertEquals("(not (and leaf-1 leaf-2 leaf-3))",SearchArgumentImpl.BuilderImpl.flatten(not(and(leaf(1),and(leaf(2),leaf(3))))).toString());
}
