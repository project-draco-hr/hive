{
  String exprStr="<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n" + "<java version=\"1.6.0_31\" class=\"java.beans.XMLDecoder\"> \n" + " <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc\"> \n"+ "  <void property=\"children\"> \n"+ "   <object class=\"java.util.ArrayList\"> \n"+ "    <void method=\"add\"> \n"+ "     <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeColumnDesc\"> \n"+ "      <void property=\"column\"> \n"+ "       <string>first_name</string> \n"+ "      </void> \n"+ "      <void property=\"tabAlias\"> \n"+ "       <string>orc_people</string> \n"+ "      </void> \n"+ "      <void property=\"typeInfo\"> \n"+ "       <object id=\"PrimitiveTypeInfo0\" class=\"org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo\"> \n"+ "        <void property=\"typeName\"> \n"+ "         <string>string</string> \n"+ "        </void> \n"+ "       </object> \n"+ "      </void> \n"+ "     </object> \n"+ "    </void> \n"+ "    <void method=\"add\"> \n"+ "     <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeColumnDesc\"> \n"+ "      <void property=\"column\"> \n"+ "       <string>last_name</string> \n"+ "      </void> \n"+ "      <void property=\"tabAlias\"> \n"+ "       <string>orc_people</string> \n"+ "      </void> \n"+ "      <void property=\"typeInfo\"> \n"+ "       <object idref=\"PrimitiveTypeInfo0\"/> \n"+ "      </void> \n"+ "     </object> \n"+ "    </void> \n"+ "   </object> \n"+ "  </void> \n"+ "  <void property=\"genericUDF\"> \n"+ "   <object class=\"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqual\"/> \n"+ "  </void> \n"+ "  <void property=\"typeInfo\"> \n"+ "   <object class=\"org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo\"> \n"+ "    <void property=\"typeName\"> \n"+ "     <string>boolean</string> \n"+ "    </void> \n"+ "   </object> \n"+ "  </void> \n"+ " </object> \n"+ "</java> ";
  SearchArgumentImpl sarg=(SearchArgumentImpl)SearchArgumentFactory.create(getFuncDesc(exprStr));
  List<PredicateLeaf> leaves=sarg.getLeaves();
  assertEquals(0,leaves.size());
  FilterPredicate p=ParquetRecordReaderWrapper.toFilterPredicate(sarg);
  assertNull(p);
  assertEquals("YES_NO_NULL",sarg.getExpression().toString());
}
