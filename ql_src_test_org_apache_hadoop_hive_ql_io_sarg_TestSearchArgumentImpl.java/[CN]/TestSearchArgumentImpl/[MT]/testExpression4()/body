{
  String exprStr="<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n" + "<java version=\"1.6.0_31\" class=\"java.beans.XMLDecoder\"> \n" + " <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc\"> \n"+ "  <void property=\"childExprs\"> \n"+ "   <object class=\"java.util.ArrayList\"> \n"+ "    <void method=\"add\"> \n"+ "     <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc\"> \n"+ "      <void property=\"childExprs\"> \n"+ "       <object class=\"java.util.ArrayList\"> \n"+ "        <void method=\"add\"> \n"+ "         <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc\"> \n"+ "          <void property=\"childExprs\"> \n"+ "           <object class=\"java.util.ArrayList\"> \n"+ "            <void method=\"add\"> \n"+ "             <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeColumnDesc\"> \n"+ "              <void property=\"column\"> \n"+ "               <string>id</string> \n"+ "              </void> \n"+ "              <void property=\"tabAlias\"> \n"+ "               <string>orc_people</string> \n"+ "              </void> \n"+ "              <void property=\"typeInfo\"> \n"+ "               <object id=\"PrimitiveTypeInfo0\" class=\"org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo\"> \n"+ "                <void property=\"typeName\"> \n"+ "                 <string>int</string> \n"+ "                </void> \n"+ "               </object> \n"+ "              </void> \n"+ "             </object> \n"+ "            </void> \n"+ "            <void method=\"add\"> \n"+ "             <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeConstantDesc\"> \n"+ "              <void property=\"typeInfo\"> \n"+ "               <object idref=\"PrimitiveTypeInfo0\"/> \n"+ "              </void> \n"+ "              <void property=\"value\"> \n"+ "               <int>12</int> \n"+ "              </void> \n"+ "             </object> \n"+ "            </void> \n"+ "           </object> \n"+ "          </void> \n"+ "          <void property=\"genericUDF\"> \n"+ "           <object class=\"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPNotEqual\"/> \n"+ "          </void> \n"+ "          <void property=\"typeInfo\"> \n"+ "           <object id=\"PrimitiveTypeInfo1\" class=\"org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo\"> \n"+ "            <void property=\"typeName\"> \n"+ "             <string>boolean</string> \n"+ "            </void> \n"+ "           </object> \n"+ "          </void> \n"+ "         </object> \n"+ "        </void> \n"+ "        <void method=\"add\"> \n"+ "         <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc\"> \n"+ "          <void property=\"childExprs\"> \n"+ "           <object class=\"java.util.ArrayList\"> \n"+ "            <void method=\"add\"> \n"+ "             <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeColumnDesc\"> \n"+ "              <void property=\"column\"> \n"+ "               <string>first_name</string> \n"+ "              </void> \n"+ "              <void property=\"tabAlias\"> \n"+ "               <string>orc_people</string> \n"+ "              </void> \n"+ "              <void property=\"typeInfo\"> \n"+ "               <object id=\"PrimitiveTypeInfo2\" class=\"org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo\"> \n"+ "                <void property=\"typeName\"> \n"+ "                 <string>string</string> \n"+ "                </void> \n"+ "               </object> \n"+ "              </void> \n"+ "             </object> \n"+ "            </void> \n"+ "            <void method=\"add\"> \n"+ "             <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeConstantDesc\"> \n"+ "              <void property=\"typeInfo\"> \n"+ "               <object idref=\"PrimitiveTypeInfo2\"/> \n"+ "              </void> \n"+ "              <void property=\"value\"> \n"+ "               <string>john</string> \n"+ "              </void> \n"+ "             </object> \n"+ "            </void> \n"+ "            <void method=\"add\"> \n"+ "             <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeConstantDesc\"> \n"+ "              <void property=\"typeInfo\"> \n"+ "               <object idref=\"PrimitiveTypeInfo2\"/> \n"+ "              </void> \n"+ "              <void property=\"value\"> \n"+ "               <string>sue</string> \n"+ "              </void> \n"+ "             </object> \n"+ "            </void> \n"+ "           </object> \n"+ "          </void> \n"+ "          <void property=\"genericUDF\"> \n"+ "           <object class=\"org.apache.hadoop.hive.ql.udf.generic.GenericUDFIn\"/> \n"+ "          </void> \n"+ "          <void property=\"typeInfo\"> \n"+ "           <object idref=\"PrimitiveTypeInfo1\"/> \n"+ "          </void> \n"+ "         </object> \n"+ "        </void> \n"+ "       </object> \n"+ "      </void> \n"+ "      <void property=\"genericUDF\"> \n"+ "       <object class=\"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPAnd\"/> \n"+ "      </void> \n"+ "      <void property=\"typeInfo\"> \n"+ "       <object idref=\"PrimitiveTypeInfo1\"/> \n"+ "      </void> \n"+ "     </object> \n"+ "    </void> \n"+ "    <void method=\"add\"> \n"+ "     <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc\"> \n"+ "      <void property=\"childExprs\"> \n"+ "       <object class=\"java.util.ArrayList\"> \n"+ "        <void method=\"add\"> \n"+ "         <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeColumnDesc\"> \n"+ "          <void property=\"column\"> \n"+ "           <string>id</string> \n"+ "          </void> \n"+ "          <void property=\"tabAlias\"> \n"+ "           <string>orc_people</string> \n"+ "          </void> \n"+ "          <void property=\"typeInfo\"> \n"+ "           <object idref=\"PrimitiveTypeInfo0\"/> \n"+ "          </void> \n"+ "         </object> \n"+ "        </void> \n"+ "        <void method=\"add\"> \n"+ "         <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeConstantDesc\"> \n"+ "          <void property=\"typeInfo\"> \n"+ "           <object idref=\"PrimitiveTypeInfo0\"/> \n"+ "          </void> \n"+ "          <void property=\"value\"> \n"+ "           <int>34</int> \n"+ "          </void> \n"+ "         </object> \n"+ "        </void> \n"+ "        <void method=\"add\"> \n"+ "         <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeConstantDesc\"> \n"+ "          <void property=\"typeInfo\"> \n"+ "           <object idref=\"PrimitiveTypeInfo0\"/> \n"+ "          </void> \n"+ "          <void property=\"value\"> \n"+ "           <int>50</int> \n"+ "          </void> \n"+ "         </object> \n"+ "        </void> \n"+ "       </object> \n"+ "      </void> \n"+ "      <void property=\"genericUDF\"> \n"+ "       <object class=\"org.apache.hadoop.hive.ql.udf.generic.GenericUDFIn\"/> \n"+ "      </void> \n"+ "      <void property=\"typeInfo\"> \n"+ "       <object idref=\"PrimitiveTypeInfo1\"/> \n"+ "      </void> \n"+ "     </object> \n"+ "    </void> \n"+ "   </object> \n"+ "  </void> \n"+ "  <void property=\"genericUDF\"> \n"+ "   <object class=\"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPAnd\"/> \n"+ "  </void> \n"+ "  <void property=\"typeInfo\"> \n"+ "   <object idref=\"PrimitiveTypeInfo1\"/> \n"+ "  </void> \n"+ " </object> \n"+ "</java> \n"+ "\n";
  Configuration conf=new Configuration();
  ExprNodeDesc expr=Utilities.deserializeExpression(exprStr,conf);
  SearchArgumentImpl sarg=(SearchArgumentImpl)SearchArgument.FACTORY.create(expr);
  List<PredicateLeaf> leaves=sarg.getLeaves();
  assertEquals(3,leaves.size());
  PredicateLeaf leaf=leaves.get(0);
  assertEquals(PredicateLeaf.Type.INTEGER,leaf.getType());
  assertEquals(PredicateLeaf.Operator.EQUALS,leaf.getOperator());
  assertEquals("id",leaf.getColumnName());
  assertEquals(new LongWritable(12),leaf.getLiteral());
  leaf=leaves.get(1);
  assertEquals(PredicateLeaf.Type.STRING,leaf.getType());
  assertEquals(PredicateLeaf.Operator.IN,leaf.getOperator());
  assertEquals("first_name",leaf.getColumnName());
  assertEquals(new Text("john"),leaf.getLiteralList().get(0));
  assertEquals(new Text("sue"),leaf.getLiteralList().get(1));
  leaf=leaves.get(2);
  assertEquals(PredicateLeaf.Type.INTEGER,leaf.getType());
  assertEquals(PredicateLeaf.Operator.IN,leaf.getOperator());
  assertEquals("id",leaf.getColumnName());
  assertEquals(new LongWritable(34),leaf.getLiteralList().get(0));
  assertEquals(new LongWritable(50),leaf.getLiteralList().get(1));
  assertEquals("(and (not leaf-0) leaf-1 leaf-2)",sarg.getExpression().toString());
  assertNoSharedNodes(sarg.getExpression(),new IdentityHashSet<ExpressionTree>());
  assertEquals(TruthValue.YES,sarg.evaluate(values(TruthValue.NO,TruthValue.YES,TruthValue.YES)));
  assertEquals(TruthValue.NULL,sarg.evaluate(values(TruthValue.NULL,TruthValue.YES,TruthValue.YES)));
  assertEquals(TruthValue.NULL,sarg.evaluate(values(TruthValue.NO,TruthValue.NULL,TruthValue.YES)));
  assertEquals(TruthValue.NO,sarg.evaluate(values(TruthValue.YES,TruthValue.YES,TruthValue.YES)));
  assertEquals(TruthValue.NO,sarg.evaluate(values(TruthValue.NO,TruthValue.YES,TruthValue.NO)));
  assertEquals(TruthValue.NO,sarg.evaluate(values(TruthValue.NO,TruthValue.YES_NULL,TruthValue.NO)));
  assertEquals(TruthValue.NO_NULL,sarg.evaluate(values(TruthValue.NO,TruthValue.NULL,TruthValue.YES_NO_NULL)));
  assertEquals(TruthValue.NO_NULL,sarg.evaluate(values(TruthValue.NO,TruthValue.YES,TruthValue.NO_NULL)));
}
