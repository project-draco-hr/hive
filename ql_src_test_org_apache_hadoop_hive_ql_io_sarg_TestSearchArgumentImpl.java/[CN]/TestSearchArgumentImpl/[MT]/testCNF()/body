{
  assertEquals("leaf-1",ExpressionBuilder.convertToCNF(leaf(1)).toString());
  assertEquals("NO",ExpressionBuilder.convertToCNF(constant(TruthValue.NO)).toString());
  assertEquals("(not leaf-1)",ExpressionBuilder.convertToCNF(not(leaf(1))).toString());
  assertEquals("(and leaf-1 leaf-2)",ExpressionBuilder.convertToCNF(and(leaf(1),leaf(2))).toString());
  assertEquals("(or (not leaf-1) leaf-2)",ExpressionBuilder.convertToCNF(or(not(leaf(1)),leaf(2))).toString());
  assertEquals("(and (or leaf-1 leaf-2) (not leaf-3))",ExpressionBuilder.convertToCNF(and(or(leaf(1),leaf(2)),not(leaf(3)))).toString());
  assertEquals("(and (or leaf-1 leaf-3) (or leaf-2 leaf-3)" + " (or leaf-1 leaf-4) (or leaf-2 leaf-4))",ExpressionBuilder.convertToCNF(or(and(leaf(1),leaf(2)),and(leaf(3),leaf(4)))).toString());
  assertEquals("(and" + " (or leaf-1 leaf-5) (or leaf-2 leaf-5)" + " (or leaf-3 leaf-5) (or leaf-4 leaf-5)"+ " (or leaf-1 leaf-6) (or leaf-2 leaf-6)"+ " (or leaf-3 leaf-6) (or leaf-4 leaf-6))",ExpressionBuilder.convertToCNF(or(and(leaf(1),leaf(2),leaf(3),leaf(4)),and(leaf(5),leaf(6)))).toString());
  assertEquals("(and" + " (or leaf-5 leaf-6 (not leaf-7) leaf-1 leaf-3)" + " (or leaf-5 leaf-6 (not leaf-7) leaf-2 leaf-3)"+ " (or leaf-5 leaf-6 (not leaf-7) leaf-1 leaf-4)"+ " (or leaf-5 leaf-6 (not leaf-7) leaf-2 leaf-4))",ExpressionBuilder.convertToCNF(or(and(leaf(1),leaf(2)),and(leaf(3),leaf(4)),or(leaf(5),leaf(6)),not(leaf(7)))).toString());
  assertEquals("(and" + " (or leaf-8 leaf-0 leaf-3 leaf-6)" + " (or leaf-8 leaf-1 leaf-3 leaf-6)"+ " (or leaf-8 leaf-2 leaf-3 leaf-6)"+ " (or leaf-8 leaf-0 leaf-4 leaf-6)"+ " (or leaf-8 leaf-1 leaf-4 leaf-6)"+ " (or leaf-8 leaf-2 leaf-4 leaf-6)"+ " (or leaf-8 leaf-0 leaf-5 leaf-6)"+ " (or leaf-8 leaf-1 leaf-5 leaf-6)"+ " (or leaf-8 leaf-2 leaf-5 leaf-6)"+ " (or leaf-8 leaf-0 leaf-3 leaf-7)"+ " (or leaf-8 leaf-1 leaf-3 leaf-7)"+ " (or leaf-8 leaf-2 leaf-3 leaf-7)"+ " (or leaf-8 leaf-0 leaf-4 leaf-7)"+ " (or leaf-8 leaf-1 leaf-4 leaf-7)"+ " (or leaf-8 leaf-2 leaf-4 leaf-7)"+ " (or leaf-8 leaf-0 leaf-5 leaf-7)"+ " (or leaf-8 leaf-1 leaf-5 leaf-7)"+ " (or leaf-8 leaf-2 leaf-5 leaf-7))",ExpressionBuilder.convertToCNF(or(and(leaf(0),leaf(1),leaf(2)),and(leaf(3),leaf(4),leaf(5)),and(leaf(6),leaf(7)),leaf(8))).toString());
  assertEquals("YES_NO_NULL",ExpressionBuilder.convertToCNF(or(and(leaf(0),leaf(1)),and(leaf(2),leaf(3)),and(leaf(4),leaf(5)),and(leaf(6),leaf(7)),and(leaf(8),leaf(9)),and(leaf(10),leaf(11)),and(leaf(12),leaf(13)),and(leaf(14),leaf(15)),and(leaf(16),leaf(17)))).toString());
  assertEquals("(and leaf-100 YES_NO_NULL)",ExpressionBuilder.convertToCNF(and(leaf(100),or(and(leaf(0),leaf(1)),and(leaf(2),leaf(3)),and(leaf(4),leaf(5)),and(leaf(6),leaf(7)),and(leaf(8),leaf(9)),and(leaf(10),leaf(11)),and(leaf(12),leaf(13)),and(leaf(14),leaf(15)),and(leaf(16),leaf(17))))).toString());
  assertNoSharedNodes(ExpressionBuilder.convertToCNF(or(and(leaf(0),leaf(1),leaf(2)),and(leaf(3),leaf(4),leaf(5)),and(leaf(6),leaf(7)),leaf(8))),Sets.<ExpressionTree>newIdentityHashSet());
}
