{
  try {
    ArrayList<String> bye=new ArrayList<String>();
    bye.add("firstString");
    bye.add("secondString");
    HashMap<String,Integer> another=new HashMap<String,Integer>();
    another.put("firstKey",1);
    another.put("secondKey",2);
    ArrayList<Object> struct=new ArrayList<Object>();
    struct.add(Integer.valueOf(234));
    struct.add(bye);
    struct.add(another);
    struct.add(Integer.valueOf(-234));
    struct.add(Double.valueOf(1.0));
    struct.add(Double.valueOf(-2.5));
    ArrayList<String> protocols=new ArrayList<String>();
    ArrayList<Boolean> isBinaries=new ArrayList<Boolean>();
    ArrayList<HashMap<String,String>> additionalParams=new ArrayList<HashMap<String,String>>();
    protocols.add(org.apache.hadoop.hive.serde2.thrift.TBinarySortableProtocol.class.getName());
    isBinaries.add(true);
    additionalParams.add(makeHashMap("serialization.sort.order","++++++"));
    protocols.add(org.apache.hadoop.hive.serde2.thrift.TBinarySortableProtocol.class.getName());
    isBinaries.add(true);
    additionalParams.add(makeHashMap("serialization.sort.order","------"));
    protocols.add(org.apache.thrift.protocol.TBinaryProtocol.class.getName());
    isBinaries.add(true);
    additionalParams.add(null);
    protocols.add(org.apache.thrift.protocol.TJSONProtocol.class.getName());
    isBinaries.add(false);
    additionalParams.add(null);
    protocols.add(org.apache.hadoop.hive.serde2.thrift.TCTLSeparatedProtocol.class.getName());
    isBinaries.add(false);
    additionalParams.add(null);
    System.out.println("input struct = " + struct);
    for (int pp=0; pp < protocols.size(); pp++) {
      String protocol=protocols.get(pp);
      boolean isBinary=isBinaries.get(pp);
      System.out.println("Testing protocol: " + protocol);
      Properties schema=new Properties();
      schema.setProperty(serdeConstants.SERIALIZATION_FORMAT,protocol);
      schema.setProperty(org.apache.hadoop.hive.metastore.api.hive_metastoreConstants.META_TABLE_NAME,"test");
      schema.setProperty(serdeConstants.SERIALIZATION_DDL,"struct test { i32 _hello, list<string> 2bye, map<string,i32> another, i32 nhello, double d, double nd}");
      schema.setProperty(serdeConstants.SERIALIZATION_LIB,new DynamicSerDe().getClass().toString());
      HashMap<String,String> p=additionalParams.get(pp);
      if (p != null) {
        for (        Entry<String,String> e : p.entrySet()) {
          schema.setProperty(e.getKey(),e.getValue());
        }
      }
      DynamicSerDe serde=new DynamicSerDe();
      serde.initialize(new Configuration(),schema);
      ObjectInspector oi=serde.getObjectInspector();
      System.out.println("TypeName = " + oi.getTypeName());
      BytesWritable bytes=(BytesWritable)serde.serialize(struct,oi);
      System.out.println("bytes =" + hexString(bytes));
      if (!isBinary) {
        System.out.println("bytes in text =" + new String(bytes.get(),0,bytes.getSize()));
      }
      Object o=serde.deserialize(bytes);
      System.out.println("o class = " + o.getClass());
      List<?> olist=(List<?>)o;
      System.out.println("o size = " + olist.size());
      System.out.println("o[0] class = " + olist.get(0).getClass());
      System.out.println("o[1] class = " + olist.get(1).getClass());
      System.out.println("o[2] class = " + olist.get(2).getClass());
      System.out.println("o = " + o);
      assertEquals(struct,o);
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw e;
  }
}
