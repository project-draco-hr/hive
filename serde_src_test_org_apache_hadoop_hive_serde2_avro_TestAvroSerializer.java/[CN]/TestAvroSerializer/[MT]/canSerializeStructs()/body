{
  String field="{ \"name\":\"struct1\", \"type\":{\"type\":\"record\", " + "\"name\":\"struct1_name\", \"fields\": [\n" + "{ \"name\":\"sInt\", \"type\":\"int\" }, { \"name\""+ ":\"sBoolean\", \"type\":\"boolean\" }, { \"name\":\"sString\", \"type\":\"string\" } ] } }";
  Schema s=buildSchema(field);
  GenericData.Record innerRecord=new GenericData.Record(s.getField("struct1").schema());
  innerRecord.put("sInt",77);
  innerRecord.put("sBoolean",false);
  innerRecord.put("sString","tedious");
  GenericData.Record r=new GenericData.Record(s);
  r.put("struct1",innerRecord);
  AvroSerializer as=new AvroSerializer();
  AvroDeserializer ad=new AvroDeserializer();
  AvroObjectInspectorGenerator aoig=new AvroObjectInspectorGenerator(s);
  ObjectInspector oi=aoig.getObjectInspector();
  List<String> columnNames=aoig.getColumnNames();
  List<TypeInfo> columnTypes=aoig.getColumnTypes();
  AvroGenericRecordWritable agrw=new AvroGenericRecordWritable(r);
  Object obj=ad.deserialize(columnNames,columnTypes,agrw,s);
  Writable result=as.serialize(obj,oi,columnNames,columnTypes,s);
  assertTrue(result instanceof AvroGenericRecordWritable);
  GenericRecord r2=((AvroGenericRecordWritable)result).getRecord();
  assertEquals(s,r2.getSchema());
  GenericRecord r3=(GenericRecord)r2.get("struct1");
  assertEquals(77,r3.get("sInt"));
  assertEquals(false,r3.get("sBoolean"));
  assertEquals("tedious",r3.get("sString"));
}
