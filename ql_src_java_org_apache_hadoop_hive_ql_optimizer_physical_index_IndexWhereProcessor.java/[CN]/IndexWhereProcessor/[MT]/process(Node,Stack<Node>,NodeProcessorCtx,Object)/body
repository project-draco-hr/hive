{
  TableScanOperator operator=(TableScanOperator)nd;
  List<Node> opChildren=operator.getChildren();
  TableScanDesc operatorDesc=operator.getConf();
  if (operatorDesc == null || !tsToIndices.containsKey(operator)) {
    return null;
  }
  List<Index> indexes=tsToIndices.get(operator);
  ExprNodeDesc predicate=operatorDesc.getFilterExpr();
  IndexWhereProcCtx context=(IndexWhereProcCtx)procCtx;
  ParseContext pctx=context.getParseContext();
  LOG.info("Processing predicate for index optimization");
  if (predicate == null) {
    LOG.info("null predicate pushed down");
    return null;
  }
  LOG.info(predicate.getExprString());
  Set<Partition> queryPartitions;
  try {
    queryPartitions=IndexUtils.checkPartitionsCoveredByIndex(operator,pctx,indexes);
    if (queryPartitions == null) {
      return null;
    }
  }
 catch (  HiveException e) {
    LOG.error("Fatal Error: problem accessing metastore",e);
    throw new SemanticException(e);
  }
  if (!context.getCurrentTask().isMapRedTask()) {
    return null;
  }
  MapRedTask currentTask=(MapRedTask)context.getCurrentTask();
  Map<Index,HiveIndexQueryContext> queryContexts=new HashMap<Index,HiveIndexQueryContext>();
  TableDesc tblDesc=operator.getTableDesc();
  Map<String,List<Index>> indexesByType=new HashMap<String,List<Index>>();
  for (  Index indexOnTable : indexes) {
    if (indexesByType.get(indexOnTable.getIndexHandlerClass()) == null) {
      List<Index> newType=new ArrayList<Index>();
      newType.add(indexOnTable);
      indexesByType.put(indexOnTable.getIndexHandlerClass(),newType);
    }
 else {
      indexesByType.get(indexOnTable.getIndexHandlerClass()).add(indexOnTable);
    }
  }
  List<Index> bestIndexes=indexesByType.values().iterator().next();
  for (  List<Index> indexTypes : indexesByType.values()) {
    if (bestIndexes.size() < indexTypes.size()) {
      bestIndexes=indexTypes;
    }
  }
  HiveIndexQueryContext tmpQueryContext=new HiveIndexQueryContext();
  tmpQueryContext.setQueryPartitions(queryPartitions);
  rewriteForIndexes(predicate,bestIndexes,pctx,currentTask,tmpQueryContext);
  List<Task<?>> indexTasks=tmpQueryContext.getQueryTasks();
  if (indexTasks != null && indexTasks.size() > 0) {
    queryContexts.put(bestIndexes.get(0),tmpQueryContext);
  }
  if (queryContexts.size() > 0) {
    Index chosenIndex=queryContexts.keySet().iterator().next();
    HiveIndexQueryContext queryContext=queryContexts.get(chosenIndex);
    MapWork work=currentTask.getWork().getMapWork();
    work.setInputformat(queryContext.getIndexInputFormat());
    work.addIndexIntermediateFile(queryContext.getIndexIntermediateFile());
    Set<ReadEntity> inputs=pctx.getSemanticInputs();
    inputs.addAll(queryContext.getAdditionalSemanticInputs());
    List<Task<?>> chosenRewrite=queryContext.getQueryTasks();
    insertIndexQuery(pctx,context,chosenRewrite);
  }
  return null;
}
