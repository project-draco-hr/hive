{
  super(new String[0]);
  this.beeLine=beeLine;
  Set<String> completions=new TreeSet<String>();
  String keywords=new BufferedReader(new InputStreamReader(SQLCompletor.class.getResourceAsStream("sql-keywords.properties"))).readLine();
  try {
    keywords+="," + beeLine.getDatabaseConnection().getDatabaseMetaData().getSQLKeywords();
  }
 catch (  Throwable t) {
  }
  try {
    keywords+="," + beeLine.getDatabaseConnection().getDatabaseMetaData().getStringFunctions();
  }
 catch (  Throwable t) {
  }
  try {
    keywords+="," + beeLine.getDatabaseConnection().getDatabaseMetaData().getNumericFunctions();
  }
 catch (  Throwable t) {
  }
  try {
    keywords+="," + beeLine.getDatabaseConnection().getDatabaseMetaData().getSystemFunctions();
  }
 catch (  Throwable t) {
  }
  try {
    keywords+="," + beeLine.getDatabaseConnection().getDatabaseMetaData().getTimeDateFunctions();
  }
 catch (  Throwable t) {
  }
  keywords+="," + keywords.toLowerCase();
  for (StringTokenizer tok=new StringTokenizer(keywords,", "); tok.hasMoreTokens(); completions.add(tok.nextToken())) {
    ;
  }
  if (!(skipmeta)) {
    String[] columns=beeLine.getColumnNames(beeLine.getDatabaseConnection().getDatabaseMetaData());
    for (int i=0; columns != null && i < columns.length; i++) {
      completions.add(columns[i++]);
    }
  }
  setCandidateStrings(completions.toArray(new String[0]));
}
