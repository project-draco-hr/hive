{
  if (node == null && otherNode == null) {
    return true;
  }
  if ((node == null && otherNode != null) || (node != null && otherNode == null)) {
    return false;
  }
  Stack<Tree> stack=new Stack<Tree>();
  stack.push(node);
  Stack<Tree> otherStack=new Stack<Tree>();
  otherStack.push(otherNode);
  while (!stack.empty() && !otherStack.empty()) {
    Tree p=stack.pop();
    Tree otherP=otherStack.pop();
    if (p.isNil() != otherP.isNil()) {
      return false;
    }
    if (!p.isNil()) {
      if (!p.toString().equals(otherP.toString())) {
        return false;
      }
    }
    if (p.getChildCount() != otherP.getChildCount()) {
      return false;
    }
    for (int i=p.getChildCount() - 1; i >= 0; i--) {
      Tree t=p.getChild(i);
      stack.push(t);
      Tree otherT=otherP.getChild(i);
      otherStack.push(otherT);
    }
  }
  return stack.empty() && otherStack.empty();
}
