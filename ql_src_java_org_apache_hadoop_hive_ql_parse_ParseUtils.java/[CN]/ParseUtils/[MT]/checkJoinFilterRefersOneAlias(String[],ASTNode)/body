{
switch (filterCondn.getType()) {
case HiveParser.TOK_TABLE_OR_COL:
    String tableOrCol=SemanticAnalyzer.unescapeIdentifier(filterCondn.getChild(0).getText().toLowerCase());
  return getIndex(tabAliases,tableOrCol);
case HiveParser.Identifier:
case HiveParser.Number:
case HiveParser.StringLiteral:
case HiveParser.BigintLiteral:
case HiveParser.SmallintLiteral:
case HiveParser.TinyintLiteral:
case HiveParser.DecimalLiteral:
case HiveParser.TOK_STRINGLITERALSEQUENCE:
case HiveParser.TOK_CHARSETLITERAL:
case HiveParser.TOK_DATELITERAL:
case HiveParser.KW_TRUE:
case HiveParser.KW_FALSE:
case HiveParser.TOK_NULL:
return -1;
default :
int idx=-1;
int i=filterCondn.getType() == HiveParser.TOK_FUNCTION ? 1 : 0;
for (; i < filterCondn.getChildCount(); i++) {
int cIdx=checkJoinFilterRefersOneAlias(tabAliases,(ASTNode)filterCondn.getChild(i));
if (cIdx != idx) {
if (idx != -1 && cIdx != -1) {
return -1;
}
idx=idx == -1 ? cIdx : idx;
}
}
return idx;
}
}
