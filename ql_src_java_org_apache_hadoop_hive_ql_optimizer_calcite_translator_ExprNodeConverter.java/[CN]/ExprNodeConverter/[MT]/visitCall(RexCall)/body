{
  ExprNodeGenericFuncDesc gfDesc=null;
  if (!deep) {
    return null;
  }
  List<ExprNodeDesc> args=new LinkedList<ExprNodeDesc>();
  for (  RexNode operand : call.operands) {
    args.add(operand.accept(this));
  }
  if (call.isA(SqlKind.CAST) && (call.operands.size() == 1) && SqlTypeUtil.equalSansNullability(dTFactory,call.getType(),call.operands.get(0).getType())) {
    return args.get(0);
  }
 else   if (ASTConverter.isFlat(call)) {
    ArrayList<ExprNodeDesc> tmpExprArgs=new ArrayList<ExprNodeDesc>();
    tmpExprArgs.addAll(args.subList(0,2));
    gfDesc=new ExprNodeGenericFuncDesc(TypeConverter.convert(call.getType()),SqlFunctionConverter.getHiveUDF(call.getOperator(),call.getType(),2),tmpExprArgs);
    for (int i=2; i < call.operands.size(); i++) {
      tmpExprArgs=new ArrayList<ExprNodeDesc>();
      tmpExprArgs.add(gfDesc);
      tmpExprArgs.add(args.get(i));
      gfDesc=new ExprNodeGenericFuncDesc(TypeConverter.convert(call.getType()),SqlFunctionConverter.getHiveUDF(call.getOperator(),call.getType(),2),tmpExprArgs);
    }
  }
 else {
    GenericUDF hiveUdf=SqlFunctionConverter.getHiveUDF(call.getOperator(),call.getType(),args.size());
    if (hiveUdf == null) {
      throw new RuntimeException("Cannot find UDF for " + call.getType() + " "+ call.getOperator()+ "["+ call.getOperator().getKind()+ "]/"+ args.size());
    }
    gfDesc=new ExprNodeGenericFuncDesc(TypeConverter.convert(call.getType()),hiveUdf,args);
  }
  return gfDesc;
}
