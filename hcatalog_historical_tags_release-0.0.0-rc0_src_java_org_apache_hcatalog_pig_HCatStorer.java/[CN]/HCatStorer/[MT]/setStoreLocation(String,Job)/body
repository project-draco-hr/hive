{
  Properties p=UDFContext.getUDFContext().getUDFProperties(this.getClass(),new String[]{sign});
  String[] userStr=location.split("\\.");
  HCatTableInfo tblInfo;
  if (userStr.length == 2) {
    tblInfo=HCatTableInfo.getOutputTableInfo(PigHCatUtil.getHowlServerUri(job),PigHCatUtil.getHowlServerPrincipal(job),userStr[0],userStr[1],partitions);
  }
 else {
    tblInfo=HCatTableInfo.getOutputTableInfo(PigHCatUtil.getHowlServerUri(job),PigHCatUtil.getHowlServerPrincipal(job),null,userStr[0],partitions);
  }
  Configuration config=job.getConfiguration();
  if (!HCatUtil.checkJobContextIfRunningFromBackend(job)) {
    Schema schema=(Schema)ObjectSerializer.deserialize(p.getProperty(PIG_SCHEMA));
    if (schema != null) {
      pigSchema=schema;
    }
    if (pigSchema == null) {
      throw new FrontendException("Schema for data cannot be determined.",PigHCatUtil.PIG_EXCEPTION_CODE);
    }
    try {
      HCatOutputFormat.setOutput(job,tblInfo);
    }
 catch (    HCatException he) {
      throw new PigException(he.getMessage(),PigHCatUtil.PIG_EXCEPTION_CODE,he);
    }
    howlTblSchema=HCatOutputFormat.getTableSchema(job);
    try {
      doSchemaValidations(pigSchema,howlTblSchema);
    }
 catch (    HCatException he) {
      throw new FrontendException(he.getMessage(),PigHCatUtil.PIG_EXCEPTION_CODE,he);
    }
    computedSchema=convertPigSchemaToHCatSchema(pigSchema,howlTblSchema);
    HCatOutputFormat.setSchema(job,computedSchema);
    p.setProperty(HCatConstants.HCAT_KEY_OUTPUT_INFO,config.get(HCatConstants.HCAT_KEY_OUTPUT_INFO));
    if (config.get(HCatConstants.HCAT_KEY_HIVE_CONF) != null) {
      p.setProperty(HCatConstants.HCAT_KEY_HIVE_CONF,config.get(HCatConstants.HCAT_KEY_HIVE_CONF));
    }
    if (config.get(HCatConstants.HCAT_KEY_TOKEN_SIGNATURE) != null) {
      p.setProperty(HCatConstants.HCAT_KEY_TOKEN_SIGNATURE,config.get(HCatConstants.HCAT_KEY_TOKEN_SIGNATURE));
    }
    p.setProperty(COMPUTED_OUTPUT_SCHEMA,ObjectSerializer.serialize(computedSchema));
  }
 else {
    config.set(HCatConstants.HCAT_KEY_OUTPUT_INFO,p.getProperty(HCatConstants.HCAT_KEY_OUTPUT_INFO));
    if (p.getProperty(HCatConstants.HCAT_KEY_HIVE_CONF) != null) {
      config.set(HCatConstants.HCAT_KEY_HIVE_CONF,p.getProperty(HCatConstants.HCAT_KEY_HIVE_CONF));
    }
    if (p.getProperty(HCatConstants.HCAT_KEY_TOKEN_SIGNATURE) != null) {
      config.set(HCatConstants.HCAT_KEY_TOKEN_SIGNATURE,p.getProperty(HCatConstants.HCAT_KEY_TOKEN_SIGNATURE));
    }
  }
}
