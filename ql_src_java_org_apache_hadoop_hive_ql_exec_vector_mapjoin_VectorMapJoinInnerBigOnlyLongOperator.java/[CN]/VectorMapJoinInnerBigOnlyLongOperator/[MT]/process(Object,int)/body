{
  try {
    VectorizedRowBatch batch=(VectorizedRowBatch)row;
    alias=(byte)tag;
    if (needCommonSetup) {
      commonSetup(batch);
      singleJoinColumn=bigTableKeyColumnMap[0];
      needCommonSetup=false;
    }
    if (needHashTableSetup) {
      hashMultiSet=(VectorMapJoinLongHashMultiSet)vectorMapJoinHashTable;
      useMinMax=hashMultiSet.useMinMax();
      if (useMinMax) {
        min=hashMultiSet.min();
        max=hashMultiSet.max();
      }
      needHashTableSetup=false;
    }
    batchCounter++;
    for (    VectorExpression ve : bigTableFilterExpressions) {
      ve.evaluate(batch);
    }
    final int inputLogicalSize=batch.size;
    if (inputLogicalSize == 0) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(CLASS_NAME + " batch #" + batchCounter+ " empty");
      }
      return;
    }
    if (bigTableKeyExpressions != null) {
      for (      VectorExpression ve : bigTableKeyExpressions) {
        ve.evaluate(batch);
      }
    }
    LongColumnVector joinColVector=(LongColumnVector)batch.cols[singleJoinColumn];
    long[] vector=joinColVector.vector;
    boolean allKeyInputColumnsRepeating=joinColVector.isRepeating;
    if (allKeyInputColumnsRepeating) {
      long key=vector[0];
      JoinUtil.JoinResult joinResult;
      if (useMinMax && (key < min || key > max)) {
        joinResult=JoinUtil.JoinResult.NOMATCH;
      }
 else {
        joinResult=hashMultiSet.contains(key,hashMultiSetResults[0]);
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug(CLASS_NAME + " batch #" + batchCounter+ " repeated joinResult "+ joinResult.name());
      }
      finishInnerBigOnlyRepeated(batch,joinResult,hashMultiSetResults[0]);
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug(CLASS_NAME + " batch #" + batchCounter+ " non-repeated");
      }
      int selected[]=batch.selected;
      boolean selectedInUse=batch.selectedInUse;
      int hashMultiSetResultCount=0;
      int allMatchCount=0;
      int equalKeySeriesCount=0;
      int spillCount=0;
      long saveKey=0;
      boolean haveSaveKey=false;
      JoinUtil.JoinResult saveJoinResult=JoinUtil.JoinResult.NOMATCH;
      for (int logical=0; logical < inputLogicalSize; logical++) {
        int batchIndex=(selectedInUse ? selected[logical] : logical);
        long currentKey=vector[batchIndex];
        if (!haveSaveKey || currentKey != saveKey) {
          if (haveSaveKey) {
switch (saveJoinResult) {
case MATCH:
              equalKeySeriesCount++;
            break;
case SPILL:
          hashMultiSetResultCount++;
        break;
case NOMATCH:
      break;
  }
}
haveSaveKey=true;
saveKey=currentKey;
if (useMinMax && (currentKey < min || currentKey > max)) {
  saveJoinResult=JoinUtil.JoinResult.NOMATCH;
}
 else {
  saveJoinResult=hashMultiSet.contains(currentKey,hashMultiSetResults[hashMultiSetResultCount]);
}
switch (saveJoinResult) {
case MATCH:
  equalKeySeriesValueCounts[equalKeySeriesCount]=hashMultiSetResults[hashMultiSetResultCount].count();
equalKeySeriesAllMatchIndices[equalKeySeriesCount]=allMatchCount;
equalKeySeriesDuplicateCounts[equalKeySeriesCount]=1;
allMatchs[allMatchCount++]=batchIndex;
break;
case SPILL:
spills[spillCount]=batchIndex;
spillHashMapResultIndices[spillCount]=hashMultiSetResultCount;
spillCount++;
break;
case NOMATCH:
break;
}
}
 else {
switch (saveJoinResult) {
case MATCH:
equalKeySeriesDuplicateCounts[equalKeySeriesCount]++;
allMatchs[allMatchCount++]=batchIndex;
break;
case SPILL:
spills[spillCount]=batchIndex;
spillHashMapResultIndices[spillCount]=hashMultiSetResultCount;
spillCount++;
break;
case NOMATCH:
break;
}
}
}
if (haveSaveKey) {
switch (saveJoinResult) {
case MATCH:
equalKeySeriesCount++;
break;
case SPILL:
hashMultiSetResultCount++;
break;
case NOMATCH:
break;
}
}
if (LOG.isDebugEnabled()) {
LOG.debug(CLASS_NAME + " allMatchs " + intArrayToRangesString(allMatchs,allMatchCount)+ " equalKeySeriesValueCounts "+ longArrayToRangesString(equalKeySeriesValueCounts,equalKeySeriesCount)+ " equalKeySeriesAllMatchIndices "+ intArrayToRangesString(equalKeySeriesAllMatchIndices,equalKeySeriesCount)+ " equalKeySeriesDuplicateCounts "+ intArrayToRangesString(equalKeySeriesDuplicateCounts,equalKeySeriesCount)+ " spills "+ intArrayToRangesString(spills,spillCount)+ " spillHashMapResultIndices "+ intArrayToRangesString(spillHashMapResultIndices,spillCount)+ " hashMapResults "+ Arrays.toString(Arrays.copyOfRange(hashMultiSetResults,0,hashMultiSetResultCount)));
}
finishInnerBigOnly(batch,allMatchCount,equalKeySeriesCount,spillCount,(VectorMapJoinHashTableResult[])hashMultiSetResults,hashMultiSetResultCount);
}
if (batch.size > 0) {
forwardBigTableBatch(batch);
}
}
 catch (IOException e) {
throw new HiveException(e);
}
catch (Exception e) {
throw new HiveException(e);
}
}
