{
  if (o == null) {
    return 0;
  }
switch (objIns.getCategory()) {
case PRIMITIVE:
{
      PrimitiveObjectInspector poi=((PrimitiveObjectInspector)objIns);
switch (poi.getPrimitiveCategory()) {
case VOID:
        return 0;
case BOOLEAN:
      return ((BooleanObjectInspector)poi).get(o) ? 1 : 0;
case BYTE:
    return ((ByteObjectInspector)poi).get(o);
case SHORT:
  return ((ShortObjectInspector)poi).get(o);
case INT:
return ((IntObjectInspector)poi).get(o);
case LONG:
{
long a=((LongObjectInspector)poi).get(o);
return (int)((a >>> 32) ^ a);
}
case FLOAT:
return Float.floatToIntBits(((FloatObjectInspector)poi).get(o));
case DOUBLE:
{
long a=Double.doubleToLongBits(((DoubleObjectInspector)poi).get(o));
return (int)((a >>> 32) ^ a);
}
case STRING:
{
Text t=((StringObjectInspector)poi).getPrimitiveWritableObject(o);
int r=0;
for (int i=0; i < t.getLength(); i++) {
r=r * 31 + t.getBytes()[i];
}
return r;
}
case BINARY:
return ((BinaryObjectInspector)poi).getPrimitiveWritableObject(o).hashCode();
case TIMESTAMP:
TimestampWritable t=((TimestampObjectInspector)poi).getPrimitiveWritableObject(o);
return t.hashCode();
case DECIMAL:
return ((HiveDecimalObjectInspector)poi).getPrimitiveWritableObject(o).hashCode();
default :
{
throw new RuntimeException("Unknown type: " + poi.getPrimitiveCategory());
}
}
}
case LIST:
{
int r=0;
ListObjectInspector listOI=(ListObjectInspector)objIns;
ObjectInspector elemOI=listOI.getListElementObjectInspector();
for (int ii=0; ii < listOI.getListLength(o); ++ii) {
r=31 * r + hashCode(listOI.getListElement(o,ii),elemOI);
}
return r;
}
case MAP:
{
int r=0;
MapObjectInspector mapOI=(MapObjectInspector)objIns;
ObjectInspector keyOI=mapOI.getMapKeyObjectInspector();
ObjectInspector valueOI=mapOI.getMapValueObjectInspector();
Map<?,?> map=mapOI.getMap(o);
for (Map.Entry<?,?> entry : map.entrySet()) {
r+=hashCode(entry.getKey(),keyOI) ^ hashCode(entry.getValue(),valueOI);
}
return r;
}
case STRUCT:
int r=0;
StructObjectInspector structOI=(StructObjectInspector)objIns;
List<? extends StructField> fields=structOI.getAllStructFieldRefs();
for (StructField field : fields) {
r=31 * r + hashCode(structOI.getStructFieldData(o,field),field.getFieldObjectInspector());
}
return r;
case UNION:
UnionObjectInspector uOI=(UnionObjectInspector)objIns;
byte tag=uOI.getTag(o);
return hashCode(uOI.getField(o),uOI.getObjectInspectors().get(tag));
default :
throw new RuntimeException("Unknown type: " + objIns.getTypeName());
}
}
