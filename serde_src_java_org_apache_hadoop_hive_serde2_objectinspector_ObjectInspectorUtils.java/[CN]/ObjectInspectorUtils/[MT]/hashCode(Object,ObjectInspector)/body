{
  if (o == null) {
    return 0;
  }
switch (objIns.getCategory()) {
case PRIMITIVE:
{
      PrimitiveObjectInspector poi=((PrimitiveObjectInspector)objIns);
switch (poi.getPrimitiveCategory()) {
case VOID:
        return 0;
case BOOLEAN:
      return ((BooleanObjectInspector)poi).get(o) ? 1 : 0;
case BYTE:
    return ((ByteObjectInspector)poi).get(o);
case SHORT:
  return ((ShortObjectInspector)poi).get(o);
case INT:
return ((IntObjectInspector)poi).get(o);
case LONG:
{
long a=((LongObjectInspector)poi).get(o);
return (int)((a >>> 32) ^ a);
}
case FLOAT:
return Float.floatToIntBits(((FloatObjectInspector)poi).get(o));
case DOUBLE:
{
long a=Double.doubleToLongBits(((DoubleObjectInspector)poi).get(o));
return (int)((a >>> 32) ^ a);
}
case STRING:
{
Text t=((StringObjectInspector)poi).getPrimitiveWritableObject(o);
int r=0;
for (int i=0; i < t.getLength(); i++) {
r=r * 31 + t.getBytes()[i];
}
return r;
}
case BINARY:
return ((BinaryObjectInspector)poi).getPrimitiveWritableObject(o).hashCode();
case TIMESTAMP:
TimestampWritable t=((TimestampObjectInspector)poi).getPrimitiveWritableObject(o);
return t.hashCode();
default :
{
throw new RuntimeException("Unknown type: " + poi.getPrimitiveCategory());
}
}
}
case STRUCT:
case LIST:
case MAP:
case UNION:
default :
throw new RuntimeException("Hash code on complex types not supported yet.");
}
}
