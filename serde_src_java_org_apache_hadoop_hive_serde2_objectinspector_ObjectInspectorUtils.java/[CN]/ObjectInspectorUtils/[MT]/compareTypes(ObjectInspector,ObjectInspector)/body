{
  Category c1=o1.getCategory();
  Category c2=o2.getCategory();
  if (!c1.equals(c2)) {
    return false;
  }
  if (c1.equals(Category.PRIMITIVE)) {
    return o1.getTypeName().equals(o2.getTypeName());
  }
  if (c1.equals(Category.LIST)) {
    ObjectInspector child1=((ListObjectInspector)o1).getListElementObjectInspector();
    ObjectInspector child2=((ListObjectInspector)o2).getListElementObjectInspector();
    return compareTypes(child1,child2);
  }
  if (c1.equals(Category.MAP)) {
    MapObjectInspector mapOI1=(MapObjectInspector)o1;
    MapObjectInspector mapOI2=(MapObjectInspector)o2;
    ObjectInspector childKey1=mapOI1.getMapKeyObjectInspector();
    ObjectInspector childKey2=mapOI2.getMapKeyObjectInspector();
    if (compareTypes(childKey1,childKey2)) {
      ObjectInspector childVal1=mapOI1.getMapValueObjectInspector();
      ObjectInspector childVal2=mapOI2.getMapValueObjectInspector();
      if (compareTypes(childVal1,childVal2)) {
        return true;
      }
    }
    return false;
  }
  if (c1.equals(Category.STRUCT)) {
    StructObjectInspector structOI1=(StructObjectInspector)o1;
    StructObjectInspector structOI2=(StructObjectInspector)o2;
    List<? extends StructField> childFieldsList1=structOI1.getAllStructFieldRefs();
    List<? extends StructField> childFieldsList2=structOI2.getAllStructFieldRefs();
    if (childFieldsList1 == null && childFieldsList2 == null) {
      return true;
    }
    if (childFieldsList1.size() != childFieldsList2.size()) {
      return false;
    }
    Iterator<? extends StructField> it1=childFieldsList1.iterator();
    Iterator<? extends StructField> it2=childFieldsList2.iterator();
    while (it1.hasNext()) {
      StructField field1=it1.next();
      StructField field2=it2.next();
      if (!compareTypes(field1.getFieldObjectInspector(),field2.getFieldObjectInspector())) {
        return false;
      }
    }
    return true;
  }
  if (c1.equals(Category.UNION)) {
    UnionObjectInspector uoi1=(UnionObjectInspector)o1;
    UnionObjectInspector uoi2=(UnionObjectInspector)o2;
    List<ObjectInspector> ois1=uoi1.getObjectInspectors();
    List<ObjectInspector> ois2=uoi2.getObjectInspectors();
    if (ois1 == null && ois2 == null) {
      return true;
    }
 else     if (ois1 == null || ois2 == null) {
      return false;
    }
 else     if (ois1.size() != ois2.size()) {
      return false;
    }
    Iterator<? extends ObjectInspector> it1=ois1.iterator();
    Iterator<? extends ObjectInspector> it2=ois2.iterator();
    while (it1.hasNext()) {
      if (!compareTypes(it1.next(),it2.next())) {
        return false;
      }
    }
    return true;
  }
  throw new RuntimeException("Unknown category encountered: " + c1);
}
