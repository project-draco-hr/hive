{
  int startsAt=0;
  jjnewStateCnt=35;
  int i=1;
  jjstateSet[0]=startState;
  int kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      do {
switch (jjstateSet[--i]) {
case 35:
          if ((0x3ff600000000000L & l) != 0L) {
            if (kind > 58)             kind=58;
            jjCheckNAdd(15);
          }
        if ((0x3ff400000000000L & l) != 0L) {
          if (kind > 54)           kind=54;
          jjCheckNAdd(7);
        }
      break;
case 0:
    if ((0x3ff000000000000L & l) != 0L) {
      if (kind > 54)       kind=54;
      jjCheckNAdd(7);
    }
 else     if ((0x280000000000L & l) != 0L)     jjCheckNAddStates(0,2);
 else     if (curChar == 47)     jjAddStates(3,4);
 else     if (curChar == 39)     jjCheckNAddTwoStates(12,13);
 else     if (curChar == 34)     jjCheckNAddTwoStates(9,10);
 else     if (curChar == 35)     jjCheckNAddStates(5,7);
  if ((0x3ff000000000000L & l) != 0L) {
    if (kind > 52)     kind=52;
    jjCheckNAdd(5);
  }
 else   if (curChar == 45) {
    if (kind > 58)     kind=58;
    jjCheckNAdd(15);
  }
break;
case 1:
if ((0xfffffffffffffbffL & l) != 0L) jjCheckNAddStates(5,7);
break;
case 2:
if ((0x2400L & l) != 0L && kind > 5) kind=5;
break;
case 3:
if (curChar == 10 && kind > 5) kind=5;
break;
case 4:
if (curChar == 13) jjstateSet[jjnewStateCnt++]=3;
break;
case 5:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 52) kind=52;
jjCheckNAdd(5);
break;
case 6:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 54) kind=54;
jjCheckNAdd(7);
break;
case 7:
if ((0x3ff400000000000L & l) == 0L) break;
if (kind > 54) kind=54;
jjCheckNAdd(7);
break;
case 8:
if (curChar == 34) jjCheckNAddTwoStates(9,10);
break;
case 9:
if ((0xfffffffbffffffffL & l) != 0L) jjCheckNAddTwoStates(9,10);
break;
case 10:
if (curChar == 34 && kind > 57) kind=57;
break;
case 11:
if (curChar == 39) jjCheckNAddTwoStates(12,13);
break;
case 12:
if ((0xffffff7fffffffffL & l) != 0L) jjCheckNAddTwoStates(12,13);
break;
case 13:
if (curChar == 39 && kind > 57) kind=57;
break;
case 14:
if (curChar != 45) break;
if (kind > 58) kind=58;
jjCheckNAdd(15);
break;
case 15:
if ((0x3ff600000000000L & l) == 0L) break;
if (kind > 58) kind=58;
jjCheckNAdd(15);
break;
case 16:
if (curChar == 47) jjAddStates(3,4);
break;
case 17:
if (curChar == 47) jjCheckNAddStates(8,10);
break;
case 18:
if ((0xffffffffffffdbffL & l) != 0L) jjCheckNAddStates(8,10);
break;
case 19:
if ((0x2400L & l) != 0L && kind > 6) kind=6;
break;
case 20:
if (curChar == 10 && kind > 6) kind=6;
break;
case 21:
if (curChar == 13) jjstateSet[jjnewStateCnt++]=20;
break;
case 22:
if (curChar == 42) jjCheckNAddTwoStates(23,24);
break;
case 23:
if ((0xfffffbffffffffffL & l) != 0L) jjCheckNAddTwoStates(23,24);
break;
case 24:
if (curChar == 42) jjAddStates(11,12);
break;
case 25:
if ((0xffff7fffffffffffL & l) != 0L) jjCheckNAddTwoStates(26,24);
break;
case 26:
if ((0xfffffbffffffffffL & l) != 0L) jjCheckNAddTwoStates(26,24);
break;
case 27:
if (curChar == 47 && kind > 7) kind=7;
break;
case 28:
if ((0x280000000000L & l) != 0L) jjCheckNAddStates(0,2);
break;
case 29:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(29,30);
break;
case 30:
if (curChar == 46) jjCheckNAdd(31);
break;
case 31:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 53) kind=53;
jjCheckNAddTwoStates(31,32);
break;
case 33:
if ((0x280000000000L & l) != 0L) jjCheckNAdd(34);
break;
case 34:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 53) kind=53;
jjCheckNAdd(34);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
do {
switch (jjstateSet[--i]) {
case 35:
if ((0x7fffffe87fffffeL & l) != 0L) {
if (kind > 58) kind=58;
jjCheckNAdd(15);
}
if ((0x7fffffe87fffffeL & l) != 0L) {
if (kind > 54) kind=54;
jjCheckNAdd(7);
}
break;
case 0:
if ((0x7fffffe87fffffeL & l) != 0L) {
if (kind > 54) kind=54;
jjCheckNAdd(7);
}
if ((0x7fffffe07fffffeL & l) != 0L) {
if (kind > 58) kind=58;
jjCheckNAdd(15);
}
break;
case 1:
jjAddStates(5,7);
break;
case 6:
if ((0x7fffffe87fffffeL & l) == 0L) break;
if (kind > 54) kind=54;
jjCheckNAdd(7);
break;
case 7:
if ((0x7fffffe87fffffeL & l) == 0L) break;
if (kind > 54) kind=54;
jjCheckNAdd(7);
break;
case 9:
jjAddStates(13,14);
break;
case 12:
jjAddStates(15,16);
break;
case 14:
if ((0x7fffffe07fffffeL & l) == 0L) break;
if (kind > 58) kind=58;
jjCheckNAdd(15);
break;
case 15:
if ((0x7fffffe87fffffeL & l) == 0L) break;
if (kind > 58) kind=58;
jjCheckNAdd(15);
break;
case 18:
jjAddStates(8,10);
break;
case 23:
jjCheckNAddTwoStates(23,24);
break;
case 25:
case 26:
jjCheckNAddTwoStates(26,24);
break;
case 32:
if ((0x2000000020L & l) != 0L) jjAddStates(17,18);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
do {
switch (jjstateSet[--i]) {
case 1:
if ((jjbitVec0[i2] & l2) != 0L) jjAddStates(5,7);
break;
case 9:
if ((jjbitVec0[i2] & l2) != 0L) jjAddStates(13,14);
break;
case 12:
if ((jjbitVec0[i2] & l2) != 0L) jjAddStates(15,16);
break;
case 18:
if ((jjbitVec0[i2] & l2) != 0L) jjAddStates(8,10);
break;
case 23:
if ((jjbitVec0[i2] & l2) != 0L) jjCheckNAddTwoStates(23,24);
break;
case 25:
case 26:
if ((jjbitVec0[i2] & l2) != 0L) jjCheckNAddTwoStates(26,24);
break;
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=35 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}
