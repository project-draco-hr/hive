{
  List<ObjectInspector> ois=new ArrayList<ObjectInspector>();
  if (keySelectDesc.isSelStarNoCompute()) {
    ois.add((ObjectInspector)((List)inputObjInspector[0]).get(0));
  }
 else {
    List<ExprNodeDesc> colList=this.keySelectDesc.getColList();
    keyEval=new ExprNodeEvaluator[colList.size()];
    for (int k=0; k < colList.size(); k++) {
      assert(colList.get(k) != null);
      keyEval[k]=ExprNodeEvaluatorFactory.get(colList.get(k));
    }
    keyObjInspector=initEvaluatorsAndReturnStruct(keyEval,keySelectDesc.getOutputColumnNames(),((StandardStructObjectInspector)inputObjInspector[0]).getAllStructFieldRefs().get(0).getFieldObjectInspector());
    ois.add(keyObjInspector);
    l4j.info("Key: input tag " + (int)inputTag + ", output tag "+ (int)outputTag+ ", SELECT inputOIForThisTag"+ ((StructObjectInspector)inputObjInspector[0]).getTypeName());
  }
  if (valueSelectDesc.isSelStarNoCompute()) {
    ois.add((ObjectInspector)((List)inputObjInspector[0]).get(1));
  }
 else {
    List<ExprNodeDesc> colList=this.valueSelectDesc.getColList();
    eval=new ExprNodeEvaluator[colList.size()];
    for (int k=0; k < colList.size(); k++) {
      assert(colList.get(k) != null);
      eval[k]=ExprNodeEvaluatorFactory.get(colList.get(k));
    }
    valueObjInspector=initEvaluatorsAndReturnStruct(eval,valueSelectDesc.getOutputColumnNames(),((StandardStructObjectInspector)inputObjInspector[0]).getAllStructFieldRefs().get(1).getFieldObjectInspector());
    ois.add(valueObjInspector);
    l4j.info("input tag " + (int)inputTag + ", output tag "+ (int)outputTag+ ", SELECT inputOIForThisTag"+ ((StructObjectInspector)inputObjInspector[0]).getTypeName());
  }
  ois.add(PrimitiveObjectInspectorFactory.writableByteObjectInspector);
  outputObjInspector=ObjectInspectorFactory.getStandardStructObjectInspector(Arrays.asList(fieldNames),ois);
  l4j.info("input tag " + (int)inputTag + ", output tag "+ (int)outputTag+ ", SELECT outputObjInspector"+ ((StructObjectInspector)outputObjInspector).getTypeName());
}
