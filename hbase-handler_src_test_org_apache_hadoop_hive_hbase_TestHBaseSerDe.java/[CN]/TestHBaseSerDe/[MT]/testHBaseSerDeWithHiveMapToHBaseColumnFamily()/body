{
  byte[] cfint="cf-int".getBytes();
  byte[] cfbyte="cf-byte".getBytes();
  byte[] cfshort="cf-short".getBytes();
  byte[] cflong="cf-long".getBytes();
  byte[] cffloat="cf-float".getBytes();
  byte[] cfdouble="cf-double".getBytes();
  byte[] cfbool="cf-bool".getBytes();
  byte[][] columnFamilies=new byte[][]{cfint,cfbyte,cfshort,cflong,cffloat,cfdouble,cfbool};
  byte[][] rowKeys=new byte[][]{Integer.toString(1).getBytes(),Integer.toString(Integer.MIN_VALUE).getBytes(),Integer.toString(Integer.MAX_VALUE).getBytes()};
  byte[][][] columnQualifiersAndValues=new byte[][][]{{Bytes.toBytes(1),new byte[]{1},Bytes.toBytes((short)1),Bytes.toBytes((long)1),Bytes.toBytes((float)1.0F),Bytes.toBytes(1.0),Bytes.toBytes(true)},{Bytes.toBytes(Integer.MIN_VALUE),new byte[]{Byte.MIN_VALUE},Bytes.toBytes((short)Short.MIN_VALUE),Bytes.toBytes((long)Long.MIN_VALUE),Bytes.toBytes((float)Float.MIN_VALUE),Bytes.toBytes(Double.MIN_VALUE),Bytes.toBytes(false)},{Bytes.toBytes(Integer.MAX_VALUE),new byte[]{Byte.MAX_VALUE},Bytes.toBytes((short)Short.MAX_VALUE),Bytes.toBytes((long)Long.MAX_VALUE),Bytes.toBytes((float)Float.MAX_VALUE),Bytes.toBytes(Double.MAX_VALUE),Bytes.toBytes(true)}};
  List<KeyValue> kvs=new ArrayList<KeyValue>();
  Result[] r=new Result[]{null,null,null};
  Put[] p=new Put[]{null,null,null};
  for (int i=0; i < r.length; i++) {
    kvs.clear();
    p[i]=new Put(rowKeys[i]);
    for (int j=0; j < columnQualifiersAndValues[i].length; j++) {
      kvs.add(new KeyValue(rowKeys[i],columnFamilies[j],columnQualifiersAndValues[i][j],columnQualifiersAndValues[i][j]));
      p[i].add(columnFamilies[j],columnQualifiersAndValues[i][j],columnQualifiersAndValues[i][j]);
    }
    r[i]=new Result(kvs);
  }
  Object[][] expectedData={{new Text(Integer.toString(1)),new IntWritable(1),new ByteWritable((byte)1),new ShortWritable((short)1),new LongWritable(1),new FloatWritable(1.0F),new DoubleWritable(1.0),new BooleanWritable(true)},{new Text(Integer.toString(Integer.MIN_VALUE)),new IntWritable(Integer.MIN_VALUE),new ByteWritable(Byte.MIN_VALUE),new ShortWritable(Short.MIN_VALUE),new LongWritable(Long.MIN_VALUE),new FloatWritable(Float.MIN_VALUE),new DoubleWritable(Double.MIN_VALUE),new BooleanWritable(false)},{new Text(Integer.toString(Integer.MAX_VALUE)),new IntWritable(Integer.MAX_VALUE),new ByteWritable(Byte.MAX_VALUE),new ShortWritable(Short.MAX_VALUE),new LongWritable(Long.MAX_VALUE),new FloatWritable(Float.MAX_VALUE),new DoubleWritable(Double.MAX_VALUE),new BooleanWritable(true)}};
  HBaseSerDe hbaseSerDe=new HBaseSerDe();
  Configuration conf=new Configuration();
  Properties tbl=createPropertiesForHiveMapHBaseColumnFamily();
  hbaseSerDe.initialize(conf,tbl);
  deserializeAndSerializeHiveMapHBaseColumnFamily(hbaseSerDe,r,p,expectedData,rowKeys,columnFamilies,columnQualifiersAndValues);
  hbaseSerDe=new HBaseSerDe();
  conf=new Configuration();
  tbl=createPropertiesForHiveMapHBaseColumnFamilyII();
  hbaseSerDe.initialize(conf,tbl);
  deserializeAndSerializeHiveMapHBaseColumnFamily(hbaseSerDe,r,p,expectedData,rowKeys,columnFamilies,columnQualifiersAndValues);
}
