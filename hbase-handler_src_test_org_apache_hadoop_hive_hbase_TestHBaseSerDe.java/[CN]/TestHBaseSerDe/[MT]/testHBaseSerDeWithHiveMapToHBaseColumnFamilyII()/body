{
  byte[] cfbyte="cf-byte".getBytes();
  byte[] cfshort="cf-short".getBytes();
  byte[] cfint="cf-int".getBytes();
  byte[] cflong="cf-long".getBytes();
  byte[] cffloat="cf-float".getBytes();
  byte[] cfdouble="cf-double".getBytes();
  byte[] cfstring="cf-string".getBytes();
  byte[] cfbool="cf-bool".getBytes();
  byte[][] columnFamilies=new byte[][]{cfbyte,cfshort,cfint,cflong,cffloat,cfdouble,cfstring,cfbool};
  byte[] rowKey=Bytes.toBytes("row-key");
  byte[][] columnQualifiersAndValues=new byte[][]{Bytes.toBytes("123"),Bytes.toBytes("456"),Bytes.toBytes("789"),Bytes.toBytes("1000"),Bytes.toBytes("-0.01"),Bytes.toBytes("5.3"),Bytes.toBytes("Hive"),Bytes.toBytes("true")};
  Put p=new Put(rowKey);
  List<KeyValue> kvs=new ArrayList<KeyValue>();
  for (int j=0; j < columnQualifiersAndValues.length; j++) {
    kvs.add(new KeyValue(rowKey,columnFamilies[j],columnQualifiersAndValues[j],columnQualifiersAndValues[j]));
    p.add(columnFamilies[j],columnQualifiersAndValues[j],columnQualifiersAndValues[j]);
  }
  Result r=new Result(kvs);
  Object[] expectedData={new Text("row-key"),new ByteWritable((byte)123),new ShortWritable((short)456),new IntWritable(789),new LongWritable(1000),new FloatWritable(-0.01F),new DoubleWritable(5.3),new Text("Hive"),new BooleanWritable(true)};
  HBaseSerDe hbaseSerDe=new HBaseSerDe();
  Configuration conf=new Configuration();
  Properties tbl=createPropertiesForHiveMapHBaseColumnFamilyII_I();
  hbaseSerDe.initialize(conf,tbl);
  deserializeAndSerializeHiveMapHBaseColumnFamilyII(hbaseSerDe,r,p,expectedData,columnFamilies,columnQualifiersAndValues);
  hbaseSerDe=new HBaseSerDe();
  conf=new Configuration();
  tbl=createPropertiesForHiveMapHBaseColumnFamilyII_II();
  hbaseSerDe.initialize(conf,tbl);
  deserializeAndSerializeHiveMapHBaseColumnFamilyII(hbaseSerDe,r,p,expectedData,columnFamilies,columnQualifiersAndValues);
}
