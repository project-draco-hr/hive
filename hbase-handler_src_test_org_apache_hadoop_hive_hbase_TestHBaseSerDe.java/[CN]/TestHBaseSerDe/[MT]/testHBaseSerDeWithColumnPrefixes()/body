{
  byte[] cfa="cola".getBytes();
  byte[] qualA="prefixA_col1".getBytes();
  byte[] qualB="prefixB_col2".getBytes();
  byte[] qualC="prefixB_col3".getBytes();
  byte[] qualD="unwanted_col".getBytes();
  List<Object> qualifiers=new ArrayList<Object>();
  qualifiers.add(new Text("prefixA_col1"));
  qualifiers.add(new Text("prefixB_col2"));
  qualifiers.add(new Text("prefixB_col3"));
  qualifiers.add(new Text("unwanted_col"));
  List<Object> expectedQualifiers=new ArrayList<Object>();
  expectedQualifiers.add(new Text("prefixA_col1"));
  expectedQualifiers.add(new Text("prefixB_col2"));
  expectedQualifiers.add(new Text("prefixB_col3"));
  byte[] rowKey=Bytes.toBytes("test-row1");
  List<KeyValue> kvs=new ArrayList<KeyValue>();
  byte[] dataA="This is first test data".getBytes();
  byte[] dataB="This is second test data".getBytes();
  byte[] dataC="This is third test data".getBytes();
  byte[] dataD="Unwanted data".getBytes();
  kvs.add(new KeyValue(rowKey,cfa,qualA,dataA));
  kvs.add(new KeyValue(rowKey,cfa,qualB,dataB));
  kvs.add(new KeyValue(rowKey,cfa,qualC,dataC));
  kvs.add(new KeyValue(rowKey,cfa,qualD,dataD));
  Result r=new Result(kvs);
  Put p=new Put(rowKey);
  p.add(new KeyValue(rowKey,cfa,qualA,dataA));
  p.add(new KeyValue(rowKey,cfa,qualB,dataB));
  p.add(new KeyValue(rowKey,cfa,qualC,dataC));
  Object[] expectedFieldsData={new Text("test-row1"),new String("This is first test data"),new String("This is second test data"),new String("This is third test data")};
  int[] expectedMapSize=new int[]{1,2};
  HBaseSerDe serDe=new HBaseSerDe();
  Configuration conf=new Configuration();
  Properties tbl=createPropertiesForColumnPrefixes();
  SerDeUtils.initializeSerDe(serDe,conf,tbl,null);
  Object notPresentKey=new Text("unwanted_col");
  deserializeAndSerializeHivePrefixColumnFamily(serDe,r,p,expectedFieldsData,expectedMapSize,expectedQualifiers,notPresentKey);
}
