{
  byte[] cfa="cfa".getBytes();
  byte[] cfb="cfb".getBytes();
  byte[] cfc="cfc".getBytes();
  byte[] qualByte="byte".getBytes();
  byte[] qualShort="short".getBytes();
  byte[] qualInt="int".getBytes();
  byte[] qualLong="long".getBytes();
  byte[] qualFloat="float".getBytes();
  byte[] qualDouble="double".getBytes();
  byte[] qualString="string".getBytes();
  byte[] qualBool="boolean".getBytes();
  byte[] rowKey=Bytes.toBytes("test-row-2");
  List<KeyValue> kvs=new ArrayList<KeyValue>();
  kvs.add(new KeyValue(rowKey,cfa,qualByte,new byte[]{Byte.MIN_VALUE}));
  kvs.add(new KeyValue(rowKey,cfb,qualShort,Bytes.toBytes(Short.MIN_VALUE)));
  kvs.add(new KeyValue(rowKey,cfc,qualInt,Bytes.toBytes(Integer.MIN_VALUE)));
  kvs.add(new KeyValue(rowKey,cfa,qualLong,Bytes.toBytes(Long.MIN_VALUE)));
  kvs.add(new KeyValue(rowKey,cfb,qualFloat,Bytes.toBytes(Float.MIN_VALUE)));
  kvs.add(new KeyValue(rowKey,cfc,qualDouble,Bytes.toBytes(Double.MAX_VALUE)));
  kvs.add(new KeyValue(rowKey,cfa,qualString,Bytes.toBytes("Hadoop, HBase, and Hive Again!")));
  kvs.add(new KeyValue(rowKey,cfb,qualBool,Bytes.toBytes(false)));
  Collections.sort(kvs,KeyValue.COMPARATOR);
  Result r=new Result(kvs);
  Put p=new Put(rowKey);
  p.add(cfa,qualByte,new byte[]{Byte.MIN_VALUE});
  p.add(cfb,qualShort,Bytes.toBytes(Short.MIN_VALUE));
  p.add(cfc,qualInt,Bytes.toBytes(Integer.MIN_VALUE));
  p.add(cfa,qualLong,Bytes.toBytes(Long.MIN_VALUE));
  p.add(cfb,qualFloat,Bytes.toBytes(Float.MIN_VALUE));
  p.add(cfc,qualDouble,Bytes.toBytes(Double.MAX_VALUE));
  p.add(cfa,qualString,Bytes.toBytes("Hadoop, HBase, and Hive Again!"));
  p.add(cfb,qualBool,Bytes.toBytes(false));
  Object[] expectedFieldsData={new Text("test-row-2"),new ByteWritable(Byte.MIN_VALUE),new ShortWritable(Short.MIN_VALUE),new IntWritable(Integer.MIN_VALUE),new LongWritable(Long.MIN_VALUE),new FloatWritable(Float.MIN_VALUE),new DoubleWritable(Double.MAX_VALUE),new Text("Hadoop, HBase, and Hive Again!"),new BooleanWritable(false)};
  HBaseSerDe serDe=new HBaseSerDe();
  Configuration conf=new Configuration();
  Properties tbl=createPropertiesII_I();
  SerDeUtils.initializeSerDe(serDe,conf,tbl,null);
  deserializeAndSerialize(serDe,r,p,expectedFieldsData);
  serDe=new HBaseSerDe();
  conf=new Configuration();
  tbl=createPropertiesII_II();
  SerDeUtils.initializeSerDe(serDe,conf,tbl,null);
  deserializeAndSerialize(serDe,r,p,expectedFieldsData);
  serDe=new HBaseSerDe();
  conf=new Configuration();
  tbl=createPropertiesII_III();
  SerDeUtils.initializeSerDe(serDe,conf,tbl,null);
  deserializeAndSerialize(serDe,r,p,expectedFieldsData);
}
