{
  HiveDruidQueryBasedInputFormat input=new HiveDruidQueryBasedInputFormat();
  Method method1=HiveDruidQueryBasedInputFormat.class.getDeclaredMethod("createSplitsIntervals",List.class,int.class);
  method1.setAccessible(true);
  List<Interval> intervals;
  List<List<Interval>> resultList;
  List<List<Interval>> expectedResultList;
  intervals=new ArrayList<>();
  intervals.add(new Interval(1262304000000L,1293840000000L));
  resultList=(List<List<Interval>>)method1.invoke(input,intervals,4);
  expectedResultList=new ArrayList<>();
  expectedResultList.add(Arrays.asList(new Interval(1262304000000L,1270188000000L)));
  expectedResultList.add(Arrays.asList(new Interval(1270188000000L,1278072000000L)));
  expectedResultList.add(Arrays.asList(new Interval(1278072000000L,1285956000000L)));
  expectedResultList.add(Arrays.asList(new Interval(1285956000000L,1293840000000L)));
  assertEquals(expectedResultList,resultList);
  intervals=new ArrayList<>();
  intervals.add(new Interval(1262304000000L,1293840000000L));
  intervals.add(new Interval(1325376000000L,1356998400000L));
  resultList=(List<List<Interval>>)method1.invoke(input,intervals,4);
  expectedResultList=new ArrayList<>();
  expectedResultList.add(Arrays.asList(new Interval(1262304000000L,1278093600000L)));
  expectedResultList.add(Arrays.asList(new Interval(1278093600000L,1293840000000L),new Interval(1325376000000L,1325419200000L)));
  expectedResultList.add(Arrays.asList(new Interval(1325419200000L,1341208800000L)));
  expectedResultList.add(Arrays.asList(new Interval(1341208800000L,1356998400000L)));
  assertEquals(expectedResultList,resultList);
  intervals=new ArrayList<>();
  intervals.add(new Interval(1262304000000L,1293840000000L));
  intervals.add(new Interval(1325376000000L,1356998400000L));
  resultList=(List<List<Interval>>)method1.invoke(input,intervals,5);
  expectedResultList=new ArrayList<>();
  expectedResultList.add(Arrays.asList(new Interval(1262304000000L,1274935680000L)));
  expectedResultList.add(Arrays.asList(new Interval(1274935680000L,1287567360000L)));
  expectedResultList.add(Arrays.asList(new Interval(1287567360000L,1293840000000L),new Interval(1325376000000L,1331735040000L)));
  expectedResultList.add(Arrays.asList(new Interval(1331735040000L,1344366720000L)));
  expectedResultList.add(Arrays.asList(new Interval(1344366720000L,1356998400000L)));
  assertEquals(expectedResultList,resultList);
  intervals=new ArrayList<>();
  intervals.add(new Interval(1199145600000L,1201824000000L));
  intervals.add(new Interval(1325376000000L,1356998400000L));
  intervals.add(new Interval(1407283200000L,1407888000000L));
  resultList=(List<List<Interval>>)method1.invoke(input,intervals,6);
  expectedResultList=new ArrayList<>();
  expectedResultList.add(Arrays.asList(new Interval(1199145600000L,1201824000000L),new Interval(1325376000000L,1328515200000L)));
  expectedResultList.add(Arrays.asList(new Interval(1328515200000L,1334332800000L)));
  expectedResultList.add(Arrays.asList(new Interval(1334332800000L,1340150400000L)));
  expectedResultList.add(Arrays.asList(new Interval(1340150400000L,1345968000000L)));
  expectedResultList.add(Arrays.asList(new Interval(1345968000000L,1351785600000L)));
  expectedResultList.add(Arrays.asList(new Interval(1351785600000L,1356998400000L),new Interval(1407283200000L,1407888000000L)));
  assertEquals(expectedResultList,resultList);
}
