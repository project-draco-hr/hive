{
  if (colValues.isSetBoolVal()) {
    type=Type.BOOLEAN_TYPE;
    nulls=toBitset(colValues.getBoolVal().getNulls());
    boolVars=Booleans.toArray(colValues.getBoolVal().getValues());
    size=boolVars.length;
  }
 else   if (colValues.isSetByteVal()) {
    type=Type.TINYINT_TYPE;
    nulls=toBitset(colValues.getByteVal().getNulls());
    byteVars=Bytes.toArray(colValues.getByteVal().getValues());
    size=byteVars.length;
  }
 else   if (colValues.isSetI16Val()) {
    type=Type.SMALLINT_TYPE;
    nulls=toBitset(colValues.getI16Val().getNulls());
    shortVars=Shorts.toArray(colValues.getI16Val().getValues());
    size=shortVars.length;
  }
 else   if (colValues.isSetI32Val()) {
    type=Type.INT_TYPE;
    nulls=toBitset(colValues.getI32Val().getNulls());
    intVars=Ints.toArray(colValues.getI32Val().getValues());
    size=intVars.length;
  }
 else   if (colValues.isSetI64Val()) {
    type=Type.BIGINT_TYPE;
    nulls=toBitset(colValues.getI64Val().getNulls());
    longVars=Longs.toArray(colValues.getI64Val().getValues());
    size=longVars.length;
  }
 else   if (colValues.isSetDoubleVal()) {
    type=Type.DOUBLE_TYPE;
    nulls=toBitset(colValues.getDoubleVal().getNulls());
    doubleVars=Doubles.toArray(colValues.getDoubleVal().getValues());
    size=doubleVars.length;
  }
 else   if (colValues.isSetBinaryVal()) {
    type=Type.BINARY_TYPE;
    nulls=toBitset(colValues.getBinaryVal().getNulls());
    binaryVars=colValues.getBinaryVal().getValues();
    size=binaryVars.size();
  }
 else   if (colValues.isSetStringVal()) {
    type=Type.STRING_TYPE;
    nulls=toBitset(colValues.getStringVal().getNulls());
    stringVars=colValues.getStringVal().getValues();
    size=stringVars.size();
  }
 else {
    throw new IllegalStateException("invalid union object");
  }
}
