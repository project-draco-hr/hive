{
  if (childExpressions != null) {
    super.evaluateChildren(batch);
  }
  BytesColumnVector inputColVector=(BytesColumnVector)batch.cols[colNum];
  int[] sel=batch.selected;
  boolean[] nullPos=inputColVector.isNull;
  int n=batch.size;
  byte[][] vector=inputColVector.vector;
  int[] length=inputColVector.length;
  int[] start=inputColVector.start;
  byte[] simplePatternBytes=simplePattern.getBytes();
  if (n == 0) {
    return;
  }
  if (inputColVector.noNulls) {
    if (inputColVector.isRepeating) {
      if (!like(vector[0],start[0],length[0])) {
        batch.size=0;
      }
    }
 else     if (batch.selectedInUse) {
      int newSize=0;
switch (type) {
case NONE:
        for (int j=0; j != n; j++) {
          int i=sel[j];
          if (noneLike(vector[i],start[i],length[i],simplePatternBytes)) {
            sel[newSize++]=i;
          }
        }
      break;
case BEGIN:
    for (int j=0; j != n; j++) {
      int i=sel[j];
      if (beginLike(vector[i],start[i],length[i],simplePatternBytes)) {
        sel[newSize++]=i;
      }
    }
  break;
case END:
for (int j=0; j != n; j++) {
  int i=sel[j];
  if (endLike(vector[i],start[i],length[i],simplePatternBytes)) {
    sel[newSize++]=i;
  }
}
break;
case MIDDLE:
for (int j=0; j != n; j++) {
int i=sel[j];
if (midLike(vector[i],start[i],length[i],simplePatternBytes)) {
sel[newSize++]=i;
}
}
break;
case COMPLEX:
for (int j=0; j != n; j++) {
int i=sel[j];
if (complexLike(vector[i],start[i],length[i])) {
sel[newSize++]=i;
}
}
break;
}
batch.size=newSize;
}
 else {
int newSize=0;
switch (type) {
case NONE:
for (int i=0; i != n; i++) {
if (noneLike(vector[i],start[i],length[i],simplePatternBytes)) {
sel[newSize++]=i;
}
}
break;
case BEGIN:
for (int i=0; i != n; i++) {
if (beginLike(vector[i],start[i],length[i],simplePatternBytes)) {
sel[newSize++]=i;
}
}
break;
case END:
for (int i=0; i != n; i++) {
if (endLike(vector[i],start[i],length[i],simplePatternBytes)) {
sel[newSize++]=i;
}
}
break;
case MIDDLE:
for (int i=0; i != n; i++) {
if (midLike(vector[i],start[i],length[i],simplePatternBytes)) {
sel[newSize++]=i;
}
}
break;
case COMPLEX:
for (int i=0; i != n; i++) {
if (complexLike(vector[i],start[i],length[i])) {
sel[newSize++]=i;
}
}
break;
}
if (newSize < n) {
batch.size=newSize;
batch.selectedInUse=true;
}
}
}
 else {
if (inputColVector.isRepeating) {
if (!nullPos[0]) {
if (!like(vector[0],start[0],length[0])) {
batch.size=0;
}
}
 else {
batch.size=0;
}
}
 else if (batch.selectedInUse) {
int newSize=0;
switch (type) {
case NONE:
for (int j=0; j != n; j++) {
int i=sel[j];
if (!nullPos[i]) {
if (noneLike(vector[i],start[i],length[i],simplePatternBytes)) {
sel[newSize++]=i;
}
}
}
break;
case BEGIN:
for (int j=0; j != n; j++) {
int i=sel[j];
if (!nullPos[i]) {
if (beginLike(vector[i],start[i],length[i],simplePatternBytes)) {
sel[newSize++]=i;
}
}
}
break;
case END:
for (int j=0; j != n; j++) {
int i=sel[j];
if (!nullPos[i]) {
if (endLike(vector[i],start[i],length[i],simplePatternBytes)) {
sel[newSize++]=i;
}
}
}
break;
case MIDDLE:
for (int j=0; j != n; j++) {
int i=sel[j];
if (!nullPos[i]) {
if (midLike(vector[i],start[i],length[i],simplePatternBytes)) {
sel[newSize++]=i;
}
}
}
break;
case COMPLEX:
for (int j=0; j != n; j++) {
int i=sel[j];
if (!nullPos[i]) {
if (complexLike(vector[i],start[i],length[i])) {
sel[newSize++]=i;
}
}
}
break;
}
batch.size=newSize;
}
 else {
int newSize=0;
switch (type) {
case NONE:
for (int i=0; i != n; i++) {
if (!nullPos[i]) {
if (noneLike(vector[i],start[i],length[i],simplePatternBytes)) {
sel[newSize++]=i;
}
}
}
break;
case BEGIN:
for (int i=0; i != n; i++) {
if (!nullPos[i]) {
if (beginLike(vector[i],start[i],length[i],simplePatternBytes)) {
sel[newSize++]=i;
}
}
}
break;
case END:
for (int i=0; i != n; i++) {
if (!nullPos[i]) {
if (endLike(vector[i],start[i],length[i],simplePatternBytes)) {
sel[newSize++]=i;
}
}
}
break;
case MIDDLE:
for (int i=0; i != n; i++) {
if (!nullPos[i]) {
if (midLike(vector[i],start[i],length[i],simplePatternBytes)) {
sel[newSize++]=i;
}
}
}
break;
case COMPLEX:
for (int i=0; i != n; i++) {
if (!nullPos[i]) {
if (complexLike(vector[i],start[i],length[i])) {
sel[newSize++]=i;
}
}
}
break;
}
if (newSize < n) {
batch.size=newSize;
batch.selectedInUse=true;
}
}
}
}
