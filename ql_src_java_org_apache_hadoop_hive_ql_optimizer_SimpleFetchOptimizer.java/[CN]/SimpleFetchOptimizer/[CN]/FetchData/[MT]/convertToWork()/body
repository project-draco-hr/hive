{
  inputs.clear();
  Utilities.addSchemaEvolutionToTableScanOperator(table,scanOp);
  TableDesc tableDesc=Utilities.getTableDesc(table);
  if (!table.isPartitioned()) {
    inputs.add(new ReadEntity(table,parent,!table.isView() && parent == null));
    FetchWork work=new FetchWork(table.getPath(),tableDesc);
    PlanUtils.configureInputJobPropertiesForStorageHandler(work.getTblDesc());
    work.setSplitSample(splitSample);
    return work;
  }
  List<Path> listP=new ArrayList<Path>();
  List<PartitionDesc> partP=new ArrayList<PartitionDesc>();
  for (  Partition partition : partsList.getNotDeniedPartns()) {
    inputs.add(new ReadEntity(partition,parent,parent == null));
    listP.add(partition.getDataLocation());
    partP.add(Utilities.getPartitionDescFromTableDesc(tableDesc,partition,true));
  }
  Table sourceTable=partsList.getSourceTable();
  inputs.add(new ReadEntity(sourceTable,parent,parent == null));
  TableDesc table=Utilities.getTableDesc(sourceTable);
  FetchWork work=new FetchWork(listP,partP,table);
  if (!work.getPartDesc().isEmpty()) {
    PartitionDesc part0=work.getPartDesc().get(0);
    PlanUtils.configureInputJobPropertiesForStorageHandler(part0.getTableDesc());
    work.setSplitSample(splitSample);
  }
  return work;
}
