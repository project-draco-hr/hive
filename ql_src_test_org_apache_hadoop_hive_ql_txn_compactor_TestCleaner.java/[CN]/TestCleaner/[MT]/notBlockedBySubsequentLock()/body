{
  Table t=newTable("default","bblt",false);
  conf.setTimeVar(HiveConf.ConfVars.HIVE_COMPACTOR_CLEANER_RUN_INTERVAL,100,TimeUnit.MILLISECONDS);
  addBaseFile(t,null,20L,20);
  addDeltaFile(t,null,21L,22L,2);
  addDeltaFile(t,null,23L,24L,2);
  addDeltaFile(t,null,21L,24L,4);
  burnThroughTransactions(25);
  CompactionRequest rqst=new CompactionRequest("default","bblt",CompactionType.MINOR);
  txnHandler.compact(rqst);
  CompactionInfo ci=txnHandler.findNextToCompact("fred");
  txnHandler.markCompacted(ci);
  txnHandler.setRunAs(ci.id,System.getProperty("user.name"));
  LockComponent comp=new LockComponent(LockType.SHARED_READ,LockLevel.TABLE,"default");
  comp.setTablename("bblt");
  List<LockComponent> components=new ArrayList<LockComponent>(1);
  components.add(comp);
  LockRequest req=new LockRequest(components,"me","localhost");
  LockResponse res=txnHandler.lock(req);
  AtomicBoolean looped=new AtomicBoolean();
  looped.set(false);
  startCleaner(looped);
  while (!looped.get()) {
    Thread.currentThread().sleep(100);
  }
  ShowCompactResponse rsp=txnHandler.showCompact(new ShowCompactRequest());
  List<ShowCompactResponseElement> compacts=rsp.getCompacts();
  Assert.assertEquals(1,compacts.size());
  LockComponent comp2=new LockComponent(LockType.SHARED_READ,LockLevel.TABLE,"default");
  comp2.setTablename("bblt");
  List<LockComponent> components2=new ArrayList<LockComponent>(1);
  components2.add(comp2);
  LockRequest req2=new LockRequest(components,"me","localhost");
  LockResponse res2=txnHandler.lock(req2);
  txnHandler.unlock(new UnlockRequest(res.getLockid()));
  looped.set(false);
  while (!looped.get()) {
    Thread.currentThread().sleep(100);
  }
  stopThread();
  Thread.currentThread().sleep(200);
  rsp=txnHandler.showCompact(new ShowCompactRequest());
  compacts=rsp.getCompacts();
  Assert.assertEquals(1,compacts.size());
  Assert.assertTrue(TxnStore.SUCCEEDED_RESPONSE.equals(rsp.getCompacts().get(0).getState()));
}
