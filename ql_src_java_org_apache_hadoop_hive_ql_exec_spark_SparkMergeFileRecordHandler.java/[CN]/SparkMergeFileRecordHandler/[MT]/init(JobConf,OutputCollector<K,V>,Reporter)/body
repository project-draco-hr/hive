{
  super.init(job,output,reporter);
  try {
    jc=job;
    MapWork mapWork=Utilities.getMapWork(job);
    if (mapWork instanceof MergeFileWork) {
      MergeFileWork mergeFileWork=(MergeFileWork)mapWork;
      String alias=mergeFileWork.getAliasToWork().keySet().iterator().next();
      op=mergeFileWork.getAliasToWork().get(alias);
      if (op instanceof AbstractFileMergeOperator) {
        mergeOp=(AbstractFileMergeOperator<? extends FileMergeDesc>)op;
        mergeOp.initializeOp(jc);
        row=new Object[2];
        abort=false;
      }
 else {
        abort=true;
        throw new IllegalStateException("Merge file work's top operator should be an" + " instance of AbstractFileMergeOperator");
      }
    }
 else {
      abort=true;
      throw new IllegalStateException("Map work should be a merge file work.");
    }
    LOG.info(mergeOp.dump(0));
  }
 catch (  HiveException e) {
    abort=true;
    throw new RuntimeException(e);
  }
}
