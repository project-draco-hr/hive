{
  if (schema != null) {
    LOG.info("Resetting already initialized AvroSerDe");
  }
  schema=null;
  oi=null;
  columnNames=null;
  columnTypes=null;
  final String columnNameProperty=properties.getProperty("columns");
  final String columnTypeProperty=properties.getProperty("columns.types");
  final String columnCommentProperty=properties.getProperty("columns.comments");
  if (properties.getProperty(AvroSerdeUtils.SCHEMA_LITERAL) != null || properties.getProperty(AvroSerdeUtils.SCHEMA_URL) != null || columnNameProperty == null || columnNameProperty.isEmpty() || columnTypeProperty == null || columnTypeProperty.isEmpty()) {
    schema=determineSchemaOrReturnErrorSchema(properties);
  }
 else {
    columnNames=Arrays.asList(columnNameProperty.split(","));
    columnTypes=TypeInfoUtils.getTypeInfosFromTypeString(columnTypeProperty);
    List<String> columnComments;
    if (columnCommentProperty.isEmpty()) {
      columnComments=new ArrayList<String>();
    }
 else {
      columnComments=Arrays.asList(columnCommentProperty.split(","));
      LOG.info("columnComments is " + columnCommentProperty);
    }
    if (columnNames.size() != columnTypes.size()) {
      throw new IllegalArgumentException("AvroSerde initialization failed. Number of column " + "name and column type differs. columnNames = " + columnNames + ", columnTypes = "+ columnTypes);
    }
    final String tableName=properties.getProperty(TABLE_NAME);
    final String tableComment=properties.getProperty(TABLE_COMMENT);
    TypeInfoToSchema typeInfoToSchema=new TypeInfoToSchema();
    schema=typeInfoToSchema.convert(columnNames,columnTypes,columnComments,properties.getProperty(AvroSerdeUtils.SCHEMA_NAMESPACE),properties.getProperty(AvroSerdeUtils.SCHEMA_NAME,tableName),properties.getProperty(AvroSerdeUtils.SCHEMA_DOC,tableComment));
    properties.setProperty(AvroSerdeUtils.SCHEMA_LITERAL,schema.toString());
  }
  LOG.info("Avro schema is " + schema);
  if (configuration == null) {
    LOG.info("Configuration null, not inserting schema");
  }
 else {
    configuration.set(AvroSerdeUtils.AVRO_SERDE_SCHEMA,schema.toString(false));
  }
  badSchema=schema.equals(SchemaResolutionProblem.SIGNAL_BAD_SCHEMA);
  AvroObjectInspectorGenerator aoig=new AvroObjectInspectorGenerator(schema);
  this.columnNames=aoig.getColumnNames();
  this.columnTypes=aoig.getColumnTypes();
  this.oi=aoig.getObjectInspector();
}
