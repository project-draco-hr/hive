{
  if (join.getJoinAlgorithm() == JoinAlgorithm.MAP_JOIN || join.getJoinAlgorithm() == JoinAlgorithm.BUCKET_JOIN) {
    RelNode inMemoryInput;
    if (join.getMapJoinStreamingSide() == MapJoinStreamingRelation.LEFT_RELATION) {
      inMemoryInput=join.getRight();
    }
 else     if (join.getMapJoinStreamingSide() == MapJoinStreamingRelation.RIGHT_RELATION) {
      inMemoryInput=join.getLeft();
    }
 else {
      return null;
    }
    if (join.getJoinAlgorithm() == JoinAlgorithm.MAP_JOIN) {
      return RelMetadataQuery.cumulativeMemoryWithinPhase(inMemoryInput);
    }
 else     if (join.getJoinAlgorithm() == JoinAlgorithm.BUCKET_JOIN) {
      final Double memoryInput=RelMetadataQuery.cumulativeMemoryWithinPhase(inMemoryInput);
      final Integer splitCount=RelMetadataQuery.splitCount(inMemoryInput);
      if (memoryInput == null || splitCount == null) {
        return null;
      }
      return memoryInput / splitCount;
    }
  }
  return super.cumulativeMemoryWithinPhaseSplit(join);
}
