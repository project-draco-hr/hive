{
  String currentInputPath=context.getCurrentInputPath() == null ? null : context.getCurrentInputPath().toString();
  LOG.info("******* Load from HashTable for input file: " + currentInputPath);
  MapredLocalWork localWork=context.getLocalWork();
  try {
    if (localWork.getDirectFetchOp() != null) {
      loadDirectly(mapJoinTables,currentInputPath);
    }
    Path baseDir=localWork.getTmpPath();
    if (baseDir == null) {
      return;
    }
    FileSystem fs=FileSystem.get(baseDir.toUri(),hconf);
    BucketMapJoinContext mapJoinCtx=localWork.getBucketMapjoinContext();
    boolean firstContainer=true;
    boolean useOptimizedContainer=HiveConf.getBoolVar(hconf,HiveConf.ConfVars.HIVEMAPJOINUSEOPTIMIZEDTABLE);
    for (int pos=0; pos < mapJoinTables.length; pos++) {
      if (pos == desc.getPosBigTable() || mapJoinTables[pos] != null) {
        continue;
      }
      if (useOptimizedContainer) {
        MapJoinObjectSerDeContext keyCtx=mapJoinTableSerdes[pos].getKeyContext();
        ObjectInspector keyOI=keyCtx.getSerDe().getObjectInspector();
        if (!MapJoinBytesTableContainer.isSupportedKey(keyOI)) {
          if (firstContainer) {
            LOG.warn("Not using optimized table container." + "Only a subset of mapjoin keys is supported.");
            useOptimizedContainer=false;
            HiveConf.setBoolVar(hconf,HiveConf.ConfVars.HIVEMAPJOINUSEOPTIMIZEDTABLE,false);
          }
 else {
            throw new HiveException("Only a subset of mapjoin keys is supported.");
          }
        }
      }
      firstContainer=false;
      String bigInputPath=currentInputPath;
      if (currentInputPath != null && mapJoinCtx != null) {
        if (!desc.isBucketMapJoin()) {
          bigInputPath=null;
        }
 else {
          Set<String> aliases=((SparkBucketMapJoinContext)mapJoinCtx).getPosToAliasMap().get(pos);
          String alias=aliases.iterator().next();
          String smallInputPath=mapJoinCtx.getAliasBucketFileNameMapping().get(alias).get(bigInputPath).get(0);
          bigInputPath=mapJoinCtx.getMappingBigFile(alias,smallInputPath);
        }
      }
      String fileName=localWork.getBucketFileName(bigInputPath);
      Path path=Utilities.generatePath(baseDir,desc.getDumpFilePrefix(),(byte)pos,fileName);
      mapJoinTables[pos]=load(fs,path,mapJoinTableSerdes[pos]);
    }
  }
 catch (  Exception e) {
    throw new HiveException(e);
  }
}
