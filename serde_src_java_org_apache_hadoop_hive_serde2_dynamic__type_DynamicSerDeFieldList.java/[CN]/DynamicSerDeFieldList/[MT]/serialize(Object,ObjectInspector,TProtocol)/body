{
  assert(oi instanceof StructObjectInspector);
  StructObjectInspector soi=(StructObjectInspector)oi;
  List<? extends StructField> fields=soi.getAllStructFieldRefs();
  if (fields.size() != ordered_types.length) {
    throw new SerDeException("Trying to serialize " + fields.size() + " fields into a struct with "+ ordered_types.length);
  }
  for (int i=0; i < fields.size(); i++) {
    Object f=soi.getStructFieldData(o,fields.get(i));
    DynamicSerDeTypeBase mt=ordered_types[i];
    if (thrift_mode) {
      field.name=mt.name;
      field.type=mt.getType();
      field.id=(short)mt.fieldid;
      oprot.writeFieldBegin(field);
    }
    mt.serialize(f,fields.get(i).getFieldObjectInspector(),oprot);
    if (thrift_mode) {
      oprot.writeFieldEnd();
    }
  }
  if (thrift_mode) {
    oprot.writeFieldStop();
  }
}
