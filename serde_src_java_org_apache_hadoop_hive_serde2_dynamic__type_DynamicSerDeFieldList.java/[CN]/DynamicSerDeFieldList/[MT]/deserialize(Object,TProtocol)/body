{
  ArrayList<Object> struct=null;
  if (reuse == null) {
    struct=new ArrayList<Object>(getNumFields());
    for (    DynamicSerDeTypeBase orderedType : ordered_types) {
      struct.add(null);
    }
  }
 else {
    struct=(ArrayList<Object>)reuse;
    assert(struct.size() == ordered_types.length);
  }
  boolean fastSkips=iprot instanceof org.apache.hadoop.hive.serde2.thrift.SkippableTProtocol;
  boolean stopSeen=false;
  if (fieldsPresent == null) {
    fieldsPresent=new boolean[ordered_types.length];
  }
  Arrays.fill(fieldsPresent,false);
  for (int i=0; i < getNumFields(); i++) {
    DynamicSerDeTypeBase mt=null;
    TField field=null;
    if (!isRealThrift && getField(i).isSkippable()) {
      mt=ordered_types[i];
      if (fastSkips) {
        ((org.apache.hadoop.hive.serde2.thrift.SkippableTProtocol)iprot).skip(mt.getType());
      }
 else {
        TProtocolUtil.skip(iprot,mt.getType());
      }
      struct.set(i,null);
      continue;
    }
    if (thrift_mode) {
      field=iprot.readFieldBegin();
      if (field.type >= 0) {
        if (field.type == TType.STOP) {
          stopSeen=true;
          break;
        }
        mt=getFieldByFieldId(field.id);
        if (mt == null) {
          System.err.println("ERROR for fieldid: " + field.id + " system has no knowledge of this field which is of type : "+ field.type);
          TProtocolUtil.skip(iprot,field.type);
          continue;
        }
      }
    }
    int orderedId=-1;
    if (!thrift_mode || field.type < 0) {
      mt=ordered_types[i];
      orderedId=i;
    }
 else {
      orderedId=ordered_column_id_by_name.get(mt.name);
    }
    struct.set(orderedId,mt.deserialize(struct.get(orderedId),iprot));
    if (thrift_mode) {
      iprot.readFieldEnd();
    }
    fieldsPresent[orderedId]=true;
  }
  for (int i=0; i < ordered_types.length; i++) {
    if (!fieldsPresent[i]) {
      struct.set(i,null);
    }
  }
  if (thrift_mode && !stopSeen) {
    iprot.readFieldBegin();
  }
  return struct;
}
