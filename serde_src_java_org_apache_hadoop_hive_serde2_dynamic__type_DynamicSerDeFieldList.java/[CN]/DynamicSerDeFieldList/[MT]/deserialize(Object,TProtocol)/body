{
  ArrayList<Object> struct=null;
  if (reuse == null) {
    struct=new ArrayList<Object>(this.getNumFields());
    for (int i=0; i < this.getNumFields(); i++) {
      struct.add(null);
    }
  }
 else {
    struct=(ArrayList<Object>)reuse;
    assert(struct.size() == this.getNumFields());
  }
  for (int i=0; i < this.getNumFields(); i++) {
    DynamicSerDeTypeBase mt=null;
    TField field=null;
    if (thrift_mode) {
      field=iprot.readFieldBegin();
      if (field.type >= 0) {
        if (field.type == TType.STOP) {
          break;
        }
        mt=this.getFieldByFieldId(field.id);
        if (mt == null) {
          System.err.println("ERROR for fieldid: " + field.id + " system has no knowledge of this field which is of type : "+ field.type);
          TProtocolUtil.skip(iprot,field.type);
          continue;
        }
      }
    }
    int orderedId=-1;
    if (!thrift_mode || field.type < 0) {
      mt=this.ordered_types[i];
      orderedId=i;
    }
 else {
      orderedId=ordered_column_id_by_name.get(mt.name);
    }
    struct.set(orderedId,mt.deserialize(struct.get(orderedId),iprot));
    if (thrift_mode) {
      iprot.readFieldEnd();
    }
  }
  return struct;
}
