{
  if (other == org.apache.hadoop.hive.metastore.hbase.HbaseMetastoreProto.Table.getDefaultInstance())   return this;
  if (other.hasOwner()) {
    bitField0_|=0x00000001;
    owner_=other.owner_;
    onChanged();
  }
  if (other.hasCreateTime()) {
    setCreateTime(other.getCreateTime());
  }
  if (other.hasLastAccessTime()) {
    setLastAccessTime(other.getLastAccessTime());
  }
  if (other.hasRetention()) {
    setRetention(other.getRetention());
  }
  if (other.hasLocation()) {
    bitField0_|=0x00000010;
    location_=other.location_;
    onChanged();
  }
  if (other.hasSdParameters()) {
    mergeSdParameters(other.getSdParameters());
  }
  if (other.hasSdHash()) {
    setSdHash(other.getSdHash());
  }
  if (partitionKeysBuilder_ == null) {
    if (!other.partitionKeys_.isEmpty()) {
      if (partitionKeys_.isEmpty()) {
        partitionKeys_=other.partitionKeys_;
        bitField0_=(bitField0_ & ~0x00000080);
      }
 else {
        ensurePartitionKeysIsMutable();
        partitionKeys_.addAll(other.partitionKeys_);
      }
      onChanged();
    }
  }
 else {
    if (!other.partitionKeys_.isEmpty()) {
      if (partitionKeysBuilder_.isEmpty()) {
        partitionKeysBuilder_.dispose();
        partitionKeysBuilder_=null;
        partitionKeys_=other.partitionKeys_;
        bitField0_=(bitField0_ & ~0x00000080);
        partitionKeysBuilder_=com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ? getPartitionKeysFieldBuilder() : null;
      }
 else {
        partitionKeysBuilder_.addAllMessages(other.partitionKeys_);
      }
    }
  }
  if (other.hasParameters()) {
    mergeParameters(other.getParameters());
  }
  if (other.hasViewOriginalText()) {
    bitField0_|=0x00000200;
    viewOriginalText_=other.viewOriginalText_;
    onChanged();
  }
  if (other.hasViewExpandedText()) {
    bitField0_|=0x00000400;
    viewExpandedText_=other.viewExpandedText_;
    onChanged();
  }
  if (other.hasTableType()) {
    bitField0_|=0x00000800;
    tableType_=other.tableType_;
    onChanged();
  }
  if (other.hasPrivileges()) {
    mergePrivileges(other.getPrivileges());
  }
  if (other.hasIsTemporary()) {
    setIsTemporary(other.getIsTemporary());
  }
  this.mergeUnknownFields(other.getUnknownFields());
  return this;
}
