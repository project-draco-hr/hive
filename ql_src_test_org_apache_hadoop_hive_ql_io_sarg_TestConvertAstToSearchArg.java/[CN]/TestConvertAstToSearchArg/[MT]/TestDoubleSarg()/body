{
  String serialAst="AQEAamF2YS51dGlsLkFycmF5TGlz9AECAQFvcmcuYXBhY2hlLmhhZG9vcC5oaXZlLnFsLnBsYW4uRXh" + "wck5vZGVDb2x1bW5EZXPjAQFkYuwAAAFiaWdvcuMBAm9yZy5hcGFjaGUuaGFkb29wLmhpdmUuc2VyZG" + "UyLnR5cGVpbmZvLlByaW1pdGl2ZVR5cGVJbmbvAQFkb3VibOUBA29yZy5hcGFjaGUuaGFkb29wLmhpd"+ "mUucWwucGxhbi5FeHByTm9kZUNvbnN0YW50RGVz4wEBAgcKQAGZmZmZmZoBBG9yZy5hcGFjaGUuaGFk"+ "b29wLmhpdmUucWwudWRmLmdlbmVyaWMuR2VuZXJpY1VERk9QRXF1YewBAAABgj0BRVFVQcwBBW9yZy5"+ "hcGFjaGUuaGFkb29wLmlvLkJvb2xlYW5Xcml0YWJs5QEAAAECAQFib29sZWHu";
  SearchArgument sarg=new ConvertAstToSearchArg(SerializationUtilities.deserializeExpression(serialAst)).buildSearchArgument();
  assertEquals("leaf-0",sarg.getExpression().toString());
  assertEquals(1,sarg.getLeaves().size());
  PredicateLeaf leaf=sarg.getLeaves().get(0);
  assertEquals(PredicateLeaf.Type.FLOAT,leaf.getType());
  assertEquals("(EQUALS dbl 2.2)",leaf.toString());
}
