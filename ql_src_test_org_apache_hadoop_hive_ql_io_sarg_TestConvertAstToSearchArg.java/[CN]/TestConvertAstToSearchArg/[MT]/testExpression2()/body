{
  String exprStr="<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n" + "<java version=\"1.6.0_31\" class=\"java.beans.XMLDecoder\"> \n" + " <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc\"> \n"+ "  <void property=\"children\"> \n"+ "   <object class=\"java.util.ArrayList\"> \n"+ "    <void method=\"add\"> \n"+ "     <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc\"> \n"+ "      <void property=\"children\"> \n"+ "       <object class=\"java.util.ArrayList\"> \n"+ "        <void method=\"add\"> \n"+ "         <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc\"> \n"+ "          <void property=\"children\"> \n"+ "           <object class=\"java.util.ArrayList\"> \n"+ "            <void method=\"add\"> \n"+ "             <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc\"> \n"+ "              <void property=\"children\"> \n"+ "               <object class=\"java.util.ArrayList\"> \n"+ "                <void method=\"add\"> \n"+ "                 <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeColumnDesc\"> \n"+ "                  <void property=\"column\"> \n"+ "                   <string>first_name</string> \n"+ "                  </void> \n"+ "                  <void property=\"tabAlias\"> \n"+ "                   <string>orc_people</string> \n"+ "                  </void> \n"+ "                  <void property=\"typeInfo\"> \n"+ "                   <object id=\"PrimitiveTypeInfo0\" class=\"org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo\"> \n"+ "                    <void property=\"typeName\"> \n"+ "                     <string>string</string> \n"+ "                    </void> \n"+ "                   </object> \n"+ "                  </void> \n"+ "                 </object> \n"+ "                </void> \n"+ "               </object> \n"+ "              </void> \n"+ "              <void property=\"genericUDF\"> \n"+ "               <object class=\"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPNull\"/> \n"+ "              </void> \n"+ "              <void property=\"typeInfo\"> \n"+ "               <object id=\"PrimitiveTypeInfo1\" class=\"org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo\"> \n"+ "                <void property=\"typeName\"> \n"+ "                 <string>boolean</string> \n"+ "                </void> \n"+ "               </object> \n"+ "              </void> \n"+ "             </object> \n"+ "            </void> \n"+ "            <void method=\"add\"> \n"+ "             <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc\"> \n"+ "              <void property=\"children\"> \n"+ "               <object class=\"java.util.ArrayList\"> \n"+ "                <void method=\"add\"> \n"+ "                 <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeColumnDesc\"> \n"+ "                  <void property=\"column\"> \n"+ "                   <string>first_name</string> \n"+ "                  </void> \n"+ "                  <void property=\"tabAlias\"> \n"+ "                   <string>orc_people</string> \n"+ "                  </void> \n"+ "                  <void property=\"typeInfo\"> \n"+ "                   <object idref=\"PrimitiveTypeInfo0\"/> \n"+ "                  </void> \n"+ "                 </object> \n"+ "                </void> \n"+ "                <void method=\"add\"> \n"+ "                 <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeConstantDesc\"> \n"+ "                  <void property=\"typeInfo\"> \n"+ "                   <object idref=\"PrimitiveTypeInfo0\"/> \n"+ "                  </void> \n"+ "                  <void property=\"value\"> \n"+ "                   <string>sue</string> \n"+ "                  </void> \n"+ "                 </object> \n"+ "                </void> \n"+ "               </object> \n"+ "              </void> \n"+ "              <void property=\"genericUDF\"> \n"+ "               <object class=\"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPNotEqual\"/> \n"+ "              </void> \n"+ "              <void property=\"typeInfo\"> \n"+ "               <object idref=\"PrimitiveTypeInfo1\"/> \n"+ "              </void> \n"+ "             </object> \n"+ "            </void> \n"+ "           </object> \n"+ "          </void> \n"+ "          <void property=\"genericUDF\"> \n"+ "           <object class=\"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPOr\"/> \n"+ "          </void> \n"+ "          <void property=\"typeInfo\"> \n"+ "           <object idref=\"PrimitiveTypeInfo1\"/> \n"+ "          </void> \n"+ "         </object> \n"+ "        </void> \n"+ "        <void method=\"add\"> \n"+ "         <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc\"> \n"+ "          <void property=\"children\"> \n"+ "           <object class=\"java.util.ArrayList\"> \n"+ "            <void method=\"add\"> \n"+ "             <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeColumnDesc\"> \n"+ "              <void property=\"column\"> \n"+ "               <string>id</string> \n"+ "              </void> \n"+ "              <void property=\"tabAlias\"> \n"+ "               <string>orc_people</string> \n"+ "              </void> \n"+ "              <void property=\"typeInfo\"> \n"+ "               <object id=\"PrimitiveTypeInfo2\" class=\"org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo\"> \n"+ "                <void property=\"typeName\"> \n"+ "                 <string>int</string> \n"+ "                </void> \n"+ "               </object> \n"+ "              </void> \n"+ "             </object> \n"+ "            </void> \n"+ "            <void method=\"add\"> \n"+ "             <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeConstantDesc\"> \n"+ "              <void property=\"typeInfo\"> \n"+ "               <object idref=\"PrimitiveTypeInfo2\"/> \n"+ "              </void> \n"+ "              <void property=\"value\"> \n"+ "               <int>12</int> \n"+ "              </void> \n"+ "             </object> \n"+ "            </void> \n"+ "           </object> \n"+ "          </void> \n"+ "          <void property=\"genericUDF\"> \n"+ "           <object class=\"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrGreaterThan\"/> \n"+ "          </void> \n"+ "          <void property=\"typeInfo\"> \n"+ "           <object idref=\"PrimitiveTypeInfo1\"/> \n"+ "          </void> \n"+ "         </object> \n"+ "        </void> \n"+ "       </object> \n"+ "      </void> \n"+ "      <void property=\"genericUDF\"> \n"+ "       <object class=\"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPOr\"/> \n"+ "      </void> \n"+ "      <void property=\"typeInfo\"> \n"+ "       <object idref=\"PrimitiveTypeInfo1\"/> \n"+ "      </void> \n"+ "     </object> \n"+ "    </void> \n"+ "    <void method=\"add\"> \n"+ "     <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc\"> \n"+ "      <void property=\"children\"> \n"+ "       <object class=\"java.util.ArrayList\"> \n"+ "        <void method=\"add\"> \n"+ "         <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeColumnDesc\"> \n"+ "          <void property=\"column\"> \n"+ "           <string>id</string> \n"+ "          </void> \n"+ "          <void property=\"tabAlias\"> \n"+ "           <string>orc_people</string> \n"+ "          </void> \n"+ "          <void property=\"typeInfo\"> \n"+ "           <object idref=\"PrimitiveTypeInfo2\"/> \n"+ "          </void> \n"+ "         </object> \n"+ "        </void> \n"+ "        <void method=\"add\"> \n"+ "         <object class=\"org.apache.hadoop.hive.ql.plan.ExprNodeConstantDesc\"> \n"+ "          <void property=\"typeInfo\"> \n"+ "           <object idref=\"PrimitiveTypeInfo2\"/> \n"+ "          </void> \n"+ "          <void property=\"value\"> \n"+ "           <int>4</int> \n"+ "          </void> \n"+ "         </object> \n"+ "        </void> \n"+ "       </object> \n"+ "      </void> \n"+ "      <void property=\"genericUDF\"> \n"+ "       <object class=\"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrLessThan\"/> \n"+ "      </void> \n"+ "      <void property=\"typeInfo\"> \n"+ "       <object idref=\"PrimitiveTypeInfo1\"/> \n"+ "      </void> \n"+ "     </object> \n"+ "    </void> \n"+ "   </object> \n"+ "  </void> \n"+ "  <void property=\"genericUDF\"> \n"+ "   <object class=\"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPOr\"/> \n"+ "  </void> \n"+ "  <void property=\"typeInfo\"> \n"+ "   <object idref=\"PrimitiveTypeInfo1\"/> \n"+ "  </void> \n"+ " </object> \n"+ "</java> \n";
  SearchArgumentImpl sarg=(SearchArgumentImpl)ConvertAstToSearchArg.create(getFuncDesc(exprStr));
  List<PredicateLeaf> leaves=sarg.getLeaves();
  assertEquals(4,leaves.size());
  String[] conditions=new String[]{"eq(first_name, null)","not(eq(first_name, Binary{\"sue\"}))","not(lt(id, 12))","lteq(id, 4)"};
  FilterPredicate p=ParquetRecordReaderWrapper.toFilterPredicate(sarg);
  String expected=String.format("or(or(or(%1$s, %2$s), %3$s), %4$s)",conditions);
  assertEquals(expected,p.toString());
  PredicateLeaf leaf=leaves.get(0);
  assertEquals(PredicateLeaf.Type.STRING,leaf.getType());
  assertEquals(PredicateLeaf.Operator.IS_NULL,leaf.getOperator());
  assertEquals("first_name",leaf.getColumnName());
  assertEquals(null,leaf.getLiteral());
  assertEquals(null,leaf.getLiteralList());
  leaf=leaves.get(1);
  assertEquals(PredicateLeaf.Type.STRING,leaf.getType());
  assertEquals(PredicateLeaf.Operator.EQUALS,leaf.getOperator());
  assertEquals("first_name",leaf.getColumnName());
  assertEquals("sue",leaf.getLiteral());
  leaf=leaves.get(2);
  assertEquals(PredicateLeaf.Type.INTEGER,leaf.getType());
  assertEquals(PredicateLeaf.Operator.LESS_THAN,leaf.getOperator());
  assertEquals("id",leaf.getColumnName());
  assertEquals(12,leaf.getLiteral());
  leaf=leaves.get(3);
  assertEquals(PredicateLeaf.Type.INTEGER,leaf.getType());
  assertEquals(PredicateLeaf.Operator.LESS_THAN_EQUALS,leaf.getOperator());
  assertEquals("id",leaf.getColumnName());
  assertEquals(4,leaf.getLiteral());
  assertEquals("(or leaf-0 (not leaf-1) (not leaf-2) leaf-3)",sarg.getExpression().toString());
  assertNoSharedNodes(sarg.getExpression(),Sets.<ExpressionTree>newIdentityHashSet());
  assertEquals(TruthValue.NO,sarg.evaluate(values(TruthValue.NO,TruthValue.YES,TruthValue.YES,TruthValue.NO)));
  assertEquals(TruthValue.YES,sarg.evaluate(values(TruthValue.YES,TruthValue.YES,TruthValue.YES,TruthValue.NO)));
  assertEquals(TruthValue.YES,sarg.evaluate(values(TruthValue.NO,TruthValue.NO,TruthValue.YES,TruthValue.NO)));
  assertEquals(TruthValue.YES,sarg.evaluate(values(TruthValue.NO,TruthValue.YES,TruthValue.NO,TruthValue.NO)));
  assertEquals(TruthValue.YES,sarg.evaluate(values(TruthValue.NO,TruthValue.YES,TruthValue.YES,TruthValue.YES)));
  assertEquals(TruthValue.NULL,sarg.evaluate(values(TruthValue.NULL,TruthValue.YES,TruthValue.YES,TruthValue.NO)));
  assertEquals(TruthValue.NULL,sarg.evaluate(values(TruthValue.NO,TruthValue.NULL,TruthValue.YES,TruthValue.NO)));
  assertEquals(TruthValue.NULL,sarg.evaluate(values(TruthValue.NO,TruthValue.YES,TruthValue.NULL,TruthValue.NO)));
  assertEquals(TruthValue.NULL,sarg.evaluate(values(TruthValue.NO,TruthValue.YES,TruthValue.YES,TruthValue.NULL)));
  assertEquals(TruthValue.YES_NO,sarg.evaluate(values(TruthValue.NO,TruthValue.YES_NO,TruthValue.YES,TruthValue.YES_NO)));
  assertEquals(TruthValue.NO_NULL,sarg.evaluate(values(TruthValue.NO,TruthValue.YES_NULL,TruthValue.YES,TruthValue.NO_NULL)));
  assertEquals(TruthValue.YES_NULL,sarg.evaluate(values(TruthValue.YES_NULL,TruthValue.YES_NO_NULL,TruthValue.YES,TruthValue.NULL)));
  assertEquals(TruthValue.YES_NO_NULL,sarg.evaluate(values(TruthValue.NO_NULL,TruthValue.YES_NO_NULL,TruthValue.YES,TruthValue.NO)));
}
