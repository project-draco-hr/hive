{
  if (arguments.length != 2) {
    throw new UDFArgumentLengthException("Encode() requires exactly two arguments");
  }
  if (arguments[0].getCategory() != Category.PRIMITIVE || ((PrimitiveObjectInspector)arguments[0]).getPrimitiveCategory() != PrimitiveCategory.STRING) {
    throw new UDFArgumentTypeException(0,"The first argument to Encode() must be a string");
  }
  stringOI=(StringObjectInspector)arguments[0];
  if (arguments[1].getCategory() != Category.PRIMITIVE || ((PrimitiveObjectInspector)arguments[1]).getPrimitiveCategory() != PrimitiveCategory.STRING) {
    throw new UDFArgumentTypeException(1,"The second argument to Encode() must be a string");
  }
  charsetOI=(StringObjectInspector)arguments[1];
  StringObjectInspector charSetOI=(StringObjectInspector)arguments[1];
  if (charSetOI instanceof ConstantObjectInspector) {
    String charSetName=((Text)((ConstantObjectInspector)charSetOI).getWritableConstantValue()).toString();
    encoder=Charset.forName(charSetName).newEncoder().onMalformedInput(CodingErrorAction.REPORT).onUnmappableCharacter(CodingErrorAction.REPORT);
  }
  result=new BytesWritable();
  return (ObjectInspector)PrimitiveObjectInspectorFactory.writableBinaryObjectInspector;
}
