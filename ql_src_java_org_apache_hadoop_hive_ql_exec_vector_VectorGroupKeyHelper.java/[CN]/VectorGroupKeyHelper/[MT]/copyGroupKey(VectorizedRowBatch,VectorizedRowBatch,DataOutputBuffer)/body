{
  for (int i=0; i < longIndices.length; ++i) {
    int keyIndex=longIndices[i];
    LongColumnVector inputColumnVector=(LongColumnVector)inputBatch.cols[keyIndex];
    LongColumnVector outputColumnVector=(LongColumnVector)outputBatch.cols[keyIndex];
    if (inputColumnVector.noNulls || !inputColumnVector.isNull[0]) {
      outputColumnVector.vector[outputBatch.size]=inputColumnVector.vector[0];
    }
 else {
      outputColumnVector.noNulls=false;
      outputColumnVector.isNull[outputBatch.size]=true;
    }
  }
  for (int i=0; i < doubleIndices.length; ++i) {
    int keyIndex=doubleIndices[i];
    DoubleColumnVector inputColumnVector=(DoubleColumnVector)inputBatch.cols[keyIndex];
    DoubleColumnVector outputColumnVector=(DoubleColumnVector)outputBatch.cols[keyIndex];
    if (inputColumnVector.noNulls || !inputColumnVector.isNull[0]) {
      outputColumnVector.vector[outputBatch.size]=inputColumnVector.vector[0];
    }
 else {
      outputColumnVector.noNulls=false;
      outputColumnVector.isNull[outputBatch.size]=true;
    }
  }
  for (int i=0; i < stringIndices.length; ++i) {
    int keyIndex=stringIndices[i];
    BytesColumnVector inputColumnVector=(BytesColumnVector)inputBatch.cols[keyIndex];
    BytesColumnVector outputColumnVector=(BytesColumnVector)outputBatch.cols[keyIndex];
    if (inputColumnVector.noNulls || !inputColumnVector.isNull[0]) {
      int start=buffer.getLength();
      int length=inputColumnVector.length[0];
      try {
        buffer.write(inputColumnVector.vector[0],inputColumnVector.start[0],length);
      }
 catch (      IOException ioe) {
        throw new IllegalStateException("bad write",ioe);
      }
      outputColumnVector.setRef(outputBatch.size,buffer.getData(),start,length);
    }
 else {
      outputColumnVector.noNulls=false;
      outputColumnVector.isNull[outputBatch.size]=true;
    }
  }
  for (int i=0; i < decimalIndices.length; ++i) {
    int keyIndex=decimalIndices[i];
    DecimalColumnVector inputColumnVector=(DecimalColumnVector)inputBatch.cols[keyIndex];
    DecimalColumnVector outputColumnVector=(DecimalColumnVector)outputBatch.cols[keyIndex];
    if (inputColumnVector.noNulls || !inputColumnVector.isNull[0]) {
      outputColumnVector.set(outputBatch.size,inputColumnVector.vector[0]);
    }
 else {
      outputColumnVector.noNulls=false;
      outputColumnVector.isNull[outputBatch.size]=true;
    }
  }
  for (int i=0; i < timestampIndices.length; ++i) {
    int keyIndex=timestampIndices[i];
    TimestampColumnVector inputColumnVector=(TimestampColumnVector)inputBatch.cols[keyIndex];
    TimestampColumnVector outputColumnVector=(TimestampColumnVector)outputBatch.cols[keyIndex];
    if (inputColumnVector.noNulls || !inputColumnVector.isNull[0]) {
      outputColumnVector.setElement(outputBatch.size,0,inputColumnVector);
    }
 else {
      outputColumnVector.noNulls=false;
      outputColumnVector.isNull[outputBatch.size]=true;
    }
  }
  for (int i=0; i < intervalDayTimeIndices.length; ++i) {
    int keyIndex=intervalDayTimeIndices[i];
    IntervalDayTimeColumnVector inputColumnVector=(IntervalDayTimeColumnVector)inputBatch.cols[keyIndex];
    IntervalDayTimeColumnVector outputColumnVector=(IntervalDayTimeColumnVector)outputBatch.cols[keyIndex];
    if (inputColumnVector.noNulls || !inputColumnVector.isNull[0]) {
      outputColumnVector.setElement(outputBatch.size,0,inputColumnVector);
    }
 else {
      outputColumnVector.noNulls=false;
      outputColumnVector.isNull[outputBatch.size]=true;
    }
  }
}
