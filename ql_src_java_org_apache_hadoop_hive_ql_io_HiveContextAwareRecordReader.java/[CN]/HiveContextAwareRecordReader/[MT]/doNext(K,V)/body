{
  if (this.isSorted) {
    if (this.getIOContext().shouldEndBinarySearch() || (!this.getIOContext().useSorted() && this.wasUsingSortedSearch)) {
      beginLinearSearch();
      this.wasUsingSortedSearch=false;
      this.getIOContext().setEndBinarySearch(false);
    }
    if (this.getIOContext().useSorted()) {
      if (this.genericUDFClassName == null && this.getIOContext().getGenericUDFClassName() != null) {
        setGenericUDFClassName(this.getIOContext().getGenericUDFClassName());
      }
      if (this.getIOContext().isBinarySearching()) {
        if (this.getIOContext().getComparison() != null) {
switch (this.getIOContext().getComparison()) {
case GREATER:
case EQUAL:
            rangeEnd=previousPosition;
          break;
case LESS:
        rangeStart=previousPosition;
      break;
default :
    break;
}
}
long position=(rangeStart + rangeEnd) / 2;
sync(position);
long newPosition=getSyncedPosition();
if (newPosition == previousPosition || newPosition >= splitEnd) {
this.getIOContext().setIsBinarySearching(false);
sync(rangeStart);
}
previousPosition=newPosition;
}
 else if (foundAllTargets()) {
return false;
}
}
}
try {
return recordReader.next(key,value);
}
 catch (Exception e) {
return HiveIOExceptionHandlerUtil.handleRecordReaderNextException(e,jobConf);
}
}
