{
  if (this.isSorted) {
    if (this.getIOContext().shouldEndBinarySearch() || (!this.getIOContext().useSorted() && this.wasUsingSortedSearch)) {
      beginLinearSearch();
      this.wasUsingSortedSearch=false;
      this.getIOContext().setEndBinarySearch(false);
    }
    if (this.getIOContext().useSorted()) {
      if (this.genericUDFClassName == null && this.getIOContext().getGenericUDFClassName() != null) {
        setGenericUDFClassName(this.getIOContext().getGenericUDFClassName());
      }
      if (this.getIOContext().isBinarySearching()) {
        if (this.getIOContext().getComparison() != null) {
switch (this.getIOContext().getComparison()) {
case GREATER:
case EQUAL:
            rangeEnd=previousPosition;
          break;
case LESS:
        rangeStart=previousPosition;
      break;
default :
    break;
}
}
long position=(rangeStart + rangeEnd) / 2;
sync(position);
long newPosition=getSyncedPosition();
if (newPosition == previousPosition || newPosition >= splitEnd) {
this.getIOContext().setBinarySearching(false);
sync(rangeStart);
}
previousPosition=newPosition;
}
 else if (foundAllTargets()) {
return false;
}
}
}
try {
if (this.ioCxtRef.getCurrentBlockStart() == 0) {
Path filePath=this.ioCxtRef.getInputPath();
PartitionDesc part=null;
try {
if (pathToPartitionInfo == null) {
pathToPartitionInfo=Utilities.getMapWork(jobConf).getPathToPartitionInfo();
}
part=HiveFileFormatUtils.getPartitionDescFromPathRecursively(pathToPartitionInfo,filePath,IOPrepareCache.get().getPartitionDescMap());
}
 catch (AssertionError ae) {
LOG.info("Cannot get partition description from " + this.ioCxtRef.getInputPath() + "because "+ ae.getMessage());
part=null;
}
catch (Exception e) {
LOG.info("Cannot get partition description from " + this.ioCxtRef.getInputPath() + "because "+ e.getMessage());
part=null;
}
TableDesc table=(part == null) ? null : part.getTableDesc();
if (table != null) {
headerCount=Utilities.getHeaderCount(table);
footerCount=Utilities.getFooterCount(table,jobConf);
}
if (!Utilities.skipHeader(recordReader,headerCount,(WritableComparable)key,(Writable)value)) {
return false;
}
if (footerCount > 0) {
footerBuffer=new FooterBuffer();
if (!footerBuffer.initializeBuffer(jobConf,recordReader,footerCount,(WritableComparable)key,(Writable)value)) {
return false;
}
}
}
if (footerBuffer == null) {
return recordReader.next(key,value);
}
 else {
return footerBuffer.updateBuffer(jobConf,recordReader,(WritableComparable)key,(Writable)value);
}
}
 catch (Exception e) {
return HiveIOExceptionHandlerUtil.handleRecordReaderNextException(e,jobConf);
}
}
