{
  HiveSemanticAnalyzerHookContextImpl ctx=(HiveSemanticAnalyzerHookContextImpl)context;
  HiveConf conf=(HiveConf)ctx.getConf();
  Set<String> externalLocations=new HashSet<String>();
  for (  ReadEntity input : ctx.getInputs()) {
    if (input.getTable().getTableType() == TableType.EXTERNAL_TABLE) {
      String location=null;
      try {
        location=input.getLocation().toString();
      }
 catch (      Exception e) {
        throw new SemanticException("GetLocation failed",e);
      }
      if (location.contains("/user/facebook/warehouse/") && (!input.getTable().isPartitioned() || input.getType() != ReadEntity.Type.TABLE)) {
        externalLocations.add(location);
      }
    }
  }
  if (!externalLocations.isEmpty()) {
    String sql="SELECT IF(p1.part_name IS NOT NULL, d1.name, d2.name), " + "       IF(p1.part_name IS NOT NULL, t1.tbl_name, t2.tbl_name), " + "       p1.part_name "+ "FROM SDS s LEFT JOIN PARTITIONS p1 ON s.sd_id = p1.sd_id "+ "LEFT JOIN TBLS t1 ON t1.tbl_id = p1.tbl_id "+ "LEFT JOIN DBS d1 ON t1.db_id = d1.db_id "+ "LEFT JOIN TBLS t2 ON t2.sd_id = s.sd_id "+ "LEFT JOIN DBS d2 ON d2.db_id = t2.db_id "+ "LEFT JOIN PARTITION_KEYS k on t2.tbl_id = k.tbl_id "+ "WHERE ((p1.part_name IS NOT NULL AND t1.tbl_type = 'MANAGED_TABLE') OR "+ "       (p1.part_name IS NULL AND t2.tbl_type = 'MANAGED_TABLE' AND"+ "        k.tbl_id IS NULL)) AND (";
    List<Object> sqlParams=new ArrayList<Object>();
    boolean firstLocation=true;
    for (    String location : externalLocations) {
      if (!firstLocation) {
        sql+="OR ";
      }
 else {
        firstLocation=false;
      }
      sql+="s.location LIKE ? ";
      sql+="OR s.location = ? ";
      sqlParams.add(location + "/%");
      sqlParams.add(location);
    }
    sql+=");";
    ConnectionUrlFactory metastoreDbUrlFactory=HookUtils.getUrlFactory(conf,FBHiveConf.CONNECTION_FACTORY,FBHiveConf.METASTORE_CONNECTION_FACTORY,FBHiveConf.METASTORE_MYSQL_TIER_VAR_NAME,FBHiveConf.METASTORE_HOST_DATABASE_VAR_NAME);
    List<List<Object>> results=null;
    try {
      results=HookUtils.runInsertSelect(conf,metastoreDbUrlFactory,sql,sqlParams,false,SQL_NUM_RETRIES,RETRY_MAX_INTERVAL_SEC,false);
    }
 catch (    Exception e) {
      throw new SemanticException("SQL query to retrieve names of managed tables/partitions " + "pointed to by externals failed",e);
    }
    Map<String[],List<String>> tableToPartitions=new HashMap<String[],List<String>>();
    for (    List<Object> result : results) {
      String[] dbTable={(String)result.get(0),(String)result.get(1)};
      if (!tableToPartitions.containsKey(dbTable)) {
        tableToPartitions.put(dbTable,new ArrayList<String>());
      }
      String partitionName=(String)result.get(2);
      if (partitionName != null) {
        tableToPartitions.get(dbTable).add(partitionName);
      }
    }
    try {
      updateInputs(ctx.getInputs(),tableToPartitions,ctx.getHive());
    }
 catch (    HiveException e) {
      throw new SemanticException("Failed to retrieve managed Table(s)/Partition(s) mapped to " + "by externals from the metastore.",e);
    }
  }
}
