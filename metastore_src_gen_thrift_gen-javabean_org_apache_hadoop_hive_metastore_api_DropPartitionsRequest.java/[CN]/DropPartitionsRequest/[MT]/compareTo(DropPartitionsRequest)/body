{
  if (!getClass().equals(other.getClass())) {
    return getClass().getName().compareTo(other.getClass().getName());
  }
  int lastComparison=0;
  DropPartitionsRequest typedOther=(DropPartitionsRequest)other;
  lastComparison=Boolean.valueOf(isSetDbName()).compareTo(typedOther.isSetDbName());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetDbName()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.dbName,typedOther.dbName);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetTblName()).compareTo(typedOther.isSetTblName());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetTblName()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.tblName,typedOther.tblName);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetParts()).compareTo(typedOther.isSetParts());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetParts()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.parts,typedOther.parts);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetDeleteData()).compareTo(typedOther.isSetDeleteData());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetDeleteData()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.deleteData,typedOther.deleteData);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetIfExists()).compareTo(typedOther.isSetIfExists());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetIfExists()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.ifExists,typedOther.ifExists);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetIgnoreProtection()).compareTo(typedOther.isSetIgnoreProtection());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetIgnoreProtection()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.ignoreProtection,typedOther.ignoreProtection);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetEnvironmentContext()).compareTo(typedOther.isSetEnvironmentContext());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetEnvironmentContext()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.environmentContext,typedOther.environmentContext);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetNeedResult()).compareTo(typedOther.isSetNeedResult());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetNeedResult()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.needResult,typedOther.needResult);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  return 0;
}
