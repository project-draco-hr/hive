{
  ObjectInspector inspector;
synchronized (TestOrcSerDeStats.class) {
    inspector=ObjectInspectorFactory.getReflectionObjectInspector(BigRow.class,ObjectInspectorFactory.ObjectInspectorOptions.JAVA);
  }
  Writer writer=OrcFile.createWriter(testFilePath,OrcFile.writerOptions(conf).inspector(inspector).stripeSize(100000).bufferSize(10000));
  writer.addRow(new BigRow(false,(byte)1,(short)1024,65536,Long.MAX_VALUE,(float)1.0,-15.0,bytes(0,1,2,3,4),"hi",new MiddleStruct(inner(1,"bye"),inner(2,"sigh")),list(inner(3,"good"),inner(4,"bad")),map(),Timestamp.valueOf("2000-03-12 15:00:00"),HiveDecimal.create("12345678.6547456")));
  writer.addRow(new BigRow(true,(byte)100,(short)2048,65536,Long.MAX_VALUE,(float)2.0,-5.0,bytes(),"bye",new MiddleStruct(inner(1,"bye"),inner(2,"sigh")),list(inner(100000000,"cat"),inner(-100000,"in"),inner(1234,"hat")),map(inner(5,"chani"),inner(1,"mauddib")),Timestamp.valueOf("2000-03-11 15:00:00"),HiveDecimal.create("12345678.6547452")));
  writer.close();
  long rowCount=writer.getNumberOfRows();
  long rawDataSize=writer.getRawDataSize();
  assertEquals(2,rowCount);
  assertEquals(1740,rawDataSize);
  Reader reader=OrcFile.createReader(fs,testFilePath);
  assertEquals(2,reader.getNumberOfRows());
  assertEquals(1740,reader.getRawDataSize());
  assertEquals(8,reader.getRawDataSizeOfColumns(Lists.newArrayList("boolean1")));
  assertEquals(8,reader.getRawDataSizeOfColumns(Lists.newArrayList("byte1")));
  assertEquals(8,reader.getRawDataSizeOfColumns(Lists.newArrayList("short1")));
  assertEquals(8,reader.getRawDataSizeOfColumns(Lists.newArrayList("int1")));
  assertEquals(16,reader.getRawDataSizeOfColumns(Lists.newArrayList("long1")));
  assertEquals(8,reader.getRawDataSizeOfColumns(Lists.newArrayList("float1")));
  assertEquals(16,reader.getRawDataSizeOfColumns(Lists.newArrayList("double1")));
  assertEquals(5,reader.getRawDataSizeOfColumns(Lists.newArrayList("bytes1")));
  assertEquals(172,reader.getRawDataSizeOfColumns(Lists.newArrayList("string1")));
  assertEquals(455,reader.getRawDataSizeOfColumns(Lists.newArrayList("list")));
  assertEquals(368,reader.getRawDataSizeOfColumns(Lists.newArrayList("map")));
  assertEquals(364,reader.getRawDataSizeOfColumns(Lists.newArrayList("middle")));
  assertEquals(80,reader.getRawDataSizeOfColumns(Lists.newArrayList("ts")));
  assertEquals(224,reader.getRawDataSizeOfColumns(Lists.newArrayList("decimal1")));
  assertEquals(88,reader.getRawDataSizeOfColumns(Lists.newArrayList("ts","int1")));
  assertEquals(1195,reader.getRawDataSizeOfColumns(Lists.newArrayList("middle","list","map","float1")));
  assertEquals(185,reader.getRawDataSizeOfColumns(Lists.newArrayList("bytes1","byte1","string1")));
  assertEquals(rawDataSize,reader.getRawDataSizeOfColumns(Lists.newArrayList("boolean1","byte1","short1","int1","long1","float1","double1","bytes1","string1","list","map","middle","ts","decimal1")));
  ColumnStatistics[] stats=reader.getStatistics();
  assertEquals(2,stats[1].getNumberOfValues());
  assertEquals(1,((BooleanColumnStatistics)stats[1]).getFalseCount());
  assertEquals(1,((BooleanColumnStatistics)stats[1]).getTrueCount());
  assertEquals("count: 2 true: 1",stats[1].toString());
  assertEquals(2048,((IntegerColumnStatistics)stats[3]).getMaximum());
  assertEquals(1024,((IntegerColumnStatistics)stats[3]).getMinimum());
  assertEquals(true,((IntegerColumnStatistics)stats[3]).isSumDefined());
  assertEquals(3072,((IntegerColumnStatistics)stats[3]).getSum());
  assertEquals("count: 2 min: 1024 max: 2048 sum: 3072",stats[3].toString());
  assertEquals(Long.MAX_VALUE,((IntegerColumnStatistics)stats[5]).getMaximum());
  assertEquals(Long.MAX_VALUE,((IntegerColumnStatistics)stats[5]).getMinimum());
  assertEquals(false,((IntegerColumnStatistics)stats[5]).isSumDefined());
  assertEquals("count: 2 min: 9223372036854775807 max: 9223372036854775807",stats[5].toString());
  assertEquals(-15.0,((DoubleColumnStatistics)stats[7]).getMinimum());
  assertEquals(-5.0,((DoubleColumnStatistics)stats[7]).getMaximum());
  assertEquals(-20.0,((DoubleColumnStatistics)stats[7]).getSum(),0.00001);
  assertEquals("count: 2 min: -15.0 max: -5.0 sum: -20.0",stats[7].toString());
  assertEquals("count: 2 min: bye max: hi sum: 5",stats[9].toString());
}
