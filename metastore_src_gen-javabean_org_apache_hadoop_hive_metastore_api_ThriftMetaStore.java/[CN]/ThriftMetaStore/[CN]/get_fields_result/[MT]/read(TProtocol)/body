{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 0:
      if (field.type == TType.LIST) {
{
          TList _list89=iprot.readListBegin();
          this.success=new ArrayList<FieldSchema>(_list89.size);
          for (int _i90=0; _i90 < _list89.size; ++_i90) {
            FieldSchema _elem91=new FieldSchema();
            _elem91=new FieldSchema();
            _elem91.read(iprot);
            this.success.add(_elem91);
          }
          iprot.readListEnd();
        }
        this.__isset.success=true;
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case -3:
  if (field.type == TType.STRUCT) {
    this.o1=new MetaException();
    this.o1.read(iprot);
    this.__isset.o1=true;
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case -4:
if (field.type == TType.STRUCT) {
this.o2=new UnknownTableException();
this.o2.read(iprot);
this.__isset.o2=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case -5:
if (field.type == TType.STRUCT) {
this.o3=new UnknownDBException();
this.o3.read(iprot);
this.__isset.o3=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
}
