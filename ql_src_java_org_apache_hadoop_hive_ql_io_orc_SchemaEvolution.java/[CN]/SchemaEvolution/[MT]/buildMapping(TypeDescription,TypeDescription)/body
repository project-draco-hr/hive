{
  if (included != null && !included[readerType.getId()]) {
    return;
  }
  boolean isOk=true;
  if (fileType.getCategory() == readerType.getCategory()) {
switch (readerType.getCategory()) {
case BOOLEAN:
case BYTE:
case SHORT:
case INT:
case LONG:
case DOUBLE:
case FLOAT:
case STRING:
case TIMESTAMP:
case BINARY:
case DATE:
      break;
case CHAR:
case VARCHAR:
    isOk=fileType.getMaxLength() == readerType.getMaxLength();
  break;
case DECIMAL:
break;
case UNION:
case MAP:
case LIST:
{
List<TypeDescription> fileChildren=fileType.getChildren();
List<TypeDescription> readerChildren=readerType.getChildren();
if (fileChildren.size() == readerChildren.size()) {
  for (int i=0; i < fileChildren.size(); ++i) {
    buildMapping(fileChildren.get(i),readerChildren.get(i));
  }
}
 else {
  isOk=false;
}
break;
}
case STRUCT:
{
List<TypeDescription> fileChildren=fileType.getChildren();
List<TypeDescription> readerChildren=readerType.getChildren();
int jointSize=Math.min(fileChildren.size(),readerChildren.size());
for (int i=0; i < jointSize; ++i) {
buildMapping(fileChildren.get(i),readerChildren.get(i));
}
break;
}
default :
throw new IllegalArgumentException("Unknown type " + readerType);
}
}
 else {
switch (fileType.getCategory()) {
case SHORT:
if (readerType.getCategory() != TypeDescription.Category.INT && readerType.getCategory() != TypeDescription.Category.LONG) {
isOk=false;
}
break;
case INT:
if (readerType.getCategory() != TypeDescription.Category.LONG) {
isOk=false;
}
break;
default :
isOk=false;
}
}
if (isOk) {
readerToFile.put(readerType,fileType);
}
 else {
throw new IOException("ORC does not support type conversion from " + fileType + " to "+ readerType);
}
}
