{
  UDFXPathUtil util=new UDFXPathUtil();
  Object result=util.eval("<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>","a/c[2]/text()",XPathConstants.STRING);
  assertEquals("c2",result);
  result=util.evalBoolean("<a><b>true</b><b>false</b><b>b3</b><c>c1</c><c>c2</c></a>","a/b[1]/text()");
  assertEquals(Boolean.TRUE,result);
  result=util.evalBoolean("<a><b>true</b><b>false</b><b>b3</b><c>c1</c><c>c2</c></a>","a/b[4]");
  assertEquals(Boolean.FALSE,result);
  result=util.evalString("<a><b>true</b><b>false</b><b>b3</b><c>c1</c><c>c2</c></a>","a/b[3]/text()");
  assertEquals("b3",result);
  result=util.evalString("<a><b>true</b><b>false</b><b>b3</b><c>c1</c><c>c2</c></a>","a/b[4]/text()");
  assertEquals("",result);
  result=util.evalString("<a><b>true</b><b k=\"foo\">FALSE</b><b>b3</b><c>c1</c><c>c2</c></a>","a/b[2]/@k");
  assertEquals("foo",result);
  result=util.evalNumber("<a><b>true</b><b>false</b><b>b3</b><c>c1</c><c>-77</c></a>","a/c[2]");
  assertEquals(-77.0d,result);
  result=util.evalNumber("<a><b>true</b><b k=\"foo\">FALSE</b><b>b3</b><c>c1</c><c>c2</c></a>","a/b[2]/@k");
  assertEquals(Double.NaN,result);
  result=util.evalNode("<a><b>true</b><b>false</b><b>b3</b><c>c1</c><c>-77</c></a>","a/c[2]");
  assertNotNull(result);
  assertTrue(result instanceof Node);
  result=util.evalNodeList("<a><b>true</b><b>false</b><b>b3</b><c>c1</c><c>-77</c></a>","a/*");
  assertNotNull(result);
  assertTrue(result instanceof NodeList);
  assertEquals(5,((NodeList)result).getLength());
}
