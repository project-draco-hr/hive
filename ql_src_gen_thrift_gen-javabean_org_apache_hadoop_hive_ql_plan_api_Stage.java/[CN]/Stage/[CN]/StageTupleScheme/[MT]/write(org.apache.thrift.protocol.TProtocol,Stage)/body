{
  TTupleProtocol oprot=(TTupleProtocol)prot;
  BitSet optionals=new BitSet();
  if (struct.isSetStageId()) {
    optionals.set(0);
  }
  if (struct.isSetStageType()) {
    optionals.set(1);
  }
  if (struct.isSetStageAttributes()) {
    optionals.set(2);
  }
  if (struct.isSetStageCounters()) {
    optionals.set(3);
  }
  if (struct.isSetTaskList()) {
    optionals.set(4);
  }
  if (struct.isSetDone()) {
    optionals.set(5);
  }
  if (struct.isSetStarted()) {
    optionals.set(6);
  }
  oprot.writeBitSet(optionals,7);
  if (struct.isSetStageId()) {
    oprot.writeString(struct.stageId);
  }
  if (struct.isSetStageType()) {
    oprot.writeI32(struct.stageType.getValue());
  }
  if (struct.isSetStageAttributes()) {
{
      oprot.writeI32(struct.stageAttributes.size());
      for (      Map.Entry<String,String> _iter86 : struct.stageAttributes.entrySet()) {
        oprot.writeString(_iter86.getKey());
        oprot.writeString(_iter86.getValue());
      }
    }
  }
  if (struct.isSetStageCounters()) {
{
      oprot.writeI32(struct.stageCounters.size());
      for (      Map.Entry<String,Long> _iter87 : struct.stageCounters.entrySet()) {
        oprot.writeString(_iter87.getKey());
        oprot.writeI64(_iter87.getValue());
      }
    }
  }
  if (struct.isSetTaskList()) {
{
      oprot.writeI32(struct.taskList.size());
      for (      Task _iter88 : struct.taskList) {
        _iter88.write(oprot);
      }
    }
  }
  if (struct.isSetDone()) {
    oprot.writeBool(struct.done);
  }
  if (struct.isSetStarted()) {
    oprot.writeBool(struct.started);
  }
}
