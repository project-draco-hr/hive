{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.stageId=iprot.readString();
        struct.setStageIdIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
    struct.stageType=StageType.findByValue(iprot.readI32());
    struct.setStageTypeIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map72=iprot.readMapBegin();
  struct.stageAttributes=new HashMap<String,String>(2 * _map72.size);
  for (int _i73=0; _i73 < _map72.size; ++_i73) {
    String _key74;
    String _val75;
    _key74=iprot.readString();
    _val75=iprot.readString();
    struct.stageAttributes.put(_key74,_val75);
  }
  iprot.readMapEnd();
}
struct.setStageAttributesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map76=iprot.readMapBegin();
struct.stageCounters=new HashMap<String,Long>(2 * _map76.size);
for (int _i77=0; _i77 < _map76.size; ++_i77) {
String _key78;
long _val79;
_key78=iprot.readString();
_val79=iprot.readI64();
struct.stageCounters.put(_key78,_val79);
}
iprot.readMapEnd();
}
struct.setStageCountersIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list80=iprot.readListBegin();
struct.taskList=new ArrayList<Task>(_list80.size);
for (int _i81=0; _i81 < _list80.size; ++_i81) {
Task _elem82;
_elem82=new Task();
_elem82.read(iprot);
struct.taskList.add(_elem82);
}
iprot.readListEnd();
}
struct.setTaskListIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
struct.done=iprot.readBool();
struct.setDoneIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 7:
if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
struct.started=iprot.readBool();
struct.setStartedIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
