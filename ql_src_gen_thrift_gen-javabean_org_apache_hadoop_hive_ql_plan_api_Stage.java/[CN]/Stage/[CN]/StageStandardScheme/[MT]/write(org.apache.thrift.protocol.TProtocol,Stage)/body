{
  struct.validate();
  oprot.writeStructBegin(STRUCT_DESC);
  if (struct.stageId != null) {
    oprot.writeFieldBegin(STAGE_ID_FIELD_DESC);
    oprot.writeString(struct.stageId);
    oprot.writeFieldEnd();
  }
  if (struct.stageType != null) {
    oprot.writeFieldBegin(STAGE_TYPE_FIELD_DESC);
    oprot.writeI32(struct.stageType.getValue());
    oprot.writeFieldEnd();
  }
  if (struct.stageAttributes != null) {
    oprot.writeFieldBegin(STAGE_ATTRIBUTES_FIELD_DESC);
{
      oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,struct.stageAttributes.size()));
      for (      Map.Entry<String,String> _iter83 : struct.stageAttributes.entrySet()) {
        oprot.writeString(_iter83.getKey());
        oprot.writeString(_iter83.getValue());
      }
      oprot.writeMapEnd();
    }
    oprot.writeFieldEnd();
  }
  if (struct.stageCounters != null) {
    oprot.writeFieldBegin(STAGE_COUNTERS_FIELD_DESC);
{
      oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.I64,struct.stageCounters.size()));
      for (      Map.Entry<String,Long> _iter84 : struct.stageCounters.entrySet()) {
        oprot.writeString(_iter84.getKey());
        oprot.writeI64(_iter84.getValue());
      }
      oprot.writeMapEnd();
    }
    oprot.writeFieldEnd();
  }
  if (struct.taskList != null) {
    oprot.writeFieldBegin(TASK_LIST_FIELD_DESC);
{
      oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,struct.taskList.size()));
      for (      Task _iter85 : struct.taskList) {
        _iter85.write(oprot);
      }
      oprot.writeListEnd();
    }
    oprot.writeFieldEnd();
  }
  oprot.writeFieldBegin(DONE_FIELD_DESC);
  oprot.writeBool(struct.done);
  oprot.writeFieldEnd();
  oprot.writeFieldBegin(STARTED_FIELD_DESC);
  oprot.writeBool(struct.started);
  oprot.writeFieldEnd();
  oprot.writeFieldStop();
  oprot.writeStructEnd();
}
