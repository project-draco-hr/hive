{
  Hashtable<String,Object> env=new Hashtable<String,Object>();
  env.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");
  env.put(Context.PROVIDER_URL,ldapURL);
  if (!hasDomain(user) && ldapDomain != null) {
    user=user + "@" + ldapDomain;
  }
  if (password == null || password.isEmpty() || password.getBytes()[0] == 0) {
    throw new AuthenticationException("Error validating LDAP user:" + " a null or blank password has been provided");
  }
  env.put(Context.SECURITY_AUTHENTICATION,"simple");
  env.put(Context.SECURITY_CREDENTIALS,password);
  String bindDN=null;
  DirContext ctx=null;
  String userDN=null;
  String userName=null;
  Exception ex=null;
  if (!isDN(user) && !hasDomain(user) && userBases.size() > 0) {
    ListIterator<String> listIter=userBases.listIterator();
    while (listIter.hasNext()) {
      try {
        bindDN=listIter.next().replaceAll("%s",user);
        env.put(Context.SECURITY_PRINCIPAL,bindDN);
        LOG.debug("Connecting using DN " + bindDN + " at url "+ ldapURL);
        ctx=new InitialDirContext(env);
        break;
      }
 catch (      NamingException e) {
        ex=e;
      }
    }
  }
 else {
    env.put(Context.SECURITY_PRINCIPAL,user);
    LOG.debug("Connecting using principal " + user + " at url "+ ldapURL);
    try {
      ctx=new InitialDirContext(env);
    }
 catch (    NamingException e) {
      ex=e;
    }
  }
  if (ctx == null) {
    LOG.debug("Could not connect to the LDAP Server:Authentication failed for " + user);
    throw new AuthenticationException("LDAP Authentication failed for user",ex);
  }
  LOG.debug("Connected using principal=" + user + " at url="+ ldapURL);
  try {
    if (isDN(user) || hasDomain(user)) {
      userName=extractName(user);
    }
 else {
      userName=user;
    }
    if (customQuery != null) {
      List<String> resultList=executeLDAPQuery(ctx,customQuery,baseDN);
      if (resultList != null) {
        for (        String matchedDN : resultList) {
          LOG.info("<queried user=" + matchedDN.split(",",2)[0].split("=",2)[1] + ",user="+ user+ ">");
          if (matchedDN.split(",",2)[0].split("=",2)[1].equalsIgnoreCase(user) || matchedDN.equalsIgnoreCase(user)) {
            LOG.info("Authentication succeeded based on result set from LDAP query");
            return;
          }
        }
      }
      LOG.info("Authentication failed based on result set from custom LDAP query");
      throw new AuthenticationException("Authentication failed: LDAP query " + "from property returned no data");
    }
 else     if (userBases.size() > 0) {
      if (isDN(user)) {
        userDN=findUserDNByDN(ctx,user);
      }
 else {
        if (userDN == null) {
          userDN=findUserDNByPattern(ctx,userName);
        }
        if (userDN == null) {
          userDN=findUserDNByName(ctx,userName);
        }
      }
      if (userDN == null) {
        throw new AuthenticationException("Authentication failed: User search failed");
      }
      if (userFilter.size() > 0) {
        LOG.info("Authenticating user " + user + " using user filter");
        if (userDN != null) {
          LOG.info("User filter partially satisfied");
        }
        boolean success=false;
        for (        String filteredUser : userFilter) {
          if (filteredUser.equalsIgnoreCase(userName)) {
            LOG.debug("User filter entirely satisfied");
            success=true;
            break;
          }
        }
        if (!success) {
          LOG.info("Authentication failed based on user membership");
          throw new AuthenticationException("Authentication failed: User not a member " + "of specified list");
        }
      }
      if (groupFilter.size() > 0) {
        LOG.debug("Authenticating user " + user + " using group membership");
        List<String> userGroups=getGroupsForUser(ctx,userDN);
        if (LOG.isDebugEnabled()) {
          LOG.debug("User member of :");
          prettyPrint(userGroups);
        }
        if (userGroups != null) {
          for (          String elem : userGroups) {
            String shortName=((elem.split(","))[0].split("="))[1];
            if (groupFilter.contains(shortName)) {
              LOG.info("Authentication succeeded based on group membership");
              return;
            }
          }
        }
        LOG.debug("Authentication failed: User is not a member of configured groups");
        throw new AuthenticationException("Authentication failed: User not a member of " + "listed groups");
      }
      LOG.info("Authentication succeeded using ldap user search");
      return;
    }
    LOG.info("Simple password authentication succeeded");
  }
 catch (  NamingException e) {
    throw new AuthenticationException("LDAP Authentication failed for user",e);
  }
 finally {
    try {
      if (ctx != null) {
        ctx.close();
      }
    }
 catch (    Exception e) {
      LOG.warn("Exception when closing LDAP context:" + e.getMessage());
    }
  }
}
