{
  Object ret=null;
  int retriesMade=0;
  TException caughtException=null;
  boolean allowReconnect=!method.isAnnotationPresent(NoReconnect.class);
  while (true) {
    try {
      reloginExpiringKeytabUser();
      if (allowReconnect) {
        if (retriesMade > 0 || hasConnectionLifeTimeReached(method)) {
          base.reconnect();
          lastConnectionTime=System.currentTimeMillis();
        }
      }
      if (metaCallTimeMap == null) {
        ret=method.invoke(base,args);
      }
 else {
        long startTime=System.currentTimeMillis();
        ret=method.invoke(base,args);
        long timeTaken=System.currentTimeMillis() - startTime;
        addMethodTime(method,timeTaken);
      }
      break;
    }
 catch (    UndeclaredThrowableException e) {
      throw e.getCause();
    }
catch (    InvocationTargetException e) {
      Throwable t=e.getCause();
      if (t instanceof TApplicationException) {
        TApplicationException tae=(TApplicationException)t;
switch (tae.getType()) {
case TApplicationException.UNSUPPORTED_CLIENT_TYPE:
case TApplicationException.UNKNOWN_METHOD:
case TApplicationException.WRONG_METHOD_NAME:
case TApplicationException.INVALID_PROTOCOL:
          throw t;
default :
        caughtException=tae;
    }
  }
 else   if ((t instanceof TProtocolException) || (t instanceof TTransportException)) {
    caughtException=(TException)t;
  }
 else   if ((t instanceof MetaException) && t.getMessage().matches("(?s).*(JDO[a-zA-Z]*|TProtocol|TTransport)Exception.*") && !t.getMessage().contains("java.sql.SQLIntegrityConstraintViolationException")) {
    caughtException=(MetaException)t;
  }
 else {
    throw t;
  }
}
catch (MetaException e) {
  if (e.getMessage().matches("(?s).*(IO|TTransport)Exception.*") && !e.getMessage().contains("java.sql.SQLIntegrityConstraintViolationException")) {
    caughtException=e;
  }
 else {
    throw e;
  }
}
if (retriesMade >= retryLimit) {
  throw caughtException;
}
retriesMade++;
LOG.warn("MetaStoreClient lost connection. Attempting to reconnect.",caughtException);
Thread.sleep(retryDelaySeconds * 1000);
}
return ret;
}
