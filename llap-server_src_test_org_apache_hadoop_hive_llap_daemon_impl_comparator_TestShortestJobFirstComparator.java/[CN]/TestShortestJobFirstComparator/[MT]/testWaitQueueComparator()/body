{
  TaskWrapper r1=createTaskWrapper(createSubmitWorkRequestProto(1,2,100),false,100000);
  TaskWrapper r2=createTaskWrapper(createSubmitWorkRequestProto(2,4,200),false,100000);
  TaskWrapper r3=createTaskWrapper(createSubmitWorkRequestProto(3,6,300),false,1000000);
  TaskWrapper r4=createTaskWrapper(createSubmitWorkRequestProto(4,8,400),false,1000000);
  TaskWrapper r5=createTaskWrapper(createSubmitWorkRequestProto(5,10,500),false,1000000);
  EvictingPriorityBlockingQueue<TaskWrapper> queue=new EvictingPriorityBlockingQueue<>(new ShortestJobFirstComparator(),4);
  assertNull(queue.offer(r1));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r2));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r3));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r4));
  assertEquals(r1,queue.peek());
  assertEquals(r5,queue.offer(r5));
  assertEquals(r1,queue.take());
  assertEquals(r2,queue.take());
  assertEquals(r3,queue.take());
  assertEquals(r4,queue.take());
  r1=createTaskWrapper(createSubmitWorkRequestProto(1,2,100),true,100000);
  r2=createTaskWrapper(createSubmitWorkRequestProto(2,4,200),true,100000);
  r3=createTaskWrapper(createSubmitWorkRequestProto(3,6,300),true,1000000);
  r4=createTaskWrapper(createSubmitWorkRequestProto(4,8,400),true,1000000);
  r5=createTaskWrapper(createSubmitWorkRequestProto(5,10,500),true,1000000);
  queue=new EvictingPriorityBlockingQueue(new ShortestJobFirstComparator(),4);
  assertNull(queue.offer(r1));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r2));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r3));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r4));
  assertEquals(r1,queue.peek());
  assertEquals(r5,queue.offer(r5));
  assertEquals(r1,queue.take());
  assertEquals(r2,queue.take());
  assertEquals(r3,queue.take());
  assertEquals(r4,queue.take());
  r1=createTaskWrapper(createSubmitWorkRequestProto(1,1,100),true,100000);
  r2=createTaskWrapper(createSubmitWorkRequestProto(2,1,200),false,100000);
  r3=createTaskWrapper(createSubmitWorkRequestProto(3,1,300),true,1000000);
  r4=createTaskWrapper(createSubmitWorkRequestProto(4,1,400),false,1000000);
  r5=createTaskWrapper(createSubmitWorkRequestProto(5,10,500),true,1000000);
  queue=new EvictingPriorityBlockingQueue(new ShortestJobFirstComparator(),4);
  assertNull(queue.offer(r1));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r2));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r3));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r4));
  assertEquals(r1,queue.peek());
  assertEquals(r4,queue.offer(r5));
  assertEquals(r1,queue.take());
  assertEquals(r3,queue.take());
  assertEquals(r5,queue.take());
  assertEquals(r2,queue.take());
  r1=createTaskWrapper(createSubmitWorkRequestProto(1,2,100),true,100000);
  r2=createTaskWrapper(createSubmitWorkRequestProto(2,4,200),false,100000);
  r3=createTaskWrapper(createSubmitWorkRequestProto(3,6,300),true,1000000);
  r4=createTaskWrapper(createSubmitWorkRequestProto(4,8,400),false,1000000);
  r5=createTaskWrapper(createSubmitWorkRequestProto(5,10,500),true,1000000);
  queue=new EvictingPriorityBlockingQueue(new ShortestJobFirstComparator(),4);
  assertNull(queue.offer(r1));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r2));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r3));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r4));
  assertEquals(r1,queue.peek());
  assertEquals(r4,queue.offer(r5));
  assertEquals(r1,queue.take());
  assertEquals(r3,queue.take());
  assertEquals(r5,queue.take());
  assertEquals(r2,queue.take());
  r1=createTaskWrapper(createSubmitWorkRequestProto(1,2,100),true,100000);
  r2=createTaskWrapper(createSubmitWorkRequestProto(2,4,200),false,100000);
  r3=createTaskWrapper(createSubmitWorkRequestProto(3,6,300),false,1000000);
  r4=createTaskWrapper(createSubmitWorkRequestProto(4,8,400),false,1000000);
  r5=createTaskWrapper(createSubmitWorkRequestProto(5,10,500),true,1000000);
  queue=new EvictingPriorityBlockingQueue(new ShortestJobFirstComparator(),4);
  assertNull(queue.offer(r1));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r2));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r3));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r4));
  assertEquals(r1,queue.peek());
  assertEquals(r4,queue.offer(r5));
  assertEquals(r1,queue.take());
  assertEquals(r5,queue.take());
  assertEquals(r2,queue.take());
  assertEquals(r3,queue.take());
  r1=createTaskWrapper(createSubmitWorkRequestProto(1,2,100),false,100000);
  r2=createTaskWrapper(createSubmitWorkRequestProto(2,4,200),true,100000);
  r3=createTaskWrapper(createSubmitWorkRequestProto(3,6,300),true,1000000);
  r4=createTaskWrapper(createSubmitWorkRequestProto(4,8,400),true,1000000);
  r5=createTaskWrapper(createSubmitWorkRequestProto(5,10,500),true,1000000);
  queue=new EvictingPriorityBlockingQueue(new ShortestJobFirstComparator(),4);
  assertNull(queue.offer(r1));
  assertEquals(r1,queue.peek());
  assertNull(queue.offer(r2));
  assertEquals(r2,queue.peek());
  assertNull(queue.offer(r3));
  assertEquals(r2,queue.peek());
  assertNull(queue.offer(r4));
  assertEquals(r2,queue.peek());
  assertEquals(r1,queue.offer(r5));
  assertEquals(r2,queue.take());
  assertEquals(r3,queue.take());
  assertEquals(r4,queue.take());
  assertEquals(r5,queue.take());
}
