{
  Preconditions.checkState(hasNext());
  if (!readBufferUsed) {
    try {
      if (input == null && output != null) {
        output.close();
        output=null;
        FileInputStream fis=null;
        try {
          fis=new FileInputStream(tmpFile);
          input=new Input(fis);
        }
  finally {
          if (input == null && fis != null) {
            fis.close();
          }
        }
      }
      if (input != null) {
        if (rowsOnDisk >= IN_MEMORY_NUM_ROWS) {
          rowsInReadBuffer=IN_MEMORY_NUM_ROWS;
        }
 else {
          rowsInReadBuffer=rowsOnDisk;
        }
        for (int i=0; i < rowsInReadBuffer; i++) {
          readBuffer[i]=(ROW)kryo.readClassAndObject(input);
        }
        if (input.eof()) {
          input.close();
          input=null;
        }
        readBufferUsed=true;
        readCursor=0;
        rowsOnDisk-=rowsInReadBuffer;
      }
    }
 catch (    Exception e) {
      clear();
      throw new RuntimeException("Failed to load rows from disk",e);
    }
  }
  ROW row=readBuffer[readCursor];
  if (++readCursor >= rowsInReadBuffer) {
    readBufferUsed=false;
    rowsInReadBuffer=0;
    readCursor=0;
  }
  return row;
}
