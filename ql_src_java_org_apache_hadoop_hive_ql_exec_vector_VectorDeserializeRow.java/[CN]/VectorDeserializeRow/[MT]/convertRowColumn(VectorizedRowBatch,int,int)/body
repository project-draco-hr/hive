{
  final int projectionColumnNum=projectionColumnNums[logicalColumnIndex];
  Writable convertSourceWritable=convertSourceWritables[logicalColumnIndex];
switch (sourceCategories[logicalColumnIndex]) {
case PRIMITIVE:
{
switch (sourcePrimitiveCategories[logicalColumnIndex]) {
case VOID:
        convertSourceWritable=null;
      break;
case BOOLEAN:
    ((BooleanWritable)convertSourceWritable).set(deserializeRead.currentBoolean);
  break;
case BYTE:
((ByteWritable)convertSourceWritable).set(deserializeRead.currentByte);
break;
case SHORT:
((ShortWritable)convertSourceWritable).set(deserializeRead.currentShort);
break;
case INT:
((IntWritable)convertSourceWritable).set(deserializeRead.currentInt);
break;
case LONG:
((LongWritable)convertSourceWritable).set(deserializeRead.currentLong);
break;
case TIMESTAMP:
((TimestampWritable)convertSourceWritable).set(deserializeRead.currentTimestampWritable);
break;
case DATE:
((DateWritable)convertSourceWritable).set(deserializeRead.currentDateWritable);
break;
case FLOAT:
((FloatWritable)convertSourceWritable).set(deserializeRead.currentFloat);
break;
case DOUBLE:
((DoubleWritable)convertSourceWritable).set(deserializeRead.currentDouble);
break;
case BINARY:
if (deserializeRead.currentBytes == null) {
LOG.info("null binary entry: batchIndex " + batchIndex + " projection column num "+ projectionColumnNum);
}
((BytesWritable)convertSourceWritable).set(deserializeRead.currentBytes,deserializeRead.currentBytesStart,deserializeRead.currentBytesLength);
break;
case STRING:
if (deserializeRead.currentBytes == null) {
throw new RuntimeException("null string entry: batchIndex " + batchIndex + " projection column num "+ projectionColumnNum);
}
((Text)convertSourceWritable).set(deserializeRead.currentBytes,deserializeRead.currentBytesStart,deserializeRead.currentBytesLength);
break;
case VARCHAR:
{
if (deserializeRead.currentBytes == null) {
throw new RuntimeException("null varchar entry: batchIndex " + batchIndex + " projection column num "+ projectionColumnNum);
}
int adjustedLength=StringExpr.truncate(deserializeRead.currentBytes,deserializeRead.currentBytesStart,deserializeRead.currentBytesLength,maxLengths[logicalColumnIndex]);
((HiveVarcharWritable)convertSourceWritable).set(new String(deserializeRead.currentBytes,deserializeRead.currentBytesStart,adjustedLength,Charsets.UTF_8),-1);
}
break;
case CHAR:
{
if (deserializeRead.currentBytes == null) {
throw new RuntimeException("null char entry: batchIndex " + batchIndex + " projection column num "+ projectionColumnNum);
}
int adjustedLength=StringExpr.rightTrimAndTruncate(deserializeRead.currentBytes,deserializeRead.currentBytesStart,deserializeRead.currentBytesLength,maxLengths[logicalColumnIndex]);
((HiveCharWritable)convertSourceWritable).set(new String(deserializeRead.currentBytes,deserializeRead.currentBytesStart,adjustedLength,Charsets.UTF_8),-1);
}
break;
case DECIMAL:
((HiveDecimalWritable)convertSourceWritable).set(deserializeRead.currentHiveDecimalWritable);
break;
case INTERVAL_YEAR_MONTH:
((HiveIntervalYearMonthWritable)convertSourceWritable).set(deserializeRead.currentHiveIntervalYearMonthWritable);
break;
case INTERVAL_DAY_TIME:
((HiveIntervalDayTimeWritable)convertSourceWritable).set(deserializeRead.currentHiveIntervalDayTimeWritable);
break;
default :
throw new RuntimeException("Primitive category " + sourcePrimitiveCategories[logicalColumnIndex] + " not supported");
}
}
break;
default :
throw new RuntimeException("Category " + sourceCategories[logicalColumnIndex] + " not supported");
}
convertVectorAssignRow.assignConvertRowColumn(batch,batchIndex,logicalColumnIndex,convertSourceWritable);
}
