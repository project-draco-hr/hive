{
  org.apache.thrift.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == org.apache.thrift.protocol.TType.STRING) {
        this.operatorId=iprot.readString();
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == org.apache.thrift.protocol.TType.I32) {
    this.operatorType=OperatorType.findByValue(iprot.readI32());
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map12=iprot.readMapBegin();
  this.operatorAttributes=new HashMap<String,String>(2 * _map12.size);
  for (int _i13=0; _i13 < _map12.size; ++_i13) {
    String _key14;
    String _val15;
    _key14=iprot.readString();
    _val15=iprot.readString();
    this.operatorAttributes.put(_key14,_val15);
  }
  iprot.readMapEnd();
}
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 4:
if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map16=iprot.readMapBegin();
this.operatorCounters=new HashMap<String,Long>(2 * _map16.size);
for (int _i17=0; _i17 < _map16.size; ++_i17) {
String _key18;
long _val19;
_key18=iprot.readString();
_val19=iprot.readI64();
this.operatorCounters.put(_key18,_val19);
}
iprot.readMapEnd();
}
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 5:
if (field.type == org.apache.thrift.protocol.TType.BOOL) {
this.done=iprot.readBool();
setDoneIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 6:
if (field.type == org.apache.thrift.protocol.TType.BOOL) {
this.started=iprot.readBool();
setStartedIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
