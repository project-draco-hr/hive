{
switch (setField) {
case BOOL_VAL:
    if (value instanceof TBoolColumn) {
      break;
    }
  throw new ClassCastException("Was expecting value of type TBoolColumn for field 'boolVal', but got " + value.getClass().getSimpleName());
case BYTE_VAL:
if (value instanceof TByteColumn) {
  break;
}
throw new ClassCastException("Was expecting value of type TByteColumn for field 'byteVal', but got " + value.getClass().getSimpleName());
case I16_VAL:
if (value instanceof TI16Column) {
break;
}
throw new ClassCastException("Was expecting value of type TI16Column for field 'i16Val', but got " + value.getClass().getSimpleName());
case I32_VAL:
if (value instanceof TI32Column) {
break;
}
throw new ClassCastException("Was expecting value of type TI32Column for field 'i32Val', but got " + value.getClass().getSimpleName());
case I64_VAL:
if (value instanceof TI64Column) {
break;
}
throw new ClassCastException("Was expecting value of type TI64Column for field 'i64Val', but got " + value.getClass().getSimpleName());
case DOUBLE_VAL:
if (value instanceof TDoubleColumn) {
break;
}
throw new ClassCastException("Was expecting value of type TDoubleColumn for field 'doubleVal', but got " + value.getClass().getSimpleName());
case STRING_VAL:
if (value instanceof TStringColumn) {
break;
}
throw new ClassCastException("Was expecting value of type TStringColumn for field 'stringVal', but got " + value.getClass().getSimpleName());
case BINARY_VAL:
if (value instanceof TBinaryColumn) {
break;
}
throw new ClassCastException("Was expecting value of type TBinaryColumn for field 'binaryVal', but got " + value.getClass().getSimpleName());
default :
throw new IllegalArgumentException("Unknown field id " + setField);
}
}
