{
  Map<String,String> conf=ImmutableMap.<String,String>builder().putAll(emptyConfig).build();
  RpcServer server=autoClose(new RpcServer(conf));
  String secret=server.createSecret();
  try {
    autoClose(server.registerClient("client",secret,new TestDispatcher(),1L).get());
    fail("Server should have timed out client.");
  }
 catch (  ExecutionException ee) {
    assertTrue(ee.getCause() instanceof TimeoutException);
  }
  NioEventLoopGroup eloop=new NioEventLoopGroup();
  Future<Rpc> clientRpcFuture=Rpc.createClient(conf,eloop,"localhost",server.getPort(),"client",secret,new TestDispatcher());
  try {
    autoClose(clientRpcFuture.get());
    fail("Client should have failed to connect to server.");
  }
 catch (  ExecutionException ee) {
    assertFalse(ee.getCause() instanceof TimeoutException);
  }
}
