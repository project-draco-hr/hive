{
  SearchArgument sarg=SearchArgumentFactory.newBuilder().startAnd().lessThan("x",PredicateLeaf.Type.DATE,Date.valueOf("2005-3-12")).lessThanEquals("y",PredicateLeaf.Type.STRING,new HiveChar("hi",10).toString()).equals("z",PredicateLeaf.Type.DECIMAL,new HiveDecimalWritable("1.0")).end().build();
  assertEquals("lteq(y, Binary{\"hi        \"})",ParquetRecordReaderWrapper.toFilterPredicate(sarg).toString());
  sarg=SearchArgumentFactory.newBuilder().startNot().startOr().isNull("x",PredicateLeaf.Type.INTEGER).between("y",PredicateLeaf.Type.DECIMAL,new HiveDecimalWritable("10"),new HiveDecimalWritable("20.0")).in("z",PredicateLeaf.Type.INTEGER,1,2,3).nullSafeEquals("a",PredicateLeaf.Type.STRING,new HiveVarchar("stinger",100).toString()).end().end().build();
  FilterPredicate p=ParquetRecordReaderWrapper.toFilterPredicate(sarg);
  String expected="and(and(not(eq(x, null)), not(or(or(eq(z, 1), eq(z, 2)), eq(z, 3)))), " + "not(eq(a, Binary{\"stinger\"})))";
  assertEquals(expected,p.toString());
}
