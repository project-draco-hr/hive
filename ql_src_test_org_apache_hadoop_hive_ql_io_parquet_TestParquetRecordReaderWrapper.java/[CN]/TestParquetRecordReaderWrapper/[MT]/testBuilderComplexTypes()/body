{
  SearchArgument sarg=SearchArgumentFactory.newBuilder().startAnd().lessThan("x",PredicateLeaf.Type.DATE,Date.valueOf("1970-1-11")).lessThanEquals("y",PredicateLeaf.Type.STRING,new HiveChar("hi",10).toString()).equals("z",PredicateLeaf.Type.DECIMAL,new HiveDecimalWritable("1.0")).end().build();
  MessageType schema=MessageTypeParser.parseMessageType("message test {" + " required int32 x; required binary y; required binary z;}");
  assertEquals("lteq(y, Binary{\"hi        \"})",ParquetFilterPredicateConverter.toFilterPredicate(sarg,schema).toString());
  sarg=SearchArgumentFactory.newBuilder().startNot().startOr().isNull("x",PredicateLeaf.Type.LONG).between("y",PredicateLeaf.Type.DECIMAL,new HiveDecimalWritable("10"),new HiveDecimalWritable("20.0")).in("z",PredicateLeaf.Type.LONG,1L,2L,3L).nullSafeEquals("a",PredicateLeaf.Type.STRING,new HiveVarchar("stinger",100).toString()).end().end().build();
  schema=MessageTypeParser.parseMessageType("message test {" + " optional int32 x; required binary y; required int32 z;" + " optional binary a;}");
  FilterPredicate p=ParquetFilterPredicateConverter.toFilterPredicate(sarg,schema);
  String expected="and(and(not(eq(x, null)), not(or(or(eq(z, 1), eq(z, 2)), eq(z, 3)))), " + "not(eq(a, Binary{\"stinger\"})))";
  assertEquals(expected,p.toString());
}
