{
  SearchArgument sarg=SearchArgumentFactory.newBuilder().startAnd().lessThan("x",PredicateLeaf.Type.LONG,22L).lessThan("x1",PredicateLeaf.Type.LONG,22L).lessThanEquals("y",PredicateLeaf.Type.STRING,new HiveChar("hi",10).toString()).equals("z",PredicateLeaf.Type.FLOAT,new Double(0.22)).equals("z1",PredicateLeaf.Type.FLOAT,new Double(0.22)).end().build();
  MessageType schema=MessageTypeParser.parseMessageType("message test {" + " required int32 x; required int32 x1;" + " required binary y; required float z; required float z1;}");
  FilterPredicate p=ParquetFilterPredicateConverter.toFilterPredicate(sarg,schema);
  String expected="and(and(and(and(lt(x, 22), lt(x1, 22))," + " lteq(y, Binary{\"hi        \"})), eq(z, " + "0.22)), eq(z1, 0.22))";
  assertEquals(expected,p.toString());
}
