{
  String inputSDClass, outputSDClass;
  if (properties.containsKey(HCatConstants.HCAT_ISD_CLASS)) {
    inputSDClass=properties.get(HCatConstants.HCAT_ISD_CLASS);
  }
 else {
    if ((sd.getInputFormat() != null) && (sd.getInputFormat().equals(HCatConstants.HIVE_RCFILE_IF_CLASS))) {
      inputSDClass=HCatConstants.HCAT_RCFILE_ISD_CLASS;
    }
 else {
      throw new IOException("No input storage driver classname found for table, cannot write partition");
    }
  }
  if (properties.containsKey(HCatConstants.HCAT_OSD_CLASS)) {
    outputSDClass=properties.get(HCatConstants.HCAT_OSD_CLASS);
  }
 else {
    if ((sd.getOutputFormat() != null) && (sd.getOutputFormat().equals(HCatConstants.HIVE_RCFILE_OF_CLASS))) {
      outputSDClass=HCatConstants.HCAT_RCFILE_OSD_CLASS;
    }
 else {
      throw new IOException("No output storage driver classname found for table, cannot write partition");
    }
  }
  Properties hcatProperties=new Properties();
  for (  String key : properties.keySet()) {
    if (key.startsWith(HCAT_KEY_PREFIX)) {
      hcatProperties.put(key,properties.get(key));
    }
  }
  return new StorerInfo(inputSDClass,outputSDClass,hcatProperties);
}
