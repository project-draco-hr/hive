{
switch (objInspector.getCategory()) {
case PRIMITIVE:
    LazyUtils.writePrimitiveUTF8(ss,obj,(PrimitiveObjectInspector)objInspector,escaped,escapeChar,needsEscape);
  return true;
case LIST:
char separator=(char)separators[level];
ListObjectInspector loi=(ListObjectInspector)objInspector;
List<?> list=loi.getList(obj);
ObjectInspector eoi=loi.getListElementObjectInspector();
if (list == null) {
return false;
}
 else {
for (int i=0; i < list.size(); i++) {
if (i > 0) {
ss.write(separator);
}
serialize(list.get(i),eoi,level + 1,ss);
}
}
return true;
case MAP:
char sep=(char)separators[level];
char keyValueSeparator=(char)separators[level + 1];
MapObjectInspector moi=(MapObjectInspector)objInspector;
ObjectInspector koi=moi.getMapKeyObjectInspector();
ObjectInspector voi=moi.getMapValueObjectInspector();
Map<?,?> map=moi.getMap(obj);
if (map == null) {
return false;
}
 else {
boolean first=true;
for (Map.Entry<?,?> entry : map.entrySet()) {
if (first) {
first=false;
}
 else {
ss.write(sep);
}
serialize(entry.getKey(),koi,level + 2,ss);
ss.write(keyValueSeparator);
serialize(entry.getValue(),voi,level + 2,ss);
}
}
return true;
case STRUCT:
sep=(char)separators[level];
StructObjectInspector soi=(StructObjectInspector)objInspector;
List<? extends StructField> fields=soi.getAllStructFieldRefs();
list=soi.getStructFieldsDataAsList(obj);
if (list == null) {
return false;
}
 else {
for (int i=0; i < list.size(); i++) {
if (i > 0) {
ss.write(sep);
}
serialize(list.get(i),fields.get(i).getFieldObjectInspector(),level + 1,ss);
}
}
return true;
default :
throw new RuntimeException("Unknown category type: " + objInspector.getCategory());
}
}
