{
  if (!parseArguments(args)) {
    return 1;
  }
  System.setProperty("log4j.configurationFile","hive-log4j2.properties");
  conf=new Conf();
  conf.init();
  conn=new Conn(this);
  meta=new Meta(this);
  initOptions();
  expr=new Expression(this);
  select=new Select(this);
  stmt=new Stmt(this);
  converter=new Converter(this);
  function=new Function(this);
  new FunctionDatetime(this).register(function);
  new FunctionMisc(this).register(function);
  new FunctionString(this).register(function);
  new FunctionOra(this).register(function);
  addVariable(new Var(ERRORCODE,Var.Type.BIGINT,0L));
  addVariable(new Var(SQLCODE,Var.Type.BIGINT,0L));
  addVariable(new Var(SQLSTATE,Var.Type.STRING,"00000"));
  addVariable(new Var(HOSTCODE,Var.Type.BIGINT,0L));
  for (  Map.Entry<String,String> v : arguments.getVars().entrySet()) {
    addVariable(new Var(v.getKey(),Var.Type.STRING,v.getValue()));
  }
  InputStream input=null;
  if (execString != null) {
    input=new ByteArrayInputStream(execString.getBytes("UTF-8"));
  }
 else {
    input=new FileInputStream(execFile);
  }
  HplsqlLexer lexer=new HplsqlLexer(new ANTLRInputStream(input));
  CommonTokenStream tokens=new CommonTokenStream(lexer);
  HplsqlParser parser=new HplsqlParser(tokens);
  tree=parser.program();
  if (trace) {
    System.err.println("Configuration file: " + conf.getLocation());
    System.err.println("Parser tree: " + tree.toStringTree(parser));
  }
  includeRcFile();
  return 0;
}
