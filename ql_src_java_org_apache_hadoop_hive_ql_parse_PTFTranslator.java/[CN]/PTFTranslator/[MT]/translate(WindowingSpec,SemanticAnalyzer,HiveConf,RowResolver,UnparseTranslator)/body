{
  init(semAly,hCfg,inputRR,unparseT);
  windowingSpec=wdwSpec;
  ptfDesc=new PTFDesc();
  ptfDesc.setCfg(hCfg);
  ptfDesc.setLlInfo(llInfo);
  WindowTableFunctionDef wdwTFnDef=new WindowTableFunctionDef();
  ptfDesc.setFuncDef(wdwTFnDef);
  PTFQueryInputSpec inpSpec=new PTFQueryInputSpec();
  inpSpec.setType(PTFQueryInputType.WINDOWING);
  wdwTFnDef.setInput(translate(inpSpec,0));
  ShapeDetails inpShape=wdwTFnDef.getInput().getOutputShape();
  WindowingTableFunctionResolver tFn=(WindowingTableFunctionResolver)FunctionRegistry.getTableFunctionResolver(FunctionRegistry.WINDOWING_TABLE_FUNCTION);
  if (tFn == null) {
    throw new SemanticException(String.format("Internal Error: Unknown Table Function %s",FunctionRegistry.WINDOWING_TABLE_FUNCTION));
  }
  wdwTFnDef.setName(FunctionRegistry.WINDOWING_TABLE_FUNCTION);
  wdwTFnDef.setResolverClassName(tFn.getClass().getName());
  wdwTFnDef.setAlias("ptf_" + 1);
  wdwTFnDef.setExpressionTreeString(null);
  wdwTFnDef.setTransformsRawInput(false);
  tFn.initialize(hCfg,ptfDesc,wdwTFnDef);
  TableFunctionEvaluator tEval=tFn.getEvaluator();
  wdwTFnDef.setTFunction(tEval);
  wdwTFnDef.setCarryForwardNames(tFn.carryForwardNames());
  wdwTFnDef.setRawInputShape(inpShape);
  PartitioningSpec partiSpec=wdwSpec.getQueryPartitioningSpec();
  if (partiSpec == null) {
    throw new SemanticException("Invalid use of Windowing: there is no Partitioning associated with Windowing");
  }
  PartitionDef partDef=translate(inpShape,wdwSpec.getQueryPartitionSpec());
  OrderDef ordDef=translate(inpShape,wdwSpec.getQueryOrderSpec(),partDef);
  wdwTFnDef.setPartition(partDef);
  wdwTFnDef.setOrder(ordDef);
  ArrayList<WindowFunctionDef> windowFunctions=new ArrayList<WindowFunctionDef>();
  if (wdwSpec.getWindowExpressions() != null) {
    for (    WindowExpressionSpec expr : wdwSpec.getWindowExpressions()) {
      if (expr instanceof WindowFunctionSpec) {
        WindowFunctionDef wFnDef=translate(wdwTFnDef,(WindowFunctionSpec)expr);
        windowFunctions.add(wFnDef);
      }
    }
    wdwTFnDef.setWindowFunctions(windowFunctions);
  }
  ArrayList<String> aliases=new ArrayList<String>();
  ArrayList<ObjectInspector> fieldOIs=new ArrayList<ObjectInspector>();
  for (  WindowFunctionDef wFnDef : windowFunctions) {
    aliases.add(wFnDef.getAlias());
    if (wFnDef.isPivotResult()) {
      fieldOIs.add(((ListObjectInspector)wFnDef.getOI()).getListElementObjectInspector());
    }
 else {
      fieldOIs.add(wFnDef.getOI());
    }
  }
  PTFTranslator.addInputColumnsToList(inpShape,aliases,fieldOIs);
  StructObjectInspector wdwOutOI=ObjectInspectorFactory.getStandardStructObjectInspector(aliases,fieldOIs);
  tFn.setWdwProcessingOutputOI(wdwOutOI);
  RowResolver wdwOutRR=buildRowResolverForWindowing(wdwTFnDef);
  ShapeDetails wdwOutShape=setupShape(wdwOutOI,null,wdwOutRR);
  wdwTFnDef.setOutputShape(wdwOutShape);
  tFn.setupOutputOI();
  PTFDeserializer.alterOutputOIForStreaming(ptfDesc);
  return ptfDesc;
}
