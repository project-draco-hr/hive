{
  GenTezProcContext context=(GenTezProcContext)procContext;
  context.preceedingWork=null;
  context.currentRootOperator=null;
  MapJoinOperator mapJoinOp=(MapJoinOperator)nd;
  Operator<? extends OperatorDesc> childOp=mapJoinOp.getChildOperators().get(0);
  ReduceSinkOperator parentRS=(ReduceSinkOperator)stack.get(stack.size() - 2);
  if (!context.mapJoinParentMap.containsKey(mapJoinOp)) {
    List<Operator<?>> parents=new ArrayList(mapJoinOp.getParentOperators());
    context.mapJoinParentMap.put(mapJoinOp,parents);
  }
  BaseWork myWork=null;
  while (childOp != null) {
    if ((childOp instanceof ReduceSinkOperator) || (childOp instanceof FileSinkOperator)) {
      myWork=context.operatorWorkMap.get(childOp);
      BaseWork parentWork=context.operatorWorkMap.get(parentRS);
      int pos=context.mapJoinParentMap.get(mapJoinOp).indexOf(parentRS);
      if (pos == -1) {
        throw new SemanticException("Cannot find position of parent in mapjoin");
      }
      LOG.debug("Mapjoin " + mapJoinOp + ", pos: "+ pos+ " --> "+ parentWork.getName());
      mapJoinOp.getConf().getParentToInput().put(pos,parentWork.getName());
      if (myWork != null) {
        TezWork tezWork=context.currentTask.getWork();
        tezWork.connect(parentWork,myWork,EdgeType.BROADCAST_EDGE);
        parentRS.getConf().setOutputName(myWork.getName());
        context.connectedReduceSinks.add(parentRS);
      }
 else {
        List<BaseWork> linkWorkList=context.linkOpWithWorkMap.get(childOp);
        if (linkWorkList == null) {
          linkWorkList=new ArrayList<BaseWork>();
        }
        linkWorkList.add(parentWork);
        context.linkOpWithWorkMap.put(childOp,linkWorkList);
        List<ReduceSinkOperator> reduceSinks=context.linkWorkWithReduceSinkMap.get(parentWork);
        if (reduceSinks == null) {
          reduceSinks=new ArrayList<ReduceSinkOperator>();
        }
        reduceSinks.add(parentRS);
        context.linkWorkWithReduceSinkMap.put(parentWork,reduceSinks);
      }
      break;
    }
    if ((childOp.getChildOperators() != null) && (childOp.getChildOperators().size() >= 1)) {
      childOp=childOp.getChildOperators().get(0);
    }
 else {
      break;
    }
  }
  List<Operator<? extends OperatorDesc>> dummyOperators=new ArrayList<Operator<? extends OperatorDesc>>();
  HashTableDummyDesc desc=new HashTableDummyDesc();
  @SuppressWarnings("unchecked") HashTableDummyOperator dummyOp=(HashTableDummyOperator)OperatorFactory.get(desc);
  TableDesc tbl;
  RowSchema rowSchema=parentRS.getParentOperators().get(0).getSchema();
  tbl=PlanUtils.getReduceValueTableDesc(PlanUtils.getFieldSchemasFromRowSchema(rowSchema,""));
  dummyOp.getConf().setTbl(tbl);
  Map<Byte,List<ExprNodeDesc>> keyExprMap=mapJoinOp.getConf().getKeys();
  List<ExprNodeDesc> keyCols=keyExprMap.get(Byte.valueOf((byte)0));
  StringBuffer keyOrder=new StringBuffer();
  for (  ExprNodeDesc k : keyCols) {
    keyOrder.append("+");
  }
  TableDesc keyTableDesc=PlanUtils.getReduceKeyTableDesc(PlanUtils.getFieldSchemasFromColumnList(keyCols,"mapjoinkey"),keyOrder.toString());
  mapJoinOp.getConf().setKeyTableDesc(keyTableDesc);
  mapJoinOp.replaceParent(parentRS,dummyOp);
  List<Operator<? extends OperatorDesc>> dummyChildren=new ArrayList<Operator<? extends OperatorDesc>>();
  dummyChildren.add(mapJoinOp);
  dummyOp.setChildOperators(dummyChildren);
  dummyOperators.add(dummyOp);
  List<Operator<? extends OperatorDesc>> childOperators=parentRS.getChildOperators();
  int childIndex=childOperators.indexOf(mapJoinOp);
  childOperators.remove(childIndex);
  if (myWork != null) {
    myWork.addDummyOp(dummyOp);
  }
 else {
    List<Operator<?>> dummyList=dummyOperators;
    if (context.linkChildOpWithDummyOp.containsKey(childOp)) {
      dummyList=context.linkChildOpWithDummyOp.get(childOp);
    }
    dummyList.add(dummyOp);
    context.linkChildOpWithDummyOp.put(childOp,dummyList);
  }
  return true;
}
