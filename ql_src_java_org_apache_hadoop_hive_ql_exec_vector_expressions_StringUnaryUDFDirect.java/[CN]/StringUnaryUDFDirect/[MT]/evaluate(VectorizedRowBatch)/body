{
  if (childExpressions != null) {
    super.evaluateChildren(batch);
  }
  BytesColumnVector inputColVector=(BytesColumnVector)batch.cols[inputColumn];
  int[] sel=batch.selected;
  int n=batch.size;
  byte[][] vector=inputColVector.vector;
  int start[]=inputColVector.start;
  int length[]=inputColVector.length;
  BytesColumnVector outV=(BytesColumnVector)batch.cols[outputColumn];
  outV.initBuffer();
  if (n == 0) {
    return;
  }
  if (inputColVector.noNulls) {
    outV.noNulls=true;
    if (inputColVector.isRepeating) {
      outV.isRepeating=true;
      func(outV,vector,start,length,0);
    }
 else     if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        func(outV,vector,start,length,i);
      }
      outV.isRepeating=false;
    }
 else {
      for (int i=0; i != n; i++) {
        func(outV,vector,start,length,i);
      }
      outV.isRepeating=false;
    }
  }
 else {
    outV.noNulls=false;
    if (inputColVector.isRepeating) {
      outV.isRepeating=true;
      outV.isNull[0]=inputColVector.isNull[0];
      if (!inputColVector.isNull[0]) {
        func(outV,vector,start,length,0);
      }
    }
 else     if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        outV.isNull[i]=inputColVector.isNull[i];
        if (!inputColVector.isNull[i]) {
          func(outV,vector,start,length,i);
        }
      }
      outV.isRepeating=false;
    }
 else {
      System.arraycopy(inputColVector.isNull,0,outV.isNull,0,n);
      for (int i=0; i != n; i++) {
        if (!inputColVector.isNull[i]) {
          func(outV,vector,start,length,i);
        }
      }
      outV.isRepeating=false;
    }
  }
}
