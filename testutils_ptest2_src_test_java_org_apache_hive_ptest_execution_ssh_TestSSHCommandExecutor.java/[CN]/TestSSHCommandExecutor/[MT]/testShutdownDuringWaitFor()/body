{
  LocalCommand localCommand=mock(LocalCommand.class);
  localCommandFactory.setInstance(localCommand);
  final SSHCommandExecutor executor=new SSHCommandExecutor(LOG,localCommandFactory);
  Assert.assertFalse(executor.isShutdown());
  when(localCommand.getExitCode()).thenAnswer(new Answer<Integer>(){
    @Override public Integer answer(    InvocationOnMock invocation) throws Throwable {
      executor.shutdownNow();
      return Constants.EXIT_CODE_UNKNOWN;
    }
  }
);
  SSHCommand command=new SSHCommand(executor,"privateKey","user","host",1,"whoami");
  executor.execute(command);
  Assert.assertTrue(executor.isShutdown());
  Assert.assertEquals(Constants.EXIT_CODE_UNKNOWN,command.getExitCode());
  if (command.getException() != null) {
    throw new Exception("Unexpected exception during execution",command.getException());
  }
  verify(localCommand,never()).kill();
}
