{
  inputExpression.evaluate(unit);
  DoubleColumnVector inputVector=(DoubleColumnVector)unit.cols[this.inputExpression.getOutputColumn()];
  int batchSize=unit.size;
  if (batchSize == 0) {
    return;
  }
  Aggregation myagg=(Aggregation)agg;
  double[] vector=inputVector.vector;
  if (inputVector.isRepeating) {
    if (inputVector.noNulls || !inputVector.isNull[0]) {
      if (myagg.isNull) {
        myagg.isNull=false;
        myagg.sum=0;
      }
      myagg.sum+=vector[0] * batchSize;
    }
    return;
  }
  if (!unit.selectedInUse && inputVector.noNulls) {
    iterateNoSelectionNoNulls(myagg,vector,batchSize);
  }
 else   if (!unit.selectedInUse) {
    iterateNoSelectionHasNulls(myagg,vector,batchSize,inputVector.isNull);
  }
 else   if (inputVector.noNulls) {
    iterateSelectionNoNulls(myagg,vector,batchSize,unit.selected);
  }
 else {
    iterateSelectionHasNulls(myagg,vector,batchSize,inputVector.isNull,unit.selected);
  }
}
