{
  int batchSize=batch.size;
  if (batchSize == 0) {
    return;
  }
  inputExpression.evaluate(batch);
  DoubleColumnVector inputVector=(DoubleColumnVector)batch.cols[this.inputExpression.getOutputColumn()];
  double[] vector=inputVector.vector;
  if (inputVector.noNulls) {
    if (inputVector.isRepeating) {
      iterateNoNullsRepeatingWithAggregationSelection(aggregationBufferSets,aggregateIndex,vector[0],batchSize);
    }
 else {
      if (batch.selectedInUse) {
        iterateNoNullsSelectionWithAggregationSelection(aggregationBufferSets,aggregateIndex,vector,batch.selected,batchSize);
      }
 else {
        iterateNoNullsWithAggregationSelection(aggregationBufferSets,aggregateIndex,vector,batchSize);
      }
    }
  }
 else {
    if (inputVector.isRepeating) {
      if (batch.selectedInUse) {
        iterateHasNullsRepeatingSelectionWithAggregationSelection(aggregationBufferSets,aggregateIndex,vector[0],batchSize,batch.selected,inputVector.isNull);
      }
 else {
        iterateHasNullsRepeatingWithAggregationSelection(aggregationBufferSets,aggregateIndex,vector[0],batchSize,inputVector.isNull);
      }
    }
 else {
      if (batch.selectedInUse) {
        iterateHasNullsSelectionWithAggregationSelection(aggregationBufferSets,aggregateIndex,vector,batchSize,batch.selected,inputVector.isNull);
      }
 else {
        iterateHasNullsWithAggregationSelection(aggregationBufferSets,aggregateIndex,vector,batchSize,inputVector.isNull);
      }
    }
  }
}
