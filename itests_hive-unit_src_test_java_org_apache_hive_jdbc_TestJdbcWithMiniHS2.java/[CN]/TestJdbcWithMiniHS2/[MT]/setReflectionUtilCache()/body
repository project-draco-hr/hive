{
  Field constructorCacheField;
  Cache<Class<?>,Constructor<?>> tmp;
  try {
    constructorCacheField=ReflectionUtil.class.getDeclaredField("CONSTRUCTOR_CACHE");
    if (constructorCacheField != null) {
      constructorCacheField.setAccessible(true);
      Field modifiersField=Field.class.getDeclaredField("modifiers");
      modifiersField.setAccessible(true);
      modifiersField.setInt(constructorCacheField,constructorCacheField.getModifiers() & ~Modifier.FINAL);
      tmp=CacheBuilder.newBuilder().expireAfterAccess(5,TimeUnit.SECONDS).concurrencyLevel(64).weakKeys().weakValues().build();
      constructorCacheField.set(tmp.getClass(),tmp);
    }
  }
 catch (  Exception e) {
    System.out.println("Error when setting the CONSTRUCTOR_CACHE to expire: " + e);
  }
}
