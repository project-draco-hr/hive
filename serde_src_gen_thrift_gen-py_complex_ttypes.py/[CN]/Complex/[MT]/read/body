def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.I32):
                self.aint = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.STRING):
                self.aString = iprot.readString()
            else:
                iprot.skip(ftype)
        elif (fid == 3):
            if (ftype == TType.LIST):
                self.lint = []
                (_etype19, _size16) = iprot.readListBegin()
                for _i20 in xrange(_size16):
                    _elem21 = iprot.readI32()
                    self.lint.append(_elem21)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 4):
            if (ftype == TType.LIST):
                self.lString = []
                (_etype25, _size22) = iprot.readListBegin()
                for _i26 in xrange(_size22):
                    _elem27 = iprot.readString()
                    self.lString.append(_elem27)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 5):
            if (ftype == TType.LIST):
                self.lintString = []
                (_etype31, _size28) = iprot.readListBegin()
                for _i32 in xrange(_size28):
                    _elem33 = IntString()
                    _elem33.read(iprot)
                    self.lintString.append(_elem33)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 6):
            if (ftype == TType.MAP):
                self.mStringString = {}
                (_ktype35, _vtype36, _size34) = iprot.readMapBegin()
                for _i38 in xrange(_size34):
                    _key39 = iprot.readString()
                    _val40 = iprot.readString()
                    self.mStringString[_key39] = _val40
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 7):
            if (ftype == TType.MAP):
                self.attributes = {}
                (_ktype42, _vtype43, _size41) = iprot.readMapBegin()
                for _i45 in xrange(_size41):
                    _key46 = iprot.readString()
                    _val47 = {}
                    (_ktype49, _vtype50, _size48) = iprot.readMapBegin()
                    for _i52 in xrange(_size48):
                        _key53 = iprot.readString()
                        _val54 = {}
                        (_ktype56, _vtype57, _size55) = iprot.readMapBegin()
                        for _i59 in xrange(_size55):
                            _key60 = iprot.readString()
                            _val61 = PropValueUnion()
                            _val61.read(iprot)
                            _val54[_key60] = _val61
                        iprot.readMapEnd()
                        _val47[_key53] = _val54
                    iprot.readMapEnd()
                    self.attributes[_key46] = _val47
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 8):
            if (ftype == TType.STRUCT):
                self.unionField1 = PropValueUnion()
                self.unionField1.read(iprot)
            else:
                iprot.skip(ftype)
        elif (fid == 9):
            if (ftype == TType.STRUCT):
                self.unionField2 = PropValueUnion()
                self.unionField2.read(iprot)
            else:
                iprot.skip(ftype)
        elif (fid == 10):
            if (ftype == TType.STRUCT):
                self.unionField3 = PropValueUnion()
                self.unionField3.read(iprot)
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
