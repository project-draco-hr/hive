def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.I32):
                self.aint = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.STRING):
                self.aString = iprot.readString()
            else:
                iprot.skip(ftype)
        elif (fid == 3):
            if (ftype == TType.LIST):
                self.lint = []
                (_etype3, _size0) = iprot.readListBegin()
                for _i4 in xrange(_size0):
                    _elem5 = iprot.readI32()
                    self.lint.append(_elem5)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 4):
            if (ftype == TType.LIST):
                self.lString = []
                (_etype9, _size6) = iprot.readListBegin()
                for _i10 in xrange(_size6):
                    _elem11 = iprot.readString()
                    self.lString.append(_elem11)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 5):
            if (ftype == TType.LIST):
                self.lintString = []
                (_etype15, _size12) = iprot.readListBegin()
                for _i16 in xrange(_size12):
                    _elem17 = IntString()
                    _elem17.read(iprot)
                    self.lintString.append(_elem17)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 6):
            if (ftype == TType.MAP):
                self.mStringString = {}
                (_ktype19, _vtype20, _size18) = iprot.readMapBegin()
                for _i22 in xrange(_size18):
                    _key23 = iprot.readString()
                    _val24 = iprot.readString()
                    self.mStringString[_key23] = _val24
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
