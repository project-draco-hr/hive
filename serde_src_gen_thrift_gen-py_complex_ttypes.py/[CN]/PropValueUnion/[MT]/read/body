def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.I32):
                self.intValue = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.I64):
                self.longValue = iprot.readI64()
            else:
                iprot.skip(ftype)
        elif (fid == 3):
            if (ftype == TType.STRING):
                self.stringValue = iprot.readString()
            else:
                iprot.skip(ftype)
        elif (fid == 4):
            if (ftype == TType.DOUBLE):
                self.doubleValue = iprot.readDouble()
            else:
                iprot.skip(ftype)
        elif (fid == 5):
            if (ftype == TType.BOOL):
                self.flag = iprot.readBool()
            else:
                iprot.skip(ftype)
        elif (fid == 6):
            if (ftype == TType.LIST):
                self.lString = []
                (_etype3, _size0) = iprot.readListBegin()
                for _i4 in xrange(_size0):
                    _elem5 = iprot.readString()
                    self.lString.append(_elem5)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 7):
            if (ftype == TType.MAP):
                self.unionMStringString = {}
                (_ktype7, _vtype8, _size6) = iprot.readMapBegin()
                for _i10 in xrange(_size6):
                    _key11 = iprot.readString()
                    _val12 = iprot.readString()
                    self.unionMStringString[_key11] = _val12
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
