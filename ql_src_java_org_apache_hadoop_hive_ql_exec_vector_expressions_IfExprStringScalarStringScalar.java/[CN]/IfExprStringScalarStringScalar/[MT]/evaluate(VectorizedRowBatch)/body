{
  if (childExpressions != null) {
    super.evaluateChildren(batch);
  }
  LongColumnVector arg1ColVector=(LongColumnVector)batch.cols[arg1Column];
  BytesColumnVector outputColVector=(BytesColumnVector)batch.cols[outputColumn];
  int[] sel=batch.selected;
  outputColVector.noNulls=true;
  outputColVector.isRepeating=false;
  int n=batch.size;
  long[] vector1=arg1ColVector.vector;
  if (n == 0) {
    return;
  }
  outputColVector.initBuffer();
  if (arg1ColVector.isRepeating) {
    if (vector1[0] == 1) {
      outputColVector.fill(arg2Scalar);
    }
 else {
      outputColVector.fill(arg3Scalar);
    }
    return;
  }
  if (arg1ColVector.noNulls) {
    if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        if (vector1[i] == 1) {
          outputColVector.setRef(i,arg2Scalar,0,arg2Scalar.length);
        }
 else {
          outputColVector.setRef(i,arg3Scalar,0,arg3Scalar.length);
        }
      }
    }
 else {
      for (int i=0; i != n; i++) {
        if (vector1[i] == 1) {
          outputColVector.setRef(i,arg2Scalar,0,arg2Scalar.length);
        }
 else {
          outputColVector.setRef(i,arg3Scalar,0,arg3Scalar.length);
        }
      }
    }
  }
 else {
    if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        if (!arg1ColVector.isNull[i] && vector1[i] == 1) {
          outputColVector.setRef(i,arg2Scalar,0,arg2Scalar.length);
        }
 else {
          outputColVector.setRef(i,arg3Scalar,0,arg3Scalar.length);
        }
      }
    }
 else {
      for (int i=0; i != n; i++) {
        if (!arg1ColVector.isNull[i] && vector1[i] == 1) {
          outputColVector.setRef(i,arg2Scalar,0,arg2Scalar.length);
        }
 else {
          outputColVector.setRef(i,arg3Scalar,0,arg3Scalar.length);
        }
      }
    }
  }
}
