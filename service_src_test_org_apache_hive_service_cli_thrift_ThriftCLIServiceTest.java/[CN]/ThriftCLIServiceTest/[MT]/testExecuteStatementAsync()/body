{
  TOpenSessionReq openReq=new TOpenSessionReq();
  TSessionHandle sessHandle=client.OpenSession(openReq).getSessionHandle();
  assertNotNull(sessHandle);
  String queryString="SET hive.lock.manager=" + "org.apache.hadoop.hive.ql.lockmgr.EmbeddedLockManager";
  executeQuery(queryString,sessHandle,false);
  queryString="DROP TABLE IF EXISTS TEST_EXEC_ASYNC_THRIFT";
  executeQuery(queryString,sessHandle,false);
  queryString="CREATE TABLE TEST_EXEC_ASYNC_THRIFT(ID STRING)";
  executeQuery(queryString,sessHandle,false);
  queryString="SELECT ID FROM TEST_EXEC_ASYNC_THRIFT";
  System.out.println("Will attempt to execute: " + queryString);
  TExecuteStatementResp execResp=executeQuery(queryString,sessHandle,true);
  TOperationHandle operationHandle=execResp.getOperationHandle();
  assertNotNull(operationHandle);
  boolean isQueryRunning=true;
  TGetOperationStatusReq opStatusReq;
  TGetOperationStatusResp opStatusResp=null;
  TOperationState state=null;
  long pollTimeout=System.currentTimeMillis() + 100000;
  while (isQueryRunning) {
    if (System.currentTimeMillis() > pollTimeout) {
      System.out.println("Polling timed out");
      break;
    }
    opStatusReq=new TGetOperationStatusReq();
    opStatusReq.setOperationHandle(operationHandle);
    assertNotNull(opStatusReq);
    opStatusResp=client.GetOperationStatus(opStatusReq);
    state=opStatusResp.getOperationState();
    System.out.println("Current state: " + state);
    if (state == TOperationState.CANCELED_STATE || state == TOperationState.CLOSED_STATE || state == TOperationState.FINISHED_STATE || state == TOperationState.ERROR_STATE) {
      isQueryRunning=false;
    }
    Thread.sleep(1000);
  }
  assertEquals("Query should be finished",TOperationState.FINISHED_STATE,state);
  queryString="CREATE TABLE NON_EXISTING_TAB (ID STRING) location 'hdfs://fooNN:10000/a/b/c'";
  System.out.println("Will attempt to execute: " + queryString);
  execResp=executeQuery(queryString,sessHandle,true);
  operationHandle=execResp.getOperationHandle();
  assertNotNull(operationHandle);
  isQueryRunning=true;
  while (isQueryRunning) {
    if (System.currentTimeMillis() > pollTimeout) {
      System.out.println("Polling timed out");
      break;
    }
    opStatusReq=new TGetOperationStatusReq();
    opStatusReq.setOperationHandle(operationHandle);
    assertNotNull(opStatusReq);
    opStatusResp=client.GetOperationStatus(opStatusReq);
    state=opStatusResp.getOperationState();
    System.out.println("Current state: " + state);
    if (state == TOperationState.CANCELED_STATE || state == TOperationState.CLOSED_STATE || state == TOperationState.FINISHED_STATE || state == TOperationState.ERROR_STATE) {
      isQueryRunning=false;
    }
    Thread.sleep(1000);
  }
  assertEquals("Operation should be in error state",TOperationState.ERROR_STATE,state);
  assertEquals(opStatusResp.getSqlState(),"08S01");
  assertEquals(opStatusResp.getErrorCode(),1);
  queryString="DROP TABLE TEST_EXEC_ASYNC_THRIFT";
  executeQuery(queryString,sessHandle,false);
  TCloseSessionReq closeReq=new TCloseSessionReq(sessHandle);
  client.CloseSession(closeReq);
}
