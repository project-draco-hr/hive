{
  Map<String,String> opConf=new HashMap<String,String>();
  SessionHandle sessHandle=client.openSession(USERNAME,PASSWORD,opConf);
  assertNotNull("Session handle should not be null",sessHandle);
  OperationHandle opHandle;
  OperationStatus opStatus;
  OperationState state=null;
  String queryString="SET hive.lock.manager=" + "org.apache.hadoop.hive.ql.lockmgr.EmbeddedLockManager";
  client.executeStatement(sessHandle,queryString,opConf);
  queryString="DROP TABLE IF EXISTS TEST_EXEC_ASYNC_THRIFT";
  client.executeStatement(sessHandle,queryString,opConf);
  queryString="CREATE TABLE TEST_EXEC_ASYNC_THRIFT(ID STRING)";
  client.executeStatement(sessHandle,queryString,opConf);
  queryString="SELECT ID FROM TEST_EXEC_ASYNC_THRIFT";
  System.out.println("Will attempt to execute: " + queryString);
  opHandle=client.executeStatementAsync(sessHandle,queryString,opConf);
  assertNotNull(opHandle);
  boolean isQueryRunning=true;
  long pollTimeout=System.currentTimeMillis() + 100000;
  while (isQueryRunning) {
    if (System.currentTimeMillis() > pollTimeout) {
      System.out.println("Polling timed out");
      break;
    }
    opStatus=client.getOperationStatus(opHandle);
    assertNotNull(opStatus);
    state=opStatus.getState();
    System.out.println("Current state: " + state);
    if (state == OperationState.CANCELED || state == OperationState.CLOSED || state == OperationState.FINISHED || state == OperationState.ERROR) {
      isQueryRunning=false;
    }
    Thread.sleep(1000);
  }
  assertEquals("Query should be finished",OperationState.FINISHED,state);
  queryString="CREATE TABLE NON_EXISTING_TAB (ID STRING) location 'hdfs://localhost:10000/a/b/c'";
  System.out.println("Will attempt to execute: " + queryString);
  opHandle=client.executeStatementAsync(sessHandle,queryString,opConf);
  assertNotNull(opHandle);
  opStatus=client.getOperationStatus(opHandle);
  assertNotNull(opStatus);
  isQueryRunning=true;
  while (isQueryRunning) {
    if (System.currentTimeMillis() > pollTimeout) {
      System.out.println("Polling timed out");
      break;
    }
    state=opStatus.getState();
    System.out.println("Current state: " + state);
    if (state == OperationState.CANCELED || state == OperationState.CLOSED || state == OperationState.FINISHED || state == OperationState.ERROR) {
      isQueryRunning=false;
    }
    Thread.sleep(1000);
    opStatus=client.getOperationStatus(opHandle);
  }
  assertEquals("Operation should be in error state",OperationState.ERROR,state);
  assertEquals(opStatus.getOperationException().getSQLState(),"08S01");
  assertEquals(opStatus.getOperationException().getErrorCode(),1);
  queryString="DROP TABLE TEST_EXEC_ASYNC_THRIFT";
  client.executeStatement(sessHandle,queryString,opConf);
  client.closeSession(sessHandle);
}
