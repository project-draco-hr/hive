{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  BitSet incoming=iprot.readBitSet(3);
  if (incoming.get(0)) {
{
      org.apache.thrift.protocol.TMap _map57=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.LIST,iprot.readI32());
      struct.userPrivileges=new HashMap<String,List<PrivilegeGrantInfo>>(2 * _map57.size);
      String _key58;
      List<PrivilegeGrantInfo> _val59;
      for (int _i60=0; _i60 < _map57.size; ++_i60) {
        _key58=iprot.readString();
{
          org.apache.thrift.protocol.TList _list61=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
          _val59=new ArrayList<PrivilegeGrantInfo>(_list61.size);
          PrivilegeGrantInfo _elem62;
          for (int _i63=0; _i63 < _list61.size; ++_i63) {
            _elem62=new PrivilegeGrantInfo();
            _elem62.read(iprot);
            _val59.add(_elem62);
          }
        }
        struct.userPrivileges.put(_key58,_val59);
      }
    }
    struct.setUserPrivilegesIsSet(true);
  }
  if (incoming.get(1)) {
{
      org.apache.thrift.protocol.TMap _map64=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.LIST,iprot.readI32());
      struct.groupPrivileges=new HashMap<String,List<PrivilegeGrantInfo>>(2 * _map64.size);
      String _key65;
      List<PrivilegeGrantInfo> _val66;
      for (int _i67=0; _i67 < _map64.size; ++_i67) {
        _key65=iprot.readString();
{
          org.apache.thrift.protocol.TList _list68=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
          _val66=new ArrayList<PrivilegeGrantInfo>(_list68.size);
          PrivilegeGrantInfo _elem69;
          for (int _i70=0; _i70 < _list68.size; ++_i70) {
            _elem69=new PrivilegeGrantInfo();
            _elem69.read(iprot);
            _val66.add(_elem69);
          }
        }
        struct.groupPrivileges.put(_key65,_val66);
      }
    }
    struct.setGroupPrivilegesIsSet(true);
  }
  if (incoming.get(2)) {
{
      org.apache.thrift.protocol.TMap _map71=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.LIST,iprot.readI32());
      struct.rolePrivileges=new HashMap<String,List<PrivilegeGrantInfo>>(2 * _map71.size);
      String _key72;
      List<PrivilegeGrantInfo> _val73;
      for (int _i74=0; _i74 < _map71.size; ++_i74) {
        _key72=iprot.readString();
{
          org.apache.thrift.protocol.TList _list75=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
          _val73=new ArrayList<PrivilegeGrantInfo>(_list75.size);
          PrivilegeGrantInfo _elem76;
          for (int _i77=0; _i77 < _list75.size; ++_i77) {
            _elem76=new PrivilegeGrantInfo();
            _elem76.read(iprot);
            _val73.add(_elem76);
          }
        }
        struct.rolePrivileges.put(_key72,_val73);
      }
    }
    struct.setRolePrivilegesIsSet(true);
  }
}
