{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map24=iprot.readMapBegin();
          struct.userPrivileges=new HashMap<String,List<PrivilegeGrantInfo>>(2 * _map24.size);
          for (int _i25=0; _i25 < _map24.size; ++_i25) {
            String _key26;
            List<PrivilegeGrantInfo> _val27;
            _key26=iprot.readString();
{
              org.apache.thrift.protocol.TList _list28=iprot.readListBegin();
              _val27=new ArrayList<PrivilegeGrantInfo>(_list28.size);
              for (int _i29=0; _i29 < _list28.size; ++_i29) {
                PrivilegeGrantInfo _elem30;
                _elem30=new PrivilegeGrantInfo();
                _elem30.read(iprot);
                _val27.add(_elem30);
              }
              iprot.readListEnd();
            }
            struct.userPrivileges.put(_key26,_val27);
          }
          iprot.readMapEnd();
        }
        struct.setUserPrivilegesIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map31=iprot.readMapBegin();
      struct.groupPrivileges=new HashMap<String,List<PrivilegeGrantInfo>>(2 * _map31.size);
      for (int _i32=0; _i32 < _map31.size; ++_i32) {
        String _key33;
        List<PrivilegeGrantInfo> _val34;
        _key33=iprot.readString();
{
          org.apache.thrift.protocol.TList _list35=iprot.readListBegin();
          _val34=new ArrayList<PrivilegeGrantInfo>(_list35.size);
          for (int _i36=0; _i36 < _list35.size; ++_i36) {
            PrivilegeGrantInfo _elem37;
            _elem37=new PrivilegeGrantInfo();
            _elem37.read(iprot);
            _val34.add(_elem37);
          }
          iprot.readListEnd();
        }
        struct.groupPrivileges.put(_key33,_val34);
      }
      iprot.readMapEnd();
    }
    struct.setGroupPrivilegesIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map38=iprot.readMapBegin();
  struct.rolePrivileges=new HashMap<String,List<PrivilegeGrantInfo>>(2 * _map38.size);
  for (int _i39=0; _i39 < _map38.size; ++_i39) {
    String _key40;
    List<PrivilegeGrantInfo> _val41;
    _key40=iprot.readString();
{
      org.apache.thrift.protocol.TList _list42=iprot.readListBegin();
      _val41=new ArrayList<PrivilegeGrantInfo>(_list42.size);
      for (int _i43=0; _i43 < _list42.size; ++_i43) {
        PrivilegeGrantInfo _elem44;
        _elem44=new PrivilegeGrantInfo();
        _elem44.read(iprot);
        _val41.add(_elem44);
      }
      iprot.readListEnd();
    }
    struct.rolePrivileges.put(_key40,_val41);
  }
  iprot.readMapEnd();
}
struct.setRolePrivilegesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
