{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map24=iprot.readMapBegin();
          struct.userPrivileges=new HashMap<String,List<PrivilegeGrantInfo>>(2 * _map24.size);
          String _key25;
          List<PrivilegeGrantInfo> _val26;
          for (int _i27=0; _i27 < _map24.size; ++_i27) {
            _key25=iprot.readString();
{
              org.apache.thrift.protocol.TList _list28=iprot.readListBegin();
              _val26=new ArrayList<PrivilegeGrantInfo>(_list28.size);
              PrivilegeGrantInfo _elem29;
              for (int _i30=0; _i30 < _list28.size; ++_i30) {
                _elem29=new PrivilegeGrantInfo();
                _elem29.read(iprot);
                _val26.add(_elem29);
              }
              iprot.readListEnd();
            }
            struct.userPrivileges.put(_key25,_val26);
          }
          iprot.readMapEnd();
        }
        struct.setUserPrivilegesIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map31=iprot.readMapBegin();
      struct.groupPrivileges=new HashMap<String,List<PrivilegeGrantInfo>>(2 * _map31.size);
      String _key32;
      List<PrivilegeGrantInfo> _val33;
      for (int _i34=0; _i34 < _map31.size; ++_i34) {
        _key32=iprot.readString();
{
          org.apache.thrift.protocol.TList _list35=iprot.readListBegin();
          _val33=new ArrayList<PrivilegeGrantInfo>(_list35.size);
          PrivilegeGrantInfo _elem36;
          for (int _i37=0; _i37 < _list35.size; ++_i37) {
            _elem36=new PrivilegeGrantInfo();
            _elem36.read(iprot);
            _val33.add(_elem36);
          }
          iprot.readListEnd();
        }
        struct.groupPrivileges.put(_key32,_val33);
      }
      iprot.readMapEnd();
    }
    struct.setGroupPrivilegesIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map38=iprot.readMapBegin();
  struct.rolePrivileges=new HashMap<String,List<PrivilegeGrantInfo>>(2 * _map38.size);
  String _key39;
  List<PrivilegeGrantInfo> _val40;
  for (int _i41=0; _i41 < _map38.size; ++_i41) {
    _key39=iprot.readString();
{
      org.apache.thrift.protocol.TList _list42=iprot.readListBegin();
      _val40=new ArrayList<PrivilegeGrantInfo>(_list42.size);
      PrivilegeGrantInfo _elem43;
      for (int _i44=0; _i44 < _list42.size; ++_i44) {
        _elem43=new PrivilegeGrantInfo();
        _elem43.read(iprot);
        _val40.add(_elem43);
      }
      iprot.readListEnd();
    }
    struct.rolePrivileges.put(_key39,_val40);
  }
  iprot.readMapEnd();
}
struct.setRolePrivilegesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
