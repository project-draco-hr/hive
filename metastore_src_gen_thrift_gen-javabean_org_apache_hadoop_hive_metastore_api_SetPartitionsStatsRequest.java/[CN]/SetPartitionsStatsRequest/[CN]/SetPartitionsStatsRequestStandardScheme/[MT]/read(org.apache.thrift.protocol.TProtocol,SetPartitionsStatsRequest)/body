{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
          org.apache.thrift.protocol.TList _list286=iprot.readListBegin();
          struct.colStats=new ArrayList<ColumnStatistics>(_list286.size);
          ColumnStatistics _elem287;
          for (int _i288=0; _i288 < _list286.size; ++_i288) {
            _elem287=new ColumnStatistics();
            _elem287.read(iprot);
            struct.colStats.add(_elem287);
          }
          iprot.readListEnd();
        }
        struct.setColStatsIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
    struct.needMerge=iprot.readBool();
    struct.setNeedMergeIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
