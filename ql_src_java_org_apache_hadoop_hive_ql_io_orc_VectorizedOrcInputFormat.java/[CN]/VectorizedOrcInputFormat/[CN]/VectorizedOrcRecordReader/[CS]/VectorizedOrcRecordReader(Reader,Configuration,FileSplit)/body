{
  boolean isAcidRead=HiveConf.getBoolVar(conf,ConfVars.HIVE_TRANSACTIONAL_TABLE_SCAN);
  if (isAcidRead) {
    OrcInputFormat.raiseAcidTablesMustBeReadWithAcidReaderException(conf);
  }
  rbCtx=Utilities.getVectorizedRowBatchCtx(conf);
  List<OrcProto.Type> types=file.getTypes();
  int dataColumns=rbCtx.getDataColumnCount();
  TypeDescription schema=OrcInputFormat.getDesiredRowTypeDescr(conf,false,dataColumns);
  if (schema == null) {
    schema=file.getSchema();
    if (schema.getCategory() == TypeDescription.Category.STRUCT && schema.getChildren().size() > dataColumns) {
      schema=schema.clone();
      List<TypeDescription> children=schema.getChildren();
      for (int c=children.size() - 1; c >= dataColumns; --c) {
        children.remove(c);
      }
    }
  }
  Reader.Options options=new Reader.Options().schema(schema);
  this.offset=fileSplit.getStart();
  this.length=fileSplit.getLength();
  options.range(offset,length);
  options.include(OrcInputFormat.genIncludedColumns(types,conf,true));
  OrcInputFormat.setSearchArgument(options,types,conf,true);
  this.reader=file.rowsOptions(options);
  columnsToIncludeTruncated=rbCtx.getColumnsToIncludeTruncated(conf);
  int partitionColumnCount=rbCtx.getPartitionColumnCount();
  if (partitionColumnCount > 0) {
    partitionValues=new Object[partitionColumnCount];
    rbCtx.getPartitionValues(rbCtx,conf,fileSplit,partitionValues);
  }
 else {
    partitionValues=null;
  }
}
