{
  try {
    hiveAuthFactory=new HiveAuthFactory();
    TTransportFactory transportFactory=hiveAuthFactory.getAuthTransFactory();
    TProcessorFactory processorFactory=hiveAuthFactory.getAuthProcFactory(this);
    String portString=System.getenv("HIVE_SERVER2_THRIFT_PORT");
    if (portString != null) {
      portNum=Integer.valueOf(portString);
    }
 else {
      portNum=hiveConf.getIntVar(ConfVars.HIVE_SERVER2_THRIFT_PORT);
    }
    String hiveHost=System.getenv("HIVE_SERVER2_THRIFT_BIND_HOST");
    if (hiveHost == null) {
      hiveHost=hiveConf.getVar(ConfVars.HIVE_SERVER2_THRIFT_BIND_HOST);
    }
    if (hiveHost != null && !hiveHost.isEmpty()) {
      serverAddress=new InetSocketAddress(hiveHost,portNum);
    }
 else {
      serverAddress=new InetSocketAddress(portNum);
    }
    minWorkerThreads=hiveConf.getIntVar(ConfVars.HIVE_SERVER2_THRIFT_MIN_WORKER_THREADS);
    maxWorkerThreads=hiveConf.getIntVar(ConfVars.HIVE_SERVER2_THRIFT_MAX_WORKER_THREADS);
    TThreadPoolServer.Args sargs=new TThreadPoolServer.Args(new TServerSocket(serverAddress)).processorFactory(processorFactory).transportFactory(transportFactory).protocolFactory(new TBinaryProtocol.Factory()).minWorkerThreads(minWorkerThreads).maxWorkerThreads(maxWorkerThreads);
    server=new TThreadPoolServer(sargs);
    LOG.info("ThriftCLIService listening on " + serverAddress);
    server.serve();
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}
