{
  String inputFormat=null, outputFormat=null;
  tableName=BaseSemanticAnalyzer.unescapeIdentifier(((ASTNode)ast.getChild(0)).getChild(0).getText());
  ASTNode child=(ASTNode)((ASTNode)ast.getChild(1)).getChild(0);
switch (child.getToken().getType()) {
case HiveParser.TOK_TABLEFILEFORMAT:
    inputFormat=BaseSemanticAnalyzer.unescapeSQLString(((ASTNode)child.getChild(0)).getToken().getText());
  outputFormat=BaseSemanticAnalyzer.unescapeSQLString(((ASTNode)child.getChild(1)).getToken().getText());
inDriver=BaseSemanticAnalyzer.unescapeSQLString(((ASTNode)child.getChild(2)).getToken().getText());
outDriver=BaseSemanticAnalyzer.unescapeSQLString(((ASTNode)child.getChild(3)).getToken().getText());
break;
case HiveParser.TOK_TBLSEQUENCEFILE:
throw new SemanticException("Operation not supported. HCatalog doesn't support Sequence File by default yet. " + "You may specify it through INPUT/OUTPUT storage drivers.");
case HiveParser.TOK_TBLTEXTFILE:
inputFormat=org.apache.hadoop.mapred.TextInputFormat.class.getName();
outputFormat=org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat.class.getName();
inDriver=org.apache.hcatalog.pig.drivers.LoadFuncBasedInputDriver.class.getName();
outDriver=org.apache.hcatalog.pig.drivers.StoreFuncBasedOutputDriver.class.getName();
loader=HCatConstants.HCAT_PIG_STORAGE_CLASS;
storer=HCatConstants.HCAT_PIG_STORAGE_CLASS;
break;
case HiveParser.TOK_TBLRCFILE:
inputFormat=RCFileInputFormat.class.getName();
outputFormat=RCFileOutputFormat.class.getName();
inDriver=RCFileInputDriver.class.getName();
outDriver=RCFileOutputDriver.class.getName();
break;
}
if (inputFormat == null || outputFormat == null || inDriver == null || outDriver == null) {
throw new SemanticException("File format specification in command Alter Table file format is incorrect.");
}
return ast;
}
