{
  Context ctx=new Context(cluster,schema,sA,pCtx);
  Map<Rule,NodeProcessor> rules=ImmutableMap.<Rule,NodeProcessor>builder().put(new RuleRegExp("R1",TableScanOperator.getOperatorName() + "%"),new TableScanProcessor()).put(new RuleRegExp("R2",FilterOperator.getOperatorName() + "%"),new FilterProcessor()).put(new RuleRegExp("R3",SelectOperator.getOperatorName() + "%"),new SelectProcessor()).put(new RuleRegExp("R4",JoinOperator.getOperatorName() + "%"),new JoinProcessor()).put(new RuleRegExp("R5",LimitOperator.getOperatorName() + "%"),new LimitProcessor()).put(new RuleRegExp("R6",GroupByOperator.getOperatorName() + "%"),new GroupByProcessor()).put(new RuleRegExp("R7",ReduceSinkOperator.getOperatorName() + "%"),new ReduceSinkProcessor()).build();
  Dispatcher disp=new DefaultRuleDispatcher(new DefaultProcessor(),rules,ctx);
  GraphWalker egw=new ForwardWalker(disp);
  ArrayList<Node> topNodes=new ArrayList<Node>();
  topNodes.addAll(pCtx.getTopOps().values());
  HashMap<Node,Object> outputMap=new HashMap<Node,Object>();
  try {
    egw.startWalking(topNodes,outputMap);
  }
 catch (  SemanticException se) {
    throw new RuntimeException(se);
  }
  return (HiveRel)outputMap.get(sinkOp);
}
