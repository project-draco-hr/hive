{
  HiveJoinRel joinRel;
  Operator<? extends OperatorDesc> leftParent=op.getParentOperators().get(jc.getLeft());
  Operator<? extends OperatorDesc> rightParent=op.getParentOperators().get(jc.getRight());
  if (leftParent instanceof ReduceSinkOperator && rightParent instanceof ReduceSinkOperator) {
    List<ExprNodeDesc> leftCols=((ReduceSinkDesc)(leftParent.getConf())).getKeyCols();
    List<ExprNodeDesc> rightCols=((ReduceSinkDesc)(rightParent.getConf())).getKeyCols();
    RexNode joinPredicate=null;
    JoinRelType joinType=JoinRelType.INNER;
    int rightColOffSet=leftRel.getRowType().getFieldCount();
switch (jc.getType()) {
case JoinDesc.INNER_JOIN:
      joinType=JoinRelType.INNER;
    break;
case JoinDesc.LEFT_OUTER_JOIN:
  joinType=JoinRelType.LEFT;
break;
case JoinDesc.RIGHT_OUTER_JOIN:
joinType=JoinRelType.RIGHT;
break;
case JoinDesc.FULL_OUTER_JOIN:
joinType=JoinRelType.FULL;
break;
}
int i=0;
for (ExprNodeDesc expr : leftCols) {
List<RexNode> eqExpr=new LinkedList<RexNode>();
eqExpr.add(ctx.convertToOptiqExpr(expr,leftRel,0,false));
eqExpr.add(ctx.convertToOptiqExpr(rightCols.get(i),rightRel,rightColOffSet,false));
RexNode eqOp=ctx.cluster.getRexBuilder().makeCall(SqlStdOperatorTable.EQUALS,eqExpr);
i++;
if (joinPredicate == null) {
joinPredicate=eqOp;
}
 else {
List<RexNode> conjElements=new LinkedList<RexNode>();
conjElements.add(joinPredicate);
conjElements.add(eqOp);
joinPredicate=ctx.cluster.getRexBuilder().makeCall(SqlStdOperatorTable.AND,conjElements);
}
}
Set<Entry<Byte,List<ExprNodeDesc>>> filterExprSet=op.getConf().getFilters().entrySet();
if (!filterExprSet.isEmpty()) {
RexNode eqExpr;
int colOffSet;
RelNode childRel;
Operator parentHiveOp;
int inputId;
for (Entry<Byte,List<ExprNodeDesc>> entry : filterExprSet) {
inputId=entry.getKey().intValue();
if (inputId == 0) {
colOffSet=0;
childRel=leftRel;
parentHiveOp=leftParent;
}
 else if (inputId == 1) {
colOffSet=rightColOffSet;
childRel=rightRel;
parentHiveOp=rightParent;
}
 else {
throw new RuntimeException("Invalid Join Input");
}
for (ExprNodeDesc expr : entry.getValue()) {
eqExpr=ctx.convertToOptiqExpr(expr,childRel,colOffSet,false);
List<RexNode> conjElements=new LinkedList<RexNode>();
conjElements.add(joinPredicate);
conjElements.add(eqExpr);
joinPredicate=ctx.cluster.getRexBuilder().makeCall(SqlStdOperatorTable.AND,conjElements);
}
}
}
joinRel=HiveJoinRel.getJoin(ctx.cluster,leftRel,rightRel,joinPredicate,joinType);
}
 else {
throw new RuntimeException("Right & Left of Join Condition columns are not equal");
}
return joinRel;
}
