{
  ObjectInspector objectInspector=primitiveObjectInspectorList.get(column);
  PrimitiveCategory primitiveCategory=primitiveCategories[column];
  PrimitiveTypeInfo primitiveTypeInfo=primitiveTypeInfos[column];
switch (primitiveCategory) {
case BOOLEAN:
    return ((WritableBooleanObjectInspector)objectInspector).create((boolean)object);
case BYTE:
  return ((WritableByteObjectInspector)objectInspector).create((byte)object);
case SHORT:
return ((WritableShortObjectInspector)objectInspector).create((short)object);
case INT:
return ((WritableIntObjectInspector)objectInspector).create((int)object);
case LONG:
return ((WritableLongObjectInspector)objectInspector).create((long)object);
case DATE:
return ((WritableDateObjectInspector)objectInspector).create((Date)object);
case FLOAT:
return ((WritableFloatObjectInspector)objectInspector).create((float)object);
case DOUBLE:
return ((WritableDoubleObjectInspector)objectInspector).create((double)object);
case STRING:
return ((WritableStringObjectInspector)objectInspector).create((String)object);
case CHAR:
{
WritableHiveCharObjectInspector writableCharObjectInspector=new WritableHiveCharObjectInspector((CharTypeInfo)primitiveTypeInfo);
return writableCharObjectInspector.create(new HiveChar(StringUtils.EMPTY,-1));
}
case VARCHAR:
{
WritableHiveVarcharObjectInspector writableVarcharObjectInspector=new WritableHiveVarcharObjectInspector((VarcharTypeInfo)primitiveTypeInfo);
return writableVarcharObjectInspector.create(new HiveVarchar(StringUtils.EMPTY,-1));
}
case BINARY:
return PrimitiveObjectInspectorFactory.writableBinaryObjectInspector.create(ArrayUtils.EMPTY_BYTE_ARRAY);
case TIMESTAMP:
return ((WritableTimestampObjectInspector)objectInspector).create(new Timestamp(0));
case INTERVAL_YEAR_MONTH:
return ((WritableHiveIntervalYearMonthObjectInspector)objectInspector).create(new HiveIntervalYearMonth(0));
case INTERVAL_DAY_TIME:
return ((WritableHiveIntervalDayTimeObjectInspector)objectInspector).create(new HiveIntervalDayTime(0,0));
case DECIMAL:
{
WritableHiveDecimalObjectInspector writableDecimalObjectInspector=new WritableHiveDecimalObjectInspector((DecimalTypeInfo)primitiveTypeInfo);
return writableDecimalObjectInspector.create(HiveDecimal.ZERO);
}
default :
throw new Error("Unknown primitive category " + primitiveCategory);
}
}
