{
  List<String> columns=Arrays.asList("row","1","2","3");
  List<TypeInfo> types=Arrays.<TypeInfo>asList(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.STRING_TYPE_NAME),TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.STRING_TYPE_NAME),TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.STRING_TYPE_NAME),TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.STRING_TYPE_NAME));
  LazySimpleStructObjectInspector objectInspector=(LazySimpleStructObjectInspector)LazyFactory.createLazyStructInspector(columns,types,LazySimpleSerDe.DefaultSeparators,new Text("\\N"),false,false,(byte)'\\');
  DefaultAccumuloRowIdFactory rowIdFactory=new DefaultAccumuloRowIdFactory();
  Properties props=new Properties();
  props.setProperty(AccumuloSerDeParameters.COLUMN_MAPPINGS,":rowid,cf:cq1,cf:cq2,cf:cq3");
  props.setProperty(serdeConstants.LIST_COLUMNS,Joiner.on(',').join(columns));
  props.setProperty(serdeConstants.LIST_COLUMN_TYPES,Joiner.on(',').join(types));
  AccumuloSerDeParameters params=new AccumuloSerDeParameters(new Configuration(),props,AccumuloSerDe.class.getName());
  rowIdFactory.init(params,props);
  ColumnMapper columnMapper=params.getColumnMapper();
  LazyAccumuloRow lazyRow=new LazyAccumuloRow(objectInspector);
  AccumuloHiveRow hiveRow=new AccumuloHiveRow("1");
  hiveRow.add("cf","cq1","foo".getBytes());
  hiveRow.add("cf","cq3","bar".getBytes());
  lazyRow.init(hiveRow,columnMapper.getColumnMappings(),rowIdFactory);
  Assert.assertEquals("{'row':'1','1':'foo','2':null,'3':'bar'}".replace('\'','"'),SerDeUtils.getJSONString(lazyRow,objectInspector));
  Assert.assertEquals("{'row':'1','1':'foo','2':null,'3':'bar'}".replace('\'','"'),SerDeUtils.getJSONString(lazyRow,objectInspector));
}
