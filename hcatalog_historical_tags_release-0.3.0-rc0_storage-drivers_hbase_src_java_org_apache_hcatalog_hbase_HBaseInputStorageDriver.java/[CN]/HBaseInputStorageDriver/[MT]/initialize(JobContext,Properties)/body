{
  jobConf=context.getConfiguration();
  String jobString=jobConf.get(HCatConstants.HCAT_KEY_JOB_INFO);
  if (jobString == null) {
    throw new IOException("InputJobInfo information not found in JobContext. " + "HCatInputFormat.setInput() not called?");
  }
  inpJobInfo=(InputJobInfo)HCatUtil.deserialize(jobString);
  dataSchema=inpJobInfo.getTableInfo().getDataColumns();
  List<FieldSchema> fields=HCatUtil.getFieldSchemaList(dataSchema.getFields());
  hcatProperties.setProperty(Constants.LIST_COLUMNS,MetaStoreUtils.getColumnNamesFromFieldSchema(fields));
  hcatProperties.setProperty(Constants.LIST_COLUMN_TYPES,MetaStoreUtils.getColumnTypesFromFieldSchema(fields));
  converter=new HBaseSerDeResultConverter(dataSchema,outputColSchema,hcatProperties);
  scanColumns=converter.getHBaseScanColumns();
  String hbaseTableName=HBaseHCatStorageHandler.getFullyQualifiedName(inpJobInfo.getTableInfo());
  String serSnapshot=(String)inpJobInfo.getProperties().get(HBaseConstants.PROPERTY_TABLE_SNAPSHOT_KEY);
  if (serSnapshot == null) {
    snapshot=HBaseHCatStorageHandler.createSnapshot(jobConf,hbaseTableName);
    inpJobInfo.getProperties().setProperty(HBaseConstants.PROPERTY_TABLE_SNAPSHOT_KEY,HCatUtil.serialize(snapshot));
  }
  context.getConfiguration().set(HCatConstants.HCAT_KEY_JOB_INFO,HCatUtil.serialize(inpJobInfo));
}
