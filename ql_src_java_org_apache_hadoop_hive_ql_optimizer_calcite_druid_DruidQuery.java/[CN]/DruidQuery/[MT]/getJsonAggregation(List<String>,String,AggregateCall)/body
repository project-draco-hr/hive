{
  final List<String> list=new ArrayList<>();
  for (  Integer arg : aggCall.getArgList()) {
    list.add(fieldNames.get(arg));
  }
  final String only=Iterables.getFirst(list,null);
  final boolean b=aggCall.getType().getSqlTypeName() == SqlTypeName.DOUBLE;
switch (aggCall.getAggregation().getKind()) {
case COUNT:
    if (aggCall.isDistinct()) {
      return new JsonCardinalityAggregation("cardinality",name,list);
    }
  return new JsonAggregation("count",name,only);
case SUM:
case SUM0:
return new JsonAggregation(b ? "doubleSum" : "longSum",name,only);
case MIN:
return new JsonAggregation(b ? "doubleMin" : "longMin",name,only);
case MAX:
return new JsonAggregation(b ? "doubleMax" : "longMax",name,only);
default :
throw new AssertionError("unknown aggregate " + aggCall);
}
}
