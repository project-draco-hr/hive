{
  RexCall call;
switch (e.getKind()) {
case EQUALS:
case NOT_EQUALS:
case GREATER_THAN:
case GREATER_THAN_OR_EQUAL:
case LESS_THAN:
case LESS_THAN_OR_EQUAL:
    call=(RexCall)e;
  int posRef;
int posConstant;
if (RexUtil.isConstant(call.getOperands().get(1))) {
posRef=0;
posConstant=1;
}
 else if (RexUtil.isConstant(call.getOperands().get(0))) {
posRef=1;
posConstant=0;
}
 else {
throw new AssertionError("it is not a valid comparison: " + e);
}
switch (e.getKind()) {
case EQUALS:
return new JsonSelector("selector",tr(e,posRef),tr(e,posConstant));
case NOT_EQUALS:
return new JsonCompositeFilter("not",ImmutableList.of(new JsonSelector("selector",tr(e,posRef),tr(e,posConstant))));
case GREATER_THAN:
return new JsonBound("bound",tr(e,posRef),tr(e,posConstant),true,null,false,false);
case GREATER_THAN_OR_EQUAL:
return new JsonBound("bound",tr(e,posRef),tr(e,posConstant),false,null,false,false);
case LESS_THAN:
return new JsonBound("bound",tr(e,posRef),null,false,tr(e,posConstant),true,false);
case LESS_THAN_OR_EQUAL:
return new JsonBound("bound",tr(e,posRef),null,false,tr(e,posConstant),false,false);
}
case AND:
case OR:
case NOT:
call=(RexCall)e;
return new JsonCompositeFilter(e.getKind().toString().toLowerCase(),translateFilters(call.getOperands()));
default :
throw new AssertionError("cannot translate filter: " + e);
}
}
