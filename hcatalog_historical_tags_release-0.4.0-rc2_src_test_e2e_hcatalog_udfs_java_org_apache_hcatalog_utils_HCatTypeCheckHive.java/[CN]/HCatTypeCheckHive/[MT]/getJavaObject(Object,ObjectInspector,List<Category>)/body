{
  if (categories != null) {
    categories.add(oi.getCategory());
  }
  if (oi.getCategory() == ObjectInspector.Category.LIST) {
    List<?> l=((ListObjectInspector)oi).getList(o);
    List<Object> result=new ArrayList<Object>();
    ObjectInspector elemOI=((ListObjectInspector)oi).getListElementObjectInspector();
    for (    Object lo : l) {
      result.add(getJavaObject(lo,elemOI,categories));
    }
    return result;
  }
 else   if (oi.getCategory() == ObjectInspector.Category.MAP) {
    Map<?,?> m=((MapObjectInspector)oi).getMap(o);
    Map<String,String> result=new HashMap<String,String>();
    ObjectInspector koi=((MapObjectInspector)oi).getMapKeyObjectInspector();
    ObjectInspector voi=((MapObjectInspector)oi).getMapValueObjectInspector();
    for (    Entry<?,?> e : m.entrySet()) {
      result.put((String)getJavaObject(e.getKey(),koi,null),(String)getJavaObject(e.getValue(),voi,null));
    }
    return result;
  }
 else   if (oi.getCategory() == ObjectInspector.Category.STRUCT) {
    List<Object> s=((StructObjectInspector)oi).getStructFieldsDataAsList(o);
    List<? extends StructField> sf=((StructObjectInspector)oi).getAllStructFieldRefs();
    List<Object> result=new ArrayList<Object>();
    for (int i=0; i < s.size(); i++) {
      result.add(getJavaObject(s.get(i),sf.get(i).getFieldObjectInspector(),categories));
    }
    return result;
  }
 else   if (oi.getCategory() == ObjectInspector.Category.PRIMITIVE) {
    return ((PrimitiveObjectInspector)oi).getPrimitiveJavaObject(o);
  }
  throw new RuntimeException("Unexpected error!");
}
