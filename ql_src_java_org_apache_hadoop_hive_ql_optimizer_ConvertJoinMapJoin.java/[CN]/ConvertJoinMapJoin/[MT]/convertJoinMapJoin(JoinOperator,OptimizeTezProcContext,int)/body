{
  for (  Operator<? extends OperatorDesc> parentOp : joinOp.getParentOperators()) {
    if (parentOp instanceof MuxOperator) {
      return null;
    }
  }
  MapJoinOperator mapJoinOp=MapJoinProcessor.convertJoinOpMapJoinOp(context.conf,joinOp,joinOp.getConf().isLeftInputJoin(),joinOp.getConf().getBaseSrc(),joinOp.getConf().getMapAliases(),bigTablePosition,true);
  mapJoinOp.getConf().setHybridHashJoin(HiveConf.getBoolVar(context.conf,HiveConf.ConfVars.HIVEUSEHYBRIDGRACEHASHJOIN));
  Operator<? extends OperatorDesc> parentBigTableOp=mapJoinOp.getParentOperators().get(bigTablePosition);
  if (parentBigTableOp instanceof ReduceSinkOperator) {
    for (    Operator<?> p : parentBigTableOp.getParentOperators()) {
      Set<Operator<?>> dynamicPartitionOperators=new HashSet<Operator<?>>();
      Map<Operator<?>,AppMasterEventOperator> opEventPairs=new HashMap<>();
      for (      Operator<?> c : p.getChildOperators()) {
        AppMasterEventOperator event=findDynamicPartitionBroadcast(c);
        if (event != null) {
          dynamicPartitionOperators.add(c);
          opEventPairs.put(c,event);
        }
      }
      for (      Operator<?> c : dynamicPartitionOperators) {
        if (context.pruningOpsRemovedByPriorOpt.isEmpty() || !context.pruningOpsRemovedByPriorOpt.contains(opEventPairs.get(c))) {
          p.removeChild(c);
          LOG.info("Disabling dynamic pruning for: " + ((DynamicPruningEventDesc)opEventPairs.get(c).getConf()).getTableScan().getName() + ". Need to be removed together with reduce sink");
        }
      }
      for (      Operator<?> op : dynamicPartitionOperators) {
        context.pruningOpsRemovedByPriorOpt.add(opEventPairs.get(op));
      }
    }
    mapJoinOp.getParentOperators().remove(bigTablePosition);
    if (!(mapJoinOp.getParentOperators().contains(parentBigTableOp.getParentOperators().get(0)))) {
      mapJoinOp.getParentOperators().add(bigTablePosition,parentBigTableOp.getParentOperators().get(0));
    }
    parentBigTableOp.getParentOperators().get(0).removeChild(parentBigTableOp);
    for (    Operator<? extends OperatorDesc> op : mapJoinOp.getParentOperators()) {
      if (!(op.getChildOperators().contains(mapJoinOp))) {
        op.getChildOperators().add(mapJoinOp);
      }
      op.getChildOperators().remove(joinOp);
    }
  }
  return mapJoinOp;
}
