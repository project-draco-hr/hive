{
  if (joinOp.getConf().getConds().length > 1) {
    boolean hasOuter=false;
    for (    JoinCondDesc joinCondDesc : joinOp.getConf().getConds()) {
switch (joinCondDesc.getType()) {
case JoinDesc.INNER_JOIN:
case JoinDesc.LEFT_SEMI_JOIN:
case JoinDesc.UNIQUE_JOIN:
        hasOuter=false;
      break;
case JoinDesc.FULL_OUTER_JOIN:
case JoinDesc.LEFT_OUTER_JOIN:
case JoinDesc.RIGHT_OUTER_JOIN:
    hasOuter=true;
  break;
default :
throw new SemanticException("Unknown join type " + joinCondDesc.getType());
}
}
if (hasOuter) {
return -1;
}
}
Set<Integer> bigTableCandidateSet=MapJoinProcessor.getBigTableCandidates(joinOp.getConf().getConds());
long maxSize=context.conf.getLongVar(HiveConf.ConfVars.HIVECONVERTJOINNOCONDITIONALTASKTHRESHOLD);
int bigTablePosition=-1;
long bigInputCumulativeCardinality=-1L;
Statistics bigInputStat=null;
boolean foundInputNotFittingInMemory=false;
long totalSize=0;
for (int pos=0; pos < joinOp.getParentOperators().size(); pos++) {
Operator<? extends OperatorDesc> parentOp=joinOp.getParentOperators().get(pos);
Statistics currInputStat=parentOp.getStatistics();
if (currInputStat == null) {
LOG.warn("Couldn't get statistics from: " + parentOp);
return -1;
}
long inputSize=currInputStat.getDataSize();
boolean currentInputNotFittingInMemory=false;
if ((bigInputStat == null) || ((bigInputStat != null) && (inputSize > bigInputStat.getDataSize()))) {
if (foundInputNotFittingInMemory) {
return -1;
}
if (inputSize / buckets > maxSize) {
if (!bigTableCandidateSet.contains(pos)) {
return -1;
}
currentInputNotFittingInMemory=true;
foundInputNotFittingInMemory=true;
}
}
long currentInputCumulativeCardinality;
if (foundInputNotFittingInMemory) {
currentInputCumulativeCardinality=-1L;
}
 else {
Long cardinality=computeCumulativeCardinality(parentOp);
if (cardinality == null) {
return -1;
}
currentInputCumulativeCardinality=cardinality;
}
boolean selectedBigTable=bigTableCandidateSet.contains(pos) && (bigInputStat == null || currentInputNotFittingInMemory || (!foundInputNotFittingInMemory && (currentInputCumulativeCardinality > bigInputCumulativeCardinality || (currentInputCumulativeCardinality == bigInputCumulativeCardinality && inputSize > bigInputStat.getDataSize()))));
if (bigInputStat != null && selectedBigTable) {
totalSize+=bigInputStat.getDataSize();
}
 else if (!selectedBigTable) {
totalSize+=inputSize;
}
if (totalSize / buckets > maxSize) {
return -1;
}
if (selectedBigTable) {
bigTablePosition=pos;
bigInputCumulativeCardinality=currentInputCumulativeCardinality;
bigInputStat=currInputStat;
}
}
return bigTablePosition;
}
