{
  OptimizeTezProcContext context=(OptimizeTezProcContext)procCtx;
  JoinOperator joinOp=(JoinOperator)nd;
  TezBucketJoinProcCtx tezBucketJoinProcCtx=new TezBucketJoinProcCtx(context.conf);
  if (!context.conf.getBoolVar(HiveConf.ConfVars.HIVECONVERTJOIN)) {
    Object retval=checkAndConvertSMBJoin(context,joinOp,tezBucketJoinProcCtx);
    if (retval == null) {
      return retval;
    }
 else {
      fallbackToReduceSideJoin(joinOp,context);
    }
  }
  int numBuckets=-1;
  if (context.conf.getBoolVar(HiveConf.ConfVars.HIVE_CONVERT_JOIN_BUCKET_MAPJOIN_TEZ)) {
    numBuckets=estimateNumBuckets(joinOp,true);
  }
 else {
    numBuckets=1;
  }
  LOG.info("Estimated number of buckets " + numBuckets);
  int mapJoinConversionPos=getMapJoinConversionPos(joinOp,context,numBuckets);
  if (mapJoinConversionPos < 0) {
    Object retval=checkAndConvertSMBJoin(context,joinOp,tezBucketJoinProcCtx);
    if (retval == null) {
      return retval;
    }
 else {
      fallbackToReduceSideJoin(joinOp,context);
      return null;
    }
  }
  if (numBuckets > 1) {
    if (context.conf.getBoolVar(HiveConf.ConfVars.HIVE_CONVERT_JOIN_BUCKET_MAPJOIN_TEZ)) {
      if (convertJoinBucketMapJoin(joinOp,context,mapJoinConversionPos,tezBucketJoinProcCtx)) {
        return null;
      }
    }
  }
  LOG.info("Convert to non-bucketed map join");
  if (numBuckets != 1) {
    mapJoinConversionPos=getMapJoinConversionPos(joinOp,context,1);
  }
  if (mapJoinConversionPos < 0) {
    fallbackToReduceSideJoin(joinOp,context);
    return null;
  }
  MapJoinOperator mapJoinOp=convertJoinMapJoin(joinOp,context,mapJoinConversionPos,true);
  mapJoinOp.setOpTraits(new OpTraits(null,-1,null));
  mapJoinOp.setStatistics(joinOp.getStatistics());
  for (  Operator<? extends OperatorDesc> childOp : mapJoinOp.getChildOperators()) {
    setAllChildrenTraits(childOp,mapJoinOp.getOpTraits());
  }
  return null;
}
