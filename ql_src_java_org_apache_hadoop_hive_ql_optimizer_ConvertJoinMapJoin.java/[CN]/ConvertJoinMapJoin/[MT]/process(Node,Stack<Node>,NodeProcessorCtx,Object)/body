{
  OptimizeTezProcContext context=(OptimizeTezProcContext)procCtx;
  if (!context.conf.getBoolVar(HiveConf.ConfVars.HIVECONVERTJOIN)) {
    return null;
  }
  JoinOperator joinOp=(JoinOperator)nd;
  Set<Integer> bigTableCandidateSet=MapJoinProcessor.getBigTableCandidates(joinOp.getConf().getConds());
  long maxSize=context.conf.getLongVar(HiveConf.ConfVars.HIVECONVERTJOINNOCONDITIONALTASKTHRESHOLD);
  int bigTablePosition=-1;
  Statistics bigInputStat=null;
  long totalSize=0;
  int pos=0;
  boolean bigTableFound=false;
  for (  Operator<? extends OperatorDesc> parentOp : joinOp.getParentOperators()) {
    Statistics currInputStat=null;
    try {
      currInputStat=parentOp.getStatistics(context.conf);
    }
 catch (    HiveException e) {
      return null;
    }
    long inputSize=currInputStat.getNumberOfBytes();
    if ((bigInputStat == null) || ((bigInputStat != null) && (inputSize > bigInputStat.getNumberOfBytes()))) {
      if (bigTableFound) {
        return null;
      }
      if (inputSize > maxSize) {
        if (!bigTableCandidateSet.contains(pos)) {
          return null;
        }
        bigTableFound=true;
      }
      if (bigInputStat != null) {
        totalSize+=bigInputStat.getNumberOfBytes();
      }
      if (totalSize > maxSize) {
        return null;
      }
      if (bigTableCandidateSet.contains(pos)) {
        bigTablePosition=pos;
        bigInputStat=currInputStat;
      }
    }
 else {
      totalSize+=currInputStat.getNumberOfBytes();
      if (totalSize > maxSize) {
        return null;
      }
    }
    pos++;
  }
  if (bigTablePosition == -1) {
    return null;
  }
  ParseContext parseContext=context.parseContext;
  MapJoinOperator mapJoinOp=MapJoinProcessor.convertJoinOpMapJoinOp(context.conf,parseContext.getOpParseCtx(),joinOp,parseContext.getJoinContext().get(joinOp),bigTablePosition,true,false);
  Operator<? extends OperatorDesc> parentBigTableOp=mapJoinOp.getParentOperators().get(bigTablePosition);
  if (parentBigTableOp instanceof ReduceSinkOperator) {
    mapJoinOp.getParentOperators().remove(bigTablePosition);
    if (!(mapJoinOp.getParentOperators().contains(parentBigTableOp.getParentOperators().get(0)))) {
      mapJoinOp.getParentOperators().add(bigTablePosition,parentBigTableOp.getParentOperators().get(0));
    }
    parentBigTableOp.getParentOperators().get(0).removeChild(parentBigTableOp);
    for (    Operator<? extends OperatorDesc> op : mapJoinOp.getParentOperators()) {
      if (!(op.getChildOperators().contains(mapJoinOp))) {
        op.getChildOperators().add(mapJoinOp);
      }
      op.getChildOperators().remove(joinOp);
    }
  }
  return null;
}
