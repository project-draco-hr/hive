{
  doTestFastStreamForHiveDecimal("0");
  doTestFastStreamForHiveDecimal("-0");
  doTestFastStreamForHiveDecimal("1");
  doTestFastStreamForHiveDecimal("-1");
  doTestFastStreamForHiveDecimal("2");
  doTestFastStreamForHiveDecimal("-2");
  doTestFastStreamForHiveDecimal("127");
  doTestFastStreamForHiveDecimal("-127");
  doTestFastStreamForHiveDecimal("128");
  doTestFastStreamForHiveDecimal("-128");
  doTestFastStreamForHiveDecimal("255");
  doTestFastStreamForHiveDecimal("-255");
  doTestFastStreamForHiveDecimal("256");
  doTestFastStreamForHiveDecimal("-256");
  doTestFastStreamForHiveDecimal("65535");
  doTestFastStreamForHiveDecimal("-65535");
  doTestFastStreamForHiveDecimal("65536");
  doTestFastStreamForHiveDecimal("-65536");
  doTestFastStreamForHiveDecimal("10");
  doTestFastStreamForHiveDecimal("1000");
  doTestFastStreamForHiveDecimal("1000000");
  doTestFastStreamForHiveDecimal("1000000000");
  doTestFastStreamForHiveDecimal("1000000000000");
  doTestFastStreamForHiveDecimal("1000000000000000");
  doTestFastStreamForHiveDecimal("1000000000000000000");
  doTestFastStreamForHiveDecimal("1000000000000000000000");
  doTestFastStreamForHiveDecimal("1000000000000000000000000");
  doTestFastStreamForHiveDecimal("1000000000000000000000000000");
  doTestFastStreamForHiveDecimal("1000000000000000000000000000000");
  doTestFastStreamForHiveDecimal("-10");
  doTestFastStreamForHiveDecimal("-1000");
  doTestFastStreamForHiveDecimal("-1000000");
  doTestFastStreamForHiveDecimal("-1000000000");
  doTestFastStreamForHiveDecimal("-1000000000000");
  doTestFastStreamForHiveDecimal("-1000000000000000000");
  doTestFastStreamForHiveDecimal("-1000000000000000000000");
  doTestFastStreamForHiveDecimal("-1000000000000000000000000");
  doTestFastStreamForHiveDecimal("-1000000000000000000000000000");
  doTestFastStreamForHiveDecimal("-1000000000000000000000000000000");
  doTestFastStreamForHiveDecimal("0.01");
  doTestFastStreamForHiveDecimal("-0.01");
  doTestFastStreamForHiveDecimal("0.02");
  doTestFastStreamForHiveDecimal("-0.02");
  doTestFastStreamForHiveDecimal("0.0127");
  doTestFastStreamForHiveDecimal("-0.0127");
  doTestFastStreamForHiveDecimal("0.0128");
  doTestFastStreamForHiveDecimal("-0.0128");
  doTestFastStreamForHiveDecimal("0.0255");
  doTestFastStreamForHiveDecimal("-0.0255");
  doTestFastStreamForHiveDecimal("0.0256");
  doTestFastStreamForHiveDecimal("-0.0256");
  doTestFastStreamForHiveDecimal("0.065535");
  doTestFastStreamForHiveDecimal("-0.065535");
  doTestFastStreamForHiveDecimal("0.065536");
  doTestFastStreamForHiveDecimal("-0.065536");
  doTestFastStreamForHiveDecimal("0.101");
  doTestFastStreamForHiveDecimal("0.10001");
  doTestFastStreamForHiveDecimal("0.10000001");
  doTestFastStreamForHiveDecimal("0.10000000001");
  doTestFastStreamForHiveDecimal("0.10000000000001");
  doTestFastStreamForHiveDecimal("0.10000000000000001");
  doTestFastStreamForHiveDecimal("0.10000000000000000001");
  doTestFastStreamForHiveDecimal("0.10000000000000000000001");
  doTestFastStreamForHiveDecimal("0.10000000000000000000000001");
  doTestFastStreamForHiveDecimal("0.10000000000000000000000000001");
  doTestFastStreamForHiveDecimal("0.10000000000000000000000000000001");
  doTestFastStreamForHiveDecimal("-0.101");
  doTestFastStreamForHiveDecimal("-0.10001");
  doTestFastStreamForHiveDecimal("-0.10000001");
  doTestFastStreamForHiveDecimal("-0.10000000001");
  doTestFastStreamForHiveDecimal("-0.10000000000001");
  doTestFastStreamForHiveDecimal("-0.10000000000000000001");
  doTestFastStreamForHiveDecimal("-0.10000000000000000000001");
  doTestFastStreamForHiveDecimal("-0.10000000000000000000000001");
  doTestFastStreamForHiveDecimal("-0.10000000000000000000000000001");
  doTestFastStreamForHiveDecimal("-0.10000000000000000000000000000001");
  doTestFastStreamForHiveDecimal(Integer.toString(Integer.MAX_VALUE));
  doTestFastStreamForHiveDecimal(Integer.toString(Integer.MIN_VALUE));
  doTestFastStreamForHiveDecimal(Long.toString(Long.MAX_VALUE));
  doTestFastStreamForHiveDecimal(Long.toString(Long.MIN_VALUE));
  doTestFastStreamForHiveDecimal(Decimal128.MAX_VALUE.toFormalString());
  doTestFastStreamForHiveDecimal(Decimal128.MIN_VALUE.toFormalString());
  int[] values=new int[]{0x80,0x8000,0x800000,0x80000000,0x81,0x8001,0x800001,0x80000001,0x7f,0x7fff,0x7fffff,0x7fffffff,0xff,0xffff,0xffffff,0xffffffff};
  for (  int value : values) {
    for (int i=0; i < 4; ++i) {
      int[] pos=new int[]{1,0,0,0,0};
      int[] neg=new int[]{0xff,0,0,0,0};
      pos[i + 1]=neg[i + 1]=value;
      doTestDecimalWithBoundsCheck(new Decimal128().update32(pos,0));
      doTestDecimalWithBoundsCheck(new Decimal128().update32(neg,0));
      doTestDecimalWithBoundsCheck(new Decimal128().update64(pos,0));
      doTestDecimalWithBoundsCheck(new Decimal128().update64(neg,0));
      doTestDecimalWithBoundsCheck(new Decimal128().update96(pos,0));
      doTestDecimalWithBoundsCheck(new Decimal128().update96(neg,0));
      doTestDecimalWithBoundsCheck(new Decimal128().update128(pos,0));
      doTestDecimalWithBoundsCheck(new Decimal128().update128(neg,0));
    }
  }
}
