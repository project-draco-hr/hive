{
  String sql="FROM (SELECT 1 FROM " + tableName + " where   'not?param?not?param' <> 'not_param??not_param' and ?=? "+ " and 1=? and 2=? and 3.0=? and 4.0=? and 'test\\'string\"'=? and 5=? and ?=? "+ " and date '2012-01-01' = date ?"+ " and timestamp '2012-04-22 09:00:00.123456789' = timestamp ?"+ " ) t SELECT '2011-03-25' ddate,'China',true bv, 10 num LIMIT 1";
  try {
    try (PreparedStatement ps=createPreapredStatementUsingSetXXX(sql);ResultSet res=ps.executeQuery()){
      assertPreparedStatementResultAsExpected(res);
    }
     try (PreparedStatement ps=createPreapredStatementUsingSetObject(sql);ResultSet res=ps.executeQuery()){
      assertPreparedStatementResultAsExpected(res);
    }
   }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.toString());
  }
  Exception expectedException=null;
  try (PreparedStatement ps=con.prepareStatement(sql);ResultSet ignored=ps.executeQuery()){
  }
 catch (  Exception e) {
    expectedException=e;
  }
  assertNotNull("Execute the un-setted sql statement should throw exception",expectedException);
  expectedException=null;
  try (PreparedStatement ps=con.prepareStatement(sql)){
    ps.setBoolean(1,true);
    ps.setBoolean(2,true);
    try (ResultSet ignored=ps.executeQuery()){
    }
   }
 catch (  Exception e) {
    expectedException=e;
  }
  assertNotNull("Execute the invalid setted sql statement should throw exception",expectedException);
  expectedException=null;
  try (PreparedStatement ps=con.prepareStatement(sql)){
    ps.setString(1,"wrong");
    try (ResultSet res=ps.executeQuery()){
      assertFalse("ResultSet was not empty",res.next());
    }
   }
 catch (  Exception e) {
    expectedException=e;
  }
  assertNotNull("Execute the invalid setted sql statement should throw exception",expectedException);
  expectedException=null;
  try (PreparedStatement ps=con.prepareStatement(sql)){
    ps.setObject(1,new Date());
    try (ResultSet ignored=ps.executeQuery()){
    }
   }
 catch (  Exception e) {
    expectedException=e;
  }
  assertNotNull("Setting to an unknown type should throw an exception",expectedException);
}
