{
  if (tbl != null) {
    if (tbl.isView()) {
      if (!dropTbl.getExpectView()) {
        if (dropTbl.getIfExists()) {
          return;
        }
        throw new HiveException("Cannot drop a view with DROP TABLE");
      }
    }
 else {
      if (dropTbl.getExpectView()) {
        if (dropTbl.getIfExists()) {
          return;
        }
        throw new HiveException("Cannot drop a base table with DROP VIEW");
      }
    }
  }
  if (tbl != null && !tbl.canDrop()) {
    throw new HiveException("Table " + tbl.getTableName() + " is protected from being dropped");
  }
  int partitionBatchSize=HiveConf.getIntVar(conf,ConfVars.METASTORE_BATCH_RETRIEVE_TABLE_PARTITION_MAX);
  if (tbl != null && tbl.isPartitioned()) {
    List<String> partitionNames=db.getPartitionNames(tbl.getTableName(),(short)-1);
    for (int i=0; i < partitionNames.size(); i+=partitionBatchSize) {
      List<String> partNames=partitionNames.subList(i,Math.min(i + partitionBatchSize,partitionNames.size()));
      List<Partition> listPartitions=db.getPartitionsByNames(tbl,partNames);
      for (      Partition p : listPartitions) {
        if (!p.canDrop()) {
          throw new HiveException("Table " + tbl.getTableName() + " Partition"+ p.getName()+ " is protected from being dropped");
        }
      }
    }
  }
  db.dropTable(dropTbl.getTableName(),dropTbl.getIfPurge());
  if (tbl != null) {
    work.getOutputs().add(new WriteEntity(tbl,WriteEntity.WriteType.DDL_NO_LOCK));
  }
}
