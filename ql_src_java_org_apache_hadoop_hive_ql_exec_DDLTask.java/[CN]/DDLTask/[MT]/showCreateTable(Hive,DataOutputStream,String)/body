{
  final String EXTERNAL="external";
  final String TEMPORARY="temporary";
  final String LIST_COLUMNS="columns";
  final String TBL_COMMENT="tbl_comment";
  final String LIST_PARTITIONS="partitions";
  final String SORT_BUCKET="sort_bucket";
  final String ROW_FORMAT="row_format";
  final String TBL_LOCATION="tbl_location";
  final String TBL_PROPERTIES="tbl_properties";
  boolean needsLocation=true;
  StringBuilder createTab_str=new StringBuilder();
  Table tbl=db.getTable(tableName,false);
  List<String> duplicateProps=new ArrayList<String>();
  try {
    needsLocation=doesTableNeedLocation(tbl);
    if (tbl.isView()) {
      String createTab_stmt="CREATE VIEW `" + tableName + "` AS "+ tbl.getViewExpandedText();
      outStream.writeBytes(createTab_stmt.toString());
      return 0;
    }
    createTab_str.append("CREATE <" + TEMPORARY + "><"+ EXTERNAL+ ">TABLE `");
    createTab_str.append(tableName + "`(\n");
    createTab_str.append("<" + LIST_COLUMNS + ">)\n");
    createTab_str.append("<" + TBL_COMMENT + ">\n");
    createTab_str.append("<" + LIST_PARTITIONS + ">\n");
    createTab_str.append("<" + SORT_BUCKET + ">\n");
    createTab_str.append("<" + ROW_FORMAT + ">\n");
    if (needsLocation) {
      createTab_str.append("LOCATION\n");
      createTab_str.append("<" + TBL_LOCATION + ">\n");
    }
    createTab_str.append("TBLPROPERTIES (\n");
    createTab_str.append("<" + TBL_PROPERTIES + ">)\n");
    ST createTab_stmt=new ST(createTab_str.toString());
    String tbl_temp="";
    if (tbl.isTemporary()) {
      duplicateProps.add("TEMPORARY");
      tbl_temp="TEMPORARY ";
    }
    String tbl_external="";
    if (tbl.getTableType() == TableType.EXTERNAL_TABLE) {
      duplicateProps.add("EXTERNAL");
      tbl_external="EXTERNAL ";
    }
    String tbl_columns="";
    List<FieldSchema> cols=tbl.getCols();
    List<String> columns=new ArrayList<String>();
    for (    FieldSchema col : cols) {
      String columnDesc="  `" + col.getName() + "` "+ col.getType();
      if (col.getComment() != null) {
        columnDesc=columnDesc + " COMMENT '" + escapeHiveCommand(col.getComment())+ "'";
      }
      columns.add(columnDesc);
    }
    tbl_columns=StringUtils.join(columns,", \n");
    String tbl_comment="";
    String tabComment=tbl.getProperty("comment");
    if (tabComment != null) {
      duplicateProps.add("comment");
      tbl_comment="COMMENT '" + escapeHiveCommand(tabComment) + "'";
    }
    String tbl_partitions="";
    List<FieldSchema> partKeys=tbl.getPartitionKeys();
    if (partKeys.size() > 0) {
      tbl_partitions+="PARTITIONED BY ( \n";
      List<String> partCols=new ArrayList<String>();
      for (      FieldSchema partKey : partKeys) {
        String partColDesc="  `" + partKey.getName() + "` "+ partKey.getType();
        if (partKey.getComment() != null) {
          partColDesc=partColDesc + " COMMENT '" + escapeHiveCommand(partKey.getComment())+ "'";
        }
        partCols.add(partColDesc);
      }
      tbl_partitions+=StringUtils.join(partCols,", \n");
      tbl_partitions+=")";
    }
    String tbl_sort_bucket="";
    List<String> buckCols=tbl.getBucketCols();
    if (buckCols.size() > 0) {
      duplicateProps.add("SORTBUCKETCOLSPREFIX");
      tbl_sort_bucket+="CLUSTERED BY ( \n  ";
      tbl_sort_bucket+=StringUtils.join(buckCols,", \n  ");
      tbl_sort_bucket+=") \n";
      List<Order> sortCols=tbl.getSortCols();
      if (sortCols.size() > 0) {
        tbl_sort_bucket+="SORTED BY ( \n";
        List<String> sortKeys=new ArrayList<String>();
        for (        Order sortCol : sortCols) {
          String sortKeyDesc="  " + sortCol.getCol() + " ";
          if (sortCol.getOrder() == BaseSemanticAnalyzer.HIVE_COLUMN_ORDER_ASC) {
            sortKeyDesc=sortKeyDesc + "ASC";
          }
 else           if (sortCol.getOrder() == BaseSemanticAnalyzer.HIVE_COLUMN_ORDER_DESC) {
            sortKeyDesc=sortKeyDesc + "DESC";
          }
          sortKeys.add(sortKeyDesc);
        }
        tbl_sort_bucket+=StringUtils.join(sortKeys,", \n");
        tbl_sort_bucket+=") \n";
      }
      tbl_sort_bucket+="INTO " + tbl.getNumBuckets() + " BUCKETS";
    }
    StringBuilder tbl_row_format=new StringBuilder();
    StorageDescriptor sd=tbl.getTTable().getSd();
    SerDeInfo serdeInfo=sd.getSerdeInfo();
    tbl_row_format.append("ROW FORMAT");
    if (tbl.getStorageHandler() == null) {
      Map<String,String> serdeParams=serdeInfo.getParameters();
      String[] delimiters=new String[]{serdeParams.remove(serdeConstants.FIELD_DELIM),serdeParams.remove(serdeConstants.COLLECTION_DELIM),serdeParams.remove(serdeConstants.MAPKEY_DELIM),serdeParams.remove(serdeConstants.LINE_DELIM),serdeParams.remove(serdeConstants.SERIALIZATION_NULL_FORMAT)};
      serdeParams.remove(serdeConstants.SERIALIZATION_FORMAT);
      if (containsNonNull(delimiters)) {
        tbl_row_format.append(" DELIMITED \n");
        for (int i=0; i < DELIMITER_PREFIXES.length; i++) {
          if (delimiters[i] != null) {
            tbl_row_format.append("  ").append(DELIMITER_PREFIXES[i]).append(" '");
            tbl_row_format.append(escapeHiveCommand(StringEscapeUtils.escapeJava(delimiters[i])));
            tbl_row_format.append("' \n");
          }
        }
      }
 else {
        tbl_row_format.append(" SERDE \n  '" + escapeHiveCommand(serdeInfo.getSerializationLib()) + "' \n");
      }
      if (!serdeParams.isEmpty()) {
        appendSerdeParams(tbl_row_format,serdeParams).append(" \n");
      }
      tbl_row_format.append("STORED AS INPUTFORMAT \n  '" + escapeHiveCommand(sd.getInputFormat()) + "' \n");
      tbl_row_format.append("OUTPUTFORMAT \n  '" + escapeHiveCommand(sd.getOutputFormat()) + "'");
    }
 else {
      duplicateProps.add(META_TABLE_STORAGE);
      tbl_row_format.append(" SERDE \n  '" + escapeHiveCommand(serdeInfo.getSerializationLib()) + "' \n");
      tbl_row_format.append("STORED BY \n  '" + escapeHiveCommand(tbl.getParameters().get(META_TABLE_STORAGE)) + "' \n");
      if (serdeInfo.getParametersSize() > 0) {
        appendSerdeParams(tbl_row_format,serdeInfo.getParameters());
      }
    }
    String tbl_location="  '" + escapeHiveCommand(sd.getLocation()) + "'";
    String tbl_properties=propertiesToString(tbl.getParameters(),duplicateProps);
    createTab_stmt.add(TEMPORARY,tbl_temp);
    createTab_stmt.add(EXTERNAL,tbl_external);
    createTab_stmt.add(LIST_COLUMNS,tbl_columns);
    createTab_stmt.add(TBL_COMMENT,tbl_comment);
    createTab_stmt.add(LIST_PARTITIONS,tbl_partitions);
    createTab_stmt.add(SORT_BUCKET,tbl_sort_bucket);
    createTab_stmt.add(ROW_FORMAT,tbl_row_format);
    if (needsLocation) {
      createTab_stmt.add(TBL_LOCATION,tbl_location);
    }
    createTab_stmt.add(TBL_PROPERTIES,tbl_properties);
    outStream.writeBytes(createTab_stmt.render());
  }
 catch (  IOException e) {
    LOG.info("show create table: " + stringifyException(e));
    return 1;
  }
  return 0;
}
