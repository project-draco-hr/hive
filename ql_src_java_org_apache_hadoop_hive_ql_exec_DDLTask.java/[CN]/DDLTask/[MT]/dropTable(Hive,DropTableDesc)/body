{
  Table tbl=null;
  try {
    tbl=db.getTable(dropTbl.getTableName());
  }
 catch (  InvalidTableException e) {
  }
  if (dropTbl.getPartSpecs() == null) {
    if (tbl != null) {
      if (tbl.isView()) {
        if (!dropTbl.getExpectView()) {
          if (dropTbl.getIfExists()) {
            return 0;
          }
          throw new HiveException("Cannot drop a view with DROP TABLE");
        }
      }
 else {
        if (dropTbl.getExpectView()) {
          if (dropTbl.getIfExists()) {
            return 0;
          }
          throw new HiveException("Cannot drop a base table with DROP VIEW");
        }
      }
    }
    if (tbl != null && !tbl.canDrop()) {
      throw new HiveException("Table " + tbl.getTableName() + " is protected from being dropped");
    }
    if (tbl != null && tbl.isPartitioned()) {
      List<Partition> listPartitions=db.getPartitions(tbl);
      for (      Partition p : listPartitions) {
        if (!p.canDrop()) {
          throw new HiveException("Table " + tbl.getTableName() + " Partition"+ p.getName()+ " is protected from being dropped");
        }
      }
    }
    db.dropTable(dropTbl.getTableName());
    if (tbl != null) {
      work.getOutputs().add(new WriteEntity(tbl));
    }
  }
 else {
    if (tbl != null) {
      validateAlterTableType(tbl,AlterTableDesc.AlterTableTypes.DROPPARTITION,dropTbl.getExpectView());
    }
    List<Partition> partsToDelete=new ArrayList<Partition>();
    for (    Map<String,String> partSpec : dropTbl.getPartSpecs()) {
      List<Partition> partitions=db.getPartitions(tbl,partSpec);
      for (      Partition p : partitions) {
        if (!p.canDrop()) {
          throw new HiveException("Table " + tbl.getTableName() + " Partition "+ p.getName()+ " is protected from being dropped");
        }
        partsToDelete.add(p);
      }
    }
    for (    Partition partition : partsToDelete) {
      console.printInfo("Dropping the partition " + partition.getName());
      db.dropPartition(dropTbl.getTableName(),partition.getValues(),true);
      work.getOutputs().add(new WriteEntity(partition));
    }
  }
  return 0;
}
