{
  Table tbl=null;
  try {
    tbl=db.getTable(dropTbl.getTableName());
  }
 catch (  InvalidTableException e) {
  }
  if (dropTbl.getPartSpecs() == null) {
    if (tbl != null) {
      if (tbl.isView()) {
        if (!dropTbl.getExpectView()) {
          if (dropTbl.getIfExists()) {
            return 0;
          }
          throw new HiveException("Cannot drop a view with DROP TABLE");
        }
      }
 else {
        if (dropTbl.getExpectView()) {
          if (dropTbl.getIfExists()) {
            return 0;
          }
          throw new HiveException("Cannot drop a base table with DROP VIEW");
        }
      }
    }
    if (tbl != null && !tbl.canDrop()) {
      throw new HiveException("Table " + tbl.getTableName() + " is protected from being dropped");
    }
    int partitionBatchSize=HiveConf.getIntVar(conf,ConfVars.METASTORE_BATCH_RETRIEVE_TABLE_PARTITION_MAX);
    if (tbl != null && tbl.isPartitioned()) {
      List<String> partitionNames=db.getPartitionNames(tbl.getTableName(),(short)-1);
      for (int i=0; i < partitionNames.size(); i+=partitionBatchSize) {
        List<String> partNames=partitionNames.subList(i,Math.min(i + partitionBatchSize,partitionNames.size()));
        List<Partition> listPartitions=db.getPartitionsByNames(tbl,partNames);
        for (        Partition p : listPartitions) {
          if (!p.canDrop()) {
            throw new HiveException("Table " + tbl.getTableName() + " Partition"+ p.getName()+ " is protected from being dropped");
          }
        }
      }
    }
    db.dropTable(dropTbl.getTableName());
    if (tbl != null) {
      work.getOutputs().add(new WriteEntity(tbl));
    }
  }
 else {
    List<Partition> partsToDelete=new ArrayList<Partition>();
    for (    DropTableDesc.PartSpec partSpec : dropTbl.getPartSpecs()) {
      List<Partition> partitions=new ArrayList<Partition>();
      boolean hasUnknown;
      try {
        hasUnknown=db.getPartitionsByExpr(tbl,partSpec.getPartSpec(),conf,partitions);
      }
 catch (      TException e) {
        throw new HiveException(e);
      }
      if (hasUnknown) {
        throw new HiveException("Unexpected unknown partititions from " + partSpec.getPartSpec().getExprString());
      }
      int partPrefixToDrop=0;
      for (      FieldSchema fs : tbl.getPartCols()) {
        if (partSpec.getPartSpecKeys().contains(fs.getName())) {
          partPrefixToDrop+=1;
        }
 else {
          break;
        }
      }
      if (!dropTbl.getIgnoreProtection()) {
        for (        Partition p : partitions) {
          if (!p.canDrop()) {
            throw new HiveException("Table " + tbl.getTableName() + " Partition "+ p.getName()+ " is protected from being dropped");
          }
 else           if (ArchiveUtils.isArchived(p)) {
            int partAchiveLevel=ArchiveUtils.getArchivingLevel(p);
            if (partAchiveLevel < partPrefixToDrop) {
              throw new HiveException("Cannot drop a subset of partitions in an archive, partition " + p.getName());
            }
          }
        }
      }
      partsToDelete.addAll(partitions);
    }
    for (    Partition partition : partsToDelete) {
      console.printInfo("Dropping the partition " + partition.getName());
      db.dropPartition(dropTbl.getTableName(),partition.getValues(),true);
      work.getOutputs().add(new WriteEntity(partition));
    }
  }
  return 0;
}
