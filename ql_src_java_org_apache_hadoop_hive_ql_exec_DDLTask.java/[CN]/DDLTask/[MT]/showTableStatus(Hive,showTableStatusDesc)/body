{
  List<Table> tbls=new ArrayList<Table>();
  Map<String,String> part=showTblStatus.getPartSpec();
  Partition par=null;
  if (part != null) {
    Table tbl=db.getTable(showTblStatus.getDbName(),showTblStatus.getPattern());
    par=db.getPartition(tbl,part,false);
    tbls.add(tbl);
  }
 else {
    LOG.info("pattern: " + showTblStatus.getPattern());
    List<String> tblStr=db.getTablesForDb(showTblStatus.getDbName(),showTblStatus.getPattern());
    SortedSet<String> sortedTbls=new TreeSet<String>(tblStr);
    Iterator<String> iterTbls=sortedTbls.iterator();
    while (iterTbls.hasNext()) {
      String tblName=iterTbls.next();
      Table tbl=db.getTable(showTblStatus.getDbName(),tblName);
      tbls.add(tbl);
    }
    LOG.info("results : " + tblStr.size());
  }
  try {
    FileSystem fs=showTblStatus.getResFile().getFileSystem(conf);
    DataOutput outStream=(DataOutput)fs.create(showTblStatus.getResFile());
    Iterator<Table> iterTables=tbls.iterator();
    while (iterTables.hasNext()) {
      Table tbl=iterTables.next();
      String tableName=tbl.getName();
      String tblLoc=null;
      String inputFormattCls=null;
      String outputFormattCls=null;
      if (part != null) {
        if (par != null) {
          tblLoc=par.getDataLocation().toString();
          inputFormattCls=par.getTPartition().getSd().getInputFormat();
          outputFormattCls=par.getTPartition().getSd().getOutputFormat();
        }
      }
 else {
        tblLoc=tbl.getDataLocation().toString();
        inputFormattCls=tbl.getInputFormatClass().getName();
        outputFormattCls=tbl.getOutputFormatClass().getName();
      }
      String owner=tbl.getOwner();
      List<FieldSchema> cols=tbl.getCols();
      String ddlCols=MetaStoreUtils.getDDLFromFieldSchema("columns",cols);
      boolean isPartitioned=tbl.isPartitioned();
      String partitionCols="";
      if (isPartitioned)       partitionCols=MetaStoreUtils.getDDLFromFieldSchema("partition_columns",tbl.getPartCols());
      outStream.writeBytes("tableName:" + tableName);
      outStream.write(terminator);
      outStream.writeBytes("owner:" + owner);
      outStream.write(terminator);
      outStream.writeBytes("location:" + tblLoc);
      outStream.write(terminator);
      outStream.writeBytes("inputformat:" + inputFormattCls);
      outStream.write(terminator);
      outStream.writeBytes("outputformat:" + outputFormattCls);
      outStream.write(terminator);
      outStream.writeBytes("columns:" + ddlCols);
      outStream.write(terminator);
      outStream.writeBytes("partitioned:" + isPartitioned);
      outStream.write(terminator);
      outStream.writeBytes("partitionColumns:" + partitionCols);
      outStream.write(terminator);
      Path tablLoc=tbl.getPath();
      List<Path> locations=new ArrayList<Path>();
      if (isPartitioned) {
        if (par == null) {
          for (          Partition curPart : db.getPartitions(tbl)) {
            locations.add(new Path(curPart.getTPartition().getSd().getLocation()));
          }
        }
 else {
          locations.add(new Path(par.getTPartition().getSd().getLocation()));
        }
      }
 else {
        locations.add(tablLoc);
      }
      writeFileSystemStats(outStream,locations,tablLoc,false,0);
      outStream.write(terminator);
    }
    ((FSDataOutputStream)outStream).close();
  }
 catch (  FileNotFoundException e) {
    LOG.info("show table status: " + StringUtils.stringifyException(e));
    return 1;
  }
catch (  IOException e) {
    LOG.info("show table status: " + StringUtils.stringifyException(e));
    return 1;
  }
catch (  Exception e) {
    throw new HiveException(e.toString());
  }
  return 0;
}
