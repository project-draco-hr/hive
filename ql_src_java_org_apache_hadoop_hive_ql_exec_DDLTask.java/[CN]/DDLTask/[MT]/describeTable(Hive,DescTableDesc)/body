{
  String colPath=descTbl.getColumnPath();
  String tableName=descTbl.getTableName();
  Table tbl=db.getTable(tableName,false);
  Partition part=null;
  DataOutputStream outStream=null;
  try {
    Path resFile=new Path(descTbl.getResFile());
    if (tbl == null) {
      FileSystem fs=resFile.getFileSystem(conf);
      outStream=fs.create(resFile);
      outStream.close();
      outStream=null;
      throw new HiveException(ErrorMsg.INVALID_TABLE,tableName);
    }
    if (descTbl.getPartSpec() != null) {
      part=db.getPartition(tbl,descTbl.getPartSpec(),false);
      if (part == null) {
        FileSystem fs=resFile.getFileSystem(conf);
        outStream=fs.create(resFile);
        outStream.close();
        outStream=null;
        throw new HiveException(ErrorMsg.INVALID_PARTITION,StringUtils.join(descTbl.getPartSpec().keySet(),','),tableName);
      }
      tbl=part.getTable();
    }
  }
 catch (  IOException e) {
    throw new HiveException(e,ErrorMsg.GENERIC_ERROR,tableName);
  }
 finally {
    IOUtils.closeStream(outStream);
  }
  try {
    LOG.info("DDLTask: got data for " + tbl.getTableName());
    Path resFile=new Path(descTbl.getResFile());
    FileSystem fs=resFile.getFileSystem(conf);
    outStream=fs.create(resFile);
    List<FieldSchema> cols=null;
    List<ColumnStatisticsObj> colStats=null;
    if (colPath.equals(tableName)) {
      cols=(part == null || tbl.getTableType() == TableType.VIRTUAL_VIEW) ? tbl.getCols() : part.getCols();
      if (!descTbl.isFormatted()) {
        cols.addAll(tbl.getPartCols());
      }
    }
 else {
      cols=Hive.getFieldsFromDeserializer(colPath,tbl.getDeserializer());
      if (descTbl.isFormatted()) {
        String colName=colPath.split("\\.")[1];
        String[] dbTab=Utilities.getDbTableName(tableName);
        List<String> colNames=new ArrayList<String>();
        colNames.add(colName.toLowerCase());
        if (null == part) {
          colStats=db.getTableColumnStatistics(dbTab[0].toLowerCase(),dbTab[1].toLowerCase(),colNames);
        }
 else {
          List<String> partitions=new ArrayList<String>();
          partitions.add(part.getName());
          colStats=db.getPartitionColumnStatistics(dbTab[0].toLowerCase(),dbTab[1].toLowerCase(),partitions,colNames).get(part.getName());
        }
      }
    }
    fixDecimalColumnTypeName(cols);
    boolean isOutputPadded=!SessionState.get().isHiveServerQuery();
    formatter.describeTable(outStream,colPath,tableName,tbl,part,cols,descTbl.isFormatted(),descTbl.isExt(),descTbl.isPretty(),isOutputPadded,colStats);
    LOG.info("DDLTask: written data for " + tbl.getTableName());
    outStream.close();
    outStream=null;
  }
 catch (  IOException e) {
    throw new HiveException(e,ErrorMsg.GENERIC_ERROR,tableName);
  }
 finally {
    IOUtils.closeStream(outStream);
  }
  return 0;
}
