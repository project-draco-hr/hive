{
  String colPath=descTbl.getTableName();
  String tableName=colPath.substring(0,colPath.indexOf('.') == -1 ? colPath.length() : colPath.indexOf('.'));
  Table tbl=db.getTable(db.getCurrentDatabase(),tableName,false);
  Partition part=null;
  try {
    Path resFile=new Path(descTbl.getResFile());
    if (tbl == null) {
      FileSystem fs=resFile.getFileSystem(conf);
      DataOutput outStream=(DataOutput)fs.open(resFile);
      String errMsg="Table " + tableName + " does not exist";
      outStream.write(errMsg.getBytes("UTF-8"));
      ((FSDataOutputStream)outStream).close();
      return 0;
    }
    if (descTbl.getPartSpec() != null) {
      part=db.getPartition(tbl,descTbl.getPartSpec(),false);
      if (part == null) {
        FileSystem fs=resFile.getFileSystem(conf);
        DataOutput outStream=(DataOutput)fs.open(resFile);
        String errMsg="Partition " + descTbl.getPartSpec() + " for table "+ tableName+ " does not exist";
        outStream.write(errMsg.getBytes("UTF-8"));
        ((FSDataOutputStream)outStream).close();
        return 0;
      }
      tbl=part.getTable();
    }
  }
 catch (  FileNotFoundException e) {
    LOG.info("describe table: " + stringifyException(e));
    return 1;
  }
catch (  IOException e) {
    LOG.info("describe table: " + stringifyException(e));
    return 1;
  }
  try {
    LOG.info("DDLTask: got data for " + tbl.getTableName());
    Path resFile=new Path(descTbl.getResFile());
    FileSystem fs=resFile.getFileSystem(conf);
    DataOutput outStream=fs.create(resFile);
    if (colPath.equals(tableName)) {
      outStream.writeBytes(MetaDataFormatUtils.getAllColumnsInformation(tbl));
    }
 else {
      List<FieldSchema> cols=null;
      cols=Hive.getFieldsFromDeserializer(colPath,tbl.getDeserializer());
      outStream.writeBytes(MetaDataFormatUtils.getAllColumnsInformation(cols));
    }
    if (tableName.equals(colPath)) {
      if (descTbl.isExt()) {
        outStream.write(terminator);
        if (part != null) {
          outStream.writeBytes(MetaDataFormatUtils.getPartitionInformation(part));
          outStream.write(terminator);
        }
 else {
          outStream.writeBytes(MetaDataFormatUtils.getTableInformation(tbl));
          outStream.write(terminator);
        }
      }
    }
    LOG.info("DDLTask: written data for " + tbl.getTableName());
    ((FSDataOutputStream)outStream).close();
  }
 catch (  FileNotFoundException e) {
    LOG.info("describe table: " + stringifyException(e));
    return 1;
  }
catch (  IOException e) {
    LOG.info("describe table: " + stringifyException(e));
    return 1;
  }
catch (  Exception e) {
    throw new HiveException(e);
  }
  return 0;
}
