{
  List<Table> tbls=new ArrayList<Table>();
  Map<String,String> part=showTblStatus.getPartSpec();
  Partition par=null;
  if (part != null) {
    Table tbl=db.getTable(showTblStatus.getDbName(),showTblStatus.getPattern());
    par=db.getPartition(tbl,part,false);
    if (par == null) {
      throw new HiveException("Partition " + part + " for table "+ showTblStatus.getPattern()+ " does not exist.");
    }
    tbls.add(tbl);
  }
 else {
    LOG.info("pattern: " + showTblStatus.getPattern());
    List<String> tblStr=db.getTablesForDb(showTblStatus.getDbName(),showTblStatus.getPattern());
    SortedSet<String> sortedTbls=new TreeSet<String>(tblStr);
    Iterator<String> iterTbls=sortedTbls.iterator();
    while (iterTbls.hasNext()) {
      String tblName=iterTbls.next();
      Table tbl=db.getTable(showTblStatus.getDbName(),tblName);
      tbls.add(tbl);
    }
    LOG.info("results : " + tblStr.size());
  }
  DataOutputStream outStream=null;
  try {
    Path resFile=new Path(showTblStatus.getResFile());
    FileSystem fs=resFile.getFileSystem(conf);
    outStream=fs.create(resFile);
    formatter.showTableStatus(outStream,db,conf,tbls,part,par);
    ((FSDataOutputStream)outStream).close();
    outStream=null;
  }
 catch (  FileNotFoundException e) {
    formatter.logInfo(outStream,"show table status: " + stringifyException(e),formatter.ERROR);
    return 1;
  }
catch (  IOException e) {
    formatter.logInfo(outStream,"show table status: " + stringifyException(e),formatter.ERROR);
    return 1;
  }
catch (  Exception e) {
    throw new HiveException(e);
  }
 finally {
    IOUtils.closeStream((FSDataOutputStream)outStream);
  }
  return 0;
}
