{
  Table tbl=db.getTable(MetaStoreUtils.DEFAULT_DATABASE_NAME,alterTbl.getOldName());
  Table oldTbl=tbl.copy();
  if (alterTbl.getOp() == alterTableDesc.alterTableTypes.RENAME) {
    tbl.getTTable().setTableName(alterTbl.getNewName());
  }
 else   if (alterTbl.getOp() == alterTableDesc.alterTableTypes.ADDCOLS) {
    List<FieldSchema> newCols=alterTbl.getNewCols();
    List<FieldSchema> oldCols=tbl.getCols();
    if (tbl.getSerializationLib().equals("org.apache.hadoop.hive.serde.thrift.columnsetSerDe")) {
      console.printInfo("Replacing columns for columnsetSerDe and changing to LazySimpleSerDe");
      tbl.setSerializationLib(LazySimpleSerDe.class.getName());
      tbl.getTTable().getSd().setCols(newCols);
    }
 else {
      Iterator<FieldSchema> iterNewCols=newCols.iterator();
      while (iterNewCols.hasNext()) {
        FieldSchema newCol=iterNewCols.next();
        String newColName=newCol.getName();
        Iterator<FieldSchema> iterOldCols=oldCols.iterator();
        while (iterOldCols.hasNext()) {
          String oldColName=iterOldCols.next().getName();
          if (oldColName.equalsIgnoreCase(newColName)) {
            console.printError("Column '" + newColName + "' exists");
            return 1;
          }
        }
        oldCols.add(newCol);
      }
      tbl.getTTable().getSd().setCols(oldCols);
    }
  }
 else   if (alterTbl.getOp() == alterTableDesc.alterTableTypes.RENAMECOLUMN) {
    List<FieldSchema> oldCols=tbl.getCols();
    List<FieldSchema> newCols=new ArrayList<FieldSchema>();
    Iterator<FieldSchema> iterOldCols=oldCols.iterator();
    String oldName=alterTbl.getOldColName();
    String newName=alterTbl.getNewColName();
    String type=alterTbl.getNewColType();
    String comment=alterTbl.getNewColComment();
    boolean first=alterTbl.getFirst();
    String afterCol=alterTbl.getAfterCol();
    FieldSchema column=null;
    boolean found=false;
    int position=-1;
    if (first)     position=0;
    int i=1;
    while (iterOldCols.hasNext()) {
      FieldSchema col=iterOldCols.next();
      String oldColName=col.getName();
      if (oldColName.equalsIgnoreCase(newName) && !oldColName.equalsIgnoreCase(oldName)) {
        console.printError("Column '" + newName + "' exists");
        return 1;
      }
 else       if (oldColName.equalsIgnoreCase(oldName)) {
        col.setName(newName);
        if (type != null && !type.trim().equals("")) {
          col.setType(type);
        }
        if (comment != null)         col.setComment(comment);
        found=true;
        if (first || (afterCol != null && !afterCol.trim().equals(""))) {
          column=col;
          continue;
        }
      }
      if (afterCol != null && !afterCol.trim().equals("") && oldColName.equalsIgnoreCase(afterCol)) {
        position=i;
      }
      i++;
      newCols.add(col);
    }
    if (!found) {
      console.printError("Column '" + oldName + "' does not exist");
      return 1;
    }
    if ((afterCol != null && !afterCol.trim().equals("")) && position < 0) {
      console.printError("Column '" + afterCol + "' does not exist");
      return 1;
    }
    if (position >= 0)     newCols.add(position,column);
    tbl.getTTable().getSd().setCols(newCols);
  }
 else   if (alterTbl.getOp() == alterTableDesc.alterTableTypes.REPLACECOLS) {
    if (tbl.getSerializationLib().equals("org.apache.hadoop.hive.serde.thrift.columnsetSerDe")) {
      console.printInfo("Replacing columns for columnsetSerDe and changing to LazySimpleSerDe");
      tbl.setSerializationLib(LazySimpleSerDe.class.getName());
    }
 else     if (!tbl.getSerializationLib().equals(MetadataTypedColumnsetSerDe.class.getName()) && !tbl.getSerializationLib().equals(LazySimpleSerDe.class.getName()) && !tbl.getSerializationLib().equals(ColumnarSerDe.class.getName())&& !tbl.getSerializationLib().equals(DynamicSerDe.class.getName())) {
      console.printError("Replace columns is not supported for this table. SerDe may be incompatible.");
      return 1;
    }
    tbl.getTTable().getSd().setCols(alterTbl.getNewCols());
  }
 else   if (alterTbl.getOp() == alterTableDesc.alterTableTypes.ADDPROPS) {
    tbl.getTTable().getParameters().putAll(alterTbl.getProps());
  }
 else   if (alterTbl.getOp() == alterTableDesc.alterTableTypes.ADDSERDEPROPS) {
    tbl.getTTable().getSd().getSerdeInfo().getParameters().putAll(alterTbl.getProps());
  }
 else   if (alterTbl.getOp() == alterTableDesc.alterTableTypes.ADDSERDE) {
    tbl.setSerializationLib(alterTbl.getSerdeName());
    if ((alterTbl.getProps() != null) && (alterTbl.getProps().size() > 0))     tbl.getTTable().getSd().getSerdeInfo().getParameters().putAll(alterTbl.getProps());
    tbl.reinitSerDe();
    tbl.setFields(Hive.getFieldsFromDeserializer(tbl.getName(),tbl.getDeserializer()));
  }
 else   if (alterTbl.getOp() == alterTableDesc.alterTableTypes.ADDFILEFORMAT) {
    tbl.getTTable().getSd().setInputFormat(alterTbl.getInputFormat());
    tbl.getTTable().getSd().setOutputFormat(alterTbl.getOutputFormat());
    if (alterTbl.getSerdeName() != null)     tbl.setSerializationLib(alterTbl.getSerdeName());
  }
 else   if (alterTbl.getOp() == alterTableDesc.alterTableTypes.ADDCLUSTERSORTCOLUMN) {
    List<String> columns=Utilities.getColumnNamesFromFieldSchema(tbl.getCols());
    Utilities.validateColumnNames(columns,alterTbl.getBucketColumns());
    if (alterTbl.getSortColumns() != null)     Utilities.validateColumnNames(columns,Utilities.getColumnNamesFromSortCols(alterTbl.getSortColumns()));
    tbl.getTTable().getSd().setBucketCols(alterTbl.getBucketColumns());
    tbl.getTTable().getSd().setNumBuckets(alterTbl.getNumberBuckets());
    tbl.getTTable().getSd().setSortCols(alterTbl.getSortColumns());
  }
 else {
    console.printError("Unsupported Alter commnad");
    return 1;
  }
  try {
    tbl.setProperty("last_modified_by",conf.getUser());
  }
 catch (  IOException e) {
    console.printError("Unable to get current user: " + e.getMessage(),stringifyException(e));
    return 1;
  }
  tbl.setProperty("last_modified_time",Long.toString(System.currentTimeMillis() / 1000));
  try {
    tbl.checkValidity();
  }
 catch (  HiveException e) {
    console.printError("Invalid table columns : " + e.getMessage(),stringifyException(e));
    return 1;
  }
  try {
    db.alterTable(alterTbl.getOldName(),tbl);
  }
 catch (  InvalidOperationException e) {
    console.printError("Invalid alter operation: " + e.getMessage());
    LOG.info("alter table: " + stringifyException(e));
    return 1;
  }
catch (  HiveException e) {
    return 1;
  }
  work.getInputs().add(new ReadEntity(oldTbl));
  work.getOutputs().add(new WriteEntity(tbl));
  return 0;
}
