{
  Table tbl;
  if (crtTbl.getDatabaseName() == null || (crtTbl.getTableName().contains("."))) {
    tbl=db.newTable(crtTbl.getTableName());
  }
 else {
    tbl=new Table(crtTbl.getDatabaseName(),crtTbl.getTableName());
  }
  if (crtTbl.getTblProps() != null) {
    tbl.getTTable().getParameters().putAll(crtTbl.getTblProps());
  }
  if (crtTbl.getPartCols() != null) {
    tbl.setPartCols(crtTbl.getPartCols());
  }
  if (crtTbl.getNumBuckets() != -1) {
    tbl.setNumBuckets(crtTbl.getNumBuckets());
  }
  if (crtTbl.getStorageHandler() != null) {
    tbl.setProperty(META_TABLE_STORAGE,crtTbl.getStorageHandler());
  }
  HiveStorageHandler storageHandler=tbl.getStorageHandler();
  if (crtTbl.getSerName() == null) {
    if (storageHandler == null) {
      LOG.info("Default to LazySimpleSerDe for table " + crtTbl.getTableName());
      tbl.setSerializationLib(org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe.class.getName());
    }
 else {
      String serDeClassName=storageHandler.getSerDeClass().getName();
      LOG.info("Use StorageHandler-supplied " + serDeClassName + " for table "+ crtTbl.getTableName());
      tbl.setSerializationLib(serDeClassName);
    }
  }
 else {
    validateSerDe(crtTbl.getSerName());
    tbl.setSerializationLib(crtTbl.getSerName());
  }
  if (crtTbl.getFieldDelim() != null) {
    tbl.setSerdeParam(serdeConstants.FIELD_DELIM,crtTbl.getFieldDelim());
    tbl.setSerdeParam(serdeConstants.SERIALIZATION_FORMAT,crtTbl.getFieldDelim());
  }
  if (crtTbl.getFieldEscape() != null) {
    tbl.setSerdeParam(serdeConstants.ESCAPE_CHAR,crtTbl.getFieldEscape());
  }
  if (crtTbl.getCollItemDelim() != null) {
    tbl.setSerdeParam(serdeConstants.COLLECTION_DELIM,crtTbl.getCollItemDelim());
  }
  if (crtTbl.getMapKeyDelim() != null) {
    tbl.setSerdeParam(serdeConstants.MAPKEY_DELIM,crtTbl.getMapKeyDelim());
  }
  if (crtTbl.getLineDelim() != null) {
    tbl.setSerdeParam(serdeConstants.LINE_DELIM,crtTbl.getLineDelim());
  }
  if (crtTbl.getNullFormat() != null) {
    tbl.setSerdeParam(serdeConstants.SERIALIZATION_NULL_FORMAT,crtTbl.getNullFormat());
  }
  if (crtTbl.getSerdeProps() != null) {
    Iterator<Entry<String,String>> iter=crtTbl.getSerdeProps().entrySet().iterator();
    while (iter.hasNext()) {
      Entry<String,String> m=iter.next();
      tbl.setSerdeParam(m.getKey(),m.getValue());
    }
  }
  if (crtTbl.getCols() != null) {
    tbl.setFields(crtTbl.getCols());
  }
  if (crtTbl.getBucketCols() != null) {
    tbl.setBucketCols(crtTbl.getBucketCols());
  }
  if (crtTbl.getSortCols() != null) {
    tbl.setSortCols(crtTbl.getSortCols());
  }
  if (crtTbl.getComment() != null) {
    tbl.setProperty("comment",crtTbl.getComment());
  }
  if (crtTbl.getLocation() != null) {
    tbl.setDataLocation(new Path(crtTbl.getLocation()));
  }
  if (crtTbl.getSkewedColNames() != null) {
    tbl.setSkewedColNames(crtTbl.getSkewedColNames());
  }
  if (crtTbl.getSkewedColValues() != null) {
    tbl.setSkewedColValues(crtTbl.getSkewedColValues());
  }
  tbl.getTTable().setTemporary(crtTbl.isTemporary());
  tbl.setStoredAsSubDirectories(crtTbl.isStoredAsSubDirectories());
  tbl.setInputFormatClass(crtTbl.getInputFormat());
  tbl.setOutputFormatClass(crtTbl.getOutputFormat());
  if (crtTbl.getInputFormat() != null && !crtTbl.getInputFormat().isEmpty()) {
    tbl.getTTable().getSd().setInputFormat(tbl.getInputFormatClass().getName());
  }
  if (crtTbl.getOutputFormat() != null && !crtTbl.getOutputFormat().isEmpty()) {
    tbl.getTTable().getSd().setOutputFormat(tbl.getOutputFormatClass().getName());
  }
  if (!Utilities.isDefaultNameNode(conf) && doesTableNeedLocation(tbl)) {
    makeLocationQualified(tbl.getDbName(),tbl.getTTable().getSd(),tbl.getTableName());
  }
  if (crtTbl.isExternal()) {
    tbl.setProperty("EXTERNAL","TRUE");
    tbl.setTableType(TableType.EXTERNAL_TABLE);
  }
  if ((tbl.getBucketCols() != null) && (tbl.getSortCols() != null)) {
    List<String> bucketCols=tbl.getBucketCols();
    List<Order> sortCols=tbl.getSortCols();
    if ((sortCols.size() > 0) && (sortCols.size() >= bucketCols.size())) {
      boolean found=true;
      Iterator<String> iterBucketCols=bucketCols.iterator();
      while (iterBucketCols.hasNext()) {
        String bucketCol=iterBucketCols.next();
        boolean colFound=false;
        for (int i=0; i < bucketCols.size(); i++) {
          if (bucketCol.equals(sortCols.get(i).getCol())) {
            colFound=true;
            break;
          }
        }
        if (colFound == false) {
          found=false;
          break;
        }
      }
      if (found) {
        tbl.setProperty("SORTBUCKETCOLSPREFIX","TRUE");
      }
    }
  }
  if (crtTbl.getReplaceMode()) {
    try {
      db.alterTable(tbl.getDbName() + "." + tbl.getTableName(),tbl);
    }
 catch (    InvalidOperationException e) {
      throw new HiveException("Unable to alter table. " + e.getMessage(),e);
    }
  }
 else {
    db.createTable(tbl,crtTbl.getIfNotExists());
  }
  work.getOutputs().add(new WriteEntity(tbl,WriteEntity.WriteType.DDL_NO_LOCK));
  return 0;
}
