{
  ListBucketingCtx lbCtx=mergeFilesDesc.getLbCtx();
  boolean lbatc=lbCtx == null ? false : lbCtx.isSkewedStoredAsDir();
  int lbd=lbCtx == null ? 0 : lbCtx.calculateListBucketingLevel();
  MergeFileWork mergeWork=new MergeFileWork(mergeFilesDesc.getInputDir(),mergeFilesDesc.getOutputDir(),mergeFilesDesc.getInputFormatClass().getName());
  LinkedHashMap<String,ArrayList<String>> pathToAliases=new LinkedHashMap<String,ArrayList<String>>();
  ArrayList<String> inputDirstr=new ArrayList<String>(1);
  inputDirstr.add(mergeFilesDesc.getInputDir().toString());
  pathToAliases.put(mergeFilesDesc.getInputDir().get(0).toString(),inputDirstr);
  mergeWork.setPathToAliases(pathToAliases);
  mergeWork.setListBucketingCtx(mergeFilesDesc.getLbCtx());
  mergeWork.resolveConcatenateMerge(db.getConf());
  mergeWork.setMapperCannotSpanPartns(true);
  mergeWork.setSourceTableInputFormat(mergeFilesDesc.getInputFormatClass().getName());
  final FileMergeDesc fmd;
  if (mergeFilesDesc.getInputFormatClass().equals(RCFileInputFormat.class)) {
    fmd=new RCFileMergeDesc();
  }
 else {
    fmd=new OrcFileMergeDesc();
  }
  fmd.setDpCtx(null);
  fmd.setHasDynamicPartitions(false);
  fmd.setListBucketingAlterTableConcatenate(lbatc);
  fmd.setListBucketingDepth(lbd);
  fmd.setOutputPath(mergeFilesDesc.getOutputDir());
  CompilationOpContext opContext=driverContext.getCtx().getOpContext();
  Operator<? extends OperatorDesc> mergeOp=OperatorFactory.get(opContext,fmd);
  LinkedHashMap<String,Operator<? extends OperatorDesc>> aliasToWork=new LinkedHashMap<String,Operator<? extends OperatorDesc>>();
  aliasToWork.put(mergeFilesDesc.getInputDir().toString(),mergeOp);
  mergeWork.setAliasToWork(aliasToWork);
  DriverContext driverCxt=new DriverContext();
  Task task;
  if (conf.getVar(ConfVars.HIVE_EXECUTION_ENGINE).equals("tez")) {
    TezWork tezWork=new TezWork(conf.getVar(HiveConf.ConfVars.HIVEQUERYID),conf);
    mergeWork.setName("File Merge");
    tezWork.add(mergeWork);
    task=new TezTask();
    task.setWork(tezWork);
  }
 else {
    task=new MergeFileTask();
    task.setWork(mergeWork);
  }
  task.initialize(db.getConf(),getQueryPlan(),driverCxt,opContext);
  int ret=task.execute(driverCxt);
  return ret;
}
