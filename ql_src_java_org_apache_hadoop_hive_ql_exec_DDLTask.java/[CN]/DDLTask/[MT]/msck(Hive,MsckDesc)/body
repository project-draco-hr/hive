{
  CheckResult result=new CheckResult();
  List<String> repairOutput=new ArrayList<String>();
  try {
    HiveMetaStoreChecker checker=new HiveMetaStoreChecker(db);
    Table t=db.newTable(msckDesc.getTableName());
    checker.checkMetastore(t.getDbName(),t.getTableName(),msckDesc.getPartSpecs(),result);
    List<CheckResult.PartitionResult> partsNotInMs=result.getPartitionsNotInMs();
    if (msckDesc.isRepairPartitions() && !partsNotInMs.isEmpty()) {
      Table table=db.getTable(msckDesc.getTableName());
      AddPartitionDesc apd=new AddPartitionDesc(table.getDbName(),table.getTableName(),false);
      try {
        for (        CheckResult.PartitionResult part : partsNotInMs) {
          apd.addPartition(Warehouse.makeSpecFromName(part.getPartitionName()),null);
          repairOutput.add("Repair: Added partition to metastore " + msckDesc.getTableName() + ':'+ part.getPartitionName());
        }
        db.createPartitions(apd);
      }
 catch (      Exception e) {
        LOG.info("Could not bulk-add partitions to metastore; trying one by one",e);
        repairOutput.clear();
        msckAddPartitionsOneByOne(db,table,partsNotInMs,repairOutput);
      }
    }
  }
 catch (  HiveException e) {
    LOG.warn("Failed to run metacheck: ",e);
    return 1;
  }
catch (  IOException e) {
    LOG.warn("Failed to run metacheck: ",e);
    return 1;
  }
 finally {
    BufferedWriter resultOut=null;
    try {
      Path resFile=new Path(msckDesc.getResFile());
      FileSystem fs=resFile.getFileSystem(conf);
      resultOut=new BufferedWriter(new OutputStreamWriter(fs.create(resFile)));
      boolean firstWritten=false;
      firstWritten|=writeMsckResult(result.getTablesNotInMs(),"Tables not in metastore:",resultOut,firstWritten);
      firstWritten|=writeMsckResult(result.getTablesNotOnFs(),"Tables missing on filesystem:",resultOut,firstWritten);
      firstWritten|=writeMsckResult(result.getPartitionsNotInMs(),"Partitions not in metastore:",resultOut,firstWritten);
      firstWritten|=writeMsckResult(result.getPartitionsNotOnFs(),"Partitions missing from filesystem:",resultOut,firstWritten);
      for (      String rout : repairOutput) {
        if (firstWritten) {
          resultOut.write(terminator);
        }
 else {
          firstWritten=true;
        }
        resultOut.write(rout);
      }
    }
 catch (    IOException e) {
      LOG.warn("Failed to save metacheck output: ",e);
      return 1;
    }
 finally {
      if (resultOut != null) {
        try {
          resultOut.close();
        }
 catch (        IOException e) {
          LOG.warn("Failed to close output file: ",e);
          return 1;
        }
      }
    }
  }
  return 0;
}
