{
  Table oldtbl=db.getTable(crtTbl.getLikeTableName());
  Table tbl;
  if (oldtbl.getTableType() == TableType.VIRTUAL_VIEW || oldtbl.getTableType() == TableType.MATERIALIZED_VIEW) {
    String targetTableName=crtTbl.getTableName();
    tbl=db.newTable(targetTableName);
    if (crtTbl.getTblProps() != null) {
      tbl.getTTable().getParameters().putAll(crtTbl.getTblProps());
    }
    tbl.setTableType(TableType.MANAGED_TABLE);
    if (crtTbl.isExternal()) {
      tbl.setProperty("EXTERNAL","TRUE");
      tbl.setTableType(TableType.EXTERNAL_TABLE);
    }
    tbl.setFields(oldtbl.getCols());
    tbl.setPartCols(oldtbl.getPartCols());
    if (crtTbl.getDefaultSerName() == null) {
      LOG.info("Default to LazySimpleSerDe for table " + crtTbl.getTableName());
      tbl.setSerializationLib(org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe.class.getName());
    }
 else {
      validateSerDe(crtTbl.getDefaultSerName());
      tbl.setSerializationLib(crtTbl.getDefaultSerName());
    }
    if (crtTbl.getDefaultSerdeProps() != null) {
      Iterator<Entry<String,String>> iter=crtTbl.getDefaultSerdeProps().entrySet().iterator();
      while (iter.hasNext()) {
        Entry<String,String> m=iter.next();
        tbl.setSerdeParam(m.getKey(),m.getValue());
      }
    }
    tbl.setInputFormatClass(crtTbl.getDefaultInputFormat());
    tbl.setOutputFormatClass(crtTbl.getDefaultOutputFormat());
    tbl.getTTable().getSd().setInputFormat(tbl.getInputFormatClass().getName());
    tbl.getTTable().getSd().setOutputFormat(tbl.getOutputFormatClass().getName());
  }
 else {
    tbl=oldtbl;
    String targetTableName=crtTbl.getTableName();
    String[] names=Utilities.getDbTableName(targetTableName);
    tbl.setDbName(names[0]);
    tbl.setTableName(names[1]);
    tbl.setOwner(SessionState.getUserFromAuthenticator());
    if (crtTbl.getLocation() != null) {
      tbl.setDataLocation(new Path(crtTbl.getLocation()));
    }
 else {
      tbl.unsetDataLocation();
    }
    Class<? extends Deserializer> serdeClass=oldtbl.getDeserializerClass();
    Map<String,String> params=tbl.getParameters();
    SerDeSpec spec=AnnotationUtils.getAnnotation(serdeClass,SerDeSpec.class);
    String paramsStr=HiveConf.getVar(conf,HiveConf.ConfVars.DDL_CTL_PARAMETERS_WHITELIST);
    Set<String> retainer=new HashSet<String>();
    retainer.add(META_TABLE_STORAGE);
    if (spec != null && spec.schemaProps() != null) {
      retainer.addAll(Arrays.asList(spec.schemaProps()));
    }
    if (paramsStr != null) {
      retainer.addAll(Arrays.asList(paramsStr.split(",")));
    }
    if (!retainer.isEmpty()) {
      params.keySet().retainAll(retainer);
    }
 else {
      params.clear();
    }
    if (crtTbl.getTblProps() != null) {
      params.putAll(crtTbl.getTblProps());
    }
    if (crtTbl.isUserStorageFormat()) {
      tbl.setInputFormatClass(crtTbl.getDefaultInputFormat());
      tbl.setOutputFormatClass(crtTbl.getDefaultOutputFormat());
      tbl.getTTable().getSd().setInputFormat(tbl.getInputFormatClass().getName());
      tbl.getTTable().getSd().setOutputFormat(tbl.getOutputFormatClass().getName());
      if (crtTbl.getDefaultSerName() == null) {
        LOG.info("Default to LazySimpleSerDe for like table " + crtTbl.getTableName());
        tbl.setSerializationLib(org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe.class.getName());
      }
 else {
        validateSerDe(crtTbl.getDefaultSerName());
        tbl.setSerializationLib(crtTbl.getDefaultSerName());
      }
    }
    tbl.getTTable().setTemporary(crtTbl.isTemporary());
    if (crtTbl.isExternal()) {
      tbl.setProperty("EXTERNAL","TRUE");
      tbl.setTableType(TableType.EXTERNAL_TABLE);
    }
 else {
      tbl.getParameters().remove("EXTERNAL");
    }
  }
  if (!Utilities.isDefaultNameNode(conf)) {
    makeLocationQualified(tbl.getDbName(),tbl.getTTable().getSd(),tbl.getTableName(),conf);
  }
  if (crtTbl.getLocation() == null && !tbl.isPartitioned() && conf.getBoolVar(HiveConf.ConfVars.HIVESTATSAUTOGATHER)) {
    StatsSetupConst.setBasicStatsStateForCreateTable(tbl.getTTable().getParameters(),StatsSetupConst.TRUE);
  }
  db.createTable(tbl,crtTbl.getIfNotExists());
  work.getOutputs().add(new WriteEntity(tbl,WriteEntity.WriteType.DDL_NO_LOCK));
  return 0;
}
