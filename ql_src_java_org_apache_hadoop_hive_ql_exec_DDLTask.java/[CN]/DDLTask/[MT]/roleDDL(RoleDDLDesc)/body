{
  RoleDDLDesc.RoleOperation operation=roleDDLDesc.getOperation();
  try {
    if (operation.equals(RoleDDLDesc.RoleOperation.CREATE_ROLE)) {
      db.createRole(roleDDLDesc.getName(),roleDDLDesc.getRoleOwnerName());
    }
 else     if (operation.equals(RoleDDLDesc.RoleOperation.DROP_ROLE)) {
      db.dropRole(roleDDLDesc.getName());
    }
 else     if (operation.equals(RoleDDLDesc.RoleOperation.SHOW_ROLE_GRANT)) {
      List<Role> roles=db.showRoleGrant(roleDDLDesc.getName(),roleDDLDesc.getPrincipalType());
      if (roles != null && roles.size() > 0) {
        Path resFile=new Path(roleDDLDesc.getResFile());
        FileSystem fs=resFile.getFileSystem(conf);
        DataOutput outStream=fs.create(resFile);
        for (        Role role : roles) {
          outStream.writeBytes("role name:" + role.getRoleName());
          outStream.write(terminator);
        }
        ((FSDataOutputStream)outStream).close();
      }
    }
 else {
      throw new HiveException("Unkown role operation " + operation.getOperationName());
    }
  }
 catch (  HiveException e) {
    console.printError("Error in role operation " + operation.getOperationName() + " on role name "+ roleDDLDesc.getName()+ ", error message "+ e.getMessage());
    return 1;
  }
catch (  IOException e) {
    LOG.info("role ddl exception: " + stringifyException(e));
    return 1;
  }
  return 0;
}
