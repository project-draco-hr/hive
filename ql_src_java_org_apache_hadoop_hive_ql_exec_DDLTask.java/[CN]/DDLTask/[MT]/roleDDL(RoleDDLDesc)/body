{
  if (SessionState.get().isAuthorizationModeV2()) {
    return roleDDLV2(roleDDLDesc);
  }
  DataOutputStream outStream=null;
  RoleDDLDesc.RoleOperation operation=roleDDLDesc.getOperation();
  try {
    if (operation.equals(RoleDDLDesc.RoleOperation.CREATE_ROLE)) {
      db.createRole(roleDDLDesc.getName(),roleDDLDesc.getRoleOwnerName());
    }
 else     if (operation.equals(RoleDDLDesc.RoleOperation.DROP_ROLE)) {
      db.dropRole(roleDDLDesc.getName());
    }
 else     if (operation.equals(RoleDDLDesc.RoleOperation.SHOW_ROLE_GRANT)) {
      boolean testMode=conf.getBoolVar(HiveConf.ConfVars.HIVE_IN_TEST);
      List<Role> roles=db.showRoleGrant(roleDDLDesc.getName(),roleDDLDesc.getPrincipalType());
      writeToFile(writeRoleInfo(roles,testMode),roleDDLDesc.getResFile());
    }
 else     if (operation.equals(RoleDDLDesc.RoleOperation.SHOW_ROLES)) {
      List<String> roleNames=db.getAllRoleNames();
      Path resFile=new Path(roleDDLDesc.getResFile());
      FileSystem fs=resFile.getFileSystem(conf);
      outStream=fs.create(resFile);
      for (      String roleName : roleNames) {
        outStream.writeBytes(roleName);
        outStream.write(terminator);
      }
      outStream.close();
      outStream=null;
    }
 else {
      throw new HiveException("Unkown role operation " + operation.getOperationName());
    }
  }
 catch (  HiveException e) {
    console.printError("Error in role operation " + operation.getOperationName() + " on role name "+ roleDDLDesc.getName()+ ", error message "+ e.getMessage());
    return 1;
  }
catch (  IOException e) {
    LOG.info("role ddl exception: " + stringifyException(e));
    return 1;
  }
 finally {
    IOUtils.closeStream(outStream);
  }
  return 0;
}
