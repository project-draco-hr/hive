{
  String tabName=showParts.getTabName();
  Table tbl=null;
  List<String> parts=null;
  tbl=db.getTable(tabName);
  if (!tbl.isPartitioned()) {
    console.printError("Table " + tabName + " is not a partitioned table");
    return 1;
  }
  if (showParts.getPartSpec() != null) {
    parts=db.getPartitionNames(db.getCurrentDatabase(),tbl.getTableName(),showParts.getPartSpec(),(short)-1);
  }
 else {
    parts=db.getPartitionNames(db.getCurrentDatabase(),tbl.getTableName(),(short)-1);
  }
  try {
    Path resFile=new Path(showParts.getResFile());
    FileSystem fs=resFile.getFileSystem(conf);
    DataOutput outStream=fs.create(resFile);
    Iterator<String> iterParts=parts.iterator();
    while (iterParts.hasNext()) {
      outStream.writeBytes(iterParts.next());
      outStream.write(terminator);
    }
    ((FSDataOutputStream)outStream).close();
  }
 catch (  FileNotFoundException e) {
    LOG.info("show partitions: " + stringifyException(e));
    throw new HiveException(e.toString());
  }
catch (  IOException e) {
    LOG.info("show partitions: " + stringifyException(e));
    throw new HiveException(e.toString());
  }
catch (  Exception e) {
    throw new HiveException(e.toString());
  }
  return 0;
}
