{
  String tabName=showParts.getTabName();
  Table tbl=null;
  List<String> parts=null;
  tbl=db.getTable(tabName);
  if (!tbl.isPartitioned()) {
    formatter.consoleError(console,"Table " + tabName + " is not a partitioned table",formatter.ERROR);
    return 1;
  }
  if (showParts.getPartSpec() != null) {
    parts=db.getPartitionNames(tbl.getDbName(),tbl.getTableName(),showParts.getPartSpec(),(short)-1);
  }
 else {
    parts=db.getPartitionNames(tbl.getDbName(),tbl.getTableName(),(short)-1);
  }
  DataOutputStream outStream=null;
  try {
    Path resFile=new Path(showParts.getResFile());
    FileSystem fs=resFile.getFileSystem(conf);
    outStream=fs.create(resFile);
    formatter.showTablePartitons(outStream,parts);
    ((FSDataOutputStream)outStream).close();
    outStream=null;
  }
 catch (  FileNotFoundException e) {
    formatter.logWarn(outStream,"show partitions: " + stringifyException(e),MetaDataFormatter.ERROR);
    return 1;
  }
catch (  IOException e) {
    formatter.logWarn(outStream,"show partitions: " + stringifyException(e),MetaDataFormatter.ERROR);
    return 1;
  }
catch (  Exception e) {
    throw new HiveException(e);
  }
 finally {
    IOUtils.closeStream((FSDataOutputStream)outStream);
  }
  return 0;
}
