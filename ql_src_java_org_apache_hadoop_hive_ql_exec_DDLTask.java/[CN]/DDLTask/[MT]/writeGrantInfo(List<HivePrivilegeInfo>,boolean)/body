{
  if (privileges == null || privileges.isEmpty()) {
    return "";
  }
  StringBuilder builder=new StringBuilder();
  Collections.sort(privileges,new Comparator<HivePrivilegeInfo>(){
    @Override public int compare(    HivePrivilegeInfo o1,    HivePrivilegeInfo o2){
      int compare=o1.getObject().compareTo(o2.getObject());
      if (compare == 0) {
        compare=o1.getPrincipal().compareTo(o2.getPrincipal());
      }
      if (compare == 0) {
        compare=o1.getPrivilege().compareTo(o2.getPrivilege());
      }
      return compare;
    }
  }
);
  for (  HivePrivilegeInfo privilege : privileges) {
    HivePrincipal principal=privilege.getPrincipal();
    HivePrivilegeObject resource=privilege.getObject();
    HivePrincipal grantor=privilege.getGrantorPrincipal();
    appendNonNull(builder,resource.getDbname(),true);
    appendNonNull(builder,resource.getObjectName());
    appendNonNull(builder,resource.getPartKeys());
    appendNonNull(builder,resource.getColumns());
    appendNonNull(builder,principal.getName());
    appendNonNull(builder,principal.getType());
    appendNonNull(builder,privilege.getPrivilege().getName());
    appendNonNull(builder,privilege.isGrantOption());
    appendNonNull(builder,testMode ? -1 : privilege.getGrantTime() * 1000L);
    appendNonNull(builder,grantor.getName());
  }
  return builder.toString();
}
