{
  if (bt.isList()) {
    return ObjectInspectorFactory.getStandardListObjectInspector(dynamicSerDeStructBaseToObjectInspector(((DynamicSerDeTypeList)bt).getElementType()));
  }
 else   if (bt.isMap()) {
    DynamicSerDeTypeMap btMap=(DynamicSerDeTypeMap)bt;
    return ObjectInspectorFactory.getStandardMapObjectInspector(dynamicSerDeStructBaseToObjectInspector(btMap.getKeyType()),dynamicSerDeStructBaseToObjectInspector(btMap.getValueType()));
  }
 else   if (bt.isPrimitive()) {
    PrimitiveTypeEntry pte=PrimitiveObjectInspectorUtils.getTypeEntryFromPrimitiveJavaClass(bt.getRealType());
    return PrimitiveObjectInspectorFactory.getPrimitiveJavaObjectInspector(pte.primitiveCategory);
  }
 else {
    DynamicSerDeStructBase btStruct=(DynamicSerDeStructBase)bt;
    DynamicSerDeFieldList fieldList=btStruct.getFieldList();
    DynamicSerDeField[] fields=fieldList.getChildren();
    ArrayList<String> fieldNames=new ArrayList<String>(fields.length);
    ArrayList<ObjectInspector> fieldObjectInspectors=new ArrayList<ObjectInspector>(fields.length);
    for (    DynamicSerDeField field : fields) {
      fieldNames.add(field.name);
      fieldObjectInspectors.add(dynamicSerDeStructBaseToObjectInspector(field.getFieldType().getMyType()));
    }
    return ObjectInspectorFactory.getStandardStructObjectInspector(fieldNames,fieldObjectInspectors);
  }
}
