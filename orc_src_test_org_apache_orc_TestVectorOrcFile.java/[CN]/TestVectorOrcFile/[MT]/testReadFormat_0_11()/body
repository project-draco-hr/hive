{
  Path oldFilePath=new Path(TestJsonFileDump.getFileFromClasspath("orc-file-11-format.orc"));
  Reader reader=OrcFile.createReader(oldFilePath,OrcFile.readerOptions(conf).filesystem(fs));
  int stripeCount=0;
  int rowCount=0;
  long currentOffset=-1;
  for (  StripeInformation stripe : reader.getStripes()) {
    stripeCount+=1;
    rowCount+=stripe.getNumberOfRows();
    if (currentOffset < 0) {
      currentOffset=stripe.getOffset() + stripe.getIndexLength() + stripe.getDataLength()+ stripe.getFooterLength();
    }
 else {
      assertEquals(currentOffset,stripe.getOffset());
      currentOffset+=stripe.getIndexLength() + stripe.getDataLength() + stripe.getFooterLength();
    }
  }
  Assert.assertEquals(reader.getNumberOfRows(),rowCount);
  assertEquals(2,stripeCount);
  ColumnStatistics[] stats=reader.getStatistics();
  assertEquals(7500,stats[1].getNumberOfValues());
  assertEquals(3750,((BooleanColumnStatistics)stats[1]).getFalseCount());
  assertEquals(3750,((BooleanColumnStatistics)stats[1]).getTrueCount());
  assertEquals("count: 7500 hasNull: true true: 3750",stats[1].toString());
  assertEquals(2048,((IntegerColumnStatistics)stats[3]).getMaximum());
  assertEquals(1024,((IntegerColumnStatistics)stats[3]).getMinimum());
  assertEquals(true,((IntegerColumnStatistics)stats[3]).isSumDefined());
  assertEquals(11520000,((IntegerColumnStatistics)stats[3]).getSum());
  assertEquals("count: 7500 hasNull: true min: 1024 max: 2048 sum: 11520000",stats[3].toString());
  assertEquals(Long.MAX_VALUE,((IntegerColumnStatistics)stats[5]).getMaximum());
  assertEquals(Long.MAX_VALUE,((IntegerColumnStatistics)stats[5]).getMinimum());
  assertEquals(false,((IntegerColumnStatistics)stats[5]).isSumDefined());
  assertEquals("count: 7500 hasNull: true min: 9223372036854775807 max: 9223372036854775807",stats[5].toString());
  assertEquals(-15.0,((DoubleColumnStatistics)stats[7]).getMinimum(),0.0001);
  assertEquals(-5.0,((DoubleColumnStatistics)stats[7]).getMaximum(),0.0001);
  assertEquals(-75000.0,((DoubleColumnStatistics)stats[7]).getSum(),0.00001);
  assertEquals("count: 7500 hasNull: true min: -15.0 max: -5.0 sum: -75000.0",stats[7].toString());
  assertEquals("count: 7500 hasNull: true min: bye max: hi sum: 0",stats[9].toString());
  TypeDescription schema=reader.getSchema();
  assertEquals(TypeDescription.Category.STRUCT,schema.getCategory());
  assertEquals("struct<boolean1:boolean,byte1:tinyint,short1:smallint," + "int1:int,long1:bigint,float1:float,double1:double,bytes1:" + "binary,string1:string,middle:struct<list:array<struct<int1:int,"+ "string1:string>>>,list:array<struct<int1:int,string1:string>>,"+ "map:map<string,struct<int1:int,string1:string>>,ts:timestamp,"+ "decimal1:decimal(38,10)>",schema.toString());
  VectorizedRowBatch batch=schema.createRowBatch();
  RecordReader rows=reader.rows();
  Assert.assertEquals(true,rows.nextBatch(batch));
  assertEquals(1024,batch.size);
  assertEquals(false,getBoolean(batch,0));
  assertEquals(1,getByte(batch,0));
  assertEquals(1024,getShort(batch,0));
  assertEquals(65536,getInt(batch,0));
  assertEquals(Long.MAX_VALUE,getLong(batch,0));
  assertEquals(1.0,getFloat(batch,0),0.00001);
  assertEquals(-15.0,getDouble(batch,0),0.00001);
  assertEquals(bytes(0,1,2,3,4),getBinary(batch,0));
  assertEquals("hi",getText(batch,0).toString());
  StructColumnVector middle=(StructColumnVector)batch.cols[9];
  ListColumnVector midList=(ListColumnVector)middle.fields[0];
  StructColumnVector midListStruct=(StructColumnVector)midList.child;
  LongColumnVector midListInt=(LongColumnVector)midListStruct.fields[0];
  BytesColumnVector midListStr=(BytesColumnVector)midListStruct.fields[1];
  ListColumnVector list=(ListColumnVector)batch.cols[10];
  StructColumnVector listStruct=(StructColumnVector)list.child;
  LongColumnVector listInts=(LongColumnVector)listStruct.fields[0];
  BytesColumnVector listStrs=(BytesColumnVector)listStruct.fields[1];
  MapColumnVector map=(MapColumnVector)batch.cols[11];
  BytesColumnVector mapKey=(BytesColumnVector)map.keys;
  StructColumnVector mapValue=(StructColumnVector)map.values;
  LongColumnVector mapValueInts=(LongColumnVector)mapValue.fields[0];
  BytesColumnVector mapValueStrs=(BytesColumnVector)mapValue.fields[1];
  TimestampColumnVector timestamp=(TimestampColumnVector)batch.cols[12];
  DecimalColumnVector decs=(DecimalColumnVector)batch.cols[13];
  assertEquals(false,middle.isNull[0]);
  assertEquals(2,midList.lengths[0]);
  int start=(int)midList.offsets[0];
  assertEquals(1,midListInt.vector[start]);
  assertEquals("bye",midListStr.toString(start));
  assertEquals(2,midListInt.vector[start + 1]);
  assertEquals("sigh",midListStr.toString(start + 1));
  assertEquals(2,list.lengths[0]);
  start=(int)list.offsets[0];
  assertEquals(3,listInts.vector[start]);
  assertEquals("good",listStrs.toString(start));
  assertEquals(4,listInts.vector[start + 1]);
  assertEquals("bad",listStrs.toString(start + 1));
  assertEquals(0,map.lengths[0]);
  assertEquals(Timestamp.valueOf("2000-03-12 15:00:00"),timestamp.asScratchTimestamp(0));
  assertEquals(new HiveDecimalWritable(HiveDecimal.create("12345678.6547456")),decs.vector[0]);
  rows.seekToRow(7499);
  Assert.assertEquals(true,rows.nextBatch(batch));
  assertEquals(true,getBoolean(batch,0));
  assertEquals(100,getByte(batch,0));
  assertEquals(2048,getShort(batch,0));
  assertEquals(65536,getInt(batch,0));
  assertEquals(Long.MAX_VALUE,getLong(batch,0));
  assertEquals(2.0,getFloat(batch,0),0.00001);
  assertEquals(-5.0,getDouble(batch,0),0.00001);
  assertEquals(bytes(),getBinary(batch,0));
  assertEquals("bye",getText(batch,0).toString());
  assertEquals(false,middle.isNull[0]);
  assertEquals(2,midList.lengths[0]);
  start=(int)midList.offsets[0];
  assertEquals(1,midListInt.vector[start]);
  assertEquals("bye",midListStr.toString(start));
  assertEquals(2,midListInt.vector[start + 1]);
  assertEquals("sigh",midListStr.toString(start + 1));
  assertEquals(3,list.lengths[0]);
  start=(int)list.offsets[0];
  assertEquals(100000000,listInts.vector[start]);
  assertEquals("cat",listStrs.toString(start));
  assertEquals(-100000,listInts.vector[start + 1]);
  assertEquals("in",listStrs.toString(start + 1));
  assertEquals(1234,listInts.vector[start + 2]);
  assertEquals("hat",listStrs.toString(start + 2));
  assertEquals(2,map.lengths[0]);
  start=(int)map.offsets[0];
  assertEquals("chani",mapKey.toString(start));
  assertEquals(5,mapValueInts.vector[start]);
  assertEquals("chani",mapValueStrs.toString(start));
  assertEquals("mauddib",mapKey.toString(start + 1));
  assertEquals(1,mapValueInts.vector[start + 1]);
  assertEquals("mauddib",mapValueStrs.toString(start + 1));
  assertEquals(Timestamp.valueOf("2000-03-12 15:00:01"),timestamp.asScratchTimestamp(0));
  assertEquals(new HiveDecimalWritable(HiveDecimal.create("12345678.6547457")),decs.vector[0]);
  Assert.assertEquals(false,rows.nextBatch(batch));
  rows.close();
}
