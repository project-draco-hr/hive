{
  TypeDescription schema=createInnerSchema();
  Writer writer=OrcFile.createWriter(testFilePath,OrcFile.writerOptions(conf).setSchema(schema).stripeSize(400000L).compress(CompressionKind.NONE).bufferSize(500).rowIndexStride(1000));
  VectorizedRowBatch batch=schema.createRowBatch();
  batch.ensureSize(3500);
  batch.size=3500;
  for (int i=0; i < 3500; ++i) {
    ((LongColumnVector)batch.cols[0]).vector[i]=i * 300;
    ((BytesColumnVector)batch.cols[1]).setVal(i,Integer.toHexString(10 * i).getBytes());
  }
  writer.addRowBatch(batch);
  writer.close();
  Reader reader=OrcFile.createReader(testFilePath,OrcFile.readerOptions(conf).filesystem(fs));
  assertEquals(3500,reader.getNumberOfRows());
  SearchArgument sarg=SearchArgumentFactory.newBuilder().startAnd().startNot().lessThan("int1",PredicateLeaf.Type.LONG,300000L).end().lessThan("int1",PredicateLeaf.Type.LONG,600000L).end().build();
  RecordReader rows=reader.rows(new Reader.Options().range(0L,Long.MAX_VALUE).include(new boolean[]{true,true,true}).searchArgument(sarg,new String[]{null,"int1","string1"}));
  batch=reader.getSchema().createRowBatch(2000);
  LongColumnVector ints=(LongColumnVector)batch.cols[0];
  BytesColumnVector strs=(BytesColumnVector)batch.cols[1];
  Assert.assertEquals(1000L,rows.getRowNumber());
  Assert.assertEquals(true,rows.nextBatch(batch));
  assertEquals(1000,batch.size);
  for (int i=1000; i < 2000; ++i) {
    assertEquals(300 * i,ints.vector[i - 1000]);
    assertEquals(Integer.toHexString(10 * i),strs.toString(i - 1000));
  }
  Assert.assertEquals(false,rows.nextBatch(batch));
  Assert.assertEquals(3500,rows.getRowNumber());
  sarg=SearchArgumentFactory.newBuilder().startAnd().lessThan("int1",PredicateLeaf.Type.LONG,0L).end().build();
  rows=reader.rows(new Reader.Options().range(0L,Long.MAX_VALUE).include(new boolean[]{true,true,true}).searchArgument(sarg,new String[]{null,"int1","string1"}));
  Assert.assertEquals(3500L,rows.getRowNumber());
  assertTrue(!rows.nextBatch(batch));
  sarg=SearchArgumentFactory.newBuilder().startOr().lessThan("int1",PredicateLeaf.Type.LONG,300L * 100).startNot().lessThan("int1",PredicateLeaf.Type.LONG,300L * 3400).end().end().build();
  rows=reader.rows(new Reader.Options().range(0L,Long.MAX_VALUE).include(new boolean[]{true,true,true}).searchArgument(sarg,new String[]{null,"int1","string1"}));
  Assert.assertEquals(0,rows.getRowNumber());
  Assert.assertEquals(true,rows.nextBatch(batch));
  assertEquals(1000,batch.size);
  Assert.assertEquals(3000,rows.getRowNumber());
  for (int i=0; i < 1000; ++i) {
    assertEquals(300 * i,ints.vector[i]);
    assertEquals(Integer.toHexString(10 * i),strs.toString(i));
  }
  Assert.assertEquals(true,rows.nextBatch(batch));
  assertEquals(500,batch.size);
  Assert.assertEquals(3500,rows.getRowNumber());
  for (int i=3000; i < 3500; ++i) {
    assertEquals(300 * i,ints.vector[i - 3000]);
    assertEquals(Integer.toHexString(10 * i),strs.toString(i - 3000));
  }
  Assert.assertEquals(false,rows.nextBatch(batch));
  Assert.assertEquals(3500,rows.getRowNumber());
}
