{
  assertEquals("row " + rowId,b1,getBoolean(batch,rowInBatch));
  assertEquals("row " + rowId,b2,getByte(batch,rowInBatch));
  assertEquals("row " + rowId,s1,getShort(batch,rowInBatch));
  assertEquals("row " + rowId,i1,getInt(batch,rowInBatch));
  assertEquals("row " + rowId,l1,getLong(batch,rowInBatch));
  assertEquals("row " + rowId,f1,getFloat(batch,rowInBatch),0.0001);
  assertEquals("row " + rowId,d1,getDouble(batch,rowInBatch),0.0001);
  if (b3 != null) {
    BytesColumnVector bytes=(BytesColumnVector)batch.cols[7];
    assertEquals("row " + rowId,b3.getLength(),bytes.length[rowInBatch]);
    for (int i=0; i < b3.getLength(); ++i) {
      assertEquals("row " + rowId + " byte "+ i,b3.getBytes()[i],bytes.vector[rowInBatch][bytes.start[rowInBatch] + i]);
    }
  }
 else {
    assertEquals("row " + rowId,true,batch.cols[7].isNull[rowInBatch]);
    assertEquals("row " + rowId,false,batch.cols[7].noNulls);
  }
  if (s2 != null) {
    assertEquals("row " + rowId,s2,getText(batch,rowInBatch).toString());
  }
 else {
    assertEquals("row " + rowId,true,batch.cols[8].isNull[rowInBatch]);
    assertEquals("row " + rowId,false,batch.cols[8].noNulls);
  }
  checkMiddleStruct((StructColumnVector)batch.cols[9],rowId,rowInBatch,m1);
  checkInnerList((ListColumnVector)batch.cols[10],rowId,rowInBatch,l2);
  checkInnerMap((MapColumnVector)batch.cols[11],rowId,rowInBatch,m2);
}
