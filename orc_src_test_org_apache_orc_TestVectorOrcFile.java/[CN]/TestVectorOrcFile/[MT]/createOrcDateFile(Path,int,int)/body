{
  TypeDescription schema=TypeDescription.createStruct().addField("time",TypeDescription.createTimestamp()).addField("date",TypeDescription.createDate());
  Writer writer=OrcFile.createWriter(file,OrcFile.writerOptions(conf).setSchema(schema).stripeSize(100000).bufferSize(10000).blockPadding(false));
  VectorizedRowBatch batch=schema.createRowBatch();
  batch.size=1000;
  for (int year=minYear; year < maxYear; ++year) {
    for (int ms=1000; ms < 2000; ++ms) {
      TimestampColumnVector timestampColVector=(TimestampColumnVector)batch.cols[0];
      timestampColVector.set(ms - 1000,Timestamp.valueOf(year + "-05-05 12:34:56." + ms));
      ((LongColumnVector)batch.cols[1]).vector[ms - 1000]=new DateWritable(new Date(year - 1900,11,25)).getDays();
    }
    writer.addRowBatch(batch);
  }
  writer.close();
  Reader reader=OrcFile.createReader(file,OrcFile.readerOptions(conf));
  RecordReader rows=reader.rows();
  batch=reader.getSchema().createRowBatch(1000);
  TimestampColumnVector times=(TimestampColumnVector)batch.cols[0];
  LongColumnVector dates=(LongColumnVector)batch.cols[1];
  for (int year=minYear; year < maxYear; ++year) {
    rows.nextBatch(batch);
    assertEquals(1000,batch.size);
    for (int ms=1000; ms < 2000; ++ms) {
      StringBuilder buffer=new StringBuilder();
      times.stringifyValue(buffer,ms - 1000);
      String expected=Integer.toString(year) + "-05-05 12:34:56.";
      int roundedMs=ms;
      for (int round=1000; round > 0; round/=10) {
        if (ms % round == 0) {
          roundedMs=ms / round;
          break;
        }
      }
      expected+=roundedMs;
      assertEquals(expected,buffer.toString());
      assertEquals(Integer.toString(year) + "-12-25",new DateWritable((int)dates.vector[ms - 1000]).toString());
    }
  }
  rows.nextBatch(batch);
  assertEquals(0,batch.size);
}
