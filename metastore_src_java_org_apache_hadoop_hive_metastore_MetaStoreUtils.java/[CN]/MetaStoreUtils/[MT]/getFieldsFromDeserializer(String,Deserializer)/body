{
  ObjectInspector oi=deserializer.getObjectInspector();
  String[] names=tableName.split("\\.");
  String last_name=names[names.length - 1];
  for (int i=1; i < names.length; i++) {
    if (oi instanceof StructObjectInspector) {
      StructObjectInspector soi=(StructObjectInspector)oi;
      StructField sf=soi.getStructFieldRef(names[i]);
      if (sf == null) {
        throw new MetaException("Invalid Field " + names[i]);
      }
 else {
        oi=sf.getFieldObjectInspector();
      }
    }
 else     if (oi instanceof ListObjectInspector && names[i].equalsIgnoreCase("$elem$")) {
      ListObjectInspector loi=(ListObjectInspector)oi;
      oi=loi.getListElementObjectInspector();
    }
 else     if (oi instanceof MapObjectInspector && names[i].equalsIgnoreCase("$key$")) {
      MapObjectInspector moi=(MapObjectInspector)oi;
      oi=moi.getMapKeyObjectInspector();
    }
 else     if (oi instanceof MapObjectInspector && names[i].equalsIgnoreCase("$value$")) {
      MapObjectInspector moi=(MapObjectInspector)oi;
      oi=moi.getMapValueObjectInspector();
    }
 else {
      throw new MetaException("Unknown type for " + names[i]);
    }
  }
  ArrayList<FieldSchema> str_fields=new ArrayList<FieldSchema>();
  if (oi.getCategory() != Category.STRUCT) {
    str_fields.add(new FieldSchema(last_name,oi.getTypeName(),FROM_SERIALIZER));
  }
 else {
    List<? extends StructField> fields=((StructObjectInspector)oi).getAllStructFieldRefs();
    for (int i=0; i < fields.size(); i++) {
      StructField structField=fields.get(i);
      String fieldName=structField.getFieldName();
      String fieldTypeName=structField.getFieldObjectInspector().getTypeName();
      String fieldComment=determineFieldComment(structField.getFieldComment());
      str_fields.add(new FieldSchema(fieldName,fieldTypeName,fieldComment));
    }
  }
  return str_fields;
}
