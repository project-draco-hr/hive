{
  ObjectInspector oi=deserializer.getObjectInspector();
  String[] names=tableName.split("\\.");
  String last_name=names[names.length - 1];
  for (int i=1; i < names.length; i++) {
    if (!(oi instanceof StructObjectInspector)) {
      oi=deserializer.getObjectInspector();
      break;
    }
    StructObjectInspector soi=(StructObjectInspector)oi;
    StructField sf=soi.getStructFieldRef(names[i]);
    if (sf == null) {
      oi=deserializer.getObjectInspector();
      break;
    }
 else {
      oi=sf.getFieldObjectInspector();
    }
  }
  ArrayList<FieldSchema> str_fields=new ArrayList<FieldSchema>();
  if (oi.getCategory() != Category.STRUCT) {
    str_fields.add(new FieldSchema(last_name,oi.getTypeName(),"from deserializer"));
  }
 else {
    List<? extends StructField> fields=((StructObjectInspector)oi).getAllStructFieldRefs();
    for (int i=0; i < fields.size(); i++) {
      String fieldName=fields.get(i).getFieldName();
      String fieldTypeName=fields.get(i).getFieldObjectInspector().getTypeName();
      str_fields.add(new FieldSchema(fieldName,fieldTypeName,"from deserializer"));
    }
  }
  return str_fields;
}
