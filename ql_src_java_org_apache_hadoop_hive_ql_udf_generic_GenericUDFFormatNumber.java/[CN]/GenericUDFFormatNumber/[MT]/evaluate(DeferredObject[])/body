{
  Object arg0;
  Object arg1;
  if ((arg0=arguments[0].get()) == null || (arg1=arguments[1].get()) == null) {
    return null;
  }
  if (!dType.equals(PrimitiveCategory.STRING)) {
    int dValue=((IntObjectInspector)argumentOIs[1]).get(arg1);
    if (dValue < 0) {
      throw new HiveException("Argument 2 of function FORMAT_NUMBER must be >= 0, but \"" + dValue + "\" was found");
    }
    if (dValue != lastDValue) {
      pattern.delete(0,pattern.length());
      pattern.append("#,###,###,###,###,###,##0");
      if (dValue > 0) {
        pattern.append(".");
        for (int i=0; i < dValue; i++) {
          pattern.append("0");
        }
      }
      DecimalFormat dFormat=new DecimalFormat(pattern.toString());
      lastDValue=dValue;
      numberFormat.applyPattern(dFormat.toPattern());
    }
  }
  double xDoubleValue=0.0;
  float xFloatValue=0.0f;
  HiveDecimal xDecimalValue=null;
  int xIntValue=0;
  long xLongValue=0L;
  PrimitiveObjectInspector xObjectInspector=(PrimitiveObjectInspector)argumentOIs[0];
switch (xObjectInspector.getPrimitiveCategory()) {
case VOID:
case DOUBLE:
    xDoubleValue=((DoubleObjectInspector)argumentOIs[0]).get(arg0);
  resultText.set(numberFormat.format(xDoubleValue));
break;
case FLOAT:
xFloatValue=((FloatObjectInspector)argumentOIs[0]).get(arg0);
resultText.set(numberFormat.format(xFloatValue));
break;
case DECIMAL:
xDecimalValue=((HiveDecimalObjectInspector)argumentOIs[0]).getPrimitiveJavaObject(arg0);
resultText.set(numberFormat.format(xDecimalValue.bigDecimalValue()));
break;
case BYTE:
case SHORT:
case INT:
xIntValue=((IntObjectInspector)argumentOIs[0]).get(arg0);
resultText.set(numberFormat.format(xIntValue));
break;
case LONG:
xLongValue=((LongObjectInspector)argumentOIs[0]).get(arg0);
resultText.set(numberFormat.format(xLongValue));
break;
default :
throw new HiveException("Argument 1 of function FORMAT_NUMBER must be " + serdeConstants.TINYINT_TYPE_NAME + "\""+ " or \""+ serdeConstants.SMALLINT_TYPE_NAME+ "\""+ " or \""+ serdeConstants.INT_TYPE_NAME+ "\""+ " or \""+ serdeConstants.BIGINT_TYPE_NAME+ "\""+ " or \""+ serdeConstants.DOUBLE_TYPE_NAME+ "\""+ " or \""+ serdeConstants.FLOAT_TYPE_NAME+ "\""+ " or \""+ serdeConstants.DECIMAL_TYPE_NAME+ "\", but \""+ argumentOIs[0].getTypeName()+ "\" was found.");
}
return resultText;
}
