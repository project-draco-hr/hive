{
  int dValue=((IntObjectInspector)argumentOIs[1]).get(arguments[1].get());
  if (dValue < 0) {
    throw new HiveException("Argument 2 of function FORMAT_NUMBER must be >= 0, but \"" + dValue + "\" was found");
  }
  if (dValue != lastDValue) {
    pattern.delete(0,pattern.length());
    pattern.append("#,###,###,###,###,###,##0");
    if (dValue > 0) {
      pattern.append(".");
      for (int i=0; i < dValue; i++) {
        pattern.append("0");
      }
    }
    DecimalFormat dFormat=new DecimalFormat(pattern.toString());
    lastDValue=dValue;
    numberFormat.applyPattern(dFormat.toPattern());
  }
  double xDoubleValue=0.0;
  int xIntValue=0;
  long xLongValue=0L;
  PrimitiveObjectInspector xObjectInspector=(PrimitiveObjectInspector)argumentOIs[0];
switch (xObjectInspector.getPrimitiveCategory()) {
case VOID:
case FLOAT:
case DOUBLE:
    xDoubleValue=((DoubleObjectInspector)argumentOIs[0]).get(arguments[0].get());
  resultText.set(numberFormat.format(xDoubleValue));
break;
case BYTE:
case SHORT:
case INT:
xIntValue=((IntObjectInspector)argumentOIs[0]).get(arguments[0].get());
resultText.set(numberFormat.format(xIntValue));
break;
case LONG:
xLongValue=((LongObjectInspector)argumentOIs[0]).get(arguments[0].get());
resultText.set(numberFormat.format(xLongValue));
break;
default :
throw new HiveException("Argument 1 of function FORMAT_NUMBER must be " + Constants.TINYINT_TYPE_NAME + "\""+ " or \""+ Constants.SMALLINT_TYPE_NAME+ "\""+ " or \""+ Constants.INT_TYPE_NAME+ "\""+ " or \""+ Constants.BIGINT_TYPE_NAME+ "\""+ " or \""+ Constants.DOUBLE_TYPE_NAME+ "\""+ " or \""+ Constants.FLOAT_TYPE_NAME+ "\", but \""+ argumentOIs[0].getTypeName()+ "\" was found.");
}
return resultText;
}
