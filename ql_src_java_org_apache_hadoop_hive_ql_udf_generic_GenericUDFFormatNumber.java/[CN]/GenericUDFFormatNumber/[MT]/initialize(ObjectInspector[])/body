{
  if (arguments.length != 2) {
    throw new UDFArgumentLengthException("The function FORMAT_NUMBER(X, D) needs two arguments.");
  }
switch (arguments[0].getCategory()) {
case PRIMITIVE:
    break;
default :
  throw new UDFArgumentTypeException(0,"Argument 1" + " of function FORMAT_NUMBER must be \"" + Constants.TINYINT_TYPE_NAME + "\""+ " or \""+ Constants.SMALLINT_TYPE_NAME+ "\""+ " or \""+ Constants.INT_TYPE_NAME+ "\""+ " or \""+ Constants.BIGINT_TYPE_NAME+ "\""+ " or \""+ Constants.DOUBLE_TYPE_NAME+ "\""+ " or \""+ Constants.FLOAT_TYPE_NAME+ "\", but \""+ arguments[0].getTypeName()+ "\" was found.");
}
switch (arguments[1].getCategory()) {
case PRIMITIVE:
break;
default :
throw new UDFArgumentTypeException(1,"Argument 2" + " of function FORMAT_NUMBER must be \"" + Constants.TINYINT_TYPE_NAME + "\""+ " or \""+ Constants.SMALLINT_TYPE_NAME+ "\""+ " or \""+ Constants.INT_TYPE_NAME+ "\""+ " or \""+ Constants.BIGINT_TYPE_NAME+ "\", but \""+ arguments[1].getTypeName()+ "\" was found.");
}
PrimitiveObjectInspector xObjectInspector=(PrimitiveObjectInspector)arguments[0];
PrimitiveObjectInspector dObjectInspector=(PrimitiveObjectInspector)arguments[1];
switch (xObjectInspector.getPrimitiveCategory()) {
case VOID:
case BYTE:
case SHORT:
case INT:
case LONG:
case FLOAT:
case DOUBLE:
break;
default :
throw new UDFArgumentTypeException(0,"Argument 1" + " of function FORMAT_NUMBER must be \"" + Constants.TINYINT_TYPE_NAME + "\""+ " or \""+ Constants.SMALLINT_TYPE_NAME+ "\""+ " or \""+ Constants.INT_TYPE_NAME+ "\""+ " or \""+ Constants.BIGINT_TYPE_NAME+ "\""+ " or \""+ Constants.DOUBLE_TYPE_NAME+ "\""+ " or \""+ Constants.FLOAT_TYPE_NAME+ "\", but \""+ arguments[0].getTypeName()+ "\" was found.");
}
switch (dObjectInspector.getPrimitiveCategory()) {
case VOID:
case BYTE:
case SHORT:
case INT:
case LONG:
break;
default :
throw new UDFArgumentTypeException(1,"Argument 2" + " of function FORMAT_NUMBER must be \"" + Constants.TINYINT_TYPE_NAME + "\""+ " or \""+ Constants.SMALLINT_TYPE_NAME+ "\""+ " or \""+ Constants.INT_TYPE_NAME+ "\""+ " or \""+ Constants.BIGINT_TYPE_NAME+ "\", but \""+ arguments[1].getTypeName()+ "\" was found.");
}
argumentOIs=arguments;
return PrimitiveObjectInspectorFactory.writableStringObjectInspector;
}
