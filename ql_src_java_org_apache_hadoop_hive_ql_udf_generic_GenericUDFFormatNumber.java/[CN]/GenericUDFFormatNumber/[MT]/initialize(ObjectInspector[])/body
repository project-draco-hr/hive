{
  if (arguments.length != 2) {
    throw new UDFArgumentLengthException("The function FORMAT_NUMBER(X, D or F) needs two arguments.");
  }
switch (arguments[0].getCategory()) {
case PRIMITIVE:
    break;
default :
  throw new UDFArgumentTypeException(0,"Argument 1" + " of function FORMAT_NUMBER must be \"" + serdeConstants.TINYINT_TYPE_NAME + "\""+ " or \""+ serdeConstants.SMALLINT_TYPE_NAME+ "\""+ " or \""+ serdeConstants.INT_TYPE_NAME+ "\""+ " or \""+ serdeConstants.BIGINT_TYPE_NAME+ "\""+ " or \""+ serdeConstants.DOUBLE_TYPE_NAME+ "\""+ " or \""+ serdeConstants.FLOAT_TYPE_NAME+ "\""+ " or \""+ serdeConstants.DECIMAL_TYPE_NAME+ "\", but \""+ arguments[0].getTypeName()+ "\" was found.");
}
switch (arguments[1].getCategory()) {
case PRIMITIVE:
break;
default :
throw new UDFArgumentTypeException(1,"Argument 2" + " of function FORMAT_NUMBER must be \"" + serdeConstants.TINYINT_TYPE_NAME + "\""+ " or \""+ serdeConstants.SMALLINT_TYPE_NAME+ "\""+ " or \""+ serdeConstants.INT_TYPE_NAME+ "\""+ " or \""+ serdeConstants.BIGINT_TYPE_NAME+ "\""+ " or \""+ serdeConstants.STRING_TYPE_NAME+ "\", but \""+ arguments[1].getTypeName()+ "\" was found.");
}
PrimitiveObjectInspector xObjectInspector=(PrimitiveObjectInspector)arguments[0];
PrimitiveObjectInspector dObjectInspector=(PrimitiveObjectInspector)arguments[1];
switch (xObjectInspector.getPrimitiveCategory()) {
case VOID:
case BYTE:
case SHORT:
case INT:
case LONG:
case DOUBLE:
case FLOAT:
case DECIMAL:
break;
default :
throw new UDFArgumentTypeException(0,"Argument 1" + " of function FORMAT_NUMBER must be \"" + serdeConstants.TINYINT_TYPE_NAME + "\""+ " or \""+ serdeConstants.SMALLINT_TYPE_NAME+ "\""+ " or \""+ serdeConstants.INT_TYPE_NAME+ "\""+ " or \""+ serdeConstants.BIGINT_TYPE_NAME+ "\""+ " or \""+ serdeConstants.DOUBLE_TYPE_NAME+ "\""+ " or \""+ serdeConstants.FLOAT_TYPE_NAME+ "\""+ " or \""+ serdeConstants.DECIMAL_TYPE_NAME+ "\", but \""+ arguments[0].getTypeName()+ "\" was found.");
}
dType=dObjectInspector.getPrimitiveCategory();
switch (dType) {
case VOID:
case BYTE:
case SHORT:
case INT:
case LONG:
break;
case STRING:
if (!(arguments[1] instanceof ConstantObjectInspector)) {
throw new UDFArgumentTypeException(1,"Format string passed must be a constant STRING." + arguments[1].toString());
}
ConstantObjectInspector constantOI=(ConstantObjectInspector)arguments[1];
String fValue=constantOI.getWritableConstantValue().toString();
DecimalFormat dFormat=new DecimalFormat(fValue);
numberFormat.applyPattern(dFormat.toPattern());
break;
default :
throw new UDFArgumentTypeException(1,"Argument 2" + " of function FORMAT_NUMBER must be \"" + serdeConstants.TINYINT_TYPE_NAME + "\""+ " or \""+ serdeConstants.SMALLINT_TYPE_NAME+ "\""+ " or \""+ serdeConstants.INT_TYPE_NAME+ "\""+ " or \""+ serdeConstants.BIGINT_TYPE_NAME+ "\""+ " or \""+ serdeConstants.STRING_TYPE_NAME+ "\", but \""+ arguments[1].getTypeName()+ "\" was found.");
}
argumentOIs=arguments;
return PrimitiveObjectInspectorFactory.writableStringObjectInspector;
}
