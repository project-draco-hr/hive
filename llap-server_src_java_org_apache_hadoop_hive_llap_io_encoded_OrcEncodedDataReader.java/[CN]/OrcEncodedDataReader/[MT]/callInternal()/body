{
  long startTime=counters.startTimeCounter();
  if (LlapIoImpl.LOGL.isInfoEnabled()) {
    LlapIoImpl.LOG.info("Processing data for " + split.getPath());
  }
  if (processStop()) {
    recordReaderTime(startTime);
    return null;
  }
  counters.setDesc(QueryFragmentCounters.Desc.TABLE,getDbAndTableName(split.getPath()));
  orcReader=null;
  fs=split.getPath().getFileSystem(conf);
  fileId=determineFileId(fs,split);
  counters.setDesc(QueryFragmentCounters.Desc.FILE,fileId);
  try {
    fileMetadata=getOrReadFileMetadata();
    consumer.setFileMetadata(fileMetadata);
    validateFileMetadata();
    if (columnIds == null) {
      columnIds=createColumnIds(fileMetadata);
    }
    determineStripesToRead();
  }
 catch (  Throwable t) {
    recordReaderTime(startTime);
    consumer.setError(t);
    return null;
  }
  if (readState.length == 0) {
    consumer.setDone();
    recordReaderTime(startTime);
    return null;
  }
  counters.setDesc(QueryFragmentCounters.Desc.STRIPES,stripeIxFrom + "," + readState.length);
  int stride=fileMetadata.getRowIndexStride();
  ArrayList<OrcStripeMetadata> stripeMetadatas=null;
  boolean[] globalIncludes=null;
  boolean[] sargColumns=null;
  try {
    globalIncludes=OrcInputFormat.genIncludedColumns(fileMetadata.getTypes(),columnIds,true);
    if (sarg != null && stride != 0) {
      int[] filterColumns=RecordReaderImpl.mapSargColumns(sarg.getLeaves(),columnNames,0);
      sargColumns=new boolean[globalIncludes.length];
      for (      int i : filterColumns) {
        if (i > 0) {
          sargColumns[i]=true;
        }
      }
      stripeMetadatas=readStripesMetadata(globalIncludes,sargColumns);
    }
    boolean hasData=determineRgsToRead(globalIncludes,stride,stripeMetadatas);
    if (!hasData) {
      consumer.setDone();
      recordReaderTime(startTime);
      return null;
    }
  }
 catch (  Throwable t) {
    cleanupReaders();
    consumer.setError(t);
    recordReaderTime(startTime);
    return null;
  }
  if (processStop()) {
    cleanupReaders();
    recordReaderTime(startTime);
    return null;
  }
  List<Integer>[] stripeColsToRead=null;
  if (cache != null) {
    try {
      stripeColsToRead=produceDataFromCache(stride);
    }
 catch (    Throwable t) {
      consumer.setError(t);
      cleanupReaders();
      recordReaderTime(startTime);
      return null;
    }
  }
  Consumer<OrcEncodedColumnBatch> dataConsumer=(cache == null) ? this.consumer : this;
  try {
    ensureOrcReader();
    DataWrapperForOrc dw=new DataWrapperForOrc();
    stripeReader=orcReader.encodedReader(fileId,dw,dw);
    stripeReader.setDebugTracing(DebugUtils.isTraceOrcEnabled());
  }
 catch (  Throwable t) {
    consumer.setError(t);
    recordReaderTime(startTime);
    cleanupReaders();
    return null;
  }
  OrcBatchKey stripeKey=new OrcBatchKey(fileId,-1,0);
  for (int stripeIxMod=0; stripeIxMod < readState.length; ++stripeIxMod) {
    if (processStop()) {
      cleanupReaders();
      recordReaderTime(startTime);
      return null;
    }
    int stripeIx=stripeIxFrom + stripeIxMod;
    boolean[][] colRgs=null;
    boolean[] stripeIncludes=null;
    OrcStripeMetadata stripeMetadata=null;
    StripeInformation stripe;
    try {
      List<Integer> cols=stripeColsToRead == null ? null : stripeColsToRead[stripeIxMod];
      if (cols != null && cols.isEmpty())       continue;
      stripe=fileMetadata.getStripes().get(stripeIx);
      if (DebugUtils.isTraceOrcEnabled()) {
        LlapIoImpl.LOG.info("Reading stripe " + stripeIx + ": "+ stripe.getOffset()+ ", "+ stripe.getLength());
      }
      colRgs=readState[stripeIxMod];
      if (colRgs.length > 0 && colRgs[0] == SargApplier.READ_NO_RGS)       continue;
      if (cache == null || cols == null || cols.size() == colRgs.length) {
        cols=columnIds;
        stripeIncludes=globalIncludes;
      }
 else {
        stripeIncludes=OrcInputFormat.genIncludedColumns(fileMetadata.getTypes(),cols,true);
        colRgs=genStripeColRgs(cols,colRgs);
      }
      boolean isFoundInCache=false;
      if (stripeMetadatas != null) {
        stripeMetadata=stripeMetadatas.get(stripeIxMod);
      }
 else {
        stripeKey.stripeIx=stripeIx;
        stripeMetadata=metadataCache.getStripeMetadata(stripeKey);
        isFoundInCache=(stripeMetadata != null);
        if (!isFoundInCache) {
          counters.incrCounter(Counter.METADATA_CACHE_MISS);
          ensureMetadataReader();
          long startTimeHdfs=counters.startTimeCounter();
          stripeMetadata=new OrcStripeMetadata(stripeKey,metadataReader,stripe,stripeIncludes,sargColumns);
          counters.incrTimeCounter(Counter.HDFS_TIME_US,startTimeHdfs);
          stripeMetadata=metadataCache.putStripeMetadata(stripeMetadata);
          if (DebugUtils.isTraceOrcEnabled()) {
            LlapIoImpl.LOG.info("Caching stripe " + stripeKey.stripeIx + " metadata with includes: "+ DebugUtils.toString(stripeIncludes));
          }
          stripeKey=new OrcBatchKey(fileId,-1,0);
        }
        consumer.setStripeMetadata(stripeMetadata);
      }
      if (!stripeMetadata.hasAllIndexes(stripeIncludes)) {
        if (DebugUtils.isTraceOrcEnabled()) {
          LlapIoImpl.LOG.info("Updating indexes in stripe " + stripeKey.stripeIx + " metadata for includes: "+ DebugUtils.toString(stripeIncludes));
        }
        assert isFoundInCache;
        counters.incrCounter(Counter.METADATA_CACHE_MISS);
        ensureMetadataReader();
        updateLoadedIndexes(stripeMetadata,stripe,stripeIncludes,sargColumns);
      }
 else       if (isFoundInCache) {
        counters.incrCounter(Counter.METADATA_CACHE_HIT);
      }
    }
 catch (    Throwable t) {
      consumer.setError(t);
      cleanupReaders();
      recordReaderTime(startTime);
      return null;
    }
    if (processStop()) {
      cleanupReaders();
      recordReaderTime(startTime);
      return null;
    }
    try {
      stripeReader.readEncodedColumns(stripeIx,stripe,stripeMetadata.getRowIndexes(),stripeMetadata.getEncodings(),stripeMetadata.getStreams(),stripeIncludes,colRgs,dataConsumer);
    }
 catch (    Throwable t) {
      consumer.setError(t);
      cleanupReaders();
      recordReaderTime(startTime);
      return null;
    }
  }
  recordReaderTime(startTime);
  dataConsumer.setDone();
  if (DebugUtils.isTraceMttEnabled()) {
    LlapIoImpl.LOG.info("done processing " + split);
  }
  cleanupReaders();
  return null;
}
