{
  ImmutableList.Builder<RelFieldCollation> collationListBuilder=new ImmutableList.Builder<RelFieldCollation>();
  ImmutableList.Builder<RelFieldCollation> leftCollationListBuilder=new ImmutableList.Builder<RelFieldCollation>();
  ImmutableList.Builder<RelFieldCollation> rightCollationListBuilder=new ImmutableList.Builder<RelFieldCollation>();
  JoinPredicateInfo joinPredInfo=HiveCalciteUtil.JoinPredicateInfo.constructJoinPredicateInfo(join);
  for (int i=0; i < joinPredInfo.getEquiJoinPredicateElements().size(); i++) {
    JoinLeafPredicateInfo joinLeafPredInfo=joinPredInfo.getEquiJoinPredicateElements().get(i);
    for (    int leftPos : joinLeafPredInfo.getProjsFromLeftPartOfJoinKeysInJoinSchema()) {
      final RelFieldCollation leftFieldCollation=new RelFieldCollation(leftPos);
      collationListBuilder.add(leftFieldCollation);
      leftCollationListBuilder.add(leftFieldCollation);
    }
    for (    int rightPos : joinLeafPredInfo.getProjsFromRightPartOfJoinKeysInJoinSchema()) {
      final RelFieldCollation rightFieldCollation=new RelFieldCollation(rightPos);
      collationListBuilder.add(rightFieldCollation);
      rightCollationListBuilder.add(rightFieldCollation);
    }
  }
  final ImmutableList<RelCollation> collation;
switch (join.getJoinAlgorithm()) {
case SMB_JOIN:
case COMMON_JOIN:
    collation=ImmutableList.of(RelCollationTraitDef.INSTANCE.canonize(new HiveRelCollation(collationListBuilder.build())));
  break;
case BUCKET_JOIN:
case MAP_JOIN:
if (join.getMapJoinStreamingSide() == MapJoinStreamingRelation.LEFT_RELATION) {
  collation=ImmutableList.of(RelCollationTraitDef.INSTANCE.canonize(new HiveRelCollation(leftCollationListBuilder.build())));
}
 else if (join.getMapJoinStreamingSide() == MapJoinStreamingRelation.RIGHT_RELATION) {
  collation=ImmutableList.of(RelCollationTraitDef.INSTANCE.canonize(new HiveRelCollation(rightCollationListBuilder.build())));
}
 else {
  collation=null;
}
break;
default :
collation=null;
}
return collation;
}
