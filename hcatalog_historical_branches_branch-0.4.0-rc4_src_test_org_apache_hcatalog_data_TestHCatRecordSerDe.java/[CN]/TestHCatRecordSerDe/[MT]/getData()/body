{
  Map<Properties,HCatRecord> data=new HashMap<Properties,HCatRecord>();
  List<Object> rlist=new ArrayList<Object>(11);
  rlist.add(new Byte("123"));
  rlist.add(new Short("456"));
  rlist.add(new Integer(789));
  rlist.add(new Long(1000L));
  rlist.add(new Double(5.3D));
  rlist.add(new Float(2.39F));
  rlist.add(new String("hcat and hadoop"));
  rlist.add(null);
  List<Object> innerStruct=new ArrayList<Object>(2);
  innerStruct.add(new String("abc"));
  innerStruct.add(new String("def"));
  rlist.add(innerStruct);
  List<Integer> innerList=new ArrayList<Integer>();
  innerList.add(314);
  innerList.add(007);
  rlist.add(innerList);
  Map<Short,String> map=new HashMap<Short,String>(3);
  map.put(new Short("2"),"hcat is cool");
  map.put(new Short("3"),"is it?");
  map.put(new Short("4"),"or is it not?");
  rlist.add(map);
  rlist.add(new Boolean(true));
  List<Object> c1=new ArrayList<Object>();
  List<Object> c1_1=new ArrayList<Object>();
  c1_1.add(new Integer(12));
  List<Object> i2=new ArrayList<Object>();
  List<Integer> ii1=new ArrayList<Integer>();
  ii1.add(new Integer(13));
  ii1.add(new Integer(14));
  i2.add(ii1);
  Map<String,List<?>> ii2=new HashMap<String,List<?>>();
  List<Integer> iii1=new ArrayList<Integer>();
  iii1.add(new Integer(15));
  ii2.put("phew",iii1);
  i2.add(ii2);
  c1_1.add(i2);
  c1.add(c1_1);
  rlist.add(c1);
  List<Object> am=new ArrayList<Object>();
  Map<String,String> am_1=new HashMap<String,String>();
  am_1.put("noo","haha");
  am.add(am_1);
  rlist.add(am);
  List<Object> aa=new ArrayList<Object>();
  List<String> aa_1=new ArrayList<String>();
  aa_1.add("bloo");
  aa_1.add("bwahaha");
  aa.add(aa_1);
  rlist.add(aa);
  String typeString="tinyint,smallint,int,bigint,double,float,string,string," + "struct<a:string,b:string>,array<int>,map<smallint,string>,boolean," + "array<struct<i1:int,i2:struct<ii1:array<int>,ii2:map<string,struct<iii1:int>>>>>,"+ "array<map<string,string>>,array<array<string>>";
  Properties props=new Properties();
  props.put(Constants.LIST_COLUMNS,"ti,si,i,bi,d,f,s,n,r,l,m,b,c1,am,aa");
  props.put(Constants.LIST_COLUMN_TYPES,typeString);
  data.put(props,new DefaultHCatRecord(rlist));
  return data;
}
