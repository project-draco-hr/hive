{
  DecimalColumnStatsData aggregateData=aggregateColStats.getStatsData().getDecimalStats();
  DecimalColumnStatsData newData=newColStats.getStatsData().getDecimalStats();
  Decimal lowValue=aggregateData.getLowValue() != null && (aggregateData.getLowValue().compareTo(newData.getLowValue()) > 0) ? aggregateData.getLowValue() : newData.getLowValue();
  aggregateData.setLowValue(lowValue);
  Decimal highValue=aggregateData.getHighValue() != null && (aggregateData.getHighValue().compareTo(newData.getHighValue()) > 0) ? aggregateData.getHighValue() : newData.getHighValue();
  aggregateData.setHighValue(highValue);
  aggregateData.setNumNulls(aggregateData.getNumNulls() + newData.getNumNulls());
  if (ndvEstimator == null || !newData.isSetBitVectors() || newData.getBitVectors().length() == 0) {
    aggregateData.setNumDVs(Math.max(aggregateData.getNumDVs(),newData.getNumDVs()));
  }
 else {
    ndvEstimator.mergeEstimators(new NumDistinctValueEstimator(newData.getBitVectors(),ndvEstimator.getnumBitVectors()));
    aggregateData.setNumDVs(ndvEstimator.estimateNumDistinctValues());
    aggregateData.setBitVectors(ndvEstimator.serialize().toString());
  }
}
