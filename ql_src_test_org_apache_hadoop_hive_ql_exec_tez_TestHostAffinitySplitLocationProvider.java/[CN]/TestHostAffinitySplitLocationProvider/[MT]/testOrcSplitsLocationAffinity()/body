{
  HostAffinitySplitLocationProvider locationProvider=new HostAffinitySplitLocationProvider(executorLocations);
  InputSplit os11=createMockFileSplit(true,"path1",0,15000,new String[]{locations[0],locations[1]});
  InputSplit os12=createMockFileSplit(true,"path1",0,30000,new String[]{locations[0],locations[1]});
  InputSplit os13=createMockFileSplit(true,"path1",15000,30000,new String[]{locations[0],locations[1]});
  String[] retLoc11=locationProvider.getLocations(os11);
  String[] retLoc12=locationProvider.getLocations(os12);
  String[] retLoc13=locationProvider.getLocations(os13);
  assertEquals(1,retLoc11.length);
  assertFalse(locationsSet.contains(retLoc11[0]));
  assertTrue(executorLocationsSet.contains(retLoc11[0]));
  assertEquals(1,retLoc12.length);
  assertFalse(locationsSet.contains(retLoc12[0]));
  assertTrue(executorLocationsSet.contains(retLoc12[0]));
  assertEquals(1,retLoc13.length);
  assertFalse(locationsSet.contains(retLoc13[0]));
  assertTrue(executorLocationsSet.contains(retLoc13[0]));
  assertEquals(retLoc11[0],retLoc12[0]);
  assertNotEquals(retLoc11[0],retLoc13[0]);
  String[] retLoc112=locationProvider.getLocations(os11);
  String[] retLoc122=locationProvider.getLocations(os12);
  String[] retLoc132=locationProvider.getLocations(os13);
  assertArrayEquals(retLoc11,retLoc112);
  assertArrayEquals(retLoc12,retLoc122);
  assertArrayEquals(retLoc13,retLoc132);
}
