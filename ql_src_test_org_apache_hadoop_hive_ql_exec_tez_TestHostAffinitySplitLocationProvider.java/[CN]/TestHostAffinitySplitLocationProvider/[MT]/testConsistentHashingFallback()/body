{
  final int LOC_COUNT_TO=20, SPLIT_COUNT=500, MAX_MISS_COUNT=4, LOC_COUNT_FROM=MAX_MISS_COUNT + 1;
  FileSplit[] splits=createSplits(SPLIT_COUNT);
  AtomicInteger errorCount=new AtomicInteger(0);
  int cvErrorCount=0;
  for (int locs=LOC_COUNT_FROM; locs <= LOC_COUNT_TO; ++locs) {
    int aboveAvgCount=0;
    double sum=0;
    double[] cvs=new double[MAX_MISS_COUNT + 1];
    for (int missCount=0; missCount <= MAX_MISS_COUNT; ++missCount) {
      double cv=cvs[missCount]=testHashDistribution(locs,missCount,splits,errorCount);
      sum+=cv;
      if (missCount > 0 && cv > sum / (missCount + 1)) {
        ++aboveAvgCount;
      }
    }
    if (aboveAvgCount > 2) {
      LOG.info("CVs for " + locs + " locations aren't to our liking: "+ Arrays.toString(cvs));
      ++cvErrorCount;
    }
  }
  assertTrue("Found " + errorCount.get() + " abnormalities",errorCount.get() < 3);
  assertTrue("Found " + cvErrorCount + " abnormalities",cvErrorCount < 7);
}
