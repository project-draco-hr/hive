{
  boolean isStatsReliable=conf.isStatsReliable();
  StatsPublisher statsPublisher=Utilities.getStatsPublisher(jc);
  if (statsPublisher == null) {
    LOG.error("StatsPublishing error: StatsPublisher is not initialized.");
    if (isStatsReliable) {
      throw new HiveException(ErrorMsg.STATSPUBLISHER_NOT_OBTAINED.getErrorCodedMsg());
    }
    return;
  }
  if (!statsPublisher.connect(hconf)) {
    LOG.error("StatsPublishing error: cannot connect to database");
    if (isStatsReliable) {
      throw new HiveException(ErrorMsg.STATSPUBLISHER_CONNECTION_ERROR.getErrorCodedMsg());
    }
    return;
  }
  String taskID=Utilities.getTaskIdFromFilename(Utilities.getTaskId(hconf));
  String spSpec=conf.getStaticSpec() != null ? conf.getStaticSpec() : "";
  for (  String fspKey : valToPaths.keySet()) {
    FSPaths fspValue=valToPaths.get(fspKey);
    String key;
    if (fspKey == "") {
      String keyPrefix=Utilities.getHashedStatsPrefix(conf.getStatsAggPrefix() + spSpec,conf.getMaxStatsKeyPrefixLength());
      key=keyPrefix + taskID;
    }
 else {
      String keyPrefix=Utilities.getHashedStatsPrefix(conf.getStatsAggPrefix() + spSpec + fspKey+ Path.SEPARATOR,conf.getMaxStatsKeyPrefixLength());
      key=keyPrefix + taskID;
    }
    Map<String,String> statsToPublish=new HashMap<String,String>();
    for (    String statType : fspValue.stat.getStoredStats()) {
      statsToPublish.put(statType,Long.toString(fspValue.stat.getStat(statType)));
    }
    if (!statsPublisher.publishStat(key,statsToPublish)) {
      if (isStatsReliable) {
        throw new HiveException(ErrorMsg.STATSPUBLISHER_PUBLISHING_ERROR.getErrorCodedMsg());
      }
    }
  }
  if (!statsPublisher.closeConnection()) {
    if (isStatsReliable) {
      throw new HiveException(ErrorMsg.STATSPUBLISHER_CLOSING_ERROR.getErrorCodedMsg());
    }
  }
}
