{
  File inputFile=new File(inputFileName);
  File outputDir=new File(outputDirName);
  final List<File> untaredFiles=new LinkedList<File>();
  final InputStream is;
  if (inputFileName.endsWith(".gz")) {
    is=new GzipCompressorInputStream(new FileInputStream(inputFile));
  }
 else {
    is=new FileInputStream(inputFile);
  }
  final TarArchiveInputStream debInputStream=(TarArchiveInputStream)new ArchiveStreamFactory().createArchiveInputStream("tar",is);
  TarArchiveEntry entry=null;
  while ((entry=(TarArchiveEntry)debInputStream.getNextEntry()) != null) {
    final File outputFile=new File(outputDir,entry.getName());
    if (entry.isDirectory()) {
      if (flatten) {
        continue;
      }
      LOG.debug(String.format("Attempting to write output directory %s.",outputFile.getAbsolutePath()));
      if (!outputFile.exists()) {
        LOG.debug(String.format("Attempting to create output directory %s.",outputFile.getAbsolutePath()));
        if (!outputFile.mkdirs()) {
          throw new IllegalStateException(String.format("Couldn't create directory %s.",outputFile.getAbsolutePath()));
        }
      }
    }
 else {
      final OutputStream outputFileStream;
      if (flatten) {
        File flatOutputFile=new File(outputDir,outputFile.getName());
        LOG.debug(String.format("Creating flat output file %s.",flatOutputFile.getAbsolutePath()));
        outputFileStream=new FileOutputStream(flatOutputFile);
      }
 else       if (!outputFile.getParentFile().exists()) {
        LOG.debug(String.format("Attempting to create output directory %s.",outputFile.getParentFile().getAbsoluteFile()));
        if (!outputFile.getParentFile().getAbsoluteFile().mkdirs()) {
          throw new IllegalStateException(String.format("Couldn't create directory %s.",outputFile.getParentFile().getAbsolutePath()));
        }
        LOG.debug(String.format("Creating output file %s.",outputFile.getAbsolutePath()));
        outputFileStream=new FileOutputStream(outputFile);
      }
 else {
        outputFileStream=new FileOutputStream(outputFile);
      }
      IOUtils.copy(debInputStream,outputFileStream);
      outputFileStream.close();
    }
    untaredFiles.add(outputFile);
  }
  debInputStream.close();
  return untaredFiles;
}
