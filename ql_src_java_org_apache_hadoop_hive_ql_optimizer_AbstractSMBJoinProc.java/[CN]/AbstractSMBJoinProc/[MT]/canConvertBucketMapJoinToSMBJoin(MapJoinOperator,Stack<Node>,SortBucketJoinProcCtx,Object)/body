{
  if (mapJoinOp.getConf().getAliasBucketFileNameMapping() == null || mapJoinOp.getConf().getAliasBucketFileNameMapping().size() == 0) {
    return false;
  }
  boolean tableSorted=true;
  QBJoinTree joinCxt=this.pGraphContext.getMapJoinContext().get(mapJoinOp);
  if (joinCxt == null) {
    return false;
  }
  String[] srcs=joinCxt.getBaseSrc();
  for (int srcPos=0; srcPos < srcs.length; srcPos++) {
    srcs[srcPos]=QB.getAppendedAliasFromId(joinCxt.getId(),srcs[srcPos]);
  }
  List<Order> sortColumnsFirstTable=new ArrayList<Order>();
  for (int pos=0; pos < srcs.length; pos++) {
    tableSorted=tableSorted && isTableSorted(smbJoinContext,pGraphContext,mapJoinOp.getConf().getKeys().get((byte)pos),joinCxt,srcs,pos,sortColumnsFirstTable);
  }
  if (!tableSorted) {
    MapJoinProcessor.checkMapJoin(mapJoinOp.getConf().getPosBigTable(),mapJoinOp.getConf().getConds());
    return false;
  }
  smbJoinContext.setSrcs(srcs);
  return true;
}
