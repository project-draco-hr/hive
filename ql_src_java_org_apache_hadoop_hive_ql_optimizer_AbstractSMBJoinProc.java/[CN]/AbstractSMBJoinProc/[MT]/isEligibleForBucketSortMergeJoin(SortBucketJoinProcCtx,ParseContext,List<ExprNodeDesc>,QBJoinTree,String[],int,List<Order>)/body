{
  String alias=aliases[pos];
  Operator<? extends OperatorDesc> topOp=joinTree.getAliasToOpInfo().get(alias);
  if (topOp == null) {
    return false;
  }
  List<String> joinCols=toColumns(keys);
  if (joinCols == null || joinCols.isEmpty()) {
    return false;
  }
  TableScanOperator tso=TableAccessAnalyzer.genRootTableScan(topOp,joinCols);
  if (tso == null) {
    return false;
  }
  if (pGraphContext.getTopOps().containsValue(tso)) {
    for (    Map.Entry<String,Operator<? extends OperatorDesc>> topOpEntry : this.pGraphContext.getTopOps().entrySet()) {
      if (topOpEntry.getValue() == tso) {
        alias=topOpEntry.getKey();
        aliases[pos]=alias;
        break;
      }
    }
  }
 else {
    return false;
  }
  Table tbl=tso.getConf().getTableMetadata();
  if (tbl.isPartitioned()) {
    PrunedPartitionList prunedParts=pGraphContext.getPrunedPartitions(alias,tso);
    List<Partition> partitions=prunedParts.getNotDeniedPartns();
    if ((pos == 0) && (partitions != null) && (!partitions.isEmpty())) {
      Partition firstPartition=partitions.get(0);
      sortColumnsFirstTable.addAll(firstPartition.getSortCols());
    }
    for (    Partition partition : prunedParts.getNotDeniedPartns()) {
      if (!checkSortColsAndJoinCols(partition.getSortCols(),joinCols,sortColumnsFirstTable)) {
        return false;
      }
    }
    return true;
  }
  if (pos == 0) {
    sortColumnsFirstTable.addAll(tbl.getSortCols());
  }
  return checkSortColsAndJoinCols(tbl.getSortCols(),joinCols,sortColumnsFirstTable);
}
