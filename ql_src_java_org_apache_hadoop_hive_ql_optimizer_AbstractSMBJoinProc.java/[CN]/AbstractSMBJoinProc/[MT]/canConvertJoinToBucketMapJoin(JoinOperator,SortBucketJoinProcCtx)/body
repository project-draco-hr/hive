{
  if (context.getRejectedJoinOps().contains(joinOp)) {
    return false;
  }
  if (!this.pGraphContext.getJoinOps().contains(joinOp)) {
    return false;
  }
  Class<? extends BigTableSelectorForAutoSMJ> bigTableMatcherClass=null;
  try {
    String selector=HiveConf.getVar(pGraphContext.getConf(),HiveConf.ConfVars.HIVE_AUTO_SORTMERGE_JOIN_BIGTABLE_SELECTOR);
    bigTableMatcherClass=JavaUtils.loadClass(selector);
  }
 catch (  ClassNotFoundException e) {
    throw new SemanticException(e.getMessage());
  }
  BigTableSelectorForAutoSMJ bigTableMatcher=ReflectionUtils.newInstance(bigTableMatcherClass,null);
  JoinDesc joinDesc=joinOp.getConf();
  JoinCondDesc[] joinCondns=joinDesc.getConds();
  Set<Integer> joinCandidates=MapJoinProcessor.getBigTableCandidates(joinCondns);
  if (joinCandidates.isEmpty()) {
    return false;
  }
  int bigTablePosition=bigTableMatcher.getBigTablePosition(pGraphContext,joinOp,joinCandidates);
  if (bigTablePosition < 0) {
    return false;
  }
  context.setBigTablePosition(bigTablePosition);
  String joinAlias=bigTablePosition == 0 ? joinOp.getConf().getLeftAlias() : joinOp.getConf().getRightAliases()[bigTablePosition - 1];
  joinAlias=QB.getAppendedAliasFromId(joinOp.getConf().getId(),joinAlias);
  Map<Byte,List<ExprNodeDesc>> keyExprMap=new HashMap<Byte,List<ExprNodeDesc>>();
  List<Operator<? extends OperatorDesc>> parentOps=joinOp.getParentOperators();
  for (  Operator<? extends OperatorDesc> parentOp : parentOps) {
    ReduceSinkDesc rsconf=((ReduceSinkOperator)parentOp).getConf();
    Byte tag=(byte)rsconf.getTag();
    List<ExprNodeDesc> keys=rsconf.getKeyCols();
    keyExprMap.put(tag,keys);
  }
  context.setKeyExprMap(keyExprMap);
  String[] joinSrcs=joinOp.getConf().getBaseSrc();
  String[] srcs=new String[joinSrcs.length];
  for (int srcPos=0; srcPos < joinSrcs.length; srcPos++) {
    joinSrcs[srcPos]=QB.getAppendedAliasFromId(joinOp.getConf().getId(),joinSrcs[srcPos]);
    srcs[srcPos]=new String(joinSrcs[srcPos]);
  }
  return checkConvertBucketMapJoin(context,joinOp.getConf().getAliasToOpInfo(),keyExprMap,joinAlias,Arrays.asList(srcs));
}
