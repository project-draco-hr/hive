{
  ShapeDetails inpShape=def.getInput().getOutputShape();
  TableFunctionEvaluator tEval=def.getTFunction();
  WindowingTableFunctionResolver tResolver=(WindowingTableFunctionResolver)constructResolver(def.getResolverClassName());
  tResolver.initialize(ptfDesc,def,tEval);
  for (  WindowFunctionDef wFnDef : def.getWindowFunctions()) {
    if (wFnDef.getArgs() != null) {
      for (      PTFExpressionDef arg : wFnDef.getArgs()) {
        initialize(arg,inpShape);
      }
    }
    if (wFnDef.getWindowFrame() != null) {
      WindowFrameDef wFrmDef=wFnDef.getWindowFrame();
      initialize(wFrmDef.getStart(),inpShape);
      initialize(wFrmDef.getEnd(),inpShape);
    }
    setupWdwFnEvaluator(wFnDef);
  }
  ArrayList<String> aliases=new ArrayList<String>();
  ArrayList<ObjectInspector> fieldOIs=new ArrayList<ObjectInspector>();
  for (  WindowFunctionDef wFnDef : def.getWindowFunctions()) {
    aliases.add(wFnDef.getAlias());
    if (wFnDef.isPivotResult()) {
      fieldOIs.add(((ListObjectInspector)wFnDef.getOI()).getListElementObjectInspector());
    }
 else {
      fieldOIs.add(wFnDef.getOI());
    }
  }
  PTFDeserializer.addInputColumnsToList(inpShape,aliases,fieldOIs);
  StructObjectInspector wdwOutOI=ObjectInspectorFactory.getStandardStructObjectInspector(aliases,fieldOIs);
  tResolver.setWdwProcessingOutputOI(wdwOutOI);
  initialize(def.getOutputShape(),wdwOutOI);
  tResolver.initializeOutputOI();
}
