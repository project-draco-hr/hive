{
  if (included != null && !included[readerType.getId()]) {
    return;
  }
  boolean isOk=true;
  if (fileType.getCategory() == readerType.getCategory()) {
switch (readerType.getCategory()) {
case BOOLEAN:
case BYTE:
case SHORT:
case INT:
case LONG:
case DOUBLE:
case FLOAT:
case STRING:
case TIMESTAMP:
case BINARY:
case DATE:
      break;
case CHAR:
case VARCHAR:
    if (fileType.getMaxLength() != readerType.getMaxLength()) {
      hasConversion=true;
    }
  break;
case DECIMAL:
if (fileType.getPrecision() != readerType.getPrecision() || fileType.getScale() != readerType.getScale()) {
  hasConversion=true;
}
break;
case UNION:
case MAP:
case LIST:
{
List<TypeDescription> fileChildren=fileType.getChildren();
List<TypeDescription> readerChildren=readerType.getChildren();
if (fileChildren.size() == readerChildren.size()) {
for (int i=0; i < fileChildren.size(); ++i) {
  buildConversionFileTypesArray(fileChildren.get(i),readerChildren.get(i));
}
}
 else {
isOk=false;
}
break;
}
case STRUCT:
{
List<TypeDescription> fileChildren=fileType.getChildren();
List<TypeDescription> readerChildren=readerType.getChildren();
if (fileChildren.size() != readerChildren.size()) {
hasConversion=true;
}
int jointSize=Math.min(fileChildren.size(),readerChildren.size());
for (int i=0; i < jointSize; ++i) {
buildConversionFileTypesArray(fileChildren.get(i),readerChildren.get(i));
}
break;
}
default :
throw new IllegalArgumentException("Unknown type " + readerType);
}
}
 else {
isOk=ConvertTreeReaderFactory.canConvert(fileType,readerType);
hasConversion=true;
}
if (isOk) {
int id=readerType.getId();
if (readerFileTypes[id] != null) {
throw new RuntimeException("reader to file type entry already assigned");
}
readerFileTypes[id]=fileType;
}
 else {
throw new IOException(String.format("ORC does not support type conversion from file type %s (%d) to reader type %s (%d)",fileType.toString(),fileType.getId(),readerType.toString(),readerType.getId()));
}
}
