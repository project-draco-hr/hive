{
  Assert.assertEquals(0,TxnDbUtil.countQueryAgent("select count(*) from WRITE_SET"));
  CommandProcessorResponse cpr=driver.run("create table if not exists tab2 (a int, b int) " + "partitioned by (p string) clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')");
  checkCmdOnDriver(cpr);
  checkCmdOnDriver(driver.run("insert into tab2 partition(p)(a,b,p) values(1,1,'one'),(2,2,'two')"));
  HiveTxnManager txnMgr2=TxnManagerFactory.getTxnManagerFactory().getTxnManager(conf);
  txnMgr2.openTxn("T2");
  checkCmdOnDriver(driver.compileAndRespond("update tab2 set b = 7 where p='two'"));
  txnMgr2.acquireLocks(driver.getPlan(),ctx,"T2");
  List<ShowLocksResponseElement> locks=getLocks(txnMgr2);
  Assert.assertEquals("Unexpected lock count",1,locks.size());
  checkLock(LockType.SHARED_WRITE,LockState.ACQUIRED,"default","TAB2","p=two",locks);
  txnMgr.openTxn("T3");
  checkCmdOnDriver(driver.compileAndRespond("update tab2 set b = 7 where p='one'"));
  ((DbTxnManager)txnMgr).acquireLocks(driver.getPlan(),ctx,"T3",false);
  locks=getLocks(txnMgr);
  Assert.assertEquals("Unexpected lock count",2,locks.size());
  checkLock(LockType.SHARED_WRITE,LockState.ACQUIRED,"default","TAB2","p=two",locks);
  checkLock(LockType.SHARED_WRITE,LockState.ACQUIRED,"default","TAB2","p=one",locks);
  AddDynamicPartitions adp=new AddDynamicPartitions(txnMgr2.getCurrentTxnId(),"default","tab2",Collections.singletonList("p=two"));
  adp.setOperationType(DataOperationType.UPDATE);
  txnHandler.addDynamicPartitions(adp);
  txnMgr2.commitTxn();
  locks=getLocks(txnMgr2);
  Assert.assertEquals("Unexpected lock count",1,locks.size());
  checkLock(LockType.SHARED_WRITE,LockState.ACQUIRED,"default","TAB2","p=one",locks);
  adp=new AddDynamicPartitions(txnMgr.getCurrentTxnId(),"default","tab2",Collections.singletonList("p=one"));
  adp.setOperationType(DataOperationType.UPDATE);
  txnHandler.addDynamicPartitions(adp);
  txnMgr.commitTxn();
  Assert.assertEquals("WRITE_SET mismatch: " + TxnDbUtil.queryToString("select * from WRITE_SET"),1,TxnDbUtil.countQueryAgent("select count(*) from WRITE_SET where ws_partition='p=one' and ws_operation_type='u'"));
  Assert.assertEquals("WRITE_SET mismatch: " + TxnDbUtil.queryToString("select * from WRITE_SET"),1,TxnDbUtil.countQueryAgent("select count(*) from WRITE_SET where ws_partition='p=two' and ws_operation_type='u'"));
  Assert.assertEquals("COMPLETED_TXN_COMPONENTS mismatch: " + TxnDbUtil.queryToString("select * from COMPLETED_TXN_COMPONENTS"),4,TxnDbUtil.countQueryAgent("select count(*) from COMPLETED_TXN_COMPONENTS where ctc_table='tab2' and ctc_partition is not null"));
  cpr=driver.run("create table if not exists tab1 (a int, b int) partitioned by (p string) " + "clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')");
  checkCmdOnDriver(cpr);
  checkCmdOnDriver(driver.run("insert into tab1 partition(p)(a,b,p) values(1,1,'one'),(2,2,'two')"));
  txnMgr2.openTxn("T5");
  checkCmdOnDriver(driver.compileAndRespond("update tab1 set b = 7 where b=1"));
  txnMgr2.acquireLocks(driver.getPlan(),ctx,"T5");
  locks=getLocks(txnMgr2);
  Assert.assertEquals("Unexpected lock count",2,locks.size());
  checkLock(LockType.SHARED_WRITE,LockState.ACQUIRED,"default","TAB1","p=two",locks);
  checkLock(LockType.SHARED_WRITE,LockState.ACQUIRED,"default","TAB1","p=one",locks);
  txnMgr.openTxn("T6");
  checkCmdOnDriver(driver.compileAndRespond("update tab1 set b = 7 where b = 2"));
  ((DbTxnManager)txnMgr).acquireLocks(driver.getPlan(),ctx,"T6",false);
  locks=getLocks(txnMgr);
  Assert.assertEquals("Unexpected lock count",4,locks.size());
  checkLock(LockType.SHARED_WRITE,LockState.ACQUIRED,"default","TAB1","p=two",locks);
  checkLock(LockType.SHARED_WRITE,LockState.ACQUIRED,"default","TAB1","p=one",locks);
  checkLock(LockType.SHARED_WRITE,LockState.WAITING,"default","TAB1","p=two",locks);
  checkLock(LockType.SHARED_WRITE,LockState.WAITING,"default","TAB1","p=one",locks);
  adp=new AddDynamicPartitions(txnMgr2.getCurrentTxnId(),"default","tab1",Collections.singletonList("p=one"));
  adp.setOperationType(DataOperationType.UPDATE);
  txnHandler.addDynamicPartitions(adp);
  txnMgr2.commitTxn();
  ((DbLockManager)txnMgr.getLockManager()).checkLock(locks.get(2).getLockid());
  locks=getLocks(txnMgr);
  Assert.assertEquals("Unexpected lock count",2,locks.size());
  checkLock(LockType.SHARED_WRITE,LockState.ACQUIRED,"default","TAB1","p=two",locks);
  checkLock(LockType.SHARED_WRITE,LockState.ACQUIRED,"default","TAB1","p=one",locks);
  adp=new AddDynamicPartitions(txnMgr.getCurrentTxnId(),"default","tab1",Collections.singletonList("p=two"));
  adp.setOperationType(DataOperationType.UPDATE);
  txnHandler.addDynamicPartitions(adp);
  txnMgr.commitTxn();
  Assert.assertEquals("WRITE_SET mismatch: " + TxnDbUtil.queryToString("select * from WRITE_SET"),1,TxnDbUtil.countQueryAgent("select count(*) from WRITE_SET where ws_partition='p=one' and ws_operation_type='u' and ws_table='tab1'"));
  Assert.assertEquals("WRITE_SET mismatch: " + TxnDbUtil.queryToString("select * from WRITE_SET"),1,TxnDbUtil.countQueryAgent("select count(*) from WRITE_SET where ws_partition='p=two' and ws_operation_type='u' and ws_table='tab1'"));
  Assert.assertEquals("COMPLETED_TXN_COMPONENTS mismatch: " + TxnDbUtil.queryToString("select * from COMPLETED_TXN_COMPONENTS"),4,TxnDbUtil.countQueryAgent("select count(*) from COMPLETED_TXN_COMPONENTS where ctc_table='tab1' and ctc_partition is not null"));
}
