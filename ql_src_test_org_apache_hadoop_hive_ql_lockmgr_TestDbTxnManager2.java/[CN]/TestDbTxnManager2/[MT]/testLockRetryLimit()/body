{
  conf.setIntVar(HiveConf.ConfVars.HIVE_LOCK_NUMRETRIES,2);
  conf.setBoolVar(HiveConf.ConfVars.TXN_MGR_DUMP_LOCK_STATE_ON_ACQUIRE_TIMEOUT,true);
  HiveTxnManager otherTxnMgr=new DbTxnManager();
  ((DbTxnManager)otherTxnMgr).setHiveConf(conf);
  CommandProcessorResponse cpr=driver.run("create table T9(a int)");
  checkCmdOnDriver(cpr);
  cpr=driver.compileAndRespond("select * from T9");
  checkCmdOnDriver(cpr);
  txnMgr.acquireLocks(driver.getPlan(),ctx,"Vincent Vega");
  List<ShowLocksResponseElement> locks=getLocks(txnMgr);
  Assert.assertEquals("Unexpected lock count",1,locks.size());
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default","T9",null,locks.get(0));
  cpr=driver.compileAndRespond("drop table T9");
  checkCmdOnDriver(cpr);
  try {
    otherTxnMgr.acquireLocks(driver.getPlan(),ctx,"Winston Winnfield");
  }
 catch (  LockException ex) {
    Assert.assertEquals("Got wrong lock exception",ErrorMsg.LOCK_ACQUIRE_TIMEDOUT,ex.getCanonicalErrorMsg());
  }
  locks=getLocks(txnMgr);
  Assert.assertEquals("Unexpected lock count",1,locks.size());
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default","T9",null,locks.get(0));
  otherTxnMgr.closeTxnManager();
}
