{
  CommandProcessorResponse cpr=driver.run("drop table if exists db1.t14");
  checkCmdOnDriver(cpr);
  cpr=driver.run("drop table if exists db2.t14");
  checkCmdOnDriver(cpr);
  cpr=driver.run("drop table if exists db2.t15");
  checkCmdOnDriver(cpr);
  cpr=driver.run("drop table if exists db2.t16");
  checkCmdOnDriver(cpr);
  cpr=driver.run("drop database if exists db1");
  checkCmdOnDriver(cpr);
  cpr=driver.run("drop database if exists db2");
  checkCmdOnDriver(cpr);
  cpr=driver.run("create database if not exists db1");
  checkCmdOnDriver(cpr);
  cpr=driver.run("create database if not exists db2");
  checkCmdOnDriver(cpr);
  cpr=driver.run("create table if not exists db1.t14 (a int, b int) partitioned by (ds string) clustered by (b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')");
  checkCmdOnDriver(cpr);
  cpr=driver.run("create table if not exists db2.t14 (a int, b int) clustered by (b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')");
  checkCmdOnDriver(cpr);
  cpr=driver.run("create table if not exists db2.t15 (a int, b int) clustered by (b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')");
  checkCmdOnDriver(cpr);
  cpr=driver.run("create table if not exists db2.t16 (a int, b int) clustered by (b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')");
  checkCmdOnDriver(cpr);
  cpr=driver.compileAndRespond("insert into table db1.t14 partition (ds='today') values (1, 2)");
  checkCmdOnDriver(cpr);
  txnMgr.acquireLocks(driver.getPlan(),ctx,"Tom");
  HiveTxnManager txnMgr2=TxnManagerFactory.getTxnManagerFactory().getTxnManager(conf);
  cpr=driver.compileAndRespond("insert into table db1.t14 partition (ds='tomorrow') values (3, 4)");
  checkCmdOnDriver(cpr);
  txnMgr2.acquireLocks(driver.getPlan(),ctx,"Jerry");
  HiveTxnManager txnMgr3=TxnManagerFactory.getTxnManagerFactory().getTxnManager(conf);
  cpr=driver.compileAndRespond("select * from db2.t15");
  checkCmdOnDriver(cpr);
  txnMgr3.acquireLocks(driver.getPlan(),ctx,"Donald");
  HiveTxnManager txnMgr4=TxnManagerFactory.getTxnManagerFactory().getTxnManager(conf);
  cpr=driver.compileAndRespond("select * from db2.t16");
  checkCmdOnDriver(cpr);
  txnMgr4.acquireLocks(driver.getPlan(),ctx,"Hillary");
  HiveTxnManager txnMgr5=TxnManagerFactory.getTxnManagerFactory().getTxnManager(conf);
  cpr=driver.compileAndRespond("select * from db2.t14");
  checkCmdOnDriver(cpr);
  txnMgr5.acquireLocks(driver.getPlan(),ctx,"Obama");
  List<ShowLocksResponseElement> locks=getLocks();
  Assert.assertEquals("Unexpected lock count",5,locks.size());
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"db1","t14","ds=today",locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"db1","t14","ds=tomorrow",locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"db2","t15",null,locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"db2","t16",null,locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"db2","t14",null,locks);
  locks=getLocksWithFilterOptions(txnMgr3,"db2",null,null);
  Assert.assertEquals("Unexpected lock count",3,locks.size());
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"db2","t15",null,locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"db2","t16",null,locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"db2","t14",null,locks);
  cpr=driver.run("use db1");
  checkCmdOnDriver(cpr);
  locks=getLocksWithFilterOptions(txnMgr,null,"t14",null);
  Assert.assertEquals("Unexpected lock count",2,locks.size());
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"db1","t14","ds=today",locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"db1","t14","ds=tomorrow",locks);
  Map<String,String> partSpec=new HashMap<String,String>();
  partSpec.put("ds","today");
  locks=getLocksWithFilterOptions(txnMgr,null,"t14",partSpec);
  Assert.assertEquals("Unexpected lock count",1,locks.size());
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"db1","t14","ds=today",locks);
  cpr=driver.run("use db2");
  checkCmdOnDriver(cpr);
  locks=getLocksWithFilterOptions(txnMgr3,null,"t15",null);
  Assert.assertEquals("Unexpected lock count",1,locks.size());
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"db2","t15",null,locks);
}
