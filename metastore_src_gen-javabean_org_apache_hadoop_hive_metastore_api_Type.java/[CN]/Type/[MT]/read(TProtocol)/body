{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == TType.STRING) {
        this.name=iprot.readString();
        this.__isset.name=true;
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == TType.STRING) {
    this.type1=iprot.readString();
    this.__isset.type1=true;
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == TType.STRING) {
this.type2=iprot.readString();
this.__isset.type2=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 4:
if (field.type == TType.LIST) {
{
TList _list0=iprot.readListBegin();
this.fields=new ArrayList<FieldSchema>(_list0.size);
for (int _i1=0; _i1 < _list0.size; ++_i1) {
FieldSchema _elem2=new FieldSchema();
_elem2=new FieldSchema();
_elem2.read(iprot);
this.fields.add(_elem2);
}
iprot.readListEnd();
}
this.__isset.fields=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
}
