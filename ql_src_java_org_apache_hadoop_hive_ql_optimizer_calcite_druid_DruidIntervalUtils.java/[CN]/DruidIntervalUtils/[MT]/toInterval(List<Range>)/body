{
  List<Interval> intervals=Lists.transform(ranges,new Function<Range,Interval>(){
    @Override public Interval apply(    Range range){
      if (!range.hasLowerBound() && !range.hasUpperBound()) {
        return DruidTable.DEFAULT_INTERVAL;
      }
      long start=range.hasLowerBound() ? toLong(range.lowerEndpoint()) : DruidTable.DEFAULT_INTERVAL.getStartMillis();
      long end=range.hasUpperBound() ? toLong(range.upperEndpoint()) : DruidTable.DEFAULT_INTERVAL.getEndMillis();
      if (range.hasLowerBound() && range.lowerBoundType() == BoundType.OPEN) {
        start++;
      }
      if (range.hasUpperBound() && range.upperBoundType() == BoundType.CLOSED) {
        end++;
      }
      return new Interval(start,end);
    }
  }
);
  LOG.info("Converted time ranges " + ranges + " to interval "+ intervals);
  return intervals;
}
