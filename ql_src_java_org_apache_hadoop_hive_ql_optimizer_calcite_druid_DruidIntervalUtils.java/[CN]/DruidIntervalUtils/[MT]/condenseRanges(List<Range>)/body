{
  if (ranges.size() <= 1) {
    return ranges;
  }
  Comparator<Range> startThenEnd=new Comparator<Range>(){
    @Override public int compare(    Range lhs,    Range rhs){
      int compare=0;
      if (lhs.hasLowerBound() && rhs.hasLowerBound()) {
        compare=lhs.lowerEndpoint().compareTo(rhs.lowerEndpoint());
      }
 else       if (!lhs.hasLowerBound() && rhs.hasLowerBound()) {
        compare=-1;
      }
 else       if (lhs.hasLowerBound() && !rhs.hasLowerBound()) {
        compare=1;
      }
      if (compare != 0) {
        return compare;
      }
      if (lhs.hasUpperBound() && rhs.hasUpperBound()) {
        compare=lhs.upperEndpoint().compareTo(rhs.upperEndpoint());
      }
 else       if (!lhs.hasUpperBound() && rhs.hasUpperBound()) {
        compare=-1;
      }
 else       if (lhs.hasUpperBound() && !rhs.hasUpperBound()) {
        compare=1;
      }
      return compare;
    }
  }
;
  TreeSet<Range> sortedIntervals=Sets.newTreeSet(startThenEnd);
  sortedIntervals.addAll(ranges);
  List<Range> retVal=Lists.newArrayList();
  Iterator<Range> intervalsIter=sortedIntervals.iterator();
  Range currInterval=intervalsIter.next();
  while (intervalsIter.hasNext()) {
    Range next=intervalsIter.next();
    if (currInterval.encloses(next)) {
      continue;
    }
    if (mergeable(currInterval,next)) {
      currInterval=currInterval.span(next);
    }
 else {
      retVal.add(currInterval);
      currInterval=next;
    }
  }
  retVal.add(currInterval);
  return retVal;
}
