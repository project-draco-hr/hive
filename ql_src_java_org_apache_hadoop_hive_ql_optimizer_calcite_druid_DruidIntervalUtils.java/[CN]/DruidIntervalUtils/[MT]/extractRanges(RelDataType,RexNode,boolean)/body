{
switch (node.getKind()) {
case EQUALS:
case LESS_THAN:
case LESS_THAN_OR_EQUAL:
case GREATER_THAN:
case GREATER_THAN_OR_EQUAL:
case BETWEEN:
case IN:
    return leafToRanges(type,(RexCall)node,withNot);
case NOT:
  return extractRanges(type,((RexCall)node).getOperands().get(0),!withNot);
case OR:
RexCall call=(RexCall)node;
List<Range> intervals=Lists.newArrayList();
for (RexNode child : call.getOperands()) {
List<Range> extracted=extractRanges(type,child,withNot);
if (extracted != null) {
intervals.addAll(extracted);
}
}
return intervals;
default :
return null;
}
}
