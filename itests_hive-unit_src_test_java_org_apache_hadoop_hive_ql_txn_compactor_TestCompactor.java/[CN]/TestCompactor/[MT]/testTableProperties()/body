{
  String tblName1="ttp1";
  String tblName2="ttp2";
  executeStatementOnDriver("drop table if exists " + tblName1,driver);
  executeStatementOnDriver("drop table if exists " + tblName2,driver);
  executeStatementOnDriver("CREATE TABLE " + tblName1 + "(a INT, b STRING) "+ " CLUSTERED BY(a) INTO 2 BUCKETS STORED AS ORC TBLPROPERTIES ('transactional'='true')",driver);
  executeStatementOnDriver("CREATE TABLE " + tblName2 + "(a INT, b STRING) "+ " CLUSTERED BY(a) INTO 2 BUCKETS STORED AS ORC TBLPROPERTIES ("+ "'transactional'='true',"+ "'compactor.mapreduce.map.memory.mb'='2048',"+ "'compactorthreshold.hive.compactor.delta.num.threshold'='4',"+ "'compactorthreshold.hive.compactor.delta.pct.threshold'='0.5'"+ ")",driver);
  executeStatementOnDriver("insert into " + tblName1 + " values (1, 'a')",driver);
  executeStatementOnDriver("insert into " + tblName1 + " values (2, 'b')",driver);
  executeStatementOnDriver("insert into " + tblName1 + " values (3, 'c')",driver);
  executeStatementOnDriver("insert into " + tblName1 + " values (4, 'd')",driver);
  executeStatementOnDriver("insert into " + tblName1 + " values (5, 'e')",driver);
  executeStatementOnDriver("insert into " + tblName2 + " values (1, 'a')",driver);
  executeStatementOnDriver("insert into " + tblName2 + " values (2, 'b')",driver);
  executeStatementOnDriver("insert into " + tblName2 + " values (3, 'c')",driver);
  executeStatementOnDriver("insert into " + tblName2 + " values (4, 'd')",driver);
  executeStatementOnDriver("insert into " + tblName2 + " values (5, 'e')",driver);
  runInitiator(conf);
  TxnStore txnHandler=TxnUtils.getTxnStore(conf);
  ShowCompactResponse rsp=txnHandler.showCompact(new ShowCompactRequest());
  Assert.assertEquals(1,rsp.getCompacts().size());
  Assert.assertEquals(TxnStore.INITIATED_RESPONSE,rsp.getCompacts().get(0).getState());
  Assert.assertEquals("ttp2",rsp.getCompacts().get(0).getTablename());
  Assert.assertEquals(CompactionType.MAJOR,rsp.getCompacts().get(0).getType());
  executeStatementOnDriver("alter table " + tblName1 + " compact 'major'",driver);
  rsp=txnHandler.showCompact(new ShowCompactRequest());
  Assert.assertEquals(2,rsp.getCompacts().size());
  Assert.assertEquals("ttp2",rsp.getCompacts().get(0).getTablename());
  Assert.assertEquals(TxnStore.INITIATED_RESPONSE,rsp.getCompacts().get(0).getState());
  Assert.assertEquals("ttp1",rsp.getCompacts().get(1).getTablename());
  Assert.assertEquals(TxnStore.INITIATED_RESPONSE,rsp.getCompacts().get(1).getState());
  AtomicBoolean stop=new AtomicBoolean(true);
  Worker t=new Worker();
  t.setThreadId((int)t.getId());
  t.setHiveConf(conf);
  AtomicBoolean looped=new AtomicBoolean();
  t.init(stop,looped);
  t.run();
  JobConf job=t.getMrJob();
  Assert.assertEquals("2048",job.get("mapreduce.map.memory.mb"));
  stop=new AtomicBoolean(true);
  t=new Worker();
  t.setThreadId((int)t.getId());
  t.setHiveConf(conf);
  looped=new AtomicBoolean();
  t.init(stop,looped);
  t.run();
  job=t.getMrJob();
  Assert.assertEquals("1024",job.get("mapreduce.map.memory.mb"));
  runCleaner(conf);
  rsp=txnHandler.showCompact(new ShowCompactRequest());
  Assert.assertEquals(2,rsp.getCompacts().size());
  Assert.assertEquals("ttp2",rsp.getCompacts().get(0).getTablename());
  Assert.assertEquals(TxnStore.SUCCEEDED_RESPONSE,rsp.getCompacts().get(0).getState());
  Assert.assertEquals("ttp1",rsp.getCompacts().get(1).getTablename());
  Assert.assertEquals(TxnStore.SUCCEEDED_RESPONSE,rsp.getCompacts().get(1).getState());
  executeStatementOnDriver("insert into " + tblName1 + " values (6, 'f')",driver);
  executeStatementOnDriver("insert into " + tblName2 + " values (6, 'f')",driver);
  conf.setFloatVar(HiveConf.ConfVars.HIVE_COMPACTOR_DELTA_PCT_THRESHOLD,0.8f);
  runInitiator(conf);
  rsp=txnHandler.showCompact(new ShowCompactRequest());
  Assert.assertEquals(3,rsp.getCompacts().size());
  Assert.assertEquals("ttp2",rsp.getCompacts().get(0).getTablename());
  Assert.assertEquals(TxnStore.INITIATED_RESPONSE,rsp.getCompacts().get(0).getState());
  runWorker(conf);
  runCleaner(conf);
  rsp=txnHandler.showCompact(new ShowCompactRequest());
  Assert.assertEquals(3,rsp.getCompacts().size());
  Assert.assertEquals("ttp2",rsp.getCompacts().get(0).getTablename());
  Assert.assertEquals(TxnStore.SUCCEEDED_RESPONSE,rsp.getCompacts().get(0).getState());
  executeStatementOnDriver("insert into " + tblName2 + " values (7, 'g')",driver);
  executeStatementOnDriver("alter table " + tblName2 + " compact 'major'"+ " with overwrite tblproperties ("+ "'compactor.mapreduce.map.memory.mb'='3072',"+ "'tblprops.orc.compress.size'='8192')",driver);
  rsp=txnHandler.showCompact(new ShowCompactRequest());
  Assert.assertEquals(4,rsp.getCompacts().size());
  Assert.assertEquals("ttp2",rsp.getCompacts().get(0).getTablename());
  Assert.assertEquals(TxnStore.INITIATED_RESPONSE,rsp.getCompacts().get(0).getState());
  stop=new AtomicBoolean(true);
  t=new Worker();
  t.setThreadId((int)t.getId());
  t.setHiveConf(conf);
  looped=new AtomicBoolean();
  t.init(stop,looped);
  t.run();
  job=t.getMrJob();
  Assert.assertEquals("3072",job.get("mapreduce.map.memory.mb"));
  Assert.assertTrue(job.get("hive.compactor.table.props").contains("orc.compress.size4:8192"));
}
