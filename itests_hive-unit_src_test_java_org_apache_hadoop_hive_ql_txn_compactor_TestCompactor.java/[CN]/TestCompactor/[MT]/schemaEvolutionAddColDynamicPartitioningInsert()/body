{
  String tblName="dpct";
  List<String> colNames=Arrays.asList("a","b");
  executeStatementOnDriver("drop table if exists " + tblName,driver);
  executeStatementOnDriver("CREATE TABLE " + tblName + "(a INT, b STRING) "+ " PARTITIONED BY(ds string)"+ " CLUSTERED BY(a) INTO 2 BUCKETS"+ " STORED AS ORC TBLPROPERTIES ('transactional'='true')",driver);
  executeStatementOnDriver("insert into " + tblName + " partition (ds) values (1, 'fred', "+ "'today'), (2, 'wilma', 'yesterday')",driver);
  executeStatementOnDriver("ALTER TABLE " + tblName + " ADD COLUMNS(c int)",driver);
  executeStatementOnDriver("SELECT * FROM " + tblName + " ORDER BY a",driver);
  ArrayList<String> valuesReadFromHiveDriver=new ArrayList<String>();
  driver.getResults(valuesReadFromHiveDriver);
  Assert.assertEquals(2,valuesReadFromHiveDriver.size());
  Assert.assertEquals("1\tfred\tNULL\ttoday",valuesReadFromHiveDriver.get(0));
  Assert.assertEquals("2\twilma\tNULL\tyesterday",valuesReadFromHiveDriver.get(1));
  executeStatementOnDriver("insert into " + tblName + " partition (ds) values "+ "(3, 'mark', 1900, 'soon'), (4, 'douglas', 1901, 'last_century'), "+ "(5, 'doc', 1902, 'yesterday')",driver);
  executeStatementOnDriver("SELECT * FROM " + tblName + " ORDER BY a",driver);
  valuesReadFromHiveDriver=new ArrayList<String>();
  driver.getResults(valuesReadFromHiveDriver);
  Assert.assertEquals(5,valuesReadFromHiveDriver.size());
  Assert.assertEquals("1\tfred\tNULL\ttoday",valuesReadFromHiveDriver.get(0));
  Assert.assertEquals("2\twilma\tNULL\tyesterday",valuesReadFromHiveDriver.get(1));
  Assert.assertEquals("3\tmark\t1900\tsoon",valuesReadFromHiveDriver.get(2));
  Assert.assertEquals("4\tdouglas\t1901\tlast_century",valuesReadFromHiveDriver.get(3));
  Assert.assertEquals("5\tdoc\t1902\tyesterday",valuesReadFromHiveDriver.get(4));
  Initiator initiator=new Initiator();
  initiator.setThreadId((int)initiator.getId());
  conf.setIntVar(HiveConf.ConfVars.HIVE_COMPACTOR_DELTA_NUM_THRESHOLD,0);
  initiator.setHiveConf(conf);
  AtomicBoolean stop=new AtomicBoolean();
  stop.set(true);
  initiator.init(stop,new AtomicBoolean());
  initiator.run();
  CompactionTxnHandler txnHandler=new CompactionTxnHandler(conf);
  ShowCompactResponse rsp=txnHandler.showCompact(new ShowCompactRequest());
  List<ShowCompactResponseElement> compacts=rsp.getCompacts();
  Assert.assertEquals(4,compacts.size());
  SortedSet<String> partNames=new TreeSet<String>();
  for (int i=0; i < compacts.size(); i++) {
    Assert.assertEquals("default",compacts.get(i).getDbname());
    Assert.assertEquals(tblName,compacts.get(i).getTablename());
    Assert.assertEquals("initiated",compacts.get(i).getState());
    partNames.add(compacts.get(i).getPartitionname());
  }
  List<String> names=new ArrayList<String>(partNames);
  Assert.assertEquals("ds=last_century",names.get(0));
  Assert.assertEquals("ds=soon",names.get(1));
  Assert.assertEquals("ds=today",names.get(2));
  Assert.assertEquals("ds=yesterday",names.get(3));
  executeStatementOnDriver("SELECT * FROM " + tblName + " ORDER BY a",driver);
  valuesReadFromHiveDriver=new ArrayList<String>();
  driver.getResults(valuesReadFromHiveDriver);
  Assert.assertEquals(5,valuesReadFromHiveDriver.size());
  Assert.assertEquals("1\tfred\tNULL\ttoday",valuesReadFromHiveDriver.get(0));
  Assert.assertEquals("2\twilma\tNULL\tyesterday",valuesReadFromHiveDriver.get(1));
  Assert.assertEquals("3\tmark\t1900\tsoon",valuesReadFromHiveDriver.get(2));
  Assert.assertEquals("4\tdouglas\t1901\tlast_century",valuesReadFromHiveDriver.get(3));
  Assert.assertEquals("5\tdoc\t1902\tyesterday",valuesReadFromHiveDriver.get(4));
}
