{
  String tblName="udpct";
  List<String> colNames=Arrays.asList("a","b");
  executeStatementOnDriver("drop table if exists " + tblName,driver);
  executeStatementOnDriver("CREATE TABLE " + tblName + "(a INT, b STRING) "+ " PARTITIONED BY(ds string)"+ " CLUSTERED BY(a) INTO 2 BUCKETS"+ " STORED AS ORC TBLPROPERTIES ('transactional'='true')",driver);
  executeStatementOnDriver("insert into " + tblName + " partition (ds) values (1, 'fred', "+ "'today'), (2, 'wilma', 'yesterday')",driver);
  executeStatementOnDriver("update " + tblName + " set b = 'barney'",driver);
  Initiator initiator=new Initiator();
  initiator.setThreadId((int)initiator.getId());
  conf.setIntVar(HiveConf.ConfVars.HIVE_COMPACTOR_DELTA_NUM_THRESHOLD,1);
  initiator.setHiveConf(conf);
  AtomicBoolean stop=new AtomicBoolean();
  stop.set(true);
  initiator.init(stop,new AtomicBoolean());
  initiator.run();
  TxnStore txnHandler=TxnUtils.getTxnStore(conf);
  ShowCompactResponse rsp=txnHandler.showCompact(new ShowCompactRequest());
  List<ShowCompactResponseElement> compacts=rsp.getCompacts();
  Assert.assertEquals(2,compacts.size());
  SortedSet<String> partNames=new TreeSet<String>();
  for (int i=0; i < compacts.size(); i++) {
    Assert.assertEquals("default",compacts.get(i).getDbname());
    Assert.assertEquals(tblName,compacts.get(i).getTablename());
    Assert.assertEquals("initiated",compacts.get(i).getState());
    partNames.add(compacts.get(i).getPartitionname());
  }
  List<String> names=new ArrayList<String>(partNames);
  Assert.assertEquals("ds=today",names.get(0));
  Assert.assertEquals("ds=yesterday",names.get(1));
}
