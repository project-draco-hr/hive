{
  String tblName="compaction_test";
  String tblNameStg=tblName + "_stg";
  List<String> colNames=Arrays.asList("a","b");
  executeStatementOnDriver("drop table if exists " + tblName,driver);
  executeStatementOnDriver("drop table if exists " + tblNameStg,driver);
  executeStatementOnDriver("CREATE TABLE " + tblName + "(a INT, b STRING) "+ " PARTITIONED BY(bkt INT)"+ " CLUSTERED BY(a) INTO 4 BUCKETS"+ " STORED AS ORC  TBLPROPERTIES ('transactional'='true')",driver);
  executeStatementOnDriver("CREATE EXTERNAL TABLE " + tblNameStg + "(a INT, b STRING)"+ " ROW FORMAT DELIMITED FIELDS TERMINATED BY '\\t' LINES TERMINATED BY '\\n'"+ " STORED AS TEXTFILE"+ " LOCATION '"+ stagingFolder.newFolder().toURI().getPath()+ "'",driver);
  executeStatementOnDriver("load data local inpath '" + BASIC_FILE_NAME + "' overwrite into table "+ tblNameStg,driver);
  execSelectAndDumpData("select * from " + tblNameStg,driver,"Dumping data for " + tblNameStg + " after load:");
  executeStatementOnDriver("FROM " + tblNameStg + " INSERT INTO TABLE "+ tblName+ " PARTITION(bkt=0) "+ "SELECT a, b where a < 2",driver);
  executeStatementOnDriver("FROM " + tblNameStg + " INSERT INTO TABLE "+ tblName+ " PARTITION(bkt=1) "+ "SELECT a, b where a >= 2",driver);
  execSelectAndDumpData("select * from " + tblName,driver,"Dumping data for " + tblName + " after load:");
  TxnStore txnHandler=TxnUtils.getTxnStore(conf);
  CompactionInfo ci=new CompactionInfo("default",tblName,"bkt=0",CompactionType.MAJOR);
  LOG.debug("List of stats columns before analyze Part1: " + txnHandler.findColumnsWithStats(ci));
  Worker.StatsUpdater su=Worker.StatsUpdater.init(ci,colNames,conf,System.getProperty("user.name"));
  su.gatherStats();
  LOG.debug("List of stats columns after analyze Part1: " + txnHandler.findColumnsWithStats(ci));
  CompactionInfo ciPart2=new CompactionInfo("default",tblName,"bkt=1",CompactionType.MAJOR);
  LOG.debug("List of stats columns before analyze Part2: " + txnHandler.findColumnsWithStats(ci));
  su=Worker.StatsUpdater.init(ciPart2,colNames,conf,System.getProperty("user.name"));
  su.gatherStats();
  LOG.debug("List of stats columns after analyze Part2: " + txnHandler.findColumnsWithStats(ci));
  Map<String,List<ColumnStatisticsObj>> stats=msClient.getPartitionColumnStatistics(ci.dbname,ci.tableName,Arrays.asList(ci.partName),colNames);
  List<ColumnStatisticsObj> colStats=stats.get(ci.partName);
  Assert.assertNotNull("No stats found for partition " + ci.partName,colStats);
  Assert.assertEquals("Expected column 'a' at index 0","a",colStats.get(0).getColName());
  Assert.assertEquals("Expected column 'b' at index 1","b",colStats.get(1).getColName());
  LongColumnStatsData colAStats=colStats.get(0).getStatsData().getLongStats();
  Assert.assertEquals("lowValue a",1,colAStats.getLowValue());
  Assert.assertEquals("highValue a",1,colAStats.getHighValue());
  Assert.assertEquals("numNulls a",0,colAStats.getNumNulls());
  Assert.assertEquals("numNdv a",1,colAStats.getNumDVs());
  StringColumnStatsData colBStats=colStats.get(1).getStatsData().getStringStats();
  Assert.assertEquals("maxColLen b",3,colBStats.getMaxColLen());
  Assert.assertEquals("avgColLen b",3.0,colBStats.getAvgColLen(),0.01);
  Assert.assertEquals("numNulls b",0,colBStats.getNumNulls());
  Assert.assertEquals("nunDVs",2,colBStats.getNumDVs());
  stats=msClient.getPartitionColumnStatistics(ciPart2.dbname,ciPart2.tableName,Arrays.asList(ciPart2.partName),colNames);
  colStats=stats.get(ciPart2.partName);
  LongColumnStatsData colAStatsPart2=colStats.get(0).getStatsData().getLongStats();
  StringColumnStatsData colBStatsPart2=colStats.get(1).getStatsData().getStringStats();
  HiveEndPoint endPt=new HiveEndPoint(null,ci.dbname,ci.tableName,Arrays.asList("0"));
  DelimitedInputWriter writer=new DelimitedInputWriter(new String[]{"a","b"},",",endPt);
  StreamingConnection connection=endPt.newConnection(true,"UT_" + Thread.currentThread().getName());
  TransactionBatch txnBatch=connection.fetchTransactionBatch(2,writer);
  txnBatch.beginNextTransaction();
  Assert.assertEquals(TransactionBatch.TxnState.OPEN,txnBatch.getCurrentTransactionState());
  txnBatch.write("50,Kiev".getBytes());
  txnBatch.write("51,St. Petersburg".getBytes());
  txnBatch.write("44,Boston".getBytes());
  txnBatch.commit();
  txnBatch.beginNextTransaction();
  txnBatch.write("52,Tel Aviv".getBytes());
  txnBatch.write("53,Atlantis".getBytes());
  txnBatch.write("53,Boston".getBytes());
  txnBatch.commit();
  txnBatch.close();
  connection.close();
  execSelectAndDumpData("select * from " + ci.getFullTableName(),driver,ci.getFullTableName());
  CompactionRequest rqst=new CompactionRequest(ci.dbname,ci.tableName,CompactionType.MAJOR);
  rqst.setPartitionname(ci.partName);
  txnHandler.compact(rqst);
  Worker t=new Worker();
  t.setThreadId((int)t.getId());
  t.setHiveConf(conf);
  AtomicBoolean stop=new AtomicBoolean();
  AtomicBoolean looped=new AtomicBoolean();
  stop.set(true);
  t.init(stop,looped);
  t.run();
  ShowCompactResponse rsp=txnHandler.showCompact(new ShowCompactRequest());
  List<ShowCompactResponseElement> compacts=rsp.getCompacts();
  if (1 != compacts.size()) {
    Assert.fail("Expecting 1 file and found " + compacts.size() + " files "+ compacts.toString());
  }
  Assert.assertEquals("ready for cleaning",compacts.get(0).getState());
  stats=msClient.getPartitionColumnStatistics(ci.dbname,ci.tableName,Arrays.asList(ci.partName),colNames);
  colStats=stats.get(ci.partName);
  Assert.assertNotNull("No stats found for partition " + ci.partName,colStats);
  Assert.assertEquals("Expected column 'a' at index 0","a",colStats.get(0).getColName());
  Assert.assertEquals("Expected column 'b' at index 1","b",colStats.get(1).getColName());
  colAStats=colStats.get(0).getStatsData().getLongStats();
  Assert.assertEquals("lowValue a",1,colAStats.getLowValue());
  Assert.assertEquals("highValue a",53,colAStats.getHighValue());
  Assert.assertEquals("numNulls a",0,colAStats.getNumNulls());
  Assert.assertEquals("numNdv a",6,colAStats.getNumDVs());
  colBStats=colStats.get(1).getStatsData().getStringStats();
  Assert.assertEquals("maxColLen b",14,colBStats.getMaxColLen());
  Assert.assertEquals("avgColLen b",(long)6.1111111111,(long)colBStats.getAvgColLen());
  Assert.assertEquals("numNulls b",0,colBStats.getNumNulls());
  Assert.assertEquals("nunDVs",10,colBStats.getNumDVs());
  stats=msClient.getPartitionColumnStatistics(ciPart2.dbname,ciPart2.tableName,Arrays.asList(ciPart2.partName),colNames);
  colStats=stats.get(ciPart2.partName);
  Assert.assertEquals("Expected stats for " + ciPart2.partName + " to stay the same",colAStatsPart2,colStats.get(0).getStatsData().getLongStats());
  Assert.assertEquals("Expected stats for " + ciPart2.partName + " to stay the same",colBStatsPart2,colStats.get(1).getStatsData().getStringStats());
}
