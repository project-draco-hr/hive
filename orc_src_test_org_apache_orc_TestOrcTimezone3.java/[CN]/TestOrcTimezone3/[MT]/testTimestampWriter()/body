{
  TypeDescription schema=TypeDescription.createTimestamp();
  TimeZone.setDefault(TimeZone.getTimeZone(writerTimeZone));
  Writer writer=OrcFile.createWriter(testFilePath,OrcFile.writerOptions(conf).setSchema(schema).stripeSize(100000).bufferSize(10000));
  assertEquals(writerTimeZone,TimeZone.getDefault().getID());
  List<String> ts=Lists.newArrayList();
  ts.add("1969-12-31 16:00:14.007");
  ts.add("1969-12-31 16:00:06.021");
  ts.add("1969-12-31 16:00:03.963");
  VectorizedRowBatch batch=schema.createRowBatch();
  TimestampColumnVector times=(TimestampColumnVector)batch.cols[0];
  for (  String t : ts) {
    times.set(batch.size++,Timestamp.valueOf(t));
  }
  writer.addRowBatch(batch);
  writer.close();
  TimeZone.setDefault(TimeZone.getTimeZone(readerTimeZone));
  Reader reader=OrcFile.createReader(testFilePath,OrcFile.readerOptions(conf).filesystem(fs));
  assertEquals(readerTimeZone,TimeZone.getDefault().getID());
  RecordReader rows=reader.rows();
  batch=reader.getSchema().createRowBatch();
  times=(TimestampColumnVector)batch.cols[0];
  int idx=0;
  while (rows.nextBatch(batch)) {
    for (int r=0; r < batch.size; ++r) {
      assertEquals(ts.get(idx++),times.asScratchTimestamp(r).toString());
    }
  }
  rows.close();
}
