{
  boolean canApply=false;
  RewriteCanApplyCtx canApplyCtx=RewriteCanApplyCtx.getInstance(parseContext);
  Map<String,Operator<? extends OperatorDesc>> topOps=parseContext.getTopOps();
  canApplyCtx.setBaseTableName(baseTableName);
  canApplyCtx.populateRewriteVars(topOp);
  Map<Index,Set<String>> indexTableMap=getIndexToKeysMap(indexes.get(baseTable));
  Iterator<Index> indexMapItr=indexTableMap.keySet().iterator();
  Index index=null;
  while (indexMapItr.hasNext()) {
    index=indexMapItr.next();
    canApply=canApplyCtx.isIndexUsableForQueryBranchRewrite(index,indexTableMap.get(index));
    if (canApply) {
      canApply=checkIfAllRewriteCriteriaIsMet(canApplyCtx);
      if (canApply) {
        if (canApplyCtx.getAggFunction() == null) {
          String aggregationFunction=indexTableMap.get(index).toString();
          aggregationFunction=aggregationFunction.substring(1,aggregationFunction.length() - 1);
          canApplyCtx.setAggFunction("_count_of_" + aggregationFunction + "");
        }
      }
      break;
    }
  }
  indexTableName=index.getIndexTableName();
  if (canApply && topOps.containsValue(topOp)) {
    Iterator<String> topOpNamesItr=topOps.keySet().iterator();
    while (topOpNamesItr.hasNext()) {
      String topOpName=topOpNamesItr.next();
      if (topOps.get(topOpName).equals(topOp)) {
        tsOpToProcess.put(topOpName,canApplyCtx);
      }
    }
  }
  if (tsOpToProcess.size() == 0) {
    canApply=false;
  }
 else {
    canApply=true;
  }
  return canApply;
}
