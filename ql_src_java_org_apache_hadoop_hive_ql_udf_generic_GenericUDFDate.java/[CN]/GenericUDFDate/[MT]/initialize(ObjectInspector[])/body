{
  if (arguments.length != 1) {
    throw new UDFArgumentLengthException("to_date() requires 1 argument, got " + arguments.length);
  }
  if (arguments[0].getCategory() != Category.PRIMITIVE) {
    throw new UDFArgumentException("to_date() only accepts STRING/TIMESTAMP/DATEWRITABLE types, got " + arguments[0].getTypeName());
  }
  argumentOI=(PrimitiveObjectInspector)arguments[0];
  inputType=argumentOI.getPrimitiveCategory();
  ObjectInspector outputOI=PrimitiveObjectInspectorFactory.writableStringObjectInspector;
switch (inputType) {
case CHAR:
case VARCHAR:
case STRING:
    inputType=PrimitiveCategory.STRING;
  textConverter=ObjectInspectorConverters.getConverter(argumentOI,PrimitiveObjectInspectorFactory.writableStringObjectInspector);
break;
case TIMESTAMP:
timestampConverter=new TimestampConverter(argumentOI,PrimitiveObjectInspectorFactory.writableTimestampObjectInspector);
break;
case DATE:
dateWritableConverter=ObjectInspectorConverters.getConverter(argumentOI,PrimitiveObjectInspectorFactory.writableDateObjectInspector);
break;
default :
throw new UDFArgumentException("TO_DATE() only takes STRING/TIMESTAMP/DATEWRITABLE types, got " + inputType);
}
return outputOI;
}
