{
  TTupleProtocol oprot=(TTupleProtocol)prot;
  BitSet optionals=new BitSet();
  if (struct.isSetAint()) {
    optionals.set(0);
  }
  if (struct.isSetAString()) {
    optionals.set(1);
  }
  if (struct.isSetLint()) {
    optionals.set(2);
  }
  if (struct.isSetLString()) {
    optionals.set(3);
  }
  if (struct.isSetLintString()) {
    optionals.set(4);
  }
  if (struct.isSetMStringString()) {
    optionals.set(5);
  }
  oprot.writeBitSet(optionals,6);
  if (struct.isSetAint()) {
    oprot.writeI32(struct.aint);
  }
  if (struct.isSetAString()) {
    oprot.writeString(struct.aString);
  }
  if (struct.isSetLint()) {
{
      oprot.writeI32(struct.lint.size());
      for (      int _iter17 : struct.lint) {
        oprot.writeI32(_iter17);
      }
    }
  }
  if (struct.isSetLString()) {
{
      oprot.writeI32(struct.lString.size());
      for (      String _iter18 : struct.lString) {
        oprot.writeString(_iter18);
      }
    }
  }
  if (struct.isSetLintString()) {
{
      oprot.writeI32(struct.lintString.size());
      for (      IntString _iter19 : struct.lintString) {
        _iter19.write(oprot);
      }
    }
  }
  if (struct.isSetMStringString()) {
{
      oprot.writeI32(struct.mStringString.size());
      for (      Map.Entry<String,String> _iter20 : struct.mStringString.entrySet()) {
        oprot.writeString(_iter20.getKey());
        oprot.writeString(_iter20.getValue());
      }
    }
  }
}
