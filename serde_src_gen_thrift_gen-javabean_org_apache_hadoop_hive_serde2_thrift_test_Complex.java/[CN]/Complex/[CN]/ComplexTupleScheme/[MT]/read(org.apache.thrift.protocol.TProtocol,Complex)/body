{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  BitSet incoming=iprot.readBitSet(10);
  if (incoming.get(0)) {
    struct.aint=iprot.readI32();
    struct.setAintIsSet(true);
  }
  if (incoming.get(1)) {
    struct.aString=iprot.readString();
    struct.setAStringIsSet(true);
  }
  if (incoming.get(2)) {
{
      org.apache.thrift.protocol.TList _list57=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32,iprot.readI32());
      struct.lint=new ArrayList<Integer>(_list57.size);
      int _elem58;
      for (int _i59=0; _i59 < _list57.size; ++_i59) {
        _elem58=iprot.readI32();
        struct.lint.add(_elem58);
      }
    }
    struct.setLintIsSet(true);
  }
  if (incoming.get(3)) {
{
      org.apache.thrift.protocol.TList _list60=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.lString=new ArrayList<String>(_list60.size);
      String _elem61;
      for (int _i62=0; _i62 < _list60.size; ++_i62) {
        _elem61=iprot.readString();
        struct.lString.add(_elem61);
      }
    }
    struct.setLStringIsSet(true);
  }
  if (incoming.get(4)) {
{
      org.apache.thrift.protocol.TList _list63=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.lintString=new ArrayList<IntString>(_list63.size);
      IntString _elem64;
      for (int _i65=0; _i65 < _list63.size; ++_i65) {
        _elem64=new IntString();
        _elem64.read(iprot);
        struct.lintString.add(_elem64);
      }
    }
    struct.setLintStringIsSet(true);
  }
  if (incoming.get(5)) {
{
      org.apache.thrift.protocol.TMap _map66=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.mStringString=new HashMap<String,String>(2 * _map66.size);
      String _key67;
      String _val68;
      for (int _i69=0; _i69 < _map66.size; ++_i69) {
        _key67=iprot.readString();
        _val68=iprot.readString();
        struct.mStringString.put(_key67,_val68);
      }
    }
    struct.setMStringStringIsSet(true);
  }
  if (incoming.get(6)) {
{
      org.apache.thrift.protocol.TMap _map70=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.MAP,iprot.readI32());
      struct.attributes=new HashMap<String,Map<String,Map<String,PropValueUnion>>>(2 * _map70.size);
      String _key71;
      Map<String,Map<String,PropValueUnion>> _val72;
      for (int _i73=0; _i73 < _map70.size; ++_i73) {
        _key71=iprot.readString();
{
          org.apache.thrift.protocol.TMap _map74=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.MAP,iprot.readI32());
          _val72=new HashMap<String,Map<String,PropValueUnion>>(2 * _map74.size);
          String _key75;
          Map<String,PropValueUnion> _val76;
          for (int _i77=0; _i77 < _map74.size; ++_i77) {
            _key75=iprot.readString();
{
              org.apache.thrift.protocol.TMap _map78=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
              _val76=new HashMap<String,PropValueUnion>(2 * _map78.size);
              String _key79;
              PropValueUnion _val80;
              for (int _i81=0; _i81 < _map78.size; ++_i81) {
                _key79=iprot.readString();
                _val80=new PropValueUnion();
                _val80.read(iprot);
                _val76.put(_key79,_val80);
              }
            }
            _val72.put(_key75,_val76);
          }
        }
        struct.attributes.put(_key71,_val72);
      }
    }
    struct.setAttributesIsSet(true);
  }
  if (incoming.get(7)) {
    struct.unionField1=new PropValueUnion();
    struct.unionField1.read(iprot);
    struct.setUnionField1IsSet(true);
  }
  if (incoming.get(8)) {
    struct.unionField2=new PropValueUnion();
    struct.unionField2.read(iprot);
    struct.setUnionField2IsSet(true);
  }
  if (incoming.get(9)) {
    struct.unionField3=new PropValueUnion();
    struct.unionField3.read(iprot);
    struct.setUnionField3IsSet(true);
  }
}
