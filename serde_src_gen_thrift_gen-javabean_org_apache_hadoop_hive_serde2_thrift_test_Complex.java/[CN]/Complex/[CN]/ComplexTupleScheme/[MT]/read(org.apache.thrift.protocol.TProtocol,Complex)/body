{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  BitSet incoming=iprot.readBitSet(10);
  if (incoming.get(0)) {
    struct.aint=iprot.readI32();
    struct.setAintIsSet(true);
  }
  if (incoming.get(1)) {
    struct.aString=iprot.readString();
    struct.setAStringIsSet(true);
  }
  if (incoming.get(2)) {
{
      org.apache.thrift.protocol.TList _list57=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32,iprot.readI32());
      struct.lint=new ArrayList<Integer>(_list57.size);
      for (int _i58=0; _i58 < _list57.size; ++_i58) {
        int _elem59;
        _elem59=iprot.readI32();
        struct.lint.add(_elem59);
      }
    }
    struct.setLintIsSet(true);
  }
  if (incoming.get(3)) {
{
      org.apache.thrift.protocol.TList _list60=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.lString=new ArrayList<String>(_list60.size);
      for (int _i61=0; _i61 < _list60.size; ++_i61) {
        String _elem62;
        _elem62=iprot.readString();
        struct.lString.add(_elem62);
      }
    }
    struct.setLStringIsSet(true);
  }
  if (incoming.get(4)) {
{
      org.apache.thrift.protocol.TList _list63=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.lintString=new ArrayList<IntString>(_list63.size);
      for (int _i64=0; _i64 < _list63.size; ++_i64) {
        IntString _elem65;
        _elem65=new IntString();
        _elem65.read(iprot);
        struct.lintString.add(_elem65);
      }
    }
    struct.setLintStringIsSet(true);
  }
  if (incoming.get(5)) {
{
      org.apache.thrift.protocol.TMap _map66=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.mStringString=new HashMap<String,String>(2 * _map66.size);
      for (int _i67=0; _i67 < _map66.size; ++_i67) {
        String _key68;
        String _val69;
        _key68=iprot.readString();
        _val69=iprot.readString();
        struct.mStringString.put(_key68,_val69);
      }
    }
    struct.setMStringStringIsSet(true);
  }
  if (incoming.get(6)) {
{
      org.apache.thrift.protocol.TMap _map70=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.MAP,iprot.readI32());
      struct.attributes=new HashMap<String,Map<String,Map<String,PropValueUnion>>>(2 * _map70.size);
      for (int _i71=0; _i71 < _map70.size; ++_i71) {
        String _key72;
        Map<String,Map<String,PropValueUnion>> _val73;
        _key72=iprot.readString();
{
          org.apache.thrift.protocol.TMap _map74=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.MAP,iprot.readI32());
          _val73=new HashMap<String,Map<String,PropValueUnion>>(2 * _map74.size);
          for (int _i75=0; _i75 < _map74.size; ++_i75) {
            String _key76;
            Map<String,PropValueUnion> _val77;
            _key76=iprot.readString();
{
              org.apache.thrift.protocol.TMap _map78=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
              _val77=new HashMap<String,PropValueUnion>(2 * _map78.size);
              for (int _i79=0; _i79 < _map78.size; ++_i79) {
                String _key80;
                PropValueUnion _val81;
                _key80=iprot.readString();
                _val81=new PropValueUnion();
                _val81.read(iprot);
                _val77.put(_key80,_val81);
              }
            }
            _val73.put(_key76,_val77);
          }
        }
        struct.attributes.put(_key72,_val73);
      }
    }
    struct.setAttributesIsSet(true);
  }
  if (incoming.get(7)) {
    struct.unionField1=new PropValueUnion();
    struct.unionField1.read(iprot);
    struct.setUnionField1IsSet(true);
  }
  if (incoming.get(8)) {
    struct.unionField2=new PropValueUnion();
    struct.unionField2.read(iprot);
    struct.setUnionField2IsSet(true);
  }
  if (incoming.get(9)) {
    struct.unionField3=new PropValueUnion();
    struct.unionField3.read(iprot);
    struct.setUnionField3IsSet(true);
  }
}
