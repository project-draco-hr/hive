{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
        struct.aint=iprot.readI32();
        struct.setAintIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
    struct.aString=iprot.readString();
    struct.setAStringIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
  org.apache.thrift.protocol.TList _list18=iprot.readListBegin();
  struct.lint=new ArrayList<Integer>(_list18.size);
  for (int _i19=0; _i19 < _list18.size; ++_i19) {
    int _elem20;
    _elem20=iprot.readI32();
    struct.lint.add(_elem20);
  }
  iprot.readListEnd();
}
struct.setLintIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list21=iprot.readListBegin();
struct.lString=new ArrayList<String>(_list21.size);
for (int _i22=0; _i22 < _list21.size; ++_i22) {
String _elem23;
_elem23=iprot.readString();
struct.lString.add(_elem23);
}
iprot.readListEnd();
}
struct.setLStringIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list24=iprot.readListBegin();
struct.lintString=new ArrayList<IntString>(_list24.size);
for (int _i25=0; _i25 < _list24.size; ++_i25) {
IntString _elem26;
_elem26=new IntString();
_elem26.read(iprot);
struct.lintString.add(_elem26);
}
iprot.readListEnd();
}
struct.setLintStringIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map27=iprot.readMapBegin();
struct.mStringString=new HashMap<String,String>(2 * _map27.size);
for (int _i28=0; _i28 < _map27.size; ++_i28) {
String _key29;
String _val30;
_key29=iprot.readString();
_val30=iprot.readString();
struct.mStringString.put(_key29,_val30);
}
iprot.readMapEnd();
}
struct.setMStringStringIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 7:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map31=iprot.readMapBegin();
struct.attributes=new HashMap<String,Map<String,Map<String,PropValueUnion>>>(2 * _map31.size);
for (int _i32=0; _i32 < _map31.size; ++_i32) {
String _key33;
Map<String,Map<String,PropValueUnion>> _val34;
_key33=iprot.readString();
{
org.apache.thrift.protocol.TMap _map35=iprot.readMapBegin();
_val34=new HashMap<String,Map<String,PropValueUnion>>(2 * _map35.size);
for (int _i36=0; _i36 < _map35.size; ++_i36) {
String _key37;
Map<String,PropValueUnion> _val38;
_key37=iprot.readString();
{
org.apache.thrift.protocol.TMap _map39=iprot.readMapBegin();
_val38=new HashMap<String,PropValueUnion>(2 * _map39.size);
for (int _i40=0; _i40 < _map39.size; ++_i40) {
String _key41;
PropValueUnion _val42;
_key41=iprot.readString();
_val42=new PropValueUnion();
_val42.read(iprot);
_val38.put(_key41,_val42);
}
iprot.readMapEnd();
}
_val34.put(_key37,_val38);
}
iprot.readMapEnd();
}
struct.attributes.put(_key33,_val34);
}
iprot.readMapEnd();
}
struct.setAttributesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 8:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.unionField1=new PropValueUnion();
struct.unionField1.read(iprot);
struct.setUnionField1IsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 9:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.unionField2=new PropValueUnion();
struct.unionField2.read(iprot);
struct.setUnionField2IsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 10:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.unionField3=new PropValueUnion();
struct.unionField3.read(iprot);
struct.setUnionField3IsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
