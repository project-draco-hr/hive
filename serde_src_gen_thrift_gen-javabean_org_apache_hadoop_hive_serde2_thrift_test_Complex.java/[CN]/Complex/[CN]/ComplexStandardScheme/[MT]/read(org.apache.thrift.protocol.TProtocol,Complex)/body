{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
        struct.aint=iprot.readI32();
        struct.setAintIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
    struct.aString=iprot.readString();
    struct.setAStringIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
  org.apache.thrift.protocol.TList _list0=iprot.readListBegin();
  struct.lint=new ArrayList<Integer>(_list0.size);
  for (int _i1=0; _i1 < _list0.size; ++_i1) {
    int _elem2;
    _elem2=iprot.readI32();
    struct.lint.add(_elem2);
  }
  iprot.readListEnd();
}
struct.setLintIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list3=iprot.readListBegin();
struct.lString=new ArrayList<String>(_list3.size);
for (int _i4=0; _i4 < _list3.size; ++_i4) {
String _elem5;
_elem5=iprot.readString();
struct.lString.add(_elem5);
}
iprot.readListEnd();
}
struct.setLStringIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list6=iprot.readListBegin();
struct.lintString=new ArrayList<IntString>(_list6.size);
for (int _i7=0; _i7 < _list6.size; ++_i7) {
IntString _elem8;
_elem8=new IntString();
_elem8.read(iprot);
struct.lintString.add(_elem8);
}
iprot.readListEnd();
}
struct.setLintStringIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map9=iprot.readMapBegin();
struct.mStringString=new HashMap<String,String>(2 * _map9.size);
for (int _i10=0; _i10 < _map9.size; ++_i10) {
String _key11;
String _val12;
_key11=iprot.readString();
_val12=iprot.readString();
struct.mStringString.put(_key11,_val12);
}
iprot.readMapEnd();
}
struct.setMStringStringIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
