{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.queryId=iprot.readString();
        struct.setQueryIdIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
    struct.queryType=iprot.readString();
    struct.setQueryTypeIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map100=iprot.readMapBegin();
  struct.queryAttributes=new HashMap<String,String>(2 * _map100.size);
  String _key101;
  String _val102;
  for (int _i103=0; _i103 < _map100.size; ++_i103) {
    _key101=iprot.readString();
    _val102=iprot.readString();
    struct.queryAttributes.put(_key101,_val102);
  }
  iprot.readMapEnd();
}
struct.setQueryAttributesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map104=iprot.readMapBegin();
struct.queryCounters=new HashMap<String,Long>(2 * _map104.size);
String _key105;
long _val106;
for (int _i107=0; _i107 < _map104.size; ++_i107) {
_key105=iprot.readString();
_val106=iprot.readI64();
struct.queryCounters.put(_key105,_val106);
}
iprot.readMapEnd();
}
struct.setQueryCountersIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.stageGraph=new Graph();
struct.stageGraph.read(iprot);
struct.setStageGraphIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list108=iprot.readListBegin();
struct.stageList=new ArrayList<Stage>(_list108.size);
Stage _elem109;
for (int _i110=0; _i110 < _list108.size; ++_i110) {
_elem109=new Stage();
_elem109.read(iprot);
struct.stageList.add(_elem109);
}
iprot.readListEnd();
}
struct.setStageListIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 7:
if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
struct.done=iprot.readBool();
struct.setDoneIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 8:
if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
struct.started=iprot.readBool();
struct.setStartedIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
