{
  ObjectInspector result=cachedStandardObjectInspector.get(typeInfo);
  if (result == null) {
switch (typeInfo.getCategory()) {
case PRIMITIVE:
{
        result=PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(((PrimitiveTypeInfo)typeInfo).getPrimitiveCategory());
        break;
      }
case LIST:
{
      ObjectInspector elementObjectInspector=getStandardWritableObjectInspectorFromTypeInfo(((ListTypeInfo)typeInfo).getListElementTypeInfo());
      result=ObjectInspectorFactory.getStandardListObjectInspector(elementObjectInspector);
      break;
    }
case MAP:
{
    MapTypeInfo mapTypeInfo=(MapTypeInfo)typeInfo;
    ObjectInspector keyObjectInspector=getStandardWritableObjectInspectorFromTypeInfo(mapTypeInfo.getMapKeyTypeInfo());
    ObjectInspector valueObjectInspector=getStandardWritableObjectInspectorFromTypeInfo(mapTypeInfo.getMapValueTypeInfo());
    result=ObjectInspectorFactory.getStandardMapObjectInspector(keyObjectInspector,valueObjectInspector);
    break;
  }
case STRUCT:
{
  StructTypeInfo structTypeInfo=(StructTypeInfo)typeInfo;
  List<String> fieldNames=structTypeInfo.getAllStructFieldNames();
  List<TypeInfo> fieldTypeInfos=structTypeInfo.getAllStructFieldTypeInfos();
  List<ObjectInspector> fieldObjectInspectors=new ArrayList<ObjectInspector>(fieldTypeInfos.size());
  for (int i=0; i < fieldTypeInfos.size(); i++) {
    fieldObjectInspectors.add(getStandardWritableObjectInspectorFromTypeInfo(fieldTypeInfos.get(i)));
  }
  result=ObjectInspectorFactory.getStandardStructObjectInspector(fieldNames,fieldObjectInspectors);
  break;
}
default :
{
result=null;
}
}
cachedStandardObjectInspector.put(typeInfo,result);
}
return result;
}
