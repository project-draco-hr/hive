{
  ObjectInspector result=cachedStandardJavaObjectInspector.get(typeInfo);
  if (result == null) {
switch (typeInfo.getCategory()) {
case PRIMITIVE:
{
        result=PrimitiveObjectInspectorFactory.getPrimitiveJavaObjectInspector((PrimitiveTypeInfo)typeInfo);
        break;
      }
case LIST:
{
      ObjectInspector elementObjectInspector=getStandardJavaObjectInspectorFromTypeInfo(((ListTypeInfo)typeInfo).getListElementTypeInfo());
      result=ObjectInspectorFactory.getStandardListObjectInspector(elementObjectInspector);
      break;
    }
case MAP:
{
    MapTypeInfo mapTypeInfo=(MapTypeInfo)typeInfo;
    ObjectInspector keyObjectInspector=getStandardJavaObjectInspectorFromTypeInfo(mapTypeInfo.getMapKeyTypeInfo());
    ObjectInspector valueObjectInspector=getStandardJavaObjectInspectorFromTypeInfo(mapTypeInfo.getMapValueTypeInfo());
    result=ObjectInspectorFactory.getStandardMapObjectInspector(keyObjectInspector,valueObjectInspector);
    break;
  }
case STRUCT:
{
  StructTypeInfo strucTypeInfo=(StructTypeInfo)typeInfo;
  List<String> fieldNames=strucTypeInfo.getAllStructFieldNames();
  List<TypeInfo> fieldTypeInfos=strucTypeInfo.getAllStructFieldTypeInfos();
  List<ObjectInspector> fieldObjectInspectors=new ArrayList<ObjectInspector>(fieldTypeInfos.size());
  for (int i=0; i < fieldTypeInfos.size(); i++) {
    fieldObjectInspectors.add(getStandardJavaObjectInspectorFromTypeInfo(fieldTypeInfos.get(i)));
  }
  result=ObjectInspectorFactory.getStandardStructObjectInspector(fieldNames,fieldObjectInspectors);
  break;
}
case UNION:
{
UnionTypeInfo unionTypeInfo=(UnionTypeInfo)typeInfo;
List<TypeInfo> objectTypeInfos=unionTypeInfo.getAllUnionObjectTypeInfos();
List<ObjectInspector> fieldObjectInspectors=new ArrayList<ObjectInspector>(objectTypeInfos.size());
for (int i=0; i < objectTypeInfos.size(); i++) {
  fieldObjectInspectors.add(getStandardJavaObjectInspectorFromTypeInfo(objectTypeInfos.get(i)));
}
result=ObjectInspectorFactory.getStandardUnionObjectInspector(fieldObjectInspectors);
break;
}
default :
{
result=null;
}
}
cachedStandardJavaObjectInspector.put(typeInfo,result);
}
return result;
}
