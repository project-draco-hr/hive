{
  if (oi == null) {
    return null;
  }
  TypeInfo result=null;
switch (oi.getCategory()) {
case PRIMITIVE:
{
      PrimitiveObjectInspector poi=(PrimitiveObjectInspector)oi;
      result=poi.getTypeInfo();
      break;
    }
case LIST:
{
    ListObjectInspector loi=(ListObjectInspector)oi;
    result=TypeInfoFactory.getListTypeInfo(getTypeInfoFromObjectInspector(loi.getListElementObjectInspector()));
    break;
  }
case MAP:
{
  MapObjectInspector moi=(MapObjectInspector)oi;
  result=TypeInfoFactory.getMapTypeInfo(getTypeInfoFromObjectInspector(moi.getMapKeyObjectInspector()),getTypeInfoFromObjectInspector(moi.getMapValueObjectInspector()));
  break;
}
case STRUCT:
{
StructObjectInspector soi=(StructObjectInspector)oi;
List<? extends StructField> fields=soi.getAllStructFieldRefs();
List<String> fieldNames=new ArrayList<String>(fields.size());
List<TypeInfo> fieldTypeInfos=new ArrayList<TypeInfo>(fields.size());
for (StructField f : fields) {
  fieldNames.add(f.getFieldName());
  fieldTypeInfos.add(getTypeInfoFromObjectInspector(f.getFieldObjectInspector()));
}
result=TypeInfoFactory.getStructTypeInfo(fieldNames,fieldTypeInfos);
break;
}
case UNION:
{
UnionObjectInspector uoi=(UnionObjectInspector)oi;
List<TypeInfo> objectTypeInfos=new ArrayList<TypeInfo>();
for (ObjectInspector eoi : uoi.getObjectInspectors()) {
objectTypeInfos.add(getTypeInfoFromObjectInspector(eoi));
}
result=TypeInfoFactory.getUnionTypeInfo(objectTypeInfos);
break;
}
default :
{
throw new RuntimeException("Unknown ObjectInspector category!");
}
}
return result;
}
