{
  Collection<Future<?>> result=super.initializeOp(hconf);
  vrbCtx=new VectorizedRowBatchCtx();
  vrbCtx.init(vOutContext.getScratchColumnTypeMap(),(StructObjectInspector)this.outputObjInspector);
  outputBatch=vrbCtx.createVectorizedRowBatch();
  keyWrapperBatch=VectorHashKeyWrapperBatch.compileKeyWrapperBatch(keyExpressions);
  outputVectorAssigners=new HashMap<ObjectInspector,VectorColumnAssign[]>();
  keyEvaluator=new SMBJoinKeyEvaluator(){
    private List<Object> key;
    public SMBJoinKeyEvaluator init(){
      key=new ArrayList<Object>();
      for (int i=0; i < keyExpressions.length; ++i) {
        key.add(null);
      }
      return this;
    }
    @Override public List<Object> evaluate(    VectorHashKeyWrapper kw) throws HiveException {
      for (int i=0; i < keyExpressions.length; ++i) {
        key.set(i,keyWrapperBatch.getWritableKeyValue(kw,i,keyOutputWriters[i]));
      }
      return key;
    }
  }
.init();
  Map<Byte,List<ExprNodeDesc>> valueExpressions=conf.getExprs();
  List<ExprNodeDesc> bigTableExpressions=valueExpressions.get(posBigTable);
  List<ExprNodeEvaluator> vectorNodeEvaluators=new ArrayList<ExprNodeEvaluator>(bigTableExpressions.size());
  VectorExpressionWriterFactory.processVectorExpressions(bigTableExpressions,new VectorExpressionWriterFactory.ListOIDClosure(){
    @Override public void assign(    VectorExpressionWriter[] writers,    List<ObjectInspector> oids){
      valueWriters=writers;
      joinValuesObjectInspectors[posBigTable]=oids;
    }
  }
);
  for (int i=0; i < bigTableExpressions.size(); ++i) {
    ExprNodeDesc desc=bigTableExpressions.get(i);
    VectorExpression vectorExpr=bigTableValueExpressions[i];
    ExprNodeEvaluator eval=new ExprNodeEvaluator<ExprNodeDesc>(desc){
      int columnIndex;
      int writerIndex;
      public ExprNodeEvaluator initVectorExpr(      int columnIndex,      int writerIndex){
        this.columnIndex=columnIndex;
        this.writerIndex=writerIndex;
        return this;
      }
      @Override public ObjectInspector initialize(      ObjectInspector rowInspector) throws HiveException {
        throw new HiveException("should never reach here");
      }
      @Override protected Object _evaluate(      Object row,      int version) throws HiveException {
        VectorizedRowBatch inBatch=(VectorizedRowBatch)row;
        int rowIndex=inBatch.selectedInUse ? inBatch.selected[batchIndex] : batchIndex;
        return valueWriters[writerIndex].writeValue(inBatch.cols[columnIndex],rowIndex);
      }
    }
.initVectorExpr(vectorExpr.getOutputColumn(),i);
    vectorNodeEvaluators.add(eval);
  }
  joinValues[posBigTable]=vectorNodeEvaluators;
  return result;
}
