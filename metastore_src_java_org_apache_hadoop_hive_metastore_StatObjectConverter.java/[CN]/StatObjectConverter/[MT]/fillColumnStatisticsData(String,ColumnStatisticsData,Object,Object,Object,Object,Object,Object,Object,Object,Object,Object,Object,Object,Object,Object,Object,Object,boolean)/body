{
  colType=colType.toLowerCase();
  if (colType.equals("boolean")) {
    BooleanColumnStatsData boolStats=new BooleanColumnStatsData();
    boolStats.setNumFalses(MetaStoreDirectSql.extractSqlLong(falses));
    boolStats.setNumTrues(MetaStoreDirectSql.extractSqlLong(trues));
    boolStats.setNumNulls(MetaStoreDirectSql.extractSqlLong(nulls));
    data.setBooleanStats(boolStats);
  }
 else   if (colType.equals("string") || colType.startsWith("varchar") || colType.startsWith("char")) {
    StringColumnStatsData stringStats=new StringColumnStatsData();
    stringStats.setNumNulls(MetaStoreDirectSql.extractSqlLong(nulls));
    stringStats.setAvgColLen(MetaStoreDirectSql.extractSqlDouble(avglen));
    stringStats.setMaxColLen(MetaStoreDirectSql.extractSqlLong(maxlen));
    stringStats.setNumDVs(MetaStoreDirectSql.extractSqlLong(dist));
    data.setStringStats(stringStats);
  }
 else   if (colType.equals("binary")) {
    BinaryColumnStatsData binaryStats=new BinaryColumnStatsData();
    binaryStats.setNumNulls(MetaStoreDirectSql.extractSqlLong(nulls));
    binaryStats.setAvgColLen(MetaStoreDirectSql.extractSqlDouble(avglen));
    binaryStats.setMaxColLen(MetaStoreDirectSql.extractSqlLong(maxlen));
    data.setBinaryStats(binaryStats);
  }
 else   if (colType.equals("bigint") || colType.equals("int") || colType.equals("smallint")|| colType.equals("tinyint")|| colType.equals("timestamp")) {
    LongColumnStatsData longStats=new LongColumnStatsData();
    longStats.setNumNulls(MetaStoreDirectSql.extractSqlLong(nulls));
    if (lhigh != null) {
      longStats.setHighValue(MetaStoreDirectSql.extractSqlLong(lhigh));
    }
    if (llow != null) {
      longStats.setLowValue(MetaStoreDirectSql.extractSqlLong(llow));
    }
    long lowerBound=MetaStoreDirectSql.extractSqlLong(dist);
    long higherBound=MetaStoreDirectSql.extractSqlLong(sumDist);
    if (useDensityFunctionForNDVEstimation && lhigh != null && llow != null && avgLong != null && MetaStoreDirectSql.extractSqlDouble(avgLong) != 0.0) {
      long estimation=MetaStoreDirectSql.extractSqlLong((MetaStoreDirectSql.extractSqlLong(lhigh) - MetaStoreDirectSql.extractSqlLong(llow)) / MetaStoreDirectSql.extractSqlDouble(avgLong));
      if (estimation < lowerBound) {
        longStats.setNumDVs(lowerBound);
      }
 else       if (estimation > higherBound) {
        longStats.setNumDVs(higherBound);
      }
 else {
        longStats.setNumDVs(estimation);
      }
    }
 else {
      longStats.setNumDVs(lowerBound);
    }
    data.setLongStats(longStats);
  }
 else   if (colType.equals("double") || colType.equals("float")) {
    DoubleColumnStatsData doubleStats=new DoubleColumnStatsData();
    doubleStats.setNumNulls(MetaStoreDirectSql.extractSqlLong(nulls));
    if (dhigh != null) {
      doubleStats.setHighValue(MetaStoreDirectSql.extractSqlDouble(dhigh));
    }
    if (dlow != null) {
      doubleStats.setLowValue(MetaStoreDirectSql.extractSqlDouble(dlow));
    }
    long lowerBound=MetaStoreDirectSql.extractSqlLong(dist);
    long higherBound=MetaStoreDirectSql.extractSqlLong(sumDist);
    if (useDensityFunctionForNDVEstimation && dhigh != null && dlow != null && avgDouble != null && MetaStoreDirectSql.extractSqlDouble(avgDouble) != 0.0) {
      long estimation=MetaStoreDirectSql.extractSqlLong((MetaStoreDirectSql.extractSqlLong(dhigh) - MetaStoreDirectSql.extractSqlLong(dlow)) / MetaStoreDirectSql.extractSqlDouble(avgDouble));
      if (estimation < lowerBound) {
        doubleStats.setNumDVs(lowerBound);
      }
 else       if (estimation > higherBound) {
        doubleStats.setNumDVs(higherBound);
      }
 else {
        doubleStats.setNumDVs(estimation);
      }
    }
 else {
      doubleStats.setNumDVs(lowerBound);
    }
    data.setDoubleStats(doubleStats);
  }
 else   if (colType.startsWith("decimal")) {
    DecimalColumnStatsData decimalStats=new DecimalColumnStatsData();
    decimalStats.setNumNulls(MetaStoreDirectSql.extractSqlLong(nulls));
    Decimal low=null;
    Decimal high=null;
    BigDecimal blow=null;
    BigDecimal bhigh=null;
    if (dechigh instanceof BigDecimal) {
      bhigh=(BigDecimal)dechigh;
      high=new Decimal(ByteBuffer.wrap(bhigh.unscaledValue().toByteArray()),(short)bhigh.scale());
    }
 else     if (dechigh instanceof String) {
      bhigh=new BigDecimal((String)dechigh);
      high=createThriftDecimal((String)dechigh);
    }
    decimalStats.setHighValue(high);
    if (declow instanceof BigDecimal) {
      blow=(BigDecimal)declow;
      low=new Decimal(ByteBuffer.wrap(blow.unscaledValue().toByteArray()),(short)blow.scale());
    }
 else     if (dechigh instanceof String) {
      blow=new BigDecimal((String)declow);
      low=createThriftDecimal((String)declow);
    }
    decimalStats.setLowValue(low);
    long lowerBound=MetaStoreDirectSql.extractSqlLong(dist);
    long higherBound=MetaStoreDirectSql.extractSqlLong(sumDist);
    if (useDensityFunctionForNDVEstimation && dechigh != null && declow != null && avgDecimal != null && MetaStoreDirectSql.extractSqlDouble(avgDecimal) != 0.0) {
      long estimation=MetaStoreDirectSql.extractSqlLong(MetaStoreDirectSql.extractSqlLong(bhigh.subtract(blow).floatValue() / MetaStoreDirectSql.extractSqlDouble(avgDecimal)));
      if (estimation < lowerBound) {
        decimalStats.setNumDVs(lowerBound);
      }
 else       if (estimation > higherBound) {
        decimalStats.setNumDVs(higherBound);
      }
 else {
        decimalStats.setNumDVs(estimation);
      }
    }
 else {
      decimalStats.setNumDVs(lowerBound);
    }
    data.setDecimalStats(decimalStats);
  }
}
