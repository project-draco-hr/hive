{
  List<Schema.Field> childFields=new ArrayList<Schema.Field>();
  final List<String> allStructFieldNames=((StructTypeInfo)typeInfo).getAllStructFieldNames();
  final List<TypeInfo> allStructFieldTypeInfos=((StructTypeInfo)typeInfo).getAllStructFieldTypeInfos();
  if (allStructFieldNames.size() != allStructFieldTypeInfos.size()) {
    throw new IllegalArgumentException("Failed to generate avro schema from hive schema. " + "name and column type differs. names = " + allStructFieldNames + ", types = "+ allStructFieldTypeInfos);
  }
  for (int i=0; i < allStructFieldNames.size(); ++i) {
    final TypeInfo childTypeInfo=allStructFieldTypeInfos.get(i);
    final Schema.Field grandChildSchemaField=createAvroField(allStructFieldNames.get(i),childTypeInfo,childTypeInfo.toString());
    final List<Schema.Field> grandChildFields=getFields(grandChildSchemaField);
    childFields.addAll(grandChildFields);
  }
  Schema recordSchema=Schema.createRecord("record_" + recordCounter,typeInfo.toString(),null,false);
  ++recordCounter;
  recordSchema.setFields(childFields);
  return recordSchema;
}
