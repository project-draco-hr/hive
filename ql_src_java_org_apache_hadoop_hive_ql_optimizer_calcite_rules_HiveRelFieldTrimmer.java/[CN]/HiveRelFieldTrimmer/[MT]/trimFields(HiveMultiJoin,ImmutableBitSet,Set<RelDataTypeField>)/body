{
  final int fieldCount=join.getRowType().getFieldCount();
  final RexNode conditionExpr=join.getCondition();
  final List<RexNode> joinFilters=join.getJoinFilters();
  final Set<RelDataTypeField> combinedInputExtraFields=new LinkedHashSet<RelDataTypeField>(extraFields);
  RelOptUtil.InputFinder inputFinder=new RelOptUtil.InputFinder(combinedInputExtraFields);
  inputFinder.inputBitSet.addAll(fieldsUsed);
  conditionExpr.accept(inputFinder);
  final ImmutableBitSet fieldsUsedPlus=inputFinder.inputBitSet.build();
  int inputStartPos=0;
  int changeCount=0;
  int newFieldCount=0;
  List<RelNode> newInputs=new ArrayList<RelNode>();
  List<Mapping> inputMappings=new ArrayList<Mapping>();
  for (  RelNode input : join.getInputs()) {
    final RelDataType inputRowType=input.getRowType();
    final int inputFieldCount=inputRowType.getFieldCount();
    ImmutableBitSet.Builder inputFieldsUsed=ImmutableBitSet.builder();
    for (    int bit : fieldsUsedPlus) {
      if (bit >= inputStartPos && bit < inputStartPos + inputFieldCount) {
        inputFieldsUsed.set(bit - inputStartPos);
      }
    }
    Set<RelDataTypeField> inputExtraFields=Collections.<RelDataTypeField>emptySet();
    TrimResult trimResult=trimChild(join,input,inputFieldsUsed.build(),inputExtraFields);
    newInputs.add(trimResult.left);
    if (trimResult.left != input) {
      ++changeCount;
    }
    final Mapping inputMapping=trimResult.right;
    inputMappings.add(inputMapping);
    inputStartPos+=inputFieldCount;
    newFieldCount+=inputMapping.getTargetCount();
  }
  Mapping mapping=Mappings.create(MappingType.INVERSE_SURJECTION,fieldCount,newFieldCount);
  int offset=0;
  int newOffset=0;
  for (int i=0; i < inputMappings.size(); i++) {
    Mapping inputMapping=inputMappings.get(i);
    for (    IntPair pair : inputMapping) {
      mapping.set(pair.source + offset,pair.target + newOffset);
    }
    offset+=inputMapping.getSourceCount();
    newOffset+=inputMapping.getTargetCount();
  }
  if (changeCount == 0 && mapping.isIdentity()) {
    return new TrimResult(join,Mappings.createIdentity(fieldCount));
  }
  final RexVisitor<RexNode> shuttle=new RexPermuteInputsShuttle(mapping,newInputs.toArray(new RelNode[newInputs.size()]));
  RexNode newConditionExpr=conditionExpr.accept(shuttle);
  List<RexNode> newJoinFilters=Lists.newArrayList();
  for (  RexNode joinFilter : joinFilters) {
    newJoinFilters.add(joinFilter.accept(shuttle));
  }
  final RelDataType newRowType=RelOptUtil.permute(join.getCluster().getTypeFactory(),join.getRowType(),mapping);
  final RelNode newJoin=new HiveMultiJoin(join.getCluster(),newInputs,newConditionExpr,newRowType,join.getJoinInputs(),join.getJoinTypes(),newJoinFilters);
  return new TrimResult(newJoin,mapping);
}
