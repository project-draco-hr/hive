{
  AccumuloHiveRow row=new AccumuloHiveRow("row");
  row.add(new Text("cf1"),new Text(toBytes(1)),toBytes(2));
  row.add(new Text("cf1"),new Text(toBytes(2)),toBytes(4));
  row.add(new Text("cf1"),new Text(toBytes(3)),toBytes(6));
  HiveAccumuloMapColumnMapping mapping=new HiveAccumuloMapColumnMapping("cf1",null,ColumnEncoding.BINARY,ColumnEncoding.BINARY,"column",TypeInfoFactory.getMapTypeInfo(TypeInfoFactory.intTypeInfo,TypeInfoFactory.intTypeInfo).toString());
  Text nullSequence=new Text("\\N");
  ObjectInspector oi=LazyFactory.createLazyObjectInspector(TypeInfoUtils.getTypeInfosFromTypeString("map<int,int>").get(0),new byte[]{(byte)1,(byte)2},0,nullSequence,false,(byte)0);
  LazyAccumuloMap map=new LazyAccumuloMap((LazyMapObjectInspector)oi);
  map.init(row,mapping);
  Assert.assertEquals(3,map.getMapSize());
  Object o=map.getMapValueElement(new IntWritable(1));
  Assert.assertNotNull(o);
  Assert.assertEquals(new IntWritable(2),((LazyInteger)o).getWritableObject());
  o=map.getMapValueElement(new IntWritable(2));
  Assert.assertNotNull(o);
  Assert.assertEquals(new IntWritable(4),((LazyInteger)o).getWritableObject());
  o=map.getMapValueElement(new IntWritable(3));
  Assert.assertNotNull(o);
  Assert.assertEquals(new IntWritable(6),((LazyInteger)o).getWritableObject());
}
