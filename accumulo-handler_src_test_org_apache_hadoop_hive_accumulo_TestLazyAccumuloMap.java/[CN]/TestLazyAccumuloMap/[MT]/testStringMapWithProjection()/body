{
  AccumuloHiveRow row=new AccumuloHiveRow("row");
  row.add("cf1","foo","bar".getBytes());
  row.add("cf1","bar","foo".getBytes());
  row.add("cf2","foo1","bar1".getBytes());
  row.add("cf3","bar1","foo1".getBytes());
  HiveAccumuloMapColumnMapping mapping=new HiveAccumuloMapColumnMapping("cf1",null,ColumnEncoding.STRING,ColumnEncoding.STRING,"column",TypeInfoFactory.getMapTypeInfo(TypeInfoFactory.stringTypeInfo,TypeInfoFactory.stringTypeInfo).toString());
  Text nullSequence=new Text("\\N");
  ObjectInspector oi=LazyFactory.createLazyObjectInspector(TypeInfoUtils.getTypeInfosFromTypeString("map<string,string>").get(0),new byte[]{(byte)1,(byte)2},0,nullSequence,false,(byte)0);
  LazyAccumuloMap map=new LazyAccumuloMap((LazyMapObjectInspector)oi);
  map.init(row,mapping);
  Assert.assertEquals(2,map.getMapSize());
  Object o=map.getMapValueElement(new Text("foo"));
  Assert.assertNotNull(o);
  Assert.assertEquals(new Text("bar"),((LazyString)o).getWritableObject());
  o=map.getMapValueElement(new Text("bar"));
  Assert.assertNotNull(o);
  Assert.assertEquals(new Text("foo"),((LazyString)o).getWritableObject());
}
