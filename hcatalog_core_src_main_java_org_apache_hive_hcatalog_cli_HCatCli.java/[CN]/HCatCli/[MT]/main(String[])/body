{
  try {
    LogUtils.initHiveLog4j();
  }
 catch (  LogInitializationException e) {
  }
  CliSessionState ss=new CliSessionState(new HiveConf(SessionState.class));
  ss.in=System.in;
  try {
    ss.out=new PrintStream(System.out,true,"UTF-8");
    ss.err=new PrintStream(System.err,true,"UTF-8");
  }
 catch (  UnsupportedEncodingException e) {
    System.exit(1);
  }
  HiveConf conf=ss.getConf();
  HiveConf.setVar(conf,ConfVars.SEMANTIC_ANALYZER_HOOK,HCatSemanticAnalyzer.class.getName());
  Options options=new Options();
  options.addOption(OptionBuilder.hasArg().withArgName("exec").withDescription("hcat command given from command line").create('e'));
  options.addOption(OptionBuilder.hasArg().withArgName("file").withDescription("hcat commands in file").create('f'));
  options.addOption(OptionBuilder.hasArg().withArgName("group").withDescription("group for the db/table specified in CREATE statement").create('g'));
  options.addOption(OptionBuilder.hasArg().withArgName("perms").withDescription("permissions for the db/table specified in CREATE statement").create('p'));
  options.addOption(OptionBuilder.hasArgs(2).withArgName("property=value").withValueSeparator().withDescription("use hadoop value for given property").create('D'));
  options.addOption(new Option("h","help",false,"Print help information"));
  Parser parser=new GnuParser();
  CommandLine cmdLine=null;
  try {
    cmdLine=parser.parse(options,args);
  }
 catch (  ParseException e) {
    printUsage(options,System.err);
    System.exit(1);
  }
  setConfProperties(conf,cmdLine.getOptionProperties("D"));
  SessionState.start(ss);
  if (cmdLine.hasOption('h')) {
    printUsage(options,ss.out);
    System.exit(0);
  }
  String execString=(String)cmdLine.getOptionValue('e');
  String fileName=(String)cmdLine.getOptionValue('f');
  if (execString != null && fileName != null) {
    ss.err.println("The '-e' and '-f' options cannot be specified simultaneously");
    printUsage(options,ss.err);
    System.exit(1);
  }
  String perms=(String)cmdLine.getOptionValue('p');
  if (perms != null) {
    validatePermissions(ss,conf,perms);
  }
  String grp=(String)cmdLine.getOptionValue('g');
  if (grp != null) {
    conf.set(HCatConstants.HCAT_GROUP,grp);
  }
  if (execString != null) {
    System.exit(processLine(execString));
  }
  try {
    if (fileName != null) {
      System.exit(processFile(fileName));
    }
  }
 catch (  FileNotFoundException e) {
    ss.err.println("Input file not found. (" + e.getMessage() + ")");
    System.exit(1);
  }
catch (  IOException e) {
    ss.err.println("Could not open input file for reading. (" + e.getMessage() + ")");
    System.exit(1);
  }
  printUsage(options,ss.err);
  System.exit(1);
}
