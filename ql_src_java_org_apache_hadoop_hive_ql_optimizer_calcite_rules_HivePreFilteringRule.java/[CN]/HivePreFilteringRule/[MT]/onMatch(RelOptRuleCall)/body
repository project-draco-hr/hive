{
  final Filter filter=call.rel(0);
  HiveRulesRegistry registry=call.getPlanner().getContext().unwrap(HiveRulesRegistry.class);
  if (registry != null) {
    registry.registerVisited(this,filter);
  }
  final RexBuilder rexBuilder=filter.getCluster().getRexBuilder();
  RexNode topFilterCondition=RexUtil.pullFactors(rexBuilder,filter.getCondition());
  List<RexNode> operandsToPushDown=new ArrayList<>();
  List<RexNode> deterministicExprs=new ArrayList<>();
  List<RexNode> nonDeterministicExprs=new ArrayList<>();
switch (topFilterCondition.getKind()) {
case AND:
    ImmutableList<RexNode> operands=RexUtil.flattenAnd(((RexCall)topFilterCondition).getOperands());
  Set<String> operandsToPushDownDigest=new HashSet<String>();
List<RexNode> extractedCommonOperands=null;
for (RexNode operand : operands) {
if (operand.getKind() == SqlKind.OR) {
  extractedCommonOperands=extractCommonOperands(rexBuilder,operand,maxCNFNodeCount);
  for (  RexNode extractedExpr : extractedCommonOperands) {
    if (operandsToPushDownDigest.add(extractedExpr.toString())) {
      operandsToPushDown.add(extractedExpr);
    }
  }
}
if (HiveCalciteUtil.isDeterministic(operand)) {
  deterministicExprs.add(operand);
}
 else {
  nonDeterministicExprs.add(operand);
}
}
if (nonDeterministicExprs.size() > 0) {
for (RexNode expr : deterministicExprs) {
if (!operandsToPushDownDigest.contains(expr.toString())) {
  operandsToPushDown.add(expr);
  operandsToPushDownDigest.add(expr.toString());
}
}
topFilterCondition=RexUtil.pullFactors(rexBuilder,RexUtil.composeConjunction(rexBuilder,nonDeterministicExprs,false));
}
break;
case OR:
operandsToPushDown=extractCommonOperands(rexBuilder,topFilterCondition,maxCNFNodeCount);
break;
default :
return;
}
if (operandsToPushDown.isEmpty()) {
return;
}
final List<RexNode> newConjuncts=HiveCalciteUtil.getPredsNotPushedAlready(filter.getInput(),operandsToPushDown);
RexNode newPredicate=RexUtil.composeConjunction(rexBuilder,newConjuncts,false);
if (newPredicate.isAlwaysTrue()) {
return;
}
final RexNode newChildFilterCondition=RexUtil.pullFactors(rexBuilder,newPredicate);
RelNode newChildFilter=filterFactory.createFilter(filter.getInput(),newChildFilterCondition);
RelNode newTopFilter=filterFactory.createFilter(newChildFilter,topFilterCondition);
if (registry != null) {
registry.registerVisited(this,newChildFilter);
registry.registerVisited(this,newTopFilter);
}
call.transformTo(newTopFilter);
}
