{
  if (cvList == null) {
    throw new HiveException("Null columnvector list");
  }
  if (oi == null) {
    return;
  }
  final List<? extends StructField> fields=oi.getAllStructFieldRefs();
  for (  StructField field : fields) {
    ObjectInspector fieldObjectInspector=field.getFieldObjectInspector();
switch (fieldObjectInspector.getCategory()) {
case PRIMITIVE:
      PrimitiveObjectInspector poi=(PrimitiveObjectInspector)fieldObjectInspector;
switch (poi.getPrimitiveCategory()) {
case BOOLEAN:
case BYTE:
case SHORT:
case INT:
case LONG:
case TIMESTAMP:
case DATE:
      cvList.add(new LongColumnVector(VectorizedRowBatch.DEFAULT_SIZE));
    break;
case FLOAT:
case DOUBLE:
  cvList.add(new DoubleColumnVector(VectorizedRowBatch.DEFAULT_SIZE));
break;
case STRING:
cvList.add(new BytesColumnVector(VectorizedRowBatch.DEFAULT_SIZE));
break;
case DECIMAL:
DecimalTypeInfo tInfo=(DecimalTypeInfo)poi.getTypeInfo();
cvList.add(new DecimalColumnVector(VectorizedRowBatch.DEFAULT_SIZE,tInfo.precision(),tInfo.scale()));
break;
default :
throw new HiveException("Vectorizaton is not supported for datatype:" + poi.getPrimitiveCategory());
}
break;
case STRUCT:
throw new HiveException("Struct not supported");
default :
throw new HiveException("Flattening is not supported for datatype:" + fieldObjectInspector.getCategory());
}
}
}
