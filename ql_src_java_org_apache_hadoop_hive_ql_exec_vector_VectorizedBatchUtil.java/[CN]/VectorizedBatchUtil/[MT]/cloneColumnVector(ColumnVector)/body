{
  if (source instanceof LongColumnVector) {
    return new LongColumnVector(((LongColumnVector)source).vector.length);
  }
 else   if (source instanceof DoubleColumnVector) {
    return new DoubleColumnVector(((DoubleColumnVector)source).vector.length);
  }
 else   if (source instanceof BytesColumnVector) {
    return new BytesColumnVector(((BytesColumnVector)source).vector.length);
  }
 else   if (source instanceof DecimalColumnVector) {
    DecimalColumnVector decColVector=(DecimalColumnVector)source;
    return new DecimalColumnVector(decColVector.vector.length,decColVector.precision,decColVector.scale);
  }
 else   if (source instanceof ListColumnVector) {
    ListColumnVector src=(ListColumnVector)source;
    ColumnVector child=cloneColumnVector(src.child);
    return new ListColumnVector(src.offsets.length,child);
  }
 else   if (source instanceof MapColumnVector) {
    MapColumnVector src=(MapColumnVector)source;
    ColumnVector keys=cloneColumnVector(src.keys);
    ColumnVector values=cloneColumnVector(src.values);
    return new MapColumnVector(src.offsets.length,keys,values);
  }
 else   if (source instanceof StructColumnVector) {
    StructColumnVector src=(StructColumnVector)source;
    ColumnVector[] copy=new ColumnVector[src.fields.length];
    for (int i=0; i < copy.length; ++i) {
      copy[i]=cloneColumnVector(src.fields[i]);
    }
    return new StructColumnVector(VectorizedRowBatch.DEFAULT_SIZE,copy);
  }
 else   if (source instanceof UnionColumnVector) {
    UnionColumnVector src=(UnionColumnVector)source;
    ColumnVector[] copy=new ColumnVector[src.fields.length];
    for (int i=0; i < copy.length; ++i) {
      copy[i]=cloneColumnVector(src.fields[i]);
    }
    return new UnionColumnVector(src.tags.length,copy);
  }
 else   throw new HiveException("Column vector class " + source.getClass().getName() + " is not supported!");
}
