{
  StringBuffer sb=new StringBuffer();
  sb.append(prefix + " row " + index+ " ");
  for (int i=0; i < batch.projectionSize; i++) {
    int column=batch.projectedColumns[i];
    ColumnVector colVector=batch.cols[column];
    if (colVector == null) {
      sb.append("(null colVector " + column + ")");
    }
 else {
      boolean isRepeating=colVector.isRepeating;
      index=(isRepeating ? 0 : index);
      if (colVector.noNulls || !colVector.isNull[index]) {
        if (colVector instanceof LongColumnVector) {
          sb.append(((LongColumnVector)colVector).vector[index]);
        }
 else         if (colVector instanceof DoubleColumnVector) {
          sb.append(((DoubleColumnVector)colVector).vector[index]);
        }
 else         if (colVector instanceof BytesColumnVector) {
          BytesColumnVector bytesColumnVector=(BytesColumnVector)colVector;
          byte[] bytes=bytesColumnVector.vector[index];
          int start=bytesColumnVector.start[index];
          int length=bytesColumnVector.length[index];
          if (bytes == null) {
            sb.append("(Unexpected null bytes with start " + start + " length "+ length+ ")");
          }
 else {
            sb.append(displayBytes(bytes,start,length));
          }
        }
 else         if (colVector instanceof DecimalColumnVector) {
          sb.append(((DecimalColumnVector)colVector).vector[index].toString());
        }
 else {
          sb.append("Unknown");
        }
      }
 else {
        sb.append("NULL");
      }
    }
    sb.append(" ");
  }
  System.out.println(sb.toString());
}
