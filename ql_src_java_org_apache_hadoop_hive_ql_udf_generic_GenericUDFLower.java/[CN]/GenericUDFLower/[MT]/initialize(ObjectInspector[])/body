{
  if (arguments.length < 0) {
    throw new UDFArgumentLengthException("LOWER requires 1 argument, got " + arguments.length);
  }
  if (arguments[0].getCategory() != Category.PRIMITIVE) {
    throw new UDFArgumentException("LOWER only takes primitive types, got " + argumentOI.getTypeName());
  }
  argumentOI=(PrimitiveObjectInspector)arguments[0];
  stringConverter=new PrimitiveObjectInspectorConverter.StringConverter(argumentOI);
  PrimitiveCategory inputType=argumentOI.getPrimitiveCategory();
  ObjectInspector outputOI=null;
switch (inputType) {
case VARCHAR:
    returnType=inputType;
  VarcharTypeInfo typeInfo=TypeInfoFactory.getVarcharTypeInfo(GenericUDFUtils.StringHelper.getFixedStringSizeForType(argumentOI));
outputOI=PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(typeInfo);
break;
default :
returnType=PrimitiveCategory.STRING;
outputOI=PrimitiveObjectInspectorFactory.writableStringObjectInspector;
break;
}
returnHelper=new GenericUDFUtils.StringHelper(returnType);
return outputOI;
}
