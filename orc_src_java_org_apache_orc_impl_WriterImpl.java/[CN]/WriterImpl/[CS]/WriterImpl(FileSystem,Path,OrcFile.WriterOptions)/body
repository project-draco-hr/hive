{
  this.fs=fs;
  this.path=path;
  this.conf=opts.getConfiguration();
  this.callback=opts.getCallback();
  this.schema=opts.getSchema();
  if (callback != null) {
    callbackContext=new OrcFile.WriterContext(){
      @Override public Writer getWriter(){
        return WriterImpl.this;
      }
    }
;
  }
 else {
    callbackContext=null;
  }
  this.adjustedStripeSize=opts.getStripeSize();
  this.defaultStripeSize=opts.getStripeSize();
  this.version=opts.getVersion();
  this.encodingStrategy=opts.getEncodingStrategy();
  this.compressionStrategy=opts.getCompressionStrategy();
  this.addBlockPadding=opts.getBlockPadding();
  this.blockSize=opts.getBlockSize();
  this.paddingTolerance=opts.getPaddingTolerance();
  this.compress=opts.getCompress();
  this.rowIndexStride=opts.getRowIndexStride();
  this.memoryManager=opts.getMemoryManager();
  buildIndex=rowIndexStride > 0;
  codec=createCodec(compress);
  int numColumns=schema.getMaximumId() + 1;
  if (opts.isEnforceBufferSize()) {
    this.bufferSize=opts.getBufferSize();
  }
 else {
    this.bufferSize=getEstimatedBufferSize(defaultStripeSize,numColumns,opts.getBufferSize());
  }
  if (version == OrcFile.Version.V_0_11) {
    this.bloomFilterColumns=new boolean[schema.getMaximumId() + 1];
  }
 else {
    this.bloomFilterColumns=OrcUtils.includeColumns(opts.getBloomFilterColumns(),schema);
  }
  this.bloomFilterFpp=opts.getBloomFilterFpp();
  treeWriter=createTreeWriter(schema,streamFactory,false);
  if (buildIndex && rowIndexStride < MIN_ROW_INDEX_STRIDE) {
    throw new IllegalArgumentException("Row stride must be at least " + MIN_ROW_INDEX_STRIDE);
  }
  memoryManager.addWriter(path,opts.getStripeSize(),this);
  LOG.info("ORC writer created for path: {} with stripeSize: {} blockSize: {}" + " compression: {} bufferSize: {}",path,defaultStripeSize,blockSize,compress,bufferSize);
}
