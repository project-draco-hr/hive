{
  super.writeBatch(vector,offset,length);
  BytesColumnVector vec=(BytesColumnVector)vector;
  if (vector.isRepeating) {
    if (vector.noNulls || !vector.isNull[0]) {
      int itemLength=Math.min(vec.length[0],maxLength);
      if (useDictionaryEncoding) {
        int id=dictionary.add(vec.vector[0],vec.start[0],itemLength);
        for (int i=0; i < length; ++i) {
          rows.add(id);
        }
      }
 else {
        for (int i=0; i < length; ++i) {
          directStreamOutput.write(vec.vector[0],vec.start[0],itemLength);
          directLengthOutput.write(itemLength);
        }
      }
      indexStatistics.updateString(vec.vector[0],vec.start[0],itemLength,length);
      if (createBloomFilter) {
        bloomFilter.addBytes(vec.vector[0],vec.start[0],itemLength);
      }
    }
  }
 else {
    for (int i=0; i < length; ++i) {
      if (vec.noNulls || !vec.isNull[i + offset]) {
        int itemLength=Math.min(vec.length[offset + i],maxLength);
        if (useDictionaryEncoding) {
          rows.add(dictionary.add(vec.vector[offset + i],vec.start[offset + i],itemLength));
        }
 else {
          directStreamOutput.write(vec.vector[offset + i],vec.start[offset + i],itemLength);
          directLengthOutput.write(itemLength);
        }
        indexStatistics.updateString(vec.vector[offset + i],vec.start[offset + i],itemLength,1);
        if (createBloomFilter) {
          bloomFilter.addBytes(vec.vector[offset + i],vec.start[offset + i],itemLength);
        }
      }
    }
  }
}
