{
  super.writeBatch(vector,offset,length);
  BytesColumnVector vec=(BytesColumnVector)vector;
  if (vector.isRepeating) {
    if (vector.noNulls || !vector.isNull[0]) {
      byte[] ptr;
      int ptrOffset;
      if (vec.length[0] >= itemLength) {
        ptr=vec.vector[0];
        ptrOffset=vec.start[0];
      }
 else {
        ptr=padding;
        ptrOffset=0;
        System.arraycopy(vec.vector[0],vec.start[0],ptr,0,vec.length[0]);
        Arrays.fill(ptr,vec.length[0],itemLength,(byte)' ');
      }
      if (useDictionaryEncoding) {
        int id=dictionary.add(ptr,ptrOffset,itemLength);
        for (int i=0; i < length; ++i) {
          rows.add(id);
        }
      }
 else {
        for (int i=0; i < length; ++i) {
          directStreamOutput.write(ptr,ptrOffset,itemLength);
          directLengthOutput.write(itemLength);
        }
      }
      indexStatistics.updateString(ptr,ptrOffset,itemLength,length);
      if (createBloomFilter) {
        bloomFilter.addBytes(ptr,ptrOffset,itemLength);
      }
    }
  }
 else {
    for (int i=0; i < length; ++i) {
      if (vec.noNulls || !vec.isNull[i + offset]) {
        byte[] ptr;
        int ptrOffset;
        if (vec.length[offset + i] >= itemLength) {
          ptr=vec.vector[offset + i];
          ptrOffset=vec.start[offset + i];
        }
 else {
          ptr=padding;
          ptrOffset=0;
          System.arraycopy(vec.vector[offset + i],vec.start[offset + i],ptr,0,vec.length[offset + i]);
          Arrays.fill(ptr,vec.length[offset + i],itemLength,(byte)' ');
        }
        if (useDictionaryEncoding) {
          rows.add(dictionary.add(ptr,ptrOffset,itemLength));
        }
 else {
          directStreamOutput.write(ptr,ptrOffset,itemLength);
          directLengthOutput.write(itemLength);
        }
        indexStatistics.updateString(ptr,ptrOffset,itemLength,1);
        if (createBloomFilter) {
          bloomFilter.addBytes(ptr,ptrOffset,itemLength);
        }
      }
    }
  }
}
