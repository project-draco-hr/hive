{
  super.writeBatch(vector,offset,length);
  UnionColumnVector vec=(UnionColumnVector)vector;
  if (vector.isRepeating) {
    if (vector.noNulls || !vector.isNull[0]) {
      byte tag=(byte)vec.tags[0];
      for (int i=0; i < length; ++i) {
        tags.write(tag);
      }
      if (createBloomFilter) {
        bloomFilter.addLong(tag);
      }
      childrenWriters[tag].writeBatch(vec.fields[tag],offset,length);
    }
  }
 else {
    int[] currentStart=new int[vec.fields.length];
    int[] currentLength=new int[vec.fields.length];
    for (int i=0; i < length; ++i) {
      if (vec.noNulls || !vec.isNull[i + offset]) {
        byte tag=(byte)vec.tags[offset + i];
        tags.write(tag);
        if (currentLength[tag] == 0) {
          currentStart[tag]=i + offset;
          currentLength[tag]=1;
        }
 else         if (currentStart[tag] + currentLength[tag] == i + offset) {
          currentLength[tag]+=1;
        }
 else {
          childrenWriters[tag].writeBatch(vec.fields[tag],currentStart[tag],currentLength[tag]);
          currentStart[tag]=i + offset;
          currentLength[tag]=1;
        }
      }
    }
    for (int tag=0; tag < currentStart.length; ++tag) {
      if (currentLength[tag] != 0) {
        childrenWriters[tag].writeBatch(vec.fields[tag],currentStart[tag],currentLength[tag]);
      }
    }
  }
}
