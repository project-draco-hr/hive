{
  long total=0;
  long numVals=child.fileStatistics.getNumberOfValues();
switch (schema.getCategory()) {
case BOOLEAN:
case BYTE:
case SHORT:
case INT:
case FLOAT:
    return numVals * JavaDataModel.get().primitive1();
case LONG:
case DOUBLE:
  return numVals * JavaDataModel.get().primitive2();
case STRING:
case VARCHAR:
case CHAR:
StringColumnStatistics scs=(StringColumnStatistics)child.fileStatistics;
numVals=numVals == 0 ? 1 : numVals;
int avgStringLen=(int)(scs.getSum() / numVals);
return numVals * JavaDataModel.get().lengthForStringOfLength(avgStringLen);
case DECIMAL:
return numVals * JavaDataModel.get().lengthOfDecimal();
case DATE:
return numVals * JavaDataModel.get().lengthOfDate();
case BINARY:
BinaryColumnStatistics bcs=(BinaryColumnStatistics)child.fileStatistics;
return bcs.getSum();
case TIMESTAMP:
return numVals * JavaDataModel.get().lengthOfTimestamp();
case LIST:
case MAP:
case UNION:
case STRUCT:
{
TreeWriter[] childWriters=child.getChildrenWriters();
List<TypeDescription> childTypes=schema.getChildren();
for (int i=0; i < childWriters.length; ++i) {
total+=getRawDataSize(childWriters[i],childTypes.get(i));
}
break;
}
default :
LOG.debug("Unknown object inspector category.");
break;
}
return total;
}
