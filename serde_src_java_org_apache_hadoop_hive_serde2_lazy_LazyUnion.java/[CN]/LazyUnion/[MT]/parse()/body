{
  byte separator=oi.getSeparator();
  boolean isEscaped=oi.isEscaped();
  byte escapeChar=oi.getEscapeChar();
  boolean tagStarted=false;
  boolean tagParsed=false;
  int tagStart=-1;
  int tagEnd=-1;
  int unionByteEnd=start + length;
  int fieldByteEnd=start;
  byte[] bytes=this.bytes.getData();
  while (fieldByteEnd < unionByteEnd) {
    if (bytes[fieldByteEnd] != separator) {
      if (isEscaped && bytes[fieldByteEnd] == escapeChar && fieldByteEnd + 1 < unionByteEnd) {
        fieldByteEnd+=1;
      }
 else {
        if (!tagStarted) {
          tagStart=fieldByteEnd;
          tagStarted=true;
        }
      }
    }
 else {
      if (!tagParsed) {
        tagEnd=fieldByteEnd - 1;
        startPosition=fieldByteEnd + 1;
        tagParsed=true;
      }
    }
    fieldByteEnd++;
  }
  tag=LazyByte.parseByte(bytes,tagStart,(tagEnd - tagStart) + 1);
  field=LazyFactory.createLazyObject(oi.getObjectInspectors().get(tag));
  fieldInited=false;
  parsed=true;
}
