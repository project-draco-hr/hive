{
  buildRoleCache();
  LOG.debug("Building role map for " + userName);
  Set<String> rolesToAdd=new HashSet<>();
  Set<String> rolesToCheckNext=new HashSet<>();
  for (  Map.Entry<String,HbaseMetastoreProto.RoleGrantInfoList> e : roleCache.entrySet()) {
    for (    HbaseMetastoreProto.RoleGrantInfo grantInfo : e.getValue().getGrantInfoList()) {
      if (HBaseUtils.convertPrincipalTypes(grantInfo.getPrincipalType()) == PrincipalType.USER && userName.equals(grantInfo.getPrincipalName())) {
        rolesToAdd.add(e.getKey());
        rolesToCheckNext.add(e.getKey());
        LOG.debug("Adding " + e.getKey() + " to list of roles user is in directly");
        break;
      }
    }
  }
  while (rolesToCheckNext.size() > 0) {
    Set<String> tmpRolesToCheckNext=new HashSet<>();
    for (    String roleName : rolesToCheckNext) {
      HbaseMetastoreProto.RoleGrantInfoList grantInfos=roleCache.get(roleName);
      if (grantInfos == null)       continue;
      for (      HbaseMetastoreProto.RoleGrantInfo grantInfo : grantInfos.getGrantInfoList()) {
        if (HBaseUtils.convertPrincipalTypes(grantInfo.getPrincipalType()) == PrincipalType.ROLE && rolesToAdd.add(grantInfo.getPrincipalName())) {
          tmpRolesToCheckNext.add(grantInfo.getPrincipalName());
          LOG.debug("Adding " + grantInfo.getPrincipalName() + " to list of roles user is in indirectly");
        }
      }
    }
    rolesToCheckNext=tmpRolesToCheckNext;
  }
  byte[] key=HBaseUtils.buildKey(userName);
  byte[] serialized=HBaseUtils.serializeRoleList(new ArrayList<>(rolesToAdd));
  store(USER_TO_ROLE_TABLE,key,CATALOG_CF,CATALOG_COL,serialized);
}
