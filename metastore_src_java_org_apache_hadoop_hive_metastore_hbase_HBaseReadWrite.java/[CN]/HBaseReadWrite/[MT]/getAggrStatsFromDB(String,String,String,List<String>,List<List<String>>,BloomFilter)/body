{
  ColumnStatisticsObj colStatsAggr=new ColumnStatisticsObj();
  boolean colStatsAggrInited=false;
  ColumnStatsAggregator colStatsAggregator=null;
  List<Get> gets=new ArrayList<Get>();
  byte[] colKey=HBaseUtils.buildKey(colName);
  for (int pOff=0; pOff < partNames.size(); pOff++) {
    byte[] partKey=HBaseUtils.buildPartitionKey(dbName,tblName,partVals.get(pOff));
    Get get=new Get(partKey);
    get.addColumn(STATS_CF,colKey);
    gets.add(get);
  }
  HTableInterface htab=conn.getHBaseTable(PART_TABLE);
  Result[] results=htab.get(gets);
  for (int pOff=0; pOff < partNames.size(); pOff++) {
    if (results[pOff].isEmpty()) {
      continue;
    }
    byte[] serializedColStats=results[pOff].getValue(STATS_CF,colKey);
    if (serializedColStats == null) {
      continue;
    }
    ColumnStatisticsObj colStats=HBaseUtils.deserializeStatsForOneColumn(null,serializedColStats);
    if (!colStatsAggrInited) {
      colStatsAggr.setColName(colName);
      colStatsAggr.setColType(colStats.getColType());
      colStatsAggr.setStatsData(colStats.getStatsData());
      colStatsAggregator=ColumnStatsAggregatorFactory.getColumnStatsAggregator(colStats.getStatsData().getSetField());
      colStatsAggrInited=true;
    }
 else {
      colStatsAggregator.aggregate(colStatsAggr,colStats);
    }
    if (bloomFilter != null) {
      bloomFilter.add(partNames.get(pOff).getBytes());
    }
  }
  return colStatsAggr;
}
