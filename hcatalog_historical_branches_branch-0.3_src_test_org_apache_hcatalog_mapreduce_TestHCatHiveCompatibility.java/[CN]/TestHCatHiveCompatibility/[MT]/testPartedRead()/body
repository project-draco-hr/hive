{
  driver.run("drop table junit_parted_noisd");
  String createTable="create table junit_parted_noisd(a int) partitioned by (b string) stored as RCFILE";
  int retCode=driver.run(createTable).getResponseCode();
  if (retCode != 0) {
    throw new IOException("Failed to create table.");
  }
  Table table=client.getTable("default","junit_parted_noisd");
  assertFalse(table.getParameters().containsKey(HCatConstants.HCAT_ISD_CLASS));
  assertTrue(table.getSd().getInputFormat().equals(HCatConstants.HIVE_RCFILE_IF_CLASS));
  PigServer server=new PigServer(ExecType.LOCAL,props);
  UDFContext.getUDFContext().setClientSystemProps();
  server.registerQuery("A = load '" + fullFileName + "' as (a:int);");
  server.registerQuery("store A into 'default.junit_parted_noisd' using org.apache.hcatalog.pig.HCatStorer('b=42');");
  server.registerQuery("B = load 'default.junit_parted_noisd' using " + HCatLoader.class.getName() + "();");
  Iterator<Tuple> itr=server.openIterator("B");
  int i=0;
  while (itr.hasNext()) {
    Tuple t=itr.next();
    assertEquals(2,t.size());
    assertEquals(t.get(0),i);
    assertEquals(t.get(1),"42");
    i++;
  }
  assertFalse(itr.hasNext());
  assertEquals(11,i);
  Table table2=client.getTable("default","junit_parted_noisd");
  assertFalse(table2.getParameters().containsKey(HCatConstants.HCAT_ISD_CLASS));
  assertTrue(table2.getSd().getInputFormat().equals(HCatConstants.HIVE_RCFILE_IF_CLASS));
  Partition ptn=client.getPartition("default","junit_parted_noisd",Arrays.asList("42"));
  assertNotNull(ptn);
  assertTrue(ptn.getParameters().containsKey(HCatConstants.HCAT_ISD_CLASS));
  assertTrue(ptn.getSd().getInputFormat().equals(HCatConstants.HIVE_RCFILE_IF_CLASS));
  driver.run("drop table junit_unparted_noisd");
}
