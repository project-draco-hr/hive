{
  Map<String,Long> results=new LinkedHashMap<String,Long>();
  results.put(EXECUTOR_DESERIALIZE_TIME,allMetrics.executorDeserializeTime);
  results.put(EXECUTOR_RUN_TIME,allMetrics.executorRunTime);
  results.put(RESULT_SIZE,allMetrics.resultSize);
  results.put(JVM_GC_TIME,allMetrics.jvmGCTime);
  results.put(RESULT_SERIALIZATION_TIME,allMetrics.resultSerializationTime);
  results.put(MEMORY_BYTES_SPLIED,allMetrics.memoryBytesSpilled);
  results.put(DISK_BYTES_SPLIED,allMetrics.diskBytesSpilled);
  if (allMetrics.inputMetrics != null) {
    results.put(BYTES_READ,allMetrics.inputMetrics.bytesRead);
  }
  if (allMetrics.shuffleReadMetrics != null) {
    ShuffleReadMetrics shuffleReadMetrics=allMetrics.shuffleReadMetrics;
    long rbf=shuffleReadMetrics.remoteBlocksFetched;
    long lbf=shuffleReadMetrics.localBlocksFetched;
    results.put(REMOTE_BLOCKS_FETCHED,rbf);
    results.put(LOCAL_BLOCKS_FETCHED,lbf);
    results.put(TOTAL_BLOCKS_FETCHED,rbf + lbf);
    results.put(FETCH_WAIT_TIME,shuffleReadMetrics.fetchWaitTime);
    results.put(REMOTE_BYTES_READ,shuffleReadMetrics.remoteBytesRead);
  }
  if (allMetrics.shuffleWriteMetrics != null) {
    results.put(SHUFFLE_BYTES_WRITTEN,allMetrics.shuffleWriteMetrics.shuffleBytesWritten);
    results.put(SHUFFLE_WRITE_TIME,allMetrics.shuffleWriteMetrics.shuffleWriteTime);
  }
  return results;
}
