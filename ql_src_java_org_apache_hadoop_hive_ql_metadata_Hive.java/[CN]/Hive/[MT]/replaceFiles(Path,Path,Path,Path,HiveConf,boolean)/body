{
  try {
    FileSystem destFs=destf.getFileSystem(conf);
    FileStatus[] srcs;
    FileSystem srcFs;
    try {
      srcFs=srcf.getFileSystem(conf);
      srcs=srcFs.globStatus(srcf);
    }
 catch (    IOException e) {
      throw new HiveException("Getting globStatus " + srcf.toString(),e);
    }
    if (srcs == null) {
      LOG.info("No sources specified to move: " + srcf);
      return;
    }
    List<List<Path[]>> result=checkPaths(conf,destFs,srcs,srcFs,destf,true);
    if (oldPath != null) {
      try {
        FileSystem fs2=oldPath.getFileSystem(conf);
        if (fs2.exists(oldPath)) {
          if (FileUtils.isSubDir(oldPath,destf,fs2)) {
            FileUtils.trashFilesUnderDir(fs2,oldPath,conf);
          }
        }
      }
 catch (      Exception e) {
        LOG.warn("Directory " + oldPath.toString() + " cannot be removed: "+ e,e);
      }
    }
    boolean destfExist=FileUtils.mkdir(destFs,destf,true,conf);
    if (!destfExist) {
      throw new IOException("Directory " + destf.toString() + " does not exist and could not be created.");
    }
    for (    List<Path[]> sdpairs : result) {
      for (      Path[] sdpair : sdpairs) {
        if (!moveFile(conf,sdpair[0],sdpair[1],true,isSrcLocal)) {
          throw new IOException("Error moving: " + sdpair[0] + " into: "+ sdpair[1]);
        }
      }
    }
  }
 catch (  IOException e) {
    throw new HiveException(e.getMessage(),e);
  }
}
