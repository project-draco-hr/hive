{
  if (!tbl.isValidSpec(partSpec)) {
    throw new HiveException("Invalid partition: " + partSpec);
  }
  List<String> pvals=new ArrayList<String>();
  for (  FieldSchema field : tbl.getPartCols()) {
    String val=partSpec.get(field.getName());
    if (val == null && !HiveConf.getBoolVar(conf,HiveConf.ConfVars.DYNAMICPARTITIONING) || val.length() == 0) {
      throw new HiveException("get partition: Value for key " + field.getName() + " is null or empty");
    }
 else     if (val != null) {
      pvals.add(val);
    }
  }
  org.apache.hadoop.hive.metastore.api.Partition tpart=null;
  try {
    tpart=getMSC().getPartitionWithAuthInfo(tbl.getDbName(),tbl.getTableName(),pvals,getUserName(),getGroupNames());
  }
 catch (  NoSuchObjectException nsoe) {
    tpart=null;
  }
catch (  Exception e) {
    LOG.error(StringUtils.stringifyException(e));
    throw new HiveException(e);
  }
  try {
    if (forceCreate) {
      if (tpart == null) {
        LOG.debug("creating partition for table " + tbl.getTableName() + " with partition spec : "+ partSpec);
        tpart=getMSC().appendPartition(tbl.getDbName(),tbl.getTableName(),pvals);
      }
 else {
        LOG.debug("altering partition for table " + tbl.getTableName() + " with partition spec : "+ partSpec);
        if (inheritTableSpecs) {
          tpart.getSd().setOutputFormat(tbl.getTTable().getSd().getOutputFormat());
          tpart.getSd().setInputFormat(tbl.getTTable().getSd().getInputFormat());
          tpart.getSd().getSerdeInfo().setSerializationLib(tbl.getSerializationLib());
        }
        if (partPath == null || partPath.trim().equals("")) {
          throw new HiveException("new partition path should not be null or empty.");
        }
        tpart.getSd().setLocation(partPath);
        alterPartition(tbl.getTableName(),new Partition(tbl,tpart));
      }
    }
    if (tpart == null) {
      return null;
    }
  }
 catch (  Exception e) {
    LOG.error(StringUtils.stringifyException(e));
    throw new HiveException(e);
  }
  return new Partition(tbl,tpart);
}
