{
  try {
    String tdname=Utilities.getDatabaseName(tableName);
    String idname=Utilities.getDatabaseName(indexTblName);
    if (!idname.equals(tdname)) {
      throw new HiveException("Index on different database (" + idname + ") from base table ("+ tdname+ ") is not supported.");
    }
    Index old_index=null;
    try {
      old_index=getIndex(tableName,indexName);
    }
 catch (    Exception e) {
    }
    if (old_index != null) {
      throw new HiveException("Index " + indexName + " already exists on table "+ tableName);
    }
    org.apache.hadoop.hive.metastore.api.Table baseTbl=getTable(tableName).getTTable();
    if (TableType.VIRTUAL_VIEW.toString().equals(baseTbl.getTableType())) {
      throw new HiveException("tableName=" + tableName + " is a VIRTUAL VIEW. Index on VIRTUAL VIEW is not supported.");
    }
    if (baseTbl.isTemporary()) {
      throw new HiveException("tableName=" + tableName + " is a TEMPORARY TABLE. Index on TEMPORARY TABLE is not supported.");
    }
    org.apache.hadoop.hive.metastore.api.Table temp=null;
    try {
      temp=getTable(indexTblName).getTTable();
    }
 catch (    Exception e) {
    }
    if (temp != null) {
      throw new HiveException("Table name " + indexTblName + " already exists. Choose another name.");
    }
    SerDeInfo serdeInfo=new SerDeInfo();
    serdeInfo.setName(indexTblName);
    if (serde != null) {
      serdeInfo.setSerializationLib(serde);
    }
 else {
      if (storageHandler == null) {
        serdeInfo.setSerializationLib(org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe.class.getName());
      }
 else {
        HiveStorageHandler sh=HiveUtils.getStorageHandler(getConf(),storageHandler);
        String serDeClassName=sh.getSerDeClass().getName();
        serdeInfo.setSerializationLib(serDeClassName);
      }
    }
    serdeInfo.setParameters(new HashMap<String,String>());
    if (fieldDelim != null) {
      serdeInfo.getParameters().put(FIELD_DELIM,fieldDelim);
      serdeInfo.getParameters().put(SERIALIZATION_FORMAT,fieldDelim);
    }
    if (fieldEscape != null) {
      serdeInfo.getParameters().put(ESCAPE_CHAR,fieldEscape);
    }
    if (collItemDelim != null) {
      serdeInfo.getParameters().put(COLLECTION_DELIM,collItemDelim);
    }
    if (mapKeyDelim != null) {
      serdeInfo.getParameters().put(MAPKEY_DELIM,mapKeyDelim);
    }
    if (lineDelim != null) {
      serdeInfo.getParameters().put(LINE_DELIM,lineDelim);
    }
    if (serdeProps != null) {
      Iterator<Entry<String,String>> iter=serdeProps.entrySet().iterator();
      while (iter.hasNext()) {
        Entry<String,String> m=iter.next();
        serdeInfo.getParameters().put(m.getKey(),m.getValue());
      }
    }
    List<FieldSchema> indexTblCols=new ArrayList<FieldSchema>();
    List<Order> sortCols=new ArrayList<Order>();
    int k=0;
    Table metaBaseTbl=new Table(baseTbl);
    for (int i=0; i < metaBaseTbl.getCols().size(); i++) {
      FieldSchema col=metaBaseTbl.getCols().get(i);
      if (indexedCols.contains(col.getName())) {
        indexTblCols.add(col);
        sortCols.add(new Order(col.getName(),1));
        k++;
      }
    }
    if (k != indexedCols.size()) {
      throw new RuntimeException("Check the index columns, they should appear in the table being indexed.");
    }
    int time=(int)(System.currentTimeMillis() / 1000);
    org.apache.hadoop.hive.metastore.api.Table tt=null;
    HiveIndexHandler indexHandler=HiveUtils.getIndexHandler(this.getConf(),indexHandlerClass);
    String itname=Utilities.getTableName(indexTblName);
    if (indexHandler.usesIndexTable()) {
      tt=new org.apache.hadoop.hive.ql.metadata.Table(idname,itname).getTTable();
      List<FieldSchema> partKeys=baseTbl.getPartitionKeys();
      tt.setPartitionKeys(partKeys);
      tt.setTableType(TableType.INDEX_TABLE.toString());
      if (tblProps != null) {
        for (        Entry<String,String> prop : tblProps.entrySet()) {
          tt.putToParameters(prop.getKey(),prop.getValue());
        }
      }
      SessionState ss=SessionState.get();
      CreateTableAutomaticGrant grants;
      if (ss != null && ((grants=ss.getCreateTableGrants()) != null)) {
        PrincipalPrivilegeSet principalPrivs=new PrincipalPrivilegeSet();
        principalPrivs.setUserPrivileges(grants.getUserGrants());
        principalPrivs.setGroupPrivileges(grants.getGroupGrants());
        principalPrivs.setRolePrivileges(grants.getRoleGrants());
        tt.setPrivileges(principalPrivs);
      }
    }
    if (!deferredRebuild) {
      throw new RuntimeException("Please specify deferred rebuild using \" WITH DEFERRED REBUILD \".");
    }
    StorageDescriptor indexSd=new StorageDescriptor(indexTblCols,location,inputFormat,outputFormat,false,-1,serdeInfo,null,sortCols,null);
    String ttname=Utilities.getTableName(tableName);
    Index indexDesc=new Index(indexName,indexHandlerClass,tdname,ttname,time,time,itname,indexSd,new HashMap<String,String>(),deferredRebuild);
    if (indexComment != null) {
      indexDesc.getParameters().put("comment",indexComment);
    }
    if (idxProps != null) {
      indexDesc.getParameters().putAll(idxProps);
    }
    indexHandler.analyzeIndexDefinition(baseTbl,indexDesc,tt);
    this.getMSC().createIndex(indexDesc,tt);
  }
 catch (  Exception e) {
    throw new HiveException(e);
  }
}
