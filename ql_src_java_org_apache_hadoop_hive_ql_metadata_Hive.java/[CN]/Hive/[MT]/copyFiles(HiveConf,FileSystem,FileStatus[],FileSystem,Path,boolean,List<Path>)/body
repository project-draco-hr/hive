{
  final HdfsUtils.HadoopFileStatus fullDestStatus;
  try {
    fullDestStatus=new HdfsUtils.HadoopFileStatus(conf,destFs,destf);
  }
 catch (  IOException e1) {
    throw new HiveException(e1);
  }
  if (!fullDestStatus.getFileStatus().isDirectory()) {
    throw new HiveException(destf + " is not a directory.");
  }
  final boolean inheritPerms=HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_WAREHOUSE_SUBDIR_INHERIT_PERMS);
  final List<Future<ObjectPair<Path,Path>>> futures=new LinkedList<>();
  final ExecutorService pool=conf.getInt(ConfVars.HIVE_MOVE_FILES_THREAD_COUNT.varname,25) > 0 ? Executors.newFixedThreadPool(conf.getInt(ConfVars.HIVE_MOVE_FILES_THREAD_COUNT.varname,25),new ThreadFactoryBuilder().setDaemon(true).setNameFormat("Move-Thread-%d").build()) : null;
  for (  FileStatus src : srcs) {
    FileStatus[] files;
    if (src.isDirectory()) {
      try {
        files=srcFs.listStatus(src.getPath(),FileUtils.HIDDEN_FILES_PATH_FILTER);
      }
 catch (      IOException e) {
        pool.shutdownNow();
        throw new HiveException(e);
      }
    }
 else {
      files=new FileStatus[]{src};
    }
    final SessionState parentSession=SessionState.get();
    for (    final FileStatus srcFile : files) {
      final Path srcP=srcFile.getPath();
      final boolean needToCopy=needToCopy(srcP,destf,srcFs,destFs);
      final String name;
      final String filetype;
      String itemName=srcP.getName();
      int index=itemName.lastIndexOf('.');
      if (index >= 0) {
        filetype=itemName.substring(index);
        name=itemName.substring(0,index);
      }
 else {
        name=itemName;
        filetype="";
      }
      final String srcGroup=srcFile.getGroup();
      if (null == pool) {
        Path destPath=new Path(destf,srcP.getName());
        try {
          if (!needToCopy && !isSrcLocal) {
            for (int counter=1; !destFs.rename(srcP,destPath); counter++) {
              destPath=new Path(destf,name + ("_copy_" + counter) + filetype);
            }
          }
 else {
            destPath=mvFile(conf,srcP,destPath,isSrcLocal,srcFs,destFs,name,filetype);
          }
          if (null != newFiles) {
            newFiles.add(destPath);
          }
        }
 catch (        IOException ioe) {
          LOG.error("Failed to move: {}",ioe.getMessage());
          throw new HiveException(ioe.getCause());
        }
      }
 else {
        futures.add(pool.submit(new Callable<ObjectPair<Path,Path>>(){
          @Override public ObjectPair<Path,Path> call() throws Exception {
            SessionState.setCurrentSessionState(parentSession);
            Path destPath=new Path(destf,srcP.getName());
            if (!needToCopy && !isSrcLocal) {
              for (int counter=1; !destFs.rename(srcP,destPath); counter++) {
                destPath=new Path(destf,name + ("_copy_" + counter) + filetype);
              }
            }
 else {
              destPath=mvFile(conf,srcP,destPath,isSrcLocal,srcFs,destFs,name,filetype);
            }
            if (inheritPerms) {
              HdfsUtils.setFullFileStatus(conf,fullDestStatus,srcGroup,destFs,destPath,false);
            }
            if (null != newFiles) {
              newFiles.add(destPath);
            }
            return ObjectPair.create(srcP,destPath);
          }
        }
));
      }
    }
  }
  if (null == pool) {
    if (inheritPerms) {
      try {
        HdfsUtils.setFullFileStatus(conf,fullDestStatus,null,destFs,destf,true);
      }
 catch (      IOException e) {
        LOG.error("Failed to move: {}",e.getMessage());
        throw new HiveException(e.getCause());
      }
    }
  }
 else {
    pool.shutdown();
    for (    Future<ObjectPair<Path,Path>> future : futures) {
      try {
        ObjectPair<Path,Path> pair=future.get();
        LOG.debug("Moved src: {}",pair.getFirst().toString(),", to dest: {}",pair.getSecond().toString());
      }
 catch (      Exception e) {
        LOG.error("Failed to move: {}",e.getMessage());
        pool.shutdownNow();
        throw new HiveException(e.getCause());
      }
    }
  }
}
