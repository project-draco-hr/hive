{
  Path tblDataLocationPath=tbl.getDataLocation();
  Partition newTPart=null;
  try {
    Partition oldPart=getPartition(tbl,partSpec,false);
    Path oldPartPath=null;
    if (oldPart != null) {
      oldPartPath=oldPart.getDataLocation();
    }
    Path newPartPath=null;
    if (inheritTableSpecs) {
      Path partPath=new Path(tbl.getDataLocation(),Warehouse.makePartPath(partSpec));
      newPartPath=new Path(tblDataLocationPath.toUri().getScheme(),tblDataLocationPath.toUri().getAuthority(),partPath.toUri().getPath());
      if (oldPart != null) {
        FileSystem oldPartPathFS=oldPartPath.getFileSystem(getConf());
        FileSystem loadPathFS=loadPath.getFileSystem(getConf());
        if (FileUtils.equalsFileSystem(oldPartPathFS,loadPathFS)) {
          newPartPath=oldPartPath;
        }
      }
    }
 else {
      newPartPath=oldPartPath;
    }
    List<Path> newFiles=null;
    if (replace) {
      Hive.replaceFiles(tbl.getPath(),loadPath,newPartPath,oldPartPath,getConf(),isSrcLocal);
    }
 else {
      newFiles=new ArrayList<Path>();
      FileSystem fs=tbl.getDataLocation().getFileSystem(conf);
      Hive.copyFiles(conf,loadPath,newPartPath,fs,isSrcLocal,isAcid,newFiles);
    }
    newTPart=getPartition(tbl,partSpec,true,newPartPath.toString(),inheritTableSpecs,newFiles);
    if (isSkewedStoreAsSubdir) {
      org.apache.hadoop.hive.metastore.api.Partition newCreatedTpart=newTPart.getTPartition();
      SkewedInfo skewedInfo=newCreatedTpart.getSd().getSkewedInfo();
      Map<List<String>,String> skewedColValueLocationMaps=constructListBucketingLocationMap(newPartPath,skewedInfo);
      skewedInfo.setSkewedColValueLocationMaps(skewedColValueLocationMaps);
      newCreatedTpart.getSd().setSkewedInfo(skewedInfo);
      if (!this.getConf().getBoolVar(HiveConf.ConfVars.HIVESTATSAUTOGATHER)) {
        newTPart.getParameters().put(StatsSetupConst.COLUMN_STATS_ACCURATE,"false");
      }
      alterPartition(tbl.getDbName(),tbl.getTableName(),new Partition(tbl,newCreatedTpart));
      newTPart=getPartition(tbl,partSpec,true,newPartPath.toString(),inheritTableSpecs,newFiles);
      return new Partition(tbl,newCreatedTpart);
    }
    if (!this.getConf().getBoolVar(HiveConf.ConfVars.HIVESTATSAUTOGATHER)) {
      newTPart.getParameters().put(StatsSetupConst.COLUMN_STATS_ACCURATE,"false");
      alterPartition(tbl.getDbName(),tbl.getTableName(),new Partition(tbl,newTPart.getTPartition()));
    }
  }
 catch (  IOException e) {
    LOG.error(StringUtils.stringifyException(e));
    throw new HiveException(e);
  }
catch (  MetaException e) {
    LOG.error(StringUtils.stringifyException(e));
    throw new HiveException(e);
  }
catch (  InvalidOperationException e) {
    LOG.error(StringUtils.stringifyException(e));
    throw new HiveException(e);
  }
  return newTPart;
}
