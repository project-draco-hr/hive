{
  boolean success=false;
  FileSystem srcFs, destFs;
  try {
    destFs=destf.getFileSystem(conf);
  }
 catch (  IOException e) {
    LOG.error("Failed to get dest fs",e);
    throw new HiveException(e.getMessage(),e);
  }
  try {
    srcFs=srcf.getFileSystem(conf);
  }
 catch (  IOException e) {
    LOG.error("Failed to get dest fs",e);
    throw new HiveException(e.getMessage(),e);
  }
  boolean inheritPerms=HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_WAREHOUSE_SUBDIR_INHERIT_PERMS);
  HadoopShims shims=ShimLoader.getHadoopShims();
  HadoopShims.HdfsFileStatus destStatus=null;
  boolean destIsSubDir=isSubDir(srcf,destf,srcFs,destFs,isSrcLocal);
  try {
    if (inheritPerms || replace) {
      try {
        destStatus=shims.getFullFileStatus(conf,destFs,destf);
        if (replace && !destIsSubDir) {
          LOG.debug("The path " + destf.toString() + " is deleted");
          destFs.delete(destf,true);
        }
      }
 catch (      FileNotFoundException ignore) {
        if (inheritPerms) {
          destStatus=shims.getFullFileStatus(conf,destFs,destf.getParent());
        }
      }
    }
    if (isSrcLocal) {
      destFs.copyFromLocalFile(srcf,destf);
      success=true;
    }
 else {
      if (needToCopy(srcf,destf,srcFs,destFs)) {
        LOG.info("Copying source " + srcf + " to "+ destf+ " because HDFS encryption zones are different.");
        success=FileUtils.copy(srcf.getFileSystem(conf),srcf,destf.getFileSystem(conf),destf,true,replace,conf);
      }
 else {
        if (destIsSubDir) {
          FileStatus[] srcs=destFs.listStatus(srcf,FileUtils.HIDDEN_FILES_PATH_FILTER);
          if (srcs.length == 0) {
            success=true;
          }
          for (          FileStatus status : srcs) {
            Path destFile;
            if (destFs.isDirectory(destf)) {
              destFile=new Path(destf,status.getPath().getName());
            }
 else {
              destFile=destf;
            }
            if (destFs.exists(destFile)) {
              if (!destFs.delete(destFile,true)) {
                throw new HiveException(String.format("File to replace could not be deleted: %s",destFile));
              }
            }
            if (!(destFs.rename(status.getPath(),destFile))) {
              throw new HiveException("Unable to move source " + status.getPath() + " to destination "+ destf);
            }
          }
          success=true;
        }
 else {
          success=destFs.rename(srcf,destf);
        }
      }
    }
    LOG.info((replace ? "Replacing src:" : "Renaming src: ") + srcf.toString() + ", dest: "+ destf.toString()+ ", Status:"+ success);
  }
 catch (  IOException ioe) {
    throw new HiveException("Unable to move source " + srcf + " to destination "+ destf,ioe);
  }
  if (success && inheritPerms) {
    try {
      ShimLoader.getHadoopShims().setFullFileStatus(conf,destStatus,destFs,destf);
    }
 catch (    IOException e) {
      LOG.warn("Error setting permission of file " + destf + ": "+ e.getMessage(),e);
    }
  }
  return success;
}
