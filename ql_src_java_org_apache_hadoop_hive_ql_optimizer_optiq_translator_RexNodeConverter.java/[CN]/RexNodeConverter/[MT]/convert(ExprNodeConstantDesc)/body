{
  RexBuilder rexBuilder=m_cluster.getRexBuilder();
  RelDataTypeFactory dtFactory=rexBuilder.getTypeFactory();
  PrimitiveTypeInfo hiveType=(PrimitiveTypeInfo)literal.getTypeInfo();
  RelDataType optiqDataType=TypeConverter.convert(hiveType,dtFactory);
  PrimitiveCategory hiveTypeCategory=hiveType.getPrimitiveCategory();
  RexNode optiqLiteral=null;
  Object value=literal.getValue();
switch (hiveTypeCategory) {
case BOOLEAN:
    optiqLiteral=rexBuilder.makeLiteral(((Boolean)value).booleanValue());
  break;
case BYTE:
optiqLiteral=rexBuilder.makeExactLiteral(new BigDecimal((Short)value));
break;
case SHORT:
optiqLiteral=rexBuilder.makeExactLiteral(new BigDecimal((Short)value));
break;
case INT:
optiqLiteral=rexBuilder.makeExactLiteral(new BigDecimal((Integer)value));
break;
case LONG:
optiqLiteral=rexBuilder.makeBigintLiteral(new BigDecimal((Long)value));
break;
case DECIMAL:
optiqLiteral=rexBuilder.makeExactLiteral((BigDecimal)value);
break;
case FLOAT:
optiqLiteral=rexBuilder.makeApproxLiteral(new BigDecimal((Float)value),optiqDataType);
break;
case DOUBLE:
optiqLiteral=rexBuilder.makeApproxLiteral(new BigDecimal((Double)value),optiqDataType);
break;
case STRING:
optiqLiteral=rexBuilder.makeLiteral((String)value);
break;
case DATE:
case TIMESTAMP:
case BINARY:
case VOID:
case UNKNOWN:
default :
throw new RuntimeException("UnSupported Literal");
}
return optiqLiteral;
}
