{
  ObjectInspector inspector;
synchronized (TestVectorOrcFile.class) {
    inspector=ObjectInspectorFactory.getReflectionObjectInspector(Timestamp.class,ObjectInspectorFactory.ObjectInspectorOptions.JAVA);
  }
  TypeDescription schema=TypeDescription.createTimestamp();
  Writer writer=OrcFile.createWriter(testFilePath,OrcFile.writerOptions(conf).setSchema(schema).stripeSize(100000).bufferSize(10000).version(org.apache.orc.OrcFile.Version.V_0_11));
  List<Timestamp> tslist=Lists.newArrayList();
  tslist.add(Timestamp.valueOf("2037-01-01 00:00:00.000999"));
  tslist.add(Timestamp.valueOf("2003-01-01 00:00:00.000000222"));
  tslist.add(Timestamp.valueOf("1999-01-01 00:00:00.999999999"));
  tslist.add(Timestamp.valueOf("1995-01-01 00:00:00.688888888"));
  tslist.add(Timestamp.valueOf("2002-01-01 00:00:00.1"));
  tslist.add(Timestamp.valueOf("2010-03-02 00:00:00.000009001"));
  tslist.add(Timestamp.valueOf("2005-01-01 00:00:00.000002229"));
  tslist.add(Timestamp.valueOf("2006-01-01 00:00:00.900203003"));
  tslist.add(Timestamp.valueOf("2003-01-01 00:00:00.800000007"));
  tslist.add(Timestamp.valueOf("1996-08-02 00:00:00.723100809"));
  tslist.add(Timestamp.valueOf("1998-11-02 00:00:00.857340643"));
  tslist.add(Timestamp.valueOf("2008-10-02 00:00:00"));
  VectorizedRowBatch batch=new VectorizedRowBatch(1,1024);
  TimestampColumnVector vec=new TimestampColumnVector(1024);
  batch.cols[0]=vec;
  batch.reset();
  batch.size=tslist.size();
  for (int i=0; i < tslist.size(); ++i) {
    Timestamp ts=tslist.get(i);
    vec.set(i,ts);
  }
  writer.addRowBatch(batch);
  writer.close();
  Reader reader=OrcFile.createReader(testFilePath,OrcFile.readerOptions(conf).filesystem(fs));
  RecordReader rows=reader.rows(null);
  int idx=0;
  while (rows.hasNext()) {
    Object row=rows.next(null);
    assertEquals(tslist.get(idx++).getNanos(),((TimestampWritable)row).getNanos());
  }
  assertEquals(tslist.size(),rows.getRowNumber());
  assertEquals(0,writer.getSchema().getMaximumId());
  boolean[] expected=new boolean[]{false};
  boolean[] included=OrcUtils.includeColumns("",writer.getSchema());
  assertEquals(true,Arrays.equals(expected,included));
}
