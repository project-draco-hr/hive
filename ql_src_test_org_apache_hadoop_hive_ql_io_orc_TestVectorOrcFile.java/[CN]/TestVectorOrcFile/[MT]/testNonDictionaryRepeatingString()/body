{
  TypeDescription schema=TypeDescription.createStruct().addField("str",TypeDescription.createString());
  Writer writer=OrcFile.createWriter(testFilePath,OrcFile.writerOptions(conf).setSchema(schema).rowIndexStride(1000));
  VectorizedRowBatch batch=schema.createRowBatch();
  batch.size=1024;
  for (int r=0; r < batch.size; ++r) {
    ((BytesColumnVector)batch.cols[0]).setVal(r,Integer.toString(r * 10001).getBytes());
  }
  writer.addRowBatch(batch);
  batch.cols[0].isRepeating=true;
  ((BytesColumnVector)batch.cols[0]).setVal(0,"Halloween".getBytes());
  writer.addRowBatch(batch);
  writer.close();
  Reader reader=OrcFile.createReader(testFilePath,OrcFile.readerOptions(conf));
  RecordReader rows=reader.rows();
  batch=rows.nextBatch(null);
  assertEquals(1024,batch.size);
  for (int r=0; r < 1024; ++r) {
    assertEquals(Integer.toString(r * 10001),makeString((BytesColumnVector)batch.cols[0],r));
  }
  batch=rows.nextBatch(batch);
  assertEquals(1024,batch.size);
  for (int r=0; r < 1024; ++r) {
    assertEquals("Halloween",makeString((BytesColumnVector)batch.cols[0],r));
  }
  assertEquals(false,rows.hasNext());
}
