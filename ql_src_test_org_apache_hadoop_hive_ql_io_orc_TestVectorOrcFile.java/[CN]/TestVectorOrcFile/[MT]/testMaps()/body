{
  TypeDescription schema=TypeDescription.createStruct().addField("map",TypeDescription.createMap(TypeDescription.createLong(),TypeDescription.createLong()));
  Writer writer=OrcFile.createWriter(testFilePath,OrcFile.writerOptions(conf).setSchema(schema));
  VectorizedRowBatch batch=schema.createRowBatch();
  batch.size=1024;
  MapColumnVector map=(MapColumnVector)batch.cols[0];
  map.noNulls=false;
  for (int r=0; r < 1024; ++r) {
    if (r < 200) {
      map.isNull[r]=true;
    }
 else     if (r < 300) {
      map.offsets[r]=r - 200;
      map.lengths[r]=1;
    }
 else     if (r < 400) {
      map.isNull[r]=true;
    }
 else     if (r < 500) {
      map.offsets[r]=r - 300;
      map.lengths[r]=1;
    }
 else     if (r < 600) {
      map.isNull[r]=true;
    }
 else     if (r < 700) {
      map.offsets[r]=r;
      map.lengths[r]=2;
    }
 else {
      map.isNull[r]=true;
    }
    ((LongColumnVector)map.keys).vector[r]=r;
    ((LongColumnVector)map.values).vector[r]=r * 10;
  }
  writer.addRowBatch(batch);
  writer.close();
  Reader reader=OrcFile.createReader(testFilePath,OrcFile.readerOptions(conf));
  RecordReader rows=reader.rows();
  OrcStruct row=null;
  for (int r=0; r < 1024; ++r) {
    assertEquals(true,rows.hasNext());
    row=(OrcStruct)rows.next(row);
    Map inner=(Map)row.getFieldValue(0);
    if (r < 200) {
      assertEquals("row " + r,null,inner);
    }
 else     if (r < 300) {
      assertEquals("row " + r,"{" + (r - 200) + "="+ ((r - 200) * 10)+ "}",inner.toString());
    }
 else     if (r < 400) {
      assertEquals("row " + r,null,inner);
    }
 else     if (r < 500) {
      assertEquals("row " + r,"{" + (r - 300) + "="+ ((r - 300) * 10)+ "}",inner.toString());
    }
 else     if (r < 600) {
      assertEquals("row " + r,null,inner);
    }
 else     if (r < 700) {
      assertEquals("row " + r,"{" + r + "="+ (r * 10)+ ", "+ (r + 1)+ "="+ (10 * (r + 1))+ "}",inner.toString());
    }
 else {
      assertEquals("row " + r,null,inner);
    }
  }
  assertEquals(false,rows.hasNext());
}
