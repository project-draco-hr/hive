{
  TypeDescription schema=createBigRowSchema();
  Writer writer=OrcFile.createWriter(testFilePath,OrcFile.writerOptions(conf).setSchema(schema).stripeSize(200000).bufferSize(65536).rowIndexStride(1000));
  VectorizedRowBatch batch=schema.createRowBatch();
  Random rand=new Random(42);
  final int COUNT=32768;
  long[] intValues=new long[COUNT];
  double[] doubleValues=new double[COUNT];
  String[] stringValues=new String[COUNT];
  BytesWritable[] byteValues=new BytesWritable[COUNT];
  String[] words=new String[128];
  for (int i=0; i < words.length; ++i) {
    words[i]=Integer.toHexString(rand.nextInt());
  }
  for (int i=0; i < COUNT / 2; ++i) {
    intValues[2 * i]=rand.nextLong();
    intValues[2 * i + 1]=intValues[2 * i];
    stringValues[2 * i]=words[rand.nextInt(words.length)];
    stringValues[2 * i + 1]=stringValues[2 * i];
  }
  for (int i=0; i < COUNT; ++i) {
    doubleValues[i]=rand.nextDouble();
    byte[] buf=new byte[20];
    rand.nextBytes(buf);
    byteValues[i]=new BytesWritable(buf);
  }
  for (int i=0; i < COUNT; ++i) {
    appendRandomRow(batch,intValues,doubleValues,stringValues,byteValues,words,i);
    if (batch.size == 1024) {
      writer.addRowBatch(batch);
      batch.reset();
    }
  }
  if (batch.size != 0) {
    writer.addRowBatch(batch);
  }
  writer.close();
  Reader reader=OrcFile.createReader(testFilePath,OrcFile.readerOptions(conf).filesystem(fs));
  assertEquals(COUNT,reader.getNumberOfRows());
  RecordReader rows=reader.rows();
  MetadataReader meta=((RecordReaderImpl)rows).getMetadataReader();
  OrcIndex index=meta.readRowIndex(reader.getStripes().get(0),null,null,null,null,null);
  for (int c=1; c < 9; ++c) {
    OrcProto.RowIndex colIndex=index.getRowGroupIndex()[c];
    assertEquals(1000,colIndex.getEntry(0).getStatistics().getNumberOfValues());
  }
  batch=reader.getSchema().createRowBatch();
  int nextRowInBatch=-1;
  for (int i=COUNT - 1; i >= 0; --i, --nextRowInBatch) {
    if (nextRowInBatch < 0) {
      long base=Math.max(i - 1023,0);
      rows.seekToRow(base);
      assertEquals("row " + i,true,rows.nextBatch(batch));
      nextRowInBatch=batch.size - 1;
    }
    checkRandomRow(batch,intValues,doubleValues,stringValues,byteValues,words,i,nextRowInBatch);
  }
  rows.close();
  Iterator<StripeInformation> stripeIterator=reader.getStripes().iterator();
  long offsetOfStripe2=0;
  long offsetOfStripe4=0;
  long lastRowOfStripe2=0;
  for (int i=0; i < 5; ++i) {
    StripeInformation stripe=stripeIterator.next();
    if (i < 2) {
      lastRowOfStripe2+=stripe.getNumberOfRows();
    }
 else     if (i == 2) {
      offsetOfStripe2=stripe.getOffset();
      lastRowOfStripe2+=stripe.getNumberOfRows() - 1;
    }
 else     if (i == 4) {
      offsetOfStripe4=stripe.getOffset();
    }
  }
  boolean[] columns=new boolean[reader.getStatistics().length];
  columns[5]=true;
  columns[9]=true;
  rows=reader.rowsOptions(new Reader.Options().range(offsetOfStripe2,offsetOfStripe4 - offsetOfStripe2).include(columns));
  rows.seekToRow(lastRowOfStripe2);
  batch=reader.getSchema().createRowBatch(2);
  assertEquals(true,rows.nextBatch(batch));
  assertEquals(1,batch.size);
  assertEquals(intValues[(int)lastRowOfStripe2],getLong(batch,0));
  assertEquals(stringValues[(int)lastRowOfStripe2],getText(batch,0).toString());
  assertEquals(true,rows.nextBatch(batch));
  assertEquals(intValues[(int)lastRowOfStripe2 + 1],getLong(batch,0));
  assertEquals(stringValues[(int)lastRowOfStripe2 + 1],getText(batch,0).toString());
  rows.close();
}
