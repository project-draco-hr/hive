{
  TypeDescription schema=createInnerSchema();
  Writer writer=OrcFile.createWriter(testFilePath,OrcFile.writerOptions(conf).setSchema(schema).stripeSize(1000).compress(CompressionKind.SNAPPY).bufferSize(100));
  VectorizedRowBatch batch=schema.createRowBatch();
  Random rand=new Random(12);
  batch.size=1000;
  for (int b=0; b < 10; ++b) {
    for (int r=0; r < 1000; ++r) {
      ((LongColumnVector)batch.cols[0]).vector[r]=rand.nextInt();
      ((BytesColumnVector)batch.cols[1]).setVal(r,Integer.toHexString(rand.nextInt()).getBytes());
    }
    writer.addRowBatch(batch);
  }
  writer.close();
  Reader reader=OrcFile.createReader(testFilePath,OrcFile.readerOptions(conf).filesystem(fs));
  assertEquals(CompressionKind.SNAPPY,reader.getCompressionKind());
  RecordReader rows=reader.rows();
  batch=reader.getSchema().createRowBatch(1000);
  rand=new Random(12);
  LongColumnVector longs=(LongColumnVector)batch.cols[0];
  BytesColumnVector strs=(BytesColumnVector)batch.cols[1];
  for (int b=0; b < 10; ++b) {
    rows.nextBatch(batch);
    assertEquals(1000,batch.size);
    for (int r=0; r < batch.size; ++r) {
      assertEquals(rand.nextInt(),longs.vector[r]);
      assertEquals(Integer.toHexString(rand.nextInt()),strs.toString(r));
    }
  }
  rows.nextBatch(batch);
  assertEquals(0,batch.size);
  rows.close();
}
