{
  TypeDescription schema=createBigRowSchema();
  Writer writer=OrcFile.createWriter(testFilePath,OrcFile.writerOptions(conf).setSchema(schema).stripeSize(100000).bufferSize(10000));
  VectorizedRowBatch batch=schema.createRowBatch();
  batch.size=2;
  setBigRow(batch,0,false,(byte)1,(short)1024,65536,Long.MAX_VALUE,(float)1.0,-15.0,bytes(0,1,2,3,4),"hi",new MiddleStruct(inner(1,"bye"),inner(2,"sigh")),list(inner(3,"good"),inner(4,"bad")),map());
  setBigRow(batch,1,true,(byte)100,(short)2048,65536,Long.MAX_VALUE,(float)2.0,-5.0,bytes(),"bye",new MiddleStruct(inner(1,"bye"),inner(2,"sigh")),list(inner(100000000,"cat"),inner(-100000,"in"),inner(1234,"hat")),map(inner(5,"chani"),inner(1,"mauddib")));
  writer.addRowBatch(batch);
  writer.close();
  Reader reader=OrcFile.createReader(testFilePath,OrcFile.readerOptions(conf).filesystem(fs));
  schema=writer.getSchema();
  assertEquals(23,schema.getMaximumId());
  boolean[] expected=new boolean[]{false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false};
  boolean[] included=OrcUtils.includeColumns("",schema);
  assertEquals(true,Arrays.equals(expected,included));
  expected=new boolean[]{false,true,false,false,false,false,false,false,false,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true};
  included=OrcUtils.includeColumns("boolean1,string1,middle,map",schema);
  assertArrayEquals(expected,included);
  expected=new boolean[]{false,true,false,false,false,false,false,false,false,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true};
  included=OrcUtils.includeColumns("boolean1,string1,middle,map",schema);
  assertArrayEquals(expected,included);
  expected=new boolean[]{false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
  included=OrcUtils.includeColumns("boolean1,byte1,short1,int1,long1,float1,double1,bytes1,string1,middle,list,map",schema);
  assertEquals(true,Arrays.equals(expected,included));
  ColumnStatistics[] stats=reader.getStatistics();
  assertEquals(2,stats[1].getNumberOfValues());
  assertEquals(1,((BooleanColumnStatistics)stats[1]).getFalseCount());
  assertEquals(1,((BooleanColumnStatistics)stats[1]).getTrueCount());
  assertEquals("count: 2 hasNull: false true: 1",stats[1].toString());
  assertEquals(2048,((IntegerColumnStatistics)stats[3]).getMaximum());
  assertEquals(1024,((IntegerColumnStatistics)stats[3]).getMinimum());
  assertEquals(true,((IntegerColumnStatistics)stats[3]).isSumDefined());
  assertEquals(3072,((IntegerColumnStatistics)stats[3]).getSum());
  assertEquals("count: 2 hasNull: false min: 1024 max: 2048 sum: 3072",stats[3].toString());
  StripeStatistics ss=reader.getStripeStatistics().get(0);
  assertEquals(2,ss.getColumnStatistics()[0].getNumberOfValues());
  assertEquals(1,((BooleanColumnStatistics)ss.getColumnStatistics()[1]).getTrueCount());
  assertEquals(1024,((IntegerColumnStatistics)ss.getColumnStatistics()[3]).getMinimum());
  assertEquals(2048,((IntegerColumnStatistics)ss.getColumnStatistics()[3]).getMaximum());
  assertEquals(3072,((IntegerColumnStatistics)ss.getColumnStatistics()[3]).getSum());
  assertEquals(-15.0,((DoubleColumnStatistics)stats[7]).getMinimum());
  assertEquals(-5.0,((DoubleColumnStatistics)stats[7]).getMaximum());
  assertEquals(-20.0,((DoubleColumnStatistics)stats[7]).getSum(),0.00001);
  assertEquals("count: 2 hasNull: false min: -15.0 max: -5.0 sum: -20.0",stats[7].toString());
  assertEquals("count: 2 hasNull: false min: bye max: hi sum: 5",stats[9].toString());
  TypeDescription readerSchema=reader.getSchema();
  assertEquals(TypeDescription.Category.STRUCT,readerSchema.getCategory());
  assertEquals("struct<boolean1:boolean,byte1:tinyint,short1:smallint," + "int1:int,long1:bigint,float1:float,double1:double,bytes1:" + "binary,string1:string,middle:struct<list:array<struct<int1:int,"+ "string1:string>>>,list:array<struct<int1:int,string1:string>>,"+ "map:map<string,struct<int1:int,string1:string>>>",readerSchema.toString());
  List<String> fieldNames=readerSchema.getFieldNames();
  List<TypeDescription> fieldTypes=readerSchema.getChildren();
  assertEquals("boolean1",fieldNames.get(0));
  assertEquals(TypeDescription.Category.BOOLEAN,fieldTypes.get(0).getCategory());
  assertEquals("byte1",fieldNames.get(1));
  assertEquals(TypeDescription.Category.BYTE,fieldTypes.get(1).getCategory());
  assertEquals("short1",fieldNames.get(2));
  assertEquals(TypeDescription.Category.SHORT,fieldTypes.get(2).getCategory());
  assertEquals("int1",fieldNames.get(3));
  assertEquals(TypeDescription.Category.INT,fieldTypes.get(3).getCategory());
  assertEquals("long1",fieldNames.get(4));
  assertEquals(TypeDescription.Category.LONG,fieldTypes.get(4).getCategory());
  assertEquals("float1",fieldNames.get(5));
  assertEquals(TypeDescription.Category.FLOAT,fieldTypes.get(5).getCategory());
  assertEquals("double1",fieldNames.get(6));
  assertEquals(TypeDescription.Category.DOUBLE,fieldTypes.get(6).getCategory());
  assertEquals("bytes1",fieldNames.get(7));
  assertEquals(TypeDescription.Category.BINARY,fieldTypes.get(7).getCategory());
  assertEquals("string1",fieldNames.get(8));
  assertEquals(TypeDescription.Category.STRING,fieldTypes.get(8).getCategory());
  assertEquals("middle",fieldNames.get(9));
  TypeDescription middle=fieldTypes.get(9);
  assertEquals(TypeDescription.Category.STRUCT,middle.getCategory());
  TypeDescription midList=middle.getChildren().get(0);
  assertEquals(TypeDescription.Category.LIST,midList.getCategory());
  TypeDescription inner=midList.getChildren().get(0);
  assertEquals(TypeDescription.Category.STRUCT,inner.getCategory());
  assertEquals("int1",inner.getFieldNames().get(0));
  assertEquals("string1",inner.getFieldNames().get(1));
  RecordReader rows=reader.rows();
  batch=readerSchema.createRowBatch();
  assertEquals(true,rows.nextBatch(batch));
  assertEquals(2,batch.size);
  assertEquals(false,rows.hasNext());
  assertEquals(false,getBoolean(batch,0));
  assertEquals(1,getByte(batch,0));
  assertEquals(1024,getShort(batch,0));
  assertEquals(65536,getInt(batch,0));
  assertEquals(Long.MAX_VALUE,getLong(batch,0));
  assertEquals(1.0,getFloat(batch,0),0.00001);
  assertEquals(-15.0,getDouble(batch,0),0.00001);
  assertEquals(bytes(0,1,2,3,4),getBinary(batch,0));
  assertEquals("hi",getText(batch,0).toString());
  List<InnerStruct> midRow=getMidList(batch,0);
  assertNotNull(midRow);
  assertEquals(2,midRow.size());
  assertEquals(1,midRow.get(0).int1);
  assertEquals("bye",midRow.get(0).string1.toString());
  assertEquals(2,midRow.get(1).int1);
  assertEquals("sigh",midRow.get(1).string1.toString());
  List<InnerStruct> list=getList(batch,0);
  assertEquals(2,list.size());
  assertEquals(3,list.get(0).int1);
  assertEquals("good",list.get(0).string1.toString());
  assertEquals(4,list.get(1).int1);
  assertEquals("bad",list.get(1).string1.toString());
  Map<Text,InnerStruct> map=getMap(batch,0);
  assertEquals(0,map.size());
  assertEquals(true,getBoolean(batch,1));
  assertEquals(100,getByte(batch,1));
  assertEquals(2048,getShort(batch,1));
  assertEquals(65536,getInt(batch,1));
  assertEquals(Long.MAX_VALUE,getLong(batch,1));
  assertEquals(2.0,getFloat(batch,1),0.00001);
  assertEquals(-5.0,getDouble(batch,1),0.00001);
  assertEquals(bytes(),getBinary(batch,1));
  assertEquals("bye",getText(batch,1).toString());
  midRow=getMidList(batch,1);
  assertNotNull(midRow);
  assertEquals(2,midRow.size());
  assertEquals(1,midRow.get(0).int1);
  assertEquals("bye",midRow.get(0).string1.toString());
  assertEquals(2,midRow.get(1).int1);
  assertEquals("sigh",midRow.get(1).string1.toString());
  list=getList(batch,1);
  assertEquals(3,list.size());
  assertEquals(100000000,list.get(0).int1);
  assertEquals("cat",list.get(0).string1.toString());
  assertEquals(-100000,list.get(1).int1);
  assertEquals("in",list.get(1).string1.toString());
  assertEquals(1234,list.get(2).int1);
  assertEquals("hat",list.get(2).string1.toString());
  map=getMap(batch,1);
  assertEquals(2,map.size());
  InnerStruct value=map.get(new Text("chani"));
  assertEquals(5,value.int1);
  assertEquals("chani",value.string1.toString());
  value=map.get(new Text("mauddib"));
  assertEquals(1,value.int1);
  assertEquals("mauddib",value.string1.toString());
  assertEquals(false,rows.nextBatch(batch));
  rows.close();
}
