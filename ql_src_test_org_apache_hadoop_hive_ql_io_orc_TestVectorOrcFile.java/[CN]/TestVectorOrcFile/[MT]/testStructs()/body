{
  TypeDescription schema=TypeDescription.createStruct().addField("struct",TypeDescription.createStruct().addField("inner",TypeDescription.createLong()));
  Writer writer=OrcFile.createWriter(testFilePath,OrcFile.writerOptions(conf).setSchema(schema));
  VectorizedRowBatch batch=schema.createRowBatch();
  batch.size=1024;
  StructColumnVector outer=(StructColumnVector)batch.cols[0];
  outer.noNulls=false;
  for (int r=0; r < 1024; ++r) {
    if (r < 200 || (r >= 400 && r < 600) || r >= 800) {
      outer.isNull[r]=true;
    }
    ((LongColumnVector)outer.fields[0]).vector[r]=r;
  }
  writer.addRowBatch(batch);
  writer.close();
  Reader reader=OrcFile.createReader(testFilePath,OrcFile.readerOptions(conf));
  RecordReader rows=reader.rows();
  batch=reader.getSchema().createRowBatch();
  rows.nextBatch(batch);
  assertEquals(1024,batch.size);
  StructColumnVector inner=(StructColumnVector)batch.cols[0];
  LongColumnVector vec=(LongColumnVector)inner.fields[0];
  for (int r=0; r < 1024; ++r) {
    if (r < 200 || (r >= 400 && r < 600) || r >= 800) {
      assertEquals("row " + r,true,inner.isNull[r]);
    }
 else {
      assertEquals("row " + r,false,inner.isNull[r]);
      assertEquals("row " + r,r,vec.vector[r]);
    }
  }
  rows.nextBatch(batch);
  assertEquals(0,batch.size);
}
