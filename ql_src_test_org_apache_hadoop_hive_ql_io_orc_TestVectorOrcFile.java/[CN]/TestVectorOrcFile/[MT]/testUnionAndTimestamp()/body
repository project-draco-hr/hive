{
  TypeDescription schema=TypeDescription.createStruct().addField("time",TypeDescription.createTimestamp()).addField("union",TypeDescription.createUnion().addUnionChild(TypeDescription.createInt()).addUnionChild(TypeDescription.createString())).addField("decimal",TypeDescription.createDecimal().withPrecision(38).withScale(18));
  HiveDecimal maxValue=HiveDecimal.create("10000000000000000000");
  Writer writer=OrcFile.createWriter(testFilePath,OrcFile.writerOptions(conf).setSchema(schema).stripeSize(1000).compress(CompressionKind.NONE).bufferSize(100).blockPadding(false));
  VectorizedRowBatch batch=schema.createRowBatch();
  batch.size=6;
  setUnion(batch,0,Timestamp.valueOf("2000-03-12 15:00:00"),0,42,null,new HiveDecimalWritable("12345678.6547456"));
  setUnion(batch,1,Timestamp.valueOf("2000-03-20 12:00:00.123456789"),1,null,"hello",new HiveDecimalWritable("-5643.234"));
  setUnion(batch,2,null,null,null,null,null);
  setUnion(batch,3,null,0,null,null,null);
  setUnion(batch,4,null,1,null,null,null);
  setUnion(batch,5,Timestamp.valueOf("1970-01-01 00:00:00"),0,200000,null,new HiveDecimalWritable("10000000000000000000"));
  writer.addRowBatch(batch);
  batch.reset();
  Random rand=new Random(42);
  for (int i=1970; i < 2038; ++i) {
    Timestamp ts=Timestamp.valueOf(i + "-05-05 12:34:56." + i);
    HiveDecimal dec=HiveDecimal.create(new BigInteger(64,rand),rand.nextInt(18));
    if ((i & 1) == 0) {
      setUnion(batch,batch.size++,ts,0,i * i,null,new HiveDecimalWritable(dec));
    }
 else {
      setUnion(batch,batch.size++,ts,1,null,Integer.toString(i * i),new HiveDecimalWritable(dec));
    }
    if (maxValue.compareTo(dec) < 0) {
      maxValue=dec;
    }
  }
  writer.addRowBatch(batch);
  batch.reset();
  batch.size=1000;
  for (int c=0; c < batch.cols.length; ++c) {
    batch.cols[c].setRepeating(true);
  }
  setUnion(batch,0,null,0,1732050807,null,null);
  for (int i=0; i < 5; ++i) {
    writer.addRowBatch(batch);
  }
  batch.reset();
  batch.size=3;
  setUnion(batch,0,null,0,0,null,null);
  setUnion(batch,1,null,0,10,null,null);
  setUnion(batch,2,null,0,138,null,null);
  writer.addRowBatch(batch);
  writer.close();
  Reader reader=OrcFile.createReader(testFilePath,OrcFile.readerOptions(conf).filesystem(fs));
  schema=writer.getSchema();
  assertEquals(5,schema.getMaximumId());
  boolean[] expected=new boolean[]{false,false,false,false,false,false};
  boolean[] included=OrcUtils.includeColumns("",schema);
  assertEquals(true,Arrays.equals(expected,included));
  expected=new boolean[]{false,true,false,false,false,true};
  included=OrcUtils.includeColumns("time,decimal",schema);
  assertEquals(true,Arrays.equals(expected,included));
  expected=new boolean[]{false,false,true,true,true,false};
  included=OrcUtils.includeColumns("union",schema);
  assertEquals(true,Arrays.equals(expected,included));
  assertEquals(false,reader.getMetadataKeys().iterator().hasNext());
  assertEquals(5077,reader.getNumberOfRows());
  DecimalColumnStatistics stats=(DecimalColumnStatistics)reader.getStatistics()[5];
  assertEquals(71,stats.getNumberOfValues());
  assertEquals(HiveDecimal.create("-5643.234"),stats.getMinimum());
  assertEquals(maxValue,stats.getMaximum());
  int stripeCount=0;
  int rowCount=0;
  long currentOffset=-1;
  for (  StripeInformation stripe : reader.getStripes()) {
    stripeCount+=1;
    rowCount+=stripe.getNumberOfRows();
    if (currentOffset < 0) {
      currentOffset=stripe.getOffset() + stripe.getLength();
    }
 else {
      assertEquals(currentOffset,stripe.getOffset());
      currentOffset+=stripe.getLength();
    }
  }
  assertEquals(reader.getNumberOfRows(),rowCount);
  assertEquals(2,stripeCount);
  assertEquals(reader.getContentLength(),currentOffset);
  RecordReader rows=reader.rows();
  assertEquals(0,rows.getRowNumber());
  assertEquals(0.0,rows.getProgress(),0.000001);
  assertEquals(true,rows.hasNext());
  OrcStruct row=(OrcStruct)rows.next(null);
  assertEquals(1,rows.getRowNumber());
  ObjectInspector inspector=reader.getObjectInspector();
  assertEquals("struct<time:timestamp,union:uniontype<int,string>,decimal:decimal(38,18)>",inspector.getTypeName());
  assertEquals(new TimestampWritable(Timestamp.valueOf("2000-03-12 15:00:00")),row.getFieldValue(0));
  OrcUnion union=(OrcUnion)row.getFieldValue(1);
  assertEquals(0,union.getTag());
  assertEquals(new IntWritable(42),union.getObject());
  assertEquals(new HiveDecimalWritable(HiveDecimal.create("12345678.6547456")),row.getFieldValue(2));
  row=(OrcStruct)rows.next(row);
  assertEquals(2,rows.getRowNumber());
  assertEquals(new TimestampWritable(Timestamp.valueOf("2000-03-20 12:00:00.123456789")),row.getFieldValue(0));
  assertEquals(1,union.getTag());
  assertEquals(new Text("hello"),union.getObject());
  assertEquals(new HiveDecimalWritable(HiveDecimal.create("-5643.234")),row.getFieldValue(2));
  row=(OrcStruct)rows.next(row);
  assertEquals(null,row.getFieldValue(0));
  assertEquals(null,row.getFieldValue(1));
  assertEquals(null,row.getFieldValue(2));
  row=(OrcStruct)rows.next(row);
  assertEquals(null,row.getFieldValue(0));
  union=(OrcUnion)row.getFieldValue(1);
  assertEquals(0,union.getTag());
  assertEquals(null,union.getObject());
  assertEquals(null,row.getFieldValue(2));
  row=(OrcStruct)rows.next(row);
  assertEquals(null,row.getFieldValue(0));
  assertEquals(1,union.getTag());
  assertEquals(null,union.getObject());
  assertEquals(null,row.getFieldValue(2));
  row=(OrcStruct)rows.next(row);
  assertEquals(new TimestampWritable(Timestamp.valueOf("1970-01-01 00:00:00")),row.getFieldValue(0));
  assertEquals(new IntWritable(200000),union.getObject());
  assertEquals(new HiveDecimalWritable(HiveDecimal.create("10000000000000000000")),row.getFieldValue(2));
  rand=new Random(42);
  for (int i=1970; i < 2038; ++i) {
    row=(OrcStruct)rows.next(row);
    assertEquals(new TimestampWritable(Timestamp.valueOf(i + "-05-05 12:34:56." + i)),row.getFieldValue(0));
    if ((i & 1) == 0) {
      assertEquals(0,union.getTag());
      assertEquals(new IntWritable(i * i),union.getObject());
    }
 else {
      assertEquals(1,union.getTag());
      assertEquals(new Text(Integer.toString(i * i)),union.getObject());
    }
    assertEquals(new HiveDecimalWritable(HiveDecimal.create(new BigInteger(64,rand),rand.nextInt(18))),row.getFieldValue(2));
  }
  for (int i=0; i < 5000; ++i) {
    row=(OrcStruct)rows.next(row);
    assertEquals(new IntWritable(1732050807),union.getObject());
  }
  row=(OrcStruct)rows.next(row);
  assertEquals(new IntWritable(0),union.getObject());
  row=(OrcStruct)rows.next(row);
  assertEquals(new IntWritable(10),union.getObject());
  row=(OrcStruct)rows.next(row);
  assertEquals(new IntWritable(138),union.getObject());
  assertEquals(false,rows.hasNext());
  assertEquals(1.0,rows.getProgress(),0.00001);
  assertEquals(reader.getNumberOfRows(),rows.getRowNumber());
  rows.seekToRow(1);
  row=(OrcStruct)rows.next(row);
  assertEquals(new TimestampWritable(Timestamp.valueOf("2000-03-20 12:00:00.123456789")),row.getFieldValue(0));
  assertEquals(1,union.getTag());
  assertEquals(new Text("hello"),union.getObject());
  assertEquals(new HiveDecimalWritable(HiveDecimal.create("-5643.234")),row.getFieldValue(2));
  rows.close();
}
