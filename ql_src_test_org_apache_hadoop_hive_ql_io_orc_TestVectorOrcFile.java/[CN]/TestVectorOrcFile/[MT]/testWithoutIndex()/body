{
  TypeDescription schema=createInnerSchema();
  Writer writer=OrcFile.createWriter(testFilePath,OrcFile.writerOptions(conf).setSchema(schema).stripeSize(5000).compress(CompressionKind.SNAPPY).bufferSize(1000).rowIndexStride(0));
  VectorizedRowBatch batch=schema.createRowBatch();
  Random rand=new Random(24);
  batch.size=5;
  for (int c=0; c < batch.cols.length; ++c) {
    batch.cols[c].setRepeating(true);
  }
  for (int i=0; i < 10000; ++i) {
    ((LongColumnVector)batch.cols[0]).vector[0]=rand.nextInt();
    ((BytesColumnVector)batch.cols[1]).setVal(0,Integer.toBinaryString(rand.nextInt()).getBytes());
    writer.addRowBatch(batch);
  }
  writer.close();
  Reader reader=OrcFile.createReader(testFilePath,OrcFile.readerOptions(conf).filesystem(fs));
  assertEquals(50000,reader.getNumberOfRows());
  assertEquals(0,reader.getRowIndexStride());
  StripeInformation stripe=reader.getStripes().iterator().next();
  assertEquals(true,stripe.getDataLength() != 0);
  assertEquals(0,stripe.getIndexLength());
  RecordReader rows=reader.rows();
  rand=new Random(24);
  OrcStruct row=null;
  for (int i=0; i < 10000; ++i) {
    int intVal=rand.nextInt();
    String strVal=Integer.toBinaryString(rand.nextInt());
    for (int j=0; j < 5; ++j) {
      assertEquals(true,rows.hasNext());
      row=(OrcStruct)rows.next(row);
      assertEquals(intVal,((IntWritable)row.getFieldValue(0)).get());
      assertEquals(strVal,row.getFieldValue(1).toString());
    }
  }
  assertEquals(false,rows.hasNext());
  rows.close();
}
