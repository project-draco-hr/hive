{
  TypeDescription schema=TypeDescription.createStruct().addField("list",TypeDescription.createList(TypeDescription.createLong()));
  Writer writer=OrcFile.createWriter(testFilePath,OrcFile.writerOptions(conf).setSchema(schema));
  VectorizedRowBatch batch=schema.createRowBatch();
  batch.size=1024;
  ListColumnVector list=(ListColumnVector)batch.cols[0];
  list.noNulls=false;
  for (int r=0; r < 1024; ++r) {
    if (r < 200) {
      list.isNull[r]=true;
    }
 else     if (r < 300) {
      list.offsets[r]=r - 200;
      list.lengths[r]=1;
    }
 else     if (r < 400) {
      list.isNull[r]=true;
    }
 else     if (r < 500) {
      list.offsets[r]=r - 300;
      list.lengths[r]=1;
    }
 else     if (r < 600) {
      list.isNull[r]=true;
    }
 else     if (r < 700) {
      list.offsets[r]=r;
      list.lengths[r]=2;
    }
 else {
      list.isNull[r]=true;
    }
    ((LongColumnVector)list.child).vector[r]=r * 10;
  }
  writer.addRowBatch(batch);
  writer.close();
  Reader reader=OrcFile.createReader(testFilePath,OrcFile.readerOptions(conf));
  RecordReader rows=reader.rows();
  OrcStruct row=null;
  for (int r=0; r < 1024; ++r) {
    assertEquals(true,rows.hasNext());
    row=(OrcStruct)rows.next(row);
    List inner=(List)row.getFieldValue(0);
    if (r < 200) {
      assertEquals("row " + r,null,inner);
    }
 else     if (r < 300) {
      assertEquals("row " + r,"[" + ((r - 200) * 10) + "]",inner.toString());
    }
 else     if (r < 400) {
      assertEquals("row " + r,null,inner);
    }
 else     if (r < 500) {
      assertEquals("row " + r,"[" + ((r - 300) * 10) + "]",inner.toString());
    }
 else     if (r < 600) {
      assertEquals("row " + r,null,inner);
    }
 else     if (r < 700) {
      assertEquals("row " + r,"[" + (10 * r) + ", "+ (10 * (r + 1))+ "]",inner.toString());
    }
 else {
      assertEquals("row " + r,null,inner);
    }
  }
  assertEquals(false,rows.hasNext());
}
