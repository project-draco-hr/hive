{
  TypeDescription schema=createInnerSchema();
  MyMemoryManager memory=new MyMemoryManager(conf,10000,0.1);
  Writer writer=OrcFile.createWriter(testFilePath,OrcFile.writerOptions(conf).setSchema(schema).compress(CompressionKind.NONE).stripeSize(50000).bufferSize(100).rowIndexStride(0).memory(memory).version(OrcFile.Version.V_0_12));
  VectorizedRowBatch batch=schema.createRowBatch();
  assertEquals(testFilePath,memory.path);
  batch.size=1;
  for (int i=0; i < 2500; ++i) {
    ((LongColumnVector)batch.cols[0]).vector[0]=i * 300;
    ((BytesColumnVector)batch.cols[1]).setVal(0,Integer.toHexString(10 * i).getBytes());
    writer.addRowBatch(batch);
  }
  writer.close();
  assertEquals(null,memory.path);
  Reader reader=OrcFile.createReader(testFilePath,OrcFile.readerOptions(conf).filesystem(fs));
  int i=0;
  for (  StripeInformation stripe : reader.getStripes()) {
    i+=1;
    assertTrue("stripe " + i + " is too long at "+ stripe.getDataLength(),stripe.getDataLength() < 5000);
  }
  assertEquals(3,i);
  assertEquals(2500,reader.getNumberOfRows());
}
