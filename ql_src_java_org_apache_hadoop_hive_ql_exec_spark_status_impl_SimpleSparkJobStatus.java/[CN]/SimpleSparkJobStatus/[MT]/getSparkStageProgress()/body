{
  Map<String,SparkStageProgress> stageProgresses=new HashMap<String,SparkStageProgress>();
  int[] stageIds=jobStateListener.getStageIds(jobId);
  if (stageIds != null) {
    for (    int stageId : stageIds) {
      List<StageInfo> stageInfos=getStageInfo(stageId);
      for (      StageInfo stageInfo : stageInfos) {
        Tuple2<Object,Object> tuple2=new Tuple2<Object,Object>(stageInfo.stageId(),stageInfo.attemptId());
        UIData.StageUIData uiData=jobProgressListener.stageIdToData().get(tuple2).get();
        if (uiData != null) {
          int runningTaskCount=uiData.numActiveTasks();
          int completedTaskCount=uiData.numCompleteTasks();
          int failedTaskCount=uiData.numFailedTasks();
          int totalTaskCount=stageInfo.numTasks();
          int killedTaskCount=0;
          long costTime;
          Option<Object> startOption=stageInfo.submissionTime();
          Option<Object> completeOption=stageInfo.completionTime();
          if (startOption.isEmpty()) {
            costTime=0;
          }
 else           if (completeOption.isEmpty()) {
            long startTime=(Long)startOption.get();
            costTime=System.currentTimeMillis() - startTime;
          }
 else {
            long startTime=(Long)startOption.get();
            long completeTime=(Long)completeOption.get();
            costTime=completeTime - startTime;
          }
          SparkStageProgress stageProgress=new SparkStageProgress(totalTaskCount,completedTaskCount,runningTaskCount,failedTaskCount,killedTaskCount,costTime);
          stageProgresses.put(stageInfo.stageId() + "_" + stageInfo.attemptId(),stageProgress);
        }
      }
    }
  }
  return stageProgresses;
}
