{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
          org.apache.thrift.protocol.TList _list252=iprot.readListBegin();
          struct.fieldSchemas=new ArrayList<FieldSchema>(_list252.size);
          for (int _i253=0; _i253 < _list252.size; ++_i253) {
            FieldSchema _elem254;
            _elem254=new FieldSchema();
            _elem254.read(iprot);
            struct.fieldSchemas.add(_elem254);
          }
          iprot.readListEnd();
        }
        struct.setFieldSchemasIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map255=iprot.readMapBegin();
      struct.properties=new HashMap<String,String>(2 * _map255.size);
      for (int _i256=0; _i256 < _map255.size; ++_i256) {
        String _key257;
        String _val258;
        _key257=iprot.readString();
        _val258=iprot.readString();
        struct.properties.put(_key257,_val258);
      }
      iprot.readMapEnd();
    }
    struct.setPropertiesIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
