{
  org.apache.thrift.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == org.apache.thrift.protocol.TType.LIST) {
{
          org.apache.thrift.protocol.TList _list93=iprot.readListBegin();
          this.fieldSchemas=new ArrayList<FieldSchema>(_list93.size);
          for (int _i94=0; _i94 < _list93.size; ++_i94) {
            FieldSchema _elem95;
            _elem95=new FieldSchema();
            _elem95.read(iprot);
            this.fieldSchemas.add(_elem95);
          }
          iprot.readListEnd();
        }
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map96=iprot.readMapBegin();
      this.properties=new HashMap<String,String>(2 * _map96.size);
      for (int _i97=0; _i97 < _map96.size; ++_i97) {
        String _key98;
        String _val99;
        _key98=iprot.readString();
        _val99=iprot.readString();
        this.properties.put(_key98,_val99);
      }
      iprot.readMapEnd();
    }
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
