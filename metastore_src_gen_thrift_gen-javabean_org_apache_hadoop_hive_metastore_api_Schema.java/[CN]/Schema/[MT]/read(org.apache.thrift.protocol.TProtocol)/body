{
  org.apache.thrift.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == org.apache.thrift.protocol.TType.LIST) {
{
          org.apache.thrift.protocol.TList _list110=iprot.readListBegin();
          this.fieldSchemas=new ArrayList<FieldSchema>(_list110.size);
          for (int _i111=0; _i111 < _list110.size; ++_i111) {
            FieldSchema _elem112;
            _elem112=new FieldSchema();
            _elem112.read(iprot);
            this.fieldSchemas.add(_elem112);
          }
          iprot.readListEnd();
        }
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map113=iprot.readMapBegin();
      this.properties=new HashMap<String,String>(2 * _map113.size);
      for (int _i114=0; _i114 < _map113.size; ++_i114) {
        String _key115;
        String _val116;
        _key115=iprot.readString();
        _val116=iprot.readString();
        this.properties.put(_key115,_val116);
      }
      iprot.readMapEnd();
    }
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
