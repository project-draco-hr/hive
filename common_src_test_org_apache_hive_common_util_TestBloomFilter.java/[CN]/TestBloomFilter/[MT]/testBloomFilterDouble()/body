{
  BloomFilter bf=new BloomFilter(10000);
  double val=Double.MIN_VALUE;
  double val1=1.1d;
  double val2=2.2d;
  double val3=Double.MAX_VALUE;
  assertEquals(false,bf.testDouble(val));
  assertEquals(false,bf.testDouble(val1));
  assertEquals(false,bf.testDouble(val2));
  assertEquals(false,bf.testDouble(val3));
  bf.addDouble(val);
  assertEquals(true,bf.testDouble(val));
  assertEquals(false,bf.testDouble(val1));
  assertEquals(false,bf.testDouble(val2));
  assertEquals(false,bf.testDouble(val3));
  bf.addDouble(val1);
  assertEquals(true,bf.testDouble(val));
  assertEquals(true,bf.testDouble(val1));
  assertEquals(false,bf.testDouble(val2));
  assertEquals(false,bf.testDouble(val3));
  bf.addDouble(val2);
  assertEquals(true,bf.testDouble(val));
  assertEquals(true,bf.testDouble(val1));
  assertEquals(true,bf.testDouble(val2));
  assertEquals(false,bf.testDouble(val3));
  bf.addDouble(val3);
  assertEquals(true,bf.testDouble(val));
  assertEquals(true,bf.testDouble(val1));
  assertEquals(true,bf.testDouble(val2));
  assertEquals(true,bf.testDouble(val3));
  double randVal=0;
  for (int i=0; i < COUNT; i++) {
    randVal=rand.nextDouble();
    bf.addDouble(randVal);
  }
  assertEquals(true,bf.testDouble(randVal));
  assertEquals(false,bf.testDouble(-120.2d));
  assertEquals(7800,bf.sizeInBytes());
}
