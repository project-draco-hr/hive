{
  BloomFilter bf=new BloomFilter(10000);
  int val=Integer.MIN_VALUE;
  int val1=1;
  int val2=2;
  int val3=Integer.MAX_VALUE;
  assertEquals(false,bf.testLong(val));
  assertEquals(false,bf.testLong(val1));
  assertEquals(false,bf.testLong(val2));
  assertEquals(false,bf.testLong(val3));
  bf.addLong(val);
  assertEquals(true,bf.testLong(val));
  assertEquals(false,bf.testLong(val1));
  assertEquals(false,bf.testLong(val2));
  assertEquals(false,bf.testLong(val3));
  bf.addLong(val1);
  assertEquals(true,bf.testLong(val));
  assertEquals(true,bf.testLong(val1));
  assertEquals(false,bf.testLong(val2));
  assertEquals(false,bf.testLong(val3));
  bf.addLong(val2);
  assertEquals(true,bf.testLong(val));
  assertEquals(true,bf.testLong(val1));
  assertEquals(true,bf.testLong(val2));
  assertEquals(false,bf.testLong(val3));
  bf.addLong(val3);
  assertEquals(true,bf.testLong(val));
  assertEquals(true,bf.testLong(val1));
  assertEquals(true,bf.testLong(val2));
  assertEquals(true,bf.testLong(val3));
  int randVal=0;
  for (int i=0; i < COUNT; i++) {
    randVal=rand.nextInt();
    bf.addLong(randVal);
  }
  assertEquals(true,bf.testLong(randVal));
  assertEquals(false,bf.testLong(-120));
  assertEquals(7800,bf.sizeInBytes());
}
