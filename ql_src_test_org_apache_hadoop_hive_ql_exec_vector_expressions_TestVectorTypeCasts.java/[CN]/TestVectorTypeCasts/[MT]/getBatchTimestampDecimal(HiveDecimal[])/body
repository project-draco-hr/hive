{
  Random r=new Random(994);
  VectorizedRowBatch b=new VectorizedRowBatch(2);
  TimestampColumnVector tcv;
  b.cols[0]=tcv=new TimestampColumnVector(hiveDecimalValues.length);
  b.cols[1]=new DecimalColumnVector(hiveDecimalValues.length,HiveDecimal.SYSTEM_DEFAULT_PRECISION,HiveDecimal.SYSTEM_DEFAULT_SCALE);
  for (int i=0; i < hiveDecimalValues.length; i++) {
    int optionalNanos=0;
switch (r.nextInt(4)) {
case 0:
      break;
case 1:
    optionalNanos=r.nextInt((int)NANOSECONDS_PER_SECOND);
  break;
case 2:
optionalNanos=r.nextInt((int)MILLISECONDS_PER_SECOND) * (int)NANOSECONDS_PER_MILLISSECOND;
break;
case 3:
optionalNanos=r.nextInt((int)NANOSECONDS_PER_MILLISSECOND);
break;
}
long millis=RandomTypeUtil.randomMillis(r);
Timestamp ts=new Timestamp(millis);
ts.setNanos(optionalNanos);
TimestampWritable tsw=new TimestampWritable(ts);
hiveDecimalValues[i]=tsw.getHiveDecimal();
tcv.set(i,ts);
}
b.size=hiveDecimalValues.length;
return b;
}
