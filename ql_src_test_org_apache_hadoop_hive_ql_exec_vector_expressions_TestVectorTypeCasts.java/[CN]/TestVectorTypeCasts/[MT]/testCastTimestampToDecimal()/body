{
  HiveDecimal[] hiveDecimalValues=new HiveDecimal[500];
  VectorizedRowBatch b=getBatchTimestampDecimal(hiveDecimalValues);
  VectorExpression expr=new CastTimestampToDecimal(0,1);
  TimestampColumnVector inT=(TimestampColumnVector)b.cols[0];
  expr.evaluate(b);
  DecimalColumnVector r=(DecimalColumnVector)b.cols[1];
  for (int i=0; i < hiveDecimalValues.length; i++) {
    HiveDecimal hiveDecimal=r.vector[i].getHiveDecimal();
    HiveDecimal expectedHiveDecimal=hiveDecimalValues[i];
    if (!hiveDecimal.equals(expectedHiveDecimal)) {
      assertTrue(false);
    }
  }
  b.cols[1]=r=new DecimalColumnVector(hiveDecimalValues.length,5,2);
  expr.evaluate(b);
  r=(DecimalColumnVector)b.cols[1];
  for (int i=0; i < hiveDecimalValues.length; i++) {
    HiveDecimal hiveDecimal=r.vector[i].getHiveDecimal();
    HiveDecimal expectedHiveDecimal=hiveDecimalValues[i];
    if (HiveDecimal.enforcePrecisionScale(expectedHiveDecimal,5,2) == null) {
      assertTrue(r.isNull[i]);
    }
 else {
      assertTrue(!r.isNull[i]);
      if (!hiveDecimal.equals(expectedHiveDecimal)) {
        assertTrue(false);
      }
    }
  }
}
