{
  TreeReader[] treeReaders=new TreeReader[numCols];
  for (int i=0; i < numCols; i++) {
    int columnIndex=batch.getColumnIxs()[i];
    ColumnStreamData[] streamBuffers=batch.getColumnData()[i];
    OrcProto.Type columnType=types.get(columnIndex);
    OrcProto.ColumnEncoding columnEncoding=encodings.get(columnIndex);
    ColumnStreamData present=streamBuffers[OrcProto.Stream.Kind.PRESENT_VALUE], data=streamBuffers[OrcProto.Stream.Kind.DATA_VALUE], dictionary=streamBuffers[OrcProto.Stream.Kind.DICTIONARY_DATA_VALUE], lengths=streamBuffers[OrcProto.Stream.Kind.LENGTH_VALUE], secondary=streamBuffers[OrcProto.Stream.Kind.SECONDARY_VALUE];
switch (columnType.getKind()) {
case BINARY:
      treeReaders[i]=BinaryStreamReader.builder().setColumnIndex(columnIndex).setPresentStream(present).setDataStream(data).setLengthStream(lengths).setCompressionCodec(codec).setColumnEncoding(columnEncoding).build();
    break;
case BOOLEAN:
  treeReaders[i]=BooleanStreamReader.builder().setColumnIndex(columnIndex).setPresentStream(present).setDataStream(data).setCompressionCodec(codec).build();
break;
case BYTE:
treeReaders[i]=ByteStreamReader.builder().setColumnIndex(columnIndex).setPresentStream(present).setDataStream(data).setCompressionCodec(codec).build();
break;
case SHORT:
treeReaders[i]=ShortStreamReader.builder().setColumnIndex(columnIndex).setPresentStream(present).setDataStream(data).setCompressionCodec(codec).setColumnEncoding(columnEncoding).build();
break;
case INT:
treeReaders[i]=IntStreamReader.builder().setColumnIndex(columnIndex).setPresentStream(present).setDataStream(data).setCompressionCodec(codec).setColumnEncoding(columnEncoding).build();
break;
case LONG:
treeReaders[i]=LongStreamReader.builder().setColumnIndex(columnIndex).setPresentStream(present).setDataStream(data).setCompressionCodec(codec).setColumnEncoding(columnEncoding).skipCorrupt(skipCorrupt).build();
break;
case FLOAT:
treeReaders[i]=FloatStreamReader.builder().setColumnIndex(columnIndex).setPresentStream(present).setDataStream(data).setCompressionCodec(codec).build();
break;
case DOUBLE:
treeReaders[i]=DoubleStreamReader.builder().setColumnIndex(columnIndex).setPresentStream(present).setDataStream(data).setCompressionCodec(codec).build();
break;
case CHAR:
treeReaders[i]=CharStreamReader.builder().setColumnIndex(columnIndex).setMaxLength(columnType.getMaximumLength()).setPresentStream(present).setDataStream(data).setLengthStream(lengths).setDictionaryStream(dictionary).setCompressionCodec(codec).setColumnEncoding(columnEncoding).build();
break;
case VARCHAR:
treeReaders[i]=VarcharStreamReader.builder().setColumnIndex(columnIndex).setMaxLength(columnType.getMaximumLength()).setPresentStream(present).setDataStream(data).setLengthStream(lengths).setDictionaryStream(dictionary).setCompressionCodec(codec).setColumnEncoding(columnEncoding).build();
break;
case STRING:
treeReaders[i]=StringStreamReader.builder().setColumnIndex(columnIndex).setPresentStream(present).setDataStream(data).setLengthStream(lengths).setDictionaryStream(dictionary).setCompressionCodec(codec).setColumnEncoding(columnEncoding).build();
break;
case DECIMAL:
treeReaders[i]=DecimalStreamReader.builder().setColumnIndex(columnIndex).setPrecision(columnType.getPrecision()).setScale(columnType.getScale()).setPresentStream(present).setValueStream(data).setScaleStream(secondary).setCompressionCodec(codec).setColumnEncoding(columnEncoding).build();
break;
case TIMESTAMP:
treeReaders[i]=TimestampStreamReader.builder().setColumnIndex(columnIndex).setPresentStream(present).setSecondsStream(data).setNanosStream(secondary).setCompressionCodec(codec).setColumnEncoding(columnEncoding).skipCorrupt(skipCorrupt).build();
break;
case DATE:
treeReaders[i]=DateStreamReader.builder().setColumnIndex(columnIndex).setPresentStream(present).setDataStream(data).setCompressionCodec(codec).setColumnEncoding(columnEncoding).build();
break;
default :
throw new UnsupportedOperationException("Data type not supported yet! " + columnType);
}
}
return treeReaders;
}
