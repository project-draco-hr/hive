{
  Random rand=new Random(SEED);
  DoubleColumnVector outputColumnVector=VectorizedRowGroupGenUtil.generateDoubleColumnVector(false,true,BATCH_SIZE,rand);
  DoubleColumnVector inputColumnVector=VectorizedRowGroupGenUtil.generateDoubleColumnVector(true,true,BATCH_SIZE,rand);
  VectorizedRowBatch rowBatch=new VectorizedRowBatch(2,BATCH_SIZE);
  rowBatch.cols[0]=inputColumnVector;
  rowBatch.cols[1]=outputColumnVector;
  long scalarValue=0;
  do {
    scalarValue=rand.nextLong();
  }
 while (scalarValue == 0);
  DoubleColAddLongScalar vectorExpression=new DoubleColAddLongScalar(0,scalarValue,1);
  vectorExpression.evaluate(rowBatch);
  assertEquals("Output column vector is repeating state does not match operand column",inputColumnVector.isRepeating,outputColumnVector.isRepeating);
  assertEquals("Output column vector no nulls state does not match operand column",inputColumnVector.noNulls,outputColumnVector.noNulls);
  if (!outputColumnVector.noNulls && !outputColumnVector.isRepeating) {
    for (int i=0; i < BATCH_SIZE; i++) {
      assertEquals("Output vector doesn't match input vector's is null state for index",inputColumnVector.isNull[i],outputColumnVector.isNull[i]);
    }
  }
}
