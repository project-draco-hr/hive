{
  String file=batch.batchKey.file;
  ColumnStream[] columnStreams=new ColumnStream[numCols];
  for (int i=0; i < numCols; i++) {
    int colIx=batch.columnIxs[i];
    int rgIdx=batch.batchKey.rgIx;
    OrcProto.RowIndexEntry rowIndex=stripeMetadata.getRowIndexes()[colIx].getEntry(rgIdx);
    EncodedColumnBatch.StreamBuffer[] streamBuffers=batch.columnData[i];
    OrcProto.Type colType=fileMetadata.getTypes().get(colIx);
    CompressionCodec codec=fileMetadata.getCompressionCodec();
    int bufferSize=fileMetadata.getCompressionBufferSize();
    OrcProto.ColumnEncoding columnEncoding=stripeMetadata.getEncodings().get(colIx);
    ColumnVector cv=null;
    EncodedColumnBatch.StreamBuffer present=null;
    EncodedColumnBatch.StreamBuffer data=null;
    EncodedColumnBatch.StreamBuffer dictionary=null;
    EncodedColumnBatch.StreamBuffer lengths=null;
    EncodedColumnBatch.StreamBuffer secondary=null;
switch (colType.getKind()) {
case SHORT:
case INT:
case LONG:
      if (streamBuffers.length != 2) {
        present=null;
        data=streamBuffers[0];
      }
 else {
        present=streamBuffers[0];
        data=streamBuffers[1];
      }
    columnStreams[i]=new IntegerColumnStream(file,colIx,present,data,columnEncoding,codec,bufferSize,rowIndex);
  break;
case FLOAT:
if (streamBuffers.length != 2) {
  present=null;
  data=streamBuffers[0];
}
 else {
  present=streamBuffers[0];
  data=streamBuffers[1];
}
columnStreams[i]=new FloatColumnStream(file,colIx,present,data,codec,bufferSize,rowIndex);
break;
case DOUBLE:
if (streamBuffers.length != 2) {
present=null;
data=streamBuffers[0];
}
 else {
present=streamBuffers[0];
data=streamBuffers[1];
}
columnStreams[i]=new DoubleColumnStream(file,colIx,present,data,codec,bufferSize,rowIndex);
break;
case CHAR:
case VARCHAR:
case STRING:
present=streamBuffers[0];
data=streamBuffers[1];
dictionary=streamBuffers[2];
lengths=streamBuffers[3];
columnStreams[i]=new StringColumnStream(file,colIx,present,data,dictionary,lengths,columnEncoding,codec,bufferSize,rowIndex);
break;
default :
throw new UnsupportedOperationException("Data type not supported yet! " + colType);
}
}
return columnStreams;
}
