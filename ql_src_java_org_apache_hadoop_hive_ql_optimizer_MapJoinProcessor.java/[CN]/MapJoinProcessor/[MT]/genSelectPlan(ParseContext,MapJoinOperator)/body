{
  List<Operator<? extends OperatorDesc>> childOps=input.getChildOperators();
  input.setChildOperators(null);
  RowResolver inputRR=pctx.getOpParseCtx().get(input).getRowResolver();
  ArrayList<ExprNodeDesc> exprs=new ArrayList<ExprNodeDesc>();
  ArrayList<String> outputs=new ArrayList<String>();
  List<String> outputCols=input.getConf().getOutputColumnNames();
  RowResolver outputRS=new RowResolver();
  Map<String,ExprNodeDesc> colExprMap=new HashMap<String,ExprNodeDesc>();
  for (int i=0; i < outputCols.size(); i++) {
    String internalName=outputCols.get(i);
    String[] nm=inputRR.reverseLookup(internalName);
    ColumnInfo valueInfo=inputRR.get(nm[0],nm[1]);
    ExprNodeDesc colDesc=new ExprNodeColumnDesc(valueInfo.getType(),valueInfo.getInternalName(),nm[0],valueInfo.getIsVirtualCol());
    exprs.add(colDesc);
    outputs.add(internalName);
    outputRS.put(nm[0],nm[1],new ColumnInfo(internalName,valueInfo.getType(),nm[0],valueInfo.getIsVirtualCol(),valueInfo.isHiddenVirtualCol()));
    colExprMap.put(internalName,colDesc);
  }
  SelectDesc select=new SelectDesc(exprs,outputs,false);
  SelectOperator sel=(SelectOperator)putOpInsertMap(pctx,OperatorFactory.getAndMakeChild(select,new RowSchema(inputRR.getColumnInfos()),input),inputRR);
  sel.setColumnExprMap(colExprMap);
  sel.setChildOperators(childOps);
  for (  Operator<? extends OperatorDesc> ch : childOps) {
    ch.replaceParent(input,sel);
  }
}
