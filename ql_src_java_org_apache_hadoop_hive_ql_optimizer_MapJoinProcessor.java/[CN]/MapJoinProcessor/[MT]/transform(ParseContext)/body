{
  List<MapJoinOperator> listMapJoinOps=new ArrayList<MapJoinOperator>();
  if (pactx.getJoinOps() != null) {
    Set<JoinOperator> joinMap=new HashSet<JoinOperator>();
    Set<MapJoinOperator> mapJoinMap=pactx.getMapJoinOps();
    if (mapJoinMap == null) {
      mapJoinMap=new HashSet<MapJoinOperator>();
      pactx.setMapJoinOps(mapJoinMap);
    }
    Iterator<JoinOperator> joinCtxIter=pactx.getJoinOps().iterator();
    while (joinCtxIter.hasNext()) {
      JoinOperator joinOp=joinCtxIter.next();
      int mapJoinPos=mapSideJoin(joinOp);
      if (mapJoinPos >= 0) {
        MapJoinOperator mapJoinOp=generateMapJoinOperator(pactx,joinOp,mapJoinPos);
        listMapJoinOps.add(mapJoinOp);
        mapJoinOp.getConf().setQBJoinTreeProps(joinOp.getConf());
        mapJoinMap.add(mapJoinOp);
      }
 else {
        joinOp.getConf().setQBJoinTreeProps(joinOp.getConf());
        joinMap.add(joinOp);
      }
    }
    pactx.setJoinOps(joinMap);
  }
  List<AbstractMapJoinOperator<? extends MapJoinDesc>> listMapJoinOpsNoRed=new ArrayList<AbstractMapJoinOperator<? extends MapJoinDesc>>();
  Map<Rule,NodeProcessor> opRules=new LinkedHashMap<Rule,NodeProcessor>();
  opRules.put(new RuleRegExp("R0",MapJoinOperator.getOperatorName() + "%"),getCurrentMapJoin());
  opRules.put(new RuleRegExp("R1",MapJoinOperator.getOperatorName() + "%.*" + FileSinkOperator.getOperatorName()+ "%"),getMapJoinFS());
  opRules.put(new RuleRegExp("R2",MapJoinOperator.getOperatorName() + "%.*" + ReduceSinkOperator.getOperatorName()+ "%"),getMapJoinDefault());
  opRules.put(new RuleRegExp("R4",MapJoinOperator.getOperatorName() + "%.*" + UnionOperator.getOperatorName()+ "%"),getMapJoinDefault());
  Dispatcher disp=new DefaultRuleDispatcher(getDefault(),opRules,new MapJoinWalkerCtx(listMapJoinOpsNoRed,pactx));
  GraphWalker ogw=new GenMapRedWalker(disp);
  ArrayList<Node> topNodes=new ArrayList<Node>();
  topNodes.addAll(listMapJoinOps);
  ogw.startWalking(topNodes,null);
  pactx.setListMapJoinOpsNoReducer(listMapJoinOpsNoRed);
  return pactx;
}
