{
  SMBJoinDesc smbJoinDesc=smbJoinOp.getConf();
  List<ExprNodeDesc> keyCols=smbJoinDesc.getKeys().get(Byte.valueOf((byte)0));
  TableDesc keyTableDesc=PlanUtils.getMapJoinKeyTableDesc(hconf,PlanUtils.getFieldSchemasFromColumnList(keyCols,MAPJOINKEY_FIELDPREFIX));
  MapJoinDesc mapJoinDesc=new MapJoinDesc(smbJoinDesc.getKeys(),keyTableDesc,smbJoinDesc.getExprs(),smbJoinDesc.getValueTblDescs(),smbJoinDesc.getValueTblDescs(),smbJoinDesc.getOutputColumnNames(),bigTablePos,smbJoinDesc.getConds(),smbJoinDesc.getFilters(),smbJoinDesc.isNoOuterJoin(),smbJoinDesc.getDumpFilePrefix());
  mapJoinDesc.setStatistics(smbJoinDesc.getStatistics());
  RowResolver joinRS=opParseCtxMap.get(smbJoinOp).getRowResolver();
  MapJoinOperator mapJoinOp=(MapJoinOperator)OperatorFactory.getAndMakeChild(mapJoinDesc,joinRS.getRowSchema(),new ArrayList<Operator<? extends OperatorDesc>>());
  OpParseContext ctx=new OpParseContext(joinRS);
  opParseCtxMap.put(mapJoinOp,ctx);
  List<Operator<? extends OperatorDesc>> childOps=smbJoinOp.getChildOperators();
  for (  Operator<? extends OperatorDesc> childOp : childOps) {
    childOp.replaceParent(smbJoinOp,mapJoinOp);
  }
  mapJoinOp.setChildOperators(childOps);
  smbJoinOp.setChildOperators(null);
  List<Operator<? extends OperatorDesc>> parentOps=smbJoinOp.getParentOperators();
  for (  Operator<? extends OperatorDesc> parentOp : parentOps) {
    parentOp.replaceChild(smbJoinOp,mapJoinOp);
  }
  mapJoinOp.setParentOperators(parentOps);
  smbJoinOp.setParentOperators(null);
  return mapJoinOp;
}
