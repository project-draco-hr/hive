{
  String zooKeeperEnsemble=connParams.getZooKeeperEnsemble();
  String zooKeeperNamespace=connParams.getSessionVars().get(JdbcConnectionParams.ZOOKEEPER_NAMESPACE);
  if ((zooKeeperNamespace == null) || (zooKeeperNamespace.isEmpty())) {
    zooKeeperNamespace=JdbcConnectionParams.ZOOKEEPER_DEFAULT_NAMESPACE;
  }
  List<String> serverHosts;
  Random randomizer=new Random();
  String serverNode;
  CuratorFramework zooKeeperClient=CuratorFrameworkFactory.builder().connectString(zooKeeperEnsemble).retryPolicy(new ExponentialBackoffRetry(1000,3)).build();
  try {
    zooKeeperClient.start();
    serverHosts=zooKeeperClient.getChildren().forPath("/" + zooKeeperNamespace);
    serverHosts.removeAll(connParams.getRejectedHostZnodePaths());
    if (serverHosts.isEmpty()) {
      throw new ZooKeeperHiveClientException("Tried all existing HiveServer2 uris from ZooKeeper.");
    }
    serverNode=serverHosts.get(randomizer.nextInt(serverHosts.size()));
    connParams.setCurrentHostZnodePath(serverNode);
    String serverUri=new String(zooKeeperClient.getData().forPath("/" + zooKeeperNamespace + "/"+ serverNode),Charset.forName("UTF-8"));
    LOG.info("Selected HiveServer2 instance with uri: " + serverUri);
    return serverUri;
  }
 catch (  Exception e) {
    throw new ZooKeeperHiveClientException("Unable to read HiveServer2 uri from ZooKeeper",e);
  }
 finally {
    if (zooKeeperClient != null) {
      zooKeeperClient.close();
    }
  }
}
