{
  for (  RexNode node : nodes) {
    try {
      node.accept(new RexVisitorImpl<Void>(true){
        @SuppressWarnings("incomplete-switch") @Override public Void visitCall(        RexCall call){
switch (call.getKind()) {
case CAST:
            if (call.getOperands().get(0) instanceof RexInputRef || call.getOperands().get(0) instanceof RexLiteral) {
              break;
            }
          throw Util.FoundOne.NULL;
case EQUALS:
case LESS_THAN:
case LESS_THAN_OR_EQUAL:
case GREATER_THAN:
case GREATER_THAN_OR_EQUAL:
        RexNode left=call.getOperands().get(0);
      if (left.getKind() == SqlKind.CAST) {
        left=((RexCall)left).getOperands().get(0);
      }
    RexNode right=call.getOperands().get(1);
  if (right.getKind() == SqlKind.CAST) {
    right=((RexCall)right).getOperands().get(0);
  }
if (left instanceof RexInputRef && right instanceof RexLiteral) {
  break;
}
if (right instanceof RexInputRef && left instanceof RexLiteral) {
break;
}
throw Util.FoundOne.NULL;
case BETWEEN:
case IN:
throw Util.FoundOne.NULL;
}
return super.visitCall(call);
}
}
);
}
 catch (Util.FoundOne e) {
return false;
}
}
return true;
}
