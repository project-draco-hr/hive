{
  LOG.debug("Starting minorWithOpenInMiddle");
  Table t=newTable("default","mtwb",false);
  addBaseFile(t,null,20L,20);
  addDeltaFile(t,null,21L,22L,2);
  addDeltaFile(t,null,23L,25L,3);
  addLengthFile(t,null,23L,25L,3);
  addDeltaFile(t,null,26L,27L,2);
  burnThroughTransactions(27,new HashSet<Long>(Arrays.asList(23L)),null);
  CompactionRequest rqst=new CompactionRequest("default","mtwb",CompactionType.MINOR);
  txnHandler.compact(rqst);
  startWorker();
  ShowCompactResponse rsp=txnHandler.showCompact(new ShowCompactRequest());
  List<ShowCompactResponseElement> compacts=rsp.getCompacts();
  Assert.assertEquals(1,compacts.size());
  Assert.assertEquals("ready for cleaning",compacts.get(0).getState());
  FileSystem fs=FileSystem.get(conf);
  FileStatus[] stat=fs.listStatus(new Path(t.getSd().getLocation()));
  boolean is130=this instanceof TestWorker2;
  Assert.assertEquals(is130 ? 5 : 4,stat.length);
  Arrays.sort(stat);
  Assert.assertEquals("base_20",stat[0].getPath().getName());
  if (is130) {
    Assert.assertEquals(makeDeltaDirNameCompacted(21,22),stat[1].getPath().getName());
  }
  Assert.assertEquals(makeDeltaDirName(21,22),stat[1 + (is130 ? 1 : 0)].getPath().getName());
  Assert.assertEquals(makeDeltaDirName(23,25),stat[2 + (is130 ? 1 : 0)].getPath().getName());
  Assert.assertEquals(makeDeltaDirName(26,27),stat[3 + (is130 ? 1 : 0)].getPath().getName());
}
