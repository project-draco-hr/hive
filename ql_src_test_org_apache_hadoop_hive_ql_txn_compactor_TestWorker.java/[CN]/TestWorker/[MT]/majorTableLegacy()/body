{
  LOG.debug("Starting majorTableLegacy");
  Table t=newTable("default","matl",false);
  HiveConf conf=new HiveConf();
  addLegacyFile(conf,t,null,20);
  addDeltaFile(conf,t,null,21L,22L,2);
  addDeltaFile(conf,t,null,23L,24L,2);
  burnThroughTransactions(25);
  CompactionRequest rqst=new CompactionRequest("default","matl",CompactionType.MAJOR);
  txnHandler.compact(rqst);
  startWorker(new HiveConf());
  ShowCompactResponse rsp=txnHandler.showCompact(new ShowCompactRequest());
  List<ShowCompactResponseElement> compacts=rsp.getCompacts();
  Assert.assertEquals(1,compacts.size());
  Assert.assertEquals("ready for cleaning",compacts.get(0).getState());
  FileSystem fs=FileSystem.get(conf);
  FileStatus[] stat=fs.listStatus(new Path(t.getSd().getLocation()));
  boolean sawNewBase=false;
  for (int i=0; i < stat.length; i++) {
    if (stat[i].getPath().getName().equals("base_0000024")) {
      sawNewBase=true;
      FileStatus[] buckets=fs.listStatus(stat[i].getPath());
      Assert.assertEquals(2,buckets.length);
      Assert.assertTrue(buckets[0].getPath().getName().matches("bucket_0000[01]"));
      Assert.assertTrue(buckets[1].getPath().getName().matches("bucket_0000[01]"));
      Assert.assertEquals(1248L,buckets[0].getLen());
      Assert.assertEquals(1248L,buckets[1].getLen());
    }
 else {
      LOG.debug("This is not the file you are looking for " + stat[i].getPath().getName());
    }
  }
  Assert.assertTrue(sawNewBase);
}
