{
  String basename="/warehouse/foo/base_1";
  String delta1="/warehouse/foo/delta_2_3";
  String delta2="/warehouse/foo/delta_4_7";
  HiveConf conf=new HiveConf();
  Path file=new Path(System.getProperty("java.io.tmpdir") + System.getProperty("file.separator") + "newWriteInputSplitTest");
  FileSystem fs=FileSystem.get(conf);
  FSDataOutputStream os=fs.create(file);
  for (int i=0; i < 10; i++) {
    os.writeBytes("mary had a little lamb its fleece was white as snow\n");
  }
  os.close();
  List<Path> files=new ArrayList<Path>(1);
  files.add(file);
  Path[] deltas=new Path[2];
  deltas[0]=new Path(delta1);
  deltas[1]=new Path(delta2);
  CompactorMR.CompactorInputSplit split=new CompactorMR.CompactorInputSplit(conf,3,files,new Path(basename),deltas);
  Assert.assertEquals(520L,split.getLength());
  String[] locations=split.getLocations();
  Assert.assertEquals(1,locations.length);
  Assert.assertEquals("localhost",locations[0]);
  ByteArrayOutputStream buf=new ByteArrayOutputStream();
  DataOutput out=new DataOutputStream(buf);
  split.write(out);
  split=new CompactorMR.CompactorInputSplit();
  DataInput in=new DataInputStream(new ByteArrayInputStream(buf.toByteArray()));
  split.readFields(in);
  Assert.assertEquals(3,split.getBucket());
  Assert.assertEquals(basename,split.getBaseDir().toString());
  deltas=split.getDeltaDirs();
  Assert.assertEquals(2,deltas.length);
  Assert.assertEquals(delta1,deltas[0].toString());
  Assert.assertEquals(delta2,deltas[1].toString());
}
