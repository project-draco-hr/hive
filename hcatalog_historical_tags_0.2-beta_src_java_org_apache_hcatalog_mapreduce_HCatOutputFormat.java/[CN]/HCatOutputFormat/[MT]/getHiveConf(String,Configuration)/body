{
  HiveConf hiveConf=new HiveConf(HCatOutputFormat.class);
  if (url != null) {
    hiveConf.setBoolean(HiveConf.ConfVars.METASTORE_USE_THRIFT_SASL.varname,true);
    hiveConf.set(HiveConf.ConfVars.METASTORE_KERBEROS_PRINCIPAL.varname,conf.get(HCatConstants.HCAT_METASTORE_PRINCIPAL));
    hiveConf.set("hive.metastore.local","false");
    hiveConf.set(HiveConf.ConfVars.METASTOREURIS.varname,url);
    if (conf.get(HCatConstants.HCAT_KEY_TOKEN_SIGNATURE) != null) {
      hiveConf.set("hive.metastore.token.signature",conf.get(HCatConstants.HCAT_KEY_TOKEN_SIGNATURE));
    }
  }
 else {
    if (conf.get(HCatConstants.HCAT_KEY_HIVE_CONF) == null) {
      conf.set(HCatConstants.HCAT_KEY_HIVE_CONF,HCatUtil.serialize(hiveConf.getAllProperties()));
    }
 else {
      Properties properties=(Properties)HCatUtil.deserialize(conf.get(HCatConstants.HCAT_KEY_HIVE_CONF));
      for (      Map.Entry<Object,Object> prop : properties.entrySet()) {
        if (prop.getValue() instanceof String) {
          hiveConf.set((String)prop.getKey(),(String)prop.getValue());
        }
 else         if (prop.getValue() instanceof Integer) {
          hiveConf.setInt((String)prop.getKey(),(Integer)prop.getValue());
        }
 else         if (prop.getValue() instanceof Boolean) {
          hiveConf.setBoolean((String)prop.getKey(),(Boolean)prop.getValue());
        }
 else         if (prop.getValue() instanceof Long) {
          hiveConf.setLong((String)prop.getKey(),(Long)prop.getValue());
        }
 else         if (prop.getValue() instanceof Float) {
          hiveConf.setFloat((String)prop.getKey(),(Float)prop.getValue());
        }
      }
    }
  }
  if (HCatConstants.HCAT_IS_DYNAMIC_MAX_PTN_CHECK_ENABLED) {
    maxDynamicPartitions=hiveConf.getIntVar(HiveConf.ConfVars.DYNAMICPARTITIONMAXPARTS);
  }
 else {
    maxDynamicPartitions=-1;
  }
  harRequested=hiveConf.getBoolVar(HiveConf.ConfVars.HIVEARCHIVEENABLED);
  return hiveConf;
}
