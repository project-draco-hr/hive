{
  OrcFile.WriterOptions options=OrcFile.writerOptions(conf);
  String propVal;
  if ((propVal=getSettingFromPropsFallingBackToConf(OrcFile.OrcTableProperties.STRIPE_SIZE.getPropName(),props,conf)) != null) {
    options.stripeSize(Long.parseLong(propVal));
  }
  if ((propVal=getSettingFromPropsFallingBackToConf(OrcFile.OrcTableProperties.COMPRESSION.getPropName(),props,conf)) != null) {
    options.compress(CompressionKind.valueOf(propVal));
  }
  if ((propVal=getSettingFromPropsFallingBackToConf(OrcFile.OrcTableProperties.COMPRESSION_BLOCK_SIZE.getPropName(),props,conf)) != null) {
    options.bufferSize(Integer.parseInt(propVal));
  }
  if ((propVal=getSettingFromPropsFallingBackToConf(OrcFile.OrcTableProperties.ROW_INDEX_STRIDE.getPropName(),props,conf)) != null) {
    options.rowIndexStride(Integer.parseInt(propVal));
  }
  if ((propVal=getSettingFromPropsFallingBackToConf(OrcFile.OrcTableProperties.ENABLE_INDEXES.getPropName(),props,conf)) != null) {
    if ("false".equalsIgnoreCase(propVal)) {
      options.rowIndexStride(0);
    }
  }
  if ((propVal=getSettingFromPropsFallingBackToConf(OrcFile.OrcTableProperties.BLOCK_PADDING.getPropName(),props,conf)) != null) {
    options.blockPadding(Boolean.parseBoolean(propVal));
  }
  if ((propVal=getSettingFromPropsFallingBackToConf(OrcFile.OrcTableProperties.ENCODING_STRATEGY.getPropName(),props,conf)) != null) {
    options.encodingStrategy(EncodingStrategy.valueOf(propVal));
  }
  if ((propVal=getSettingFromPropsFallingBackToConf(OrcFile.OrcTableProperties.BLOOM_FILTER_COLUMNS.getPropName(),props,conf)) != null) {
    options.bloomFilterColumns(propVal);
  }
  if ((propVal=getSettingFromPropsFallingBackToConf(OrcFile.OrcTableProperties.BLOOM_FILTER_FPP.getPropName(),props,conf)) != null) {
    options.bloomFilterFpp(Double.parseDouble(propVal));
  }
  return options;
}
