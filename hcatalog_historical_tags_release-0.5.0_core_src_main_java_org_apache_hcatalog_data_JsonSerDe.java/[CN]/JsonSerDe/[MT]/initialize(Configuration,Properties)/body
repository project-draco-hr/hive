{
  LOG.debug("Initializing JsonSerDe");
  LOG.debug("props to serde: {}",tbl.entrySet());
  String columnNameProperty=tbl.getProperty(serdeConstants.LIST_COLUMNS);
  String columnTypeProperty=tbl.getProperty(serdeConstants.LIST_COLUMN_TYPES);
  if (columnNameProperty.length() == 0) {
    columnNames=new ArrayList<String>();
  }
 else {
    columnNames=Arrays.asList(columnNameProperty.split(","));
  }
  if (columnTypeProperty.length() == 0) {
    columnTypes=new ArrayList<TypeInfo>();
  }
 else {
    columnTypes=TypeInfoUtils.getTypeInfosFromTypeString(columnTypeProperty);
  }
  LOG.debug("columns: {}, {}",columnNameProperty,columnNames);
  LOG.debug("types: {}, {} ",columnTypeProperty,columnTypes);
  assert(columnNames.size() == columnTypes.size());
  rowTypeInfo=(StructTypeInfo)TypeInfoFactory.getStructTypeInfo(columnNames,columnTypes);
  cachedObjectInspector=HCatRecordObjectInspectorFactory.getHCatRecordObjectInspector(rowTypeInfo);
  try {
    schema=HCatSchemaUtils.getHCatSchema(rowTypeInfo).get(0).getStructSubSchema();
    LOG.debug("schema : {}",schema);
    LOG.debug("fields : {}",schema.getFieldNames());
  }
 catch (  HCatException e) {
    throw new SerDeException(e);
  }
  jsonFactory=new JsonFactory();
}
