{
  ObjectInspector[] parameters=info.getParameterObjectInspectors();
  if (parameters.length != 2 && parameters.length != 3) {
    throw new UDFArgumentTypeException(parameters.length - 1,"Please specify either two or three arguments.");
  }
  if (parameters[0].getCategory() != ObjectInspector.Category.PRIMITIVE) {
    throw new UDFArgumentTypeException(0,"Only primitive type arguments are accepted but " + parameters[0].getTypeName() + " was passed as parameter 1.");
  }
switch (((PrimitiveObjectInspector)parameters[0]).getPrimitiveCategory()) {
case BYTE:
case SHORT:
case INT:
case LONG:
case FLOAT:
case DOUBLE:
case TIMESTAMP:
case DECIMAL:
    break;
default :
  throw new UDFArgumentTypeException(0,"Only numeric type arguments are accepted but " + parameters[0].getTypeName() + " was passed as parameter 1.");
}
boolean wantManyQuantiles=false;
switch (parameters[1].getCategory()) {
case PRIMITIVE:
verifyFractionType(parameters[1]);
break;
case LIST:
if (((ListObjectInspector)parameters[1]).getListElementObjectInspector().getCategory() != ObjectInspector.Category.PRIMITIVE) {
throw new UDFArgumentTypeException(1,"A floating point or decimal array argument may be passed as parameter 2, but " + parameters[1].getTypeName() + " was passed instead.");
}
verifyFractionType(((ListObjectInspector)parameters[1]).getListElementObjectInspector());
wantManyQuantiles=true;
break;
default :
throw new UDFArgumentTypeException(1,"Only a floating point or decimal, or floating point or decimal array argument is accepted" + " as parameter 2, but " + parameters[1].getTypeName() + " was passed instead.");
}
if (!ObjectInspectorUtils.isConstantObjectInspector(parameters[1])) {
throw new UDFArgumentTypeException(1,"The second argument must be a constant, but " + parameters[1].getTypeName() + " was passed instead.");
}
if (parameters.length == 3) {
if (parameters[2].getCategory() != ObjectInspector.Category.PRIMITIVE) {
throw new UDFArgumentTypeException(2,"Only a primitive argument is accepted as " + "parameter 3, but " + parameters[2].getTypeName() + " was passed instead.");
}
switch (((PrimitiveObjectInspector)parameters[2]).getPrimitiveCategory()) {
case BYTE:
case SHORT:
case INT:
case LONG:
case TIMESTAMP:
break;
default :
throw new UDFArgumentTypeException(2,"Only an integer argument is accepted as " + "parameter 3, but " + parameters[2].getTypeName() + " was passed instead.");
}
if (!ObjectInspectorUtils.isConstantObjectInspector(parameters[2])) {
throw new UDFArgumentTypeException(2,"The third argument must be a constant, but " + parameters[2].getTypeName() + " was passed instead.");
}
}
if (wantManyQuantiles) {
return new GenericUDAFMultiplePercentileApproxEvaluator();
}
 else {
return new GenericUDAFSinglePercentileApproxEvaluator();
}
}
