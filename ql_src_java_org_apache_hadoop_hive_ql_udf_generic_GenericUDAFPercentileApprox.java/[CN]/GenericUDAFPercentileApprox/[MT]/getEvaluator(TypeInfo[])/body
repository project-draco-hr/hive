{
  if (parameters.length != 2 && parameters.length != 3) {
    throw new UDFArgumentTypeException(parameters.length - 1,"Please specify either two or three arguments.");
  }
  if (parameters[0].getCategory() != ObjectInspector.Category.PRIMITIVE) {
    throw new UDFArgumentTypeException(0,"Only primitive type arguments are accepted but " + parameters[0].getTypeName() + " was passed as parameter 1.");
  }
switch (((PrimitiveTypeInfo)parameters[0]).getPrimitiveCategory()) {
case BYTE:
case SHORT:
case INT:
case LONG:
case FLOAT:
case DOUBLE:
    break;
default :
  throw new UDFArgumentTypeException(0,"Only numeric type arguments are accepted but " + parameters[0].getTypeName() + " was passed as parameter 1.");
}
switch (parameters[1].getCategory()) {
case PRIMITIVE:
switch (((PrimitiveTypeInfo)parameters[1]).getPrimitiveCategory()) {
case FLOAT:
case DOUBLE:
  break;
default :
throw new UDFArgumentTypeException(1,"Only a float/double or float/double array argument is accepted as parameter 2, but " + parameters[1].getTypeName() + " was passed instead.");
}
break;
case LIST:
if (((ListTypeInfo)parameters[1]).getListElementTypeInfo().getCategory() != ObjectInspector.Category.PRIMITIVE) {
throw new UDFArgumentTypeException(1,"A float/double array argument may be passed as parameter 2, but " + parameters[1].getTypeName() + " was passed instead.");
}
switch (((PrimitiveTypeInfo)((ListTypeInfo)parameters[1]).getListElementTypeInfo()).getPrimitiveCategory()) {
case FLOAT:
case DOUBLE:
break;
default :
throw new UDFArgumentTypeException(1,"A float/double array argument may be passed as parameter 2, but " + parameters[1].getTypeName() + " was passed instead.");
}
break;
default :
throw new UDFArgumentTypeException(1,"Only a float/double or float/double array argument is accepted as parameter 2, but " + parameters[1].getTypeName() + " was passed instead.");
}
if (parameters.length == 3) {
if (parameters[2].getCategory() != ObjectInspector.Category.PRIMITIVE) {
throw new UDFArgumentTypeException(2,"Only a primitive argument is accepted as " + "parameter 3, but " + parameters[2].getTypeName() + " was passed instead.");
}
switch (((PrimitiveTypeInfo)parameters[2]).getPrimitiveCategory()) {
case BYTE:
case SHORT:
case INT:
case LONG:
break;
default :
throw new UDFArgumentTypeException(2,"Only an integer argument is accepted as " + "parameter 3, but " + parameters[2].getTypeName() + " was passed instead.");
}
}
return new GenericUDAFPercentileApproxEvaluator();
}
