{
  assert(parameters.length == 2 || parameters.length == 3);
  if (parameters[0] == null || parameters[1] == null) {
    return;
  }
  PercentileAggBuf myagg=(PercentileAggBuf)agg;
  if (myagg.quantiles == null) {
    if (quantilesOI.getCategory() == ObjectInspector.Category.LIST) {
      int nquantiles=((StandardListObjectInspector)quantilesOI).getListLength(parameters[1]);
      assert(nquantiles >= 1);
      myagg.quantiles=new double[nquantiles];
      StandardListObjectInspector sloi=(StandardListObjectInspector)quantilesOI;
      for (int i=0; i < nquantiles; i++) {
        myagg.quantiles[i]=PrimitiveObjectInspectorUtils.getDouble(sloi.getListElement(parameters[1],i),(PrimitiveObjectInspector)sloi.getListElementObjectInspector());
      }
    }
 else {
      myagg.quantiles=new double[1];
      myagg.quantiles[0]=PrimitiveObjectInspectorUtils.getDouble(parameters[1],(PrimitiveObjectInspector)quantilesOI);
    }
    for (int i=0; i < myagg.quantiles.length; i++) {
      if (myagg.quantiles[i] <= 0 || myagg.quantiles[i] >= 1) {
        throw new HiveException(getClass().getSimpleName() + " requires percentile values to " + "lie strictly between 0 and 1, but you supplied "+ myagg.quantiles[i]);
      }
    }
  }
  if (!myagg.histogram.isReady()) {
    if (parameters.length == 3 && nbinsOI != null) {
      myagg.histogram.allocate(PrimitiveObjectInspectorUtils.getInt(parameters[2],nbinsOI));
    }
 else {
      myagg.histogram.allocate(10000);
    }
  }
  double v=PrimitiveObjectInspectorUtils.getDouble(parameters[0],inputOI);
  myagg.histogram.add(v);
}
