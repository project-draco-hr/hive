{
  if (currMapJoinOp != null) {
    Map<String,Map<String,List<String>>> aliasBucketFileNameMapping=currMapJoinOp.getConf().getAliasBucketFileNameMapping();
    if (aliasBucketFileNameMapping != null) {
      MapredLocalWork localPlan=plan.getMapRedLocalWork();
      if (localPlan == null) {
        if (currMapJoinOp instanceof SMBMapJoinOperator) {
          localPlan=((SMBMapJoinOperator)currMapJoinOp).getConf().getLocalWork();
        }
      }
 else {
        if (currMapJoinOp instanceof SMBMapJoinOperator) {
          MapredLocalWork smbLocalWork=((SMBMapJoinOperator)currMapJoinOp).getConf().getLocalWork();
          if (smbLocalWork != null) {
            localPlan.getAliasToFetchWork().putAll(smbLocalWork.getAliasToFetchWork());
            localPlan.getAliasToWork().putAll(smbLocalWork.getAliasToWork());
          }
        }
      }
      if (localPlan == null) {
        return;
      }
      if (currMapJoinOp instanceof SMBMapJoinOperator) {
        plan.setMapRedLocalWork(null);
        ((SMBMapJoinOperator)currMapJoinOp).getConf().setLocalWork(localPlan);
      }
 else {
        plan.setMapRedLocalWork(localPlan);
      }
      BucketMapJoinContext bucketMJCxt=new BucketMapJoinContext();
      localPlan.setBucketMapjoinContext(bucketMJCxt);
      bucketMJCxt.setAliasBucketFileNameMapping(aliasBucketFileNameMapping);
      bucketMJCxt.setBucketFileNameMapping(currMapJoinOp.getConf().getBigTableBucketNumMapping());
      localPlan.setInputFileChangeSensitive(true);
      bucketMJCxt.setMapJoinBigTableAlias(currMapJoinOp.getConf().getBigTableAlias());
      bucketMJCxt.setBucketMatcherClass(org.apache.hadoop.hive.ql.exec.DefaultBucketMatcher.class);
      bucketMJCxt.setBigTablePartSpecToFileMapping(currMapJoinOp.getConf().getBigTablePartSpecToFileMapping());
      if ((currMapJoinOp instanceof SMBMapJoinOperator) || (currMapJoinOp.getConf().isBucketMapJoin())) {
        plan.setUseBucketizedHiveInputFormat(true);
      }
    }
  }
}
