{
  if (node == RedBlackTree.NULL) {
    return 1;
  }
  count.set(count.get() + 1);
  boolean is_red=tree.isRed(node);
  int left=tree.getLeft(node);
  int right=tree.getRight(node);
  if (is_red) {
    if (tree.isRed(left)) {
      printTree(tree,"",tree.root);
      throw new IllegalStateException("Left node of " + node + " is "+ left+ " and both are red.");
    }
    if (tree.isRed(right)) {
      printTree(tree,"",tree.root);
      throw new IllegalStateException("Right node of " + node + " is "+ right+ " and both are red.");
    }
  }
  int left_depth=checkSubtree(tree,left,count);
  int right_depth=checkSubtree(tree,right,count);
  if (left_depth != right_depth) {
    printTree(tree,"",tree.root);
    throw new IllegalStateException("Lopsided tree at node " + node + " with depths "+ left_depth+ " and "+ right_depth);
  }
  if (is_red) {
    return left_depth;
  }
 else {
    return left_depth + 1;
  }
}
