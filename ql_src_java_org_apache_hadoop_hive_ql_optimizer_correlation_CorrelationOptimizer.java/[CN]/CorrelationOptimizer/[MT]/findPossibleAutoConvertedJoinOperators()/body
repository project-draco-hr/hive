{
  for (  JoinOperator joinOp : pCtx.getJoinContext().keySet()) {
    boolean isAbleToGuess=true;
    boolean mayConvert=false;
    long aliasTotalKnownInputSize=0;
    Map<String,Long> aliasToSize=new HashMap<String,Long>();
    Map<Integer,String> posToAlias=new HashMap<Integer,String>();
    for (    Operator<? extends OperatorDesc> op : joinOp.getParentOperators()) {
      TableScanOperator tsop=CorrelationUtilities.findTableScanOperator(op);
      if (tsop == null) {
        isAbleToGuess=false;
        break;
      }
      Table table=pCtx.getTopToTable().get(tsop);
      String alias=tsop.getConf().getAlias();
      posToAlias.put(joinOp.getParentOperators().indexOf(op),alias);
      if (table == null) {
        throw new SemanticException("The table of " + tsop.getName() + " "+ tsop.getIdentifier()+ " is null, which is not expected.");
      }
      Path p=table.getPath();
      FileSystem fs=null;
      ContentSummary resultCs=null;
      try {
        fs=table.getPath().getFileSystem(pCtx.getConf());
        resultCs=fs.getContentSummary(p);
      }
 catch (      IOException e) {
        LOG.warn("Encounter a error while querying content summary of table " + table.getCompleteName() + " from FileSystem. "+ "Cannot guess if CommonJoinOperator will optimize "+ joinOp.getName()+ " "+ joinOp.getIdentifier());
      }
      if (resultCs == null) {
        isAbleToGuess=false;
        break;
      }
      long size=resultCs.getLength();
      aliasTotalKnownInputSize+=size;
      Long es=aliasToSize.get(alias);
      if (es == null) {
        es=new Long(0);
      }
      es+=size;
      aliasToSize.put(alias,es);
    }
    if (!isAbleToGuess) {
      LOG.info("Cannot guess if CommonJoinOperator will optimize " + joinOp.getName() + " "+ joinOp.getIdentifier());
      continue;
    }
    JoinDesc joinDesc=joinOp.getConf();
    Byte[] order=joinDesc.getTagOrder();
    int numAliases=order.length;
    Set<Integer> bigTableCandidates=MapJoinProcessor.getBigTableCandidates(joinDesc.getConds());
    if (bigTableCandidates == null) {
      continue;
    }
    String bigTableAlias=null;
    long ThresholdOfSmallTblSizeSum=HiveConf.getLongVar(pCtx.getConf(),HiveConf.ConfVars.HIVESMALLTABLESFILESIZE);
    for (int i=0; i < numAliases; i++) {
      if (!bigTableCandidates.contains(i)) {
        continue;
      }
      bigTableAlias=posToAlias.get(i);
      if (!CommonJoinTaskDispatcher.cannotConvert(bigTableAlias,aliasToSize,aliasTotalKnownInputSize,ThresholdOfSmallTblSizeSum)) {
        mayConvert=true;
      }
    }
    if (mayConvert) {
      LOG.info(joinOp.getName() + " " + joinOp.getIdentifier()+ " may be converted to MapJoin by CommonJoinResolver");
      skipedJoinOperators.add(joinOp);
    }
  }
}
