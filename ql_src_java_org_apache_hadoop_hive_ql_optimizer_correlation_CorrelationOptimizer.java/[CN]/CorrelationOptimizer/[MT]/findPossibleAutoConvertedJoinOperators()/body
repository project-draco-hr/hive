{
  for (  JoinOperator joinOp : pCtx.getJoinOps()) {
    boolean isAbleToGuess=true;
    boolean mayConvert=false;
    long aliasTotalKnownInputSize=0;
    Map<String,Long> aliasToSize=new HashMap<String,Long>();
    Map<Integer,Set<String>> posToAliases=new HashMap<Integer,Set<String>>();
    for (int pos=0; pos < joinOp.getNumParent(); pos++) {
      Operator<? extends OperatorDesc> op=joinOp.getParentOperators().get(pos);
      Set<TableScanOperator> topOps=CorrelationUtilities.findTableScanOperators(op);
      if (topOps.isEmpty()) {
        isAbleToGuess=false;
        break;
      }
      Set<String> aliases=new LinkedHashSet<String>();
      for (      TableScanOperator tsop : topOps) {
        Table table=tsop.getConf().getTableMetadata();
        if (table == null) {
          throw new SemanticException("The table of " + tsop.getName() + " "+ tsop.getIdentifier()+ " is null, which is not expected.");
        }
        String alias=tsop.getConf().getAlias();
        aliases.add(alias);
        Path p=table.getPath();
        ContentSummary resultCs=null;
        try {
          FileSystem fs=table.getPath().getFileSystem(pCtx.getConf());
          resultCs=fs.getContentSummary(p);
        }
 catch (        IOException e) {
          LOG.warn("Encounter a error while querying content summary of table " + table.getCompleteName() + " from FileSystem. "+ "Cannot guess if CommonJoinOperator will optimize "+ joinOp.getName()+ " "+ joinOp.getIdentifier());
        }
        if (resultCs == null) {
          isAbleToGuess=false;
          break;
        }
        long size=resultCs.getLength();
        aliasTotalKnownInputSize+=size;
        Long es=aliasToSize.get(alias);
        if (es == null) {
          es=new Long(0);
        }
        es+=size;
        aliasToSize.put(alias,es);
      }
      posToAliases.put(pos,aliases);
    }
    if (!isAbleToGuess) {
      LOG.info("Cannot guess if CommonJoinOperator will optimize " + joinOp.getName() + " "+ joinOp.getIdentifier());
      continue;
    }
    JoinDesc joinDesc=joinOp.getConf();
    Byte[] order=joinDesc.getTagOrder();
    int numAliases=order.length;
    Set<Integer> bigTableCandidates=MapJoinProcessor.getBigTableCandidates(joinDesc.getConds());
    if (bigTableCandidates.isEmpty()) {
      continue;
    }
    long ThresholdOfSmallTblSizeSum=HiveConf.getLongVar(pCtx.getConf(),HiveConf.ConfVars.HIVESMALLTABLESFILESIZE);
    for (int i=0; i < numAliases; i++) {
      if (!bigTableCandidates.contains(i)) {
        continue;
      }
      Set<String> aliases=posToAliases.get(i);
      long aliasKnownSize=Utilities.sumOf(aliasToSize,aliases);
      if (!CommonJoinTaskDispatcher.cannotConvert(aliasKnownSize,aliasTotalKnownInputSize,ThresholdOfSmallTblSizeSum)) {
        mayConvert=true;
      }
    }
    if (mayConvert) {
      LOG.info(joinOp.getName() + " " + joinOp.getIdentifier()+ " may be converted to MapJoin by CommonJoinResolver");
      skipedJoinOperators.add(joinOp);
    }
  }
}
