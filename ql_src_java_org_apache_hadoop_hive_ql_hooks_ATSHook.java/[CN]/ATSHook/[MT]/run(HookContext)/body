{
  final long currentTime=System.currentTimeMillis();
  final HiveConf conf=new HiveConf(hookContext.getConf());
  executor.submit(new Runnable(){
    @Override public void run(){
      try {
        QueryPlan plan=hookContext.getQueryPlan();
        if (plan == null) {
          return;
        }
        String queryId=plan.getQueryId();
        String opId=hookContext.getOperationId();
        long queryStartTime=plan.getQueryStartTime();
        String user=hookContext.getUgi().getUserName();
        int numMrJobs=Utilities.getMRTasks(plan.getRootTasks()).size();
        int numTezJobs=Utilities.getTezTasks(plan.getRootTasks()).size();
        if (numMrJobs + numTezJobs <= 0) {
          return;
        }
switch (hookContext.getHookType()) {
case PRE_EXEC_HOOK:
          ExplainTask explain=new ExplainTask();
        explain.initialize(conf,plan,null);
      String query=plan.getQueryStr();
    List<Task<?>> rootTasks=plan.getRootTasks();
  JSONObject explainPlan=explain.getJSONPlan(null,null,rootTasks,plan.getFetchTask(),true,false,false);
fireAndForget(conf,createPreHookEvent(queryId,query,explainPlan,queryStartTime,user,numMrJobs,numTezJobs,opId));
break;
case POST_EXEC_HOOK:
fireAndForget(conf,createPostHookEvent(queryId,currentTime,user,true,opId));
break;
case ON_FAILURE_HOOK:
fireAndForget(conf,createPostHookEvent(queryId,currentTime,user,false,opId));
break;
default :
break;
}
}
 catch (Exception e) {
LOG.info("Failed to submit plan to ATS: " + StringUtils.stringifyException(e));
}
}
}
);
}
