{
  final long currentTime=System.currentTimeMillis();
  final HiveConf conf=new HiveConf(hookContext.getConf());
  final QueryState queryState=hookContext.getQueryState();
  executor.submit(new Runnable(){
    @Override public void run(){
      try {
        QueryPlan plan=hookContext.getQueryPlan();
        if (plan == null) {
          return;
        }
        String queryId=plan.getQueryId();
        String opId=hookContext.getOperationId();
        long queryStartTime=plan.getQueryStartTime();
        String user=hookContext.getUgi().getUserName();
        String requestuser=hookContext.getUserName();
        if (hookContext.getUserName() == null) {
          requestuser=hookContext.getUgi().getUserName();
        }
        int numMrJobs=Utilities.getMRTasks(plan.getRootTasks()).size();
        int numTezJobs=Utilities.getTezTasks(plan.getRootTasks()).size();
        if (numMrJobs + numTezJobs <= 0) {
          return;
        }
switch (hookContext.getHookType()) {
case PRE_EXEC_HOOK:
          ExplainWork work=new ExplainWork(null,null,plan.getRootTasks(),plan.getFetchTask(),null,false,true,false,false,false,false,null);
        @SuppressWarnings("unchecked") ExplainTask explain=(ExplainTask)TaskFactory.get(work,conf);
      explain.initialize(queryState,plan,null,null);
    String query=plan.getQueryStr();
  JSONObject explainPlan=explain.getJSONPlan(null,work);
String logID=conf.getLogIdVar(SessionState.get().getSessionId());
fireAndForget(conf,createPreHookEvent(queryId,query,explainPlan,queryStartTime,user,requestuser,numMrJobs,numTezJobs,opId,logID));
break;
case POST_EXEC_HOOK:
fireAndForget(conf,createPostHookEvent(queryId,currentTime,user,requestuser,true,opId));
break;
case ON_FAILURE_HOOK:
fireAndForget(conf,createPostHookEvent(queryId,currentTime,user,requestuser,false,opId));
break;
default :
break;
}
}
 catch (Exception e) {
LOG.info("Failed to submit plan to ATS: " + StringUtils.stringifyException(e));
}
}
}
);
}
