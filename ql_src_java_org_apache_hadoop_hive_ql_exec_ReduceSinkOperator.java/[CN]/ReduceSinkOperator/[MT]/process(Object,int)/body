{
  try {
    ObjectInspector rowInspector=inputObjInspectors[tag];
    if (firstRow) {
      firstRow=false;
      keyObjectInspector=initEvaluatorsAndReturnStruct(keyEval,conf.getOutputKeyColumnNames(),rowInspector);
      valueObjectInspector=initEvaluatorsAndReturnStruct(valueEval,conf.getOutputValueColumnNames(),rowInspector);
      partitionObjectInspectors=initEvaluators(partitionEval,rowInspector);
      cachedKeys=new Object[keyEval.length];
      cachedValues=new Object[valueEval.length];
    }
    for (int i=0; i < keyEval.length; i++) {
      cachedKeys[i]=keyEval[i].evaluate(row);
    }
    if (keyIsText) {
      Text key=(Text)keySerializer.serialize(cachedKeys,keyObjectInspector);
      if (tag == -1) {
        keyWritable.set(key.getBytes(),0,key.getLength());
      }
 else {
        int keyLength=key.getLength();
        keyWritable.setSize(keyLength + 1);
        System.arraycopy(key.getBytes(),0,keyWritable.get(),0,keyLength);
        keyWritable.get()[keyLength]=tagByte[0];
      }
    }
 else {
      BytesWritable key=(BytesWritable)keySerializer.serialize(cachedKeys,keyObjectInspector);
      if (tag == -1) {
        keyWritable.set(key.get(),0,key.getSize());
      }
 else {
        int keyLength=key.getSize();
        keyWritable.setSize(keyLength + 1);
        System.arraycopy(key.get(),0,keyWritable.get(),0,keyLength);
        keyWritable.get()[keyLength]=tagByte[0];
      }
    }
    int keyHashCode=0;
    if (partitionEval.length == 0) {
      if (random == null) {
        random=new Random(12345);
      }
      keyHashCode=random.nextInt();
    }
 else {
      for (int i=0; i < partitionEval.length; i++) {
        Object o=partitionEval[i].evaluate(row);
        keyHashCode=keyHashCode * 31 + ObjectInspectorUtils.hashCode(o,partitionObjectInspectors[i]);
      }
    }
    keyWritable.setHashCode(keyHashCode);
    for (int i=0; i < valueEval.length; i++) {
      cachedValues[i]=valueEval[i].evaluate(row);
    }
    value=valueSerializer.serialize(cachedValues,valueObjectInspector);
  }
 catch (  SerDeException e) {
    throw new HiveException(e);
  }
  try {
    if (out != null) {
      out.collect(keyWritable,value);
    }
  }
 catch (  IOException e) {
    throw new HiveException(e);
  }
}
