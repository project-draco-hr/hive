{
  int inspectorLen=evals.length > length ? length + 1 : evals.length;
  List<ObjectInspector> sois=new ArrayList<ObjectInspector>(inspectorLen);
  ObjectInspector[] fieldObjectInspectors=initEvaluators(evals,0,length,rowInspector);
  sois.addAll(Arrays.asList(fieldObjectInspectors));
  if (outputColNames.size() > length) {
    List<ObjectInspector> uois=new ArrayList<ObjectInspector>();
    for (    List<Integer> distinctCols : distinctColIndices) {
      List<String> names=new ArrayList<String>();
      List<ObjectInspector> eois=new ArrayList<ObjectInspector>();
      int numExprs=0;
      for (      int i : distinctCols) {
        names.add(HiveConf.getColumnInternalName(numExprs));
        eois.add(evals[i].initialize(rowInspector));
        numExprs++;
      }
      uois.add(ObjectInspectorFactory.getStandardStructObjectInspector(names,eois));
    }
    UnionObjectInspector uoi=ObjectInspectorFactory.getStandardUnionObjectInspector(uois);
    sois.add(uoi);
  }
  return ObjectInspectorFactory.getStandardStructObjectInspector(outputColNames,sois);
}
