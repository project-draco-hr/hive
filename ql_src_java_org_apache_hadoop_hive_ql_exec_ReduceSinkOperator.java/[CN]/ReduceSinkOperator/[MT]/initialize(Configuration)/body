{
  super.initialize(hconf);
  try {
    keyEval=new ExprNodeEvaluator[conf.getKeyCols().size()];
    int i=0;
    for (    exprNodeDesc e : conf.getKeyCols()) {
      keyEval[i++]=ExprNodeEvaluatorFactory.get(e);
    }
    keyIsSingleton=false;
    valueEval=new ExprNodeEvaluator[conf.getValueCols().size()];
    i=0;
    for (    exprNodeDesc e : conf.getValueCols()) {
      valueEval[i++]=ExprNodeEvaluatorFactory.get(e);
    }
    valueIsSingleton=false;
    int tag=conf.getTag();
    if (tag == -1) {
      who=new NoTagWritableHiveObject(null,new NaiiveSerializer());
      wcho=new NoTagWritableComparableHiveObject(null,new NaiiveSerializer());
      l4j.info("Using tag = -1");
    }
 else {
      l4j.info("Using tag = " + tag);
      who=new WritableHiveObject(tag,null,new NaiiveSerializer());
      wcho=new WritableComparableHiveObject(tag,null,new NaiiveSerializer());
    }
    WritableComparableHiveObject.setNumPartitionFields(conf.getNumPartitionFields());
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e);
  }
}
