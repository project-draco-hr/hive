{
  try {
    keyEval=new ExprNodeEvaluator[conf.getKeyCols().size()];
    int i=0;
    for (    ExprNodeDesc e : conf.getKeyCols()) {
      keyEval[i++]=ExprNodeEvaluatorFactory.get(e);
    }
    numDistributionKeys=conf.getNumDistributionKeys();
    distinctColIndices=conf.getDistinctColumnIndices();
    numDistinctExprs=distinctColIndices.size();
    valueEval=new ExprNodeEvaluator[conf.getValueCols().size()];
    i=0;
    for (    ExprNodeDesc e : conf.getValueCols()) {
      valueEval[i++]=ExprNodeEvaluatorFactory.get(e);
    }
    partitionEval=new ExprNodeEvaluator[conf.getPartitionCols().size()];
    i=0;
    for (    ExprNodeDesc e : conf.getPartitionCols()) {
      partitionEval[i++]=ExprNodeEvaluatorFactory.get(e);
    }
    tag=conf.getTag();
    tagByte[0]=(byte)tag;
    LOG.info("Using tag = " + tag);
    TableDesc keyTableDesc=conf.getKeySerializeInfo();
    keySerializer=(Serializer)keyTableDesc.getDeserializerClass().newInstance();
    keySerializer.initialize(null,keyTableDesc.getProperties());
    keyIsText=keySerializer.getSerializedClass().equals(Text.class);
    TableDesc valueTableDesc=conf.getValueSerializeInfo();
    valueSerializer=(Serializer)valueTableDesc.getDeserializerClass().newInstance();
    valueSerializer.initialize(null,valueTableDesc.getProperties());
    firstRow=true;
    initializeChildren(hconf);
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e);
  }
}
