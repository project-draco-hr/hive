{
  String operatorName=tdesc[1];
  String operandType1=tdesc[2];
  String operandType2=tdesc[3];
  String operatorSymbol=tdesc[4];
  String typeConversion1=tdesc[5];
  String typeConversion2=tdesc[6];
  String className=getCamelCaseType(operandType1) + "Scalar" + operatorName+ getCamelCaseType(operandType2)+ "Column";
  String returnType=getArithmeticReturnType(operandType1,operandType2);
  String outputColumnVectorType=this.getColumnVectorType(returnType == null ? "long" : returnType);
  String inputColumnVectorType=this.getColumnVectorType(operandType2);
  String inputColumnVectorType1=this.getColumnVectorType(operandType1);
  String inputColumnVectorType2=this.getColumnVectorType(operandType2);
  String vectorOperandType1=this.getVectorPrimitiveType(inputColumnVectorType1);
  String vectorOperandType2=this.getVectorPrimitiveType(inputColumnVectorType2);
  String vectorReturnType=this.getVectorPrimitiveType(outputColumnVectorType);
  File templateFile=new File(joinPath(this.expressionTemplateDirectory,tdesc[0] + ".txt"));
  String templateString=readFile(templateFile);
  templateString=templateString.replaceAll("<ClassName>",className);
  templateString=templateString.replaceAll("<InputColumnVectorType>",inputColumnVectorType);
  templateString=templateString.replaceAll("<OutputColumnVectorType>",outputColumnVectorType);
  templateString=templateString.replaceAll("<OperatorName>",operatorName);
  templateString=templateString.replaceAll("<OperatorSymbol>",operatorSymbol);
  templateString=templateString.replaceAll("<OperandType1>",operandType1);
  templateString=templateString.replaceAll("<OperandType2>",operandType2);
  templateString=templateString.replaceAll("<ReturnType>",returnType);
  templateString=templateString.replaceAll("<VectorOperandType1>",vectorOperandType1);
  templateString=templateString.replaceAll("<VectorOperandType2>",vectorOperandType2);
  templateString=templateString.replaceAll("<VectorReturnType>",vectorReturnType);
  templateString=templateString.replaceAll("<TypeConversion1>",typeConversion1);
  templateString=templateString.replaceAll("<TypeConversion2>",typeConversion2);
  templateString=templateString.replaceAll("<CamelReturnType>",getCamelCaseType(vectorReturnType));
  writeFile(templateFile.lastModified(),expressionOutputDirectory,expressionClassesDirectory,className,templateString);
  String testScalarType=operandType1;
  if (isDateTimeIntervalType(testScalarType)) {
    testScalarType="long";
  }
  testCodeGen.addColumnScalarOperationTestCases(false,className,inputColumnVectorType,outputColumnVectorType,testScalarType);
}
