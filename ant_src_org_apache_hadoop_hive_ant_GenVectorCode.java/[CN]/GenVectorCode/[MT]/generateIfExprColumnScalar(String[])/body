{
  String operandType2=tdesc[1];
  String operandType3=tdesc[2];
  String arg2ColumnVectorType=this.getColumnVectorType(operandType2);
  String returnType=getArithmeticReturnType(operandType2,operandType3);
  String outputColumnVectorType=getColumnVectorType(returnType);
  String className="IfExpr" + getCamelCaseType(operandType2) + "Column"+ getCamelCaseType(operandType3)+ "Scalar";
  String outputFile=joinPath(this.expressionOutputDirectory,className + ".java");
  File templateFile=new File(joinPath(this.expressionTemplateDirectory,tdesc[0] + ".txt"));
  String templateString=readFile(templateFile);
  templateString=templateString.replaceAll("<ClassName>",className);
  templateString=templateString.replaceAll("<Arg2ColumnVectorType>",arg2ColumnVectorType);
  templateString=templateString.replaceAll("<ReturnType>",returnType);
  templateString=templateString.replaceAll("<OperandType2>",operandType2);
  templateString=templateString.replaceAll("<OperandType3>",operandType3);
  templateString=templateString.replaceAll("<OutputColumnVectorType>",outputColumnVectorType);
  String vectorExprArgType2=operandType2;
  String vectorExprArgType3=operandType3;
  if (operandType2.equals("long") && operandType3.equals("long")) {
    vectorExprArgType2="int_datetime_interval_family";
    vectorExprArgType3="int_datetime_interval_family";
  }
  templateString=templateString.replaceAll("<VectorExprArgType2>",vectorExprArgType2);
  templateString=templateString.replaceAll("<VectorExprArgType3>",vectorExprArgType3);
  writeFile(templateFile.lastModified(),expressionOutputDirectory,expressionClassesDirectory,className,templateString);
}
