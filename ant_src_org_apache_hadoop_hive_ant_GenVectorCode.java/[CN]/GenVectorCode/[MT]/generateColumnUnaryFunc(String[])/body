{
  String classNamePrefix=tdesc[1];
  String operandType=tdesc[3];
  String inputColumnVectorType=this.getColumnVectorType(operandType);
  String returnType=tdesc[2];
  String outputColumnVectorType=this.getColumnVectorType(returnType);
  String className=classNamePrefix + getCamelCaseType(operandType) + "To"+ getCamelCaseType(returnType);
  File templateFile=new File(joinPath(this.expressionTemplateDirectory,tdesc[0] + ".txt"));
  String templateString=readFile(templateFile);
  String funcName=tdesc[4];
  String operandCast=tdesc[5];
  String resultCast=tdesc[6];
  String cleanup=tdesc[7];
  String vectorExprArgType=tdesc[8].isEmpty() ? operandType : tdesc[8];
  templateString=templateString.replaceAll("<ClassName>",className);
  templateString=templateString.replaceAll("<InputColumnVectorType>",inputColumnVectorType);
  templateString=templateString.replaceAll("<OutputColumnVectorType>",outputColumnVectorType);
  templateString=templateString.replaceAll("<OperandType>",operandType);
  templateString=templateString.replaceAll("<ReturnType>",returnType);
  templateString=templateString.replaceAll("<FuncName>",funcName);
  templateString=templateString.replaceAll("<OperandCast>",operandCast);
  templateString=templateString.replaceAll("<ResultCast>",resultCast);
  templateString=templateString.replaceAll("<Cleanup>",cleanup);
  templateString=templateString.replaceAll("<VectorExprArgType>",vectorExprArgType);
  writeFile(templateFile.lastModified(),expressionOutputDirectory,expressionClassesDirectory,className,templateString);
}
