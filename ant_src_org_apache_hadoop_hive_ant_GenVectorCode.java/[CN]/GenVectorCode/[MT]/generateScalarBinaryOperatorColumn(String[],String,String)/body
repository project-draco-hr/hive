{
  String operandType1=tdesc[2];
  String operandType2=tdesc[3];
  String outputColumnVectorType=this.getColumnVectorType(returnType);
  String inputColumnVectorType=this.getColumnVectorType(operandType2);
  String operatorSymbol=tdesc[4];
  File templateFile=new File(joinPath(this.expressionTemplateDirectory,tdesc[0] + ".txt"));
  String templateString=readFile(templateFile);
  templateString=templateString.replaceAll("<ClassName>",className);
  templateString=templateString.replaceAll("<InputColumnVectorType>",inputColumnVectorType);
  templateString=templateString.replaceAll("<OutputColumnVectorType>",outputColumnVectorType);
  templateString=templateString.replaceAll("<OperatorSymbol>",operatorSymbol);
  templateString=templateString.replaceAll("<OperandType1>",operandType1);
  templateString=templateString.replaceAll("<OperandType2>",operandType2);
  templateString=templateString.replaceAll("<ReturnType>",returnType);
  templateString=templateString.replaceAll("<CamelReturnType>",getCamelCaseType(returnType));
  writeFile(templateFile.lastModified(),expressionOutputDirectory,expressionClassesDirectory,className,templateString);
  if (returnType == null) {
    testCodeGen.addColumnScalarFilterTestCases(false,className,inputColumnVectorType,operandType1,operatorSymbol);
  }
 else {
    testCodeGen.addColumnScalarOperationTestCases(false,className,inputColumnVectorType,outputColumnVectorType,operandType1);
  }
}
