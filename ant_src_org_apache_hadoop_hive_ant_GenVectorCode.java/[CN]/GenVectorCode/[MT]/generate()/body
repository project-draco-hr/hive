{
  System.out.println("Generating vector expression code");
  for (  String[] tdesc : templateExpansions) {
    if (tdesc[0].equals("ColumnArithmeticScalar") || tdesc[0].equals("ColumnDivideScalar")) {
      generateColumnArithmeticScalar(tdesc);
    }
 else     if (tdesc[0].equals("ColumnArithmeticScalarDecimal")) {
      generateColumnArithmeticScalarDecimal(tdesc);
    }
 else     if (tdesc[0].equals("ScalarArithmeticColumnDecimal")) {
      generateScalarArithmeticColumnDecimal(tdesc);
    }
 else     if (tdesc[0].equals("ColumnArithmeticColumnDecimal")) {
      generateColumnArithmeticColumnDecimal(tdesc);
    }
 else     if (tdesc[0].equals("ColumnDivideScalarDecimal")) {
      generateColumnDivideScalarDecimal(tdesc);
    }
 else     if (tdesc[0].equals("ScalarDivideColumnDecimal")) {
      generateScalarDivideColumnDecimal(tdesc);
    }
 else     if (tdesc[0].equals("ColumnDivideColumnDecimal")) {
      generateColumnDivideColumnDecimal(tdesc);
    }
 else     if (tdesc[0].equals("ColumnCompareScalar")) {
      generateColumnCompareScalar(tdesc);
    }
 else     if (tdesc[0].equals("ScalarCompareColumn")) {
      generateScalarCompareColumn(tdesc);
    }
 else     if (tdesc[0].equals("FilterColumnCompareScalar")) {
      generateFilterColumnCompareScalar(tdesc);
    }
 else     if (tdesc[0].equals("FilterScalarCompareColumn")) {
      generateFilterScalarCompareColumn(tdesc);
    }
 else     if (tdesc[0].equals("FilterColumnBetween")) {
      generateFilterColumnBetween(tdesc);
    }
 else     if (tdesc[0].equals("ScalarArithmeticColumn") || tdesc[0].equals("ScalarDivideColumn")) {
      generateScalarArithmeticColumn(tdesc);
    }
 else     if (tdesc[0].equals("FilterColumnCompareColumn")) {
      generateFilterColumnCompareColumn(tdesc);
    }
 else     if (tdesc[0].equals("ColumnCompareColumn")) {
      generateColumnCompareColumn(tdesc);
    }
 else     if (tdesc[0].equals("ColumnArithmeticColumn") || tdesc[0].equals("ColumnDivideColumn")) {
      generateColumnArithmeticColumn(tdesc);
    }
 else     if (tdesc[0].equals("ColumnUnaryMinus")) {
      generateColumnUnaryMinus(tdesc);
    }
 else     if (tdesc[0].equals("ColumnUnaryFunc")) {
      generateColumnUnaryFunc(tdesc);
    }
 else     if (tdesc[0].equals("VectorUDAFMinMax")) {
      generateVectorUDAFMinMax(tdesc);
    }
 else     if (tdesc[0].equals("VectorUDAFMinMaxString")) {
      generateVectorUDAFMinMaxString(tdesc);
    }
 else     if (tdesc[0].equals("VectorUDAFSum")) {
      generateVectorUDAFSum(tdesc);
    }
 else     if (tdesc[0].equals("VectorUDAFAvg")) {
      generateVectorUDAFAvg(tdesc);
    }
 else     if (tdesc[0].equals("VectorUDAFVar")) {
      generateVectorUDAFVar(tdesc);
    }
 else     if (tdesc[0].equals("FilterStringColumnCompareScalar")) {
      generateFilterStringColumnCompareScalar(tdesc);
    }
 else     if (tdesc[0].equals("FilterStringColumnBetween")) {
      generateFilterStringColumnBetween(tdesc);
    }
 else     if (tdesc[0].equals("StringColumnCompareScalar")) {
      generateStringColumnCompareScalar(tdesc);
    }
 else     if (tdesc[0].equals("FilterStringScalarCompareColumn")) {
      generateFilterStringScalarCompareColumn(tdesc);
    }
 else     if (tdesc[0].equals("StringScalarCompareColumn")) {
      generateStringScalarCompareColumn(tdesc);
    }
 else     if (tdesc[0].equals("FilterStringColumnCompareColumn")) {
      generateFilterStringColumnCompareColumn(tdesc);
    }
 else     if (tdesc[0].equals("StringColumnCompareColumn")) {
      generateStringColumnCompareColumn(tdesc);
    }
 else     if (tdesc[0].equals("IfExprColumnColumn")) {
      generateIfExprColumnColumn(tdesc);
    }
 else     if (tdesc[0].equals("IfExprColumnScalar")) {
      generateIfExprColumnScalar(tdesc);
    }
 else     if (tdesc[0].equals("IfExprScalarColumn")) {
      generateIfExprScalarColumn(tdesc);
    }
 else     if (tdesc[0].equals("IfExprScalarScalar")) {
      generateIfExprScalarScalar(tdesc);
    }
 else     if (tdesc[0].equals("FilterDecimalColumnCompareScalar")) {
      generateFilterDecimalColumnCompareScalar(tdesc);
    }
 else     if (tdesc[0].equals("FilterDecimalScalarCompareColumn")) {
      generateFilterDecimalScalarCompareColumn(tdesc);
    }
 else     if (tdesc[0].equals("FilterDecimalColumnCompareColumn")) {
      generateFilterDecimalColumnCompareColumn(tdesc);
    }
 else {
      continue;
    }
  }
  System.out.println("Generating vector expression test code");
  testCodeGen.generateTestSuites();
}
