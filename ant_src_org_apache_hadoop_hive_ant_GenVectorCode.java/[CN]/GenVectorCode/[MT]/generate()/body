{
  System.out.println("Generating vector expression code");
  for (  String[] tdesc : templateExpansions) {
    if (tdesc[0].equals("ColumnArithmeticScalar") || tdesc[0].equals("ColumnDivideScalar")) {
      generateColumnArithmeticScalar(tdesc);
    }
 else     if (tdesc[0].equals("ColumnArithmeticScalarDecimal")) {
      generateColumnArithmeticScalarDecimal(tdesc);
    }
 else     if (tdesc[0].equals("ScalarArithmeticColumnDecimal")) {
      generateScalarArithmeticColumnDecimal(tdesc);
    }
 else     if (tdesc[0].equals("ColumnArithmeticColumnDecimal")) {
      generateColumnArithmeticColumnDecimal(tdesc);
    }
 else     if (tdesc[0].equals("ColumnDivideScalarDecimal")) {
      generateColumnDivideScalarDecimal(tdesc);
    }
 else     if (tdesc[0].equals("ScalarDivideColumnDecimal")) {
      generateScalarDivideColumnDecimal(tdesc);
    }
 else     if (tdesc[0].equals("ColumnDivideColumnDecimal")) {
      generateColumnDivideColumnDecimal(tdesc);
    }
 else     if (tdesc[0].equals("ColumnCompareScalar")) {
      generateColumnCompareScalar(tdesc);
    }
 else     if (tdesc[0].equals("ScalarCompareColumn")) {
      generateScalarCompareColumn(tdesc);
    }
 else     if (tdesc[0].equals("TimestampScalarCompareTimestampColumn")) {
      generateTimestampScalarCompareTimestampColumn(tdesc);
    }
 else     if (tdesc[0].equals("ScalarCompareTimestampColumn")) {
      generateScalarCompareTimestampColumn(tdesc);
    }
 else     if (tdesc[0].equals("TimestampColumnCompareTimestampScalar")) {
      generateTimestampColumnCompareTimestampScalar(tdesc);
    }
 else     if (tdesc[0].equals("TimestampColumnCompareScalar")) {
      generateTimestampColumnCompareScalar(tdesc);
    }
 else     if (tdesc[0].equals("FilterColumnCompareScalar")) {
      generateFilterColumnCompareScalar(tdesc);
    }
 else     if (tdesc[0].equals("FilterScalarCompareColumn")) {
      generateFilterScalarCompareColumn(tdesc);
    }
 else     if (tdesc[0].equals("FilterTimestampColumnCompareTimestampScalar")) {
      generateFilterTimestampColumnCompareTimestampScalar(tdesc);
    }
 else     if (tdesc[0].equals("FilterTimestampColumnCompareScalar")) {
      generateFilterTimestampColumnCompareScalar(tdesc);
    }
 else     if (tdesc[0].equals("FilterTimestampScalarCompareTimestampColumn")) {
      generateFilterTimestampScalarCompareTimestampColumn(tdesc);
    }
 else     if (tdesc[0].equals("FilterScalarCompareTimestampColumn")) {
      generateFilterScalarCompareTimestampColumn(tdesc);
    }
 else     if (tdesc[0].equals("FilterColumnBetween")) {
      generateFilterColumnBetween(tdesc);
    }
 else     if (tdesc[0].equals("ScalarArithmeticColumn") || tdesc[0].equals("ScalarDivideColumn")) {
      generateScalarArithmeticColumn(tdesc);
    }
 else     if (tdesc[0].equals("FilterColumnCompareColumn")) {
      generateFilterColumnCompareColumn(tdesc);
    }
 else     if (tdesc[0].equals("ColumnCompareColumn")) {
      generateColumnCompareColumn(tdesc);
    }
 else     if (tdesc[0].equals("ColumnArithmeticColumn") || tdesc[0].equals("ColumnDivideColumn")) {
      generateColumnArithmeticColumn(tdesc);
    }
 else     if (tdesc[0].equals("ColumnUnaryMinus")) {
      generateColumnUnaryMinus(tdesc);
    }
 else     if (tdesc[0].equals("ColumnUnaryFunc")) {
      generateColumnUnaryFunc(tdesc);
    }
 else     if (tdesc[0].equals("DecimalColumnUnaryFunc")) {
      generateDecimalColumnUnaryFunc(tdesc);
    }
 else     if (tdesc[0].equals("VectorUDAFMinMax")) {
      generateVectorUDAFMinMax(tdesc);
    }
 else     if (tdesc[0].equals("VectorUDAFMinMaxString")) {
      generateVectorUDAFMinMaxString(tdesc);
    }
 else     if (tdesc[0].equals("VectorUDAFMinMaxDecimal")) {
      generateVectorUDAFMinMaxDecimal(tdesc);
    }
 else     if (tdesc[0].equals("VectorUDAFSum")) {
      generateVectorUDAFSum(tdesc);
    }
 else     if (tdesc[0].equals("VectorUDAFAvg")) {
      generateVectorUDAFAvg(tdesc);
    }
 else     if (tdesc[0].equals("VectorUDAFVar")) {
      generateVectorUDAFVar(tdesc);
    }
 else     if (tdesc[0].equals("VectorUDAFVarDecimal")) {
      generateVectorUDAFVarDecimal(tdesc);
    }
 else     if (tdesc[0].equals("FilterStringGroupColumnCompareStringGroupScalarBase")) {
      generateFilterStringGroupColumnCompareStringGroupScalarBase(tdesc);
    }
 else     if (tdesc[0].equals("FilterStringGroupColumnCompareStringScalar")) {
      generateFilterStringGroupColumnCompareStringScalar(tdesc);
    }
 else     if (tdesc[0].equals("FilterStringGroupColumnCompareTruncStringScalar")) {
      generateFilterStringGroupColumnCompareTruncStringScalar(tdesc);
    }
 else     if (tdesc[0].equals("FilterStringColumnBetween")) {
      generateFilterStringColumnBetween(tdesc);
    }
 else     if (tdesc[0].equals("FilterTruncStringColumnBetween")) {
      generateFilterTruncStringColumnBetween(tdesc);
    }
 else     if (tdesc[0].equals("FilterDecimalColumnBetween")) {
      generateFilterDecimalColumnBetween(tdesc);
    }
 else     if (tdesc[0].equals("StringGroupColumnCompareStringGroupScalarBase")) {
      generateStringGroupColumnCompareStringGroupScalarBase(tdesc);
    }
 else     if (tdesc[0].equals("StringGroupColumnCompareStringScalar")) {
      generateStringGroupColumnCompareStringScalar(tdesc);
    }
 else     if (tdesc[0].equals("StringGroupColumnCompareTruncStringScalar")) {
      generateStringGroupColumnCompareTruncStringScalar(tdesc);
    }
 else     if (tdesc[0].equals("FilterStringGroupScalarCompareStringGroupColumnBase")) {
      generateFilterStringGroupScalarCompareStringGroupColumnBase(tdesc);
    }
 else     if (tdesc[0].equals("FilterStringScalarCompareStringGroupColumn")) {
      generateFilterStringScalarCompareStringGroupColumn(tdesc);
    }
 else     if (tdesc[0].equals("FilterTruncStringScalarCompareStringGroupColumn")) {
      generateFilterTruncStringScalarCompareStringGroupColumn(tdesc);
    }
 else     if (tdesc[0].equals("StringGroupScalarCompareStringGroupColumnBase")) {
      generateStringGroupScalarCompareStringGroupColumnBase(tdesc);
    }
 else     if (tdesc[0].equals("StringScalarCompareStringGroupColumn")) {
      generateStringScalarCompareStringGroupColumn(tdesc);
    }
 else     if (tdesc[0].equals("TruncStringScalarCompareStringGroupColumn")) {
      generateTruncStringScalarCompareStringGroupColumn(tdesc);
    }
 else     if (tdesc[0].equals("FilterStringGroupColumnCompareStringGroupColumn")) {
      generateFilterStringGroupColumnCompareStringGroupColumn(tdesc);
    }
 else     if (tdesc[0].equals("StringGroupColumnCompareStringGroupColumn")) {
      generateStringGroupColumnCompareStringGroupColumn(tdesc);
    }
 else     if (tdesc[0].equals("IfExprColumnColumn")) {
      generateIfExprColumnColumn(tdesc);
    }
 else     if (tdesc[0].equals("IfExprColumnScalar")) {
      generateIfExprColumnScalar(tdesc);
    }
 else     if (tdesc[0].equals("IfExprScalarColumn")) {
      generateIfExprScalarColumn(tdesc);
    }
 else     if (tdesc[0].equals("IfExprScalarScalar")) {
      generateIfExprScalarScalar(tdesc);
    }
 else     if (tdesc[0].equals("FilterDecimalColumnCompareScalar")) {
      generateFilterDecimalColumnCompareScalar(tdesc);
    }
 else     if (tdesc[0].equals("FilterDecimalScalarCompareColumn")) {
      generateFilterDecimalScalarCompareColumn(tdesc);
    }
 else     if (tdesc[0].equals("FilterDecimalColumnCompareColumn")) {
      generateFilterDecimalColumnCompareColumn(tdesc);
    }
 else     if (tdesc[0].equals("FilterDTIScalarCompareColumn")) {
      generateFilterDTIScalarCompareColumn(tdesc);
    }
 else     if (tdesc[0].equals("FilterDTIColumnCompareScalar")) {
      generateFilterDTIColumnCompareScalar(tdesc);
    }
 else     if (tdesc[0].equals("DTIScalarCompareColumn")) {
      generateDTIScalarCompareColumn(tdesc);
    }
 else     if (tdesc[0].equals("DTIColumnCompareScalar")) {
      generateDTIColumnCompareScalar(tdesc);
    }
 else     if (tdesc[0].equals("DTIColumnArithmeticDTIScalarNoConvert")) {
      generateColumnArithmeticScalar(tdesc);
    }
 else     if (tdesc[0].equals("DTIScalarArithmeticDTIColumnNoConvert")) {
      generateScalarArithmeticColumn(tdesc);
    }
 else     if (tdesc[0].equals("DTIColumnArithmeticDTIColumnNoConvert")) {
      generateColumnArithmeticColumn(tdesc);
    }
 else     if (tdesc[0].equals("ColumnArithmeticColumnWithConvert")) {
      generateColumnArithmeticColumnWithConvert(tdesc);
    }
 else     if (tdesc[0].equals("ScalarArithmeticColumnWithConvert")) {
      generateScalarArithmeticColumnWithConvert(tdesc);
    }
 else     if (tdesc[0].equals("ColumnArithmeticScalarWithConvert")) {
      generateColumnArithmeticScalarWithConvert(tdesc);
    }
 else     if (tdesc[0].equals("DateTimeColumnArithmeticIntervalColumnWithConvert")) {
      generateDateTimeColumnArithmeticIntervalColumnWithConvert(tdesc);
    }
 else     if (tdesc[0].equals("DateTimeScalarArithmeticIntervalColumnWithConvert")) {
      generateDateTimeScalarArithmeticIntervalColumnWithConvert(tdesc);
    }
 else     if (tdesc[0].equals("DateTimeColumnArithmeticIntervalScalarWithConvert")) {
      generateDateTimeColumnArithmeticIntervalScalarWithConvert(tdesc);
    }
 else     if (tdesc[0].equals("IntervalColumnArithmeticDateTimeColumnWithConvert")) {
      generateDateTimeColumnArithmeticIntervalColumnWithConvert(tdesc);
    }
 else     if (tdesc[0].equals("IntervalScalarArithmeticDateTimeColumnWithConvert")) {
      generateDateTimeScalarArithmeticIntervalColumnWithConvert(tdesc);
    }
 else     if (tdesc[0].equals("IntervalColumnArithmeticDateTimeScalarWithConvert")) {
      generateDateTimeColumnArithmeticIntervalScalarWithConvert(tdesc);
    }
 else {
      continue;
    }
  }
  System.out.println("Generating vector expression test code");
  testCodeGen.generateTestSuites();
}
