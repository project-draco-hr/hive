{
  String operatorName=tdesc[1];
  String operatorSymbol=tdesc[2];
  String operandType1=tdesc[3];
  String colOrScalar1=tdesc[4];
  String operandType2=tdesc[5];
  String colOrScalar2=tdesc[6];
  String className=getCamelCaseType(operandType1) + colOrScalar1 + operatorName+ getCamelCaseType(operandType2)+ colOrScalar2;
  String fileName=getCamelCaseType(operandType1) + (colOrScalar1.equals("Col") ? "Column" : colOrScalar1) + "Arithmetic"+ getCamelCaseType(operandType2)+ colOrScalar2;
  File templateFile=new File(joinPath(this.expressionTemplateDirectory,fileName + ".txt"));
  String templateString=readFile(templateFile);
  templateString=templateString.replaceAll("<ClassName>",className);
  templateString=templateString.replaceAll("<OperatorSymbol>",operatorSymbol);
  writeFile(templateFile.lastModified(),expressionOutputDirectory,expressionClassesDirectory,className,templateString);
  String inputColumnVectorType1=this.getColumnVectorType(operandType1);
  String inputColumnVectorType2=this.getColumnVectorType(operandType2);
  if (colOrScalar1.equals("Col") && colOrScalar1.equals("Column")) {
    testCodeGen.addColumnColumnOperationTestCases(className,inputColumnVectorType1,inputColumnVectorType2,"long");
  }
 else   if (colOrScalar1.equals("Col") && colOrScalar1.equals("Scalar")) {
    String testScalarType=operandType2;
    if (isDateIntervalType(testScalarType)) {
      testScalarType="long";
    }
    testCodeGen.addColumnScalarOperationTestCases(true,className,inputColumnVectorType1,"long",testScalarType);
  }
 else   if (colOrScalar1.equals("Scalar") && colOrScalar1.equals("Column")) {
    String testScalarType=operandType1;
    if (isDateIntervalType(testScalarType)) {
      testScalarType="long";
    }
    testCodeGen.addColumnScalarOperationTestCases(false,className,inputColumnVectorType2,"long",testScalarType);
  }
}
