{
  String operatorName=tdesc[1];
  String operandType1=tdesc[2];
  String camelOperandType1=getCamelCaseType(operandType1);
  String colOrScalar1=tdesc[3];
  String operandType2=tdesc[4];
  String camelOperandType2=getCamelCaseType(operandType2);
  String colOrScalar2=tdesc[5];
  String returnType;
  if (operandType1.equals(operandType2)) {
    returnType="interval_day_time";
  }
 else {
    returnType="timestamp";
  }
  String className=getCamelCaseType(operandType1) + colOrScalar1 + operatorName+ getCamelCaseType(operandType2)+ colOrScalar2;
  String baseClassName="Timestamp" + colOrScalar1 + operatorName+ "Timestamp"+ colOrScalar2+ "Base";
  String fileName="Timestamp" + (colOrScalar1.equals("Col") ? "Column" : colOrScalar1) + "Arithmetic"+ "Timestamp"+ colOrScalar2;
  File templateFile=new File(joinPath(this.expressionTemplateDirectory,fileName + ".txt"));
  String templateString=readFile(templateFile);
  templateString=templateString.replaceAll("<ClassName>",className);
  templateString=templateString.replaceAll("<BaseClassName>",baseClassName);
  templateString=templateString.replaceAll("<OperatorMethod>",operatorName.toLowerCase());
  templateString=templateString.replaceAll("<OperandType1>",operandType1);
  templateString=templateString.replaceAll("<OperandType2>",operandType2);
  templateString=templateString.replaceAll("<CamelOperandType1>",camelOperandType1);
  templateString=templateString.replaceAll("<CamelOperandType2>",camelOperandType2);
  templateString=templateString.replaceAll("<HiveOperandType1>",getTimestampHiveType(operandType1));
  templateString=templateString.replaceAll("<HiveOperandType2>",getTimestampHiveType(operandType2));
  String inputColumnVectorType1=this.getColumnVectorType(operandType1);
  templateString=templateString.replaceAll("<InputColumnVectorType1>",inputColumnVectorType1);
  String inputColumnVectorType2=this.getColumnVectorType(operandType2);
  templateString=templateString.replaceAll("<InputColumnVectorType2>",inputColumnVectorType2);
  String outputColumnVectorType=this.getColumnVectorType(returnType);
  templateString=templateString.replaceAll("<OutputColumnVectorType>",outputColumnVectorType);
  templateString=templateString.replaceAll("<CamelReturnType>",getCamelCaseType(returnType));
  templateString=templateString.replaceAll("<ReturnType>",returnType);
  writeFile(templateFile.lastModified(),expressionOutputDirectory,expressionClassesDirectory,className,templateString);
}
