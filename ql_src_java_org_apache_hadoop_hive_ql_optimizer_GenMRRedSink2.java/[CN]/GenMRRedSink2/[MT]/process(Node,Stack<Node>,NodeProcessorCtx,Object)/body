{
  ReduceSinkOperator op=(ReduceSinkOperator)nd;
  GenMRProcContext ctx=(GenMRProcContext)opProcCtx;
  Map<Operator<? extends OperatorDesc>,GenMapRedCtx> mapCurrCtx=ctx.getMapCurrCtx();
  GenMapRedCtx mapredCtx=mapCurrCtx.get(op.getParentOperators().get(0));
  Task<? extends Serializable> currTask=mapredCtx.getCurrTask();
  String currAliasId=mapredCtx.getCurrAliasId();
  Operator<? extends OperatorDesc> reducer=op.getChildOperators().get(0);
  Map<Operator<? extends OperatorDesc>,Task<? extends Serializable>> opTaskMap=ctx.getOpTaskMap();
  Task<? extends Serializable> oldTask=opTaskMap.get(reducer);
  ctx.setCurrAliasId(currAliasId);
  ctx.setCurrTask(currTask);
  if (oldTask == null) {
    GenMapRedUtils.splitPlan(op,ctx);
  }
 else {
    GenMapRedUtils.splitPlan(op,currTask,oldTask,ctx);
    currTask=oldTask;
    ctx.setCurrTask(currTask);
  }
  mapCurrCtx.put(op,new GenMapRedCtx(ctx.getCurrTask(),ctx.getCurrAliasId()));
  if (GenMapRedUtils.hasBranchFinished(nodeOutputs)) {
    ctx.addRootIfPossible(currTask);
    return false;
  }
  return true;
}
