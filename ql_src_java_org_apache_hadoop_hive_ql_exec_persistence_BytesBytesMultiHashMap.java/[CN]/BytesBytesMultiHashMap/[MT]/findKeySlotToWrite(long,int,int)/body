{
  final int bucketMask=(refs.length - 1);
  int slot=hashCode & bucketMask;
  long probeSlot=slot;
  int i=0;
  while (true) {
    long ref=refs[slot];
    if (ref == 0 || isSameKey(keyOffset,keyLength,ref,hashCode)) {
      break;
    }
    ++metricPutConflict;
    probeSlot+=(++i);
    slot=(int)(probeSlot & bucketMask);
  }
  if (largestNumberOfSteps < i) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Probed " + i + " slots (the longest so far) to find space");
    }
    largestNumberOfSteps=i;
  }
  return slot;
}
