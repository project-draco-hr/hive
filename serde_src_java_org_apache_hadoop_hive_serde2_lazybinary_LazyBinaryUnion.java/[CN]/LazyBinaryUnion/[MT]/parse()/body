{
  LazyBinaryUnionObjectInspector uoi=(LazyBinaryUnionObjectInspector)oi;
  int unionByteEnd=start + length;
  byte[] byteArr=this.bytes.getData();
  final int tagEnd=start + 1;
  tag=byteArr[start];
  field=LazyBinaryFactory.createLazyBinaryObject(uoi.getObjectInspectors().get(tag));
  LazyBinaryUtils.checkObjectByteInfo(uoi.getObjectInspectors().get(tag),byteArr,tagEnd,recordInfo,vInt);
  fieldStart=tagEnd + recordInfo.elementOffset;
  fieldLength=recordInfo.elementSize;
  if (!extraFieldWarned && (fieldStart + fieldLength) < unionByteEnd) {
    extraFieldWarned=true;
    LOG.warn("Extra bytes detected at the end of the row! Ignoring similar " + "problems.");
  }
  if (!missingFieldWarned && (fieldStart + fieldLength) > unionByteEnd) {
    missingFieldWarned=true;
    LOG.info("Missing fields! Expected 1 fields but " + "only got " + field + "! Ignoring similar problems.");
  }
  parsed=true;
}
