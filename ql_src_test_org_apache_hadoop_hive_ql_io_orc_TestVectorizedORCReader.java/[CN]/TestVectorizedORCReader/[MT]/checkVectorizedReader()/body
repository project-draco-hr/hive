{
  Reader vreader=OrcFile.createReader(testFilePath,OrcFile.readerOptions(conf));
  Reader reader=OrcFile.createReader(testFilePath,OrcFile.readerOptions(conf));
  RecordReaderImpl vrr=(RecordReaderImpl)vreader.rows();
  RecordReaderImpl rr=(RecordReaderImpl)reader.rows();
  VectorizedRowBatch batch=null;
  OrcStruct row=null;
  while (vrr.hasNext()) {
    batch=vrr.nextBatch(batch);
    for (int i=0; i < batch.size; i++) {
      row=(OrcStruct)rr.next(row);
      for (int j=0; j < batch.cols.length; j++) {
        Object a=(row.getFieldValue(j));
        ColumnVector cv=batch.cols[j];
        int rowId=cv.isRepeating ? 0 : i;
        if (a == null) {
          Assert.assertEquals(true,!cv.noNulls && cv.isNull[rowId]);
        }
 else         if (a instanceof BooleanWritable) {
          Long temp=(long)(((BooleanWritable)a).get() ? 1 : 0);
          long b=((LongColumnVector)cv).vector[rowId];
          Assert.assertEquals(temp.toString(),Long.toString(b));
        }
 else         if (a instanceof TimestampWritable) {
          TimestampWritable t=((TimestampWritable)a);
          TimestampColumnVector tcv=((TimestampColumnVector)cv);
          Assert.assertEquals(t.getTimestamp(),tcv.asScratchTimestamp(rowId));
        }
 else         if (a instanceof DateWritable) {
          DateWritable adt=(DateWritable)a;
          long b=((LongColumnVector)cv).vector[rowId];
          Assert.assertEquals(adt.get().getTime(),DateWritable.daysToMillis((int)b));
        }
 else         if (a instanceof HiveDecimalWritable) {
          HiveDecimalWritable dec=(HiveDecimalWritable)a;
          HiveDecimalWritable b=((DecimalColumnVector)cv).vector[i];
          Assert.assertEquals(dec,b);
        }
 else         if (a instanceof DoubleWritable) {
          double b=((DoubleColumnVector)cv).vector[rowId];
          assertEquals(a.toString(),Double.toString(b));
        }
 else         if (a instanceof Text) {
          BytesColumnVector bcv=(BytesColumnVector)cv;
          Text b=new Text();
          b.set(bcv.vector[rowId],bcv.start[rowId],bcv.length[rowId]);
          assertEquals(a,b);
        }
 else         if (a instanceof IntWritable || a instanceof LongWritable || a instanceof ByteWritable|| a instanceof ShortWritable) {
          assertEquals(a.toString(),Long.toString(((LongColumnVector)cv).vector[rowId]));
        }
 else {
          assertEquals("huh",a.getClass().getName());
        }
      }
    }
    Assert.assertEquals(false,batch.cols[0].isRepeating);
    Assert.assertEquals(false,batch.cols[1].isRepeating);
    Assert.assertEquals(false,batch.cols[2].isRepeating);
    Assert.assertEquals(true,batch.cols[3].isRepeating);
    Assert.assertEquals(false,batch.cols[4].isRepeating);
    Assert.assertEquals(false,batch.cols[5].isRepeating);
    Assert.assertEquals(false,batch.cols[6].isRepeating);
    Assert.assertEquals(false,batch.cols[7].isRepeating);
    Assert.assertEquals(false,batch.cols[8].isRepeating);
    Assert.assertEquals(false,batch.cols[9].isRepeating);
    Assert.assertEquals(false,batch.cols[0].noNulls);
    Assert.assertEquals(false,batch.cols[1].noNulls);
    Assert.assertEquals(true,batch.cols[2].noNulls);
    Assert.assertEquals(true,batch.cols[3].noNulls);
    Assert.assertEquals(false,batch.cols[4].noNulls);
    Assert.assertEquals(false,batch.cols[5].noNulls);
    Assert.assertEquals(false,batch.cols[6].noNulls);
    Assert.assertEquals(false,batch.cols[7].noNulls);
    Assert.assertEquals(false,batch.cols[8].noNulls);
    Assert.assertEquals(false,batch.cols[9].noNulls);
  }
  Assert.assertEquals(false,rr.hasNext());
}
