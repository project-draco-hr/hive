def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 0):
            if (ftype == TType.MAP):
                self.success = {}
                (_ktype190, _vtype191, _size189) = iprot.readMapBegin()
                for _i193 in xrange(_size189):
                    _key194 = iprot.readString()
                    _val195 = iprot.readString()
                    self.success[_key194] = _val195
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == (-2)):
            if (ftype == TType.STRUCT):
                self.ouch1 = MetaException()
                self.ouch1.read(iprot)
            else:
                iprot.skip(ftype)
        elif (fid == (-3)):
            if (ftype == TType.STRUCT):
                self.ouch2 = UnknownTableException()
                self.ouch2.read(iprot)
            else:
                iprot.skip(ftype)
        elif (fid == (-4)):
            if (ftype == TType.STRUCT):
                self.ouch3 = UnknownDBException()
                self.ouch3.read(iprot)
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
