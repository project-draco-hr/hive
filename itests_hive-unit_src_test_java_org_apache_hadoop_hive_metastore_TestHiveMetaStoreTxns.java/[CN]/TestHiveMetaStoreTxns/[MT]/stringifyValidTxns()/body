{
  GetOpenTxnsResponse rsp=new GetOpenTxnsResponse();
  rsp.setTxn_high_water_mark(1);
  IMetaStoreClient.ValidTxnList validTxns=new HiveMetaStoreClient.ValidTxnListImpl(rsp);
  String asString=validTxns.toString();
  Assert.assertEquals("1:",asString);
  validTxns=new HiveMetaStoreClient.ValidTxnListImpl();
  validTxns.fromString(asString);
  Assert.assertEquals(1,validTxns.getOpenTxns().getTxn_high_water_mark());
  Assert.assertNotNull(validTxns.getOpenTxns().getOpen_txns());
  Assert.assertEquals(0,validTxns.getOpenTxns().getOpen_txnsSize());
  asString=validTxns.toString();
  Assert.assertEquals("1:",asString);
  validTxns=new HiveMetaStoreClient.ValidTxnListImpl();
  validTxns.fromString(asString);
  Assert.assertEquals(1,validTxns.getOpenTxns().getTxn_high_water_mark());
  Assert.assertNotNull(validTxns.getOpenTxns().getOpen_txns());
  Assert.assertEquals(0,validTxns.getOpenTxns().getOpen_txnsSize());
  rsp=new GetOpenTxnsResponse();
  rsp.setTxn_high_water_mark(10);
  Set<Long> openTxns=new HashSet<Long>(2);
  openTxns.add(3L);
  openTxns.add(5L);
  rsp.setOpen_txns(openTxns);
  validTxns=new HiveMetaStoreClient.ValidTxnListImpl(rsp);
  asString=validTxns.toString();
  if (!asString.equals("10:3:5") && !asString.equals("10:5:3")) {
    Assert.fail("Unexpected string value " + asString);
  }
  validTxns=new HiveMetaStoreClient.ValidTxnListImpl();
  validTxns.fromString(asString);
  Assert.assertEquals(10,validTxns.getOpenTxns().getTxn_high_water_mark());
  Assert.assertNotNull(validTxns.getOpenTxns().getOpen_txns());
  Assert.assertEquals(2,validTxns.getOpenTxns().getOpen_txnsSize());
  boolean sawThree=false, sawFive=false;
  for (  long tid : validTxns.getOpenTxns().getOpen_txns()) {
    if (tid == 3)     sawThree=true;
 else     if (tid == 5)     sawFive=true;
 else     Assert.fail("Unexpected value " + tid);
  }
  Assert.assertTrue(sawThree);
  Assert.assertTrue(sawFive);
}
