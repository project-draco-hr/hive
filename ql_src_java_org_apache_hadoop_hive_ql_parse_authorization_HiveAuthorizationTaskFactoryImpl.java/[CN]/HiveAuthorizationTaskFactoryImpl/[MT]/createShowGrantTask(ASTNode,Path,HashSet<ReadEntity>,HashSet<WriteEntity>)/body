{
  PrincipalDesc principalDesc=null;
  PrivilegeObjectDesc privHiveObj=null;
  List<String> cols=null;
  ASTNode param=null;
  if (ast.getChildCount() > 0) {
    param=(ASTNode)ast.getChild(0);
    principalDesc=AuthorizationParseUtils.getPrincipalDesc(param);
    if (principalDesc != null) {
      param=(ASTNode)ast.getChild(1);
    }
  }
  if (param != null) {
    if (param.getType() == HiveParser.TOK_RESOURCE_ALL) {
      privHiveObj=new PrivilegeObjectDesc();
    }
 else     if (param.getType() == HiveParser.TOK_PRIV_OBJECT_COL) {
      privHiveObj=new PrivilegeObjectDesc();
      String text=param.getChild(0).getText();
      privHiveObj.setObject(BaseSemanticAnalyzer.unescapeIdentifier(text));
      ASTNode objTypeNode=(ASTNode)param.getChild(1);
      privHiveObj.setTable(objTypeNode.getToken().getType() == HiveParser.TOK_TABLE_TYPE);
      for (int i=2; i < param.getChildCount(); i++) {
        ASTNode partOrCol=(ASTNode)param.getChild(i);
        if (partOrCol.getType() == HiveParser.TOK_PARTSPEC) {
          privHiveObj.setPartSpec(DDLSemanticAnalyzer.getPartSpec(partOrCol));
        }
 else         if (partOrCol.getType() == HiveParser.TOK_TABCOLNAME) {
          cols=BaseSemanticAnalyzer.getColumnNames(partOrCol);
        }
 else {
          throw new SemanticException("Invalid token type " + partOrCol.getType());
        }
      }
    }
  }
  ShowGrantDesc showGrant=new ShowGrantDesc(resultFile.toString(),principalDesc,privHiveObj,cols);
  return TaskFactory.get(new DDLWork(inputs,outputs,showGrant),conf);
}
