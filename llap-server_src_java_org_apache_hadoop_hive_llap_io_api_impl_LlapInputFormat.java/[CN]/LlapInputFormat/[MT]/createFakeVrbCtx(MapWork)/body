{
  RowSchema rowSchema=findTsOp(mapWork).getSchema();
  final List<String> colNames=new ArrayList<String>(rowSchema.getSignature().size());
  final List<TypeInfo> colTypes=new ArrayList<TypeInfo>(rowSchema.getSignature().size());
  for (  ColumnInfo c : rowSchema.getSignature()) {
    String columnName=c.getInternalName();
    if (VirtualColumn.VIRTUAL_COLUMN_NAMES.contains(columnName))     continue;
    colNames.add(columnName);
    colTypes.add(TypeInfoUtils.getTypeInfoFromTypeString(c.getTypeName()));
  }
  int partitionColumnCount=0;
  Iterator<Path> paths=mapWork.getPathToAliases().keySet().iterator();
  if (paths.hasNext()) {
    PartitionDesc partDesc=mapWork.getPathToPartitionInfo().get(paths.next());
    if (partDesc != null) {
      LinkedHashMap<String,String> partSpec=partDesc.getPartSpec();
      if (partSpec != null && partSpec.isEmpty()) {
        partitionColumnCount=partSpec.size();
      }
    }
  }
  return new VectorizedRowBatchCtx(colNames.toArray(new String[colNames.size()]),colTypes.toArray(new TypeInfo[colTypes.size()]),null,partitionColumnCount,new String[0]);
}
