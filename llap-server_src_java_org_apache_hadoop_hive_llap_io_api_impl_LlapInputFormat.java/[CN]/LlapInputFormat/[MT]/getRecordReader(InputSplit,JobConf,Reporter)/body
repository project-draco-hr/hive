{
  boolean useLlapIo=true;
  if (split instanceof LlapAwareSplit) {
    useLlapIo=((LlapAwareSplit)split).canUseLlapIo();
  }
  boolean isVectorized=Utilities.getUseVectorizedInputFileFormat(job);
  if (useLlapIo) {
    useLlapIo=Utilities.checkLlapIOSupportedTypes(job);
  }
  if (!useLlapIo) {
    LlapIoImpl.LOG.warn("Not using LLAP IO for an unsupported split: " + split);
    return sourceInputFormat.getRecordReader(split,job,reporter);
  }
  FileSplit fileSplit=(FileSplit)split;
  reporter.setStatus(fileSplit.toString());
  try {
    List<Integer> includedCols=ColumnProjectionUtils.isReadAllColumns(job) ? null : ColumnProjectionUtils.getReadColumnIDs(job);
    LlapRecordReader rr=new LlapRecordReader(job,fileSplit,includedCols,hostName);
    if (isVectorized)     return rr;
    if (sourceInputFormat instanceof BatchToRowInputFormat) {
      return bogusCast(((BatchToRowInputFormat)sourceInputFormat).getWrapper(rr,rr.getVectorizedRowBatchCtx(),includedCols));
    }
    return sourceInputFormat.getRecordReader(split,job,reporter);
  }
 catch (  Exception ex) {
    throw new IOException(ex);
  }
}
