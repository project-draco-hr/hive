{
  Deque<Operator<? extends OperatorDesc>> deque=new LinkedList<Operator<? extends OperatorDesc>>();
  deque.addAll(pCtx.getTopOps().values());
  OptimizeSparkProcContext procCtx=new OptimizeSparkProcContext(conf,pCtx,inputs,outputs,deque);
  Map<Rule,NodeProcessor> opRules=new LinkedHashMap<Rule,NodeProcessor>();
  opRules.put(new RuleRegExp("Set parallelism - ReduceSink",ReduceSinkOperator.getOperatorName() + "%"),new SetSparkReducerParallelism());
  Dispatcher disp=new DefaultRuleDispatcher(null,opRules,procCtx);
  List<Node> topNodes=new ArrayList<Node>();
  topNodes.addAll(pCtx.getTopOps().values());
  GraphWalker ogw=new ForwardWalker(disp);
  ogw.startWalking(topNodes,null);
}
