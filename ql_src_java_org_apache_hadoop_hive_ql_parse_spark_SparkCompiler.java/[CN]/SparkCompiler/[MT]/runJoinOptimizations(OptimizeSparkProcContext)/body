{
  ParseContext pCtx=procCtx.getParseContext();
  Map<Rule,NodeProcessor> opRules=new LinkedHashMap<Rule,NodeProcessor>();
  opRules.put(new RuleRegExp("Set parallelism - ReduceSink",ReduceSinkOperator.getOperatorName() + "%"),new SetSparkReducerParallelism());
  opRules.put(new TypeRule(JoinOperator.class),new SparkJoinOptimizer(pCtx));
  opRules.put(new TypeRule(MapJoinOperator.class),new SparkJoinHintOptimizer(pCtx));
  opRules.put(new RuleRegExp("Disabling Dynamic Partition Pruning By Size",SparkPartitionPruningSinkOperator.getOperatorName() + "%"),new SparkRemoveDynamicPruningBySize());
  Dispatcher disp=new DefaultRuleDispatcher(null,opRules,procCtx);
  GraphWalker ogw=new DefaultGraphWalker(disp);
  ArrayList<Node> topNodes=new ArrayList<Node>();
  topNodes.addAll(pCtx.getTopOps().values());
  ogw.startWalking(topNodes,null);
}
