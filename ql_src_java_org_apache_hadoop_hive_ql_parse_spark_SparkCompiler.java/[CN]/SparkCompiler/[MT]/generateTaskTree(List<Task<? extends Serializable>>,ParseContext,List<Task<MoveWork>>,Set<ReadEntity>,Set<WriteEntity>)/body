{
  PERF_LOGGER.PerfLogBegin(CLASS_NAME,PerfLogger.SPARK_GENERATE_TASK_TREE);
  GenSparkUtils.getUtils().resetSequenceNumber();
  ParseContext tempParseContext=getParseContext(pCtx,rootTasks);
  GenSparkWork genSparkWork=new GenSparkWork(GenSparkUtils.getUtils());
  GenSparkProcContext procCtx=new GenSparkProcContext(conf,tempParseContext,mvTask,rootTasks,inputs,outputs,pCtx.getTopOps());
  Map<Rule,NodeProcessor> opRules=new LinkedHashMap<Rule,NodeProcessor>();
  opRules.put(new RuleRegExp("Split Work - ReduceSink",ReduceSinkOperator.getOperatorName() + "%"),genSparkWork);
  opRules.put(new TypeRule(MapJoinOperator.class),new SparkReduceSinkMapJoinProc());
  opRules.put(new RuleRegExp("Split Work + Move/Merge - FileSink",FileSinkOperator.getOperatorName() + "%"),new CompositeProcessor(new SparkFileSinkProcessor(),genSparkWork));
  opRules.put(new RuleRegExp("Handle Analyze Command",TableScanOperator.getOperatorName() + "%"),new SparkProcessAnalyzeTable(GenSparkUtils.getUtils()));
  opRules.put(new RuleRegExp("Remember union",UnionOperator.getOperatorName() + "%"),new NodeProcessor(){
    @Override public Object process(    Node n,    Stack<Node> s,    NodeProcessorCtx procCtx,    Object... os) throws SemanticException {
      GenSparkProcContext context=(GenSparkProcContext)procCtx;
      UnionOperator union=(UnionOperator)n;
      context.currentUnionOperators.add(union);
      return null;
    }
  }
);
  opRules.put(new TypeRule(SMBMapJoinOperator.class),new NodeProcessor(){
    @Override public Object process(    Node currNode,    Stack<Node> stack,    NodeProcessorCtx procCtx,    Object... os) throws SemanticException {
      for (      Node stackNode : stack) {
        if (stackNode instanceof DummyStoreOperator) {
          return true;
        }
      }
      return false;
    }
  }
);
  Dispatcher disp=new DefaultRuleDispatcher(null,opRules,procCtx);
  List<Node> topNodes=new ArrayList<Node>();
  topNodes.addAll(pCtx.getTopOps().values());
  GraphWalker ogw=new GenSparkWorkWalker(disp,procCtx);
  ogw.startWalking(topNodes,null);
  opRules.clear();
  opRules.put(new TypeRule(SMBMapJoinOperator.class),SparkSortMergeJoinFactory.getTableScanMapJoin());
  disp=new DefaultRuleDispatcher(null,opRules,procCtx);
  topNodes=new ArrayList<Node>();
  topNodes.addAll(pCtx.getTopOps().values());
  ogw=new GenSparkWorkWalker(disp,procCtx);
  ogw.startWalking(topNodes,null);
  for (  BaseWork w : procCtx.workWithUnionOperators) {
    GenSparkUtils.getUtils().removeUnionOperators(conf,procCtx,w);
  }
  for (  FileSinkOperator fileSink : procCtx.fileSinkSet) {
    GenSparkUtils.getUtils().processFileSink(procCtx,fileSink);
  }
  PERF_LOGGER.PerfLogEnd(CLASS_NAME,PerfLogger.SPARK_GENERATE_TASK_TREE);
}
