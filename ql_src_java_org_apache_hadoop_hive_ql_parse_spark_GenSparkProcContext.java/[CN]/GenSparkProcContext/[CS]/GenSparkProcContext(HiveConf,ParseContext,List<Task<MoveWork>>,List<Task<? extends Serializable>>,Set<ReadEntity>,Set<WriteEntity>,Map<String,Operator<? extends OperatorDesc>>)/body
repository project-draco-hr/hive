{
  this.conf=conf;
  this.parseContext=parseContext;
  this.moveTask=moveTask;
  this.rootTasks=rootTasks;
  this.inputs=inputs;
  this.outputs=outputs;
  this.topOps=topOps;
  this.currentTask=(SparkTask)TaskFactory.get(new SparkWork(conf.getVar(HiveConf.ConfVars.HIVEQUERYID)),conf);
  this.rootTasks.add(currentTask);
  this.leafOperatorToFollowingWork=new LinkedHashMap<Operator<?>,BaseWork>();
  this.linkOpWithWorkMap=new LinkedHashMap<Operator<?>,Map<BaseWork,SparkEdgeProperty>>();
  this.linkWorkWithReduceSinkMap=new LinkedHashMap<BaseWork,List<ReduceSinkOperator>>();
  this.smbJoinWorkMap=new LinkedHashMap<SMBMapJoinOperator,MapWork>();
  this.mapJoinWorkMap=new LinkedHashMap<MapJoinOperator,List<BaseWork>>();
  this.rootToWorkMap=new LinkedHashMap<Operator<?>,BaseWork>();
  this.childToWorkMap=new LinkedHashMap<Operator<?>,List<BaseWork>>();
  this.mapJoinParentMap=new LinkedHashMap<MapJoinOperator,List<Operator<?>>>();
  this.currentMapJoinOperators=new LinkedHashSet<MapJoinOperator>();
  this.linkChildOpWithDummyOp=new LinkedHashMap<Operator<?>,List<Operator<?>>>();
  this.dependencyTask=conf.getBoolVar(HiveConf.ConfVars.HIVE_MULTI_INSERT_MOVE_TASKS_SHARE_DEPENDENCIES) ? (DependencyCollectionTask)TaskFactory.get(new DependencyCollectionWork(),conf) : null;
  this.unionWorkMap=new LinkedHashMap<Operator<?>,BaseWork>();
  this.currentUnionOperators=new LinkedList<UnionOperator>();
  this.workWithUnionOperators=new LinkedHashSet<BaseWork>();
  this.clonedReduceSinks=new LinkedHashSet<ReduceSinkOperator>();
  this.fileSinkSet=new LinkedHashSet<FileSinkOperator>();
  this.fileSinkMap=new LinkedHashMap<FileSinkOperator,List<FileSinkOperator>>();
  this.connectedReduceSinks=new LinkedHashSet<ReduceSinkOperator>();
}
