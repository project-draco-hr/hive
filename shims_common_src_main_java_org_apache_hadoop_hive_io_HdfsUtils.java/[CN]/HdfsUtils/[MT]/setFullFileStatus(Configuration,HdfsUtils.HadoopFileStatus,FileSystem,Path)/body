{
  FileStatus fStatus=sourceStatus.getFileStatus();
  String group=fStatus.getGroup();
  LOG.trace(sourceStatus.getFileStatus().toString());
  FsShell fsShell=new FsShell();
  fsShell.setConf(conf);
  try {
    if (group != null && !group.isEmpty()) {
      run(fsShell,new String[]{"-chgrp","-R",group,target.toString()});
    }
    if (Objects.equal(conf.get("dfs.namenode.acls.enabled"),"true")) {
      try {
        AclStatus aclStatus=sourceStatus.getAclStatus();
        if (aclStatus != null) {
          LOG.trace(aclStatus.toString());
          List<AclEntry> aclEntries=aclStatus.getEntries();
          removeBaseAclEntries(aclEntries);
          FsPermission sourcePerm=fStatus.getPermission();
          aclEntries.add(newAclEntry(AclEntryScope.ACCESS,AclEntryType.USER,sourcePerm.getUserAction()));
          aclEntries.add(newAclEntry(AclEntryScope.ACCESS,AclEntryType.GROUP,sourcePerm.getGroupAction()));
          aclEntries.add(newAclEntry(AclEntryScope.ACCESS,AclEntryType.OTHER,sourcePerm.getOtherAction()));
          String aclEntry=Joiner.on(",").join(aclStatus.getEntries());
          run(fsShell,new String[]{"-setfacl","-R","--set",aclEntry,target.toString()});
        }
      }
 catch (      Exception e) {
        LOG.info("Skipping ACL inheritance: File system for path " + target + " "+ "does not support ACLs but dfs.namenode.acls.enabled is set to true. ");
        LOG.debug("The details are: " + e,e);
      }
    }
 else {
      String permission=Integer.toString(fStatus.getPermission().toShort(),8);
      run(fsShell,new String[]{"-chmod","-R",permission,target.toString()});
    }
  }
 catch (  Exception e) {
    throw new IOException("Unable to set permissions of " + target,e);
  }
}
