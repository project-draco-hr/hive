{
  ObjectInspector.Category c=typeInfo.getCategory();
switch (c) {
case PRIMITIVE:
    return PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(((PrimitiveTypeInfo)typeInfo).getPrimitiveCategory());
case MAP:
  return ObjectInspectorFactory.getLazySimpleMapObjectInspector(createLazyObjectInspector(((MapTypeInfo)typeInfo).getMapKeyTypeInfo(),separator,separatorIndex + 2,nullSequence),createLazyObjectInspector(((MapTypeInfo)typeInfo).getMapValueTypeInfo(),separator,separatorIndex + 2,nullSequence),separator[separatorIndex],separator[separatorIndex + 1],nullSequence);
case LIST:
return ObjectInspectorFactory.getLazySimpleListObjectInspector(createLazyObjectInspector(((ListTypeInfo)typeInfo).getListElementTypeInfo(),separator,separatorIndex + 1,nullSequence),separator[separatorIndex],nullSequence);
case STRUCT:
StructTypeInfo structTypeInfo=(StructTypeInfo)typeInfo;
List<String> fieldNames=structTypeInfo.getAllStructFieldNames();
List<TypeInfo> fieldTypeInfos=structTypeInfo.getAllStructFieldTypeInfos();
List<ObjectInspector> fieldObjectInspectors=new ArrayList<ObjectInspector>(fieldTypeInfos.size());
for (int i=0; i < fieldTypeInfos.size(); i++) {
fieldObjectInspectors.add(createLazyObjectInspector(fieldTypeInfos.get(i),separator,separatorIndex + 1,nullSequence));
}
return ObjectInspectorFactory.getLazySimpleStructObjectInspector(fieldNames,fieldObjectInspectors,separator[separatorIndex],nullSequence,false);
}
throw new RuntimeException("Hive LazySerDe Internal error.");
}
