{
  Properties props=UDFContext.getUDFContext().getClientSystemProps();
  String innerTupleName=HCatConstants.HCAT_PIG_INNER_TUPLE_NAME_DEFAULT;
  if (props != null && props.containsKey(HCatConstants.HCAT_PIG_INNER_TUPLE_NAME)) {
    innerTupleName=props.getProperty(HCatConstants.HCAT_PIG_INNER_TUPLE_NAME).replaceAll("FIELDNAME",hfs.getName());
  }
  String innerFieldName=HCatConstants.HCAT_PIG_INNER_FIELD_NAME_DEFAULT;
  if (props != null && props.containsKey(HCatConstants.HCAT_PIG_INNER_FIELD_NAME)) {
    innerFieldName=props.getProperty(HCatConstants.HCAT_PIG_INNER_FIELD_NAME).replaceAll("FIELDNAME",hfs.getName());
  }
  ResourceFieldSchema[] bagSubFieldSchemas=new ResourceFieldSchema[1];
  bagSubFieldSchemas[0]=new ResourceFieldSchema().setName(innerTupleName).setDescription("The tuple in the bag").setType(DataType.TUPLE);
  HCatFieldSchema arrayElementFieldSchema=hfs.getArrayElementSchema().get(0);
  if (arrayElementFieldSchema.getType() == Type.STRUCT) {
    bagSubFieldSchemas[0].setSchema(getTupleSubSchema(arrayElementFieldSchema));
  }
 else   if (arrayElementFieldSchema.getType() == Type.ARRAY) {
    ResourceSchema s=new ResourceSchema();
    List<ResourceFieldSchema> lrfs=Arrays.asList(getResourceSchemaFromFieldSchema(arrayElementFieldSchema));
    s.setFields(lrfs.toArray(new ResourceFieldSchema[0]));
    bagSubFieldSchemas[0].setSchema(s);
  }
 else {
    ResourceFieldSchema[] innerTupleFieldSchemas=new ResourceFieldSchema[1];
    innerTupleFieldSchemas[0]=new ResourceFieldSchema().setName(innerFieldName).setDescription("The inner field in the tuple in the bag").setType(getPigType(arrayElementFieldSchema)).setSchema(null);
    bagSubFieldSchemas[0].setSchema(new ResourceSchema().setFields(innerTupleFieldSchemas));
  }
  ResourceSchema s=new ResourceSchema().setFields(bagSubFieldSchemas);
  return s;
}
