{
  ExprWalkerInfo prunePreds=owi.getPrunedPreds(nd);
  if (prunePreds != null) {
    Map<String,RowResolver> aliasToRR=new HashMap<String,RowResolver>();
    for (    Operator<? extends OperatorDesc> o : (nd).getParentOperators()) {
      for (      String alias : owi.getRowResolver(o).getTableNames()) {
        aliasToRR.put(alias,owi.getRowResolver(o));
      }
    }
    ArrayList<ArrayList<ASTNode>> eqExpressions=owi.getParseContext().getJoinContext().get(nd).getExpressions();
    int numColumns=eqExpressions.size();
    int numEqualities=eqExpressions.get(0).size();
    Map<String,List<ExprNodeDesc>> oldFilters=prunePreds.getFinalCandidates();
    Map<String,List<ExprNodeDesc>> newFilters=new HashMap<String,List<ExprNodeDesc>>();
    for (int i=0; i < numEqualities; i++) {
      ColumnInfo[] equalColumns=new ColumnInfo[numColumns];
      for (int j=0; j < numColumns; j++) {
        equalColumns[j]=getColumnInfoFromAST(eqExpressions.get(j).get(i),aliasToRR);
      }
      for (int j=0; j < numColumns; j++) {
        for (int k=0; k < numColumns; k++) {
          if (j != k && equalColumns[j] != null && equalColumns[k] != null) {
            ColumnInfo left=equalColumns[j];
            ColumnInfo right=equalColumns[k];
            if (oldFilters.get(left.getTabAlias()) != null) {
              for (              ExprNodeDesc expr : oldFilters.get(left.getTabAlias())) {
                Set<String> colsreferenced=new HashSet<String>(expr.getCols());
                if (colsreferenced.size() == 1 && colsreferenced.contains(left.getInternalName())) {
                  ExprNodeDesc newexpr=expr.clone();
                  replaceColumnReference(newexpr,left.getInternalName(),right.getInternalName());
                  if (newFilters.get(right.getTabAlias()) == null) {
                    newFilters.put(right.getTabAlias(),new ArrayList<ExprNodeDesc>());
                  }
                  newFilters.get(right.getTabAlias()).add(newexpr);
                }
              }
            }
          }
        }
      }
    }
    Map<String,List<ExprNodeDesc>> candidates=prunePreds.getNonFinalCandidates();
    List<ExprNodeDesc> exprs;
    if (null != candidates && candidates.get(null) != null && ((exprs=candidates.get(null)) != null)) {
      Iterator<ExprNodeDesc> itr=exprs.iterator();
      while (itr.hasNext()) {
        ExprNodeDesc expr=itr.next();
        if (expr instanceof ExprNodeConstantDesc && Boolean.FALSE.equals(((ExprNodeConstantDesc)expr).getValue())) {
          for (          String alias : aliasToRR.keySet()) {
            List<ExprNodeDesc> pushedFilters=newFilters.get(alias);
            if (null == pushedFilters) {
              newFilters.put(alias,new ArrayList<ExprNodeDesc>());
            }
            newFilters.get(alias).add(expr);
          }
          itr.remove();
        }
      }
    }
    for (    Entry<String,List<ExprNodeDesc>> aliasToFilters : newFilters.entrySet()) {
      owi.getPrunedPreds(nd).addPushDowns(aliasToFilters.getKey(),aliasToFilters.getValue());
    }
  }
}
