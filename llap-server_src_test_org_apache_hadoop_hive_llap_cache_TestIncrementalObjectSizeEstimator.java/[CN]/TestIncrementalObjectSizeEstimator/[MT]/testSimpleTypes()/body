{
  JavaDataModel memModel=JavaDataModel.get();
  int intSize=runEstimate(new Integer(0),memModel,null);
  runEstimate(new String(""),memModel,"empty string");
  runEstimate(new String("foobarzzzzzzzzzzzzzz"),memModel,null);
  List<Object> list=new ArrayList<Object>(0);
  runEstimate(list,memModel,"empty ArrayList");
  list.add(new String("zzz"));
  runEstimate(list,memModel,"ArrayList - one string");
  list.add(new Integer(5));
  list.add(new Integer(6));
  int arrayListSize=runEstimate(list,memModel,"ArrayList - 3 elements");
  LinkedHashSet<Object> list2=new LinkedHashSet<Object>(0);
  runEstimate(list2,memModel,"empty LinkedHashSet");
  list2.add(new String("zzzz"));
  runEstimate(list2,memModel,"LinkedHashSet - one string");
  list2.add(new Integer(7));
  list2.add(new Integer(4));
  int lhsSize=runEstimate(list2,memModel,"LinkedHashSet - 3 elements");
  Struct struct=new Struct();
  int structSize=runEstimate(struct,memModel,"Struct - empty");
  struct.i=10;
  int structSize2=runEstimate(struct,memModel,"Struct - one reference");
  assertEquals(intSize + structSize,structSize2);
  struct.list=list;
  int structSize3=runEstimate(struct,memModel,"Struct - with ArrayList");
  assertEquals(arrayListSize + structSize2,structSize3);
  struct.list2=list2;
  int structSize4=runEstimate(struct,memModel,"Struct - with LinkedHashSet");
  assertEquals(lhsSize + structSize3,structSize4);
  Struct2 struct2=new Struct2();
  int recSize1=runEstimate(struct2,memModel,"recursive struct - empty");
  struct2.next=new Struct2();
  struct2.top=new Struct2();
  int recSize2=runEstimate(struct2,memModel,"recursive struct - no ring");
  assertEquals(recSize1 * 3,recSize2);
  struct2.next.prev=struct2;
  int recSize3=runEstimate(struct2,memModel,"recursive struct - ring added");
  assertEquals(recSize2,recSize3);
}
