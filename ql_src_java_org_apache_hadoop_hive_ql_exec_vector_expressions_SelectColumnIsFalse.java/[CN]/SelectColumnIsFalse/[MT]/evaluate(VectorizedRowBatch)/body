{
  if (childExpressions != null) {
    super.evaluateChildren(batch);
  }
  LongColumnVector inputColVector1=(LongColumnVector)batch.cols[colNum1];
  int[] sel=batch.selected;
  int n=batch.size;
  long[] vector1=inputColVector1.vector;
  boolean[] nullVector=inputColVector1.isNull;
  if (n <= 0) {
    return;
  }
  if (inputColVector1.noNulls) {
    if (inputColVector1.isRepeating) {
      if (vector1[0] == 1) {
        batch.size=0;
      }
    }
 else     if (batch.selectedInUse) {
      int[] newSelected=new int[n];
      int newSize=0;
      for (int j=0; j != n; j++) {
        int i=sel[j];
        if (vector1[i] == 0) {
          newSelected[newSize++]=i;
        }
      }
      batch.size=newSize;
      batch.selected=newSelected;
    }
 else {
      int newSize=0;
      for (int i=0; i != n; i++) {
        if (vector1[i] == 0) {
          sel[newSize++]=i;
        }
      }
      if (newSize < n) {
        batch.selectedInUse=true;
        batch.size=newSize;
      }
    }
  }
 else {
    if (inputColVector1.isRepeating) {
      batch.size=0;
    }
 else     if (batch.selectedInUse) {
      int[] newSelected=new int[n];
      int newSize=0;
      for (int j=0; j != n; j++) {
        int i=sel[j];
        if (vector1[i] == 0 && !nullVector[i]) {
          newSelected[newSize++]=i;
        }
      }
      batch.size=newSize;
      batch.selected=newSelected;
    }
 else {
      int newSize=0;
      for (int i=0; i != n; i++) {
        if (vector1[i] == 0 && !nullVector[i]) {
          sel[newSize++]=i;
        }
      }
      if (newSize < n) {
        batch.selectedInUse=true;
        batch.size=newSize;
      }
    }
  }
}
