{
  ObjectInspector keyObjectInspector;
  this.reducer=reducer;
  this.vectorized=vectorized;
  this.keyTableDesc=keyTableDesc;
  if (reader instanceof KeyValueReader) {
    this.reader=new KeyValuesFromKeyValue((KeyValueReader)reader);
  }
 else {
    this.reader=new KeyValuesFromKeyValues((KeyValuesReader)reader);
  }
  this.handleGroupKey=handleGroupKey;
  this.tag=tag;
  try {
    inputKeyDeserializer=ReflectionUtils.newInstance(keyTableDesc.getDeserializerClass(),null);
    SerDeUtils.initializeSerDe(inputKeyDeserializer,null,keyTableDesc.getProperties(),null);
    keyObjectInspector=inputKeyDeserializer.getObjectInspector();
    if (vectorized) {
      keyStructInspector=(StructObjectInspector)keyObjectInspector;
      firstValueColumnOffset=keyStructInspector.getAllStructFieldRefs().size();
    }
    this.valueTableDesc=valueTableDesc;
    inputValueDeserializer=(SerDe)ReflectionUtils.newInstance(valueTableDesc.getDeserializerClass(),null);
    SerDeUtils.initializeSerDe(inputValueDeserializer,null,valueTableDesc.getProperties(),null);
    valueObjectInspector=inputValueDeserializer.getObjectInspector();
    ArrayList<ObjectInspector> ois=new ArrayList<ObjectInspector>();
    if (vectorized) {
      valueStructInspectors=(StructObjectInspector)valueObjectInspector;
      final int totalColumns=firstValueColumnOffset + valueStructInspectors.getAllStructFieldRefs().size();
      valueStringWriters=new ArrayList<VectorExpressionWriter>(totalColumns);
      valueStringWriters.addAll(Arrays.asList(VectorExpressionWriterFactory.genVectorStructExpressionWritables(keyStructInspector)));
      valueStringWriters.addAll(Arrays.asList(VectorExpressionWriterFactory.genVectorStructExpressionWritables(valueStructInspectors)));
      ObjectPair<VectorizedRowBatch,StandardStructObjectInspector> pair=VectorizedBatchUtil.constructVectorizedRowBatch(keyStructInspector,valueStructInspectors,vectorScratchColumnTypeMap);
      rowObjectInspector=pair.getSecond();
      batch=pair.getFirst();
      BinarySortableSerDe binarySortableSerDe=(BinarySortableSerDe)inputKeyDeserializer;
      keyBinarySortableDeserializeToRow=new VectorDeserializeRow(new BinarySortableDeserializeRead(VectorizedBatchUtil.primitiveTypeInfosFromStructObjectInspector(keyStructInspector),binarySortableSerDe.getSortOrders()));
      keyBinarySortableDeserializeToRow.init(0);
      final int valuesSize=valueStructInspectors.getAllStructFieldRefs().size();
      if (valuesSize > 0) {
        valueLazyBinaryDeserializeToRow=new VectorDeserializeRow(new LazyBinaryDeserializeRead(VectorizedBatchUtil.primitiveTypeInfosFromStructObjectInspector(valueStructInspectors)));
        valueLazyBinaryDeserializeToRow.init(firstValueColumnOffset);
        for (int i=firstValueColumnOffset; i < batch.numCols; i++) {
          ColumnVector colVector=batch.cols[i];
          if (colVector instanceof BytesColumnVector) {
            BytesColumnVector bytesColumnVector=(BytesColumnVector)colVector;
            bytesColumnVector.initBuffer();
          }
        }
      }
    }
 else {
      ois.add(keyObjectInspector);
      ois.add(valueObjectInspector);
      rowObjectInspector=ObjectInspectorFactory.getStandardStructObjectInspector(Utilities.reduceFieldNameList,ois);
    }
  }
 catch (  Throwable e) {
    abort=true;
    if (e instanceof OutOfMemoryError) {
      throw (OutOfMemoryError)e;
    }
 else {
      throw new RuntimeException("Reduce operator initialization failed",e);
    }
  }
  perfLogger.PerfLogEnd(CLASS_NAME,PerfLogger.TEZ_INIT_OPERATORS);
}
