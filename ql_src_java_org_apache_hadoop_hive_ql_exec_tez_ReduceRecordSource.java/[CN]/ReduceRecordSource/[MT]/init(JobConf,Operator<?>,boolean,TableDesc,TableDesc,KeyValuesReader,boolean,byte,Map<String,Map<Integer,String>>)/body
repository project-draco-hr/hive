{
  ObjectInspector keyObjectInspector;
  this.reducer=reducer;
  this.vectorized=vectorized;
  this.keyTableDesc=keyTableDesc;
  this.reader=reader;
  this.handleGroupKey=handleGroupKey;
  this.tag=tag;
  try {
    inputKeyDeserializer=ReflectionUtils.newInstance(keyTableDesc.getDeserializerClass(),null);
    SerDeUtils.initializeSerDe(inputKeyDeserializer,null,keyTableDesc.getProperties(),null);
    keyObjectInspector=inputKeyDeserializer.getObjectInspector();
    reducer.setGroupKeyObjectInspector(keyObjectInspector);
    if (vectorized) {
      keyStructInspector=(StructObjectInspector)keyObjectInspector;
      keysColumnOffset=keyStructInspector.getAllStructFieldRefs().size();
      buffer=new DataOutputBuffer();
    }
    this.valueTableDesc=valueTableDesc;
    inputValueDeserializer=(SerDe)ReflectionUtils.newInstance(valueTableDesc.getDeserializerClass(),null);
    SerDeUtils.initializeSerDe(inputValueDeserializer,null,valueTableDesc.getProperties(),null);
    valueObjectInspector=inputValueDeserializer.getObjectInspector();
    ArrayList<ObjectInspector> ois=new ArrayList<ObjectInspector>();
    if (vectorized) {
      valueStructInspectors=(StructObjectInspector)valueObjectInspector;
      final int totalColumns=keysColumnOffset + valueStructInspectors.getAllStructFieldRefs().size();
      valueStringWriters=new ArrayList<VectorExpressionWriter>(totalColumns);
      valueStringWriters.addAll(Arrays.asList(VectorExpressionWriterFactory.genVectorStructExpressionWritables(keyStructInspector)));
      valueStringWriters.addAll(Arrays.asList(VectorExpressionWriterFactory.genVectorStructExpressionWritables(valueStructInspectors)));
      ArrayList<String> colNames=new ArrayList<String>();
      List<? extends StructField> fields=keyStructInspector.getAllStructFieldRefs();
      for (      StructField field : fields) {
        colNames.add(Utilities.ReduceField.KEY.toString() + "." + field.getFieldName());
        ois.add(field.getFieldObjectInspector());
      }
      fields=valueStructInspectors.getAllStructFieldRefs();
      for (      StructField field : fields) {
        colNames.add(Utilities.ReduceField.VALUE.toString() + "." + field.getFieldName());
        ois.add(field.getFieldObjectInspector());
      }
      rowObjectInspector=ObjectInspectorFactory.getStandardStructObjectInspector(colNames,ois);
      Map<Integer,String> reduceShuffleScratchColumnTypeMap=scratchColumnVectorTypes.get("_REDUCE_SHUFFLE_");
      batchContext=new VectorizedRowBatchCtx();
      batchContext.init(reduceShuffleScratchColumnTypeMap,(StructObjectInspector)rowObjectInspector);
      batch=batchContext.createVectorizedRowBatch();
    }
 else {
      ois.add(keyObjectInspector);
      ois.add(valueObjectInspector);
      rowObjectInspector=ObjectInspectorFactory.getStandardStructObjectInspector(Utilities.reduceFieldNameList,ois);
    }
  }
 catch (  Throwable e) {
    abort=true;
    if (e instanceof OutOfMemoryError) {
      throw (OutOfMemoryError)e;
    }
 else {
      throw new RuntimeException("Reduce operator initialization failed",e);
    }
  }
  perfLogger.PerfLogEnd(CLASS_NAME,PerfLogger.TEZ_INIT_OPERATORS);
}
