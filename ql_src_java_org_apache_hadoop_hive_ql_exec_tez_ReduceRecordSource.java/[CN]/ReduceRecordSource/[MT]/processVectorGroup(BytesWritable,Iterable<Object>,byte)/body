{
  byte[] keyBytes=keyWritable.getBytes();
  int keyLength=keyWritable.getLength();
  keyBinarySortableDeserializeToRow.setBytes(keyBytes,0,keyLength);
  try {
    keyBinarySortableDeserializeToRow.deserialize(batch,0);
  }
 catch (  Exception e) {
    throw new HiveException("\nDeserializeRead details: " + keyBinarySortableDeserializeToRow.getDetailedReadPositionString(),e);
  }
  for (int i=0; i < firstValueColumnOffset; i++) {
    VectorizedBatchUtil.setRepeatingColumn(batch,i);
  }
  int rowIdx=0;
  try {
    for (    Object value : values) {
      if (valueLazyBinaryDeserializeToRow != null) {
        BytesWritable valueWritable=(BytesWritable)value;
        byte[] valueBytes=valueWritable.getBytes();
        int valueLength=valueWritable.getLength();
        valueLazyBinaryDeserializeToRow.setBytes(valueBytes,0,valueLength);
        valueLazyBinaryDeserializeToRow.deserialize(batch,rowIdx);
      }
      rowIdx++;
      if (rowIdx >= BATCH_SIZE) {
        VectorizedBatchUtil.setBatchSize(batch,rowIdx);
        reducer.process(batch,tag);
        for (int i=firstValueColumnOffset; i < batch.numCols; i++) {
          batch.cols[i].reset();
        }
        rowIdx=0;
      }
    }
    if (rowIdx > 0) {
      VectorizedBatchUtil.setBatchSize(batch,rowIdx);
      reducer.process(batch,tag);
    }
    batch.reset();
  }
 catch (  Exception e) {
    String rowString=null;
    try {
      rowString=batch.toString();
    }
 catch (    Exception e2) {
      rowString="[Error getting row data with exception " + StringUtils.stringifyException(e2) + " ]";
    }
    throw new HiveException("Hive Runtime Error while processing vector batch (tag=" + tag + ") "+ rowString,e);
  }
}
