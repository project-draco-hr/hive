{
  if (ofclass == RCFileOutputFormat.class) {
    jobProperties.put(HiveConf.ConfVars.HIVE_RCFILE_COLUMN_NUMBER_CONF.varname,Integer.toOctalString(jobInfo.getOutputSchema().getFields().size()));
  }
 else   if (ofclass == OrcOutputFormat.class) {
    Map<String,String> tableProps=jobInfo.getTableInfo().getTable().getParameters();
    for (    OrcConf property : OrcConf.values()) {
      String propName=property.getAttribute();
      if (tableProps.containsKey(propName)) {
        jobProperties.put(propName,tableProps.get(propName));
      }
    }
  }
 else   if (ofclass == AvroContainerOutputFormat.class) {
    Map<String,String> tableProps=jobInfo.getTableInfo().getTable().getParameters();
    for (    AvroSerdeUtils.AvroTableProperties property : AvroSerdeUtils.AvroTableProperties.values()) {
      String propName=property.getPropName();
      if (tableProps.containsKey(propName)) {
        String propVal=tableProps.get(propName);
        jobProperties.put(propName,tableProps.get(propName));
      }
    }
    Properties properties=new Properties();
    properties.put("name",jobInfo.getTableName());
    List<String> colNames=jobInfo.getOutputSchema().getFieldNames();
    List<TypeInfo> colTypes=new ArrayList<TypeInfo>();
    for (    HCatFieldSchema field : jobInfo.getOutputSchema().getFields()) {
      colTypes.add(TypeInfoUtils.getTypeInfoFromTypeString(field.getTypeString()));
    }
    jobProperties.put(AvroSerdeUtils.AvroTableProperties.SCHEMA_LITERAL.getPropName(),AvroSerDe.getSchemaFromCols(properties,colNames,colTypes,null).toString());
    for (    String propName : jobProperties.keySet()) {
      String propVal=jobProperties.get(propName);
    }
  }
}
