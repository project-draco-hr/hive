{
  Configuration conf=new Configuration();
  MemoryManager mgr=new MemoryManager(conf);
  NullCallback callback=new NullCallback();
  long poolSize=mgr.getTotalMemoryPool();
  assertEquals(Math.round(ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getMax() * 0.5f),poolSize);
  assertEquals(1.0,mgr.getAllocationScale(),0.00001);
  mgr.addWriter(new Path("p1"),1000,callback);
  assertEquals(1.0,mgr.getAllocationScale(),0.00001);
  mgr.addWriter(new Path("p1"),poolSize / 2,callback);
  assertEquals(1.0,mgr.getAllocationScale(),0.00001);
  mgr.addWriter(new Path("p2"),poolSize / 2,callback);
  assertEquals(1.0,mgr.getAllocationScale(),0.00001);
  mgr.addWriter(new Path("p3"),poolSize / 2,callback);
  assertEquals(0.6666667,mgr.getAllocationScale(),0.00001);
  mgr.addWriter(new Path("p4"),poolSize / 2,callback);
  assertEquals(0.5,mgr.getAllocationScale(),0.000001);
  mgr.addWriter(new Path("p4"),3 * poolSize / 2,callback);
  assertEquals(0.3333333,mgr.getAllocationScale(),0.000001);
  mgr.removeWriter(new Path("p1"));
  mgr.removeWriter(new Path("p2"));
  assertEquals(0.5,mgr.getAllocationScale(),0.00001);
  mgr.removeWriter(new Path("p4"));
  assertEquals(1.0,mgr.getAllocationScale(),0.00001);
}
