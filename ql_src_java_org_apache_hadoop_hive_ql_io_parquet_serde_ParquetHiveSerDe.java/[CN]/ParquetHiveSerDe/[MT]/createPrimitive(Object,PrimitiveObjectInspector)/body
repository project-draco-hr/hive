{
  if (obj == null) {
    return null;
  }
switch (inspector.getPrimitiveCategory()) {
case VOID:
    return null;
case BOOLEAN:
  return new BooleanWritable(((BooleanObjectInspector)inspector).get(obj) ? Boolean.TRUE : Boolean.FALSE);
case BYTE:
return new ByteWritable((byte)((ByteObjectInspector)inspector).get(obj));
case DOUBLE:
return new DoubleWritable(((DoubleObjectInspector)inspector).get(obj));
case FLOAT:
return new FloatWritable(((FloatObjectInspector)inspector).get(obj));
case INT:
return new IntWritable(((IntObjectInspector)inspector).get(obj));
case LONG:
return new LongWritable(((LongObjectInspector)inspector).get(obj));
case SHORT:
return new ShortWritable((short)((ShortObjectInspector)inspector).get(obj));
case STRING:
return new BinaryWritable(Binary.fromString(((StringObjectInspector)inspector).getPrimitiveJavaObject(obj)));
default :
throw new SerDeException("Unknown primitive : " + inspector.getPrimitiveCategory());
}
}
