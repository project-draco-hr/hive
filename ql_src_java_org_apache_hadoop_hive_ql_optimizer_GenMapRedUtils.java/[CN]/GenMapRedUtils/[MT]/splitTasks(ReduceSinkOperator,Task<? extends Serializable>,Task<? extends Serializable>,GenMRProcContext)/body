{
  if (op.getNumParent() != 1) {
    throw new IllegalStateException("Expecting operator " + op + " to have one parent. "+ "But found multiple parents : "+ op.getParentOperators());
  }
  ParseContext parseCtx=opProcCtx.getParseCtx();
  parentTask.addDependentTask(childTask);
  List<Task<? extends Serializable>> rootTasks=opProcCtx.getRootTasks();
  if (rootTasks.contains(childTask)) {
    rootTasks.remove(childTask);
  }
  Context baseCtx=parseCtx.getContext();
  String taskTmpDir=baseCtx.getMRTmpFileURI();
  Operator<? extends OperatorDesc> parent=op.getParentOperators().get(0);
  TableDesc tt_desc=PlanUtils.getIntermediateFileTableDesc(PlanUtils.getFieldSchemasFromRowSchema(parent.getSchema(),"temporarycol"));
  TableScanOperator tableScanOp=createTemporaryFile(parent,op,taskTmpDir,tt_desc,parseCtx);
  Map<Operator<? extends OperatorDesc>,GenMapRedCtx> mapCurrCtx=opProcCtx.getMapCurrCtx();
  mapCurrCtx.put(tableScanOp,new GenMapRedCtx(childTask,null));
  String streamDesc=taskTmpDir;
  MapredWork cplan=(MapredWork)childTask.getWork();
  if (needsTagging(cplan.getReduceWork())) {
    Operator<? extends OperatorDesc> reducerOp=cplan.getReduceWork().getReducer();
    QBJoinTree joinTree=null;
    if (reducerOp instanceof JoinOperator) {
      joinTree=parseCtx.getJoinContext().get(reducerOp);
    }
 else     if (reducerOp instanceof MapJoinOperator) {
      joinTree=parseCtx.getMapJoinContext().get(reducerOp);
    }
 else     if (reducerOp instanceof SMBMapJoinOperator) {
      joinTree=parseCtx.getSmbMapJoinContext().get(reducerOp);
    }
    if (joinTree != null && joinTree.getId() != null) {
      streamDesc=joinTree.getId() + ":$INTNAME";
    }
 else {
      streamDesc="$INTNAME";
    }
    String origStreamDesc=streamDesc;
    int pos=0;
    while (cplan.getMapWork().getAliasToWork().get(streamDesc) != null) {
      streamDesc=origStreamDesc.concat(String.valueOf(++pos));
    }
    cplan.getReduceWork().setNeedsTagging(true);
  }
  setTaskPlan(taskTmpDir,streamDesc,tableScanOp,cplan.getMapWork(),false,tt_desc);
  opProcCtx.setCurrTopOp(null);
  opProcCtx.setCurrAliasId(null);
  opProcCtx.setCurrTask(childTask);
  opProcCtx.addRootIfPossible(parentTask);
}
