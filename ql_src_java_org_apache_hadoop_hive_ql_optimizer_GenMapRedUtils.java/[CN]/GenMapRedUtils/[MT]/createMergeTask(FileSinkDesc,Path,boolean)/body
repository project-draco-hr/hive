{
  Path inputDir=fsInputDesc.getFinalDirName();
  TableDesc tblDesc=fsInputDesc.getTableInfo();
  List<Path> inputDirs=new ArrayList<Path>(1);
  ArrayList<String> inputDirstr=new ArrayList<String>(1);
  if (!hasDynamicPartitions && !GenMapRedUtils.isSkewedStoredAsDirs(fsInputDesc)) {
    inputDirs.add(inputDir);
  }
  inputDirstr.add(inputDir.toString());
  final Class<? extends InputFormat> internalIFClass;
  if (tblDesc.getInputFileFormatClass().equals(RCFileInputFormat.class)) {
    internalIFClass=RCFileBlockMergeInputFormat.class;
  }
 else   if (tblDesc.getInputFileFormatClass().equals(OrcInputFormat.class)) {
    internalIFClass=OrcFileStripeMergeInputFormat.class;
  }
 else {
    throw new SemanticException("createMergeTask called on a table with file" + " format other than RCFile or ORCFile");
  }
  MergeFileWork work=new MergeFileWork(inputDirs,finalName,hasDynamicPartitions,tblDesc.getInputFileFormatClass().getName());
  LinkedHashMap<String,ArrayList<String>> pathToAliases=new LinkedHashMap<String,ArrayList<String>>();
  pathToAliases.put(inputDir.toString(),inputDirstr);
  work.setMapperCannotSpanPartns(true);
  work.setPathToAliases(pathToAliases);
  PartitionDesc pDesc=new PartitionDesc(tblDesc,null);
  pDesc.setInputFileFormatClass(internalIFClass);
  work.getPathToPartitionInfo().put(inputDir.toString(),pDesc);
  work.setListBucketingCtx(fsInputDesc.getLbCtx());
  LinkedHashMap<String,Operator<? extends OperatorDesc>> aliasToWork=new LinkedHashMap<String,Operator<? extends OperatorDesc>>();
  Operator<? extends OperatorDesc> mergeOp=null;
  final FileMergeDesc fmd;
  if (tblDesc.getInputFileFormatClass().equals(RCFileInputFormat.class)) {
    fmd=new RCFileMergeDesc();
  }
 else {
    fmd=new OrcFileMergeDesc();
  }
  fmd.setDpCtx(fsInputDesc.getDynPartCtx());
  fmd.setOutputPath(finalName);
  fmd.setHasDynamicPartitions(work.hasDynamicPartitions());
  fmd.setListBucketingAlterTableConcatenate(work.isListBucketingAlterTableConcatenate());
  int lbLevel=work.getListBucketingCtx() == null ? 0 : work.getListBucketingCtx().calculateListBucketingLevel();
  fmd.setListBucketingDepth(lbLevel);
  mergeOp=OperatorFactory.get(fmd);
  aliasToWork.put(inputDir.toString(),mergeOp);
  work.setAliasToWork(aliasToWork);
  return work;
}
