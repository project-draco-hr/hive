{
  if (templatePath == null) {
    throw new BuildException("No templatePath attribute specified");
  }
  if (template == null) {
    throw new BuildException("No template attribute specified");
  }
  if (outputDirectory == null) {
    throw new BuildException("No outputDirectory specified");
  }
  if (queryDirectory == null && queryFile == null) {
    throw new BuildException("No queryDirectory or queryFile specified");
  }
  if (logDirectory == null) {
    throw new BuildException("No logDirectory specified");
  }
  if (resultsDirectory == null) {
    throw new BuildException("No resultsDirectory specified");
  }
  if (className == null) {
    throw new BuildException("No className specified");
  }
  File[] qFiles=null;
  File outDir=null;
  File resultsDir=null;
  File logDir=null;
  try {
    File inpDir=null;
    if (queryDirectory != null) {
      inpDir=new File(queryDirectory);
    }
    if (queryFile != null && !queryFile.equals("")) {
      qFiles=new File[1];
      qFiles[0]=inpDir != null ? new File(inpDir,queryFile) : new File(queryFile);
    }
 else {
      qFiles=inpDir.listFiles(new QFileFilter());
    }
    outDir=new File(outputDirectory);
    if (!outDir.exists()) {
      outDir.mkdirs();
    }
    logDir=new File(logDirectory);
    if (!logDir.exists()) {
      throw new BuildException("Log Directory " + logDir.getCanonicalPath() + " does not exist");
    }
    resultsDir=new File(resultsDirectory);
    if (!resultsDir.exists()) {
      throw new BuildException("Results Directory " + resultsDir.getCanonicalPath() + " does not exist");
    }
  }
 catch (  Exception e) {
    throw new BuildException(e);
  }
  VelocityEngine ve=new VelocityEngine();
  try {
    ve.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH,templatePath);
    if (logFile != null) {
      File lf=new File(logFile);
      if (lf.exists()) {
        if (!lf.delete()) {
          throw new Exception("Could not delete log file " + lf.getCanonicalPath());
        }
      }
      ve.setProperty(RuntimeConstants.RUNTIME_LOG,logFile);
    }
    ve.init();
    Template t=ve.getTemplate(template);
    VelocityContext ctx=new VelocityContext();
    ctx.put("className",className);
    ctx.put("qfiles",qFiles);
    ctx.put("resultsDir",resultsDir);
    ctx.put("logDir",logDir);
    File outFile=new File(outDir,className + ".java");
    FileWriter writer=new FileWriter(outFile);
    t.merge(ctx,writer);
    writer.close();
    System.out.println("Generated " + outFile.getCanonicalPath() + " from template "+ template);
  }
 catch (  BuildException e) {
    throw e;
  }
catch (  MethodInvocationException e) {
    throw new BuildException("Exception thrown by '" + e.getReferenceName() + "."+ e.getMethodName()+ "'",e.getWrappedThrowable());
  }
catch (  ParseErrorException e) {
    throw new BuildException("Velocity syntax error",e);
  }
catch (  ResourceNotFoundException e) {
    throw new BuildException("Resource not found",e);
  }
catch (  Exception e) {
    throw new BuildException("Generation failed",e);
  }
}
