{
  if (getTemplatePath().equals("")) {
    throw new BuildException("No templatePath attribute specified");
  }
  if (template == null) {
    throw new BuildException("No template attribute specified");
  }
  if (outputDirectory == null) {
    throw new BuildException("No outputDirectory specified");
  }
  if (queryDirectory == null && queryFile == null) {
    throw new BuildException("No queryDirectory or queryFile specified");
  }
  if (logDirectory == null) {
    throw new BuildException("No logDirectory specified");
  }
  if (className == null) {
    throw new BuildException("No className specified");
  }
  Set<String> includeOnly=null;
  if (includeQueryFile != null && !includeQueryFile.isEmpty()) {
    includeOnly=Sets.<String>newHashSet(TEST_SPLITTER.split(includeQueryFile));
  }
  List<File> qFiles;
  HashMap<String,String> qFilesMap=new HashMap<String,String>();
  File hiveRootDir=null;
  File queryDir=null;
  File outDir=null;
  File resultsDir=null;
  File logDir=null;
  try {
    System.out.println("Starting Generation of: " + className);
    System.out.println("Include Files: " + includeQueryFile);
    System.out.println("Excluded Files: " + excludeQueryFile);
    System.out.println("Query Files: " + queryFile);
    System.out.println("Query Files Regex: " + queryFileRegex);
    queryDir=new File(queryDirectory);
    Set<File> testFiles=new HashSet<File>();
    if (queryFile != null && !queryFile.equals("")) {
      for (      String qFile : TEST_SPLITTER.split(queryFile)) {
        if (null != queryDir) {
          testFiles.add(new File(queryDir,qFile));
        }
 else {
          testFiles.add(new File(qFile));
        }
      }
    }
 else     if (queryFileRegex != null && !queryFileRegex.equals("")) {
      for (      String regex : TEST_SPLITTER.split(queryFileRegex)) {
        testFiles.addAll(Arrays.asList(queryDir.listFiles(new QFileRegexFilter(regex))));
      }
    }
 else     if (runDisabled != null && runDisabled.equals("true")) {
      testFiles.addAll(Arrays.asList(queryDir.listFiles(new DisabledQFileFilter(includeOnly))));
    }
 else {
      testFiles.addAll(Arrays.asList(queryDir.listFiles(new QFileFilter(includeOnly))));
    }
    if (excludeQueryFile != null && !excludeQueryFile.equals("")) {
      for (      String qFile : TEST_SPLITTER.split(excludeQueryFile)) {
        if (null != queryDir) {
          testFiles.remove(new File(queryDir,qFile));
        }
 else {
          testFiles.remove(new File(qFile));
        }
      }
    }
    hiveRootDir=new File(hiveRootDirectory);
    if (!hiveRootDir.exists()) {
      throw new BuildException("Hive Root Directory " + hiveRootDir.getCanonicalPath() + " does not exist");
    }
    qFiles=new ArrayList<File>(testFiles);
    Collections.sort(qFiles);
    for (    File qFile : qFiles) {
      qFilesMap.put(qFile.getName(),relativePath(hiveRootDir,qFile));
    }
    outDir=new File(outputDirectory);
    if (!outDir.exists()) {
      outDir.mkdirs();
    }
    logDir=new File(logDirectory);
    if (!logDir.exists()) {
      throw new BuildException("Log Directory " + logDir.getCanonicalPath() + " does not exist");
    }
    if (resultsDirectory != null) {
      resultsDir=new File(resultsDirectory);
      if (!resultsDir.exists()) {
        throw new BuildException("Results Directory " + resultsDir.getCanonicalPath() + " does not exist");
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new BuildException(e);
  }
  VelocityEngine ve=new VelocityEngine();
  try {
    ve.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH,getTemplatePath());
    if (logFile != null) {
      File lf=new File(logFile);
      if (lf.exists()) {
        if (!lf.delete()) {
          throw new Exception("Could not delete log file " + lf.getCanonicalPath());
        }
      }
      ve.setProperty(RuntimeConstants.RUNTIME_LOG,logFile);
    }
    ve.init();
    Template t=ve.getTemplate(template);
    if (clusterMode == null) {
      clusterMode="";
    }
    if (hadoopVersion == null) {
      hadoopVersion="";
    }
    File qFileNames=new File(outputDirectory,className + "QFileNames.txt");
    String qFileNamesFile=qFileNames.getCanonicalPath();
    if (qFileNames.exists()) {
      if (!qFileNames.delete()) {
        throw new Exception("Could not delete old query file names containing file " + qFileNamesFile);
      }
    }
    if (!qFileNames.createNewFile()) {
      throw new Exception("Could not create query file names containing file " + qFileNamesFile);
    }
    FileWriter fw=new FileWriter(qFileNames.getCanonicalFile());
    BufferedWriter bw=new BufferedWriter(fw);
    for (    File qFile : qFiles) {
      bw.write(qFile.getName());
      bw.newLine();
    }
    bw.close();
    System.out.println("hiveRootDir = " + hiveRootDir);
    VelocityContext ctx=new VelocityContext();
    ctx.put("className",className);
    ctx.put("hiveRootDir",escapePath(hiveRootDir.getCanonicalPath()));
    System.out.println("hiveRootDir = " + hiveRootDir);
    System.out.println("queryDir = " + queryDir);
    String strQueryDir=relativePath(hiveRootDir,queryDir);
    System.out.println("queryDir = " + strQueryDir);
    ctx.put("queryDir",strQueryDir);
    ctx.put("qfiles",qFiles);
    ctx.put("qFileNamesFile",qFileNamesFile);
    ctx.put("qfilesMap",qFilesMap);
    if (resultsDir != null) {
      ctx.put("resultsDir",relativePath(hiveRootDir,resultsDir));
    }
    ctx.put("logDir",relativePath(hiveRootDir,logDir));
    ctx.put("clusterMode",clusterMode);
    if (hiveConfDir == null || hiveConfDir.isEmpty()) {
      ctx.put("hiveConfDir","");
    }
 else {
      System.out.println("hiveConfDir = " + hiveConfDir);
      hiveConfDir=relativePath(hiveRootDir,new File(hiveConfDir));
      System.out.println("hiveConfDir = " + hiveConfDir);
      if (!(new File(hiveRootDir,hiveConfDir)).isDirectory()) {
        throw new BuildException("hiveConfDir is not dir " + new File(hiveRootDir,hiveConfDir));
      }
      ctx.put("hiveConfDir",hiveConfDir);
    }
    ctx.put("hadoopVersion",hadoopVersion);
    ctx.put("initScript",initScript);
    ctx.put("cleanupScript",cleanupScript);
    File outFile=new File(outDir,className + ".java");
    FileWriter writer=new FileWriter(outFile);
    t.merge(ctx,writer);
    writer.close();
    System.out.println("Generated " + outFile.getCanonicalPath() + " from template "+ template);
  }
 catch (  BuildException e) {
    throw e;
  }
catch (  MethodInvocationException e) {
    throw new BuildException("Exception thrown by '" + e.getReferenceName() + "."+ e.getMethodName()+ "'",e.getWrappedThrowable());
  }
catch (  ParseErrorException e) {
    throw new BuildException("Velocity syntax error",e);
  }
catch (  ResourceNotFoundException e) {
    throw new BuildException("Resource not found",e);
  }
catch (  Exception e) {
    e.printStackTrace();
    throw new BuildException("Generation failed",e);
  }
}
