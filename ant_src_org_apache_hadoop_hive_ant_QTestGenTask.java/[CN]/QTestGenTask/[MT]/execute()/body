{
  if (getTemplatePath().equals("")) {
    throw new BuildException("No templatePath attribute specified");
  }
  if (template == null) {
    throw new BuildException("No template attribute specified");
  }
  if (outputDirectory == null) {
    throw new BuildException("No outputDirectory specified");
  }
  if (queryDirectory == null && queryFile == null) {
    throw new BuildException("No queryDirectory or queryFile specified");
  }
  if (logDirectory == null) {
    throw new BuildException("No logDirectory specified");
  }
  if (resultsDirectory == null) {
    throw new BuildException("No resultsDirectory specified");
  }
  if (className == null) {
    throw new BuildException("No className specified");
  }
  List<File> qFiles=new ArrayList<File>();
  File outDir=null;
  File resultsDir=null;
  File logDir=null;
  try {
    File inpDir=null;
    if (queryDirectory != null) {
      inpDir=new File(queryDirectory);
    }
    if (queryFile != null && !queryFile.equals("")) {
      for (      String qFile : queryFile.split(",")) {
        if (null != inpDir) {
          qFiles.add(new File(inpDir,qFile));
        }
 else {
          qFiles.add(new File(qFile));
        }
      }
    }
 else     if (queryFileRegex != null && !queryFileRegex.equals("")) {
      qFiles.addAll(Arrays.asList(inpDir.listFiles(new QFileRegexFilter(queryFileRegex))));
    }
 else {
      qFiles.addAll(Arrays.asList(inpDir.listFiles(new QFileFilter())));
    }
    Collections.sort(qFiles);
    outDir=new File(outputDirectory);
    if (!outDir.exists()) {
      outDir.mkdirs();
    }
    logDir=new File(logDirectory);
    if (!logDir.exists()) {
      throw new BuildException("Log Directory " + logDir.getCanonicalPath() + " does not exist");
    }
    resultsDir=new File(resultsDirectory);
    if (!resultsDir.exists()) {
      throw new BuildException("Results Directory " + resultsDir.getCanonicalPath() + " does not exist");
    }
  }
 catch (  Exception e) {
    throw new BuildException(e);
  }
  VelocityEngine ve=new VelocityEngine();
  try {
    ve.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH,getTemplatePath());
    if (logFile != null) {
      File lf=new File(logFile);
      if (lf.exists()) {
        if (!lf.delete()) {
          throw new Exception("Could not delete log file " + lf.getCanonicalPath());
        }
      }
      ve.setProperty(RuntimeConstants.RUNTIME_LOG,logFile);
    }
    ve.init();
    Template t=ve.getTemplate(template);
    if (clusterMode == null) {
      clusterMode=new String("");
    }
    if (hadoopVersion == null) {
      hadoopVersion="";
    }
    VelocityContext ctx=new VelocityContext();
    ctx.put("className",className);
    ctx.put("qfiles",qFiles);
    ctx.put("resultsDir",resultsDir);
    ctx.put("logDir",logDir);
    ctx.put("clusterMode",clusterMode);
    ctx.put("hadoopVersion",hadoopVersion);
    File outFile=new File(outDir,className + ".java");
    FileWriter writer=new FileWriter(outFile);
    t.merge(ctx,writer);
    writer.close();
    System.out.println("Generated " + outFile.getCanonicalPath() + " from template "+ template);
  }
 catch (  BuildException e) {
    throw e;
  }
catch (  MethodInvocationException e) {
    throw new BuildException("Exception thrown by '" + e.getReferenceName() + "."+ e.getMethodName()+ "'",e.getWrappedThrowable());
  }
catch (  ParseErrorException e) {
    throw new BuildException("Velocity syntax error",e);
  }
catch (  ResourceNotFoundException e) {
    throw new BuildException("Resource not found",e);
  }
catch (  Exception e) {
    throw new BuildException("Generation failed",e);
  }
}
