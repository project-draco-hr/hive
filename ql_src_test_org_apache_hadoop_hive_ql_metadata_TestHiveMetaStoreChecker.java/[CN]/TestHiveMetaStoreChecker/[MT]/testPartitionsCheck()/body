{
  Database db=new Database();
  db.setName(dbName);
  hive.createDatabase(db);
  Table table=new Table(dbName,tableName);
  table.setDbName(dbName);
  table.setInputFormatClass(TextInputFormat.class);
  table.setOutputFormatClass(HiveIgnoreKeyTextOutputFormat.class);
  table.setPartCols(partCols);
  hive.createTable(table);
  table=hive.getTable(dbName,tableName);
  for (  Map<String,String> partSpec : parts) {
    hive.createPartition(table,partSpec);
  }
  CheckResult result=new CheckResult();
  checker.checkMetastore(dbName,tableName,null,result);
  assertEquals(Collections.<String>emptySet(),result.getTablesNotInMs());
  assertEquals(Collections.<String>emptySet(),result.getTablesNotOnFs());
  assertEquals(Collections.<String>emptySet(),result.getPartitionsNotOnFs());
  assertEquals(Collections.<String>emptySet(),result.getPartitionsNotInMs());
  List<Partition> partitions=hive.getPartitions(table);
  assertEquals(2,partitions.size());
  fs=partitions.get(0).getDataLocation().getFileSystem(hive.getConf());
  Path fakePart=new Path(table.getDataLocation().toString(),"fakedate=2009-01-01/fakecity=sanjose");
  fs.mkdirs(fakePart);
  fs.deleteOnExit(fakePart);
  checker.checkMetastore(dbName,tableName,null,result);
  assertEquals(Collections.<String>emptySet(),result.getTablesNotInMs());
  assertEquals(Collections.<String>emptySet(),result.getTablesNotOnFs());
  assertEquals(0,result.getPartitionsNotOnFs().size());
  assertEquals(0,result.getPartitionsNotInMs().size());
  assertEquals(2,partitions.size());
  Partition partToRemove=partitions.get(0);
  Path partToRemovePath=partToRemove.getDataLocation().getParent();
  fs=partToRemovePath.getFileSystem(hive.getConf());
  fs.delete(partToRemovePath,true);
  result=new CheckResult();
  checker.checkMetastore(dbName,tableName,null,result);
  assertEquals(Collections.<String>emptySet(),result.getTablesNotInMs());
  assertEquals(Collections.<String>emptySet(),result.getTablesNotOnFs());
  assertEquals(1,result.getPartitionsNotOnFs().size());
  assertEquals(partToRemove.getName(),result.getPartitionsNotOnFs().iterator().next().getPartitionName());
  assertEquals(partToRemove.getTable().getTableName(),result.getPartitionsNotOnFs().iterator().next().getTableName());
  assertEquals(Collections.<String>emptySet(),result.getPartitionsNotInMs());
  List<Map<String,String>> partsCopy=new ArrayList<Map<String,String>>();
  partsCopy.add(partitions.get(1).getSpec());
  result=new CheckResult();
  checker.checkMetastore(dbName,tableName,partsCopy,result);
  assertEquals(Collections.<String>emptySet(),result.getTablesNotInMs());
  assertEquals(Collections.<String>emptySet(),result.getTablesNotOnFs());
  assertEquals(Collections.<String>emptySet(),result.getPartitionsNotOnFs());
  assertEquals(Collections.<String>emptySet(),result.getPartitionsNotInMs());
  hive.dropTable(dbName,tableName,true,true);
  hive.createTable(table);
  result=new CheckResult();
  checker.checkMetastore(dbName,null,null,result);
  assertEquals(Collections.<String>emptySet(),result.getTablesNotInMs());
  assertEquals(Collections.<String>emptySet(),result.getTablesNotOnFs());
  assertEquals(Collections.<String>emptySet(),result.getPartitionsNotOnFs());
  assertEquals(Collections.<String>emptySet(),result.getPartitionsNotInMs());
  System.err.println("Test completed - partition check");
}
