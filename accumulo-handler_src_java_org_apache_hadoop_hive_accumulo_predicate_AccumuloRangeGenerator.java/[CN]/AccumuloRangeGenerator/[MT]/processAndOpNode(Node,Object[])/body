{
  List<Range> andRanges=null;
  for (  Object nodeOutput : nodeOutputs) {
    if (null == nodeOutput) {
      continue;
    }
    if (null == andRanges) {
      andRanges=new ArrayList<Range>();
    }
    if (nodeOutput instanceof Range) {
      Range childRange=(Range)nodeOutput;
      if (andRanges.isEmpty()) {
        andRanges.add(childRange);
      }
 else {
        List<Range> newRanges=new ArrayList<Range>();
        for (        Range andRange : andRanges) {
          Range intersectedRange=andRange.clip(childRange,true);
          if (null != intersectedRange) {
            newRanges.add(intersectedRange);
          }
        }
        andRanges=newRanges;
      }
    }
 else     if (nodeOutput instanceof List) {
      @SuppressWarnings("unchecked") List<Range> childRanges=(List<Range>)nodeOutput;
      if (andRanges.isEmpty()) {
        andRanges.addAll(childRanges);
      }
 else {
        List<Range> newRanges=new ArrayList<Range>();
        for (        Range andRange : andRanges) {
          for (          Range childRange : childRanges) {
            Range intersectedRange=andRange.clip(childRange,true);
            if (null != intersectedRange) {
              newRanges.add(intersectedRange);
            }
          }
        }
        andRanges=newRanges;
      }
    }
 else {
      LOG.error("Expected Range from {} but got {}",nd,nodeOutput);
      throw new IllegalArgumentException("Expected Range but got " + nodeOutput.getClass().getName());
    }
  }
  return andRanges;
}
