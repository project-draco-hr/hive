{
  TypeDesc typeDesc;
  TypeInfo typeInfo=TypeInfoUtils.getTypeInfoFromTypeString(typeString);
  Preconditions.checkState(typeInfo.getCategory() == ObjectInspector.Category.PRIMITIVE,"Unsupported non-primitive type " + typeString);
switch (((PrimitiveTypeInfo)typeInfo).getPrimitiveCategory()) {
case BOOLEAN:
    typeDesc=new TypeDesc(TypeDesc.Type.BOOLEAN);
  break;
case BYTE:
typeDesc=new TypeDesc(TypeDesc.Type.TINYINT);
break;
case SHORT:
typeDesc=new TypeDesc(TypeDesc.Type.SMALLINT);
break;
case INT:
typeDesc=new TypeDesc(TypeDesc.Type.INT);
break;
case LONG:
typeDesc=new TypeDesc(TypeDesc.Type.BIGINT);
break;
case FLOAT:
typeDesc=new TypeDesc(TypeDesc.Type.FLOAT);
break;
case DOUBLE:
typeDesc=new TypeDesc(TypeDesc.Type.DOUBLE);
break;
case STRING:
typeDesc=new TypeDesc(TypeDesc.Type.STRING);
break;
case CHAR:
CharTypeInfo charTypeInfo=(CharTypeInfo)typeInfo;
typeDesc=new TypeDesc(TypeDesc.Type.CHAR,charTypeInfo.getLength());
break;
case VARCHAR:
VarcharTypeInfo varcharTypeInfo=(VarcharTypeInfo)typeInfo;
typeDesc=new TypeDesc(TypeDesc.Type.CHAR,varcharTypeInfo.getLength());
break;
case DATE:
typeDesc=new TypeDesc(TypeDesc.Type.DATE);
break;
case TIMESTAMP:
typeDesc=new TypeDesc(TypeDesc.Type.TIMESTAMP);
break;
case BINARY:
typeDesc=new TypeDesc(TypeDesc.Type.BINARY);
break;
case DECIMAL:
DecimalTypeInfo decimalTypeInfo=(DecimalTypeInfo)typeInfo;
typeDesc=new TypeDesc(TypeDesc.Type.DECIMAL,decimalTypeInfo.getPrecision(),decimalTypeInfo.getScale());
break;
default :
throw new HiveException("Unsupported type " + typeString);
}
return typeDesc;
}
