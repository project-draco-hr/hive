{
  LOG.debug("initializing GenericUDFGetSplits");
  if (SessionState.get() == null || SessionState.get().getConf() == null) {
    throw new IllegalStateException("Cannot run get splits outside HS2");
  }
  LOG.debug("Initialized conf, jc and metastore connection");
  if (arguments.length != 2) {
    throw new UDFArgumentLengthException("The function GET_SPLITS accepts 2 arguments.");
  }
 else   if (!(arguments[0] instanceof StringObjectInspector)) {
    LOG.error("Got " + arguments[0].getTypeName() + " instead of string.");
    throw new UDFArgumentTypeException(0,"\"" + "string\" is expected at function GET_SPLITS, " + "but \"" + arguments[0].getTypeName() + "\" is found");
  }
 else   if (!(arguments[1] instanceof IntObjectInspector)) {
    LOG.error("Got " + arguments[1].getTypeName() + " instead of int.");
    throw new UDFArgumentTypeException(1,"\"" + "int\" is expected at function GET_SPLITS, " + "but \"" + arguments[1].getTypeName() + "\" is found");
  }
  stringOI=(StringObjectInspector)arguments[0];
  intOI=(IntObjectInspector)arguments[1];
  List<String> names=Arrays.asList("split");
  List<ObjectInspector> fieldOIs=Arrays.<ObjectInspector>asList(PrimitiveObjectInspectorFactory.javaByteArrayObjectInspector);
  StructObjectInspector outputOI=ObjectInspectorFactory.getStandardStructObjectInspector(names,fieldOIs);
  LOG.debug("done initializing GenericUDFGetSplits");
  return outputOI;
}
