{
  try {
    HiveServerCli cli=new HiveServerCli();
    cli.parse(args);
    Properties hiveconf=cli.addHiveconfToSystemProperties();
    try {
      LogUtils.initHiveLog4j();
    }
 catch (    LogInitializationException e) {
      HiveServerHandler.LOG.warn(e.getMessage());
    }
    HiveConf conf=new HiveConf(HiveServerHandler.class);
    ServerUtils.cleanUpScratchDir(conf);
    TServerTransport serverTransport=new TServerSocket(cli.port);
    for (    Map.Entry<Object,Object> item : hiveconf.entrySet()) {
      conf.set((String)item.getKey(),(String)item.getValue());
    }
    ThriftHiveProcessorFactory hfactory=new ThriftHiveProcessorFactory(null,conf);
    TThreadPoolServer.Args sargs=new TThreadPoolServer.Args(serverTransport).processorFactory(hfactory).transportFactory(new TTransportFactory()).protocolFactory(new TBinaryProtocol.Factory()).minWorkerThreads(cli.minWorkerThreads).maxWorkerThreads(cli.maxWorkerThreads);
    TServer server=new TThreadPoolServer(sargs);
    String msg="Starting hive server on port " + cli.port + " with "+ cli.minWorkerThreads+ " min worker threads and "+ cli.maxWorkerThreads+ " max worker threads";
    HiveServerHandler.LOG.info(msg);
    if (cli.isVerbose()) {
      System.err.println(msg);
    }
    server.serve();
  }
 catch (  Exception x) {
    x.printStackTrace();
  }
}
