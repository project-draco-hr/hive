{
  JoinOperator joinOp=getJoinOp(currTask);
  if (joinOp == null) {
    return null;
  }
  currTask.setTaskTag(Task.COMMON_JOIN);
  MapredWork currWork=currTask.getWork();
  List<Serializable> listWorks=new ArrayList<Serializable>();
  List<Task<? extends Serializable>> listTasks=new ArrayList<Task<? extends Serializable>>();
  HashMap<String,Task<? extends Serializable>> aliasToTask=new HashMap<String,Task<? extends Serializable>>();
  HashMap<String,ArrayList<String>> pathToAliases=currTask.getWork().getPathToAliases();
  ParseContext parseCtx=physicalContext.getParseContext();
  QBJoinTree joinTree=parseCtx.getJoinContext().get(joinOp);
  JoinDesc joinDesc=joinOp.getConf();
  Byte[] order=joinDesc.getTagOrder();
  int numAliases=order.length;
  long aliasTotalKnownInputSize=0;
  HashMap<String,Long> aliasToSize=new HashMap<String,Long>();
  try {
    Utilities.getInputSummary(context,currWork,null).getLength();
    for (    Map.Entry<String,ArrayList<String>> entry : pathToAliases.entrySet()) {
      String path=entry.getKey();
      List<String> aliasList=entry.getValue();
      ContentSummary cs=context.getCS(path);
      if (cs != null) {
        long size=cs.getLength();
        for (        String alias : aliasList) {
          aliasTotalKnownInputSize+=size;
          Long es=aliasToSize.get(alias);
          if (es == null) {
            es=new Long(0);
          }
          es+=size;
          aliasToSize.put(alias,es);
        }
      }
    }
    HashSet<Integer> bigTableCandidates=MapJoinProcessor.getBigTableCandidates(joinDesc.getConds());
    if (bigTableCandidates == null) {
      return null;
    }
    currWork.setOpParseCtxMap(parseCtx.getOpParseCtx());
    currWork.setJoinTree(joinTree);
    String xml=currWork.toXML();
    String bigTableAlias=null;
    long ThresholdOfSmallTblSizeSum=HiveConf.getLongVar(context.getConf(),HiveConf.ConfVars.HIVESMALLTABLESFILESIZE);
    for (int i=0; i < numAliases; i++) {
      if (!bigTableCandidates.contains(i)) {
        continue;
      }
      InputStream in=new ByteArrayInputStream(xml.getBytes("UTF-8"));
      MapredWork newWork=Utilities.deserializeMapRedWork(in,physicalContext.getConf());
      MapRedTask newTask=(MapRedTask)TaskFactory.get(newWork,physicalContext.getParseContext().getConf());
      JoinOperator newJoinOp=getJoinOp(newTask);
      bigTableAlias=MapJoinProcessor.genMapJoinOpAndLocalWork(newWork,newJoinOp,i);
      Long aliasKnownSize=aliasToSize.get(bigTableAlias);
      if (aliasKnownSize != null && aliasKnownSize.longValue() > 0) {
        long smallTblTotalKnownSize=aliasTotalKnownInputSize - aliasKnownSize.longValue();
        if (smallTblTotalKnownSize > ThresholdOfSmallTblSizeSum) {
          continue;
        }
      }
      listWorks.add(newWork);
      listTasks.add(newTask);
      newTask.setTaskTag(Task.CONVERTED_MAPJOIN);
      newTask.setBackupTask(currTask);
      newTask.setBackupChildrenTasks(currTask.getChildTasks());
      aliasToTask.put(bigTableAlias,newTask);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new SemanticException("Generate Map Join Task Error: " + e.getMessage());
  }
  listWorks.add(currTask.getWork());
  listTasks.add(currTask);
  currWork.setOpParseCtxMap(null);
  currWork.setJoinTree(null);
  ConditionalWork cndWork=new ConditionalWork(listWorks);
  ConditionalTask cndTsk=(ConditionalTask)TaskFactory.get(cndWork,parseCtx.getConf());
  cndTsk.setListTasks(listTasks);
  cndTsk.setResolver(new ConditionalResolverCommonJoin());
  ConditionalResolverCommonJoinCtx resolverCtx=new ConditionalResolverCommonJoinCtx();
  resolverCtx.setPathToAliases(pathToAliases);
  resolverCtx.setAliasToKnownSize(aliasToSize);
  resolverCtx.setAliasToTask(aliasToTask);
  resolverCtx.setCommonJoinTask(currTask);
  resolverCtx.setLocalTmpDir(context.getLocalScratchDir(false));
  resolverCtx.setHdfsTmpDir(context.getMRScratchDir());
  cndTsk.setResolverCtx(resolverCtx);
  this.replaceTaskWithConditionalTask(currTask,cndTsk,physicalContext);
  return cndTsk;
}
