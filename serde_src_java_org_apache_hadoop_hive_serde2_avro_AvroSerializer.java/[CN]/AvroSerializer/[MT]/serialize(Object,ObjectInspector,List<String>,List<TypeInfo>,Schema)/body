{
  StructObjectInspector soi=(StructObjectInspector)objectInspector;
  GenericData.Record record=new GenericData.Record(schema);
  List<? extends StructField> outputFieldRefs=soi.getAllStructFieldRefs();
  if (outputFieldRefs.size() != columnNames.size())   throw new AvroSerdeException("Number of input columns was different than output columns (in = " + columnNames.size() + " vs out = "+ outputFieldRefs.size());
  int size=schema.getFields().size();
  if (outputFieldRefs.size() != size)   throw new AvroSerdeException("Hive passed in a different number of fields than the schema expected: (Hive wanted " + outputFieldRefs.size() + ", Avro expected "+ schema.getFields().size());
  List<? extends StructField> allStructFieldRefs=soi.getAllStructFieldRefs();
  List<Object> structFieldsDataAsList=soi.getStructFieldsDataAsList(o);
  for (int i=0; i < size; i++) {
    Field field=schema.getFields().get(i);
    TypeInfo typeInfo=columnTypes.get(i);
    StructField structFieldRef=allStructFieldRefs.get(i);
    Object structFieldData=structFieldsDataAsList.get(i);
    ObjectInspector fieldOI=structFieldRef.getFieldObjectInspector();
    Object val=serialize(typeInfo,fieldOI,structFieldData,field.schema());
    record.put(field.name(),val);
  }
  if (!GenericData.get().validate(schema,record))   throw new SerializeToAvroException(schema,record);
  cache.setRecord(record);
  return cache;
}
