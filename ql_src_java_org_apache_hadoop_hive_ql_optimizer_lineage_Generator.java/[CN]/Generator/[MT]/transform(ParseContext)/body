{
  LineageCtx lCtx=new LineageCtx(pctx);
  Map<Rule,NodeProcessor> opRules=new LinkedHashMap<Rule,NodeProcessor>();
  opRules.put(new RuleRegExp("R1",TableScanOperator.getOperatorName() + "%"),OpProcFactory.getTSProc());
  opRules.put(new RuleRegExp("R2",ScriptOperator.getOperatorName() + "%"),OpProcFactory.getTransformProc());
  opRules.put(new RuleRegExp("R3",UDTFOperator.getOperatorName() + "%"),OpProcFactory.getTransformProc());
  opRules.put(new RuleRegExp("R4",SelectOperator.getOperatorName() + "%"),OpProcFactory.getSelProc());
  opRules.put(new RuleRegExp("R5",GroupByOperator.getOperatorName() + "%"),OpProcFactory.getGroupByProc());
  opRules.put(new RuleRegExp("R6",UnionOperator.getOperatorName() + "%"),OpProcFactory.getUnionProc());
  opRules.put(new RuleRegExp("R7",CommonJoinOperator.getOperatorName() + "%|" + MapJoinOperator.getOperatorName()+ "%"),OpProcFactory.getJoinProc());
  opRules.put(new RuleRegExp("R8",ReduceSinkOperator.getOperatorName() + "%"),OpProcFactory.getReduceSinkProc());
  opRules.put(new RuleRegExp("R9",LateralViewJoinOperator.getOperatorName() + "%"),OpProcFactory.getLateralViewJoinProc());
  Dispatcher disp=new DefaultRuleDispatcher(OpProcFactory.getDefaultProc(),opRules,lCtx);
  GraphWalker ogw=new PreOrderWalker(disp);
  ArrayList<Node> topNodes=new ArrayList<Node>();
  topNodes.addAll(pctx.getTopOps().values());
  ogw.startWalking(topNodes,null);
  if (SessionState.get() != null) {
    SessionState.get().getLineageState().setIndex(lCtx.getIndex());
  }
  return pctx;
}
