{
  LineageCtx lCtx=new LineageCtx(pctx);
  Map<Rule,NodeProcessor> opRules=new LinkedHashMap<Rule,NodeProcessor>();
  opRules.put(new RuleRegExp("R1","TS%"),OpProcFactory.getTSProc());
  opRules.put(new RuleRegExp("R2","SCR%"),OpProcFactory.getTransformProc());
  opRules.put(new RuleRegExp("R3","UDTF%"),OpProcFactory.getTransformProc());
  opRules.put(new RuleRegExp("R4","SEL%"),OpProcFactory.getSelProc());
  opRules.put(new RuleRegExp("R5","GBY%"),OpProcFactory.getGroupByProc());
  opRules.put(new RuleRegExp("R6","UNION%"),OpProcFactory.getUnionProc());
  opRules.put(new RuleRegExp("R7","JOIN%|MAPJOIN%"),OpProcFactory.getJoinProc());
  opRules.put(new RuleRegExp("R8","RS%"),OpProcFactory.getReduceSinkProc());
  opRules.put(new RuleRegExp("R9","LVJ%"),OpProcFactory.getLateralViewJoinProc());
  Dispatcher disp=new DefaultRuleDispatcher(OpProcFactory.getDefaultProc(),opRules,lCtx);
  GraphWalker ogw=new PreOrderWalker(disp);
  ArrayList<Node> topNodes=new ArrayList<Node>();
  topNodes.addAll(pctx.getTopOps().values());
  ogw.startWalking(topNodes,null);
  if (SessionState.get() != null) {
    SessionState.get().getLineageState().setIndex(lCtx.getIndex());
  }
  return pctx;
}
