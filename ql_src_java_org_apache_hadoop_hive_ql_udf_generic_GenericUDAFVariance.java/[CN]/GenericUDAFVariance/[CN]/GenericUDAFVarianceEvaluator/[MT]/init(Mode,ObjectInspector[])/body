{
  assert(parameters.length == 1);
  super.init(m,parameters);
  if (mode == Mode.PARTIAL1 || mode == Mode.COMPLETE) {
    inputOI=(PrimitiveObjectInspector)parameters[0];
  }
 else {
    soi=(StructObjectInspector)parameters[0];
    countField=soi.getStructFieldRef("count");
    sumField=soi.getStructFieldRef("sum");
    varianceField=soi.getStructFieldRef("variance");
    countFieldOI=(LongObjectInspector)countField.getFieldObjectInspector();
    sumFieldOI=(DoubleObjectInspector)sumField.getFieldObjectInspector();
    varianceFieldOI=(DoubleObjectInspector)varianceField.getFieldObjectInspector();
  }
  if (mode == Mode.PARTIAL1 || mode == Mode.PARTIAL2) {
    ArrayList<ObjectInspector> foi=new ArrayList<ObjectInspector>();
    foi.add(PrimitiveObjectInspectorFactory.writableLongObjectInspector);
    foi.add(PrimitiveObjectInspectorFactory.writableDoubleObjectInspector);
    foi.add(PrimitiveObjectInspectorFactory.writableDoubleObjectInspector);
    ArrayList<String> fname=new ArrayList<String>();
    fname.add("count");
    fname.add("sum");
    fname.add("variance");
    partialResult=new Object[3];
    partialResult[0]=new LongWritable(0);
    partialResult[1]=new DoubleWritable(0);
    partialResult[2]=new DoubleWritable(0);
    return ObjectInspectorFactory.getStandardStructObjectInspector(fname,foi);
  }
 else {
    result=new DoubleWritable(0);
    return PrimitiveObjectInspectorFactory.writableDoubleObjectInspector;
  }
}
