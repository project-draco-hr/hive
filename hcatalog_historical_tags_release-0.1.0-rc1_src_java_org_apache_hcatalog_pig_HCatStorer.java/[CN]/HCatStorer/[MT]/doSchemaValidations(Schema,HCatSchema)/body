{
  for (  FieldSchema pigField : pigSchema.getFields()) {
    byte type=pigField.type;
    String alias=pigField.alias;
    validateAlias(alias);
    HCatFieldSchema howlField=getTableCol(alias,tblSchema);
    if (DataType.isComplex(type)) {
switch (type) {
case DataType.MAP:
        if (howlField != null) {
          if (howlField.getMapKeyType() != Type.STRING) {
            throw new FrontendException("Key Type of map must be String " + howlField,PigHCatUtil.PIG_EXCEPTION_CODE);
          }
          if (howlField.getMapValueSchema().get(0).isComplex()) {
            throw new FrontendException("Value type of map cannot be complex" + howlField,PigHCatUtil.PIG_EXCEPTION_CODE);
          }
        }
      break;
case DataType.BAG:
    for (    FieldSchema innerField : pigField.schema.getField(0).schema.getFields()) {
      if (innerField.type == DataType.BAG || innerField.type == DataType.TUPLE) {
        throw new FrontendException("Complex types cannot be nested. " + innerField,PigHCatUtil.PIG_EXCEPTION_CODE);
      }
      validateAlias(innerField.alias);
    }
  if (howlField != null) {
    HCatFieldSchema arrayFieldScehma=howlField.getArrayElementSchema().get(0);
    Type hType=arrayFieldScehma.getType();
    if (hType == Type.STRUCT) {
      for (      HCatFieldSchema structFieldInBag : arrayFieldScehma.getStructSubSchema().getFields()) {
        if (structFieldInBag.getType() == Type.STRUCT || structFieldInBag.getType() == Type.ARRAY) {
          throw new FrontendException("Nested Complex types not allowed " + howlField,PigHCatUtil.PIG_EXCEPTION_CODE);
        }
      }
    }
    if (hType == Type.MAP) {
      if (arrayFieldScehma.getMapKeyType() != Type.STRING) {
        throw new FrontendException("Key Type of map must be String " + howlField,PigHCatUtil.PIG_EXCEPTION_CODE);
      }
      if (arrayFieldScehma.getMapValueSchema().get(0).isComplex()) {
        throw new FrontendException("Value type of map cannot be complex " + howlField,PigHCatUtil.PIG_EXCEPTION_CODE);
      }
    }
    if (hType == Type.ARRAY) {
      throw new FrontendException("Arrays cannot contain array within it. " + howlField,PigHCatUtil.PIG_EXCEPTION_CODE);
    }
  }
break;
case DataType.TUPLE:
validateUnNested(pigField.schema);
if (howlField != null) {
for (HCatFieldSchema structFieldSchema : howlField.getStructSubSchema().getFields()) {
if (structFieldSchema.isComplex()) {
  throw new FrontendException("Nested Complex types are not allowed." + howlField,PigHCatUtil.PIG_EXCEPTION_CODE);
}
}
}
break;
default :
throw new FrontendException("Internal Error.",PigHCatUtil.PIG_EXCEPTION_CODE);
}
}
}
for (HCatFieldSchema howlField : tblSchema.getFields()) {
Type hType=howlField.getType();
switch (hType) {
case SMALLINT:
case TINYINT:
case BOOLEAN:
throw new FrontendException("Incompatible type found in howl table schema: " + howlField,PigHCatUtil.PIG_EXCEPTION_CODE);
}
}
}
