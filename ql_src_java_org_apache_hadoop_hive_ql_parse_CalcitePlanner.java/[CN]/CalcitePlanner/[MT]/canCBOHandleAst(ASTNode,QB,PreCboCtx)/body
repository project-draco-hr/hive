{
  int root=ast.getToken().getType();
  boolean needToLogMessage=STATIC_LOG.isInfoEnabled();
  boolean isSupportedRoot=root == HiveParser.TOK_QUERY || root == HiveParser.TOK_EXPLAIN || qb.isCTAS();
  boolean isSupportedType=(qb.getIsQuery() && !qb.containsQueryWithoutSourceTable()) || qb.isCTAS() || cboCtx.type == PreCboCtx.Type.INSERT;
  boolean noBadTokens=HiveCalciteUtil.validateASTForUnsupportedTokens(ast);
  boolean result=isSupportedRoot && isSupportedType && getCreateViewDesc() == null && noBadTokens;
  if (!result) {
    if (needToLogMessage) {
      String msg="";
      if (!isSupportedRoot) {
        msg+="doesn't have QUERY or EXPLAIN as root and not a CTAS; ";
      }
      if (!isSupportedType) {
        msg+="is not a query with at least one source table " + " or there is a subquery without a source table, or CTAS, or insert; ";
      }
      if (getCreateViewDesc() != null) {
        msg+="has create view; ";
      }
      if (!noBadTokens) {
        msg+="has unsupported tokens; ";
      }
      if (msg.isEmpty()) {
        msg+="has some unspecified limitations; ";
      }
      STATIC_LOG.info("Not invoking CBO because the statement " + msg.substring(0,msg.length() - 2));
    }
    return false;
  }
  String msg=CalcitePlanner.canHandleQbForCbo(queryProperties,conf,true,needToLogMessage,qb);
  if (msg == null) {
    return true;
  }
  if (needToLogMessage) {
    STATIC_LOG.info("Not invoking CBO because the statement " + msg.substring(0,msg.length() - 2));
  }
  return false;
}
