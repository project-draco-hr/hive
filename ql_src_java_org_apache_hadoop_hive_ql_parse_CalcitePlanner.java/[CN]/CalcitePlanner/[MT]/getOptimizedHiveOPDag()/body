{
  RelNode optimizedOptiqPlan=null;
  CalcitePlannerAction calcitePlannerAction=null;
  if (this.columnAccessInfo == null) {
    this.columnAccessInfo=new ColumnAccessInfo();
  }
  calcitePlannerAction=new CalcitePlannerAction(prunedPartitions,this.columnAccessInfo);
  try {
    optimizedOptiqPlan=Frameworks.withPlanner(calcitePlannerAction,Frameworks.newConfigBuilder().typeSystem(new HiveTypeSystemImpl()).build());
  }
 catch (  Exception e) {
    rethrowCalciteException(e);
    throw new AssertionError("rethrowCalciteException didn't throw for " + e.getMessage());
  }
  RelNode modifiedOptimizedOptiqPlan=PlanModifierForReturnPath.convertOpTree(optimizedOptiqPlan,resultSchema,this.getQB().getTableDesc() != null);
  LOG.debug("Translating the following plan:\n" + RelOptUtil.toString(modifiedOptimizedOptiqPlan));
  Operator<?> hiveRoot=new HiveOpConverter(this,conf,unparseTranslator,topOps).convert(modifiedOptimizedOptiqPlan);
  RowResolver hiveRootRR=genRowResolver(hiveRoot,getQB());
  opParseCtx.put(hiveRoot,new OpParseContext(hiveRootRR));
  String dest=getQB().getParseInfo().getClauseNames().iterator().next();
  if (getQB().getParseInfo().getDestSchemaForClause(dest) != null && this.getQB().getTableDesc() == null) {
    Operator<?> selOp=handleInsertStatement(dest,hiveRoot,hiveRootRR,getQB());
    return genFileSinkPlan(dest,getQB(),selOp);
  }
 else {
    return genFileSinkPlan(dest,getQB(),hiveRoot);
  }
}
