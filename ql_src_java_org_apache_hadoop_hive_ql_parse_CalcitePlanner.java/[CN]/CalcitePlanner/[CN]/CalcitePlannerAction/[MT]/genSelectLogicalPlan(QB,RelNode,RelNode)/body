{
  HashSet<ColumnInfo> excludedColumns=new HashSet<ColumnInfo>();
  RelNode selForWindow=genSelectForWindowing(qb,srcRel,excludedColumns);
  srcRel=(selForWindow == null) ? srcRel : selForWindow;
  ArrayList<ExprNodeDesc> col_list=new ArrayList<ExprNodeDesc>();
  QBParseInfo qbp=getQBParseInfo(qb);
  String selClauseName=qbp.getClauseNames().iterator().next();
  ASTNode selExprList=qbp.getSelForClause(selClauseName);
  RowResolver out_rwsch=new RowResolver();
  Integer pos=Integer.valueOf(0);
  RowResolver inputRR=this.relToHiveRR.get(srcRel), starRR=inputRR;
  if (starSrcRel != null) {
    starRR=this.relToHiveRR.get(starSrcRel);
  }
  boolean selectStar=false;
  int posn=0;
  boolean hintPresent=(selExprList.getChild(0).getType() == HiveParser.TOK_HINTLIST);
  if (hintPresent) {
    String hint=ctx.getTokenRewriteStream().toString(selExprList.getChild(0).getTokenStartIndex(),selExprList.getChild(0).getTokenStopIndex());
    String msg=String.format("Hint specified for %s." + " Currently we don't support hints in CBO, turn off cbo to use hints.",hint);
    LOG.debug(msg);
    throw new CalciteSemanticException(msg,UnsupportedFeature.Hint);
  }
  boolean isInTransform=(selExprList.getChild(posn).getChild(0).getType() == HiveParser.TOK_TRANSFORM);
  if (isInTransform) {
    String msg=String.format("SELECT TRANSFORM is currently not supported in CBO," + " turn off cbo to use TRANSFORM.");
    LOG.debug(msg);
    throw new CalciteSemanticException(msg,UnsupportedFeature.Select_transform);
  }
  String udtfTableAlias=null;
  GenericUDTF genericUDTF=null;
  String genericUDTFName=null;
  ArrayList<String> udtfColAliases=new ArrayList<String>();
  ASTNode expr=(ASTNode)selExprList.getChild(posn).getChild(0);
  int exprType=expr.getType();
  if (exprType == HiveParser.TOK_FUNCTION || exprType == HiveParser.TOK_FUNCTIONSTAR) {
    String funcName=TypeCheckProcFactory.DefaultExprProcessor.getFunctionText(expr,true);
    FunctionInfo fi=FunctionRegistry.getFunctionInfo(funcName);
    if (fi != null && fi.getGenericUDTF() != null) {
      LOG.debug("Find UDTF " + funcName);
      genericUDTF=fi.getGenericUDTF();
      genericUDTFName=funcName;
      if (genericUDTF != null && (selectStar=exprType == HiveParser.TOK_FUNCTIONSTAR)) {
        genColListRegex(".*",null,(ASTNode)expr.getChild(0),col_list,null,inputRR,starRR,pos,out_rwsch,qb.getAliases(),false);
      }
    }
  }
  if (genericUDTF != null) {
    if (selExprList.getChildCount() > 1) {
      throw new SemanticException(generateErrorMessage((ASTNode)selExprList.getChild(1),ErrorMsg.UDTF_MULTIPLE_EXPR.getMsg()));
    }
    ASTNode selExpr=(ASTNode)selExprList.getChild(posn);
    for (int i=1; i < selExpr.getChildCount(); i++) {
      ASTNode selExprChild=(ASTNode)selExpr.getChild(i);
switch (selExprChild.getType()) {
case HiveParser.Identifier:
        udtfColAliases.add(unescapeIdentifier(selExprChild.getText().toLowerCase()));
      break;
case HiveParser.TOK_TABALIAS:
    assert(selExprChild.getChildCount() == 1);
  udtfTableAlias=unescapeIdentifier(selExprChild.getChild(0).getText());
qb.addAlias(udtfTableAlias);
break;
default :
throw new SemanticException("Find invalid token type " + selExprChild.getType() + " in UDTF.");
}
}
LOG.debug("UDTF table alias is " + udtfTableAlias);
LOG.debug("UDTF col aliases are " + udtfColAliases);
}
ASTNode exprList;
if (genericUDTF != null) {
exprList=expr;
}
 else {
exprList=selExprList;
}
int startPosn=genericUDTF != null ? posn + 1 : posn;
for (int i=startPosn; i < exprList.getChildCount(); ++i) {
ASTNode child=(ASTNode)exprList.getChild(i);
boolean hasAsClause=(!isInTransform) && (child.getChildCount() == 2);
if (genericUDTF == null && child.getChildCount() > 2) {
throw new SemanticException(SemanticAnalyzer.generateErrorMessage((ASTNode)child.getChild(2),ErrorMsg.INVALID_AS.getMsg()));
}
String tabAlias;
String colAlias;
if (genericUDTF != null) {
tabAlias=null;
colAlias=getAutogenColAliasPrfxLbl() + i;
expr=child;
}
 else {
expr=(ASTNode)child.getChild(0);
String[] colRef=SemanticAnalyzer.getColAlias(child,getAutogenColAliasPrfxLbl(),inputRR,autogenColAliasPrfxIncludeFuncName(),i);
tabAlias=colRef[0];
colAlias=colRef[1];
}
if (expr.getType() == HiveParser.TOK_ALLCOLREF) {
pos=genColListRegex(".*",expr.getChildCount() == 0 ? null : SemanticAnalyzer.getUnescapedName((ASTNode)expr.getChild(0)).toLowerCase(),expr,col_list,excludedColumns,inputRR,starRR,pos,out_rwsch,qb.getAliases(),true);
selectStar=true;
}
 else if (expr.getType() == HiveParser.TOK_TABLE_OR_COL && !hasAsClause && !inputRR.getIsExprResolver() && SemanticAnalyzer.isRegex(SemanticAnalyzer.unescapeIdentifier(expr.getChild(0).getText()),conf)) {
pos=genColListRegex(SemanticAnalyzer.unescapeIdentifier(expr.getChild(0).getText()),null,expr,col_list,excludedColumns,inputRR,starRR,pos,out_rwsch,qb.getAliases(),true);
}
 else if (expr.getType() == HiveParser.DOT && expr.getChild(0).getType() == HiveParser.TOK_TABLE_OR_COL && inputRR.hasTableAlias(SemanticAnalyzer.unescapeIdentifier(expr.getChild(0).getChild(0).getText().toLowerCase())) && !hasAsClause && !inputRR.getIsExprResolver() && SemanticAnalyzer.isRegex(SemanticAnalyzer.unescapeIdentifier(expr.getChild(1).getText()),conf)) {
pos=genColListRegex(SemanticAnalyzer.unescapeIdentifier(expr.getChild(1).getText()),SemanticAnalyzer.unescapeIdentifier(expr.getChild(0).getChild(0).getText().toLowerCase()),expr,col_list,excludedColumns,inputRR,starRR,pos,out_rwsch,qb.getAliases(),true);
}
 else if (ParseUtils.containsTokenOfType(expr,HiveParser.TOK_FUNCTIONDI) && !(srcRel instanceof HiveAggregate)) {
throw new CalciteSemanticException("Distinct without an aggreggation.",UnsupportedFeature.Distinct_without_an_aggreggation);
}
 else {
TypeCheckCtx tcCtx=new TypeCheckCtx(inputRR);
tcCtx.setAllowStatefulFunctions(true);
ExprNodeDesc exp=genExprNodeDesc(expr,inputRR,tcCtx);
String recommended=recommendName(exp,colAlias);
if (recommended != null && out_rwsch.get(null,recommended) == null) {
colAlias=recommended;
}
col_list.add(exp);
ColumnInfo colInfo=new ColumnInfo(SemanticAnalyzer.getColumnInternalName(pos),exp.getWritableObjectInspector(),tabAlias,false);
colInfo.setSkewedCol((exp instanceof ExprNodeColumnDesc) ? ((ExprNodeColumnDesc)exp).isSkewedCol() : false);
if (!out_rwsch.putWithCheck(tabAlias,colAlias,null,colInfo)) {
throw new CalciteSemanticException("Cannot add column to RR: " + tabAlias + "."+ colAlias+ " => "+ colInfo+ " due to duplication, see previous warnings",UnsupportedFeature.Duplicates_in_RR);
}
if (exp instanceof ExprNodeColumnDesc) {
ExprNodeColumnDesc colExp=(ExprNodeColumnDesc)exp;
String[] altMapping=inputRR.getAlternateMappings(colExp.getColumn());
if (altMapping != null) {
out_rwsch.put(altMapping[0],altMapping[1],colInfo);
}
}
pos=Integer.valueOf(pos.intValue() + 1);
}
}
selectStar=selectStar && exprList.getChildCount() == posn + 1;
List<RexNode> calciteColLst=new ArrayList<RexNode>();
RexNodeConverter rexNodeConv=new RexNodeConverter(cluster,srcRel.getRowType(),buildHiveColNameToInputPosMap(col_list,inputRR),0,false);
for (ExprNodeDesc colExpr : col_list) {
calciteColLst.add(rexNodeConv.convert(colExpr));
}
RelNode outputRel=null;
if (genericUDTF != null) {
outputRel=genUDTFPlan(genericUDTF,genericUDTFName,udtfTableAlias,udtfColAliases,qb,calciteColLst,out_rwsch,srcRel);
}
 else {
outputRel=genSelectRelNode(calciteColLst,out_rwsch,srcRel);
}
if (selForWindow != null && selExprList.getToken().getType() == HiveParser.TOK_SELECTDI) {
ImmutableBitSet groupSet=ImmutableBitSet.range(outputRel.getRowType().getFieldList().size());
outputRel=new HiveAggregate(cluster,cluster.traitSetOf(HiveRelNode.CONVENTION),outputRel,false,groupSet,null,new ArrayList<AggregateCall>());
RowResolver groupByOutputRowResolver=new RowResolver();
for (int i=0; i < out_rwsch.getColumnInfos().size(); i++) {
ColumnInfo colInfo=out_rwsch.getColumnInfos().get(i);
ColumnInfo newColInfo=new ColumnInfo(colInfo.getInternalName(),colInfo.getType(),colInfo.getTabAlias(),colInfo.getIsVirtualCol());
groupByOutputRowResolver.put(colInfo.getTabAlias(),colInfo.getAlias(),newColInfo);
}
relToHiveColNameCalcitePosMap.put(outputRel,buildHiveToCalciteColumnMap(groupByOutputRowResolver,outputRel));
this.relToHiveRR.put(outputRel,groupByOutputRowResolver);
}
return outputRel;
}
