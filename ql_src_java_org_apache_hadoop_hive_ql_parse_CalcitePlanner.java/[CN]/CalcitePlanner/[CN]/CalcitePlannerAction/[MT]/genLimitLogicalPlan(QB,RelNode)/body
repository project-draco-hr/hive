{
  HiveRelNode sortRel=null;
  QBParseInfo qbp=getQBParseInfo(qb);
  SimpleEntry<Integer,Integer> entry=qbp.getDestToLimit().get(qbp.getClauseNames().iterator().next());
  Integer offset=(entry == null) ? 0 : entry.getKey();
  Integer fetch=(entry == null) ? null : entry.getValue();
  if (fetch != null) {
    RexNode offsetRN=cluster.getRexBuilder().makeExactLiteral(BigDecimal.valueOf(offset));
    RexNode fetchRN=cluster.getRexBuilder().makeExactLiteral(BigDecimal.valueOf(fetch));
    RelTraitSet traitSet=cluster.traitSetOf(HiveRelNode.CONVENTION);
    RelCollation canonizedCollation=traitSet.canonize(RelCollations.EMPTY);
    sortRel=new HiveSortLimit(cluster,traitSet,srcRel,canonizedCollation,offsetRN,fetchRN);
    RowResolver outputRR=new RowResolver();
    if (!RowResolver.add(outputRR,relToHiveRR.get(srcRel))) {
      throw new CalciteSemanticException("Duplicates detected when adding columns to RR: see previous message",UnsupportedFeature.Duplicates_in_RR);
    }
    ImmutableMap<String,Integer> hiveColNameCalcitePosMap=buildHiveToCalciteColumnMap(outputRR,sortRel);
    relToHiveRR.put(sortRel,outputRR);
    relToHiveColNameCalcitePosMap.put(sortRel,hiveColNameCalcitePosMap);
  }
  return sortRel;
}
