{
  basePlan=hepPlan(basePlan,true,mdProvider,SemiJoinJoinTransposeRule.INSTANCE,SemiJoinFilterTransposeRule.INSTANCE,SemiJoinProjectTransposeRule.INSTANCE);
  basePlan=hepPlan(basePlan,true,mdProvider,HiveJoinAddNotNullRule.INSTANCE);
  basePlan=hepPlan(basePlan,true,mdProvider,ReduceExpressionsRule.PROJECT_INSTANCE,ReduceExpressionsRule.FILTER_INSTANCE,ReduceExpressionsRule.JOIN_INSTANCE,new HiveFilterProjectTransposeRule(Filter.class,HiveFilter.DEFAULT_FILTER_FACTORY,HiveProject.class,HiveProject.DEFAULT_PROJECT_FACTORY),new HiveFilterSetOpTransposeRule(HiveFilter.DEFAULT_FILTER_FACTORY),new FilterMergeRule(HiveFilter.DEFAULT_FILTER_FACTORY),HiveFilterJoinRule.JOIN,HiveFilterJoinRule.FILTER_ON_JOIN,new FilterAggregateTransposeRule(Filter.class,HiveFilter.DEFAULT_FILTER_FACTORY,Aggregate.class));
  basePlan=hepPlan(basePlan,false,mdProvider,new JoinPushTransitivePredicatesRule(Join.class,HiveFilter.DEFAULT_FILTER_FACTORY),new HivePartitionPruneRule(conf));
  RelFieldTrimmer fieldTrimmer=new RelFieldTrimmer(null,HiveProject.DEFAULT_PROJECT_FACTORY,HiveFilter.DEFAULT_FILTER_FACTORY,HiveJoin.HIVE_JOIN_FACTORY,RelFactories.DEFAULT_SEMI_JOIN_FACTORY,HiveSort.HIVE_SORT_REL_FACTORY,HiveAggregate.HIVE_AGGR_REL_FACTORY,HiveUnion.UNION_REL_FACTORY,true);
  basePlan=fieldTrimmer.trim(basePlan);
  basePlan=hepPlan(basePlan,true,mdProvider,new FilterProjectTransposeRule(Filter.class,HiveFilter.DEFAULT_FILTER_FACTORY,HiveProject.class,HiveProject.DEFAULT_PROJECT_FACTORY));
  return basePlan;
}
