{
  RelNode calciteGenPlan=null;
  RelNode calcitePreCboPlan=null;
  RelNode calciteOptimizedPlan=null;
  final Double maxSplitSize=(double)HiveConf.getLongVar(conf,HiveConf.ConfVars.MAPREDMAXSPLITSIZE);
  final Double maxMemory=(double)HiveConf.getLongVar(conf,HiveConf.ConfVars.HIVECONVERTJOINNOCONDITIONALTASKTHRESHOLD);
  HiveAlgorithmsConf algorithmsConf=new HiveAlgorithmsConf(maxSplitSize,maxMemory);
  HiveVolcanoPlannerContext confContext=new HiveVolcanoPlannerContext(algorithmsConf);
  RelOptPlanner planner=HiveVolcanoPlanner.createPlanner(confContext);
  final RelOptQuery query=new RelOptQuery(planner);
  final RexBuilder rexBuilder=cluster.getRexBuilder();
  cluster=query.createCluster(rexBuilder.getTypeFactory(),rexBuilder);
  this.cluster=cluster;
  this.relOptSchema=relOptSchema;
  PerfLogger perfLogger=SessionState.getPerfLogger();
  perfLogger.PerfLogBegin(this.getClass().getName(),PerfLogger.OPTIMIZER);
  try {
    calciteGenPlan=genLogicalPlan(getQB(),true);
    resultSchema=SemanticAnalyzer.convertRowSchemaToResultSetSchema(relToHiveRR.get(calciteGenPlan),HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_RESULTSET_USE_UNIQUE_COLUMN_NAMES));
  }
 catch (  SemanticException e) {
    semanticException=e;
    throw new RuntimeException(e);
  }
  perfLogger.PerfLogEnd(this.getClass().getName(),PerfLogger.OPTIMIZER,"Calcite: Plan generation");
  HiveDefaultRelMetadataProvider mdProvider=new HiveDefaultRelMetadataProvider(conf);
  Executor executorProvider=new HiveRexExecutorImpl(cluster);
  calcitePreCboPlan=applyPreJoinOrderingTransforms(calciteGenPlan,mdProvider.getMetadataProvider(),executorProvider);
  if (profilesCBO.contains(ExtendedCBOProfile.JOIN_REORDERING)) {
    perfLogger.PerfLogBegin(this.getClass().getName(),PerfLogger.OPTIMIZER);
    try {
      List<RelMetadataProvider> list=Lists.newArrayList();
      list.add(mdProvider.getMetadataProvider());
      RelTraitSet desiredTraits=cluster.traitSetOf(HiveRelNode.CONVENTION,RelCollations.EMPTY);
      HepProgramBuilder hepPgmBldr=new HepProgramBuilder().addMatchOrder(HepMatchOrder.BOTTOM_UP);
      hepPgmBldr.addRuleInstance(new JoinToMultiJoinRule(HiveJoin.class));
      hepPgmBldr.addRuleInstance(new LoptOptimizeJoinRule(HiveRelFactories.HIVE_JOIN_FACTORY,HiveRelFactories.HIVE_PROJECT_FACTORY,HiveRelFactories.HIVE_FILTER_FACTORY));
      HepProgram hepPgm=hepPgmBldr.build();
      HepPlanner hepPlanner=new HepPlanner(hepPgm);
      hepPlanner.registerMetadataProviders(list);
      RelMetadataProvider chainedProvider=ChainedRelMetadataProvider.of(list);
      cluster.setMetadataProvider(new CachingRelMetadataProvider(chainedProvider,hepPlanner));
      RelNode rootRel=calcitePreCboPlan;
      hepPlanner.setRoot(rootRel);
      if (!calcitePreCboPlan.getTraitSet().equals(desiredTraits)) {
        rootRel=hepPlanner.changeTraits(calcitePreCboPlan,desiredTraits);
      }
      hepPlanner.setRoot(rootRel);
      calciteOptimizedPlan=hepPlanner.findBestExp();
    }
 catch (    Exception e) {
      boolean isMissingStats=noColsMissingStats.get() > 0;
      if (isMissingStats) {
        LOG.warn("Missing column stats (see previous messages), skipping join reordering in CBO");
        noColsMissingStats.set(0);
        calciteOptimizedPlan=calcitePreCboPlan;
        disableSemJoinReordering=false;
      }
 else {
        throw e;
      }
    }
    perfLogger.PerfLogEnd(this.getClass().getName(),PerfLogger.OPTIMIZER,"Calcite: Join Reordering");
  }
 else {
    calciteOptimizedPlan=calcitePreCboPlan;
    disableSemJoinReordering=false;
  }
  perfLogger.PerfLogBegin(this.getClass().getName(),PerfLogger.OPTIMIZER);
  calciteOptimizedPlan=hepPlan(calciteOptimizedPlan,false,mdProvider.getMetadataProvider(),null,HepMatchOrder.BOTTOM_UP,ProjectRemoveRule.INSTANCE,UnionMergeRule.INSTANCE,new ProjectMergeRule(false,HiveRelFactories.HIVE_PROJECT_FACTORY),HiveAggregateProjectMergeRule.INSTANCE,HiveJoinCommuteRule.INSTANCE);
  perfLogger.PerfLogEnd(this.getClass().getName(),PerfLogger.OPTIMIZER,"Calcite: Optimizations without stats");
  if (conf.getBoolVar(ConfVars.AGGR_JOIN_TRANSPOSE)) {
    perfLogger.PerfLogBegin(this.getClass().getName(),PerfLogger.OPTIMIZER);
    try {
      HepProgramBuilder hepPgmBldr=new HepProgramBuilder().addMatchOrder(HepMatchOrder.BOTTOM_UP);
      hepPgmBldr.addRuleInstance(HiveAggregateJoinTransposeRule.INSTANCE);
      HepProgram hepPgm=hepPgmBldr.build();
      HepPlanner hepPlanner=new HepPlanner(hepPgm);
      List<RelMetadataProvider> list=Lists.newArrayList();
      list.add(mdProvider.getMetadataProvider());
      hepPlanner.registerMetadataProviders(list);
      RelMetadataProvider chainedProvider=ChainedRelMetadataProvider.of(list);
      cluster.setMetadataProvider(new CachingRelMetadataProvider(chainedProvider,hepPlanner));
      hepPlanner.setRoot(calciteOptimizedPlan);
      calciteOptimizedPlan=hepPlanner.findBestExp();
    }
 catch (    Exception e) {
      boolean isMissingStats=noColsMissingStats.get() > 0;
      if (isMissingStats) {
        LOG.warn("Missing column stats (see previous messages), skipping aggregate-join transpose in CBO");
        noColsMissingStats.set(0);
      }
 else {
        throw e;
      }
    }
    perfLogger.PerfLogEnd(this.getClass().getName(),PerfLogger.OPTIMIZER,"Calcite: Aggregate join transpose");
  }
  if (profilesCBO.contains(ExtendedCBOProfile.WINDOWING_POSTPROCESSING)) {
    perfLogger.PerfLogBegin(this.getClass().getName(),PerfLogger.OPTIMIZER);
    calciteOptimizedPlan=hepPlan(calciteOptimizedPlan,false,mdProvider.getMetadataProvider(),null,HepMatchOrder.BOTTOM_UP,HiveWindowingFixRule.INSTANCE);
    perfLogger.PerfLogEnd(this.getClass().getName(),PerfLogger.OPTIMIZER,"Calcite: Window fixing rule");
  }
  if (HiveConf.getBoolVar(conf,ConfVars.HIVE_CBO_RETPATH_HIVEOP)) {
    perfLogger.PerfLogBegin(this.getClass().getName(),PerfLogger.OPTIMIZER);
    calciteOptimizedPlan=hepPlan(calciteOptimizedPlan,true,mdProvider.getMetadataProvider(),null,HepMatchOrder.BOTTOM_UP,HiveJoinProjectTransposeRule.BOTH_PROJECT_INCLUDE_OUTER,HiveJoinProjectTransposeRule.LEFT_PROJECT_INCLUDE_OUTER,HiveJoinProjectTransposeRule.RIGHT_PROJECT_INCLUDE_OUTER,HiveJoinToMultiJoinRule.INSTANCE,HiveProjectMergeRule.INSTANCE);
    HiveRelFieldTrimmer fieldTrimmer=new HiveRelFieldTrimmer(null,HiveRelFactories.HIVE_BUILDER.create(cluster,null));
    calciteOptimizedPlan=fieldTrimmer.trim(calciteOptimizedPlan);
    calciteOptimizedPlan=hepPlan(calciteOptimizedPlan,false,mdProvider.getMetadataProvider(),null,HepMatchOrder.BOTTOM_UP,ProjectRemoveRule.INSTANCE,new ProjectMergeRule(false,HiveRelFactories.HIVE_PROJECT_FACTORY));
    calciteOptimizedPlan=hepPlan(calciteOptimizedPlan,true,mdProvider.getMetadataProvider(),null,new HiveFilterProjectTSTransposeRule(Filter.class,HiveRelFactories.HIVE_FILTER_FACTORY,HiveProject.class,HiveRelFactories.HIVE_PROJECT_FACTORY,HiveTableScan.class));
    calciteOptimizedPlan=hepPlan(calciteOptimizedPlan,false,mdProvider.getMetadataProvider(),null,HepMatchOrder.BOTTOM_UP,HiveInsertExchange4JoinRule.EXCHANGE_BELOW_JOIN,HiveInsertExchange4JoinRule.EXCHANGE_BELOW_MULTIJOIN);
    perfLogger.PerfLogEnd(this.getClass().getName(),PerfLogger.OPTIMIZER,"Calcite: Translation from Calcite tree to Hive tree");
  }
  if (LOG.isDebugEnabled() && !conf.getBoolVar(ConfVars.HIVE_IN_TEST)) {
    LOG.debug("CBO Planning details:\n");
    LOG.debug("Original Plan:\n" + RelOptUtil.toString(calciteGenPlan));
    LOG.debug("Plan After PPD, PartPruning, ColumnPruning:\n" + RelOptUtil.toString(calcitePreCboPlan));
    LOG.debug("Plan After Join Reordering:\n" + RelOptUtil.toString(calciteOptimizedPlan,SqlExplainLevel.ALL_ATTRIBUTES));
  }
  return calciteOptimizedPlan;
}
