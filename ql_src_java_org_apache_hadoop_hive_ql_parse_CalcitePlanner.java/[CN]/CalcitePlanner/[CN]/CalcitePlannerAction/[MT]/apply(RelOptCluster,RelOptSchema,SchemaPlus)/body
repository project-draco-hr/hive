{
  RelNode calciteGenPlan=null;
  RelNode calcitePreCboPlan=null;
  RelNode calciteOptimizedPlan=null;
  final Double maxSplitSize=(double)HiveConf.getLongVar(conf,HiveConf.ConfVars.MAPREDMAXSPLITSIZE);
  final Double maxMemory=(double)HiveConf.getLongVar(conf,HiveConf.ConfVars.HIVECONVERTJOINNOCONDITIONALTASKTHRESHOLD);
  HiveAlgorithmsConf algorithmsConf=new HiveAlgorithmsConf(maxSplitSize,maxMemory);
  HiveConfigContext confContext=new HiveConfigContext(algorithmsConf);
  RelOptPlanner planner=HiveVolcanoPlanner.createPlanner(confContext);
  final RelOptQuery query=new RelOptQuery(planner);
  final RexBuilder rexBuilder=cluster.getRexBuilder();
  cluster=query.createCluster(rexBuilder.getTypeFactory(),rexBuilder);
  this.cluster=cluster;
  this.relOptSchema=relOptSchema;
  try {
    calciteGenPlan=genLogicalPlan(getQB(),true);
    topLevelFieldSchema=SemanticAnalyzer.convertRowSchemaToResultSetSchema(relToHiveRR.get(calciteGenPlan),HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_RESULTSET_USE_UNIQUE_COLUMN_NAMES));
  }
 catch (  SemanticException e) {
    semanticException=e;
    throw new RuntimeException(e);
  }
  HiveDefaultRelMetadataProvider mdProvider=new HiveDefaultRelMetadataProvider(conf);
  calcitePreCboPlan=applyPreJoinOrderingTransforms(calciteGenPlan,mdProvider.getMetadataProvider());
  List<RelMetadataProvider> list=Lists.newArrayList();
  list.add(mdProvider.getMetadataProvider());
  RelTraitSet desiredTraits=cluster.traitSetOf(HiveRelNode.CONVENTION,RelCollations.EMPTY);
  HepProgram hepPgm=null;
  HepProgramBuilder hepPgmBldr=new HepProgramBuilder().addMatchOrder(HepMatchOrder.BOTTOM_UP).addRuleInstance(new JoinToMultiJoinRule(HiveJoin.class));
  hepPgmBldr.addRuleInstance(new LoptOptimizeJoinRule(HiveJoin.HIVE_JOIN_FACTORY,HiveProject.DEFAULT_PROJECT_FACTORY,HiveFilter.DEFAULT_FILTER_FACTORY));
  hepPgmBldr.addRuleInstance(ReduceExpressionsRule.JOIN_INSTANCE);
  hepPgmBldr.addRuleInstance(ReduceExpressionsRule.FILTER_INSTANCE);
  hepPgmBldr.addRuleInstance(ReduceExpressionsRule.PROJECT_INSTANCE);
  hepPgmBldr.addRuleInstance(ProjectRemoveRule.INSTANCE);
  hepPgmBldr.addRuleInstance(UnionMergeRule.INSTANCE);
  hepPgmBldr.addRuleInstance(new ProjectMergeRule(false,HiveProject.DEFAULT_PROJECT_FACTORY));
  hepPgm=hepPgmBldr.build();
  HepPlanner hepPlanner=new HepPlanner(hepPgm);
  hepPlanner.registerMetadataProviders(list);
  RelMetadataProvider chainedProvider=ChainedRelMetadataProvider.of(list);
  cluster.setMetadataProvider(new CachingRelMetadataProvider(chainedProvider,hepPlanner));
  RelNode rootRel=calcitePreCboPlan;
  hepPlanner.setRoot(rootRel);
  if (!calcitePreCboPlan.getTraitSet().equals(desiredTraits)) {
    rootRel=hepPlanner.changeTraits(calcitePreCboPlan,desiredTraits);
  }
  hepPlanner.setRoot(rootRel);
  calciteOptimizedPlan=hepPlanner.findBestExp();
  calciteOptimizedPlan=hepPlan(calciteOptimizedPlan,false,mdProvider.getMetadataProvider(),HepMatchOrder.BOTTOM_UP,HiveJoinCommuteRule.INSTANCE);
  calciteOptimizedPlan=hepPlan(calciteOptimizedPlan,false,mdProvider.getMetadataProvider(),HepMatchOrder.BOTTOM_UP,HiveWindowingFixRule.INSTANCE);
  if (HiveConf.getBoolVar(conf,ConfVars.HIVE_CBO_RETPATH_HIVEOP)) {
    calciteOptimizedPlan=hepPlan(calciteOptimizedPlan,true,mdProvider.getMetadataProvider(),HepMatchOrder.BOTTOM_UP,HiveJoinProjectTransposeRule.BOTH_PROJECT_INCLUDE_OUTER,HiveJoinProjectTransposeRule.LEFT_PROJECT_INCLUDE_OUTER,HiveJoinProjectTransposeRule.RIGHT_PROJECT_INCLUDE_OUTER,HiveJoinToMultiJoinRule.INSTANCE,HiveProjectMergeRule.INSTANCE);
    HiveRelFieldTrimmer fieldTrimmer=new HiveRelFieldTrimmer(null,HiveProject.DEFAULT_PROJECT_FACTORY,HiveFilter.DEFAULT_FILTER_FACTORY,HiveJoin.HIVE_JOIN_FACTORY,HiveSemiJoin.HIVE_SEMIJOIN_FACTORY,HiveSort.HIVE_SORT_REL_FACTORY,HiveAggregate.HIVE_AGGR_REL_FACTORY,HiveUnion.UNION_REL_FACTORY);
    calciteOptimizedPlan=fieldTrimmer.trim(calciteOptimizedPlan);
    calciteOptimizedPlan=hepPlan(calciteOptimizedPlan,false,mdProvider.getMetadataProvider(),HepMatchOrder.BOTTOM_UP,ProjectRemoveRule.INSTANCE,new ProjectMergeRule(false,HiveProject.DEFAULT_PROJECT_FACTORY));
    calciteOptimizedPlan=hepPlan(calciteOptimizedPlan,false,mdProvider.getMetadataProvider(),HepMatchOrder.BOTTOM_UP,HiveInsertExchange4JoinRule.EXCHANGE_BELOW_JOIN,HiveInsertExchange4JoinRule.EXCHANGE_BELOW_MULTIJOIN);
  }
  if (LOG.isDebugEnabled() && !conf.getBoolVar(ConfVars.HIVE_IN_TEST)) {
    LOG.debug("CBO Planning details:\n");
    LOG.debug("Original Plan:\n" + RelOptUtil.toString(calciteGenPlan));
    LOG.debug("Plan After PPD, PartPruning, ColumnPruning:\n" + RelOptUtil.toString(calcitePreCboPlan));
    LOG.debug("Plan After Join Reordering:\n" + RelOptUtil.toString(calciteOptimizedPlan,SqlExplainLevel.ALL_ATTRIBUTES));
  }
  return calciteOptimizedPlan;
}
