{
  PerfLogger perfLogger=SessionState.getPerfLogger();
  if (!conf.getVar(HiveConf.ConfVars.HIVE_EXECUTION_ENGINE).equals("mr") && conf.getBoolVar(HiveConf.ConfVars.HIVEOPTIMIZEDISTINCTREWRITE)) {
    perfLogger.PerfLogBegin(this.getClass().getName(),PerfLogger.OPTIMIZER);
    basePlan=hepPlan(basePlan,true,mdProvider,null,HiveExpandDistinctAggregatesRule.INSTANCE);
    perfLogger.PerfLogEnd(this.getClass().getName(),PerfLogger.OPTIMIZER,"Calcite: Prejoin ordering transformation, Distinct aggregate rewrite");
  }
  perfLogger.PerfLogBegin(this.getClass().getName(),PerfLogger.OPTIMIZER);
  basePlan=hepPlan(basePlan,false,mdProvider,null,HepMatchOrder.ARBITRARY,HivePreFilteringRule.INSTANCE);
  perfLogger.PerfLogEnd(this.getClass().getName(),PerfLogger.OPTIMIZER,"Calcite: Prejoin ordering transformation, factor out common filter elements and separating deterministic vs non-deterministic UDF");
  List<RelOptRule> rules=Lists.newArrayList();
  if (conf.getBoolVar(HiveConf.ConfVars.HIVEOPTPPD_WINDOWING)) {
    rules.add(HiveFilterProjectTransposeRule.INSTANCE_DETERMINISTIC_WINDOWING);
  }
 else {
    rules.add(HiveFilterProjectTransposeRule.INSTANCE_DETERMINISTIC);
  }
  rules.add(HiveFilterSetOpTransposeRule.INSTANCE);
  rules.add(HiveFilterSortTransposeRule.INSTANCE);
  rules.add(HiveFilterJoinRule.JOIN);
  rules.add(HiveFilterJoinRule.FILTER_ON_JOIN);
  rules.add(new HiveFilterAggregateTransposeRule(Filter.class,HiveRelFactories.HIVE_FILTER_FACTORY,Aggregate.class));
  rules.add(new FilterMergeRule(HiveRelFactories.HIVE_FILTER_FACTORY));
  rules.add(HiveProjectFilterPullUpConstantsRule.INSTANCE);
  rules.add(HiveReduceExpressionsRule.PROJECT_INSTANCE);
  rules.add(HiveReduceExpressionsRule.FILTER_INSTANCE);
  rules.add(HiveReduceExpressionsRule.JOIN_INSTANCE);
  if (conf.getBoolVar(HiveConf.ConfVars.HIVEPOINTLOOKUPOPTIMIZER)) {
    final int min=conf.getIntVar(HiveConf.ConfVars.HIVEPOINTLOOKUPOPTIMIZERMIN);
    rules.add(new HivePointLookupOptimizerRule(min));
  }
  rules.add(HiveJoinAddNotNullRule.INSTANCE_JOIN);
  rules.add(HiveJoinAddNotNullRule.INSTANCE_SEMIJOIN);
  rules.add(HiveJoinPushTransitivePredicatesRule.INSTANCE_JOIN);
  rules.add(HiveJoinPushTransitivePredicatesRule.INSTANCE_SEMIJOIN);
  rules.add(HiveSortMergeRule.INSTANCE);
  rules.add(HiveSortLimitPullUpConstantsRule.INSTANCE);
  rules.add(HiveUnionPullUpConstantsRule.INSTANCE);
  rules.add(HiveAggregatePullUpConstantsRule.INSTANCE);
  perfLogger.PerfLogBegin(this.getClass().getName(),PerfLogger.OPTIMIZER);
  basePlan=hepPlan(basePlan,true,mdProvider,executorProvider,HepMatchOrder.BOTTOM_UP,rules.toArray(new RelOptRule[rules.size()]));
  perfLogger.PerfLogEnd(this.getClass().getName(),PerfLogger.OPTIMIZER,"Calcite: Prejoin ordering transformation, PPD, not null predicates, transitive inference, constant folding");
  if (conf.getBoolVar(HiveConf.ConfVars.HIVE_OPTIMIZE_LIMIT_TRANSPOSE)) {
    perfLogger.PerfLogBegin(this.getClass().getName(),PerfLogger.OPTIMIZER);
    final float reductionProportion=HiveConf.getFloatVar(conf,HiveConf.ConfVars.HIVE_OPTIMIZE_LIMIT_TRANSPOSE_REDUCTION_PERCENTAGE);
    final long reductionTuples=HiveConf.getLongVar(conf,HiveConf.ConfVars.HIVE_OPTIMIZE_LIMIT_TRANSPOSE_REDUCTION_TUPLES);
    basePlan=hepPlan(basePlan,true,mdProvider,null,HiveSortMergeRule.INSTANCE,HiveSortProjectTransposeRule.INSTANCE,HiveSortJoinReduceRule.INSTANCE,HiveSortUnionReduceRule.INSTANCE);
    basePlan=hepPlan(basePlan,true,mdProvider,null,HepMatchOrder.BOTTOM_UP,new HiveSortRemoveRule(reductionProportion,reductionTuples),HiveProjectSortTransposeRule.INSTANCE);
    perfLogger.PerfLogEnd(this.getClass().getName(),PerfLogger.OPTIMIZER,"Calcite: Prejoin ordering transformation, Push down limit through outer join");
  }
  perfLogger.PerfLogBegin(this.getClass().getName(),PerfLogger.OPTIMIZER);
  basePlan=hepPlan(basePlan,true,mdProvider,null,SemiJoinJoinTransposeRule.INSTANCE,SemiJoinFilterTransposeRule.INSTANCE,SemiJoinProjectTransposeRule.INSTANCE);
  perfLogger.PerfLogEnd(this.getClass().getName(),PerfLogger.OPTIMIZER,"Calcite: Prejoin ordering transformation, Push Down Semi Joins");
  perfLogger.PerfLogBegin(this.getClass().getName(),PerfLogger.OPTIMIZER);
  basePlan=hepPlan(basePlan,false,mdProvider,null,new HivePartitionPruneRule(conf));
  perfLogger.PerfLogEnd(this.getClass().getName(),PerfLogger.OPTIMIZER,"Calcite: Prejoin ordering transformation, Partition Pruning");
  perfLogger.PerfLogBegin(this.getClass().getName(),PerfLogger.OPTIMIZER);
  HiveRelFieldTrimmer fieldTrimmer=new HiveRelFieldTrimmer(null,HiveRelFactories.HIVE_BUILDER.create(cluster,null));
  basePlan=fieldTrimmer.trim(basePlan);
  perfLogger.PerfLogEnd(this.getClass().getName(),PerfLogger.OPTIMIZER,"Calcite: Prejoin ordering transformation, Projection Pruning");
  perfLogger.PerfLogBegin(this.getClass().getName(),PerfLogger.OPTIMIZER);
  basePlan=hepPlan(basePlan,false,mdProvider,null,HiveProjectMergeRule.INSTANCE,ProjectRemoveRule.INSTANCE);
  perfLogger.PerfLogEnd(this.getClass().getName(),PerfLogger.OPTIMIZER,"Calcite: Prejoin ordering transformation, Merge Project-Project");
  perfLogger.PerfLogBegin(this.getClass().getName(),PerfLogger.OPTIMIZER);
  basePlan=hepPlan(basePlan,true,mdProvider,null,new HiveFilterProjectTSTransposeRule(Filter.class,HiveRelFactories.HIVE_FILTER_FACTORY,HiveProject.class,HiveRelFactories.HIVE_PROJECT_FACTORY,HiveTableScan.class),HiveProjectFilterPullUpConstantsRule.INSTANCE);
  perfLogger.PerfLogEnd(this.getClass().getName(),PerfLogger.OPTIMIZER,"Calcite: Prejoin ordering transformation, Rerun PPD");
  return basePlan;
}
