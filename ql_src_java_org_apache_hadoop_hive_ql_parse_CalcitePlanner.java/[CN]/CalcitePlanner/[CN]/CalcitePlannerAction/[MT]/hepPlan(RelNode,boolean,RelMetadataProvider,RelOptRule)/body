{
  RelNode optimizedRelNode=basePlan;
  HepProgramBuilder programBuilder=new HepProgramBuilder();
  if (followPlanChanges) {
    programBuilder.addMatchOrder(HepMatchOrder.TOP_DOWN);
    programBuilder=programBuilder.addRuleCollection(ImmutableList.copyOf(rules));
  }
 else {
    for (    RelOptRule r : rules)     programBuilder.addRuleInstance(r);
  }
  HepPlanner planner=new HepPlanner(programBuilder.build());
  List<RelMetadataProvider> list=Lists.newArrayList();
  list.add(mdProvider);
  planner.registerMetadataProviders(list);
  RelMetadataProvider chainedProvider=ChainedRelMetadataProvider.of(list);
  basePlan.getCluster().setMetadataProvider(new CachingRelMetadataProvider(chainedProvider,planner));
  planner.setRoot(basePlan);
  optimizedRelNode=planner.findBestExp();
  return optimizedRelNode;
}
