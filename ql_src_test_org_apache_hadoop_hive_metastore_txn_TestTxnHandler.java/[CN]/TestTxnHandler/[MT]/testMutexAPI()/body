{
  final TxnStore.MutexAPI api=txnHandler.getMutexAPI();
  final AtomicInteger stepTracker=new AtomicInteger(0);
  Thread t1=new Thread("MutexTest1"){
    public void run(){
      try {
        stepTracker.incrementAndGet();
        TxnStore.MutexAPI.LockHandle handle=api.acquireLock(TxnHandler.MUTEX_KEY.HouseKeeper.name());
        Thread.sleep(4000);
        Assert.assertEquals("Thread2 should have started by now but not done work",2,stepTracker.get());
        stepTracker.incrementAndGet();
        handle.releaseLocks();
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex.getMessage(),ex);
      }
    }
  }
;
  t1.setDaemon(true);
  ErrorHandle ueh1=new ErrorHandle();
  t1.setUncaughtExceptionHandler(ueh1);
  Thread t2=new Thread("MutexTest2"){
    public void run(){
      try {
        stepTracker.incrementAndGet();
        TxnStore.MutexAPI.LockHandle handle=api.acquireLock(TxnHandler.MUTEX_KEY.HouseKeeper.name());
        stepTracker.incrementAndGet();
        Assert.assertEquals(4,stepTracker.get());
        handle.releaseLocks();
        stepTracker.incrementAndGet();
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex.getMessage(),ex);
      }
    }
  }
;
  t2.setDaemon(true);
  ErrorHandle ueh2=new ErrorHandle();
  t2.setUncaughtExceptionHandler(ueh2);
  t1.start();
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException ex) {
    LOG.info("Sleep was interrupted");
  }
  t2.start();
  t1.join(6000);
  t2.join(6000);
  if (ueh1.error != null) {
    Assert.assertTrue("Unexpected error from t1: " + StringUtils.stringifyException(ueh1.error),false);
  }
  if (ueh2.error != null) {
    Assert.assertTrue("Unexpected error from t2: " + StringUtils.stringifyException(ueh2.error),false);
  }
  Assert.assertEquals("5 means both threads have completed",5,stepTracker.get());
}
