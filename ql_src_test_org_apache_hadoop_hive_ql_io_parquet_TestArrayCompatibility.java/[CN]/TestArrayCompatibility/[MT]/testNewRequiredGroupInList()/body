{
  Path test=writeDirect("NewRequiredGroupInList",Types.buildMessage().optionalGroup().as(LIST).repeatedGroup().requiredGroup().required(DOUBLE).named("latitude").required(DOUBLE).named("longitude").named("element").named("list").named("locations").named("NewRequiredGroupInList"),new DirectWriter(){
    @Override public void write(    RecordConsumer rc){
      rc.startMessage();
      rc.startField("locations",0);
      rc.startGroup();
      rc.startField("list",0);
      rc.startGroup();
      rc.startField("element",0);
      rc.startGroup();
      rc.startField("latitude",0);
      rc.addDouble(0.0);
      rc.endField("latitude",0);
      rc.startField("longitude",1);
      rc.addDouble(180.0);
      rc.endField("longitude",1);
      rc.endGroup();
      rc.endField("element",0);
      rc.endGroup();
      rc.startGroup();
      rc.startField("element",0);
      rc.startGroup();
      rc.startField("latitude",0);
      rc.addDouble(0.0);
      rc.endField("latitude",0);
      rc.startField("longitude",1);
      rc.addDouble(0.0);
      rc.endField("longitude",1);
      rc.endGroup();
      rc.endField("element",0);
      rc.endGroup();
      rc.endField("list",0);
      rc.endGroup();
      rc.endField("locations",0);
      rc.endMessage();
    }
  }
);
  ObjectArrayWritable expected=record(list(record(new Double(0.0),new Double(180.0)),record(new Double(0.0),new Double(0.0))));
  List<ObjectArrayWritable> records=read(test);
  Assert.assertEquals("Should have only one record",1,records.size());
  assertEquals("Should match expected record",expected,records.get(0));
}
