{
  Path test=writeDirect("UnannotatedListOfGroups",Types.buildMessage().repeatedGroup().required(FLOAT).named("x").required(FLOAT).named("y").named("list_of_points").named("UnannotatedListOfGroups"),new DirectWriter(){
    @Override public void write(    RecordConsumer rc){
      rc.startMessage();
      rc.startField("list_of_points",0);
      rc.startGroup();
      rc.startField("x",0);
      rc.addFloat(1.0f);
      rc.endField("x",0);
      rc.startField("y",1);
      rc.addFloat(1.0f);
      rc.endField("y",1);
      rc.endGroup();
      rc.startGroup();
      rc.startField("x",0);
      rc.addFloat(2.0f);
      rc.endField("x",0);
      rc.startField("y",1);
      rc.addFloat(2.0f);
      rc.endField("y",1);
      rc.endGroup();
      rc.endField("list_of_points",0);
      rc.endMessage();
    }
  }
);
  ArrayWritable expected=list(record(new FloatWritable(1.0f),new FloatWritable(1.0f)),record(new FloatWritable(2.0f),new FloatWritable(2.0f)));
  List<ArrayWritable> records=read(test);
  Assert.assertEquals("Should have only one record",1,records.size());
  assertEquals("Should match expected record",expected,records.get(0));
}
