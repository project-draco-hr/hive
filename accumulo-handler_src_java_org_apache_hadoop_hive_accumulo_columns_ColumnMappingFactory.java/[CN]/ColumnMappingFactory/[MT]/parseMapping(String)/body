{
  int index=0;
  while (true) {
    if (index >= columnSpec.length()) {
      log.error("Cannot parse '" + columnSpec + "' as colon-separated column configuration");
      throw new InvalidColumnMappingException("Columns must be provided as colon-separated family and qualifier pairs");
    }
    index=columnSpec.indexOf(AccumuloHiveConstants.COLON,index);
    if (-1 == index) {
      log.error("Cannot parse '" + columnSpec + "' as colon-separated column configuration");
      throw new InvalidColumnMappingException("Columns must be provided as colon-separated family and qualifier pairs");
    }
    if (index - 1 > 0) {
      char testChar=columnSpec.charAt(index - 1);
      if (AccumuloHiveConstants.ESCAPE == testChar) {
        index++;
        continue;
      }
    }
    break;
  }
  String cf=columnSpec.substring(0,index), cq=columnSpec.substring(index + 1);
  if (-1 != cf.indexOf(AccumuloHiveConstants.ESCAPED_COLON)) {
    cf=cf.replaceAll(AccumuloHiveConstants.ESCAPED_COLON_REGEX,Character.toString(AccumuloHiveConstants.COLON));
  }
  if (-1 != cq.indexOf(AccumuloHiveConstants.ESCAPED_COLON)) {
    cq=cq.replaceAll(AccumuloHiveConstants.ESCAPED_COLON_REGEX,Character.toString(AccumuloHiveConstants.COLON));
  }
  return Maps.immutableEntry(cf,cq);
}
