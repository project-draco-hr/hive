{
  md.reset();
  for (  FieldSchema fs : sd.getCols()) {
    md.update(fs.getName().getBytes(ENCODING));
    md.update(fs.getType().getBytes(ENCODING));
    if (fs.getComment() != null)     md.update(fs.getComment().getBytes(ENCODING));
  }
  if (sd.getInputFormat() != null) {
    md.update(sd.getInputFormat().getBytes(ENCODING));
  }
  if (sd.getOutputFormat() != null) {
    md.update(sd.getOutputFormat().getBytes(ENCODING));
  }
  md.update(sd.isCompressed() ? "true".getBytes(ENCODING) : "false".getBytes(ENCODING));
  md.update(Integer.toString(sd.getNumBuckets()).getBytes(ENCODING));
  if (sd.getSerdeInfo() != null) {
    SerDeInfo serde=sd.getSerdeInfo();
    if (serde.getName() != null) {
      md.update(serde.getName().getBytes(ENCODING));
    }
    if (serde.getSerializationLib() != null) {
      md.update(serde.getSerializationLib().getBytes(ENCODING));
    }
    if (serde.getParameters() != null) {
      SortedMap<String,String> params=new TreeMap<>(serde.getParameters());
      for (      Map.Entry<String,String> param : params.entrySet()) {
        md.update(param.getKey().getBytes(ENCODING));
        md.update(param.getValue().getBytes(ENCODING));
      }
    }
  }
  if (sd.getBucketCols() != null) {
    SortedSet<String> bucketCols=new TreeSet<>(sd.getBucketCols());
    for (    String bucket : bucketCols)     md.update(bucket.getBytes(ENCODING));
  }
  if (sd.getSortCols() != null) {
    SortedSet<Order> orders=new TreeSet<>(sd.getSortCols());
    for (    Order order : orders) {
      md.update(order.getCol().getBytes(ENCODING));
      md.update(Integer.toString(order.getOrder()).getBytes(ENCODING));
    }
  }
  if (sd.getSkewedInfo() != null) {
    SkewedInfo skewed=sd.getSkewedInfo();
    if (skewed.getSkewedColNames() != null) {
      SortedSet<String> colnames=new TreeSet<>(skewed.getSkewedColNames());
      for (      String colname : colnames)       md.update(colname.getBytes(ENCODING));
    }
    if (skewed.getSkewedColValues() != null) {
      SortedSet<String> sortedOuterList=new TreeSet<>();
      for (      List<String> innerList : skewed.getSkewedColValues()) {
        SortedSet<String> sortedInnerList=new TreeSet<>(innerList);
        sortedOuterList.add(StringUtils.join(sortedInnerList,"."));
      }
      for (      String colval : sortedOuterList)       md.update(colval.getBytes(ENCODING));
    }
    if (skewed.getSkewedColValueLocationMaps() != null) {
      SortedMap<String,String> sortedMap=new TreeMap<>();
      for (      Map.Entry<List<String>,String> smap : skewed.getSkewedColValueLocationMaps().entrySet()) {
        SortedSet<String> sortedKey=new TreeSet<>(smap.getKey());
        sortedMap.put(StringUtils.join(sortedKey,"."),smap.getValue());
      }
      for (      Map.Entry<String,String> e : sortedMap.entrySet()) {
        md.update(e.getKey().getBytes(ENCODING));
        md.update(e.getValue().getBytes(ENCODING));
      }
    }
  }
  return md.digest();
}
