{
  HbaseMetastoreProto.StorageDescriptor proto=HbaseMetastoreProto.StorageDescriptor.parseFrom(serialized);
  StorageDescriptor sd=new StorageDescriptor();
  sd.setCols(convertFieldSchemaListFromProto(proto.getColsList()));
  if (proto.hasInputFormat())   sd.setInputFormat(proto.getInputFormat());
  if (proto.hasOutputFormat())   sd.setOutputFormat(proto.getOutputFormat());
  sd.setCompressed(proto.getIsCompressed());
  sd.setNumBuckets(proto.getNumBuckets());
  if (proto.hasSerdeInfo()) {
    SerDeInfo serde=new SerDeInfo();
    serde.setName(proto.getSerdeInfo().getName());
    serde.setSerializationLib(proto.getSerdeInfo().getSerializationLib());
    serde.setParameters(buildParameters(proto.getSerdeInfo().getParameters()));
    sd.setSerdeInfo(serde);
  }
  sd.setBucketCols(new ArrayList<String>(proto.getBucketColsList()));
  List<Order> sortCols=new ArrayList<Order>();
  for (  HbaseMetastoreProto.StorageDescriptor.Order protoOrder : proto.getSortColsList()) {
    sortCols.add(new Order(protoOrder.getColumnName(),protoOrder.getOrder()));
  }
  sd.setSortCols(sortCols);
  if (proto.hasSkewedInfo()) {
    SkewedInfo skewed=new SkewedInfo();
    skewed.setSkewedColNames(new ArrayList<String>(proto.getSkewedInfo().getSkewedColNamesList()));
    for (    HbaseMetastoreProto.StorageDescriptor.SkewedInfo.SkewedColValueList innerList : proto.getSkewedInfo().getSkewedColValuesList()) {
      skewed.addToSkewedColValues(new ArrayList<String>(innerList.getSkewedColValueList()));
    }
    Map<List<String>,String> colMaps=new HashMap<List<String>,String>();
    for (    HbaseMetastoreProto.StorageDescriptor.SkewedInfo.SkewedColValueLocationMap map : proto.getSkewedInfo().getSkewedColValueLocationMapsList()) {
      colMaps.put(new ArrayList<String>(map.getKeyList()),map.getValue());
    }
    skewed.setSkewedColValueLocationMaps(colMaps);
    sd.setSkewedInfo(skewed);
  }
  if (proto.hasStoredAsSubDirectories()) {
    sd.setStoredAsSubDirectories(proto.getStoredAsSubDirectories());
  }
  return sd;
}
