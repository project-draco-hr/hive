{
  long rowsInStripe=stripe.getNumberOfRows();
  int groupsInStripe=(int)((rowsInStripe + rowIndexStride - 1) / rowIndexStride);
  boolean[] result=new boolean[groupsInStripe];
  TruthValue[] leafValues=new TruthValue[sargLeaves.size()];
  boolean hasSelected=false, hasSkipped=false;
  for (int rowGroup=0; rowGroup < result.length; ++rowGroup) {
    for (int pred=0; pred < leafValues.length; ++pred) {
      int columnIx=filterColumns[pred];
      if (columnIx != -1) {
        if (indexes[columnIx] == null) {
          throw new AssertionError("Index is not populated for " + columnIx);
        }
        OrcProto.RowIndexEntry entry=indexes[columnIx].getEntry(rowGroup);
        if (entry == null) {
          throw new AssertionError("RG is not populated for " + columnIx + " rg "+ rowGroup);
        }
        OrcProto.ColumnStatistics stats=entry.getStatistics();
        OrcProto.BloomFilter bf=null;
        if (bloomFilterIndices != null && bloomFilterIndices[columnIx] != null) {
          bf=bloomFilterIndices[columnIx].getBloomFilter(rowGroup);
        }
        if (evolution != null && evolution.isPPDSafeConversion(columnIx)) {
          leafValues[pred]=evaluatePredicateProto(stats,sargLeaves.get(pred),bf);
        }
 else {
          leafValues[pred]=TruthValue.YES_NO_NULL;
        }
        if (LOG.isTraceEnabled()) {
          LOG.trace("Stats = " + stats);
          LOG.trace("Setting " + sargLeaves.get(pred) + " to "+ leafValues[pred]);
        }
      }
 else {
        leafValues[pred]=TruthValue.YES_NO_NULL;
      }
    }
    result[rowGroup]=sarg.evaluate(leafValues).isNeeded();
    hasSelected=hasSelected || result[rowGroup];
    hasSkipped=hasSkipped || (!result[rowGroup]);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Row group " + (rowIndexStride * rowGroup) + " to "+ (rowIndexStride * (rowGroup + 1) - 1)+ " is "+ (result[rowGroup] ? "" : "not ")+ "included.");
    }
  }
  return hasSkipped ? ((hasSelected || !returnNone) ? result : READ_NO_RGS) : READ_ALL_RGS;
}
