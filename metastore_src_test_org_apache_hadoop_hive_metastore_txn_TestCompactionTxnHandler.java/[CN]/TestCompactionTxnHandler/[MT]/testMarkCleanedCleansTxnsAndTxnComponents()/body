{
  long txnid=openTxn();
  LockComponent comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.DB,"mydb");
  comp.setTablename("mytable");
  comp.setOperationType(DataOperationType.INSERT);
  List<LockComponent> components=new ArrayList<LockComponent>(1);
  components.add(comp);
  LockRequest req=new LockRequest(components,"me","localhost");
  req.setTxnid(txnid);
  LockResponse res=txnHandler.lock(req);
  assertTrue(res.getState() == LockState.ACQUIRED);
  txnHandler.abortTxn(new AbortTxnRequest(txnid));
  txnid=openTxn();
  comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.DB,"mydb");
  comp.setTablename("yourtable");
  comp.setOperationType(DataOperationType.DELETE);
  components=new ArrayList<LockComponent>(1);
  components.add(comp);
  req=new LockRequest(components,"me","localhost");
  req.setTxnid(txnid);
  res=txnHandler.lock(req);
  assertTrue(res.getState() == LockState.ACQUIRED);
  txnHandler.abortTxn(new AbortTxnRequest(txnid));
  txnid=openTxn();
  comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.DB,"mydb");
  comp.setTablename("foo");
  comp.setPartitionname("bar");
  comp.setOperationType(DataOperationType.UPDATE);
  components=new ArrayList<LockComponent>(1);
  components.add(comp);
  req=new LockRequest(components,"me","localhost");
  req.setTxnid(txnid);
  res=txnHandler.lock(req);
  assertTrue(res.getState() == LockState.ACQUIRED);
  comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.DB,"mydb");
  comp.setTablename("foo");
  comp.setPartitionname("baz");
  comp.setOperationType(DataOperationType.UPDATE);
  components=new ArrayList<LockComponent>(1);
  components.add(comp);
  req=new LockRequest(components,"me","localhost");
  req.setTxnid(txnid);
  res=txnHandler.lock(req);
  assertTrue(res.getState() == LockState.ACQUIRED);
  txnHandler.abortTxn(new AbortTxnRequest(txnid));
  CompactionInfo ci=new CompactionInfo();
  CompactionRequest rqst=new CompactionRequest("mydb","mytable",CompactionType.MAJOR);
  txnHandler.compact(rqst);
  assertEquals(0,txnHandler.findReadyToClean().size());
  ci=txnHandler.findNextToCompact("fred");
  assertNotNull(ci);
  txnHandler.markCompacted(ci);
  List<CompactionInfo> toClean=txnHandler.findReadyToClean();
  assertEquals(1,toClean.size());
  txnHandler.markCleaned(ci);
  GetOpenTxnsResponse txnList=txnHandler.getOpenTxns();
  assertEquals(3,txnList.getOpen_txnsSize());
  txnHandler.cleanEmptyAbortedTxns();
  txnList=txnHandler.getOpenTxns();
  assertEquals(2,txnList.getOpen_txnsSize());
  rqst=new CompactionRequest("mydb","foo",CompactionType.MAJOR);
  rqst.setPartitionname("bar");
  txnHandler.compact(rqst);
  assertEquals(0,txnHandler.findReadyToClean().size());
  ci=txnHandler.findNextToCompact("fred");
  assertNotNull(ci);
  txnHandler.markCompacted(ci);
  toClean=txnHandler.findReadyToClean();
  assertEquals(1,toClean.size());
  txnHandler.markCleaned(ci);
  txnHandler.openTxns(new OpenTxnRequest(1,"me","localhost"));
  txnHandler.cleanEmptyAbortedTxns();
  txnList=txnHandler.getOpenTxns();
  assertEquals(3,txnList.getOpen_txnsSize());
}
