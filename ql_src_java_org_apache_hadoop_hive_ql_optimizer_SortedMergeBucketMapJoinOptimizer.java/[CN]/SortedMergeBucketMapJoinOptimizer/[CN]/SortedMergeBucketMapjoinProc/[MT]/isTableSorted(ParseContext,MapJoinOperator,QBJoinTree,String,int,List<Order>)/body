{
  Map<String,Operator<? extends Serializable>> topOps=this.pGraphContext.getTopOps();
  Map<TableScanOperator,Table> topToTable=this.pGraphContext.getTopToTable();
  TableScanOperator tso=(TableScanOperator)topOps.get(alias);
  if (tso == null) {
    return false;
  }
  if (pos != op.getConf().getPosBigTable()) {
    for (    List<String> files : op.getConf().getAliasBucketFileNameMapping().get(alias).values()) {
      if (files != null && files.size() > 1) {
        return false;
      }
    }
  }
  List<ExprNodeDesc> keys=op.getConf().getKeys().get((byte)pos);
  List<String> joinCols=new ArrayList<String>();
  List<ExprNodeDesc> joinKeys=new ArrayList<ExprNodeDesc>();
  joinKeys.addAll(keys);
  while (joinKeys.size() > 0) {
    ExprNodeDesc node=joinKeys.remove(0);
    if (node instanceof ExprNodeColumnDesc) {
      joinCols.addAll(node.getCols());
    }
 else     if (node instanceof ExprNodeGenericFuncDesc) {
      ExprNodeGenericFuncDesc udfNode=((ExprNodeGenericFuncDesc)node);
      GenericUDF udf=udfNode.getGenericUDF();
      if (!FunctionRegistry.isDeterministic(udf)) {
        return false;
      }
      joinKeys.addAll(0,udfNode.getChildExprs());
    }
  }
  Table tbl=topToTable.get(tso);
  if (tbl.isPartitioned()) {
    PrunedPartitionList prunedParts=null;
    try {
      prunedParts=pGraphContext.getOpToPartList().get(tso);
      if (prunedParts == null) {
        prunedParts=PartitionPruner.prune(tbl,pGraphContext.getOpToPartPruner().get(tso),pGraphContext.getConf(),alias,pGraphContext.getPrunedPartitions());
        pGraphContext.getOpToPartList().put(tso,prunedParts);
      }
    }
 catch (    HiveException e) {
      LOG.error(org.apache.hadoop.util.StringUtils.stringifyException(e));
      throw new SemanticException(e.getMessage(),e);
    }
    List<Partition> partitions=prunedParts.getNotDeniedPartns();
    if ((pos == 0) && (partitions != null) && (!partitions.isEmpty())) {
      Partition firstPartition=partitions.get(0);
      sortColumnsFirstTable.addAll(firstPartition.getSortCols());
    }
    for (    Partition partition : prunedParts.getNotDeniedPartns()) {
      if (!checkSortColsAndJoinCols(partition.getSortCols(),joinCols,sortColumnsFirstTable)) {
        return false;
      }
    }
    return true;
  }
  if (pos == 0) {
    sortColumnsFirstTable.addAll(tbl.getSortCols());
  }
  return checkSortColsAndJoinCols(tbl.getSortCols(),joinCols,sortColumnsFirstTable);
}
