{
  String user;
  Map<String,String> ldapProperties=new HashMap<String,String>();
  ldapProperties.put("hive.server2.authentication.ldap.userDNPattern","uid=%s,ou=People,dc=example,dc=com");
  ldapProperties.put("hive.server2.authentication.ldap.groupDNPattern","uid=%s,ou=Groups,dc=example,dc=com");
  ldapProperties.put("hive.server2.authentication.ldap.groupFilter","group1");
  initLdapAtn(ldapProperties);
  user=USER2.getDN();
  try {
    ldapProvider.Authenticate(user,USER2.getPassword());
    Assert.fail("testGroupFilterNegative: Authentication succeeded for " + user + ",user expected to fail groupfilter");
  }
 catch (  AuthenticationException e) {
    assertTrue("testGroupFilterNegative: Authentication failed for " + user + " as expected",true);
  }
  ldapProperties=new HashMap<String,String>();
  ldapProperties.put("hive.server2.authentication.ldap.userDNPattern","uid=%s,ou=People,dc=example,dc=com");
  ldapProperties.put("hive.server2.authentication.ldap.groupDNPattern","uid=%s,ou=Groups,dc=example,dc=com");
  ldapProperties.put("hive.server2.authentication.ldap.groupFilter","group2");
  initLdapAtn(ldapProperties);
  user=USER1.getDN();
  try {
    ldapProvider.Authenticate(user,USER1.getPassword());
    Assert.fail("testGroupFilterNegative: Authentication succeeded for " + user + ",user expected to fail groupfilter");
  }
 catch (  AuthenticationException e) {
    assertTrue("testGroupFilterNegative: Authentication failed for " + user + " as expected",true);
  }
}
