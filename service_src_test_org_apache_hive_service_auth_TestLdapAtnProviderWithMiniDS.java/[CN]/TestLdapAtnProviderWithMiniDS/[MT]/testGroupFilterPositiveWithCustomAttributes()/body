{
  String user;
  Map<String,String> ldapProperties=new HashMap<String,String>();
  ldapProperties.put("hive.server2.authentication.ldap.userDNPattern","cn=%s,ou=People,dc=example,dc=com");
  ldapProperties.put("hive.server2.authentication.ldap.groupDNPattern","cn=%s,ou=Groups,dc=example,dc=com");
  ldapProperties.put("hive.server2.authentication.ldap.groupFilter","group4");
  ldapProperties.put("hive.server2.authentication.ldap.guidKey","cn");
  ldapProperties.put("hive.server2.authentication.ldap.groupMembershipKey","uniqueMember");
  ldapProperties.put("hive.server2.authentication.ldap.groupClassKey","groupOfUniqueNames");
  initLdapAtn(ldapProperties);
  user=USER4.getDN();
  try {
    ldapProvider.Authenticate(user,USER4.getPassword());
    assertTrue("testGroupFilterPositive: Authentication succeeded for " + user + " as expected",true);
    user=USER4.getUID();
    ldapProvider.Authenticate(user,USER4.getPassword());
    assertTrue("testGroupFilterPositive: Authentication succeeded for " + user + " as expected",true);
  }
 catch (  AuthenticationException e) {
    Assert.fail("testGroupFilterPositive: Authentication failed for " + user + ",user expected to pass groupfilter");
  }
}
