{
  String user;
  Map<String,String> ldapProperties=new HashMap<String,String>();
  ldapProperties.put("hive.server2.authentication.ldap.baseDN","ou=People,dc=example,dc=com");
  ldapProperties.put("hive.server2.authentication.ldap.userDNPattern","cn=%s,ou=People,dc=example,dc=com:uid=%s,ou=People,dc=example,dc=com");
  ldapProperties.put("hive.server2.authentication.ldap.groupDNPattern","cn=%s,ou=People,dc=example,dc=com");
  ldapProperties.put("hive.server2.authentication.ldap.customLDAPQuery","(&(objectClass=person)(|(uid=" + USER1.getUID() + ")(uid="+ USER4.getUID()+ ")))");
  initLdapAtn(ldapProperties);
  user=USER1.getDN();
  try {
    ldapProvider.Authenticate(user,USER1.getPassword());
    assertTrue("testCustomQueryPositive: Authentication succeeded for " + user + " as expected",true);
    user=USER1.getUID();
    ldapProvider.Authenticate(user,USER1.getPassword());
    assertTrue("testCustomQueryPositive: Authentication succeeded for " + user + " as expected",true);
    user=USER4.getDN();
    ldapProvider.Authenticate(user,USER4.getPassword());
    assertTrue("testCustomQueryPositive: Authentication succeeded for " + user + " as expected",true);
  }
 catch (  AuthenticationException e) {
    Assert.fail("testCustomQueryPositive: Authentication failed for " + user + ",user expected to pass custom LDAP Query");
  }
}
