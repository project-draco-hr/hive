{
  String user;
  Map<String,String> ldapProperties=new HashMap<String,String>();
  ldapProperties.put("hive.server2.authentication.ldap.userDNPattern","uid=%s,ou=People,dc=example,dc=com");
  ldapProperties.put("hive.server2.authentication.ldap.userFilter",USER2.getUID());
  initLdapAtn(ldapProperties);
  user=USER2.getDN();
  try {
    ldapProvider.Authenticate(user,USER2.getPassword());
    assertTrue("testUserFilterPositive: Authentication succeeded for " + user + " as expected",true);
    user=USER2.getUID();
    ldapProvider.Authenticate(user,USER2.getPassword());
    assertTrue("testUserFilterPositive: Authentication succeeded for " + user + " as expected",true);
  }
 catch (  AuthenticationException e) {
    Assert.fail("testUserFilterPositive: Authentication failed for " + user + ",user expected to pass userfilter");
  }
  ldapProperties=new HashMap<String,String>();
  ldapProperties.put("hive.server2.authentication.ldap.userDNPattern","uid=%s,ou=People,dc=example,dc=com");
  ldapProperties.put("hive.server2.authentication.ldap.userFilter",USER1.getUID());
  initLdapAtn(ldapProperties);
  try {
    user=USER1.getDN();
    ldapProvider.Authenticate(user,USER1.getPassword());
    assertTrue("testUserFilterPositive: Authentication succeeded for " + user + " as expected",true);
    user=USER1.getUID();
    ldapProvider.Authenticate(user,USER1.getPassword());
    assertTrue("testUserFilterPositive: Authentication succeeded for " + user + " as expected",true);
  }
 catch (  AuthenticationException e) {
    Assert.fail("testUserFilterPositive: Authentication failed for " + user + ",user expected to pass userfilter");
  }
  ldapProperties=new HashMap<String,String>();
  ldapProperties.put("hive.server2.authentication.ldap.userDNPattern","uid=%s,ou=People,dc=example,dc=com");
  ldapProperties.put("hive.server2.authentication.ldap.userFilter",USER2.getUID() + "," + USER1.getUID());
  initLdapAtn(ldapProperties);
  try {
    user=USER1.getDN();
    ldapProvider.Authenticate(user,USER1.getPassword());
    assertTrue("testUserFilterPositive: Authentication succeeded for " + user + " as expected",true);
    user=USER2.getUID();
    ldapProvider.Authenticate(user,USER2.getPassword());
    assertTrue("testUserFilterPositive: Authentication succeeded for " + user + " as expected",true);
  }
 catch (  AuthenticationException e) {
    Assert.fail("testUserFilterPositive: Authentication failed for user, user is expected to pass userfilter");
  }
}
