{
  Object val=null;
  int type=0;
  SqlTypeName sqlType=literal.getType().getSqlTypeName();
switch (sqlType) {
case BINARY:
    ByteString bs=(ByteString)literal.getValue();
  val=bs.byteAt(0);
type=HiveParser.BigintLiteral;
break;
case TINYINT:
val=literal.getValue3();
type=HiveParser.TinyintLiteral;
break;
case SMALLINT:
val=literal.getValue3();
type=HiveParser.SmallintLiteral;
break;
case INTEGER:
case BIGINT:
val=literal.getValue3();
type=HiveParser.BigintLiteral;
break;
case DOUBLE:
val=literal.getValue3() + "D";
type=HiveParser.Number;
break;
case DECIMAL:
val=literal.getValue3() + "BD";
type=HiveParser.DecimalLiteral;
break;
case FLOAT:
case REAL:
val=literal.getValue3();
type=HiveParser.Number;
break;
case VARCHAR:
case CHAR:
val=literal.getValue3();
String escapedVal=BaseSemanticAnalyzer.escapeSQLString(String.valueOf(val));
type=HiveParser.StringLiteral;
val="'" + escapedVal + "'";
break;
case BOOLEAN:
val=literal.getValue3();
type=((Boolean)val).booleanValue() ? HiveParser.KW_TRUE : HiveParser.KW_FALSE;
break;
case DATE:
{
val=literal.getValue();
type=HiveParser.TOK_DATELITERAL;
DateFormat df=new SimpleDateFormat("yyyy-MM-dd");
val=df.format(((Calendar)val).getTime());
val="'" + val + "'";
}
break;
case TIME:
case TIMESTAMP:
{
val=literal.getValue();
type=HiveParser.TOK_TIMESTAMP;
DateFormat df=new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
val=df.format(((Calendar)val).getTime());
val="'" + val + "'";
}
break;
case NULL:
type=HiveParser.TOK_NULL;
break;
default :
throw new RuntimeException("Unsupported Type: " + sqlType);
}
return (ASTNode)ParseDriver.adaptor.create(type,String.valueOf(val));
}
