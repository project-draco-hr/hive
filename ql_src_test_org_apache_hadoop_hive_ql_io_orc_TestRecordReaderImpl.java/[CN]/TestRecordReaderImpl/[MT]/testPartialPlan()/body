{
  List<DiskRange> result;
  List<OrcProto.Stream> streams=new ArrayList<OrcProto.Stream>();
  streams.add(OrcProto.Stream.newBuilder().setKind(OrcProto.Stream.Kind.PRESENT).setColumn(1).setLength(1000).build());
  streams.add(OrcProto.Stream.newBuilder().setKind(OrcProto.Stream.Kind.DATA).setColumn(1).setLength(99000).build());
  streams.add(OrcProto.Stream.newBuilder().setKind(OrcProto.Stream.Kind.PRESENT).setColumn(2).setLength(2000).build());
  streams.add(OrcProto.Stream.newBuilder().setKind(OrcProto.Stream.Kind.DATA).setColumn(2).setLength(98000).build());
  boolean[] columns=new boolean[]{true,true,false};
  boolean[] rowGroups=new boolean[]{true,true,false,false,true,false};
  OrcProto.RowIndex[] indexes=new OrcProto.RowIndex[columns.length];
  indexes[1]=OrcProto.RowIndex.newBuilder().addEntry(OrcProto.RowIndexEntry.newBuilder().addPositions(0).addPositions(-1).addPositions(-1).addPositions(0).build()).addEntry(OrcProto.RowIndexEntry.newBuilder().addPositions(100).addPositions(-1).addPositions(-1).addPositions(10000).build()).addEntry(OrcProto.RowIndexEntry.newBuilder().addPositions(200).addPositions(-1).addPositions(-1).addPositions(20000).build()).addEntry(OrcProto.RowIndexEntry.newBuilder().addPositions(300).addPositions(-1).addPositions(-1).addPositions(30000).build()).addEntry(OrcProto.RowIndexEntry.newBuilder().addPositions(400).addPositions(-1).addPositions(-1).addPositions(40000).build()).addEntry(OrcProto.RowIndexEntry.newBuilder().addPositions(500).addPositions(-1).addPositions(-1).addPositions(50000).build()).build();
  List<OrcProto.ColumnEncoding> encodings=new ArrayList<OrcProto.ColumnEncoding>();
  encodings.add(OrcProto.ColumnEncoding.newBuilder().setKind(OrcProto.ColumnEncoding.Kind.DIRECT).build());
  encodings.add(OrcProto.ColumnEncoding.newBuilder().setKind(OrcProto.ColumnEncoding.Kind.DIRECT).build());
  encodings.add(OrcProto.ColumnEncoding.newBuilder().setKind(OrcProto.ColumnEncoding.Kind.DIRECT).build());
  List<OrcProto.Type> types=new ArrayList<OrcProto.Type>();
  types.add(OrcProto.Type.newBuilder().setKind(OrcProto.Type.Kind.STRUCT).addSubtypes(1).addSubtypes(2).addFieldNames("x").addFieldNames("y").build());
  types.add(OrcProto.Type.newBuilder().setKind(OrcProto.Type.Kind.INT).build());
  types.add(OrcProto.Type.newBuilder().setKind(OrcProto.Type.Kind.INT).build());
  result=RecordReaderImpl.planReadPartialDataStreams(streams,indexes,columns,rowGroups,false,encodings,types,32768);
  assertThat(result,is(diskRanges(0,1000,100,1000,400,1000,1000,11000 + RecordReaderImpl.WORST_UNCOMPRESSED_SLOP,11000,21000 + RecordReaderImpl.WORST_UNCOMPRESSED_SLOP,41000,51000 + RecordReaderImpl.WORST_UNCOMPRESSED_SLOP)));
  rowGroups=new boolean[]{false,false,false,false,false,false};
  result=RecordReaderImpl.planReadPartialDataStreams(streams,indexes,columns,rowGroups,false,encodings,types,32768);
  assertThat(result,is(diskRanges()));
  rowGroups=null;
  columns=new boolean[]{true,false,true};
  result=RecordReaderImpl.planReadPartialDataStreams(streams,indexes,columns,null,false,encodings,types,32768);
  assertThat(result,is(diskRanges(100000,102000,102000,200000)));
  rowGroups=new boolean[]{false,true,false,false,false,false};
  indexes[2]=indexes[1];
  indexes[1]=null;
  result=RecordReaderImpl.planReadPartialDataStreams(streams,indexes,columns,rowGroups,false,encodings,types,32768);
  assertThat(result,is(diskRanges(100100,102000,112000,122000 + RecordReaderImpl.WORST_UNCOMPRESSED_SLOP)));
  rowGroups=new boolean[]{false,false,false,false,false,true};
  indexes[1]=indexes[2];
  columns=new boolean[]{true,true,true};
  result=RecordReaderImpl.planReadPartialDataStreams(streams,indexes,columns,rowGroups,false,encodings,types,32768);
  assertThat(result,is(diskRanges(500,1000,51000,100000,100500,102000,152000,200000)));
}
