{
  if (childExpressions != null) {
    super.evaluateChildren(batch);
  }
  DoubleColumnVector inputColVector1=(DoubleColumnVector)batch.cols[colNum1];
  DoubleColumnVector inputColVector2=(DoubleColumnVector)batch.cols[colNum2];
  DoubleColumnVector outputColVector=(DoubleColumnVector)batch.cols[outputColumn];
  int[] sel=batch.selected;
  int n=batch.size;
  double[] vector1=inputColVector1.vector;
  double[] vector2=inputColVector2.vector;
  double[] outputVector=outputColVector.vector;
  if (n == 0) {
    return;
  }
  outputColVector.isRepeating=false;
  if (inputColVector1.noNulls && !inputColVector2.noNulls) {
    outputColVector.noNulls=false;
    if (inputColVector2.isRepeating) {
      outputColVector.isNull[0]=true;
      outputColVector.isRepeating=true;
      return;
    }
 else {
      if (batch.selectedInUse) {
        for (int j=0; j != n; j++) {
          int i=sel[j];
          outputColVector.isNull[i]=inputColVector2.isNull[i];
        }
      }
 else {
        for (int i=0; i != n; i++) {
          outputColVector.isNull[i]=inputColVector2.isNull[i];
        }
      }
    }
  }
 else   if (!inputColVector1.noNulls && inputColVector2.noNulls) {
    outputColVector.noNulls=false;
    if (inputColVector1.isRepeating) {
      outputColVector.isRepeating=true;
      outputColVector.isNull[0]=true;
      return;
    }
 else {
      if (batch.selectedInUse) {
        for (int j=0; j != n; j++) {
          int i=sel[j];
          outputColVector.isNull[i]=inputColVector1.isNull[i];
        }
      }
 else {
        for (int i=0; i != n; i++) {
          outputColVector.isNull[i]=inputColVector1.isNull[i];
        }
      }
    }
  }
 else   if (!inputColVector1.noNulls && !inputColVector2.noNulls) {
    outputColVector.noNulls=false;
    if (inputColVector1.isRepeating || inputColVector2.isRepeating) {
      outputColVector.isRepeating=true;
      outputColVector.isNull[0]=true;
      return;
    }
 else {
      if (batch.selectedInUse) {
        for (int j=0; j != n; j++) {
          int i=sel[j];
          outputColVector.isNull[i]=inputColVector1.isNull[i] || inputColVector2.isNull[i];
        }
      }
 else {
        for (int i=0; i != n; i++) {
          outputColVector.isNull[i]=inputColVector1.isNull[i] || inputColVector2.isNull[i];
        }
      }
    }
  }
  if (inputColVector1.isRepeating && inputColVector2.isRepeating) {
    outputVector[0]=vector1[0] * vector2[0];
    outputColVector.isRepeating=true;
  }
 else   if (inputColVector1.isRepeating) {
    if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        outputVector[i]=vector1[0] * vector2[i];
      }
    }
 else {
      for (int i=0; i != n; i++) {
        outputVector[i]=vector1[0] * vector2[i];
      }
    }
  }
 else   if (inputColVector2.isRepeating) {
    if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        outputVector[i]=vector1[i] * vector2[0];
      }
    }
 else {
      for (int i=0; i != n; i++) {
        outputVector[i]=vector1[i] * vector2[0];
      }
    }
  }
 else {
    if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        outputVector[i]=vector1[i] * vector2[i];
      }
    }
 else {
      for (int i=0; i != n; i++) {
        outputVector[i]=vector1[i] * vector2[i];
      }
    }
  }
}
