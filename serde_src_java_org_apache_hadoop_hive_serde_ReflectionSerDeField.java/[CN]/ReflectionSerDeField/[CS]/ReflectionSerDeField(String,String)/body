{
  try {
    _parentClass=Class.forName(className);
    Field[] allFields=cacheFields.get(className);
    if (allFields == null) {
      allFields=_parentClass.getDeclaredFields();
      cacheFields.put(className,allFields);
    }
    boolean found=false;
    for (    Field f : allFields) {
      if (f.getName().equalsIgnoreCase(fieldName)) {
        _field=f;
        found=true;
        break;
      }
    }
    if (!found)     throw new SerDeException("Illegal class or member:" + className + "."+ fieldName);
    _isList=java.util.List.class.isAssignableFrom(_field.getType());
    _isMap=java.util.Map.class.isAssignableFrom(_field.getType());
    _class=_field.getType();
    if (_isList || _isMap) {
      ParameterizedType ptype=(ParameterizedType)_field.getGenericType();
      Type[] targs=ptype.getActualTypeArguments();
      if (_isList) {
        _valueClass=((Class)targs[0]);
      }
 else {
        _keyClass=((Class)targs[0]);
        _valueClass=((Class)targs[1]);
      }
      _isClassPrimitive=false;
    }
 else {
      _isClassPrimitive=isClassPrimitive(_class);
    }
  }
 catch (  Exception e) {
    throw new SerDeException("Illegal class or member:" + className + "."+ fieldName+ ":"+ e.getMessage(),e);
  }
}
