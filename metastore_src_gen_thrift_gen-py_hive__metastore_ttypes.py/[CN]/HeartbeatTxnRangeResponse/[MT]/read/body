def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.SET):
                self.aborted = set()
                (_etype379, _size376) = iprot.readSetBegin()
                for _i380 in xrange(_size376):
                    _elem381 = iprot.readI64()
                    self.aborted.add(_elem381)
                iprot.readSetEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.SET):
                self.nosuch = set()
                (_etype385, _size382) = iprot.readSetBegin()
                for _i386 in xrange(_size382):
                    _elem387 = iprot.readI64()
                    self.nosuch.add(_elem387)
                iprot.readSetEnd()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
