def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.LIST):
                self.cols = []
                (_etype141, _size138) = iprot.readListBegin()
                for _i142 in xrange(_size138):
                    _elem143 = FieldSchema()
                    _elem143.read(iprot)
                    self.cols.append(_elem143)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.STRING):
                self.location = iprot.readString()
            else:
                iprot.skip(ftype)
        elif (fid == 3):
            if (ftype == TType.STRING):
                self.inputFormat = iprot.readString()
            else:
                iprot.skip(ftype)
        elif (fid == 4):
            if (ftype == TType.STRING):
                self.outputFormat = iprot.readString()
            else:
                iprot.skip(ftype)
        elif (fid == 5):
            if (ftype == TType.BOOL):
                self.compressed = iprot.readBool()
            else:
                iprot.skip(ftype)
        elif (fid == 6):
            if (ftype == TType.I32):
                self.numBuckets = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 7):
            if (ftype == TType.STRUCT):
                self.serdeInfo = SerDeInfo()
                self.serdeInfo.read(iprot)
            else:
                iprot.skip(ftype)
        elif (fid == 8):
            if (ftype == TType.LIST):
                self.bucketCols = []
                (_etype147, _size144) = iprot.readListBegin()
                for _i148 in xrange(_size144):
                    _elem149 = iprot.readString()
                    self.bucketCols.append(_elem149)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 9):
            if (ftype == TType.LIST):
                self.sortCols = []
                (_etype153, _size150) = iprot.readListBegin()
                for _i154 in xrange(_size150):
                    _elem155 = Order()
                    _elem155.read(iprot)
                    self.sortCols.append(_elem155)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 10):
            if (ftype == TType.MAP):
                self.parameters = {}
                (_ktype157, _vtype158, _size156) = iprot.readMapBegin()
                for _i160 in xrange(_size156):
                    _key161 = iprot.readString()
                    _val162 = iprot.readString()
                    self.parameters[_key161] = _val162
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 11):
            if (ftype == TType.STRUCT):
                self.skewedInfo = SkewedInfo()
                self.skewedInfo.read(iprot)
            else:
                iprot.skip(ftype)
        elif (fid == 12):
            if (ftype == TType.BOOL):
                self.storedAsSubDirectories = iprot.readBool()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
