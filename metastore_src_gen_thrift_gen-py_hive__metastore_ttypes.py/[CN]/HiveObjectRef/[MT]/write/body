def write(self, oprot):
    if ((oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and (self.thrift_spec is not None) and (fastbinary is not None)):
        oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
        return
    oprot.writeStructBegin('HiveObjectRef')
    if (self.objectType != None):
        oprot.writeFieldBegin('objectType', TType.I32, 1)
        oprot.writeI32(self.objectType)
        oprot.writeFieldEnd()
    if (self.dbName != None):
        oprot.writeFieldBegin('dbName', TType.STRING, 2)
        oprot.writeString(self.dbName)
        oprot.writeFieldEnd()
    if (self.objectName != None):
        oprot.writeFieldBegin('objectName', TType.STRING, 3)
        oprot.writeString(self.objectName)
        oprot.writeFieldEnd()
    if (self.partValues != None):
        oprot.writeFieldBegin('partValues', TType.LIST, 4)
        oprot.writeListBegin(TType.STRING, len(self.partValues))
        for iter13 in self.partValues:
            oprot.writeString(iter13)
        oprot.writeListEnd()
        oprot.writeFieldEnd()
    if (self.columnName != None):
        oprot.writeFieldBegin('columnName', TType.STRING, 5)
        oprot.writeString(self.columnName)
        oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

    def validate(self):
        return
