def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.LIST):
                self.fieldSchemas = []
                (_etype219, _size216) = iprot.readListBegin()
                for _i220 in xrange(_size216):
                    _elem221 = FieldSchema()
                    _elem221.read(iprot)
                    self.fieldSchemas.append(_elem221)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.MAP):
                self.properties = {}
                (_ktype223, _vtype224, _size222) = iprot.readMapBegin()
                for _i226 in xrange(_size222):
                    _key227 = iprot.readString()
                    _val228 = iprot.readString()
                    self.properties[_key227] = _val228
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
