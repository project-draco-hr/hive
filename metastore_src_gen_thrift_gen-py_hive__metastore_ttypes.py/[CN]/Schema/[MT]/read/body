def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.LIST):
                self.fieldSchemas = []
                (_etype168, _size165) = iprot.readListBegin()
                for _i169 in xrange(_size165):
                    _elem170 = FieldSchema()
                    _elem170.read(iprot)
                    self.fieldSchemas.append(_elem170)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.MAP):
                self.properties = {}
                (_ktype172, _vtype173, _size171) = iprot.readMapBegin()
                for _i175 in xrange(_size171):
                    _key176 = iprot.readString()
                    _val177 = iprot.readString()
                    self.properties[_key176] = _val177
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
