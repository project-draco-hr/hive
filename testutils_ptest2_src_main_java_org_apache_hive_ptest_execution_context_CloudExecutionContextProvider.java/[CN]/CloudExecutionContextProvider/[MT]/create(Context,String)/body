{
  String dataDir=Preconditions.checkNotNull(context.getString(DATA_DIR),DATA_DIR + " is required");
  String apiKey=Preconditions.checkNotNull(context.getString(API_KEY),API_KEY + " is required");
  String accessKey=Preconditions.checkNotNull(context.getString(ACCESS_KEY),ACCESS_KEY + " is required");
  int maxHostsPerCreateRequest=context.getInteger(MAX_HOSTS_PER_CREATE_REQUEST,2);
  Integer numHosts=context.getInteger(NUM_HOSTS,8);
  Preconditions.checkArgument(numHosts > 0,NUM_HOSTS + " must be greater than zero");
  String groupName=context.getString(GROUP_NAME,"hive-ptest-slaves");
  String imageId=Preconditions.checkNotNull(context.getString(IMAGE_ID),IMAGE_ID + " is required");
  String keyPair=Preconditions.checkNotNull(context.getString(KEY_PAIR),KEY_PAIR + " is required");
  String securityGroup=Preconditions.checkNotNull(context.getString(SECURITY_GROUP),SECURITY_GROUP + " is required");
  Float maxBid=context.getFloat(MAX_BID);
  Preconditions.checkArgument(maxBid == null || maxBid > 0,MAX_BID + " must be null or greater than zero");
  String privateKey=Preconditions.checkNotNull(context.getString(PRIVATE_KEY),PRIVATE_KEY + " is required");
  String user=context.getString(USERNAME,"hiveptest");
  String[] localDirs=Iterables.toArray(Splitter.on(",").trimResults().split(context.getString(SLAVE_LOCAL_DIRECTORIES,"/home/hiveptest/")),String.class);
  Integer numThreads=context.getInteger(NUM_THREADS,3);
  String instanceType=context.getString(INSTANCE_TYPE,"c1.xlarge");
  CloudComputeService cloudComputeService=new CloudComputeService(apiKey,accessKey,instanceType,groupName,imageId,keyPair,securityGroup,maxBid);
  CloudExecutionContextProvider service=new CloudExecutionContextProvider(dataDir,numHosts,cloudComputeService,new SSHCommandExecutor(LOG),workingDirectory,privateKey,user,localDirs,numThreads,60,maxHostsPerCreateRequest);
  return service;
}
