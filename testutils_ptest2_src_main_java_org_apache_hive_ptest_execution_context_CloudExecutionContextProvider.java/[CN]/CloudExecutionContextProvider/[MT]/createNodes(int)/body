{
  Set<NodeMetadata> result=Sets.newHashSet();
  int attempts=0;
  int numRequired=numHosts;
  try {
    TimeUnit.SECONDS.sleep(mRetrySleepInterval);
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
  }
  do {
    boolean error=false;
    LOG.info("Attempting to create " + numRequired + " nodes");
    try {
      result.addAll(mCloudComputeService.createNodes(Math.min(2,numRequired)));
    }
 catch (    RunNodesException e) {
      error=true;
      LOG.warn("Error creating nodes",e);
      terminateInternal(e.getNodeErrors().keySet());
      result.addAll(e.getSuccessfulNodes());
    }
    result=verifyHosts(result);
    LOG.info("Successfully created " + result.size() + " nodes");
    numRequired=numHosts - result.size();
    if (numRequired > 0) {
      long sleepTime=mRetrySleepInterval;
      if (error) {
        sleepTime*=++attempts;
      }
      LOG.info("Pausing creation process for " + sleepTime + " seconds");
      try {
        TimeUnit.SECONDS.sleep(sleepTime);
      }
 catch (      InterruptedException e) {
        throw new CreateHostsFailedException("Interrupted while trying to create hosts",e);
      }
    }
  }
 while (numRequired > 0);
  Preconditions.checkState(result.size() >= numHosts,"Results should always be >= numHosts " + numHosts + " => "+ result.size());
  return result;
}
