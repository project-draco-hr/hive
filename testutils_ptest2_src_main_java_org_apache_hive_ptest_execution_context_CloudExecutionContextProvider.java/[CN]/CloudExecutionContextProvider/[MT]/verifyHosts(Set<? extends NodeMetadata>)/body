{
  final Set<NodeMetadata> result=Collections.synchronizedSet(new HashSet<NodeMetadata>());
  if (!hosts.isEmpty()) {
    persistHostnamesToLog(hosts);
    ExecutorService executorService=Executors.newFixedThreadPool(Math.min(hosts.size(),25));
    try {
      for (      final NodeMetadata node : hosts) {
        executorService.submit(new Runnable(){
          @Override public void run(){
            String ip=publicIpOrHostname(node);
            SSHCommand command=new SSHCommand(mSSHCommandExecutor,mPrivateKey,mUser,ip,0,"pkill -f java",true);
            mSSHCommandExecutor.execute(command);
            if (command.getExitCode() == Constants.EXIT_CODE_UNKNOWN || command.getException() != null) {
              LOG.error("Node " + node + " is bad on startup",command.getException());
              terminateInternal(node);
            }
 else {
              result.add(node);
            }
          }
        }
);
      }
      executorService.shutdown();
      if (!executorService.awaitTermination(10,TimeUnit.MINUTES)) {
        LOG.error("Verify command still executing on a host after 10 minutes");
      }
    }
 catch (    InterruptedException e) {
      terminateInternal(result);
      throw new CreateHostsFailedException("Interrupted while trying to create hosts",e);
    }
 finally {
      if (!executorService.isShutdown()) {
        executorService.shutdownNow();
      }
    }
  }
  return result;
}
