{
  assert(argTypeInfos.size() == 2);
  List<TypeInfo> pTypeInfos=null;
  List<TypeInfo> modArgTypeInfos=new ArrayList<TypeInfo>();
  if (argTypeInfos.get(0).equals(TypeInfoFactory.stringTypeInfo) || argTypeInfos.get(1).equals(TypeInfoFactory.stringTypeInfo)) {
    modArgTypeInfos.add(TypeInfoFactory.doubleTypeInfo);
    modArgTypeInfos.add(TypeInfoFactory.doubleTypeInfo);
  }
 else {
    for (int i=0; i < 2; i++) {
      if (argTypeInfos.get(i).equals(TypeInfoFactory.voidTypeInfo)) {
        modArgTypeInfos.add(TypeInfoFactory.byteTypeInfo);
      }
 else {
        modArgTypeInfos.add(argTypeInfos.get(i));
      }
    }
  }
  TypeInfo commonType=FunctionRegistry.getCommonClass(modArgTypeInfos.get(0),modArgTypeInfos.get(1));
  if (commonType == null) {
    throw new UDFArgumentException("Unable to find a common class between" + "types " + modArgTypeInfos.get(0).getTypeName() + " and "+ modArgTypeInfos.get(1).getTypeName());
  }
  pTypeInfos=new ArrayList<TypeInfo>();
  pTypeInfos.add(commonType);
  pTypeInfos.add(commonType);
  Method udfMethod=null;
  for (  Method m : Arrays.asList(udfClass.getMethods())) {
    if (m.getName().equals("evaluate")) {
      List<TypeInfo> argumentTypeInfos=TypeInfoUtils.getParameterTypeInfos(m,pTypeInfos.size());
      if (argumentTypeInfos == null) {
        continue;
      }
      boolean match=(argumentTypeInfos.size() == pTypeInfos.size());
      for (int i=0; i < pTypeInfos.size() && match; i++) {
        TypeInfo accepted=argumentTypeInfos.get(i);
        if (!accepted.equals(pTypeInfos.get(i))) {
          match=false;
        }
      }
      if (match) {
        if (udfMethod != null) {
          throw new AmbiguousMethodException(udfClass,argTypeInfos);
        }
 else {
          udfMethod=m;
        }
      }
    }
  }
  return udfMethod;
}
