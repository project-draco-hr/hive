{
  if (argumentAccepted.equals(argumentPassed) || TypeInfoUtils.doPrimitiveCategoriesMatch(argumentPassed,argumentAccepted)) {
    return 0;
  }
  if (argumentPassed.equals(TypeInfoFactory.voidTypeInfo)) {
    return 0;
  }
  if (argumentPassed.getCategory().equals(Category.LIST) && argumentAccepted.getCategory().equals(Category.LIST)) {
    TypeInfo argumentPassedElement=((ListTypeInfo)argumentPassed).getListElementTypeInfo();
    TypeInfo argumentAcceptedElement=((ListTypeInfo)argumentAccepted).getListElementTypeInfo();
    return matchCost(argumentPassedElement,argumentAcceptedElement,exact);
  }
  if (argumentPassed.getCategory().equals(Category.MAP) && argumentAccepted.getCategory().equals(Category.MAP)) {
    TypeInfo argumentPassedKey=((MapTypeInfo)argumentPassed).getMapKeyTypeInfo();
    TypeInfo argumentAcceptedKey=((MapTypeInfo)argumentAccepted).getMapKeyTypeInfo();
    TypeInfo argumentPassedValue=((MapTypeInfo)argumentPassed).getMapValueTypeInfo();
    TypeInfo argumentAcceptedValue=((MapTypeInfo)argumentAccepted).getMapValueTypeInfo();
    int cost1=matchCost(argumentPassedKey,argumentAcceptedKey,exact);
    int cost2=matchCost(argumentPassedValue,argumentAcceptedValue,exact);
    if (cost1 < 0 || cost2 < 0) {
      return -1;
    }
    return Math.max(cost1,cost2);
  }
  if (argumentAccepted.equals(TypeInfoFactory.unknownTypeInfo)) {
    return 1;
  }
  if (!exact && TypeInfoUtils.implicitConvertible(argumentPassed,argumentAccepted)) {
    return 1;
  }
  return -1;
}
