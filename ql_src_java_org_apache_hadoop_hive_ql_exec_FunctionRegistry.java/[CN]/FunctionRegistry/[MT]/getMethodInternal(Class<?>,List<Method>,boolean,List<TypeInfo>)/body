{
  List<Method> udfMethods=new ArrayList<Method>();
  int leastConversionCost=Integer.MAX_VALUE;
  for (  Method m : mlist) {
    List<TypeInfo> argumentsAccepted=TypeInfoUtils.getParameterTypeInfos(m,argumentsPassed.size());
    if (argumentsAccepted == null) {
      continue;
    }
    boolean match=(argumentsAccepted.size() == argumentsPassed.size());
    int conversionCost=0;
    for (int i=0; i < argumentsPassed.size() && match; i++) {
      int cost=matchCost(argumentsPassed.get(i),argumentsAccepted.get(i),exact);
      if (cost == -1) {
        match=false;
      }
 else {
        conversionCost+=cost;
      }
    }
    LOG.debug("Method " + (match ? "did" : "didn't") + " match: passed = "+ argumentsPassed+ " accepted = "+ argumentsAccepted+ " method = "+ m);
    if (match) {
      if (conversionCost < leastConversionCost) {
        udfMethods.clear();
        udfMethods.add(m);
        leastConversionCost=conversionCost;
        if (leastConversionCost == 0) {
          break;
        }
      }
 else       if (conversionCost == leastConversionCost) {
        udfMethods.add(m);
      }
 else {
      }
    }
  }
  if (udfMethods.size() == 0) {
    throw new NoMatchingMethodException(udfClass,argumentsPassed,mlist);
  }
  if (udfMethods.size() > 1) {
    throw new AmbiguousMethodException(udfClass,argumentsPassed,mlist);
  }
  return udfMethods.get(0);
}
