{
  if (a.equals(b)) {
    return a;
  }
  if (a.getCategory() != Category.PRIMITIVE || b.getCategory() != Category.PRIMITIVE) {
    return null;
  }
  PrimitiveCategory pcA=((PrimitiveTypeInfo)a).getPrimitiveCategory();
  PrimitiveCategory pcB=((PrimitiveTypeInfo)b).getPrimitiveCategory();
  if (pcA == pcB) {
    return getTypeInfoForPrimitiveCategory((PrimitiveTypeInfo)a,(PrimitiveTypeInfo)b,pcA);
  }
  PrimitiveGrouping pgA=PrimitiveObjectInspectorUtils.getPrimitiveGrouping(pcA);
  PrimitiveGrouping pgB=PrimitiveObjectInspectorUtils.getPrimitiveGrouping(pcB);
  if (pgA == PrimitiveGrouping.STRING_GROUP && pgB == PrimitiveGrouping.STRING_GROUP) {
    return getTypeInfoForPrimitiveCategory((PrimitiveTypeInfo)a,(PrimitiveTypeInfo)b,PrimitiveCategory.STRING);
  }
  if (TypeInfoUtils.implicitConvertible(a,b)) {
    return getTypeInfoForPrimitiveCategory((PrimitiveTypeInfo)a,(PrimitiveTypeInfo)b,pcB);
  }
  if (TypeInfoUtils.implicitConvertible(b,a)) {
    return getTypeInfoForPrimitiveCategory((PrimitiveTypeInfo)a,(PrimitiveTypeInfo)b,pcA);
  }
  for (  PrimitiveCategory t : TypeInfoUtils.numericTypeList) {
    if (TypeInfoUtils.implicitConvertible(pcA,t) && TypeInfoUtils.implicitConvertible(pcB,t)) {
      return getTypeInfoForPrimitiveCategory((PrimitiveTypeInfo)a,(PrimitiveTypeInfo)b,t);
    }
  }
  return null;
}
