{
  super(AMReporter.class.getName());
  this.localAddress=localAddress;
  this.queryFailedHandler=queryFailedHandler;
  this.conf=conf;
  ExecutorService rawExecutor=Executors.newCachedThreadPool(new ThreadFactoryBuilder().setDaemon(true).setNameFormat("AMReporter %d").build());
  this.executor=MoreExecutors.listeningDecorator(rawExecutor);
  ExecutorService rawExecutor2=Executors.newFixedThreadPool(1,new ThreadFactoryBuilder().setDaemon(true).setNameFormat("AMReporterQueueDrainer").build());
  this.queueLookupExecutor=MoreExecutors.listeningDecorator(rawExecutor2);
  this.heartbeatInterval=HiveConf.getTimeVar(conf,ConfVars.LLAP_DAEMON_AM_LIVENESS_HEARTBEAT_INTERVAL_MS,TimeUnit.MILLISECONDS);
  this.retryTimeout=HiveConf.getTimeVar(conf,ConfVars.LLAP_DAEMON_AM_LIVENESS_CONNECTION_TIMEOUT_MS,TimeUnit.MILLISECONDS);
  long retrySleep=HiveConf.getTimeVar(conf,ConfVars.LLAP_DAEMON_AM_LIVENESS_CONNECTION_SLEEP_BETWEEN_RETRIES_MS,TimeUnit.MILLISECONDS);
  this.retryPolicy=RetryPolicies.retryUpToMaximumTimeWithFixedSleep(retryTimeout,retrySleep,TimeUnit.MILLISECONDS);
  this.socketFactory=NetUtils.getDefaultSocketFactory(conf);
  LOG.info("Setting up AMReporter with " + "heartbeatInterval(ms)=" + heartbeatInterval + ", retryTime(ms)="+ retryTimeout+ ", retrySleep(ms)="+ retrySleep);
}
