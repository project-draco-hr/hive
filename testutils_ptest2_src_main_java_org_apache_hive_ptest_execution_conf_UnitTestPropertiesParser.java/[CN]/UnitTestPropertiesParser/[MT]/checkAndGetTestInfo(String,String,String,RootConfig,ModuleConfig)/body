{
  Preconditions.checkNotNull(moduleConfig);
  TestInfo testInfo;
  String rejectReason=null;
  try {
    if (rootConfig.excludedModules.contains(moduleName)) {
      rejectReason="root level module exclude";
      return null;
    }
    if (!rootConfig.includedModules.isEmpty() && !rootConfig.includedModules.contains(moduleName)) {
      rejectReason="root level include, but not for module";
      return null;
    }
    if (rootConfig.exclude.contains(testName)) {
      rejectReason="root excludes test";
      return null;
    }
    if (moduleConfig.exclude.contains(testName)) {
      rejectReason="module excludes test";
      return null;
    }
    boolean containsInclude=!rootConfig.include.isEmpty() || !moduleConfig.include.isEmpty();
    if (containsInclude) {
      if (!(rootConfig.include.contains(testName) || moduleConfig.include.contains(testName))) {
        rejectReason="test missing from include list";
        return null;
      }
    }
    if (excludedProvided.contains(testName)) {
      rejectReason="test present in provided exclude list";
      return null;
    }
    testInfo=new TestInfo(moduleName,moduleRelDir,testName,rootConfig.skipBatching.contains(testName) || moduleConfig.skipBatching.contains(testName),rootConfig.isolate.contains(testName) || moduleConfig.isolate.contains(testName));
    return testInfo;
  }
  finally {
    if (rejectReason != null) {
      logger.debug("excluding {} due to {}",testName,rejectReason);
    }
  }
}
