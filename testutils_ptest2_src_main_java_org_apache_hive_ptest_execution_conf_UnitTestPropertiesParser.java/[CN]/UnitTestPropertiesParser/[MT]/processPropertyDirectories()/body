{
  String srcDirString=sourceDirectory.getCanonicalPath();
  List<TestDir> unitTestsDirs=Lists.newArrayList();
  String propDirectoriies=unitRootContext.getString(PROP_DIRECTORIES,DEFAULT_PROP_DIRECTORIES);
  Iterable<String> propDirectoriesIterable=VALUE_SPLITTER.split(propDirectoriies);
  for (  String unitTestDir : propDirectoriesIterable) {
    File unitTestParent=new File(sourceDirectory,unitTestDir);
    if (unitTestParent.isDirectory() || inTest) {
      String absUnitTestDir=unitTestParent.getCanonicalPath();
      Preconditions.checkState(absUnitTestDir.startsWith(srcDirString),"Unit test dir: " + absUnitTestDir + " is not under provided src dir: "+ srcDirString);
      String modulePath=absUnitTestDir.substring(srcDirString.length());
      modulePath=stripEndAndStart(modulePath,"/");
      Preconditions.checkState(!modulePath.startsWith("/"),String.format("Illegal module path: [%s]",modulePath));
      if (StringUtils.isEmpty(modulePath)) {
        modulePath=PREFIX_TOP_LEVEL;
      }
      String moduleName=getModuleNameFromPathPrefix(modulePath);
      logger.info("modulePath determined as {} for testdir={}, DerivedModuleName={}",modulePath,absUnitTestDir,moduleName);
      logger.info("Adding unitTests dir [{}],[{}]",unitTestParent,moduleName);
      unitTestsDirs.add(new TestDir(unitTestParent,moduleName));
    }
 else {
      logger.warn("Unit test directory " + unitTestParent + " does not exist, or is a file.");
    }
  }
  return unitTestsDirs;
}
