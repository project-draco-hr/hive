{
  assertEquals(true,result instanceof Object[]);
  Object[] arr=(Object[])result;
  assertEquals(1,arr.length);
  if (expected == null) {
    assertEquals(key,null,arr[0]);
  }
 else   if (arr[0] instanceof LongWritable) {
    LongWritable lw=(LongWritable)arr[0];
    assertEquals(key,(Long)expected,(Long)lw.get());
  }
 else   if (arr[0] instanceof Text) {
    Text tx=(Text)arr[0];
    String sbw=tx.toString();
    assertEquals(key,(String)expected,sbw);
  }
 else   if (arr[0] instanceof DoubleWritable) {
    DoubleWritable dw=(DoubleWritable)arr[0];
    assertEquals(key,(Double)expected,(Double)dw.get());
  }
 else   if (arr[0] instanceof Double) {
    assertEquals(key,(Double)expected,(Double)arr[0]);
  }
 else   if (arr[0] instanceof Long) {
    assertEquals(key,(Long)expected,(Long)arr[0]);
  }
 else   if (arr[0] instanceof HiveDecimalWritable) {
    HiveDecimalWritable hdw=(HiveDecimalWritable)arr[0];
    HiveDecimal hd=hdw.getHiveDecimal();
    Decimal128 d128=(Decimal128)expected;
    assertEquals(key,d128.toBigDecimal(),hd.bigDecimalValue());
  }
 else   if (arr[0] instanceof HiveDecimal) {
    HiveDecimal hd=(HiveDecimal)arr[0];
    Decimal128 d128=(Decimal128)expected;
    assertEquals(key,d128.toBigDecimal(),hd.bigDecimalValue());
  }
 else {
    Assert.fail("Unsupported result type: " + arr[0].getClass().getName());
  }
}
