{
  assert(!stack.isEmpty());
  LineageCtx lCtx=(LineageCtx)procCtx;
  ReduceSinkOperator rop=(ReduceSinkOperator)nd;
  Operator<? extends OperatorDesc> inpOp=getParent(stack);
  lCtx.getIndex().copyPredicates(inpOp,rop);
  int cnt=0;
  Operator<? extends OperatorDesc> op=rop.getChildOperators().get(0);
  while (op instanceof ForwardOperator) {
    op=op.getChildOperators().get(0);
  }
  if (op instanceof GroupByOperator) {
    ArrayList<ColumnInfo> col_infos=rop.getSchema().getSignature();
    for (    ExprNodeDesc expr : rop.getConf().getKeyCols()) {
      lCtx.getIndex().putDependency(rop,col_infos.get(cnt++),ExprProcFactory.getExprDependency(lCtx,inpOp,expr));
    }
    for (    ExprNodeDesc expr : rop.getConf().getValueCols()) {
      lCtx.getIndex().putDependency(rop,col_infos.get(cnt++),ExprProcFactory.getExprDependency(lCtx,inpOp,expr));
    }
  }
 else {
    RowSchema schema=rop.getSchema();
    ReduceSinkDesc desc=rop.getConf();
    List<ExprNodeDesc> keyCols=desc.getKeyCols();
    ArrayList<String> keyColNames=desc.getOutputKeyColumnNames();
    for (int i=0; i < keyCols.size(); i++) {
      ColumnInfo column=schema.getColumnInfo(Utilities.ReduceField.KEY + "." + keyColNames.get(i));
      if (column == null) {
        continue;
      }
      lCtx.getIndex().putDependency(rop,column,ExprProcFactory.getExprDependency(lCtx,inpOp,keyCols.get(i)));
    }
    List<ExprNodeDesc> valCols=desc.getValueCols();
    ArrayList<String> valColNames=desc.getOutputValueColumnNames();
    for (int i=0; i < valCols.size(); i++) {
      ColumnInfo column=schema.getColumnInfo(valColNames.get(i));
      if (column == null) {
        column=schema.getColumnInfo(Utilities.ReduceField.VALUE + "." + valColNames.get(i));
      }
      lCtx.getIndex().putDependency(rop,column,ExprProcFactory.getExprDependency(lCtx,inpOp,valCols.get(i)));
    }
  }
  return null;
}
