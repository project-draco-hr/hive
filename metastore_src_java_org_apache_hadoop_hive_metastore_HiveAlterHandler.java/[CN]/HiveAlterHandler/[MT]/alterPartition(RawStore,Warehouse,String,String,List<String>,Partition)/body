{
  boolean success=false;
  Path srcPath=null;
  Path destPath=null;
  FileSystem srcFs=null;
  FileSystem destFs=null;
  Partition oldPart=null;
  String oldPartLoc=null;
  String newPartLoc=null;
  if (new_part.getParameters() == null || new_part.getParameters().get(hive_metastoreConstants.DDL_TIME) == null || Integer.parseInt(new_part.getParameters().get(hive_metastoreConstants.DDL_TIME)) == 0) {
    new_part.putToParameters(hive_metastoreConstants.DDL_TIME,Long.toString(System.currentTimeMillis() / 1000));
  }
  Table tbl=msdb.getTable(dbname,name);
  if (part_vals == null || part_vals.size() == 0) {
    try {
      oldPart=msdb.getPartition(dbname,name,new_part.getValues());
      if (MetaStoreUtils.requireCalStats(hiveConf,oldPart,new_part,tbl)) {
        MetaStoreUtils.updatePartitionStatsFast(new_part,wh,false,true);
      }
      updatePartColumnStats(msdb,dbname,name,new_part.getValues(),new_part);
      msdb.alterPartition(dbname,name,new_part.getValues(),new_part);
    }
 catch (    InvalidObjectException e) {
      throw new InvalidOperationException("alter is not possible");
    }
catch (    NoSuchObjectException e) {
      throw new InvalidOperationException("alter is not possible");
    }
    return oldPart;
  }
  try {
    msdb.openTransaction();
    try {
      oldPart=msdb.getPartition(dbname,name,part_vals);
    }
 catch (    NoSuchObjectException e) {
      throw new InvalidObjectException("Unable to rename partition because old partition does not exist");
    }
    Partition check_part=null;
    try {
      check_part=msdb.getPartition(dbname,name,new_part.getValues());
    }
 catch (    NoSuchObjectException e) {
      check_part=null;
    }
    if (check_part != null) {
      throw new AlreadyExistsException("Partition already exists:" + dbname + "."+ name+ "."+ new_part.getValues());
    }
    if (tbl == null) {
      throw new InvalidObjectException("Unable to rename partition because table or database do not exist");
    }
    if (tbl.getTableType().equals(TableType.EXTERNAL_TABLE.toString())) {
      new_part.getSd().setLocation(oldPart.getSd().getLocation());
      String oldPartName=Warehouse.makePartName(tbl.getPartitionKeys(),oldPart.getValues());
      try {
        msdb.deletePartitionColumnStatistics(dbname,name,oldPartName,oldPart.getValues(),null);
      }
 catch (      NoSuchObjectException nsoe) {
      }
catch (      InvalidInputException iie) {
        throw new InvalidOperationException("Unable to update partition stats in table rename." + iie);
      }
      msdb.alterPartition(dbname,name,part_vals,new_part);
    }
 else {
      try {
        destPath=new Path(wh.getTablePath(msdb.getDatabase(dbname),name),Warehouse.makePartName(tbl.getPartitionKeys(),new_part.getValues()));
        destPath=constructRenamedPath(destPath,new Path(new_part.getSd().getLocation()));
      }
 catch (      NoSuchObjectException e) {
        LOG.debug(e);
        throw new InvalidOperationException("Unable to change partition or table. Database " + dbname + " does not exist"+ " Check metastore logs for detailed stack."+ e.getMessage());
      }
      if (destPath != null) {
        newPartLoc=destPath.toString();
        oldPartLoc=oldPart.getSd().getLocation();
        srcPath=new Path(oldPartLoc);
        LOG.info("srcPath:" + oldPartLoc);
        LOG.info("descPath:" + newPartLoc);
        srcFs=wh.getFs(srcPath);
        destFs=wh.getFs(destPath);
        if (!FileUtils.equalsFileSystem(srcFs,destFs)) {
          throw new InvalidOperationException("table new location " + destPath + " is on a different file system than the old location "+ srcPath+ ". This operation is not supported");
        }
        try {
          srcFs.exists(srcPath);
          if (newPartLoc.compareTo(oldPartLoc) != 0 && destFs.exists(destPath)) {
            throw new InvalidOperationException("New location for this table " + tbl.getDbName() + "."+ tbl.getTableName()+ " already exists : "+ destPath);
          }
        }
 catch (        IOException e) {
          throw new InvalidOperationException("Unable to access new location " + destPath + " for partition "+ tbl.getDbName()+ "."+ tbl.getTableName()+ " "+ new_part.getValues());
        }
        new_part.getSd().setLocation(newPartLoc);
        if (MetaStoreUtils.requireCalStats(hiveConf,oldPart,new_part,tbl)) {
          MetaStoreUtils.updatePartitionStatsFast(new_part,wh,false,true);
        }
        String oldPartName=Warehouse.makePartName(tbl.getPartitionKeys(),oldPart.getValues());
        try {
          msdb.deletePartitionColumnStatistics(dbname,name,oldPartName,oldPart.getValues(),null);
        }
 catch (        NoSuchObjectException nsoe) {
        }
catch (        InvalidInputException iie) {
          throw new InvalidOperationException("Unable to update partition stats in table rename." + iie);
        }
        msdb.alterPartition(dbname,name,part_vals,new_part);
      }
    }
    success=msdb.commitTransaction();
  }
  finally {
    if (!success) {
      msdb.rollbackTransaction();
    }
    if (success && newPartLoc != null && newPartLoc.compareTo(oldPartLoc) != 0) {
      try {
        if (srcFs.exists(srcPath)) {
          Path destParentPath=destPath.getParent();
          if (!wh.mkdirs(destParentPath,true)) {
            throw new IOException("Unable to create path " + destParentPath);
          }
          wh.renameDir(srcPath,destPath,true);
          LOG.info("rename done!");
        }
      }
 catch (      IOException e) {
        boolean revertMetaDataTransaction=false;
        try {
          msdb.openTransaction();
          msdb.alterPartition(dbname,name,new_part.getValues(),oldPart);
          revertMetaDataTransaction=msdb.commitTransaction();
        }
 catch (        Exception e1) {
          LOG.error("Reverting metadata opeation failed During HDFS operation failed",e1);
          if (!revertMetaDataTransaction) {
            msdb.rollbackTransaction();
          }
        }
        throw new InvalidOperationException("Unable to access old location " + srcPath + " for partition "+ tbl.getDbName()+ "."+ tbl.getTableName()+ " "+ part_vals);
      }
    }
  }
  return oldPart;
}
