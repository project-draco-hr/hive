{
  if (newt == null) {
    throw new InvalidOperationException("New table is invalid: " + newt);
  }
  if (!MetaStoreUtils.validateName(newt.getTableName())) {
    throw new InvalidOperationException(newt.getTableName() + " is not a valid object name");
  }
  String validate=MetaStoreUtils.validateTblColumns(newt.getSd().getCols());
  if (validate != null) {
    throw new InvalidOperationException("Invalid column " + validate);
  }
  Path srcPath=null;
  FileSystem srcFs=null;
  Path destPath=null;
  FileSystem destFs=null;
  boolean success=false;
  boolean moveData=false;
  boolean rename=false;
  Table oldt=null;
  List<ObjectPair<Partition,String>> altps=new ArrayList<ObjectPair<Partition,String>>();
  try {
    msdb.openTransaction();
    name=name.toLowerCase();
    dbname=dbname.toLowerCase();
    if (!newt.getTableName().equalsIgnoreCase(name) || !newt.getDbName().equalsIgnoreCase(dbname)) {
      if (msdb.getTable(newt.getDbName(),newt.getTableName()) != null) {
        throw new InvalidOperationException("new table " + newt.getDbName() + "."+ newt.getTableName()+ " already exists");
      }
      rename=true;
    }
    oldt=msdb.getTable(dbname,name);
    if (oldt == null) {
      throw new InvalidOperationException("table " + newt.getDbName() + "."+ newt.getTableName()+ " doesn't exist");
    }
    if (HiveConf.getBoolVar(hiveConf,HiveConf.ConfVars.METASTORE_DISALLOW_INCOMPATIBLE_COL_TYPE_CHANGES,false)) {
      MetaStoreUtils.throwExceptionIfIncompatibleColTypeChange(oldt.getSd().getCols(),newt.getSd().getCols());
    }
    if (cascade) {
      if (MetaStoreUtils.isCascadeNeededInAlterTable(oldt,newt)) {
        List<Partition> parts=msdb.getPartitions(dbname,name,-1);
        for (        Partition part : parts) {
          List<FieldSchema> oldCols=part.getSd().getCols();
          part.getSd().setCols(newt.getSd().getCols());
          String oldPartName=Warehouse.makePartName(oldt.getPartitionKeys(),part.getValues());
          updatePartColumnStatsForAlterColumns(msdb,part,oldPartName,part.getValues(),oldCols,part);
          msdb.alterPartition(dbname,name,part.getValues(),part);
        }
      }
 else {
        LOG.warn("Alter table does not cascade changes to its partitions.");
      }
    }
    boolean partKeysPartiallyEqual=checkPartialPartKeysEqual(oldt.getPartitionKeys(),newt.getPartitionKeys());
    if (!oldt.getTableType().equals(TableType.VIRTUAL_VIEW.toString())) {
      if (oldt.getPartitionKeys().size() != newt.getPartitionKeys().size() || !partKeysPartiallyEqual) {
        throw new InvalidOperationException("partition keys can not be changed.");
      }
    }
    if (rename && !oldt.getTableType().equals(TableType.VIRTUAL_VIEW.toString()) && (oldt.getSd().getLocation().compareTo(newt.getSd().getLocation()) == 0 || StringUtils.isEmpty(newt.getSd().getLocation()))&& !MetaStoreUtils.isExternalTable(oldt)) {
      srcPath=new Path(oldt.getSd().getLocation());
      srcFs=wh.getFs(srcPath);
      Path databasePath=constructRenamedPath(wh.getDefaultDatabasePath(newt.getDbName()),srcPath);
      destPath=new Path(databasePath,newt.getTableName());
      destFs=wh.getFs(destPath);
      newt.getSd().setLocation(destPath.toString());
      moveData=true;
      if (!FileUtils.equalsFileSystem(srcFs,destFs)) {
        throw new InvalidOperationException("table new location " + destPath + " is on a different file system than the old location "+ srcPath+ ". This operation is not supported");
      }
      try {
        srcFs.exists(srcPath);
        if (destFs.exists(destPath)) {
          throw new InvalidOperationException("New location for this table " + newt.getDbName() + "."+ newt.getTableName()+ " already exists : "+ destPath);
        }
      }
 catch (      IOException e) {
        Warehouse.closeFs(srcFs);
        Warehouse.closeFs(destFs);
        throw new InvalidOperationException("Unable to access new location " + destPath + " for table "+ newt.getDbName()+ "."+ newt.getTableName());
      }
      String oldTblLocPath=srcPath.toUri().getPath();
      String newTblLocPath=destPath.toUri().getPath();
      List<Partition> parts=msdb.getPartitions(dbname,name,-1);
      for (      Partition part : parts) {
        String oldPartLoc=part.getSd().getLocation();
        if (oldPartLoc.contains(oldTblLocPath)) {
          URI oldUri=new Path(oldPartLoc).toUri();
          String newPath=oldUri.getPath().replace(oldTblLocPath,newTblLocPath);
          Path newPartLocPath=new Path(oldUri.getScheme(),oldUri.getAuthority(),newPath);
          altps.add(ObjectPair.create(part,part.getSd().getLocation()));
          part.getSd().setLocation(newPartLocPath.toString());
          String oldPartName=Warehouse.makePartName(oldt.getPartitionKeys(),part.getValues());
          try {
            msdb.deletePartitionColumnStatistics(dbname,name,oldPartName,part.getValues(),null);
          }
 catch (          InvalidInputException iie) {
            throw new InvalidOperationException("Unable to update partition stats in table rename." + iie);
          }
          msdb.alterPartition(dbname,name,part.getValues(),part);
        }
      }
    }
 else     if (MetaStoreUtils.requireCalStats(hiveConf,null,null,newt) && (newt.getPartitionKeysSize() == 0)) {
      Database db=msdb.getDatabase(newt.getDbName());
      MetaStoreUtils.updateUnpartitionedTableStatsFast(db,newt,wh,false,true);
    }
    updateTableColumnStatsForAlterTable(msdb,oldt,newt);
    msdb.alterTable(dbname,name,newt);
    success=msdb.commitTransaction();
  }
 catch (  InvalidObjectException e) {
    LOG.debug(e);
    throw new InvalidOperationException("Unable to change partition or table." + " Check metastore logs for detailed stack." + e.getMessage());
  }
catch (  NoSuchObjectException e) {
    LOG.debug(e);
    throw new InvalidOperationException("Unable to change partition or table. Database " + dbname + " does not exist"+ " Check metastore logs for detailed stack."+ e.getMessage());
  }
 finally {
    if (!success) {
      msdb.rollbackTransaction();
    }
    if (success && moveData) {
      try {
        if (srcFs.exists(srcPath) && !srcFs.rename(srcPath,destPath)) {
          throw new IOException("Renaming " + srcPath + " to "+ destPath+ " is failed");
        }
      }
 catch (      IOException e) {
        boolean revertMetaDataTransaction=false;
        try {
          msdb.openTransaction();
          msdb.alterTable(dbname,newt.getTableName(),oldt);
          for (          ObjectPair<Partition,String> pair : altps) {
            Partition part=pair.getFirst();
            part.getSd().setLocation(pair.getSecond());
            msdb.alterPartition(dbname,name,part.getValues(),part);
          }
          revertMetaDataTransaction=msdb.commitTransaction();
        }
 catch (        Exception e1) {
          LOG.error("Reverting metadata by HDFS operation failure failed During HDFS operation failed",e1);
          LOG.error("Table " + Warehouse.getQualifiedName(newt) + " should be renamed to "+ Warehouse.getQualifiedName(oldt));
          LOG.error("Table " + Warehouse.getQualifiedName(newt) + " should have path "+ srcPath);
          for (          ObjectPair<Partition,String> pair : altps) {
            LOG.error("Partition " + Warehouse.getQualifiedName(pair.getFirst()) + " should have path "+ pair.getSecond());
          }
          if (!revertMetaDataTransaction) {
            msdb.rollbackTransaction();
          }
        }
        throw new InvalidOperationException("Unable to access old location " + srcPath + " for table "+ dbname+ "."+ name);
      }
    }
  }
  if (!success) {
    throw new MetaException("Committing the alter table transaction was not successful.");
  }
}
