{
  ObjectInspector inspector;
synchronized (TestOrcFile.class) {
    inspector=ObjectInspectorFactory.getReflectionObjectInspector(InnerStruct.class,ObjectInspectorFactory.ObjectInspectorOptions.JAVA);
  }
  Writer writer=OrcFile.createWriter(fs,testFilePath,conf,inspector,400000L,CompressionKind.NONE,500,1000);
  for (int i=0; i < 3500; ++i) {
    writer.addRow(new InnerStruct(i * 300,Integer.toHexString(10 * i)));
  }
  writer.close();
  Reader reader=OrcFile.createReader(fs,testFilePath,conf);
  assertEquals(3500,reader.getNumberOfRows());
  SearchArgument sarg=SearchArgument.FACTORY.newBuilder().startAnd().startNot().lessThan("int1",300000).end().lessThan("int1",600000).end().build();
  RecordReader rows=reader.rows(0L,Long.MAX_VALUE,new boolean[]{true,true,true},sarg,new String[]{null,"int1","string1"});
  assertEquals(1000L,rows.getRowNumber());
  OrcStruct row=null;
  for (int i=1000; i < 2000; ++i) {
    assertTrue(rows.hasNext());
    row=(OrcStruct)rows.next(row);
    assertEquals(300 * i,((IntWritable)row.getFieldValue(0)).get());
    assertEquals(Integer.toHexString(10 * i),row.getFieldValue(1).toString());
  }
  assertTrue(!rows.hasNext());
  assertEquals(3500,rows.getRowNumber());
  sarg=SearchArgument.FACTORY.newBuilder().startAnd().lessThan("int1",0).end().build();
  rows=reader.rows(0L,Long.MAX_VALUE,new boolean[]{true,true,true},sarg,new String[]{null,"int1","string1"});
  assertEquals(3500L,rows.getRowNumber());
  assertTrue(!rows.hasNext());
  sarg=SearchArgument.FACTORY.newBuilder().startOr().lessThan("int1",300 * 100).startNot().lessThan("int1",300 * 3400).end().end().build();
  rows=reader.rows(0L,Long.MAX_VALUE,new boolean[]{true,true,true},sarg,new String[]{null,"int1","string1"});
  row=null;
  for (int i=0; i < 1000; ++i) {
    assertTrue(rows.hasNext());
    assertEquals(i,rows.getRowNumber());
    row=(OrcStruct)rows.next(row);
    assertEquals(300 * i,((IntWritable)row.getFieldValue(0)).get());
    assertEquals(Integer.toHexString(10 * i),row.getFieldValue(1).toString());
  }
  for (int i=3000; i < 3500; ++i) {
    assertTrue(rows.hasNext());
    assertEquals(i,rows.getRowNumber());
    row=(OrcStruct)rows.next(row);
    assertEquals(300 * i,((IntWritable)row.getFieldValue(0)).get());
    assertEquals(Integer.toHexString(10 * i),row.getFieldValue(1).toString());
  }
  assertTrue(!rows.hasNext());
  assertEquals(3500,rows.getRowNumber());
}
