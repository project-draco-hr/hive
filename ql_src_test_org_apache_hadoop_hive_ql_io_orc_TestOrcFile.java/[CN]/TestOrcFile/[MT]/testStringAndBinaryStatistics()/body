{
  ObjectInspector inspector;
synchronized (TestOrcFile.class) {
    inspector=ObjectInspectorFactory.getReflectionObjectInspector(SimpleStruct.class,ObjectInspectorFactory.ObjectInspectorOptions.JAVA);
  }
  Writer writer=OrcFile.createWriter(testFilePath,OrcFile.writerOptions(conf).inspector(inspector).stripeSize(100000).bufferSize(10000));
  writer.addRow(new SimpleStruct(bytes(0,1,2,3,4),"foo"));
  writer.addRow(new SimpleStruct(bytes(0,1,2,3),"bar"));
  writer.addRow(new SimpleStruct(bytes(0,1,2,3,4,5),null));
  writer.addRow(new SimpleStruct(null,"hi"));
  writer.close();
  Reader reader=OrcFile.createReader(testFilePath,OrcFile.readerOptions(conf).filesystem(fs));
  ColumnStatistics[] stats=reader.getStatistics();
  assertEquals(4,stats[0].getNumberOfValues());
  assertEquals("count: 4",stats[0].toString());
  assertEquals(3,stats[1].getNumberOfValues());
  assertEquals(15,((BinaryColumnStatistics)stats[1]).getSum());
  assertEquals("count: 3 sum: 15",stats[1].toString());
  assertEquals(3,stats[2].getNumberOfValues());
  assertEquals("bar",((StringColumnStatistics)stats[2]).getMinimum());
  assertEquals("hi",((StringColumnStatistics)stats[2]).getMaximum());
  assertEquals(8,((StringColumnStatistics)stats[2]).getSum());
  assertEquals("count: 3 min: bar max: hi sum: 8",stats[2].toString());
  StructObjectInspector readerInspector=(StructObjectInspector)reader.getObjectInspector();
  assertEquals(ObjectInspector.Category.STRUCT,readerInspector.getCategory());
  assertEquals("struct<bytes1:binary,string1:string>",readerInspector.getTypeName());
  List<? extends StructField> fields=readerInspector.getAllStructFieldRefs();
  BinaryObjectInspector bi=(BinaryObjectInspector)readerInspector.getStructFieldRef("bytes1").getFieldObjectInspector();
  StringObjectInspector st=(StringObjectInspector)readerInspector.getStructFieldRef("string1").getFieldObjectInspector();
  RecordReader rows=reader.rows();
  Object row=rows.next(null);
  assertNotNull(row);
  assertEquals(bytes(0,1,2,3,4),bi.getPrimitiveWritableObject(readerInspector.getStructFieldData(row,fields.get(0))));
  assertEquals("foo",st.getPrimitiveJavaObject(readerInspector.getStructFieldData(row,fields.get(1))));
  assertEquals(true,rows.hasNext());
  row=rows.next(row);
  assertEquals(bytes(0,1,2,3),bi.getPrimitiveWritableObject(readerInspector.getStructFieldData(row,fields.get(0))));
  assertEquals("bar",st.getPrimitiveJavaObject(readerInspector.getStructFieldData(row,fields.get(1))));
  assertEquals(true,rows.hasNext());
  row=rows.next(row);
  assertEquals(bytes(0,1,2,3,4,5),bi.getPrimitiveWritableObject(readerInspector.getStructFieldData(row,fields.get(0))));
  assertNull(st.getPrimitiveJavaObject(readerInspector.getStructFieldData(row,fields.get(1))));
  assertEquals(true,rows.hasNext());
  row=rows.next(row);
  assertNull(bi.getPrimitiveWritableObject(readerInspector.getStructFieldData(row,fields.get(0))));
  assertEquals("hi",st.getPrimitiveJavaObject(readerInspector.getStructFieldData(row,fields.get(1))));
  assertEquals(false,rows.hasNext());
  rows.close();
}
