{
  ObjectInspector inspector;
synchronized (TestOrcFile.class) {
    inspector=ObjectInspectorFactory.getReflectionObjectInspector(InnerStruct.class,ObjectInspectorFactory.ObjectInspectorOptions.JAVA);
  }
  Writer writer=OrcFile.createWriter(testFilePath,OrcFile.writerOptions(conf).inspector(inspector).stripeSize(1000).compress(CompressionKind.NONE).bufferSize(100).rowIndexStride(1000));
  Random r1=new Random(1);
  Random r2=new Random(2);
  int x;
  int minInt=0, maxInt=0;
  String y;
  String minStr=null, maxStr=null;
  for (int i=0; i < 21000; ++i) {
    x=r1.nextInt();
    y=Long.toHexString(r2.nextLong());
    if (i == 0 || x < minInt) {
      minInt=x;
    }
    if (i == 0 || x > maxInt) {
      maxInt=x;
    }
    if (i == 0 || y.compareTo(minStr) < 0) {
      minStr=y;
    }
    if (i == 0 || y.compareTo(maxStr) > 0) {
      maxStr=y;
    }
    writer.addRow(inner(x,y));
  }
  writer.close();
  Reader reader=OrcFile.createReader(fs,testFilePath,conf);
  ColumnStatistics[] stats=reader.getStatistics();
  assertEquals(3,stats.length);
  for (  ColumnStatistics s : stats) {
    assertEquals(21000,s.getNumberOfValues());
    if (s instanceof IntegerColumnStatistics) {
      assertEquals(minInt,((IntegerColumnStatistics)s).getMinimum());
      assertEquals(maxInt,((IntegerColumnStatistics)s).getMaximum());
    }
 else     if (s instanceof StringColumnStatistics) {
      assertEquals(maxStr,((StringColumnStatistics)s).getMaximum());
      assertEquals(minStr,((StringColumnStatistics)s).getMinimum());
    }
  }
  List<OrcProto.Type> types=reader.getTypes();
  assertEquals(3,types.size());
  assertEquals(OrcProto.Type.Kind.STRUCT,types.get(0).getKind());
  assertEquals(2,types.get(0).getSubtypesCount());
  assertEquals(1,types.get(0).getSubtypes(0));
  assertEquals(2,types.get(0).getSubtypes(1));
  assertEquals(OrcProto.Type.Kind.INT,types.get(1).getKind());
  assertEquals(0,types.get(1).getSubtypesCount());
  assertEquals(OrcProto.Type.Kind.STRING,types.get(2).getKind());
  assertEquals(0,types.get(2).getSubtypesCount());
  RecordReader rows1=reader.rows(new boolean[]{true,true,false});
  RecordReader rows2=reader.rows(new boolean[]{true,false,true});
  r1=new Random(1);
  r2=new Random(2);
  OrcStruct row1=null;
  OrcStruct row2=null;
  for (int i=0; i < 21000; ++i) {
    assertEquals(true,rows1.hasNext());
    assertEquals(true,rows2.hasNext());
    row1=(OrcStruct)rows1.next(row1);
    row2=(OrcStruct)rows2.next(row2);
    assertEquals(r1.nextInt(),((IntWritable)row1.getFieldValue(0)).get());
    assertEquals(Long.toHexString(r2.nextLong()),row2.getFieldValue(1).toString());
  }
  assertEquals(false,rows1.hasNext());
  assertEquals(false,rows2.hasNext());
  rows1.close();
  rows2.close();
}
