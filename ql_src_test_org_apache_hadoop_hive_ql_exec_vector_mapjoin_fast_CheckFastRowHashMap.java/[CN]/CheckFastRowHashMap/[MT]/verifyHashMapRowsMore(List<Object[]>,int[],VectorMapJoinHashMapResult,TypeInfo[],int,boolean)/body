{
  final int count=rows.size();
  final int columnCount=typeInfos.length;
  WriteBuffers.ByteSegmentRef ref=hashMapResult.first();
  for (int a=0; a < count; a++) {
    int valueIndex=actualToValueMap[a];
    Object[] row=rows.get(valueIndex);
    byte[] bytes=ref.getBytes();
    int offset=(int)ref.getOffset();
    int length=ref.getLength();
    if (a == clipIndex) {
      length--;
    }
    if (useExactBytes) {
      bytes=Arrays.copyOfRange(bytes,offset,offset + length);
      offset=0;
    }
    LazyBinaryDeserializeRead lazyBinaryDeserializeRead=new LazyBinaryDeserializeRead(typeInfos,false);
    lazyBinaryDeserializeRead.set(bytes,offset,length);
    boolean thrown=false;
    Exception saveException=null;
    boolean notExpected=false;
    int index=0;
    try {
      for (index=0; index < columnCount; index++) {
        Writable writable=(Writable)row[index];
        VerifyFastRow.verifyDeserializeRead(lazyBinaryDeserializeRead,(PrimitiveTypeInfo)typeInfos[index],writable);
      }
    }
 catch (    Exception e) {
      thrown=true;
      saveException=e;
      debugDetailedReadPositionString=lazyBinaryDeserializeRead.getDetailedReadPositionString();
      debugDetailedHashMapResultPositionString=hashMapResult.getDetailedHashMapResultPositionString();
      debugExceptionMessage=saveException.getMessage();
      debugStackTrace=saveException.getStackTrace();
    }
    if (a == clipIndex) {
      if (!thrown) {
        TestCase.fail("Expecting an exception to be thrown for the clipped case...");
      }
 else {
        TestCase.assertTrue(saveException != null);
        if (saveException instanceof EOFException) {
        }
 else         if (saveException instanceof ArrayIndexOutOfBoundsException) {
          notExpected=true;
        }
 else {
          TestCase.fail("Expecting an EOFException to be thrown for the clipped case...");
        }
      }
    }
 else {
      if (thrown) {
        TestCase.fail("Not expecting an exception to be thrown for the non-clipped case...");
      }
      TestCase.assertTrue(lazyBinaryDeserializeRead.isEndOfInputReached());
    }
    ref=hashMapResult.next();
    if (a == count - 1) {
      TestCase.assertTrue(ref == null);
    }
 else {
      TestCase.assertTrue(ref != null);
    }
  }
}
