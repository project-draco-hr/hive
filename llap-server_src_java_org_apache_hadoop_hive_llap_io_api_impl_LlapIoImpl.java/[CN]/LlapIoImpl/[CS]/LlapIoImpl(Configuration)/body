{
  String ioMode=HiveConf.getVar(conf,HiveConf.ConfVars.LLAP_IO_MEMORY_MODE);
  boolean useLowLevelCache=LlapIoImpl.MODE_CACHE.equalsIgnoreCase(ioMode);
  LOG.info("Initializing LLAP IO in {} mode",useLowLevelCache ? LlapIoImpl.MODE_CACHE : "none");
  String displayName="LlapDaemonCacheMetrics-" + MetricsUtils.getHostName();
  String sessionId=conf.get("llap.daemon.metrics.sessionid");
  this.cacheMetrics=LlapDaemonCacheMetrics.create(displayName,sessionId);
  displayName="LlapDaemonIOMetrics-" + MetricsUtils.getHostName();
  String[] strIntervals=HiveConf.getTrimmedStringsVar(conf,HiveConf.ConfVars.LLAP_IO_DECODING_METRICS_PERCENTILE_INTERVALS);
  List<Integer> intervalList=new ArrayList<>();
  if (strIntervals != null) {
    for (    String strInterval : strIntervals) {
      try {
        intervalList.add(Integer.valueOf(strInterval));
      }
 catch (      NumberFormatException e) {
        LOG.warn("Ignoring IO decoding metrics interval {} from {} as it is invalid",strInterval,Arrays.toString(strIntervals));
      }
    }
  }
  this.ioMetrics=LlapDaemonIOMetrics.create(displayName,sessionId,Ints.toArray(intervalList));
  LOG.info("Started llap daemon metrics with displayName: {} sessionId: {}",displayName,sessionId);
  OrcMetadataCache metadataCache=null;
  LowLevelCache cache=null;
  BufferUsageManager bufferManager=null;
  if (useLowLevelCache) {
    boolean useLrfu=HiveConf.getBoolVar(conf,HiveConf.ConfVars.LLAP_USE_LRFU);
    LowLevelCachePolicy cachePolicy=useLrfu ? new LowLevelLrfuCachePolicy(conf) : new LowLevelFifoCachePolicy(conf);
    LowLevelCacheMemoryManager memManager=new LowLevelCacheMemoryManager(conf,cachePolicy,cacheMetrics);
    EvictionAwareAllocator allocator=new BuddyAllocator(conf,memManager,cacheMetrics);
    this.allocator=allocator;
    LowLevelCacheImpl cacheImpl=new LowLevelCacheImpl(cacheMetrics,cachePolicy,allocator,true);
    cache=cacheImpl;
    boolean useGapCache=HiveConf.getBoolVar(conf,ConfVars.LLAP_CACHE_ENABLE_ORC_GAP_CACHE);
    metadataCache=new OrcMetadataCache(memManager,cachePolicy,useGapCache);
    cachePolicy.setEvictionListener(new EvictionDispatcher(cache,metadataCache));
    cachePolicy.setParentDebugDumper(cacheImpl);
    cacheImpl.startThreads();
    bufferManager=cacheImpl;
  }
 else {
    this.allocator=new SimpleAllocator(conf);
    SimpleBufferManager sbm=new SimpleBufferManager(allocator,cacheMetrics);
    bufferManager=sbm;
    cache=sbm;
  }
  int numThreads=HiveConf.getIntVar(conf,HiveConf.ConfVars.LLAP_IO_THREADPOOL_SIZE);
  executor=new StatsRecordingThreadPool(numThreads,numThreads,0L,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>(),new ThreadFactoryBuilder().setNameFormat("IO-Elevator-Thread-%d").setDaemon(true).build());
  this.cvp=new OrcColumnVectorProducer(metadataCache,cache,bufferManager,conf,cacheMetrics,ioMetrics);
  LOG.info("LLAP IO initialized");
  registerMXBeans();
}
