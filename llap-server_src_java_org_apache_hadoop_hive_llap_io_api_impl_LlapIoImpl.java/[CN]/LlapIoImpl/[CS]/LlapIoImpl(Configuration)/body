{
  String ioMode=HiveConf.getVar(conf,HiveConf.ConfVars.LLAP_IO_MEMORY_MODE);
  boolean useLowLevelCache=LlapIoImpl.MODE_CACHE.equalsIgnoreCase(ioMode), useAllocOnly=!useLowLevelCache && LlapIoImpl.MODE_ALLOCATOR.equalsIgnoreCase(ioMode);
  LOG.info("Initializing LLAP IO in {} mode",ioMode);
  String displayName="LlapDaemonCacheMetrics-" + MetricsUtils.getHostName();
  String sessionId=conf.get("llap.daemon.metrics.sessionid");
  this.cacheMetrics=LlapDaemonCacheMetrics.create(displayName,sessionId);
  displayName="LlapDaemonQueueMetrics-" + MetricsUtils.getHostName();
  int[] intervals=conf.getInts(String.valueOf(HiveConf.ConfVars.LLAP_QUEUE_METRICS_PERCENTILE_INTERVALS));
  this.queueMetrics=LlapDaemonQueueMetrics.create(displayName,sessionId,intervals);
  LOG.info("Started llap daemon metrics with displayName: {} sessionId: {}",displayName,sessionId);
  OrcMetadataCache metadataCache=null;
  LowLevelCacheImpl orcCache=null;
  BufferUsageManager bufferManager=null;
  if (useLowLevelCache) {
    boolean useLrfu=HiveConf.getBoolVar(conf,HiveConf.ConfVars.LLAP_USE_LRFU);
    LowLevelCachePolicy cachePolicy=useLrfu ? new LowLevelLrfuCachePolicy(conf) : new LowLevelFifoCachePolicy(conf);
    LowLevelCacheMemoryManager memManager=new LowLevelCacheMemoryManager(conf,cachePolicy,cacheMetrics);
    EvictionAwareAllocator allocator=new BuddyAllocator(conf,memManager,cacheMetrics);
    this.allocator=allocator;
    orcCache=new LowLevelCacheImpl(cacheMetrics,cachePolicy,allocator,true);
    metadataCache=new OrcMetadataCache(memManager,cachePolicy);
    cachePolicy.setEvictionListener(new EvictionDispatcher(orcCache,metadataCache));
    cachePolicy.setParentDebugDumper(orcCache);
    orcCache.init();
    bufferManager=orcCache;
  }
 else {
    if (useAllocOnly) {
      LowLevelCacheMemoryManager memManager=new LowLevelCacheMemoryManager(conf,null,cacheMetrics);
      allocator=new BuddyAllocator(conf,memManager,cacheMetrics);
    }
 else {
      allocator=new SimpleAllocator(conf);
    }
    bufferManager=new SimpleBufferManager(allocator,cacheMetrics);
  }
  int numThreads=HiveConf.getIntVar(conf,HiveConf.ConfVars.LLAP_IO_THREADPOOL_SIZE);
  executor=MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(numThreads,new ThreadFactoryBuilder().setNameFormat("IO-Elevator-Thread-%d").setDaemon(true).build()));
  this.cvp=new OrcColumnVectorProducer(metadataCache,orcCache,bufferManager,conf,cacheMetrics,queueMetrics);
  LOG.info("LLAP IO initialized");
  registerMXBeans();
}
