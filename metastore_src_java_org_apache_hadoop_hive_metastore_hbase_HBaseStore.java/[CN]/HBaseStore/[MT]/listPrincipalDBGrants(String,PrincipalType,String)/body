{
  List<PrivilegeGrantInfo> grants;
  List<HiveObjectPrivilege> privileges=new ArrayList<HiveObjectPrivilege>();
  boolean commit=false;
  openTransaction();
  try {
    Database db=getHBase().getDb(dbName);
    if (db == null)     return privileges;
    PrincipalPrivilegeSet pps=db.getPrivileges();
    if (pps == null)     return privileges;
    Map<String,List<PrivilegeGrantInfo>> map;
switch (principalType) {
case USER:
      map=pps.getUserPrivileges();
    break;
case ROLE:
  map=pps.getRolePrivileges();
break;
default :
throw new RuntimeException("Unknown or unsupported principal type " + principalType.toString());
}
if (map == null) return privileges;
grants=map.get(principalName);
if (grants == null || grants.size() == 0) return privileges;
for (PrivilegeGrantInfo pgi : grants) {
privileges.add(new HiveObjectPrivilege(new HiveObjectRef(HiveObjectType.DATABASE,dbName,null,null,null),principalName,principalType,pgi));
}
commit=true;
return privileges;
}
 catch (IOException e) {
throw new RuntimeException(e);
}
 finally {
commitOrRoleBack(commit);
}
}
