{
  PrivilegeInfo result=new PrivilegeInfo();
switch (privilege.getHiveObject().getObjectType()) {
case GLOBAL:
    try {
      result.privSet=createOnNull(getHBase().getGlobalPrivs());
    }
 catch (    IOException e) {
      LOG.error("Unable to fetch global privileges",e);
      throw new MetaException("Unable to fetch global privileges, " + e.getMessage());
    }
  result.typeErrMsg="global";
break;
case DATABASE:
result.db=getDatabase(privilege.getHiveObject().getDbName());
result.typeErrMsg="database " + result.db.getName();
result.privSet=createOnNull(result.db.getPrivileges());
break;
case TABLE:
result.table=getTable(privilege.getHiveObject().getDbName(),privilege.getHiveObject().getObjectName());
result.typeErrMsg="table " + result.table.getTableName();
result.privSet=createOnNull(result.table.getPrivileges());
break;
case PARTITION:
case COLUMN:
throw new RuntimeException("HBase metastore does not support partition or column " + "permissions");
default :
throw new RuntimeException("Woah bad, unknown object type " + privilege.getHiveObject().getObjectType());
}
Map<String,List<PrivilegeGrantInfo>> grantInfos;
switch (privilege.getPrincipalType()) {
case USER:
grantInfos=result.privSet.getUserPrivileges();
result.typeErrMsg="user";
break;
case GROUP:
throw new RuntimeException("HBase metastore does not support group permissions");
case ROLE:
grantInfos=result.privSet.getRolePrivileges();
result.typeErrMsg="role";
break;
default :
throw new RuntimeException("Woah bad, unknown principal type " + privilege.getPrincipalType());
}
result.grants=grantInfos.get(privilege.getPrincipalName());
if (result.grants == null) {
result.grants=new ArrayList<PrivilegeGrantInfo>();
grantInfos.put(privilege.getPrincipalName(),result.grants);
}
return result;
}
