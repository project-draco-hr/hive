{
  final List<RexNode> joinFilters=RelOptUtil.conjunctions(join.getCondition());
  if (((HiveJoinRel)join).isLeftSemiJoin()) {
    return;
  }
  if (filter == null) {
    boolean onlyTrueFilter=true;
    for (    RexNode joinFilter : joinFilters) {
      if (!joinFilter.isAlwaysTrue()) {
        onlyTrueFilter=false;
        break;
      }
    }
    if (onlyTrueFilter) {
      return;
    }
  }
  final List<RexNode> aboveFilters=filter != null ? RelOptUtil.conjunctions(filter.getCondition()) : ImmutableList.<RexNode>of();
  List<RexNode> leftFilters=new ArrayList<RexNode>();
  List<RexNode> rightFilters=new ArrayList<RexNode>();
  int origJoinFiltersSz=joinFilters.size();
  boolean filterPushed=false;
  if (RelOptUtil.classifyFilters(join,aboveFilters,join.getJoinType() == JoinRelType.INNER,!join.getJoinType().generatesNullsOnLeft(),!join.getJoinType().generatesNullsOnRight(),joinFilters,leftFilters,rightFilters)) {
    filterPushed=true;
  }
  ListIterator<RexNode> filterIter=joinFilters.listIterator();
  while (filterIter.hasNext()) {
    RexNode exp=filterIter.next();
    if (exp instanceof RexCall) {
      RexCall c=(RexCall)exp;
      if (c.getOperator().getKind() == SqlKind.EQUALS) {
        continue;
      }
    }
    aboveFilters.add(exp);
    filterIter.remove();
  }
  if (leftFilters.size() == 0 && rightFilters.size() == 0 && joinFilters.size() == origJoinFiltersSz) {
    filterPushed=false;
  }
  if (RelOptUtil.classifyFilters(join,joinFilters,false,!join.getJoinType().generatesNullsOnRight(),!join.getJoinType().generatesNullsOnLeft(),joinFilters,leftFilters,rightFilters)) {
    filterPushed=true;
  }
  if (!filterPushed) {
    return;
  }
  removeAlwaysTruePredicates(leftFilters);
  removeAlwaysTruePredicates(rightFilters);
  removeAlwaysTruePredicates(joinFilters);
  RexBuilder rexBuilder=join.getCluster().getRexBuilder();
  RelNode leftRel=createFilterOnRel(rexBuilder,join.getLeft(),leftFilters);
  RelNode rightRel=createFilterOnRel(rexBuilder,join.getRight(),rightFilters);
  RexNode joinFilter;
  if (joinFilters.size() == 0) {
    if ((leftFilters.size() == 0) && (rightFilters.size() == 0)) {
      return;
    }
    joinFilter=rexBuilder.makeLiteral(true);
  }
 else {
    joinFilter=RexUtil.composeConjunction(rexBuilder,joinFilters,true);
  }
  RelNode newJoinRel=HiveJoinRel.getJoin(join.getCluster(),leftRel,rightRel,joinFilter,join.getJoinType(),false);
  RelNode newRel=createFilterOnRel(rexBuilder,newJoinRel,aboveFilters);
  call.transformTo(newRel);
}
