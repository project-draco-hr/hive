{
  FileSystem inpFs=FileSystem.get(job);
  int numEmptyPaths=0;
  if (work.getPathToAliases().isEmpty() && !work.getAliasToWork().isEmpty()) {
    String oneAlias=(String)work.getAliasToWork().keySet().toArray()[0];
    Class<? extends HiveOutputFormat> outFileFormat=(Class<? extends HiveOutputFormat>)Class.forName("org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat");
    String newFile="file:" + hiveScratchDir + File.separator+ (++numEmptyPaths);
    Path newPath=new Path(newFile);
    LOG.info("Changed input file to " + newPath.toString());
    Map<String,ArrayList<String>> pathToAliases=work.getPathToAliases();
    ArrayList<String> newList=new ArrayList<String>();
    newList.add(oneAlias);
    pathToAliases.put(newPath.toString(),newList);
    Map<String,partitionDesc> pathToPartitionInfo=work.getPathToPartitionInfo();
    partitionDesc pDesc=new partitionDesc();
    tableDesc tDesc=new tableDesc(LazySimpleSerDe.class,SequenceFileInputFormat.class,SequenceFileOutputFormat.class,new Properties());
    pDesc.setTableDesc(tDesc);
    pathToPartitionInfo.put(newPath.toString(),pDesc);
    RecordWriter recWriter=outFileFormat.newInstance().getHiveRecordWriter(job,newPath,Text.class,false,new Properties(),null);
    recWriter.close(false);
    FileInputFormat.addInputPaths(job,newPath.toString());
  }
 else {
    for (    String onefile : work.getPathToAliases().keySet()) {
      LOG.info("Adding input file " + onefile);
      Path dirPath=new Path(onefile);
      boolean emptyInput=true;
      if (inpFs.exists(dirPath)) {
        FileStatus[] fStats=inpFs.listStatus(dirPath);
        if (fStats.length > 0)         emptyInput=false;
      }
      if (emptyInput) {
        Class<? extends HiveOutputFormat> outFileFormat=work.getPathToPartitionInfo().get(onefile).getTableDesc().getOutputFileFormatClass();
        String newFile="file:" + hiveScratchDir + File.separator+ (++numEmptyPaths);
        Path newPath=new Path(newFile);
        LOG.info("Changed input file to " + newPath.toString());
        Map<String,ArrayList<String>> pathToAliases=work.getPathToAliases();
        pathToAliases.put(newPath.toString(),pathToAliases.get(onefile));
        pathToAliases.remove(onefile);
        Map<String,partitionDesc> pathToPartitionInfo=work.getPathToPartitionInfo();
        pathToPartitionInfo.put(newPath.toString(),pathToPartitionInfo.get(onefile));
        pathToPartitionInfo.remove(onefile);
        onefile=newPath.toString();
        RecordWriter recWriter=outFileFormat.newInstance().getHiveRecordWriter(job,newPath,Text.class,false,new Properties(),null);
        recWriter.close(false);
      }
      FileInputFormat.addInputPaths(job,onefile);
    }
  }
}
