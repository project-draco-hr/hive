{
  String planFileName=null;
  ArrayList<String> jobConfArgs=new ArrayList<String>();
  boolean isSilent=false;
  String files=null;
  try {
    for (int i=0; i < args.length; i++) {
      if (args[i].equals("-plan")) {
        planFileName=args[++i];
        System.out.println("plan = " + planFileName);
      }
 else       if (args[i].equals("-jobconf")) {
        jobConfArgs.add(args[++i]);
      }
 else       if (args[i].equals("-silent")) {
        isSilent=true;
      }
 else       if (args[i].equals("-files")) {
        files=args[++i];
      }
    }
  }
 catch (  IndexOutOfBoundsException e) {
    System.err.println("Missing argument to option");
    printUsage();
  }
  if (isSilent) {
    BasicConfigurator.resetConfiguration();
    BasicConfigurator.configure(new NullAppender());
  }
  if (planFileName == null) {
    System.err.println("Must specify Plan File Name");
    printUsage();
  }
  JobConf conf=new JobConf(ExecDriver.class);
  for (  String one : jobConfArgs) {
    int eqIndex=one.indexOf('=');
    if (eqIndex != -1) {
      try {
        conf.set(one.substring(0,eqIndex),URLDecoder.decode(one.substring(eqIndex + 1),"UTF-8"));
      }
 catch (      UnsupportedEncodingException e) {
        System.err.println("Unexpected error " + e.getMessage() + " while encoding "+ one.substring(eqIndex + 1));
        System.exit(3);
      }
    }
  }
  if (files != null) {
    conf.set("tmpfiles",files);
  }
  URI pathURI=(new Path(planFileName)).toUri();
  InputStream pathData;
  if (StringUtils.isEmpty(pathURI.getScheme())) {
    pathData=new FileInputStream(planFileName);
  }
 else {
    FileSystem fs=FileSystem.get(conf);
    pathData=fs.open(new Path(planFileName));
  }
  boolean localMode=HiveConf.getVar(conf,HiveConf.ConfVars.HADOOPJT).equals("local");
  if (localMode) {
    String auxJars=HiveConf.getVar(conf,HiveConf.ConfVars.HIVEAUXJARS);
    if (StringUtils.isNotBlank(auxJars)) {
      try {
        Utilities.addToClassPath(StringUtils.split(auxJars,","));
      }
 catch (      Exception e) {
        throw new HiveException(e.getMessage(),e);
      }
    }
  }
  mapredWork plan=Utilities.deserializeMapRedWork(pathData);
  ExecDriver ed=new ExecDriver(plan,conf,isSilent);
  int ret=ed.execute();
  if (ret != 0) {
    System.out.println("Job Failed");
    System.exit(2);
  }
}
