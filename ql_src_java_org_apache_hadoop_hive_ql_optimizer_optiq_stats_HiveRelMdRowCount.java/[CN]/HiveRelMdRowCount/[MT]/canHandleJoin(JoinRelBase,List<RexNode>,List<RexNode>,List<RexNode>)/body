{
  if (joinFilters.size() != 1) {
    return null;
  }
  RexNode joinCond=joinFilters.get(0);
  int leftColIdx;
  int rightColIdx;
  if (!(joinCond instanceof RexCall)) {
    return null;
  }
  if (((RexCall)joinCond).getOperator() != SqlStdOperatorTable.EQUALS) {
    return null;
  }
  BitSet leftCols=RelOptUtil.InputFinder.bits(((RexCall)joinCond).getOperands().get(0));
  BitSet rightCols=RelOptUtil.InputFinder.bits(((RexCall)joinCond).getOperands().get(1));
  if (leftCols.cardinality() != 1 || rightCols.cardinality() != 1) {
    return null;
  }
  int nFieldsLeft=joinRel.getLeft().getRowType().getFieldList().size();
  int nFieldsRight=joinRel.getRight().getRowType().getFieldList().size();
  int nSysFields=joinRel.getSystemFieldList().size();
  BitSet rightFieldsBitSet=BitSets.range(nSysFields + nFieldsLeft,nSysFields + nFieldsLeft + nFieldsRight);
  if (BitSets.contains(rightFieldsBitSet,leftCols)) {
    BitSet t=leftCols;
    leftCols=rightCols;
    rightCols=t;
  }
  leftColIdx=leftCols.nextSetBit(0) - nSysFields;
  rightColIdx=rightCols.nextSetBit(0) - (nSysFields + nFieldsLeft);
  return new Pair<Integer,Integer>(leftColIdx,rightColIdx);
}
