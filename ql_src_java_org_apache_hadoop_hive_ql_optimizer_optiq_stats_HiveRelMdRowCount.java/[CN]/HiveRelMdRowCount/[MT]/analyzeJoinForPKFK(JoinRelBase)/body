{
  RelNode left=joinRel.getInputs().get(0);
  RelNode right=joinRel.getInputs().get(1);
  final List<RexNode> initJoinFilters=RelOptUtil.conjunctions(joinRel.getCondition());
  if (initJoinFilters.isEmpty()) {
    return null;
  }
  List<RexNode> leftFilters=new ArrayList<RexNode>();
  List<RexNode> rightFilters=new ArrayList<RexNode>();
  List<RexNode> joinFilters=new ArrayList<RexNode>(initJoinFilters);
  final Holder<JoinRelType> joinTypeHolder=Holder.of(joinRel.getJoinType());
  if (joinRel instanceof SemiJoinRel) {
    return null;
  }
  RelOptUtil.classifyFilters(joinRel,joinFilters,joinRel.getJoinType(),false,!joinRel.getJoinType().generatesNullsOnRight(),!joinRel.getJoinType().generatesNullsOnLeft(),joinFilters,leftFilters,rightFilters,joinTypeHolder,false);
  Pair<Integer,Integer> joinCols=canHandleJoin(joinRel,leftFilters,rightFilters,joinFilters);
  if (joinCols == null) {
    return null;
  }
  int leftColIdx=joinCols.left;
  int rightColIdx=joinCols.right;
  RexBuilder rexBuilder=joinRel.getCluster().getRexBuilder();
  RexNode leftPred=RexUtil.composeConjunction(rexBuilder,leftFilters,true);
  RexNode rightPred=RexUtil.composeConjunction(rexBuilder,rightFilters,true);
  BitSet lBitSet=BitSets.of(leftColIdx);
  BitSet rBitSet=BitSets.of(rightColIdx);
  boolean leftIsKey=(joinRel.getJoinType() == JoinRelType.INNER || joinRel.getJoinType() == JoinRelType.RIGHT) && !(joinRel instanceof SemiJoinRel) && isKey(lBitSet,left);
  boolean rightIsKey=(joinRel.getJoinType() == JoinRelType.INNER || joinRel.getJoinType() == JoinRelType.LEFT) && isKey(rBitSet,right);
  if (!leftIsKey && !rightIsKey) {
    return null;
  }
  double leftRowCount=RelMetadataQuery.getRowCount(left);
  double rightRowCount=RelMetadataQuery.getRowCount(right);
  if (leftIsKey && rightIsKey) {
    if (rightRowCount < leftRowCount) {
      leftIsKey=false;
    }
  }
  int pkSide=leftIsKey ? 0 : rightIsKey ? 1 : -1;
  boolean isPKSideSimpleTree=pkSide != -1 ? IsSimpleTreeOnJoinKey.check(pkSide == 0 ? left : right,pkSide == 0 ? leftColIdx : rightColIdx) : false;
  double leftNDV=isPKSideSimpleTree ? RelMetadataQuery.getDistinctRowCount(left,lBitSet,leftPred) : -1;
  double rightNDV=isPKSideSimpleTree ? RelMetadataQuery.getDistinctRowCount(right,rBitSet,rightPred) : -1;
  double ndvScalingFactor=1.0;
  if (isPKSideSimpleTree) {
    ndvScalingFactor=pkSide == 0 ? leftNDV / rightNDV : rightNDV / leftNDV;
  }
  if (pkSide == 0) {
    FKSideInfo fkInfo=new FKSideInfo(rightRowCount,rightNDV);
    double pkSelectivity=pkSelectivity(joinRel,true,left,leftRowCount);
    PKSideInfo pkInfo=new PKSideInfo(leftRowCount,leftNDV,joinRel.getJoinType().generatesNullsOnRight() ? 1.0 : pkSelectivity);
    return new PKFKRelationInfo(1,fkInfo,pkInfo,ndvScalingFactor,isPKSideSimpleTree);
  }
  if (pkSide == 1) {
    FKSideInfo fkInfo=new FKSideInfo(leftRowCount,leftNDV);
    double pkSelectivity=pkSelectivity(joinRel,false,right,rightRowCount);
    PKSideInfo pkInfo=new PKSideInfo(rightRowCount,rightNDV,joinRel.getJoinType().generatesNullsOnLeft() ? 1.0 : pkSelectivity);
    return new PKFKRelationInfo(1,fkInfo,pkInfo,ndvScalingFactor,isPKSideSimpleTree);
  }
  return null;
}
