{
  Map<String,Long> results=new LinkedHashMap<String,Long>();
  Metrics allMetrics=metricsCollection.getAllMetrics();
  results.put("ExecutorDeserializeTime",allMetrics.executorDeserializeTime);
  results.put("ExecutorRunTime",allMetrics.executorRunTime);
  results.put("ResultSize",allMetrics.resultSize);
  results.put("JvmGCTime",allMetrics.jvmGCTime);
  results.put("ResultSerializationTime",allMetrics.resultSerializationTime);
  results.put("MemoryBytesSpilled",allMetrics.memoryBytesSpilled);
  results.put("DiskBytesSpilled",allMetrics.diskBytesSpilled);
  if (allMetrics.inputMetrics != null) {
    results.put("BytesRead",allMetrics.inputMetrics.bytesRead);
  }
  if (allMetrics.shuffleReadMetrics != null) {
    ShuffleReadMetrics shuffleReadMetrics=allMetrics.shuffleReadMetrics;
    long rbf=shuffleReadMetrics.remoteBlocksFetched;
    long lbf=shuffleReadMetrics.localBlocksFetched;
    results.put("RemoteBlocksFetched",rbf);
    results.put("LocalBlocksFetched",lbf);
    results.put("TotalBlocksFetched",lbf + rbf);
    results.put("FetchWaitTime",shuffleReadMetrics.fetchWaitTime);
    results.put("RemoteBytesRead",shuffleReadMetrics.remoteBytesRead);
  }
  if (allMetrics.shuffleWriteMetrics != null) {
    results.put("ShuffleBytesWritten",allMetrics.shuffleWriteMetrics.shuffleBytesWritten);
    results.put("ShuffleWriteTime",allMetrics.shuffleWriteMetrics.shuffleWriteTime);
  }
  return results;
}
