{
  Integer sparkJobId=jobHandle.getSparkJobIds().size() == 1 ? jobHandle.getSparkJobIds().get(0) : null;
  if (sparkJobId == null) {
    int duration=(int)((System.currentTimeMillis() - startTime) / 1000);
    if (duration <= WAIT_SUBMISSION_TIMEOUT) {
      return null;
    }
 else {
      LOG.info("Job hasn't been submitted after " + duration + "s. Aborting it.");
      jobHandle.cancel(false);
      return new SparkJobInfo(){
        @Override public int jobId(){
          return -1;
        }
        @Override public int[] stageIds(){
          return new int[0];
        }
        @Override public JobExecutionStatus status(){
          return JobExecutionStatus.FAILED;
        }
      }
;
    }
  }
  JobHandle<SparkJobInfo> getJobInfo=sparkClient.submit(new GetJobInfoJob(jobHandle.getClientJobId(),sparkJobId));
  try {
    return getJobInfo.get();
  }
 catch (  Throwable t) {
    LOG.warn("Error getting job info",t);
    return null;
  }
}
