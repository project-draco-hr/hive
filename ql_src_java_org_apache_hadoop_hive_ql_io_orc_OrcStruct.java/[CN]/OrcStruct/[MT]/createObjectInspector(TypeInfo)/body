{
switch (info.getCategory()) {
case PRIMITIVE:
switch (((PrimitiveTypeInfo)info).getPrimitiveCategory()) {
case FLOAT:
      return PrimitiveObjectInspectorFactory.writableFloatObjectInspector;
case DOUBLE:
    return PrimitiveObjectInspectorFactory.writableDoubleObjectInspector;
case BOOLEAN:
  return PrimitiveObjectInspectorFactory.writableBooleanObjectInspector;
case BYTE:
return PrimitiveObjectInspectorFactory.writableByteObjectInspector;
case SHORT:
return PrimitiveObjectInspectorFactory.writableShortObjectInspector;
case INT:
return PrimitiveObjectInspectorFactory.writableIntObjectInspector;
case LONG:
return PrimitiveObjectInspectorFactory.writableLongObjectInspector;
case BINARY:
return PrimitiveObjectInspectorFactory.writableBinaryObjectInspector;
case STRING:
return PrimitiveObjectInspectorFactory.writableStringObjectInspector;
case VARCHAR:
VarcharTypeParams varcharParams=(VarcharTypeParams)ParameterizedPrimitiveTypeUtils.getTypeParamsFromTypeInfo(info);
if (varcharParams == null) {
throw new IllegalArgumentException("varchar type used without type params");
}
return PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector((PrimitiveTypeInfo)info);
case TIMESTAMP:
return PrimitiveObjectInspectorFactory.javaTimestampObjectInspector;
case DATE:
return PrimitiveObjectInspectorFactory.javaDateObjectInspector;
case DECIMAL:
return PrimitiveObjectInspectorFactory.javaHiveDecimalObjectInspector;
default :
throw new IllegalArgumentException("Unknown primitive type " + ((PrimitiveTypeInfo)info).getPrimitiveCategory());
}
case STRUCT:
return new OrcStructInspector((StructTypeInfo)info);
case UNION:
return new OrcUnion.OrcUnionObjectInspector((UnionTypeInfo)info);
case MAP:
return new OrcMapObjectInspector((MapTypeInfo)info);
case LIST:
return new OrcListObjectInspector((ListTypeInfo)info);
default :
throw new IllegalArgumentException("Unknown type " + info.getCategory());
}
}
