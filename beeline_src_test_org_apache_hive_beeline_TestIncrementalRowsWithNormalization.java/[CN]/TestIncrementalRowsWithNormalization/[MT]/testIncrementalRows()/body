{
  Integer incrementalBufferRows=5;
  BeeLineOpts mockBeeLineOpts=mock(BeeLineOpts.class);
  when(mockBeeLineOpts.getIncrementalBufferRows()).thenReturn(incrementalBufferRows);
  when(mockBeeLineOpts.getMaxColumnWidth()).thenReturn(BeeLineOpts.DEFAULT_MAX_COLUMN_WIDTH);
  when(mockBeeLineOpts.getNumberFormat()).thenReturn("default");
  when(mockBeeLineOpts.getNullString()).thenReturn("NULL");
  BeeLine mockBeeline=mock(BeeLine.class);
  when(mockBeeline.getOpts()).thenReturn(mockBeeLineOpts);
  ResultSet mockResultSet=mock(ResultSet.class);
  ResultSetMetaData mockResultSetMetaData=mock(ResultSetMetaData.class);
  when(mockResultSetMetaData.getColumnCount()).thenReturn(1);
  when(mockResultSetMetaData.getColumnLabel(1)).thenReturn("Mock Table");
  when(mockResultSet.getMetaData()).thenReturn(mockResultSetMetaData);
  when(mockResultSet.next()).thenAnswer(new Answer<Boolean>(){
    private int iterations=10;
    @Override public Boolean answer(    InvocationOnMock invocation){
      return this.iterations-- > 0;
    }
  }
);
  when(mockResultSet.getString(1)).thenReturn("Hello World");
  IncrementalRowsWithNormalization incrementalRowsWithNormalization=new IncrementalRowsWithNormalization(mockBeeline,mockResultSet);
  verify(mockResultSet,times(5)).next();
  for (int i=0; i < incrementalBufferRows + 1; i++) {
    incrementalRowsWithNormalization.next();
  }
  verify(mockResultSet,times(5)).next();
  incrementalRowsWithNormalization.next();
  verify(mockResultSet,times(10)).next();
}
