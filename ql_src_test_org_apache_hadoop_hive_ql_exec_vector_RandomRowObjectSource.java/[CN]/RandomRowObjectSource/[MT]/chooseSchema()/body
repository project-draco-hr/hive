{
  columnCount=1 + r.nextInt(20);
  typeNames=new ArrayList<String>(columnCount);
  primitiveCategories=new PrimitiveCategory[columnCount];
  primitiveTypeInfos=new PrimitiveTypeInfo[columnCount];
  primitiveObjectInspectorList=new ArrayList<ObjectInspector>(columnCount);
  List<String> columnNames=new ArrayList<String>(columnCount);
  for (int c=0; c < columnCount; c++) {
    columnNames.add(String.format("col%d",c));
    int typeNum=r.nextInt(possibleHiveTypeNames.length);
    String typeName=possibleHiveTypeNames[typeNum];
    if (typeName.equals("char")) {
      int maxLength=1 + r.nextInt(100);
      typeName=String.format("char(%d)",maxLength);
    }
 else     if (typeName.equals("varchar")) {
      int maxLength=1 + r.nextInt(100);
      typeName=String.format("varchar(%d)",maxLength);
    }
 else     if (typeName.equals("decimal")) {
      typeName=String.format("decimal(%d,%d)",HiveDecimal.SYSTEM_DEFAULT_PRECISION,HiveDecimal.SYSTEM_DEFAULT_SCALE);
    }
    PrimitiveTypeInfo primitiveTypeInfo=(PrimitiveTypeInfo)TypeInfoUtils.getTypeInfoFromTypeString(typeName);
    primitiveTypeInfos[c]=primitiveTypeInfo;
    PrimitiveCategory primitiveCategory=primitiveTypeInfo.getPrimitiveCategory();
    primitiveCategories[c]=primitiveCategory;
    primitiveObjectInspectorList.add(PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(primitiveTypeInfo));
    typeNames.add(typeName);
  }
  rowStructObjectInspector=ObjectInspectorFactory.getStandardStructObjectInspector(columnNames,primitiveObjectInspectorList);
}
