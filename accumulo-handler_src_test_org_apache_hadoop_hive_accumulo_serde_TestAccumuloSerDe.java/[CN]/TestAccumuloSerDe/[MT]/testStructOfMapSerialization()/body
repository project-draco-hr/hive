{
  List<String> columns=Arrays.asList("row","col");
  List<String> structColNames=Arrays.asList("map1","map2");
  TypeInfo mapTypeInfo=TypeInfoFactory.getMapTypeInfo(TypeInfoFactory.stringTypeInfo,TypeInfoFactory.stringTypeInfo);
  List<TypeInfo> types=Arrays.<TypeInfo>asList(TypeInfoFactory.getStructTypeInfo(structColNames,Arrays.asList(mapTypeInfo,mapTypeInfo)),TypeInfoFactory.stringTypeInfo);
  Properties tableProperties=new Properties();
  tableProperties.setProperty(AccumuloSerDeParameters.COLUMN_MAPPINGS,":rowid,cf:cq");
  tableProperties.setProperty(serdeConstants.LIST_COLUMNS,Joiner.on(',').join(columns));
  tableProperties.setProperty(serdeConstants.LIST_COLUMN_TYPES,Joiner.on(',').join(types));
  AccumuloSerDeParameters accumuloSerDeParams=new AccumuloSerDeParameters(new Configuration(),tableProperties,AccumuloSerDe.class.getSimpleName());
  LazySerDeParameters serDeParams=accumuloSerDeParams.getSerDeParameters();
  byte[] seps=serDeParams.getSeparators();
  TypeInfo stringTypeInfo=TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.STRING_TYPE_NAME);
  LazyStringObjectInspector stringOI=(LazyStringObjectInspector)LazyFactory.createLazyObjectInspector(stringTypeInfo,new byte[]{0},0,serDeParams.getNullSequence(),serDeParams.isEscaped(),serDeParams.getEscapeChar());
  LazyMapObjectInspector mapOI=LazyObjectInspectorFactory.getLazySimpleMapObjectInspector(stringOI,stringOI,seps[3],seps[4],serDeParams.getNullSequence(),serDeParams.isEscaped(),serDeParams.getEscapeChar());
  LazySimpleStructObjectInspector rowStructOI=(LazySimpleStructObjectInspector)LazyObjectInspectorFactory.getLazySimpleStructObjectInspector(structColNames,Arrays.<ObjectInspector>asList(mapOI,mapOI),(byte)seps[2],serDeParams.getNullSequence(),serDeParams.isLastColumnTakesRest(),serDeParams.isEscaped(),serDeParams.getEscapeChar());
  LazySimpleStructObjectInspector structOI=(LazySimpleStructObjectInspector)LazyObjectInspectorFactory.getLazySimpleStructObjectInspector(columns,Arrays.asList(rowStructOI,stringOI),seps[1],serDeParams.getNullSequence(),serDeParams.isLastColumnTakesRest(),serDeParams.isEscaped(),serDeParams.getEscapeChar());
  AccumuloRowSerializer serializer=new AccumuloRowSerializer(0,serDeParams,accumuloSerDeParams.getColumnMappings(),new ColumnVisibility(),accumuloSerDeParams.getRowIdFactory());
  Map<String,String> map1=new HashMap<String,String>(), map2=new HashMap<String,String>();
  map1.put("key10","value10");
  map1.put("key11","value11");
  map2.put("key20","value20");
  map2.put("key21","value21");
  ByteArrayRef byteRef=new ByteArrayRef();
  String accumuloRow="key10\5value10\4key11\5value11\3key20\5value20\4key21\5value21";
  LazyStruct entireStruct=(LazyStruct)LazyFactory.createLazyObject(structOI);
  byteRef.setData((accumuloRow + "\2foo").getBytes());
  entireStruct.init(byteRef,0,byteRef.getData().length);
  Mutation m=serializer.serialize(entireStruct,structOI);
  Assert.assertArrayEquals(accumuloRow.getBytes(),m.getRow());
  Assert.assertEquals(1,m.getUpdates().size());
  ColumnUpdate update=m.getUpdates().get(0);
  Assert.assertEquals("cf",new String(update.getColumnFamily()));
  Assert.assertEquals("cq",new String(update.getColumnQualifier()));
  Assert.assertEquals("foo",new String(update.getValue()));
  AccumuloHiveRow haRow=new AccumuloHiveRow(new String(m.getRow()));
  haRow.add("cf","cq","foo".getBytes());
  LazyAccumuloRow lazyAccumuloRow=new LazyAccumuloRow(structOI);
  lazyAccumuloRow.init(haRow,accumuloSerDeParams.getColumnMappings(),accumuloSerDeParams.getRowIdFactory());
  List<Object> objects=lazyAccumuloRow.getFieldsAsList();
  Assert.assertEquals(2,objects.size());
  Assert.assertEquals("foo",objects.get(1).toString());
  LazyStruct rowStruct=(LazyStruct)objects.get(0);
  List<Object> rowObjects=rowStruct.getFieldsAsList();
  Assert.assertEquals(2,rowObjects.size());
  LazyMap rowMap=(LazyMap)rowObjects.get(0);
  Map<?,?> actualMap=rowMap.getMap();
  System.out.println("Actual map 1: " + actualMap);
  Map<String,String> actualStringMap=new HashMap<String,String>();
  for (  Entry<?,?> entry : actualMap.entrySet()) {
    actualStringMap.put(entry.getKey().toString(),entry.getValue().toString());
  }
  Assert.assertEquals(map1,actualStringMap);
  rowMap=(LazyMap)rowObjects.get(1);
  actualMap=rowMap.getMap();
  System.out.println("Actual map 2: " + actualMap);
  actualStringMap=new HashMap<String,String>();
  for (  Entry<?,?> entry : actualMap.entrySet()) {
    actualStringMap.put(entry.getKey().toString(),entry.getValue().toString());
  }
  Assert.assertEquals(map2,actualStringMap);
}
