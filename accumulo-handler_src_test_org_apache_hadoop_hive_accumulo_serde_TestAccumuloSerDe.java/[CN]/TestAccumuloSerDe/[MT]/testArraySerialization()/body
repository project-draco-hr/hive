{
  Properties properties=new Properties();
  Configuration conf=new Configuration();
  properties.setProperty(AccumuloSerDeParameters.COLUMN_MAPPINGS,":rowID,cf:vals");
  properties.setProperty(serdeConstants.LIST_COLUMNS,"row,values");
  properties.setProperty(serdeConstants.LIST_COLUMN_TYPES,"string,array<string>");
  properties.setProperty(serdeConstants.COLLECTION_DELIM,":");
  char separator=':';
  serde.initialize(conf,properties);
  AccumuloHiveRow row=new AccumuloHiveRow();
  row.setRowId("r1");
  row.add("cf","vals",("value1" + separator + "value2"+ separator+ "value3").getBytes());
  Object obj=serde.deserialize(row);
  assertNotNull(obj);
  assertTrue(obj instanceof LazyAccumuloRow);
  LazyAccumuloRow lazyRow=(LazyAccumuloRow)obj;
  Object field0=lazyRow.getField(0);
  assertNotNull(field0);
  assertTrue(field0 instanceof LazyString);
  assertEquals(row.getRowId(),((LazyString)field0).getWritableObject().toString());
  Object field1=lazyRow.getField(1);
  assertNotNull(field1);
  assertTrue(field1 instanceof LazyArray);
  LazyArray array=(LazyArray)field1;
  List<Object> values=array.getList();
  assertEquals(3,values.size());
  for (int i=0; i < 3; i++) {
    Object o=values.get(i);
    assertNotNull(o);
    assertTrue(o instanceof LazyString);
    assertEquals("value" + (i + 1),((LazyString)o).getWritableObject().toString());
  }
}
