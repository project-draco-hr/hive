{
  FilterPredicate result=null;
switch (op) {
case IN:
    for (    Object literal : literals) {
      if (result == null) {
        result=buildPredict(PredicateLeaf.Operator.EQUALS,literal,columnName);
      }
 else {
        result=or(result,buildPredict(PredicateLeaf.Operator.EQUALS,literal,columnName));
      }
    }
  return result;
case BETWEEN:
if (literals.size() != 2) {
  throw new RuntimeException("Not able to build 'between' operation filter with " + literals + " which needs two literals");
}
Object min=literals.get(0);
Object max=literals.get(1);
FilterPredicate lt=not(buildPredict(PredicateLeaf.Operator.LESS_THAN_EQUALS,min,columnName));
FilterPredicate gt=buildPredict(PredicateLeaf.Operator.LESS_THAN,max,columnName);
result=FilterApi.and(gt,lt);
return result;
default :
throw new RuntimeException("Unknown PredicateLeaf Operator type: " + op);
}
}
