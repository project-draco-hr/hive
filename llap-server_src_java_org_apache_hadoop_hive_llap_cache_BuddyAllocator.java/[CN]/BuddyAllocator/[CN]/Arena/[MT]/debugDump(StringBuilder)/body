{
  result.append("\nArena: ");
  if (data == null) {
    result.append(" not allocated");
    return;
  }
  for (int i=0; i < headers.length; ++i) {
    byte header=headers[i];
    if (header == 0)     continue;
    int freeListIx=(header >> 1) - 1, offset=offsetFromHeaderIndex(i);
    boolean isFree=(header & 1) == 0;
    result.append("\n  block " + i + " at "+ offset+ ": size "+ (1 << (freeListIx + minAllocLog2))+ ", "+ (isFree ? "free" : "allocated"));
  }
  int allocSize=minAllocation;
  for (int i=0; i < freeLists.length; ++i, allocSize<<=1) {
    result.append("\n  free list for size " + allocSize + ": ");
    int nextItem=freeLists[i].listHead;
    while (nextItem >= 0) {
      result.append(nextItem + ", ");
      nextItem=data.getInt(offsetFromHeaderIndex(nextItem));
    }
  }
}
