{
  result.append("\nArena: ");
  if (data == null) {
    result.append(" not allocated");
    return;
  }
  byte[] headers=new byte[this.headers.length];
  System.arraycopy(this.headers,0,headers,0,headers.length);
  int allocSize=minAllocation;
  for (int i=0; i < freeLists.length; ++i, allocSize<<=1) {
    result.append("\n  free list for size " + allocSize + ": ");
    FreeList freeList=freeLists[i];
    freeList.lock.lock();
    try {
      int nextHeaderIx=freeList.listHead;
      while (nextHeaderIx >= 0) {
        result.append(nextHeaderIx + ", ");
        nextHeaderIx=data.getInt(offsetFromHeaderIndex(nextHeaderIx));
      }
    }
  finally {
      freeList.lock.unlock();
    }
  }
  for (int i=0; i < headers.length; ++i) {
    byte header=headers[i];
    if (header == 0)     continue;
    int freeListIx=freeListFromHeader(header), offset=offsetFromHeaderIndex(i);
    boolean isFree=(header & 1) == 0;
    result.append("\n  block " + i + " at "+ offset+ ": size "+ (1 << (freeListIx + minAllocLog2))+ ", "+ (isFree ? "free" : "allocated"));
  }
}
