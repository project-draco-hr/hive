{
  TypeDescription schema=TypeDescription.createString();
  Writer writer=OrcFile.createWriter(testFilePath,OrcFile.writerOptions(conf).setSchema(schema).compress(CompressionKind.NONE).version(OrcFile.Version.V_0_11).bufferSize(10000));
  VectorizedRowBatch batch=schema.createRowBatch();
  BytesColumnVector string=(BytesColumnVector)batch.cols[0];
  for (int i=0; i < 20000; i++) {
    if (batch.size == batch.getMaxSize()) {
      writer.addRowBatch(batch);
      batch.reset();
    }
    string.setVal(batch.size++,String.valueOf(i).getBytes());
  }
  writer.addRowBatch(batch);
  writer.close();
  Reader reader=OrcFile.createReader(testFilePath,OrcFile.readerOptions(conf).filesystem(fs));
  batch=reader.getSchema().createRowBatch();
  string=(BytesColumnVector)batch.cols[0];
  RecordReader rows=reader.rows();
  int idx=0;
  while (rows.nextBatch(batch)) {
    for (int r=0; r < batch.size; ++r) {
      assertEquals(String.valueOf(idx++),string.toString(r));
    }
  }
  for (  StripeInformation stripe : reader.getStripes()) {
    OrcProto.StripeFooter footer=((RecordReaderImpl)rows).readStripeFooter(stripe);
    for (int i=0; i < footer.getColumnsCount(); ++i) {
      OrcProto.ColumnEncoding encoding=footer.getColumns(i);
      assertEquals(OrcProto.ColumnEncoding.Kind.DICTIONARY,encoding.getKind());
    }
  }
}
