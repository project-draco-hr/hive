{
  try {
    startHiveServer();
    CLIService service=null;
    for (    Service s : server.getServices()) {
      if (s instanceof CLIService) {
        service=(CLIService)s;
      }
    }
    if (service == null) {
      service=new CLIService(server);
    }
    RetryingThriftCLIServiceClient.CLIServiceClientWrapper client=RetryingThriftCLIServiceClientTest.newRetryingCLIServiceClient(hiveConf);
    Map<String,String> conf=new HashMap<>();
    conf.put(HiveConf.ConfVars.HIVE_SERVER2_CLOSE_SESSION_ON_DISCONNECT.varname,"false");
    SessionHandle sessionHandle=client.openSession("anonymous","anonymous",conf);
    assertNotNull(sessionHandle);
    HiveSession session=service.getSessionManager().getSession(sessionHandle);
    OperationHandle op1=session.executeStatementAsync("show databases",null);
    assertNotNull(op1);
    client.closeTransport();
    assertEquals(session,service.getSessionManager().getSession(sessionHandle));
    OperationHandle op2=session.executeStatementAsync("show databases",null);
    assertNotNull(op2);
    client=RetryingThriftCLIServiceClientTest.newRetryingCLIServiceClient(hiveConf);
    client.closeSession(sessionHandle);
    for (    OperationHandle op : new OperationHandle[]{op1,op2}) {
      try {
        client.getOperationStatus(op);
        fail("Should have failed.");
      }
 catch (      HiveSQLException ignored) {
      }
    }
  }
  finally {
    stopHiveServer();
  }
}
