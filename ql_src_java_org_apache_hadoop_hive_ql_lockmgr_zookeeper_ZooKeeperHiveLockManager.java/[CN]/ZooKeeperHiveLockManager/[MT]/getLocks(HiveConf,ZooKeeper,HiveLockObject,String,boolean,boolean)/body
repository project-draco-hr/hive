{
  List<HiveLock> locks=new ArrayList<HiveLock>();
  List<String> children;
  boolean recurse=true;
  String commonParent;
  try {
    if (key != null) {
      commonParent="/" + parent + "/"+ key.getName();
      children=zkpClient.getChildren(commonParent,false);
      recurse=false;
    }
 else {
      commonParent="/" + parent;
      children=zkpClient.getChildren(commonParent,false);
    }
  }
 catch (  Exception e) {
    return locks;
  }
  Queue<String> childn=new LinkedList<String>();
  if (children != null && !children.isEmpty()) {
    for (    String child : children) {
      childn.add(commonParent + "/" + child);
    }
  }
  while (true) {
    String curChild=childn.poll();
    if (curChild == null) {
      return locks;
    }
    if (recurse) {
      try {
        children=zkpClient.getChildren(curChild,false);
        for (        String child : children) {
          childn.add(curChild + "/" + child);
        }
      }
 catch (      Exception e) {
      }
    }
    HiveLockMode mode=getLockMode(conf,curChild);
    if (mode == null) {
      continue;
    }
    HiveLockObjectData data=null;
    HiveLockObject obj=getLockObject(conf,curChild,mode,data,parent,verifyTablePartition);
    if (obj == null) {
      continue;
    }
    if ((key == null) || (obj.getName().equals(key.getName()))) {
      if (fetchData) {
        try {
          data=new HiveLockObjectData(new String(zkpClient.getData(curChild,new DummyWatcher(),null)));
          data.setClientIp(clientIp);
        }
 catch (        Exception e) {
          LOG.error("Error in getting data for " + curChild,e);
        }
      }
      obj.setData(data);
      HiveLock lck=(HiveLock)(new ZooKeeperHiveLock(curChild,obj,mode));
      locks.add(lck);
    }
  }
}
