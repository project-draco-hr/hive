{
  String res;
  List<String> names=new ArrayList<String>();
  String lastName;
  HiveLockObjectData lockData=key.getData();
  lockData.setClientIp(clientIp);
  if (parentCreated) {
    lastName=getLastObjectName(parent,key);
    names.add(lastName);
  }
 else {
    names=getObjectNames(key);
    lastName=names.get(names.size() - 1);
  }
  for (  String name : names) {
    try {
      res=createChild(name,new byte[0],CreateMode.PERSISTENT);
    }
 catch (    Exception e) {
      if (!(e instanceof KeeperException) || ((KeeperException)e).code() != KeeperException.Code.NODEEXISTS) {
        throw e;
      }
    }
  }
  res=createChild(getLockName(lastName,mode),key.getData().toString().getBytes(),keepAlive ? CreateMode.PERSISTENT_SEQUENTIAL : CreateMode.EPHEMERAL_SEQUENTIAL);
  int seqNo=getSequenceNumber(res,getLockName(lastName,mode));
  if (seqNo == -1) {
    curatorFramework.delete().forPath(res);
    return null;
  }
  List<String> children=curatorFramework.getChildren().forPath(lastName);
  String exLock=getLockName(lastName,HiveLockMode.EXCLUSIVE);
  String shLock=getLockName(lastName,HiveLockMode.SHARED);
  for (  String child : children) {
    child=lastName + "/" + child;
    int childSeq=seqNo;
    if (child.startsWith(exLock)) {
      childSeq=getSequenceNumber(child,exLock);
    }
    if ((mode == HiveLockMode.EXCLUSIVE) && child.startsWith(shLock)) {
      childSeq=getSequenceNumber(child,shLock);
    }
    if ((childSeq >= 0) && (childSeq < seqNo)) {
      try {
        curatorFramework.delete().forPath(res);
      }
  finally {
        if (LOG.isDebugEnabled()) {
          try {
            String data=new String(curatorFramework.getData().forPath(child));
            conflictingLocks.add(data);
          }
 catch (          Exception e) {
          }
        }
      }
      return null;
    }
  }
  return new ZooKeeperHiveLock(res,key,mode);
}
