{
  ArrayList<String> args=new ArrayList<String>();
  try {
    ArrayList<String> allFiles=new ArrayList();
    allFiles.add(TempletonUtils.hadoopFsFilename(jar,appConf,runAs));
    args.addAll(makeLauncherArgs(appConf,statusdir,completedUrl,allFiles));
    args.add("--");
    args.add(appConf.clusterHadoop());
    args.add("jar");
    args.add(TempletonUtils.hadoopFsPath(jar,appConf,runAs).getName());
    if (TempletonUtils.isset(mainClass))     args.add(mainClass);
    if (TempletonUtils.isset(libjars)) {
      args.add("-libjars");
      args.add(TempletonUtils.hadoopFsListAsString(libjars,appConf,runAs));
    }
    if (TempletonUtils.isset(files)) {
      args.add("-files");
      args.add(TempletonUtils.hadoopFsListAsString(files,appConf,runAs));
    }
    args.add("-D" + TempletonControllerJob.TOKEN_FILE_ARG_PLACEHOLDER);
    for (    String d : defines)     args.add("-D" + d);
    args.addAll(jarArgs);
  }
 catch (  FileNotFoundException e) {
    throw new BadParam(e.getMessage());
  }
catch (  URISyntaxException e) {
    throw new BadParam(e.getMessage());
  }
  return args;
}
