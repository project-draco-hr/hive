{
  UnsignedInt128 big=new UnsignedInt128((1L << 62) + (23L << 32) + 89L);
  big.shiftLeftDestructive(2);
  assertEquals(89 * 4,big.getV0());
  assertEquals(23 * 4,big.getV1());
  assertEquals(1,big.getV2());
  assertEquals(0,big.getV3());
  big.shiftLeftDestructive(32);
  assertEquals(0,big.getV0());
  assertEquals(89 * 4,big.getV1());
  assertEquals(23 * 4,big.getV2());
  assertEquals(1,big.getV3());
  big.shiftRightDestructive(2,true);
  assertEquals(0,big.getV0());
  assertEquals(89,big.getV1());
  assertEquals(23 + (1 << 30),big.getV2());
  assertEquals(0,big.getV3());
  big.shiftRightDestructive(32,true);
  assertEquals(89,big.getV0());
  assertEquals(23 + (1 << 30),big.getV1());
  assertEquals(0,big.getV2());
  assertEquals(0,big.getV3());
  UnsignedInt128 tmp=new UnsignedInt128(17);
  assertEquals(17,tmp.getV0());
  tmp.shiftRightDestructive(1,true);
  assertEquals(9,tmp.getV0());
  tmp.shiftRightDestructive(1,false);
  assertEquals(4,tmp.getV0());
  tmp.shiftRightDestructive(1,true);
  assertEquals(2,tmp.getV0());
  tmp.shiftRightDestructive(1,true);
  assertEquals(1,tmp.getV0());
  tmp.shiftRightDestructive(1,true);
  assertEquals(1,tmp.getV0());
  tmp.shiftRightDestructive(1,false);
  assertEquals(0,tmp.getV0());
}
