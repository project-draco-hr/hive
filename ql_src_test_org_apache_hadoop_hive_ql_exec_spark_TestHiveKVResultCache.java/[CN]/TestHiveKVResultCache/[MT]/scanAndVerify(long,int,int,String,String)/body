{
  ArrayList<Tuple2<HiveKey,BytesWritable>> output=new ArrayList<Tuple2<HiveKey,BytesWritable>>((int)rows);
  scanResultList(rows,threshold,separate,output,prefix1,prefix2);
  assertEquals(rows,output.size());
  long primaryRows=rows * (100 - separate) / 100;
  long separateRows=rows - primaryRows;
  HashSet<Long> primaryRowKeys=new HashSet<Long>();
  HashSet<Long> separateRowKeys=new HashSet<Long>();
  for (  Tuple2<HiveKey,BytesWritable> item : output) {
    String key=new String(item._1.getBytes());
    String value=new String(item._2.getBytes());
    String prefix=key.substring(0,key.indexOf('_'));
    Long id=Long.valueOf(key.substring(5 + prefix.length()));
    if (prefix.equals(prefix1)) {
      assertTrue(id >= 0 && id < primaryRows);
      primaryRowKeys.add(id);
    }
 else {
      assertEquals(prefix2,prefix);
      assertTrue(id >= 0 && id < separateRows);
      separateRowKeys.add(id);
    }
    assertEquals(prefix + "_value_" + id,value);
  }
  assertEquals(separateRows,separateRowKeys.size());
  assertEquals(primaryRows,primaryRowKeys.size());
}
