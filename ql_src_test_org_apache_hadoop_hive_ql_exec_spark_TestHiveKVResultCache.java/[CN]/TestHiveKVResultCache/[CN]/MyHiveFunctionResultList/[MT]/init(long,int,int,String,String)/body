{
  Preconditions.checkArgument((threshold > 0 || separate == 0) && separate < 100 && separate >= 0 && rows > 0);
  primaryRows=rows * (100 - separate) / 100;
  separateRows=rows - primaryRows;
  thresholdRows=threshold;
  prefix1=p1;
  prefix2=p2;
  if (separateRows > 0) {
    separateRowGenerator=new Thread(new Runnable(){
      @Override public void run(){
        try {
          long separateBatchSize=thresholdRows * separateRows / primaryRows;
          while (!queue.take().booleanValue()) {
            for (int i=0; i < separateBatchSize; i++) {
              collect(prefix2,separateRowsEmitted++);
            }
          }
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        for (; separateRowsEmitted < separateRows; ) {
          collect(prefix2,separateRowsEmitted++);
        }
      }
    }
);
    queue=new LinkedBlockingQueue<Boolean>();
    separateRowGenerator.start();
  }
}
