{
  JobConf job=new JobConf(conf);
  job.setJobName(jobName);
  job.setOutputKeyClass(NullWritable.class);
  job.setOutputValueClass(NullWritable.class);
  job.setJarByClass(CompactorMR.class);
  LOG.debug("User jar set to " + job.getJar());
  job.setMapperClass(CompactorMap.class);
  job.setNumReduceTasks(0);
  job.setInputFormat(CompactorInputFormat.class);
  job.setOutputFormat(NullOutputFormat.class);
  job.setOutputCommitter(CompactorOutputCommitter.class);
  String queueName=conf.getVar(HiveConf.ConfVars.COMPACTOR_JOB_QUEUE);
  if (queueName != null && queueName.length() > 0) {
    job.setQueueName(queueName);
  }
  job.set(FINAL_LOCATION,sd.getLocation());
  job.set(TMP_LOCATION,sd.getLocation() + "/" + TMPDIR+ "_"+ UUID.randomUUID().toString());
  job.set(INPUT_FORMAT_CLASS_NAME,sd.getInputFormat());
  job.set(OUTPUT_FORMAT_CLASS_NAME,sd.getOutputFormat());
  job.setBoolean(IS_COMPRESSED,sd.isCompressed());
  job.set(TABLE_PROPS,new StringableMap(t.getParameters()).toString());
  job.setInt(NUM_BUCKETS,sd.getNumBuckets());
  job.set(ValidTxnList.VALID_TXNS_KEY,txns.toString());
  overrideMRProps(job,t.getParameters());
  if (ci.properties != null) {
    overrideTblProps(job,t.getParameters(),ci.properties);
  }
  setColumnTypes(job,sd.getCols());
  return job;
}
