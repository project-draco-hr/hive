{
  JobConf job=new JobConf(conf);
  job.setJobName(jobName);
  job.setOutputKeyClass(NullWritable.class);
  job.setOutputValueClass(NullWritable.class);
  job.setJarByClass(CompactorMR.class);
  LOG.debug("User jar set to " + job.getJar());
  job.setMapperClass(CompactorMap.class);
  job.setNumReduceTasks(0);
  job.setInputFormat(CompactorInputFormat.class);
  job.setOutputFormat(NullOutputFormat.class);
  job.setOutputCommitter(CompactorOutputCommitter.class);
  job.set(FINAL_LOCATION,sd.getLocation());
  job.set(TMP_LOCATION,sd.getLocation() + "/" + TMPDIR+ "_"+ UUID.randomUUID().toString());
  job.set(INPUT_FORMAT_CLASS_NAME,sd.getInputFormat());
  job.set(OUTPUT_FORMAT_CLASS_NAME,sd.getOutputFormat());
  job.setBoolean(IS_MAJOR,isMajor);
  job.setBoolean(IS_COMPRESSED,sd.isCompressed());
  job.set(TABLE_PROPS,new StringableMap(t.getParameters()).toString());
  job.setInt(NUM_BUCKETS,sd.getNumBuckets());
  job.set(ValidTxnList.VALID_TXNS_KEY,txns.toString());
  setColumnTypes(job,sd.getCols());
  AcidUtils.Directory dir=AcidUtils.getAcidState(new Path(sd.getLocation()),conf,txns,false);
  StringableList dirsToSearch=new StringableList();
  Path baseDir=null;
  if (isMajor) {
    baseDir=dir.getBaseDirectory();
    if (baseDir == null) {
      List<HdfsFileStatusWithId> originalFiles=dir.getOriginalFiles();
      if (!(originalFiles == null) && !(originalFiles.size() == 0)) {
        for (        HdfsFileStatusWithId stat : originalFiles) {
          Path path=stat.getFileStatus().getPath();
          dirsToSearch.add(path);
          LOG.debug("Adding original file " + path + " to dirs to search");
        }
        baseDir=new Path(sd.getLocation());
      }
    }
 else {
      LOG.debug("Adding base directory " + baseDir + " to dirs to search");
      dirsToSearch.add(baseDir);
    }
  }
  List<AcidUtils.ParsedDelta> parsedDeltas=dir.getCurrentDirectories();
  if (parsedDeltas == null || parsedDeltas.size() == 0) {
    LOG.error("No delta files found to compact in " + sd.getLocation());
    return;
  }
  StringableList deltaDirs=new StringableList();
  long minTxn=Long.MAX_VALUE;
  long maxTxn=Long.MIN_VALUE;
  for (  AcidUtils.ParsedDelta delta : parsedDeltas) {
    LOG.debug("Adding delta " + delta.getPath() + " to directories to search");
    dirsToSearch.add(delta.getPath());
    deltaDirs.add(delta.getPath());
    minTxn=Math.min(minTxn,delta.getMinTransaction());
    maxTxn=Math.max(maxTxn,delta.getMaxTransaction());
  }
  if (baseDir != null)   job.set(BASE_DIR,baseDir.toString());
  job.set(DELTA_DIRS,deltaDirs.toString());
  job.set(DIRS_TO_SEARCH,dirsToSearch.toString());
  job.setLong(MIN_TXN,minTxn);
  job.setLong(MAX_TXN,maxTxn);
  LOG.debug("Setting minimum transaction to " + minTxn);
  LOG.debug("Setting maximume transaction to " + maxTxn);
  RunningJob rj=JobClient.runJob(job);
  LOG.info("Submitted " + (isMajor ? CompactionType.MAJOR : CompactionType.MINOR) + " compaction job '"+ jobName+ "' with jobID="+ rj.getID());
  rj.waitForCompletion();
  su.gatherStats();
}
