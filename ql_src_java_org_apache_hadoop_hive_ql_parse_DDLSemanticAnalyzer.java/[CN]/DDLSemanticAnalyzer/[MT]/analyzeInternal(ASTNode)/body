{
  if (ast.getToken().getType() == HiveParser.TOK_DROPTABLE) {
    analyzeDropTable(ast,false);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_CREATEINDEX) {
    analyzeCreateIndex(ast);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_DROPINDEX) {
    analyzeDropIndex(ast);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_DESCTABLE) {
    ctx.setResFile(new Path(ctx.getLocalTmpFileURI()));
    analyzeDescribeTable(ast);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_SHOWTABLES) {
    ctx.setResFile(new Path(ctx.getLocalTmpFileURI()));
    analyzeShowTables(ast);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_SHOW_TABLESTATUS) {
    ctx.setResFile(new Path(ctx.getLocalTmpFileURI()));
    analyzeShowTableStatus(ast);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_SHOWFUNCTIONS) {
    ctx.setResFile(new Path(ctx.getLocalTmpFileURI()));
    analyzeShowFunctions(ast);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_DESCFUNCTION) {
    ctx.setResFile(new Path(ctx.getLocalTmpFileURI()));
    analyzeDescFunction(ast);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_MSCK) {
    ctx.setResFile(new Path(ctx.getLocalTmpFileURI()));
    analyzeMetastoreCheck(ast);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_DROPVIEW) {
    analyzeDropTable(ast,true);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_ALTERVIEW_PROPERTIES) {
    analyzeAlterTableProps(ast,true);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_ALTERTABLE_RENAME) {
    analyzeAlterTableRename(ast);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_ALTERTABLE_TOUCH) {
    analyzeAlterTableTouch(ast);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_ALTERTABLE_ARCHIVE) {
    analyzeAlterTableArchive(ast,false);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_ALTERTABLE_UNARCHIVE) {
    analyzeAlterTableArchive(ast,true);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_ALTERTABLE_ADDCOLS) {
    analyzeAlterTableModifyCols(ast,AlterTableTypes.ADDCOLS);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_ALTERTABLE_REPLACECOLS) {
    analyzeAlterTableModifyCols(ast,AlterTableTypes.REPLACECOLS);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_ALTERTABLE_RENAMECOL) {
    analyzeAlterTableRenameCol(ast);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_ALTERTABLE_ADDPARTS) {
    analyzeAlterTableAddParts(ast);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_ALTERTABLE_DROPPARTS) {
    analyzeAlterTableDropParts(ast);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_ALTERTABLE_PROPERTIES) {
    analyzeAlterTableProps(ast,false);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_ALTERTABLE_SERDEPROPERTIES) {
    analyzeAlterTableSerdeProps(ast);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_ALTERTABLE_SERIALIZER) {
    analyzeAlterTableSerde(ast);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_ALTERTABLE_FILEFORMAT) {
    analyzeAlterTableFileFormat(ast);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_ALTERTABLE_CLUSTER_SORT) {
    analyzeAlterTableClusterSort(ast);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_ALTERINDEX_REBUILD) {
    analyzeUpdateIndex(ast);
  }
 else   if (ast.getToken().getType() == HiveParser.TOK_SHOWPARTITIONS) {
    ctx.setResFile(new Path(ctx.getLocalTmpFileURI()));
    analyzeShowPartitions(ast);
  }
 else {
    throw new SemanticException("Unsupported command.");
  }
}
