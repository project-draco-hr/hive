{
  String newComment=null;
  boolean first=false;
  String flagCol=null;
  boolean isCascade=false;
  String oldColName=ast.getChild(0).getText();
  String newColName=ast.getChild(1).getText();
  String newType=getTypeStringFromAST((ASTNode)ast.getChild(2));
  int childCount=ast.getChildCount();
  for (int i=3; i < childCount; i++) {
    ASTNode child=(ASTNode)ast.getChild(i);
switch (child.getToken().getType()) {
case HiveParser.StringLiteral:
      newComment=unescapeSQLString(child.getText());
    break;
case HiveParser.TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION:
  flagCol=unescapeIdentifier(child.getChild(0).getText());
break;
case HiveParser.KW_FIRST:
first=true;
break;
case HiveParser.TOK_CASCADE:
isCascade=true;
break;
case HiveParser.TOK_RESTRICT:
break;
default :
throw new SemanticException("Unsupported token: " + child.getToken() + " for alter table");
}
}
Table tab=getTable(qualified);
SkewedInfo skewInfo=tab.getTTable().getSd().getSkewedInfo();
if ((null != skewInfo) && (null != skewInfo.getSkewedColNames()) && skewInfo.getSkewedColNames().contains(oldColName)) {
throw new SemanticException(oldColName + ErrorMsg.ALTER_TABLE_NOT_ALLOWED_RENAME_SKEWED_COLUMN.getMsg());
}
String tblName=getDotName(qualified);
AlterTableDesc alterTblDesc=new AlterTableDesc(tblName,partSpec,unescapeIdentifier(oldColName),unescapeIdentifier(newColName),newType,newComment,first,flagCol,isCascade);
addInputsOutputsAlterTable(tblName,partSpec,alterTblDesc);
rootTasks.add(TaskFactory.get(new DDLWork(getInputs(),getOutputs(),alterTblDesc),conf));
}
