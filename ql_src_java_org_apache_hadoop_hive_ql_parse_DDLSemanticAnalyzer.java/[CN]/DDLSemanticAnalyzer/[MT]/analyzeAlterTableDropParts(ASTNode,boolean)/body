{
  String tblName=getUnescapedName((ASTNode)ast.getChild(0));
  List<PartitionSpec> partSpecs=getFullPartitionSpecs(ast);
  Table tab=getTable(db.getCurrentDatabase(),tblName,true);
  validateAlterTableType(tab,AlterTableTypes.DROPPARTITION,expectView);
  boolean stringPartitionColumns=true;
  List<FieldSchema> partCols=tab.getPartCols();
  for (  FieldSchema partCol : partCols) {
    if (!partCol.getType().toLowerCase().equals("string")) {
      stringPartitionColumns=false;
      break;
    }
  }
  if (!stringPartitionColumns) {
    for (    PartitionSpec partSpec : partSpecs) {
      if (partSpec.isNonEqualityOperator()) {
        throw new SemanticException(ErrorMsg.DROP_PARTITION_NON_STRING_PARTCOLS_NONEQUALITY.getMsg());
      }
    }
  }
  if (partSpecs != null) {
    boolean ifExists=(ast.getFirstChildWithType(HiveParser.TOK_IFEXISTS) != null);
    boolean throwException=!ifExists && !HiveConf.getBoolVar(conf,ConfVars.DROPIGNORESNONEXISTENT);
    addTableDropPartsOutputs(tblName,partSpecs,throwException,stringPartitionColumns);
  }
  DropTableDesc dropTblDesc=new DropTableDesc(tblName,partSpecs,expectView,stringPartitionColumns);
  rootTasks.add(TaskFactory.get(new DDLWork(getInputs(),getOutputs(),dropTblDesc),conf));
}
