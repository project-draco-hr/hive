{
  ASTNode tableTypeExpr=(ASTNode)ast.getChild(0);
  String dbName=null;
  String tableName=null;
  String colPath=null;
  Map<String,String> partSpec=null;
  ASTNode tableNode=null;
  if (((ASTNode)tableTypeExpr.getChild(0)).getType() == HiveParser.TOK_TABNAME) {
    tableNode=(ASTNode)tableTypeExpr.getChild(0);
    if (tableNode.getChildCount() == 1) {
      tableName=((ASTNode)tableNode.getChild(0)).getText();
    }
 else {
      dbName=((ASTNode)tableNode.getChild(0)).getText();
      tableName=dbName + "." + ((ASTNode)tableNode.getChild(1)).getText();
    }
  }
 else {
    throw new SemanticException(((ASTNode)tableTypeExpr.getChild(0)).getText() + " is not an expected token type");
  }
  partSpec=QualifiedNameUtil.getPartitionSpec(db,tableTypeExpr,tableName);
  colPath=QualifiedNameUtil.getColPath(db,tableTypeExpr,dbName,tableName,partSpec);
  if (dbName != null) {
    validateDatabase(dbName);
  }
  if (partSpec != null) {
    validateTable(tableName,partSpec);
  }
  DescTableDesc descTblDesc=new DescTableDesc(ctx.getResFile(),tableName,partSpec,colPath);
  boolean showColStats=false;
  if (ast.getChildCount() == 2) {
    int descOptions=ast.getChild(1).getType();
    descTblDesc.setFormatted(descOptions == HiveParser.KW_FORMATTED);
    descTblDesc.setExt(descOptions == HiveParser.KW_EXTENDED);
    descTblDesc.setPretty(descOptions == HiveParser.KW_PRETTY);
    if (!colPath.equalsIgnoreCase(tableName) && descTblDesc.isFormatted()) {
      showColStats=true;
    }
  }
  inputs.add(new ReadEntity(getTable(tableName)));
  Task ddlTask=TaskFactory.get(new DDLWork(getInputs(),getOutputs(),descTblDesc),conf);
  rootTasks.add(ddlTask);
  String schema=DescTableDesc.getSchema(showColStats);
  setFetchTask(createFetchTask(schema));
  LOG.info("analyzeDescribeTable done");
}
