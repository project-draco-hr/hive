{
  String tblName=unescapeIdentifier(ast.getChild(0).getText());
  try {
    Table tab=db.getTable(db.getCurrentDatabase(),tblName,false);
    if (tab != null) {
      inputs.add(new ReadEntity(tab));
    }
  }
 catch (  HiveException e) {
    throw new SemanticException(ErrorMsg.INVALID_TABLE.getMsg(tblName));
  }
  List<Map<String,String>> partSpecs=getPartitionSpecs(ast);
  addTablePartsOutputs(tblName,partSpecs);
  Iterator<Map<String,String>> partIter=partSpecs.iterator();
  String currentLocation=null;
  Map<String,String> currentPart=null;
  boolean ifNotExists=false;
  int numCh=ast.getChildCount();
  for (int num=1; num < numCh; num++) {
    CommonTree child=(CommonTree)ast.getChild(num);
switch (child.getToken().getType()) {
case HiveParser.TOK_IFNOTEXISTS:
      ifNotExists=true;
    break;
case HiveParser.TOK_PARTSPEC:
  if (currentPart != null) {
    validatePartitionValues(currentPart);
    AddPartitionDesc addPartitionDesc=new AddPartitionDesc(db.getCurrentDatabase(),tblName,currentPart,currentLocation,ifNotExists);
    rootTasks.add(TaskFactory.get(new DDLWork(getInputs(),getOutputs(),addPartitionDesc),conf));
  }
currentLocation=null;
currentPart=partIter.next();
break;
case HiveParser.TOK_PARTITIONLOCATION:
currentLocation=unescapeSQLString(child.getChild(0).getText());
break;
default :
throw new SemanticException("Unknown child: " + child);
}
}
if (currentPart != null) {
validatePartitionValues(currentPart);
AddPartitionDesc addPartitionDesc=new AddPartitionDesc(db.getCurrentDatabase(),tblName,currentPart,currentLocation,ifNotExists);
rootTasks.add(TaskFactory.get(new DDLWork(getInputs(),getOutputs(),addPartitionDesc),conf));
}
}
