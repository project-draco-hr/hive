{
  try {
    if (!tab.isPartitioned()) {
      return new PrunedPartitionList(tab,Hive.get().getAllPartitionsForPruner(tab),false);
    }
    LOG.debug("tabname = " + tab.getTableName() + " is partitioned");
    if ("strict".equalsIgnoreCase(HiveConf.getVar(conf,HiveConf.ConfVars.HIVEMAPREDMODE)) && !hasColumnExpr(prunerExpr)) {
      throw new SemanticException(ErrorMsg.NO_PARTITION_PREDICATE.getMsg("for Alias \"" + alias + "\" Table \""+ tab.getTableName()+ "\""));
    }
    if (prunerExpr == null) {
      return new PrunedPartitionList(tab,Hive.get().getAllPartitionsForPruner(tab),false);
    }
    prunerExpr=removeNonPartCols(prunerExpr,extractPartColNames(tab));
    ExprNodeDesc compactExpr=compactExpr(prunerExpr.clone());
    String oldFilter=prunerExpr.getExprString();
    if (compactExpr == null) {
      LOG.debug("Filter " + oldFilter + " was null after compacting");
      return new PrunedPartitionList(tab,Hive.get().getAllPartitionsForPruner(tab),true);
    }
    LOG.debug("Filter w/ compacting: " + compactExpr.getExprString() + "; filter w/o compacting: "+ oldFilter);
    boolean doEvalClientSide=hasUserFunctions(compactExpr);
    List<Partition> partitions=new ArrayList<Partition>();
    boolean hasUnknownPartitions=false;
    PerfLogger perfLogger=PerfLogger.getPerfLogger();
    if (!doEvalClientSide) {
      perfLogger.PerfLogBegin(CLASS_NAME,PerfLogger.PARTITION_RETRIEVING);
      try {
        hasUnknownPartitions=Hive.get().getPartitionsByExpr(tab,compactExpr,conf,partitions);
      }
 catch (      IMetaStoreClient.IncompatibleMetastoreException ime) {
        LOG.warn("Metastore doesn't support getPartitionsByExpr",ime);
        doEvalClientSide=true;
      }
 finally {
        perfLogger.PerfLogEnd(CLASS_NAME,PerfLogger.PARTITION_RETRIEVING);
      }
    }
    if (doEvalClientSide) {
      hasUnknownPartitions=pruneBySequentialScan(tab,partitions,compactExpr,conf);
    }
    boolean isPruningByExactFilter=oldFilter.equals(compactExpr.getExprString());
    return new PrunedPartitionList(tab,new LinkedHashSet<Partition>(partitions),hasUnknownPartitions || !isPruningByExactFilter);
  }
 catch (  HiveException e) {
    throw e;
  }
catch (  Exception e) {
    throw new HiveException(e);
  }
}
