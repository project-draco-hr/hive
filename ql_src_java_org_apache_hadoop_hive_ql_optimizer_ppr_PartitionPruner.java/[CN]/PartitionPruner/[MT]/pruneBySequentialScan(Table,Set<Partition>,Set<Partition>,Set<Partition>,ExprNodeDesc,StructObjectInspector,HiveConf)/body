{
  List<String> trueNames=null;
  List<String> unknNames=null;
  PerfLogger perfLogger=PerfLogger.getPerfLogger();
  perfLogger.PerfLogBegin(LOG,PerfLogger.PRUNE_LISTING);
  List<String> partNames=Hive.get().getPartitionNames(tab.getDbName(),tab.getTableName(),(short)-1);
  List<FieldSchema> pCols=tab.getPartCols();
  List<String> partCols=new ArrayList<String>(pCols.size());
  List<String> values=new ArrayList<String>(pCols.size());
  Object[] objectWithPart=new Object[2];
  String defaultPartitionName=conf.getVar(HiveConf.ConfVars.DEFAULTPARTITIONNAME);
  for (  FieldSchema pCol : pCols) {
    partCols.add(pCol.getName());
  }
  Map<PrimitiveObjectInspector,ExprNodeEvaluator> handle=PartExprEvalUtils.prepareExpr(prunerExpr,partCols,rowObjectInspector);
  for (  String partName : partNames) {
    LinkedHashMap<String,String> partSpec=Warehouse.makeSpecFromName(partName);
    values.clear();
    for (    Map.Entry<String,String> kv : partSpec.entrySet()) {
      values.add(kv.getValue());
    }
    objectWithPart[1]=values;
    Boolean r=(Boolean)PartExprEvalUtils.evaluateExprOnPart(handle,objectWithPart);
    if (r == null) {
      if (values.contains(defaultPartitionName)) {
        LOG.debug("skipping default/bad partition: " + partName);
      }
 else {
        if (unknNames == null) {
          unknNames=new LinkedList<String>();
        }
        unknNames.add(partName);
        LOG.debug("retained unknown partition: " + partName);
      }
    }
 else     if (Boolean.TRUE.equals(r)) {
      if (trueNames == null) {
        trueNames=new LinkedList<String>();
      }
      trueNames.add(partName);
      LOG.debug("retained partition: " + partName);
    }
  }
  perfLogger.PerfLogEnd(LOG,PerfLogger.PRUNE_LISTING);
  perfLogger.PerfLogBegin(LOG,PerfLogger.PARTITION_RETRIEVING);
  if (trueNames != null) {
    List<Partition> parts=Hive.get().getPartitionsByNames(tab,trueNames);
    true_parts.addAll(parts);
  }
  if (unknNames != null) {
    List<Partition> parts=Hive.get().getPartitionsByNames(tab,unknNames);
    unkn_parts.addAll(parts);
  }
  perfLogger.PerfLogEnd(LOG,PerfLogger.PARTITION_RETRIEVING);
}
