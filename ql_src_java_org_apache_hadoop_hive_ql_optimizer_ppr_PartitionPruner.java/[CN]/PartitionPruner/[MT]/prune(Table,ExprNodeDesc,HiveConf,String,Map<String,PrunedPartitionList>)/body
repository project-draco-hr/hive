{
  if (LOG.isTraceEnabled()) {
    LOG.trace("Started pruning partiton");
    LOG.trace("dbname = " + tab.getDbName());
    LOG.trace("tabname = " + tab.getTableName());
    LOG.trace("prune Expression = " + (prunerExpr == null ? "" : prunerExpr));
  }
  String key=tab.getDbName() + "." + tab.getTableName()+ ";";
  if (!tab.isPartitioned()) {
    return getAllPartsFromCacheOrServer(tab,key,false,prunedPartitionsMap);
  }
  if (!hasColumnExpr(prunerExpr)) {
    String error=StrictChecks.checkNoPartitionFilter(conf);
    if (error != null) {
      throw new SemanticException(error + " No partition predicate for Alias \"" + alias+ "\" Table \""+ tab.getTableName()+ "\"");
    }
  }
  if (prunerExpr == null) {
    return getAllPartsFromCacheOrServer(tab,key,false,prunedPartitionsMap);
  }
  Set<String> partColsUsedInFilter=new LinkedHashSet<String>();
  prunerExpr=removeNonPartCols(prunerExpr,extractPartColNames(tab),partColsUsedInFilter);
  ExprNodeDesc compactExpr=compactExpr(prunerExpr.clone());
  String oldFilter=prunerExpr.getExprString();
  if (compactExpr == null || isBooleanExpr(compactExpr)) {
    if (isFalseExpr(compactExpr)) {
      return new PrunedPartitionList(tab,new LinkedHashSet<Partition>(0),new ArrayList<String>(0),false);
    }
    return getAllPartsFromCacheOrServer(tab,key,true,prunedPartitionsMap);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Filter w/ compacting: " + compactExpr.getExprString() + "; filter w/o compacting: "+ oldFilter);
  }
  key=key + compactExpr.getExprString();
  PrunedPartitionList ppList=prunedPartitionsMap.get(key);
  if (ppList != null) {
    return ppList;
  }
  ppList=getPartitionsFromServer(tab,(ExprNodeGenericFuncDesc)compactExpr,conf,alias,partColsUsedInFilter,oldFilter.equals(compactExpr.getExprString()));
  prunedPartitionsMap.put(key,ppList);
  return ppList;
}
