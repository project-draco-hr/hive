{
  LOG.trace("Started pruning partiton");
  LOG.trace("tabname = " + tab.getTableName());
  LOG.trace("prune Expression = " + prunerExpr);
  String key=tab.getTableName() + ";";
  if (prunerExpr != null) {
    key=key + prunerExpr.getExprString();
  }
  PrunedPartitionList ret=prunedPartitionsMap.get(key);
  if (ret != null) {
    return ret;
  }
  LinkedHashSet<Partition> true_parts=new LinkedHashSet<Partition>();
  LinkedHashSet<Partition> unkn_parts=new LinkedHashSet<Partition>();
  LinkedHashSet<Partition> denied_parts=new LinkedHashSet<Partition>();
  try {
    StructObjectInspector rowObjectInspector=(StructObjectInspector)tab.getDeserializer().getObjectInspector();
    Object[] rowWithPart=new Object[2];
    if (tab.isPartitioned()) {
      for (      String partName : Hive.get().getPartitionNames(tab.getDbName(),tab.getTableName(),(short)-1)) {
        LinkedHashMap<String,String> partSpec=Warehouse.makeSpecFromName(partName);
        ArrayList<String> partNames=new ArrayList<String>();
        ArrayList<String> partValues=new ArrayList<String>();
        ArrayList<ObjectInspector> partObjectInspectors=new ArrayList<ObjectInspector>();
        for (        Map.Entry<String,String> entry : partSpec.entrySet()) {
          partNames.add(entry.getKey());
          partValues.add(entry.getValue());
          partObjectInspectors.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);
        }
        StructObjectInspector partObjectInspector=ObjectInspectorFactory.getStandardStructObjectInspector(partNames,partObjectInspectors);
        rowWithPart[1]=partValues;
        ArrayList<StructObjectInspector> ois=new ArrayList<StructObjectInspector>(2);
        ois.add(rowObjectInspector);
        ois.add(partObjectInspector);
        StructObjectInspector rowWithPartObjectInspector=ObjectInspectorFactory.getUnionStructObjectInspector(ois);
        if ("strict".equalsIgnoreCase(HiveConf.getVar(conf,HiveConf.ConfVars.HIVEMAPREDMODE))) {
          if (!hasColumnExpr(prunerExpr)) {
            throw new SemanticException(ErrorMsg.NO_PARTITION_PREDICATE.getMsg("for Alias \"" + alias + "\" Table \""+ tab.getTableName()+ "\""));
          }
        }
        if (prunerExpr != null) {
          ExprNodeEvaluator evaluator=ExprNodeEvaluatorFactory.get(prunerExpr);
          ObjectInspector evaluateResultOI=evaluator.initialize(rowWithPartObjectInspector);
          Object evaluateResultO=evaluator.evaluate(rowWithPart);
          Boolean r=(Boolean)((PrimitiveObjectInspector)evaluateResultOI).getPrimitiveJavaObject(evaluateResultO);
          LOG.trace("prune result for partition " + partSpec + ": "+ r);
          if (Boolean.FALSE.equals(r)) {
            if (denied_parts.isEmpty()) {
              Partition part=Hive.get().getPartition(tab,partSpec,Boolean.FALSE);
              denied_parts.add(part);
            }
            LOG.trace("pruned partition: " + partSpec);
          }
 else {
            Partition part=Hive.get().getPartition(tab,partSpec,Boolean.FALSE);
            String state="retained";
            if (Boolean.TRUE.equals(r)) {
              true_parts.add(part);
            }
 else {
              unkn_parts.add(part);
              state="unknown";
            }
            if (LOG.isDebugEnabled())             LOG.debug(state + " partition: " + partSpec);
          }
        }
 else {
          true_parts.add(Hive.get().getPartition(tab,partSpec,Boolean.FALSE));
        }
      }
    }
 else {
      true_parts.addAll(Hive.get().getPartitions(tab));
    }
  }
 catch (  HiveException e) {
    throw e;
  }
catch (  Exception e) {
    throw new HiveException(e);
  }
  ret=new PrunedPartitionList(true_parts,unkn_parts,denied_parts);
  prunedPartitionsMap.put(key,ret);
  return ret;
}
