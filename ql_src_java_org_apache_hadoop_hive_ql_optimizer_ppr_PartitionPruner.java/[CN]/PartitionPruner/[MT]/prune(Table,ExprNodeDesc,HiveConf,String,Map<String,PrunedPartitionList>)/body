{
  LOG.trace("Started pruning partiton");
  LOG.trace("dbname = " + tab.getDbName());
  LOG.trace("tabname = " + tab.getTableName());
  LOG.trace("prune Expression = " + prunerExpr);
  String key=tab.getDbName() + "." + tab.getTableName()+ ";";
  if (prunerExpr != null) {
    key=key + prunerExpr.getExprString();
  }
  PrunedPartitionList ret=prunedPartitionsMap.get(key);
  if (ret != null) {
    return ret;
  }
  LinkedHashSet<Partition> true_parts=new LinkedHashSet<Partition>();
  LinkedHashSet<Partition> unkn_parts=new LinkedHashSet<Partition>();
  LinkedHashSet<Partition> denied_parts=new LinkedHashSet<Partition>();
  try {
    StructObjectInspector rowObjectInspector=(StructObjectInspector)tab.getDeserializer().getObjectInspector();
    Object[] rowWithPart=new Object[2];
    if (tab.isPartitioned()) {
      if ("strict".equalsIgnoreCase(HiveConf.getVar(conf,HiveConf.ConfVars.HIVEMAPREDMODE))) {
        if (!hasColumnExpr(prunerExpr)) {
          throw new SemanticException(ErrorMsg.NO_PARTITION_PREDICATE.getMsg("for Alias \"" + alias + "\" Table \""+ tab.getTableName()+ "\""));
        }
      }
      if (prunerExpr == null) {
        true_parts.addAll(Hive.get().getPartitions(tab));
      }
 else {
        ExprNodeDesc compactExpr=prunerExpr.clone();
        compactExpr=compactExpr(compactExpr);
        LOG.debug("Filter w/ compacting: " + ((compactExpr != null) ? compactExpr.getExprString() : "null") + "; filter w/o compacting: "+ ((prunerExpr != null) ? prunerExpr.getExprString() : "null"));
        if (compactExpr == null) {
          true_parts.addAll(Hive.get().getPartitions(tab));
        }
 else         if (Utilities.checkJDOPushDown(tab,compactExpr)) {
          String filter=compactExpr.getExprString();
          String oldFilter=prunerExpr.getExprString();
          if (filter.equals(oldFilter)) {
            pruneByPushDown(tab,true_parts,filter);
          }
 else {
            pruneByPushDown(tab,unkn_parts,filter);
          }
        }
 else {
          pruneBySequentialScan(tab,true_parts,unkn_parts,denied_parts,prunerExpr,rowObjectInspector);
        }
      }
      LOG.debug("tabname = " + tab.getTableName() + " is partitioned");
    }
 else {
      true_parts.addAll(Hive.get().getPartitions(tab));
    }
  }
 catch (  HiveException e) {
    throw e;
  }
catch (  Exception e) {
    throw new HiveException(e);
  }
  ret=new PrunedPartitionList(true_parts,unkn_parts,denied_parts);
  prunedPartitionsMap.put(key,ret);
  return ret;
}
