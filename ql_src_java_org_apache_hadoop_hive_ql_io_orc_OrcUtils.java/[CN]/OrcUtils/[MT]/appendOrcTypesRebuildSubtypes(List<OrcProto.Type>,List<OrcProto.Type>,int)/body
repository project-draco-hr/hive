{
  OrcProto.Type oldType=types.get(columnId++);
  int subtype=result.size();
  OrcProto.Type.Builder builder=OrcProto.Type.newBuilder();
  boolean needsAdd=true;
switch (oldType.getKind()) {
case BOOLEAN:
    builder.setKind(OrcProto.Type.Kind.BOOLEAN);
  break;
case BYTE:
builder.setKind(OrcProto.Type.Kind.BYTE);
break;
case SHORT:
builder.setKind(OrcProto.Type.Kind.SHORT);
break;
case INT:
builder.setKind(OrcProto.Type.Kind.INT);
break;
case LONG:
builder.setKind(OrcProto.Type.Kind.LONG);
break;
case FLOAT:
builder.setKind(OrcProto.Type.Kind.FLOAT);
break;
case DOUBLE:
builder.setKind(OrcProto.Type.Kind.DOUBLE);
break;
case STRING:
builder.setKind(OrcProto.Type.Kind.STRING);
break;
case CHAR:
builder.setKind(OrcProto.Type.Kind.CHAR);
builder.setMaximumLength(oldType.getMaximumLength());
break;
case VARCHAR:
builder.setKind(Type.Kind.VARCHAR);
builder.setMaximumLength(oldType.getMaximumLength());
break;
case BINARY:
builder.setKind(OrcProto.Type.Kind.BINARY);
break;
case TIMESTAMP:
builder.setKind(OrcProto.Type.Kind.TIMESTAMP);
break;
case DATE:
builder.setKind(OrcProto.Type.Kind.DATE);
break;
case DECIMAL:
builder.setKind(OrcProto.Type.Kind.DECIMAL);
builder.setPrecision(oldType.getPrecision());
builder.setScale(oldType.getScale());
break;
case LIST:
builder.setKind(OrcProto.Type.Kind.LIST);
builder.addSubtypes(++subtype);
result.add(builder.build());
needsAdd=false;
columnId=appendOrcTypesRebuildSubtypes(result,types,columnId);
break;
case MAP:
{
result.add(null);
columnId=appendOrcTypesRebuildSubtypes(result,types,columnId);
int subtype2=result.size();
columnId=appendOrcTypesRebuildSubtypes(result,types,columnId);
builder.setKind(OrcProto.Type.Kind.MAP);
builder.addSubtypes(subtype + 1);
builder.addSubtypes(subtype2);
result.set(subtype,builder.build());
needsAdd=false;
}
break;
case STRUCT:
{
List<String> fieldNames=oldType.getFieldNamesList();
result.add(null);
List<Integer> fieldSubtypes=new ArrayList<Integer>(fieldNames.size());
for (int i=0; i < fieldNames.size(); i++) {
int fieldSubtype=result.size();
fieldSubtypes.add(fieldSubtype);
columnId=appendOrcTypesRebuildSubtypes(result,types,columnId);
}
builder.setKind(OrcProto.Type.Kind.STRUCT);
for (int i=0; i < fieldNames.size(); i++) {
builder.addSubtypes(fieldSubtypes.get(i));
builder.addFieldNames(fieldNames.get(i));
}
result.set(subtype,builder.build());
needsAdd=false;
}
break;
case UNION:
{
int subtypeCount=oldType.getSubtypesCount();
result.add(null);
List<Integer> unionSubtypes=new ArrayList<Integer>(subtypeCount);
for (int i=0; i < subtypeCount; i++) {
int unionSubtype=result.size();
unionSubtypes.add(unionSubtype);
columnId=appendOrcTypesRebuildSubtypes(result,types,columnId);
}
builder.setKind(OrcProto.Type.Kind.UNION);
for (int i=0; i < subtypeCount; i++) {
builder.addSubtypes(unionSubtypes.get(i));
}
result.set(subtype,builder.build());
needsAdd=false;
}
break;
default :
throw new IllegalArgumentException("Unknown category: " + oldType.getKind());
}
if (needsAdd) {
result.add(builder.build());
}
return columnId;
}
