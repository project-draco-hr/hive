{
  Map<String,List<Integer>> columnSpanMap=new HashMap<String,List<Integer>>();
  if (allColumns != null) {
    String[] columns=allColumns.split(",");
    int startIdx=0;
    int endIdx=0;
    if (inspector instanceof StructObjectInspector) {
      StructObjectInspector soi=(StructObjectInspector)inspector;
      List<? extends StructField> fields=soi.getAllStructFieldRefs();
      for (int i=0; i < fields.size(); i++) {
        StructField sf=fields.get(i);
        ObjectInspector sfOI=sf.getFieldObjectInspector();
        String colName=columns[i];
        startIdx=endIdx + 1;
switch (sfOI.getCategory()) {
case PRIMITIVE:
          endIdx+=1;
        break;
case STRUCT:
      endIdx+=1;
    StructObjectInspector structInsp=(StructObjectInspector)sfOI;
  List<? extends StructField> structFields=structInsp.getAllStructFieldRefs();
for (int j=0; j < structFields.size(); ++j) {
  endIdx+=getFlattenedColumnsCount(structFields.get(j).getFieldObjectInspector());
}
break;
case MAP:
endIdx+=1;
MapObjectInspector mapInsp=(MapObjectInspector)sfOI;
endIdx+=getFlattenedColumnsCount(mapInsp.getMapKeyObjectInspector());
endIdx+=getFlattenedColumnsCount(mapInsp.getMapValueObjectInspector());
break;
case LIST:
endIdx+=1;
ListObjectInspector listInsp=(ListObjectInspector)sfOI;
endIdx+=getFlattenedColumnsCount(listInsp.getListElementObjectInspector());
break;
case UNION:
endIdx+=1;
UnionObjectInspector unionInsp=(UnionObjectInspector)sfOI;
List<ObjectInspector> choices=unionInsp.getObjectInspectors();
for (int j=0; j < choices.size(); ++j) {
endIdx+=getFlattenedColumnsCount(choices.get(j));
}
break;
default :
throw new IllegalArgumentException("Bad category: " + inspector.getCategory());
}
columnSpanMap.put(colName,Lists.newArrayList(startIdx,endIdx));
}
}
}
return columnSpanMap;
}
