{
  int numWriters=0;
switch (inspector.getCategory()) {
case PRIMITIVE:
    numWriters+=1;
  break;
case STRUCT:
numWriters+=1;
StructObjectInspector structInsp=(StructObjectInspector)inspector;
List<? extends StructField> fields=structInsp.getAllStructFieldRefs();
for (int i=0; i < fields.size(); ++i) {
numWriters+=getFlattenedColumnsCount(fields.get(i).getFieldObjectInspector());
}
break;
case MAP:
numWriters+=1;
MapObjectInspector mapInsp=(MapObjectInspector)inspector;
numWriters+=getFlattenedColumnsCount(mapInsp.getMapKeyObjectInspector());
numWriters+=getFlattenedColumnsCount(mapInsp.getMapValueObjectInspector());
break;
case LIST:
numWriters+=1;
ListObjectInspector listInsp=(ListObjectInspector)inspector;
numWriters+=getFlattenedColumnsCount(listInsp.getListElementObjectInspector());
break;
case UNION:
numWriters+=1;
UnionObjectInspector unionInsp=(UnionObjectInspector)inspector;
List<ObjectInspector> choices=unionInsp.getObjectInspectors();
for (int i=0; i < choices.size(); ++i) {
numWriters+=getFlattenedColumnsCount(choices.get(i));
}
break;
default :
throw new IllegalArgumentException("Bad category: " + inspector.getCategory());
}
return numWriters;
}
