{
  FileSystem fs=FileSystem.get(hiveConf);
  FileStatus[] status;
  runStatementOnDriver("insert into " + Table.NONACIDORCTBL + "(a,b) values(1,2)");
  status=fs.listStatus(new Path(TEST_WAREHOUSE_DIR + "/" + (Table.NONACIDORCTBL).toString().toLowerCase()),FileUtils.STAGING_DIR_PATH_FILTER);
  Assert.assertEquals(BUCKET_COUNT,status.length);
  for (int i=0; i < status.length; i++) {
    Assert.assertTrue(status[i].getPath().getName().matches("00000[01]_0"));
  }
  List<String> rs=runStatementOnDriver("select a,b from " + Table.NONACIDORCTBL);
  int[][] resultData=new int[][]{{1,2}};
  Assert.assertEquals(stringifyValues(resultData),rs);
  rs=runStatementOnDriver("select count(*) from " + Table.NONACIDORCTBL);
  int resultCount=1;
  Assert.assertEquals(resultCount,Integer.parseInt(rs.get(0)));
  runStatementOnDriver("alter table " + Table.NONACIDORCTBL + " SET TBLPROPERTIES ('transactional'='true')");
  status=fs.listStatus(new Path(TEST_WAREHOUSE_DIR + "/" + (Table.NONACIDORCTBL).toString().toLowerCase()),FileUtils.STAGING_DIR_PATH_FILTER);
  Assert.assertEquals(BUCKET_COUNT,status.length);
  for (int i=0; i < status.length; i++) {
    Assert.assertTrue(status[i].getPath().getName().matches("00000[01]_0"));
  }
  rs=runStatementOnDriver("select a,b from " + Table.NONACIDORCTBL);
  resultData=new int[][]{{1,2}};
  Assert.assertEquals(stringifyValues(resultData),rs);
  rs=runStatementOnDriver("select count(*) from " + Table.NONACIDORCTBL);
  resultCount=1;
  Assert.assertEquals(resultCount,Integer.parseInt(rs.get(0)));
  runStatementOnDriver("insert into " + Table.NONACIDORCTBL + "(a,b) values(3,4)");
  status=fs.listStatus(new Path(TEST_WAREHOUSE_DIR + "/" + (Table.NONACIDORCTBL).toString().toLowerCase()),FileUtils.STAGING_DIR_PATH_FILTER);
  Assert.assertEquals(3,status.length);
  boolean sawNewDelta=false;
  for (int i=0; i < status.length; i++) {
    if (status[i].getPath().getName().matches("delta_.*")) {
      sawNewDelta=true;
      FileStatus[] buckets=fs.listStatus(status[i].getPath(),FileUtils.STAGING_DIR_PATH_FILTER);
      Assert.assertEquals(BUCKET_COUNT,buckets.length);
      Assert.assertTrue(buckets[0].getPath().getName().matches("bucket_0000[01]"));
      Assert.assertTrue(buckets[1].getPath().getName().matches("bucket_0000[01]"));
    }
 else {
      Assert.assertTrue(status[i].getPath().getName().matches("00000[01]_0"));
    }
  }
  Assert.assertTrue(sawNewDelta);
  rs=runStatementOnDriver("select a,b from " + Table.NONACIDORCTBL);
  resultData=new int[][]{{1,2},{3,4}};
  Assert.assertEquals(stringifyValues(resultData),rs);
  rs=runStatementOnDriver("select count(*) from " + Table.NONACIDORCTBL);
  resultCount=2;
  Assert.assertEquals(resultCount,Integer.parseInt(rs.get(0)));
  runStatementOnDriver("alter table " + Table.NONACIDORCTBL + " compact 'MAJOR'");
  Worker w=new Worker();
  w.setThreadId((int)w.getId());
  w.setHiveConf(hiveConf);
  AtomicBoolean stop=new AtomicBoolean();
  AtomicBoolean looped=new AtomicBoolean();
  stop.set(true);
  w.init(stop,looped);
  w.run();
  status=fs.listStatus(new Path(TEST_WAREHOUSE_DIR + "/" + (Table.NONACIDORCTBL).toString().toLowerCase()),FileUtils.STAGING_DIR_PATH_FILTER);
  Assert.assertEquals(4,status.length);
  boolean sawNewBase=false;
  for (int i=0; i < status.length; i++) {
    if (status[i].getPath().getName().matches("base_.*")) {
      sawNewBase=true;
      FileStatus[] buckets=fs.listStatus(status[i].getPath(),FileUtils.STAGING_DIR_PATH_FILTER);
      Assert.assertEquals(BUCKET_COUNT,buckets.length);
      Assert.assertTrue(buckets[0].getPath().getName().matches("bucket_0000[01]"));
      Assert.assertTrue(buckets[1].getPath().getName().matches("bucket_0000[01]"));
    }
  }
  Assert.assertTrue(sawNewBase);
  rs=runStatementOnDriver("select a,b from " + Table.NONACIDORCTBL);
  resultData=new int[][]{{1,2},{3,4}};
  Assert.assertEquals(stringifyValues(resultData),rs);
  rs=runStatementOnDriver("select count(*) from " + Table.NONACIDORCTBL);
  resultCount=2;
  Assert.assertEquals(resultCount,Integer.parseInt(rs.get(0)));
  String fakeFile0=TEST_WAREHOUSE_DIR + "/" + (Table.NONACIDORCTBL).toString().toLowerCase()+ "/subdir/000000_0";
  String fakeFile1=TEST_WAREHOUSE_DIR + "/" + (Table.NONACIDORCTBL).toString().toLowerCase()+ "/subdir/000000_1";
  fs.create(new Path(fakeFile0));
  fs.create(new Path(fakeFile1));
  status=fs.listStatus(new Path(TEST_WAREHOUSE_DIR + "/" + (Table.NONACIDORCTBL).toString().toLowerCase()),FileUtils.STAGING_DIR_PATH_FILTER);
  Assert.assertEquals(5,status.length);
  Cleaner c=new Cleaner();
  c.setThreadId((int)c.getId());
  c.setHiveConf(hiveConf);
  stop=new AtomicBoolean();
  looped=new AtomicBoolean();
  stop.set(true);
  c.init(stop,looped);
  c.run();
  status=fs.listStatus(new Path(TEST_WAREHOUSE_DIR + "/" + (Table.NONACIDORCTBL).toString().toLowerCase()),FileUtils.STAGING_DIR_PATH_FILTER);
  Assert.assertEquals(1,status.length);
  Assert.assertTrue(status[0].getPath().getName().matches("base_.*"));
  FileStatus[] buckets=fs.listStatus(status[0].getPath(),FileUtils.STAGING_DIR_PATH_FILTER);
  Assert.assertEquals(BUCKET_COUNT,buckets.length);
  Assert.assertTrue(buckets[0].getPath().getName().matches("bucket_0000[01]"));
  Assert.assertTrue(buckets[1].getPath().getName().matches("bucket_0000[01]"));
  rs=runStatementOnDriver("select a,b from " + Table.NONACIDORCTBL);
  resultData=new int[][]{{1,2},{3,4}};
  Assert.assertEquals(stringifyValues(resultData),rs);
  rs=runStatementOnDriver("select count(*) from " + Table.NONACIDORCTBL);
  resultCount=2;
  Assert.assertEquals(resultCount,Integer.parseInt(rs.get(0)));
}
