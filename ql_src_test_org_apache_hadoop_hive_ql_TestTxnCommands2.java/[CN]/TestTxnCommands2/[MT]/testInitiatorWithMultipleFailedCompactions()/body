{
  String tblName="hive12353";
  runStatementOnDriver("drop table if exists " + tblName);
  runStatementOnDriver("CREATE TABLE " + tblName + "(a INT, b STRING) "+ " CLUSTERED BY(a) INTO 1 BUCKETS"+ " STORED AS ORC  TBLPROPERTIES ('transactional'='true')");
  hiveConf.setIntVar(HiveConf.ConfVars.HIVE_COMPACTOR_DELTA_NUM_THRESHOLD,4);
  for (int i=0; i < 5; i++) {
    runStatementOnDriver("insert into " + tblName + " values("+ (i + 1)+ ", 'foo'),("+ (i + 2)+ ", 'bar'),("+ (i + 3)+ ", 'baz')");
  }
  hiveConf.setBoolVar(HiveConf.ConfVars.HIVETESTMODEFAILCOMPACTION,true);
  int numFailedCompactions=hiveConf.getIntVar(HiveConf.ConfVars.COMPACTOR_INITIATOR_FAILED_THRESHOLD);
  CompactionTxnHandler txnHandler=new CompactionTxnHandler(hiveConf);
  AtomicBoolean stop=new AtomicBoolean(true);
  for (int i=0; i < numFailedCompactions; i++) {
    txnHandler.compact(new CompactionRequest("default",tblName,CompactionType.MINOR));
    runWorker(hiveConf);
  }
  Initiator init=new Initiator();
  init.setThreadId((int)init.getId());
  init.setHiveConf(hiveConf);
  init.init(stop,new AtomicBoolean());
  init.run();
  CompactionsByState cbs=countCompacts(txnHandler);
  Assert.assertEquals("Unexpected number of failed compactions",numFailedCompactions,cbs.failed);
  Assert.assertEquals("Unexpected total number of compactions",numFailedCompactions,cbs.total);
  hiveConf.setTimeVar(HiveConf.ConfVars.COMPACTOR_HISTORY_REAPER_INTERVAL,10,TimeUnit.MILLISECONDS);
  AcidCompactionHistoryService compactionHistoryService=new AcidCompactionHistoryService();
  runHouseKeeperService(compactionHistoryService,hiveConf);
  cbs=countCompacts(txnHandler);
  Assert.assertEquals("Number of failed compactions after History clean",numFailedCompactions,cbs.failed);
  Assert.assertEquals("Total number of compactions after History clean",numFailedCompactions,cbs.total);
  txnHandler.compact(new CompactionRequest("default",tblName,CompactionType.MAJOR));
  runWorker(hiveConf);
  txnHandler.compact(new CompactionRequest("default",tblName,CompactionType.MINOR));
  runWorker(hiveConf);
  cbs=countCompacts(txnHandler);
  Assert.assertEquals("Unexpected num failed1",numFailedCompactions + 2,cbs.failed);
  Assert.assertEquals("Unexpected num total1",numFailedCompactions + 2,cbs.total);
  runHouseKeeperService(compactionHistoryService,hiveConf);
  cbs=countCompacts(txnHandler);
  Assert.assertEquals("Unexpected num failed2",hiveConf.getIntVar(HiveConf.ConfVars.COMPACTOR_HISTORY_RETENTION_FAILED),cbs.failed);
  Assert.assertEquals("Unexpected num total2",hiveConf.getIntVar(HiveConf.ConfVars.COMPACTOR_HISTORY_RETENTION_FAILED),cbs.total);
  hiveConf.setBoolVar(HiveConf.ConfVars.HIVETESTMODEFAILCOMPACTION,false);
  txnHandler.compact(new CompactionRequest("default",tblName,CompactionType.MINOR));
  cbs=countCompacts(txnHandler);
  Assert.assertEquals("Unexpected num failed3",hiveConf.getIntVar(HiveConf.ConfVars.COMPACTOR_HISTORY_RETENTION_FAILED),cbs.failed);
  Assert.assertEquals("Unexpected num initiated",1,cbs.initiated);
  Assert.assertEquals("Unexpected num total3",hiveConf.getIntVar(HiveConf.ConfVars.COMPACTOR_HISTORY_RETENTION_FAILED) + 1,cbs.total);
  runWorker(hiveConf);
  cbs=countCompacts(txnHandler);
  Assert.assertEquals("Unexpected num failed4",hiveConf.getIntVar(HiveConf.ConfVars.COMPACTOR_HISTORY_RETENTION_FAILED),cbs.failed);
  Assert.assertEquals("Unexpected num ready to clean",1,cbs.readyToClean);
  Assert.assertEquals("Unexpected num total4",hiveConf.getIntVar(HiveConf.ConfVars.COMPACTOR_HISTORY_RETENTION_FAILED) + 1,cbs.total);
  runCleaner(hiveConf);
  runHouseKeeperService(compactionHistoryService,hiveConf);
  cbs=countCompacts(txnHandler);
  Assert.assertEquals("Unexpected num failed5",hiveConf.getIntVar(HiveConf.ConfVars.COMPACTOR_HISTORY_RETENTION_FAILED),cbs.failed);
  Assert.assertEquals("Unexpected num succeeded",1,cbs.succeeded);
  Assert.assertEquals("Unexpected num total5",hiveConf.getIntVar(HiveConf.ConfVars.COMPACTOR_HISTORY_RETENTION_FAILED) + 1,cbs.total);
}
