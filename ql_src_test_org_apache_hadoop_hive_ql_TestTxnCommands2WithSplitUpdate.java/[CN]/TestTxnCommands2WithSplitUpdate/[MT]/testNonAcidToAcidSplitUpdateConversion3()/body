{
  FileSystem fs=FileSystem.get(hiveConf);
  FileStatus[] status;
  runStatementOnDriver("insert into " + Table.NONACIDORCTBL + "(a,b) values(1,2)");
  status=fs.listStatus(new Path(TEST_WAREHOUSE_DIR + "/" + (Table.NONACIDORCTBL).toString().toLowerCase()),FileUtils.STAGING_DIR_PATH_FILTER);
  Assert.assertEquals(BUCKET_COUNT,status.length);
  for (int i=0; i < status.length; i++) {
    Assert.assertTrue(status[i].getPath().getName().matches("00000[01]_0"));
  }
  List<String> rs=runStatementOnDriver("select a,b from " + Table.NONACIDORCTBL);
  int[][] resultData=new int[][]{{1,2}};
  Assert.assertEquals(stringifyValues(resultData),rs);
  rs=runStatementOnDriver("select count(*) from " + Table.NONACIDORCTBL);
  int resultCount=1;
  Assert.assertEquals(resultCount,Integer.parseInt(rs.get(0)));
  runStatementOnDriver("alter table " + Table.NONACIDORCTBL + " SET TBLPROPERTIES ('transactional'='true', 'transactional_properties'='default')");
  status=fs.listStatus(new Path(TEST_WAREHOUSE_DIR + "/" + (Table.NONACIDORCTBL).toString().toLowerCase()),FileUtils.STAGING_DIR_PATH_FILTER);
  Assert.assertEquals(BUCKET_COUNT,status.length);
  for (int i=0; i < status.length; i++) {
    Assert.assertTrue(status[i].getPath().getName().matches("00000[01]_0"));
  }
  rs=runStatementOnDriver("select a,b from " + Table.NONACIDORCTBL);
  resultData=new int[][]{{1,2}};
  Assert.assertEquals(stringifyValues(resultData),rs);
  rs=runStatementOnDriver("select count(*) from " + Table.NONACIDORCTBL);
  resultCount=1;
  Assert.assertEquals(resultCount,Integer.parseInt(rs.get(0)));
  runStatementOnDriver("alter table " + Table.NONACIDORCTBL + " compact 'MAJOR'");
  runWorker(hiveConf);
  status=fs.listStatus(new Path(TEST_WAREHOUSE_DIR + "/" + (Table.NONACIDORCTBL).toString().toLowerCase()),FileUtils.STAGING_DIR_PATH_FILTER);
  Assert.assertEquals(3,status.length);
  boolean sawNewBase=false;
  for (int i=0; i < status.length; i++) {
    if (status[i].getPath().getName().matches("base_.*")) {
      Assert.assertEquals("base_-9223372036854775808",status[i].getPath().getName());
      sawNewBase=true;
      FileStatus[] buckets=fs.listStatus(status[i].getPath(),FileUtils.STAGING_DIR_PATH_FILTER);
      Assert.assertEquals(BUCKET_COUNT - 1,buckets.length);
      Assert.assertEquals("bucket_00001",buckets[0].getPath().getName());
    }
  }
  Assert.assertTrue(sawNewBase);
  rs=runStatementOnDriver("select a,b from " + Table.NONACIDORCTBL);
  resultData=new int[][]{{1,2}};
  Assert.assertEquals(stringifyValues(resultData),rs);
  rs=runStatementOnDriver("select count(*) from " + Table.NONACIDORCTBL);
  resultCount=1;
  Assert.assertEquals(resultCount,Integer.parseInt(rs.get(0)));
  runStatementOnDriver("update " + Table.NONACIDORCTBL + " set b=3 where a=1");
  runStatementOnDriver("insert into " + Table.NONACIDORCTBL + "(a,b) values(3,4)");
  status=fs.listStatus(new Path(TEST_WAREHOUSE_DIR + "/" + (Table.NONACIDORCTBL).toString().toLowerCase()),FileUtils.STAGING_DIR_PATH_FILTER);
  Arrays.sort(status);
  Assert.assertEquals(6,status.length);
  int numDelta=0;
  int numDeleteDelta=0;
  sawNewBase=false;
  for (int i=0; i < status.length; i++) {
    if (status[i].getPath().getName().matches("delta_.*")) {
      numDelta++;
      FileStatus[] buckets=fs.listStatus(status[i].getPath(),FileUtils.STAGING_DIR_PATH_FILTER);
      Arrays.sort(buckets);
      if (numDelta == 1) {
        Assert.assertEquals("delta_0000001_0000001_0000",status[i].getPath().getName());
        Assert.assertEquals(BUCKET_COUNT - 1,buckets.length);
        Assert.assertEquals("bucket_00001",buckets[0].getPath().getName());
      }
 else       if (numDelta == 2) {
        Assert.assertEquals("delta_0000002_0000002_0000",status[i].getPath().getName());
        Assert.assertEquals(1,buckets.length);
        Assert.assertEquals("bucket_00001",buckets[0].getPath().getName());
      }
    }
 else     if (status[i].getPath().getName().matches("delete_delta_.*")) {
      numDeleteDelta++;
      FileStatus[] buckets=fs.listStatus(status[i].getPath(),FileUtils.STAGING_DIR_PATH_FILTER);
      Arrays.sort(buckets);
      if (numDeleteDelta == 1) {
        Assert.assertEquals("delete_delta_0000001_0000001_0000",status[i].getPath().getName());
        Assert.assertEquals(BUCKET_COUNT - 1,buckets.length);
        Assert.assertEquals("bucket_00001",buckets[0].getPath().getName());
      }
    }
 else     if (status[i].getPath().getName().matches("base_.*")) {
      Assert.assertEquals("base_-9223372036854775808",status[i].getPath().getName());
      sawNewBase=true;
      FileStatus[] buckets=fs.listStatus(status[i].getPath(),FileUtils.STAGING_DIR_PATH_FILTER);
      Assert.assertEquals(BUCKET_COUNT - 1,buckets.length);
      Assert.assertEquals("bucket_00001",buckets[0].getPath().getName());
    }
 else {
      Assert.assertTrue(status[i].getPath().getName().matches("00000[01]_0"));
    }
  }
  Assert.assertEquals(2,numDelta);
  Assert.assertEquals(1,numDeleteDelta);
  Assert.assertTrue(sawNewBase);
  rs=runStatementOnDriver("select a,b from " + Table.NONACIDORCTBL);
  resultData=new int[][]{{1,3},{3,4}};
  Assert.assertEquals(stringifyValues(resultData),rs);
  rs=runStatementOnDriver("select count(*) from " + Table.NONACIDORCTBL);
  resultCount=2;
  Assert.assertEquals(resultCount,Integer.parseInt(rs.get(0)));
  runStatementOnDriver("alter table " + Table.NONACIDORCTBL + " compact 'MAJOR'");
  runWorker(hiveConf);
  status=fs.listStatus(new Path(TEST_WAREHOUSE_DIR + "/" + (Table.NONACIDORCTBL).toString().toLowerCase()),FileUtils.STAGING_DIR_PATH_FILTER);
  Arrays.sort(status);
  Assert.assertEquals(7,status.length);
  int numBase=0;
  for (int i=0; i < status.length; i++) {
    if (status[i].getPath().getName().matches("base_.*")) {
      numBase++;
      FileStatus[] buckets=fs.listStatus(status[i].getPath(),FileUtils.STAGING_DIR_PATH_FILTER);
      Arrays.sort(buckets);
      if (numBase == 1) {
        Assert.assertEquals("base_-9223372036854775808",status[i].getPath().getName());
        Assert.assertEquals(BUCKET_COUNT - 1,buckets.length);
        Assert.assertEquals("bucket_00001",buckets[0].getPath().getName());
      }
 else       if (numBase == 2) {
        Assert.assertEquals("base_0000002",status[i].getPath().getName());
        Assert.assertEquals(1,buckets.length);
        Assert.assertEquals("bucket_00001",buckets[0].getPath().getName());
      }
    }
  }
  Assert.assertEquals(2,numBase);
  rs=runStatementOnDriver("select a,b from " + Table.NONACIDORCTBL);
  resultData=new int[][]{{1,3},{3,4}};
  Assert.assertEquals(stringifyValues(resultData),rs);
  rs=runStatementOnDriver("select count(*) from " + Table.NONACIDORCTBL);
  resultCount=2;
  Assert.assertEquals(resultCount,Integer.parseInt(rs.get(0)));
  status=fs.listStatus(new Path(TEST_WAREHOUSE_DIR + "/" + (Table.NONACIDORCTBL).toString().toLowerCase()),FileUtils.STAGING_DIR_PATH_FILTER);
  Assert.assertEquals(7,status.length);
  runCleaner(hiveConf);
  status=fs.listStatus(new Path(TEST_WAREHOUSE_DIR + "/" + (Table.NONACIDORCTBL).toString().toLowerCase()),FileUtils.STAGING_DIR_PATH_FILTER);
  Assert.assertEquals(1,status.length);
  Assert.assertEquals("base_0000002",status[0].getPath().getName());
  FileStatus[] buckets=fs.listStatus(status[0].getPath(),FileUtils.STAGING_DIR_PATH_FILTER);
  Arrays.sort(buckets);
  Assert.assertEquals(1,buckets.length);
  Assert.assertEquals("bucket_00001",buckets[0].getPath().getName());
  rs=runStatementOnDriver("select a,b from " + Table.NONACIDORCTBL);
  resultData=new int[][]{{1,3},{3,4}};
  Assert.assertEquals(stringifyValues(resultData),rs);
  rs=runStatementOnDriver("select count(*) from " + Table.NONACIDORCTBL);
  resultCount=2;
  Assert.assertEquals(resultCount,Integer.parseInt(rs.get(0)));
}
