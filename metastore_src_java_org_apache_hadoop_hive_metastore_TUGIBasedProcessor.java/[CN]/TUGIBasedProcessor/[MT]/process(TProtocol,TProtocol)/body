{
  setIpAddress(in);
  final TMessage msg=in.readMessageBegin();
  final ProcessFunction<Iface,? extends TBase> fn=functions.get(msg.name);
  if (fn == null) {
    TProtocolUtil.skip(in,TType.STRUCT);
    in.readMessageEnd();
    TApplicationException x=new TApplicationException(TApplicationException.UNKNOWN_METHOD,"Invalid method name: '" + msg.name + "'");
    out.writeMessageBegin(new TMessage(msg.name,TMessageType.EXCEPTION,msg.seqid));
    x.write(out);
    out.writeMessageEnd();
    out.getTransport().flush();
    return true;
  }
  TUGIContainingTransport ugiTrans=(TUGIContainingTransport)in.getTransport();
  if (msg.name.equalsIgnoreCase("set_ugi")) {
    try {
      handleSetUGI(ugiTrans,fn,msg,in,out);
    }
 catch (    TException e) {
      throw e;
    }
catch (    Exception e) {
      throw new TException(e.getCause());
    }
    return true;
  }
  UserGroupInformation clientUgi=ugiTrans.getClientUGI();
  if (null == clientUgi) {
    fn.process(msg.seqid,in,out,iface);
    return true;
  }
 else {
    PrivilegedExceptionAction<Void> pvea=new PrivilegedExceptionAction<Void>(){
      public Void run(){
        try {
          fn.process(msg.seqid,in,out,iface);
          return null;
        }
 catch (        TException te) {
          throw new RuntimeException(te);
        }
      }
    }
;
    try {
      shim.doAs(clientUgi,pvea);
      return true;
    }
 catch (    RuntimeException rte) {
      if (rte.getCause() instanceof TException) {
        throw (TException)rte.getCause();
      }
      throw rte;
    }
catch (    InterruptedException ie) {
      throw new RuntimeException(ie);
    }
catch (    IOException ioe) {
      throw new RuntimeException(ioe);
    }
 finally {
      shim.closeAllForUGI(clientUgi);
    }
  }
}
