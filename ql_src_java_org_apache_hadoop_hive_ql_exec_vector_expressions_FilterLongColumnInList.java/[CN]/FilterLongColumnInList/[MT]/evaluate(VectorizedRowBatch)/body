{
  if (childExpressions != null) {
    super.evaluateChildren(batch);
  }
  if (inSet == null) {
    inSet=new CuckooSetLong(inListValues.length);
    inSet.load(inListValues);
  }
  LongColumnVector inputColVector=(LongColumnVector)batch.cols[inputCol];
  int[] sel=batch.selected;
  boolean[] nullPos=inputColVector.isNull;
  int n=batch.size;
  long[] vector=inputColVector.vector;
  if (n == 0) {
    return;
  }
  if (inputColVector.noNulls) {
    if (inputColVector.isRepeating) {
      if (!(inSet.lookup(vector[0]))) {
        batch.size=0;
      }
    }
 else     if (batch.selectedInUse) {
      int newSize=0;
      for (int j=0; j != n; j++) {
        int i=sel[j];
        if (inSet.lookup(vector[i])) {
          sel[newSize++]=i;
        }
      }
      batch.size=newSize;
    }
 else {
      int newSize=0;
      for (int i=0; i != n; i++) {
        if (inSet.lookup(vector[i])) {
          sel[newSize++]=i;
        }
      }
      if (newSize < n) {
        batch.size=newSize;
        batch.selectedInUse=true;
      }
    }
  }
 else {
    if (inputColVector.isRepeating) {
      if (!nullPos[0]) {
        if (!inSet.lookup(vector[0])) {
          batch.size=0;
        }
      }
 else {
        batch.size=0;
      }
    }
 else     if (batch.selectedInUse) {
      int newSize=0;
      for (int j=0; j != n; j++) {
        int i=sel[j];
        if (!nullPos[i]) {
          if (inSet.lookup(vector[i])) {
            sel[newSize++]=i;
          }
        }
      }
      batch.size=newSize;
    }
 else {
      int newSize=0;
      for (int i=0; i != n; i++) {
        if (!nullPos[i]) {
          if (inSet.lookup(vector[i])) {
            sel[newSize++]=i;
          }
        }
      }
      if (newSize < n) {
        batch.size=newSize;
        batch.selectedInUse=true;
      }
    }
  }
}
