{
  assert(!List.class.isAssignableFrom(objectClass));
  assert(!Map.class.isAssignableFrom(objectClass));
  this.objectClass=objectClass;
  Field[] reflectionFields=ObjectInspectorUtils.getDeclaredNonStaticFields(objectClass);
  fields=new ArrayList<MyField>(structFieldObjectInspectors.size());
  int used=0;
  for (int i=0; i < reflectionFields.length; i++) {
    if (!shouldIgnoreField(reflectionFields[i].getName())) {
      reflectionFields[i].setAccessible(true);
      fields.add(new MyField(reflectionFields[i],structFieldObjectInspectors.get(used++)));
    }
  }
  assert(fields.size() == structFieldObjectInspectors.size());
}
