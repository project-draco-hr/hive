{
switch (fieldID) {
case TABLENAME:
    if (value == null) {
      unsetTableName();
    }
 else {
      setTableName((String)value);
    }
  break;
case DBNAME:
if (value == null) {
  unsetDbName();
}
 else {
  setDbName((String)value);
}
break;
case OWNER:
if (value == null) {
unsetOwner();
}
 else {
setOwner((String)value);
}
break;
case CREATETIME:
if (value == null) {
unsetCreateTime();
}
 else {
setCreateTime((Integer)value);
}
break;
case LASTACCESSTIME:
if (value == null) {
unsetLastAccessTime();
}
 else {
setLastAccessTime((Integer)value);
}
break;
case RETENTION:
if (value == null) {
unsetRetention();
}
 else {
setRetention((Integer)value);
}
break;
case SD:
if (value == null) {
unsetSd();
}
 else {
setSd((StorageDescriptor)value);
}
break;
case PARTITIONKEYS:
if (value == null) {
unsetPartitionKeys();
}
 else {
setPartitionKeys((List<FieldSchema>)value);
}
break;
case PARAMETERS:
if (value == null) {
unsetParameters();
}
 else {
setParameters((Map<String,String>)value);
}
break;
case VIEWORIGINALTEXT:
if (value == null) {
unsetViewOriginalText();
}
 else {
setViewOriginalText((String)value);
}
break;
case VIEWEXPANDEDTEXT:
if (value == null) {
unsetViewExpandedText();
}
 else {
setViewExpandedText((String)value);
}
break;
default :
throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
}
}
