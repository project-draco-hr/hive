{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case TABLENAME:
      if (field.type == TType.STRING) {
        this.tableName=iprot.readString();
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case DBNAME:
  if (field.type == TType.STRING) {
    this.dbName=iprot.readString();
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case OWNER:
if (field.type == TType.STRING) {
this.owner=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case CREATETIME:
if (field.type == TType.I32) {
this.createTime=iprot.readI32();
this.__isset.createTime=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case LASTACCESSTIME:
if (field.type == TType.I32) {
this.lastAccessTime=iprot.readI32();
this.__isset.lastAccessTime=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case RETENTION:
if (field.type == TType.I32) {
this.retention=iprot.readI32();
this.__isset.retention=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case SD:
if (field.type == TType.STRUCT) {
this.sd=new StorageDescriptor();
this.sd.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case PARTITIONKEYS:
if (field.type == TType.LIST) {
{
TList _list26=iprot.readListBegin();
this.partitionKeys=new ArrayList<FieldSchema>(_list26.size);
for (int _i27=0; _i27 < _list26.size; ++_i27) {
FieldSchema _elem28;
_elem28=new FieldSchema();
_elem28.read(iprot);
this.partitionKeys.add(_elem28);
}
iprot.readListEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case PARAMETERS:
if (field.type == TType.MAP) {
{
TMap _map29=iprot.readMapBegin();
this.parameters=new HashMap<String,String>(2 * _map29.size);
for (int _i30=0; _i30 < _map29.size; ++_i30) {
String _key31;
String _val32;
_key31=iprot.readString();
_val32=iprot.readString();
this.parameters.put(_key31,_val32);
}
iprot.readMapEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case VIEWORIGINALTEXT:
if (field.type == TType.STRING) {
this.viewOriginalText=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case VIEWEXPANDEDTEXT:
if (field.type == TType.STRING) {
this.viewExpandedText=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case TABLETYPE:
if (field.type == TType.STRING) {
this.tableType=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
