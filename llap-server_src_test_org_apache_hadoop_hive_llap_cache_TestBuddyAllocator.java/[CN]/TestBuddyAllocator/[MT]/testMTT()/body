{
  final int min=3, max=8, maxAlloc=1 << max, allocsPerSize=3;
  Configuration conf=createConf(1 << min,maxAlloc,maxAlloc * 8,maxAlloc * 24);
  final BuddyAllocator a=new BuddyAllocator(conf,new DummyMemoryManager(),LlapDaemonCacheMetrics.create("test","1"));
  ExecutorService executor=Executors.newFixedThreadPool(3);
  final CountDownLatch cdlIn=new CountDownLatch(3), cdlOut=new CountDownLatch(1);
  FutureTask<Object> upTask=new FutureTask<Object>(new Runnable(){
    public void run(){
      syncThreadStart(cdlIn,cdlOut);
      allocateUp(a,min,max,allocsPerSize,false);
      allocateUp(a,min,max,allocsPerSize,true);
    }
  }
,null), downTask=new FutureTask<Object>(new Runnable(){
    public void run(){
      syncThreadStart(cdlIn,cdlOut);
      allocateDown(a,min,max,allocsPerSize,false);
      allocateDown(a,min,max,allocsPerSize,true);
    }
  }
,null), sameTask=new FutureTask<Object>(new Runnable(){
    public void run(){
      syncThreadStart(cdlIn,cdlOut);
      for (int i=min; i <= max; ++i) {
        allocSameSize(a,(1 << (max - i)) * allocsPerSize,i);
      }
    }
  }
,null);
  executor.execute(sameTask);
  executor.execute(upTask);
  executor.execute(downTask);
  try {
    cdlIn.await();
    cdlOut.countDown();
    upTask.get();
    downTask.get();
    sameTask.get();
  }
 catch (  Throwable t) {
    throw new RuntimeException(t);
  }
}
