{
  assert(qfiles.length == resDirs.length);
  assert(qfiles.length == logDirs.length);
  boolean failed=false;
  try {
    QTestUtil[] qt=new QTestUtil[qfiles.length];
    QTestSetup[] qsetup=new QTestSetup[qfiles.length];
    for (int i=0; i < qfiles.length; i++) {
      qt[i]=new QTestUtil(resDirs[i],logDirs[i],false,"0.20");
      qt[i].addFile(qfiles[i]);
      qt[i].clearTestSideEffects();
    }
    if (mt) {
      qt[0].cleanUp();
      qt[0].createSources();
      qt[0].clearTestSideEffects();
      QTRunner[] qtRunners=new QTestUtil.QTRunner[qfiles.length];
      Thread[] qtThread=new Thread[qfiles.length];
      for (int i=0; i < qfiles.length; i++) {
        qtRunners[i]=new QTestUtil.QTRunner(qt[i],qfiles[i].getName());
        qtThread[i]=new Thread(qtRunners[i]);
      }
      for (int i=0; i < qfiles.length; i++) {
        qtThread[i].start();
      }
      for (int i=0; i < qfiles.length; i++) {
        qtThread[i].join();
        int ecode=qt[i].checkCliDriverResults(qfiles[i].getName());
        if (ecode != 0) {
          failed=true;
          System.err.println("Test " + qfiles[i].getName() + " results check failed with error code "+ ecode);
          outputTestFailureHelpMessage();
        }
      }
    }
 else {
      for (int i=0; i < qfiles.length && !failed; i++) {
        qt[i].cliInit(qfiles[i].getName());
        qt[i].executeClient(qfiles[i].getName());
        int ecode=qt[i].checkCliDriverResults(qfiles[i].getName());
        if (ecode != 0) {
          failed=true;
          System.err.println("Test " + qfiles[i].getName() + " results check failed with error code "+ ecode);
          outputTestFailureHelpMessage();
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    return false;
  }
  return (!failed);
}
