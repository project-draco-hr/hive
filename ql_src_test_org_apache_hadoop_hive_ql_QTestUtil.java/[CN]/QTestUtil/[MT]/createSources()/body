{
  LinkedList<String> cols=new LinkedList<String>();
  cols.add("key");
  cols.add("value");
  LinkedList<String> part_cols=new LinkedList<String>();
  part_cols.add("ds");
  part_cols.add("hr");
  db.createTable("srcpart",cols,part_cols,TextInputFormat.class,IgnoreKeyTextOutputFormat.class);
  srcTables.add("srcpart");
  Path fpath;
  Path newfpath;
  HashMap<String,String> part_spec=new HashMap<String,String>();
  for (  String ds : new String[]{"2008-04-08","2008-04-09"}) {
    for (    String hr : new String[]{"11","12"}) {
      part_spec.clear();
      part_spec.put("ds",ds);
      part_spec.put("hr",hr);
      fpath=new Path(testFiles,"kv1.txt");
      newfpath=new Path(tmppath,"kv1.txt");
      fs.copyFromLocalFile(false,true,fpath,newfpath);
      fpath=newfpath;
      runLoadCmd("LOAD DATA INPATH '" + newfpath.toString() + "' OVERWRITE INTO TABLE srcpart PARTITION (ds='"+ ds+ "',hr='"+ hr+ "')");
    }
  }
  ArrayList<String> bucketCols=new ArrayList<String>();
  bucketCols.add("key");
  runCreateTableCmd("CREATE TABLE srcbucket(key int, value string) CLUSTERED BY (key) INTO 2 BUCKETS STORED AS TEXTFILE");
  srcTables.add("srcbucket");
  for (  String fname : new String[]{"srcbucket0.txt","srcbucket1.txt"}) {
    fpath=new Path(testFiles,fname);
    newfpath=new Path(tmppath,fname);
    fs.copyFromLocalFile(false,true,fpath,newfpath);
    runLoadCmd("LOAD DATA INPATH '" + newfpath.toString() + "' INTO TABLE srcbucket");
  }
  runCreateTableCmd("CREATE TABLE srcbucket2(key int, value string) CLUSTERED BY (key) INTO 4 BUCKETS STORED AS TEXTFILE");
  srcTables.add("srcbucket2");
  for (  String fname : new String[]{"srcbucket20.txt","srcbucket21.txt","srcbucket22.txt","srcbucket23.txt"}) {
    fpath=new Path(testFiles,fname);
    newfpath=new Path(tmppath,fname);
    fs.copyFromLocalFile(false,true,fpath,newfpath);
    runLoadCmd("LOAD DATA INPATH '" + newfpath.toString() + "' INTO TABLE srcbucket2");
  }
  for (  String tname : new String[]{"src","src1"}) {
    db.createTable(tname,cols,null,TextInputFormat.class,IgnoreKeyTextOutputFormat.class);
    srcTables.add(tname);
  }
  db.createTable("src_sequencefile",cols,null,SequenceFileInputFormat.class,SequenceFileOutputFormat.class);
  srcTables.add("src_sequencefile");
  Table srcThrift=new Table("src_thrift");
  srcThrift.setInputFormatClass(SequenceFileInputFormat.class.getName());
  srcThrift.setOutputFormatClass(SequenceFileOutputFormat.class.getName());
  srcThrift.setSerializationLib(ThriftDeserializer.class.getName());
  srcThrift.setSerdeParam(Constants.SERIALIZATION_CLASS,Complex.class.getName());
  srcThrift.setSerdeParam(Constants.SERIALIZATION_FORMAT,TBinaryProtocol.class.getName());
  db.createTable(srcThrift);
  srcTables.add("src_thrift");
  LinkedList<String> json_cols=new LinkedList<String>();
  json_cols.add("json");
  db.createTable("src_json",json_cols,null,TextInputFormat.class,IgnoreKeyTextOutputFormat.class);
  srcTables.add("src_json");
  fpath=new Path(testFiles,"kv1.txt");
  newfpath=new Path(tmppath,"kv1.txt");
  fs.copyFromLocalFile(false,true,fpath,newfpath);
  runLoadCmd("LOAD DATA INPATH '" + newfpath.toString() + "' INTO TABLE src");
  fpath=new Path(testFiles,"kv3.txt");
  newfpath=new Path(tmppath,"kv3.txt");
  fs.copyFromLocalFile(false,true,fpath,newfpath);
  runLoadCmd("LOAD DATA INPATH '" + newfpath.toString() + "' INTO TABLE src1");
  fpath=new Path(testFiles,"kv1.seq");
  newfpath=new Path(tmppath,"kv1.seq");
  fs.copyFromLocalFile(false,true,fpath,newfpath);
  runLoadCmd("LOAD DATA INPATH '" + newfpath.toString() + "' INTO TABLE src_sequencefile");
  fpath=new Path(testFiles,"complex.seq");
  newfpath=new Path(tmppath,"complex.seq");
  fs.copyFromLocalFile(false,true,fpath,newfpath);
  runLoadCmd("LOAD DATA INPATH '" + newfpath.toString() + "' INTO TABLE src_thrift");
  fpath=new Path(testFiles,"json.txt");
  newfpath=new Path(tmppath,"json.txt");
  fs.copyFromLocalFile(false,true,fpath,newfpath);
  runLoadCmd("LOAD DATA INPATH '" + newfpath.toString() + "' INTO TABLE src_json");
}
