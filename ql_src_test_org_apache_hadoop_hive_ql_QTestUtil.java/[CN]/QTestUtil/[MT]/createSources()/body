{
  LinkedList<String> cols=new LinkedList<String>();
  cols.add("key");
  cols.add("value");
  LinkedList<String> part_cols=new LinkedList<String>();
  part_cols.add("ds");
  part_cols.add("hr");
  db.createTable("srcpart",cols,part_cols,TextInputFormat.class,IgnoreKeyTextOutputFormat.class);
  srcTables.add("srcpart");
  Table srcpart=db.getTable("srcpart");
  Path fpath;
  Path newfpath;
  HashMap<String,String> part_spec=new HashMap<String,String>();
  String loadCmd;
  int ecode=0;
  for (  String ds : new String[]{"2008-04-08","2008-04-09"}) {
    for (    String hr : new String[]{"11","12"}) {
      part_spec.clear();
      part_spec.put("ds",ds);
      part_spec.put("hr",hr);
      db.createPartition(srcpart,part_spec);
      fpath=new Path(testFiles,"kv1.txt");
      newfpath=new Path(tmppath,"kv1.txt");
      fs.copyFromLocalFile(false,true,fpath,newfpath);
      fpath=newfpath;
      loadCmd="LOAD DATA INPATH '" + newfpath.toString() + "' INTO TABLE srcpart PARTITION (ds='"+ ds+ "',hr='"+ hr+ "')";
      ecode=drv.run(loadCmd);
      if (ecode != 0) {
        throw new Exception("load command: " + loadCmd + " failed with exit code= "+ ecode);
      }
    }
  }
  ArrayList<String> bucketCols=new ArrayList<String>();
  bucketCols.add("key");
  db.createTable("srcbucket",cols,null,TextInputFormat.class,IgnoreKeyTextOutputFormat.class,2,bucketCols);
  srcTables.add("srcbucket");
  for (  String fname : new String[]{"kv1.txt","kv2.txt"}) {
    fpath=new Path(testFiles,fname);
    newfpath=new Path(tmppath,fname);
    fs.copyFromLocalFile(false,true,fpath,newfpath);
    loadCmd="LOAD DATA INPATH '" + newfpath.toString() + "' INTO TABLE srcbucket";
    ecode=drv.run(loadCmd);
    if (ecode != 0) {
      throw new Exception("load command: " + loadCmd + " failed with exit code= "+ ecode);
    }
  }
  for (  String tname : new String[]{"src","src1"}) {
    db.createTable(tname,cols,null,TextInputFormat.class,IgnoreKeyTextOutputFormat.class);
    srcTables.add(tname);
  }
  db.createTable("src_sequencefile",cols,null,SequenceFileInputFormat.class,SequenceFileOutputFormat.class);
  srcTables.add("src_sequencefile");
  Table srcThrift=new Table("src_thrift");
  srcThrift.setInputFormatClass(SequenceFileInputFormat.class.getName());
  srcThrift.setOutputFormatClass(SequenceFileOutputFormat.class.getName());
  srcThrift.setSerializationLib(ThriftDeserializer.class.getName());
  srcThrift.setSerdeParam(Constants.SERIALIZATION_CLASS,Complex.class.getName());
  srcThrift.setSerdeParam(Constants.SERIALIZATION_FORMAT,TBinaryProtocol.class.getName());
  db.createTable(srcThrift);
  srcTables.add("src_thrift");
  fpath=new Path(testFiles,"kv1.txt");
  newfpath=new Path(tmppath,"kv1.txt");
  fs.copyFromLocalFile(false,true,fpath,newfpath);
  loadCmd="LOAD DATA INPATH '" + newfpath.toString() + "' INTO TABLE src";
  ecode=drv.run(loadCmd);
  if (ecode != 0) {
    throw new Exception("load command: " + loadCmd + " failed with exit code= "+ ecode);
  }
  fpath=new Path(testFiles,"kv3.txt");
  newfpath=new Path(tmppath,"kv3.txt");
  fs.copyFromLocalFile(false,true,fpath,newfpath);
  db.loadTable(newfpath,"src1",false);
  fpath=new Path(testFiles,"kv1.seq");
  newfpath=new Path(tmppath,"kv1.seq");
  fs.copyFromLocalFile(false,true,fpath,newfpath);
  db.loadTable(newfpath,"src_sequencefile",true);
  fpath=new Path(testFiles,"complex.seq");
  newfpath=new Path(tmppath,"complex.seq");
  fs.copyFromLocalFile(false,true,fpath,newfpath);
  db.loadTable(newfpath,"src_thrift",true);
}
