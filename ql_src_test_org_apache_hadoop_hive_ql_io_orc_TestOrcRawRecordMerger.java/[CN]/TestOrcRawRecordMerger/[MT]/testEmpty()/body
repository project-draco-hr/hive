{
  final int BUCKET=0;
  Configuration conf=new Configuration();
  OrcOutputFormat of=new OrcOutputFormat();
  FileSystem fs=FileSystem.getLocal(conf);
  Path root=new Path(tmpDir,"testEmpty").makeQualified(fs);
  fs.delete(root,true);
  ObjectInspector inspector;
synchronized (TestOrcFile.class) {
    inspector=ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,ObjectInspectorFactory.ObjectInspectorOptions.JAVA);
  }
  AcidOutputFormat.Options options=new AcidOutputFormat.Options(conf).inspector(inspector).bucket(BUCKET).writingBase(true).maximumTransactionId(100).finalDestination(root);
  of.getRecordUpdater(root,options).close(false);
  ValidTxnList txnList=new ValidReadTxnList("200:");
  AcidUtils.Directory directory=AcidUtils.getAcidState(root,conf,txnList);
  Path basePath=AcidUtils.createBucketFile(directory.getBaseDirectory(),BUCKET);
  Reader baseReader=OrcFile.createReader(basePath,OrcFile.readerOptions(conf));
  conf.set(IOConstants.SCHEMA_EVOLUTION_COLUMNS,MyRow.getColumnNamesProperty());
  conf.set(IOConstants.SCHEMA_EVOLUTION_COLUMNS_TYPES,MyRow.getColumnTypesProperty());
  HiveConf.setBoolVar(conf,HiveConf.ConfVars.HIVE_TRANSACTIONAL_TABLE_SCAN,true);
  OrcRawRecordMerger merger=new OrcRawRecordMerger(conf,true,baseReader,false,BUCKET,createMaximalTxnList(),new Reader.Options(),AcidUtils.getPaths(directory.getCurrentDirectories()));
  RecordIdentifier key=merger.createKey();
  OrcStruct value=merger.createValue();
  assertEquals(false,merger.next(key,value));
}
