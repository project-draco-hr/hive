{
  final int BUCKET=10;
  String[] values=new String[]{"first","second","third","fourth","fifth","sixth","seventh","eighth","ninth","tenth"};
  Configuration conf=new Configuration();
  OrcOutputFormat of=new OrcOutputFormat();
  FileSystem fs=FileSystem.getLocal(conf);
  Path root=new Path(tmpDir,"testNewBaseAndDelta").makeQualified(fs);
  fs.delete(root,true);
  ObjectInspector inspector;
synchronized (TestOrcFile.class) {
    inspector=ObjectInspectorFactory.getReflectionObjectInspector(MyRow.class,ObjectInspectorFactory.ObjectInspectorOptions.JAVA);
  }
  AcidOutputFormat.Options options=new AcidOutputFormat.Options(conf).inspector(inspector).bucket(BUCKET).finalDestination(root);
  if (!use130Format) {
    options.statementId(-1);
  }
  RecordUpdater ru=of.getRecordUpdater(root,options.writingBase(true).maximumTransactionId(100));
  for (  String v : values) {
    ru.insert(0,new MyRow(v));
  }
  ru.close(false);
  ru=of.getRecordUpdater(root,options.writingBase(false).minimumTransactionId(200).maximumTransactionId(200).recordIdColumn(1));
  ru.update(200,new MyRow("update 1",0,0,BUCKET));
  ru.update(200,new MyRow("update 2",2,0,BUCKET));
  ru.update(200,new MyRow("update 3",3,0,BUCKET));
  ru.delete(200,new MyRow("",7,0,BUCKET));
  ru.delete(200,new MyRow("",8,0,BUCKET));
  ru.close(false);
  ValidTxnList txnList=new ValidReadTxnList("200:");
  AcidUtils.Directory directory=AcidUtils.getAcidState(root,conf,txnList);
  assertEquals(new Path(root,"base_0000100"),directory.getBaseDirectory());
  assertEquals(new Path(root,use130Format ? AcidUtils.deltaSubdir(200,200,0) : AcidUtils.deltaSubdir(200,200)),directory.getCurrentDirectories().get(0).getPath());
  Path basePath=AcidUtils.createBucketFile(directory.getBaseDirectory(),BUCKET);
  conf.set("columns",MyRow.getColumnNamesProperty());
  conf.set("columns.types",MyRow.getColumnTypesProperty());
  Reader baseReader=OrcFile.createReader(basePath,OrcFile.readerOptions(conf));
  OrcRawRecordMerger merger=new OrcRawRecordMerger(conf,true,baseReader,false,BUCKET,createMaximalTxnList(),new Reader.Options(),AcidUtils.getPaths(directory.getCurrentDirectories()));
  assertEquals(null,merger.getMinKey());
  assertEquals(null,merger.getMaxKey());
  RecordIdentifier id=merger.createKey();
  OrcStruct event=merger.createValue();
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.UPDATE_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,0,200),id);
  assertEquals("update 1",getValue(event));
  assertFalse(merger.isDelete(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.INSERT_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,1,0),id);
  assertEquals("second",getValue(event));
  assertFalse(merger.isDelete(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.UPDATE_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,2,200),id);
  assertEquals("update 2",getValue(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.UPDATE_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,3,200),id);
  assertEquals("update 3",getValue(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.INSERT_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,4,0),id);
  assertEquals("fifth",getValue(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.INSERT_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,5,0),id);
  assertEquals("sixth",getValue(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.INSERT_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,6,0),id);
  assertEquals("seventh",getValue(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.DELETE_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,7,200),id);
  assertNull(OrcRecordUpdater.getRow(event));
  assertTrue(merger.isDelete(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.DELETE_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,8,200),id);
  assertNull(OrcRecordUpdater.getRow(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.INSERT_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,9,0),id);
  assertEquals("tenth",getValue(event));
  assertEquals(false,merger.next(id,event));
  merger.close();
  merger=new OrcRawRecordMerger(conf,false,baseReader,false,BUCKET,createMaximalTxnList(),new Reader.Options(),AcidUtils.getPaths(directory.getCurrentDirectories()));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.UPDATE_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,0,200),id);
  assertEquals("update 1",getValue(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.INSERT_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,0,0),id);
  assertEquals("first",getValue(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.INSERT_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,1,0),id);
  assertEquals("second",getValue(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.UPDATE_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,2,200),id);
  assertEquals("update 2",getValue(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.INSERT_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,2,0),id);
  assertEquals("third",getValue(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.UPDATE_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,3,200),id);
  assertEquals("update 3",getValue(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.INSERT_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,3,0),id);
  assertEquals("fourth",getValue(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.INSERT_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,4,0),id);
  assertEquals("fifth",getValue(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.INSERT_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,5,0),id);
  assertEquals("sixth",getValue(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.INSERT_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,6,0),id);
  assertEquals("seventh",getValue(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.DELETE_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,7,200),id);
  assertNull(OrcRecordUpdater.getRow(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.INSERT_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,7,0),id);
  assertEquals("eighth",getValue(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.DELETE_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,8,200),id);
  assertNull(OrcRecordUpdater.getRow(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.INSERT_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,8,0),id);
  assertEquals("ninth",getValue(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(OrcRecordUpdater.INSERT_OPERATION,OrcRecordUpdater.getOperation(event));
  assertEquals(new ReaderKey(0,BUCKET,9,0),id);
  assertEquals("tenth",getValue(event));
  assertEquals(false,merger.next(id,event));
  merger.close();
  ValidTxnList txns=new ValidReadTxnList("2000:200");
  merger=new OrcRawRecordMerger(conf,true,baseReader,false,BUCKET,txns,new Reader.Options(),AcidUtils.getPaths(directory.getCurrentDirectories()));
  for (int i=0; i < values.length; ++i) {
    assertEquals(true,merger.next(id,event));
    LOG.info("id = " + id + "event = "+ event);
    assertEquals(OrcRecordUpdater.INSERT_OPERATION,OrcRecordUpdater.getOperation(event));
    assertEquals(new ReaderKey(0,BUCKET,i,0),id);
    assertEquals(values[i],getValue(event));
  }
  assertEquals(false,merger.next(id,event));
  merger.close();
}
