{
  Configuration conf=new Configuration();
  conf.set("columns","col1");
  conf.set("columns.types","string");
  conf.set(serdeConstants.LIST_COLUMNS,"col1");
  conf.set(serdeConstants.LIST_COLUMN_TYPES,"string");
  Reader reader=Mockito.mock(Reader.class,settings);
  RecordReader recordReader=Mockito.mock(RecordReader.class,settings);
  List<OrcProto.Type> types=new ArrayList<OrcProto.Type>();
  OrcProto.Type.Builder typeBuilder=OrcProto.Type.newBuilder();
  typeBuilder.setKind(OrcProto.Type.Kind.STRUCT).addSubtypes(1).addSubtypes(2).addSubtypes(3).addSubtypes(4).addSubtypes(5).addSubtypes(6);
  typeBuilder.addAllFieldNames(Lists.newArrayList("operation","originalTransaction","bucket","rowId","currentTransaction","row"));
  types.add(typeBuilder.build());
  types.add(null);
  types.add(null);
  types.add(null);
  types.add(null);
  types.add(null);
  typeBuilder.clearSubtypes();
  typeBuilder.addSubtypes(7);
  typeBuilder.addAllFieldNames(Lists.newArrayList("col1"));
  types.add(typeBuilder.build());
  typeBuilder.clear();
  typeBuilder.setKind(OrcProto.Type.Kind.STRING);
  types.add(typeBuilder.build());
  Mockito.when(reader.getTypes()).thenReturn(types);
  Mockito.when(reader.rowsOptions(Mockito.any(Reader.Options.class))).thenReturn(recordReader);
  OrcStruct row1=new OrcStruct(OrcRecordUpdater.FIELDS);
  setRow(row1,OrcRecordUpdater.INSERT_OPERATION,10,20,20,100,"first");
  OrcStruct row2=new OrcStruct(OrcRecordUpdater.FIELDS);
  setRow(row2,OrcRecordUpdater.INSERT_OPERATION,10,20,30,110,"second");
  OrcStruct row3=new OrcStruct(OrcRecordUpdater.FIELDS);
  setRow(row3,OrcRecordUpdater.INSERT_OPERATION,10,20,40,120,"third");
  OrcStruct row4=new OrcStruct(OrcRecordUpdater.FIELDS);
  setRow(row4,OrcRecordUpdater.INSERT_OPERATION,40,50,60,130,"fourth");
  OrcStruct row5=new OrcStruct(OrcRecordUpdater.FIELDS);
  setRow(row5,OrcRecordUpdater.INSERT_OPERATION,40,50,61,140,"fifth");
  Mockito.when(recordReader.hasNext()).thenReturn(true,true,true,true,true,false);
  Mockito.when(recordReader.getProgress()).thenReturn(1.0f);
  Mockito.when(recordReader.next(null)).thenReturn(row1,row4);
  Mockito.when(recordReader.next(row1)).thenReturn(row2);
  Mockito.when(recordReader.next(row2)).thenReturn(row3);
  Mockito.when(recordReader.next(row3)).thenReturn(row5);
  Mockito.when(reader.getMetadataValue(OrcRecordUpdater.ACID_KEY_INDEX_NAME)).thenReturn(ByteBuffer.wrap("10,20,30;40,50,60;40,50,61".getBytes("UTF-8")));
  Mockito.when(reader.getStripes()).thenReturn(createStripes(2,2,1));
  OrcRawRecordMerger merger=new OrcRawRecordMerger(conf,false,reader,false,10,createMaximalTxnList(),new Reader.Options().range(1000,1000),null);
  RecordReader rr=merger.getCurrentReader().recordReader;
  assertEquals(0,merger.getOtherReaders().size());
  assertEquals(new RecordIdentifier(10,20,30),merger.getMinKey());
  assertEquals(new RecordIdentifier(40,50,60),merger.getMaxKey());
  RecordIdentifier id=merger.createKey();
  OrcStruct event=merger.createValue();
  assertEquals(true,merger.next(id,event));
  assertEquals(10,id.getTransactionId());
  assertEquals(20,id.getBucketId());
  assertEquals(40,id.getRowId());
  assertEquals("third",getValue(event));
  assertEquals(true,merger.next(id,event));
  assertEquals(40,id.getTransactionId());
  assertEquals(50,id.getBucketId());
  assertEquals(60,id.getRowId());
  assertEquals("fourth",getValue(event));
  assertEquals(false,merger.next(id,event));
  assertEquals(1.0,merger.getProgress(),0.01);
  merger.close();
  Mockito.verify(rr).close();
  Mockito.verify(rr).getProgress();
  StructObjectInspector eventObjectInspector=(StructObjectInspector)merger.getObjectInspector();
  List<? extends StructField> fields=eventObjectInspector.getAllStructFieldRefs();
  assertEquals(OrcRecordUpdater.FIELDS,fields.size());
  assertEquals("operation",fields.get(OrcRecordUpdater.OPERATION).getFieldName());
  assertEquals("currentTransaction",fields.get(OrcRecordUpdater.CURRENT_TRANSACTION).getFieldName());
  assertEquals("originalTransaction",fields.get(OrcRecordUpdater.ORIGINAL_TRANSACTION).getFieldName());
  assertEquals("bucket",fields.get(OrcRecordUpdater.BUCKET).getFieldName());
  assertEquals("rowId",fields.get(OrcRecordUpdater.ROW_ID).getFieldName());
  StructObjectInspector rowObjectInspector=(StructObjectInspector)fields.get(OrcRecordUpdater.ROW).getFieldObjectInspector();
  assertEquals("col1",rowObjectInspector.getAllStructFieldRefs().get(0).getFieldName());
}
