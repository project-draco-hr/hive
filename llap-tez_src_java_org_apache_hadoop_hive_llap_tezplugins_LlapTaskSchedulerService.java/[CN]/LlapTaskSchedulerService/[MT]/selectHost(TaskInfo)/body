{
  String[] requestedHosts=request.requestedHosts;
  if (LOG.isDebugEnabled()) {
    LOG.debug("selectingHost for task={} on hosts={}",request.task,Arrays.toString(requestedHosts));
  }
  long schedulerAttemptTime=clock.getTime();
  readLock.lock();
  try {
    if (getTotalResources().getMemory() <= 0) {
      return SELECT_HOST_RESULT_INADEQUATE_TOTAL_CAPACITY;
    }
    boolean shouldDelayForLocality=request.shouldDelayForLocality(schedulerAttemptTime);
    LOG.debug("ShouldDelayForLocality={} for task={} on hosts={}",shouldDelayForLocality,request.task,Arrays.toString(requestedHosts));
    if (requestedHosts != null && requestedHosts.length > 0) {
      int prefHostCount=-1;
      boolean requestedHostsWillBecomeAvailable=false;
      for (      String host : requestedHosts) {
        prefHostCount++;
        Set<ServiceInstance> instances=activeInstances.getByHost(host);
        if (!instances.isEmpty()) {
          for (          ServiceInstance inst : instances) {
            NodeInfo nodeInfo=instanceToNodeMap.get(inst.getWorkerIdentity());
            if (nodeInfo != null) {
              if (nodeInfo.canAcceptTask()) {
                LOG.info("Assigning " + nodeToString(inst,nodeInfo) + " when looking for "+ host+ ". local=true"+ " FirstRequestedHost="+ (prefHostCount == 0)+ (requestedHosts.length > 1 ? ", #prefLocations=" + requestedHosts.length : ""));
                return new SelectHostResult(inst,nodeInfo);
              }
 else {
                if (shouldDelayForLocality) {
                  if (request.shouldForceLocality()) {
                    requestedHostsWillBecomeAvailable=true;
                  }
 else {
                    if (nodeInfo.getEnableTime() > request.getLocalityDelayTimeout() && nodeInfo.isDisabled() && nodeInfo.hadCommFailure()) {
                      LOG.debug("Host={} will not become available within requested timeout",nodeInfo);
                    }
 else {
                      requestedHostsWillBecomeAvailable=true;
                    }
                  }
                }
              }
            }
 else {
              LOG.warn("Null NodeInfo when attempting to get host with worker identity {}, and host {}",inst.getWorkerIdentity(),host);
            }
          }
        }
      }
      if (shouldDelayForLocality) {
        if (requestedHostsWillBecomeAvailable) {
          if (LOG.isDebugEnabled()) {
            LOG.debug("Delaying local allocation for [" + request.task + "] when trying to allocate on ["+ Arrays.toString(requestedHosts)+ "]"+ ". ScheduleAttemptTime="+ schedulerAttemptTime+ ", taskDelayTimeout="+ request.getLocalityDelayTimeout());
          }
          return SELECT_HOST_RESULT_DELAYED_LOCALITY;
        }
 else {
          if (LOG.isDebugEnabled()) {
            LOG.debug("Skipping local allocation for [" + request.task + "] when trying to allocate on ["+ Arrays.toString(requestedHosts)+ "] since none of these hosts are part of the known list");
          }
        }
      }
    }
    Collection<ServiceInstance> instances=activeInstances.getAll();
    ArrayList<NodeInfo> all=new ArrayList<>(instances.size());
    for (    ServiceInstance inst : instances) {
      NodeInfo nodeInfo=instanceToNodeMap.get(inst.getWorkerIdentity());
      if (nodeInfo != null && nodeInfo.canAcceptTask()) {
        all.add(nodeInfo);
      }
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Attempting random allocation for task={}",request.task);
    }
    if (all.isEmpty()) {
      return SELECT_HOST_RESULT_DELAYED_RESOURCES;
    }
    NodeInfo randomNode=all.get(random.nextInt(all.size()));
    LOG.info("Assigning " + nodeToString(randomNode.getServiceInstance(),randomNode) + " when looking for any host, from #hosts="+ all.size()+ ", requestedHosts="+ ((requestedHosts == null || requestedHosts.length == 0) ? "null" : Arrays.toString(requestedHosts)));
    return new SelectHostResult(randomNode.getServiceInstance(),randomNode);
  }
  finally {
    readLock.unlock();
  }
}
