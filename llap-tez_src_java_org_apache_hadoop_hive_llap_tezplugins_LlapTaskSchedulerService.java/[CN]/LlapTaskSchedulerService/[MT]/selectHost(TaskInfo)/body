{
  String[] requestedHosts=request.requestedHosts;
  long schedulerAttemptTime=clock.getTime();
  readLock.lock();
  try {
    if (getTotalResources().getMemory() <= 0) {
      return SELECT_HOST_RESULT_INADEQUATE_TOTAL_CAPACITY;
    }
    boolean shouldDelayForLocality=request.shouldDelayForLocality(schedulerAttemptTime);
    if (requestedHosts != null && requestedHosts.length > 0) {
      int prefHostCount=-1;
      boolean requestedHostsWillBecomeAvailable=false;
      for (      String host : requestedHosts) {
        prefHostCount++;
        Set<ServiceInstance> instances=activeInstances.getByHost(host);
        if (!instances.isEmpty()) {
          for (          ServiceInstance inst : instances) {
            NodeInfo nodeInfo=instanceToNodeMap.get(inst.getWorkerIdentity());
            if (nodeInfo != null) {
              if (nodeInfo.canAcceptTask()) {
                LOG.info("Assigning " + nodeToString(inst,nodeInfo) + " when looking for "+ host+ ". local=true"+ " FirstRequestedHost="+ (prefHostCount == 0)+ (requestedHosts.length > 1 ? ", #prefLocations=" + requestedHosts.length : ""));
                return new SelectHostResult(inst,nodeInfo);
              }
 else {
                if (shouldDelayForLocality) {
                  if (request.shouldForceLocality()) {
                    requestedHostsWillBecomeAvailable=true;
                  }
 else {
                    if (nodeInfo.getEnableTime() > request.getLocalityDelayTimeout() && nodeInfo.isDisabled() && nodeInfo.hadCommFailure()) {
                    }
 else {
                      requestedHostsWillBecomeAvailable=true;
                    }
                  }
                }
              }
            }
 else {
              LOG.warn("Null NodeInfo when attempting to get host with worker identity {}, and host {}",inst.getWorkerIdentity(),host);
            }
          }
        }
      }
      if (shouldDelayForLocality) {
        if (requestedHostsWillBecomeAvailable) {
          if (LOG.isDebugEnabled()) {
            LOG.debug("Skipping non-local location allocation for [" + request.task + "] when trying to allocate on ["+ Arrays.toString(requestedHosts)+ "]"+ ". ScheduleAttemptTime="+ schedulerAttemptTime+ ", taskDelayTimeout="+ request.getLocalityDelayTimeout());
          }
          return SELECT_HOST_RESULT_DELAYED_LOCALITY;
        }
 else {
          if (LOG.isDebugEnabled()) {
            LOG.debug("Not skipping non-local location allocation for [" + request.task + "] when trying to allocate on ["+ Arrays.toString(requestedHosts)+ "] since none of these hosts are part of the known list");
          }
        }
      }
    }
    Entry<String,NodeInfo>[] all=instanceToNodeMap.entrySet().toArray(new Entry[0]);
    if (all.length > 0) {
      int n=random.nextInt(all.length);
      for (int i=0; i < all.length; i++) {
        Entry<String,NodeInfo> inst=all[(i + n) % all.length];
        if (inst.getValue().canAcceptTask()) {
          LOG.info("Assigning " + nodeToString(inst.getValue().getServiceInstance(),inst.getValue()) + " when looking for any host, from #hosts="+ all.length+ ", requestedHosts="+ ((requestedHosts == null || requestedHosts.length == 0) ? "null" : Arrays.toString(requestedHosts)));
          return new SelectHostResult(inst.getValue().getServiceInstance(),inst.getValue());
        }
      }
    }
    return SELECT_HOST_RESULT_DELAYED_RESOURCES;
  }
  finally {
    readLock.unlock();
  }
}
