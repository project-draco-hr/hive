{
  writeLock.lock();
  try {
    if (LOG.isDebugEnabled()) {
      LOG.debug("ScheduleRun: {}",constructPendingTaskCountsLogMessage());
    }
    Iterator<Entry<Priority,List<TaskInfo>>> pendingIterator=pendingTasks.entrySet().iterator();
    while (pendingIterator.hasNext()) {
      Entry<Priority,List<TaskInfo>> entry=pendingIterator.next();
      List<TaskInfo> taskListAtPriority=entry.getValue();
      Iterator<TaskInfo> taskIter=taskListAtPriority.iterator();
      boolean scheduledAllAtPriority=true;
      while (taskIter.hasNext()) {
        TaskInfo taskInfo=taskIter.next();
        if (taskInfo.getNumPreviousAssignAttempts() == 1) {
          dagStats.registerDelayedAllocation();
        }
        taskInfo.triedAssigningTask();
        ScheduleResult scheduleResult=scheduleTask(taskInfo);
        LOG.info("ScheduleResult for Task: {} = {}",taskInfo,scheduleResult);
        if (scheduleResult == ScheduleResult.SCHEDULED) {
          taskIter.remove();
        }
 else {
          if (scheduleResult == ScheduleResult.INADEQUATE_TOTAL_RESOURCES) {
            LOG.info("Inadequate total resources before scheduling pending tasks." + " Signalling scheduler timeout monitor thread to start timer.");
            startTimeoutMonitor();
          }
          String[] potentialHosts;
          if (scheduleResult == ScheduleResult.DELAYED_LOCALITY) {
            maybeAddToDelayedTaskQueue(taskInfo);
            potentialHosts=taskInfo.requestedHosts;
            if (potentialHosts == null || potentialHosts.length == 0) {
              potentialHosts=null;
            }
          }
 else {
            potentialHosts=null;
          }
          if (potentialHosts != null) {
            if (LOG.isDebugEnabled()) {
              LOG.debug("Attempting to preempt on requested host for task={}, potentialHosts={}",taskInfo,Arrays.toString(potentialHosts));
            }
            boolean shouldPreempt=true;
            for (            String host : potentialHosts) {
              MutableInt pendingHostPreemptions=pendingPreemptionsPerHost.get(host);
              if (pendingHostPreemptions != null && pendingHostPreemptions.intValue() > 0) {
                shouldPreempt=false;
                LOG.debug("Not preempting for task={}. Found an existing preemption request on host={}, pendingPreemptionCount={}",taskInfo.task,host,pendingHostPreemptions.intValue());
                break;
              }
            }
            if (shouldPreempt) {
              LOG.debug("Preempting for {} on potential hosts={}. TotalPendingPreemptions={}",taskInfo.task,Arrays.toString(potentialHosts),pendingPreemptions.get());
              preemptTasks(entry.getKey().getPriority(),1,potentialHosts);
            }
 else {
              LOG.debug("Not preempting for {} on potential hosts={}. An existing preemption request exists",taskInfo.task,Arrays.toString(potentialHosts));
            }
          }
 else {
            LOG.debug("Attempting to preempt on any host for task={}, pendingPreemptions={}",taskInfo.task,pendingPreemptions.get());
            if (pendingPreemptions.get() == 0) {
              LOG.info("Preempting for task={} on any available host",taskInfo.task);
              preemptTasks(entry.getKey().getPriority(),1,null);
            }
 else {
              if (LOG.isDebugEnabled()) {
                LOG.debug("Skipping preemption since there are {} pending preemption request. For task={}",pendingPreemptions.get(),taskInfo);
              }
            }
          }
          scheduledAllAtPriority=false;
          if (scheduleResult != ScheduleResult.DELAYED_LOCALITY) {
            break;
          }
        }
      }
      if (taskListAtPriority.isEmpty()) {
        pendingIterator.remove();
      }
      if (!scheduledAllAtPriority) {
        LOG.debug("Unable to schedule all requests at priority={}. Skipping subsequent priority levels",entry.getKey());
        break;
      }
    }
  }
  finally {
    writeLock.unlock();
  }
}
