{
  super(taskSchedulerContext);
  this.clock=clock;
  try {
    this.conf=TezUtils.createConfFromUserPayload(taskSchedulerContext.getInitialUserPayload());
  }
 catch (  IOException e) {
    throw new TezUncheckedException("Failed to parse user payload for " + LlapTaskSchedulerService.class.getSimpleName(),e);
  }
  this.containerFactory=new ContainerFactory(taskSchedulerContext.getApplicationAttemptId(),taskSchedulerContext.getCustomClusterIdentifier());
  this.memoryPerInstance=HiveConf.getIntVar(conf,ConfVars.LLAP_DAEMON_MEMORY_PER_INSTANCE_MB);
  this.coresPerInstance=HiveConf.getIntVar(conf,ConfVars.LLAP_DAEMON_VCPUS_PER_INSTANCE);
  this.executorsPerInstance=HiveConf.getIntVar(conf,ConfVars.LLAP_DAEMON_NUM_EXECUTORS);
  this.nodeBlacklistConf=new NodeBlacklistConf(HiveConf.getTimeVar(conf,ConfVars.LLAP_TASK_SCHEDULER_NODE_REENABLE_MIN_TIMEOUT_MS,TimeUnit.MILLISECONDS),HiveConf.getTimeVar(conf,ConfVars.LLAP_TASK_SCHEDULER_NODE_REENABLE_MAX_TIMEOUT_MS,TimeUnit.MILLISECONDS),HiveConf.getFloatVar(conf,ConfVars.LLAP_TASK_SCHEDULER_NODE_DISABLE_BACK_OFF_FACTOR));
  this.numSchedulableTasksPerNode=HiveConf.getIntVar(conf,ConfVars.LLAP_TASK_SCHEDULER_NUM_SCHEDULABLE_TASKS_PER_NODE);
  long localityDelayMs=HiveConf.getTimeVar(conf,ConfVars.LLAP_TASK_SCHEDULER_LOCALITY_DELAY,TimeUnit.MILLISECONDS);
  if (localityDelayMs == -1) {
    this.forceLocation=true;
  }
 else {
    this.forceLocation=false;
  }
  this.timeoutMonitor=new SchedulerTimeoutMonitor();
  this.timeout=HiveConf.getTimeVar(conf,ConfVars.LLAP_DAEMON_TASK_SCHEDULER_TIMEOUT_SECONDS,TimeUnit.MILLISECONDS);
  this.timeoutExecutor=Executors.newSingleThreadScheduledExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat("LlapTaskSchedulerTimeoutMonitor").build());
  this.timeoutFuture=null;
  int memoryPerExecutor=(int)(memoryPerInstance / (float)executorsPerInstance);
  int coresPerExecutor=(int)(coresPerInstance / (float)executorsPerInstance);
  this.resourcePerExecutor=Resource.newInstance(memoryPerExecutor,coresPerExecutor);
  String instanceId=HiveConf.getTrimmedVar(conf,ConfVars.LLAP_DAEMON_SERVICE_HOSTS);
  Preconditions.checkNotNull(instanceId,ConfVars.LLAP_DAEMON_SERVICE_HOSTS.varname + " must be defined");
  ExecutorService executorServiceRaw=Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat("LlapSchedulerNodeEnabler").build());
  nodeEnabledExecutor=MoreExecutors.listeningDecorator(executorServiceRaw);
  ExecutorService schedulerExecutorServiceRaw=Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat("LlapScheduler").build());
  schedulerExecutor=MoreExecutors.listeningDecorator(schedulerExecutorServiceRaw);
  LOG.info("Running with configuration: " + "memoryPerInstance=" + memoryPerInstance + ", vCoresPerInstance="+ coresPerInstance+ ", executorsPerInstance="+ executorsPerInstance+ ", resourcePerInstanceInferred="+ resourcePerExecutor+ ", nodeBlacklistConf="+ nodeBlacklistConf+ ", forceLocation="+ forceLocation);
}
