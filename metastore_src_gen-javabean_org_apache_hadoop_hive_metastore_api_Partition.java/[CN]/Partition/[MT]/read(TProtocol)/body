{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case -1:
      if (field.type == TType.LIST) {
{
          TList _list35=iprot.readListBegin();
          this.values=new ArrayList<String>(_list35.size);
          for (int _i36=0; _i36 < _list35.size; ++_i36) {
            String _elem37=null;
            _elem37=iprot.readString();
            this.values.add(_elem37);
          }
          iprot.readListEnd();
        }
        this.__isset.values=true;
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case -2:
  if (field.type == TType.STRING) {
    this.database=iprot.readString();
    this.__isset.database=true;
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case -3:
if (field.type == TType.STRING) {
this.tableName=iprot.readString();
this.__isset.tableName=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case -4:
if (field.type == TType.I32) {
this.createTime=iprot.readI32();
this.__isset.createTime=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case -5:
if (field.type == TType.I32) {
this.lastAccessTime=iprot.readI32();
this.__isset.lastAccessTime=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case -6:
if (field.type == TType.STRUCT) {
this.sd=new StorageDescriptor();
this.sd.read(iprot);
this.__isset.sd=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case -7:
if (field.type == TType.MAP) {
{
TMap _map38=iprot.readMapBegin();
this.parameters=new HashMap<String,String>(2 * _map38.size);
for (int _i39=0; _i39 < _map38.size; ++_i39) {
String _key40;
String _val41;
_key40=iprot.readString();
_val41=iprot.readString();
this.parameters.put(_key40,_val41);
}
iprot.readMapEnd();
}
this.__isset.parameters=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
}
