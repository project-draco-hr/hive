{
  RawStore rdbms;
  rdbms=new ObjectStore();
  rdbms.setConf(conf);
  String[] dbNames=new String[]{"onedbdb1","onedbdb2"};
  String[] roles=new String[]{"onedbrole1","onedbrole2"};
  String[] tokenIds=new String[]{"onedbtokenid1","onedbtokenid2"};
  String[] tokens=new String[]{"onedbtoken1","onedbtoken2"};
  String[] masterKeys=new String[]{"onedbmk1","onedbmk2"};
  int now=(int)System.currentTimeMillis() / 1000;
  setupObjectStore(rdbms,roles,dbNames,tokenIds,tokens,masterKeys,now);
  int baseNumRoles=store.listRoleNames() == null ? 0 : store.listRoleNames().size();
  int baseNumDbs=store.getAllDatabases() == null ? 0 : store.getAllDatabases().size();
  int baseNumToks=store.getAllTokenIdentifiers() == null ? 0 : store.getAllTokenIdentifiers().size();
  int baseNumKeys=store.getMasterKeys() == null ? 0 : store.getMasterKeys().length;
  HBaseImport importer=new HBaseImport("-d",dbNames[0]);
  importer.setConnections(rdbms,store);
  importer.run();
  Assert.assertEquals(baseNumRoles,store.listRoleNames().size());
  Database db=store.getDatabase(dbNames[0]);
  Assert.assertNotNull(db);
  Assert.assertEquals("file:/tmp",db.getLocationUri());
  Table table=store.getTable(db.getName(),tableNames[0]);
  Assert.assertNotNull(table);
  Assert.assertEquals(now,table.getLastAccessTime());
  Assert.assertEquals("input",table.getSd().getInputFormat());
  table=store.getTable(db.getName(),tableNames[1]);
  Assert.assertNotNull(table);
  for (int j=0; j < partVals.length; j++) {
    Partition part=store.getPartition(dbNames[0],tableNames[1],Arrays.asList(partVals[j]));
    Assert.assertNotNull(part);
    Assert.assertEquals("file:/tmp/region=" + partVals[j],part.getSd().getLocation());
  }
  Assert.assertEquals(4,store.getPartitions(dbNames[0],tableNames[1],-1).size());
  Assert.assertEquals(4,store.getAllTables(dbNames[0]).size());
  Assert.assertEquals(2,store.getIndexes(dbNames[0],tableNames[0],-1).size());
  Assert.assertEquals(0,store.getIndexes(dbNames[0],tableNames[1],-1).size());
  Assert.assertEquals(2,store.getFunctions(dbNames[0],"*").size());
  for (int j=0; j < funcNames.length; j++) {
    Assert.assertNotNull(store.getFunction(dbNames[0],funcNames[j]));
  }
  Assert.assertEquals(baseNumDbs + 1,store.getAllDatabases().size());
  Assert.assertEquals(baseNumToks,store.getAllTokenIdentifiers().size());
  String[] hbaseKeys=store.getMasterKeys();
  Assert.assertEquals(baseNumKeys,hbaseKeys.length);
  thrown.expect(NoSuchObjectException.class);
  store.getDatabase(dbNames[1]);
}
