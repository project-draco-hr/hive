{
  if (childExpressions != null) {
    super.evaluateChildren(batch);
  }
  ColumnVector inputColVector1=batch.cols[colNum1];
  LongColumnVector inputColVector2=(LongColumnVector)batch.cols[colNum2];
  int[] sel=batch.selected;
  int n=batch.size;
  long[] vector2=inputColVector2.vector;
  LongColumnVector outV=(LongColumnVector)batch.cols[outputColumn];
  long[] outputVector=outV.vector;
  if (n <= 0) {
    return;
  }
  NullUtil.propagateNullsColCol(inputColVector1,inputColVector2,outV,batch.selected,batch.size,batch.selectedInUse);
switch (inputTypes[0]) {
case DATE:
    if ((inputColVector1.isRepeating) && (inputColVector2.isRepeating)) {
      outV.isRepeating=true;
      outputVector[0]=evaluateDate(inputColVector1,0,vector2[0]);
    }
 else     if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        outputVector[i]=evaluateDate(inputColVector1,i,vector2[i]);
      }
    }
 else {
      for (int i=0; i != n; i++) {
        outputVector[i]=evaluateDate(inputColVector1,i,vector2[i]);
      }
    }
  break;
case TIMESTAMP:
if ((inputColVector1.isRepeating) && (inputColVector2.isRepeating)) {
  outV.isRepeating=true;
  outputVector[0]=evaluateTimestamp(inputColVector1,0,vector2[0]);
}
 else if (batch.selectedInUse) {
  for (int j=0; j != n; j++) {
    int i=sel[j];
    outputVector[i]=evaluateTimestamp(inputColVector1,i,vector2[i]);
  }
}
 else {
  for (int i=0; i != n; i++) {
    outputVector[i]=evaluateTimestamp(inputColVector1,i,vector2[i]);
  }
}
break;
case STRING:
case CHAR:
case VARCHAR:
if ((inputColVector1.isRepeating) && (inputColVector2.isRepeating)) {
outV.isRepeating=true;
evaluateString((BytesColumnVector)inputColVector1,outV,0,vector2[0]);
}
 else if (batch.selectedInUse) {
for (int j=0; j != n; j++) {
int i=sel[j];
evaluateString((BytesColumnVector)inputColVector1,outV,i,vector2[i]);
}
}
 else {
for (int i=0; i != n; i++) {
evaluateString((BytesColumnVector)inputColVector1,outV,i,vector2[i]);
}
}
break;
default :
throw new Error("Unsupported input type " + inputTypes[0].name());
}
}
