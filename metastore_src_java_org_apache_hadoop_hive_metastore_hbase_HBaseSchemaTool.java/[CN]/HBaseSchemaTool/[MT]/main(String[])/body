{
  Options options=new Options();
  options.addOption(OptionBuilder.withLongOpt("column").withDescription("Comma separated list of column names").hasArg().create('c'));
  options.addOption(OptionBuilder.withLongOpt("db").withDescription("Database name").hasArg().create('d'));
  options.addOption(OptionBuilder.withLongOpt("function").withDescription("Function name").hasArg().create('f'));
  options.addOption(OptionBuilder.withLongOpt("help").withDescription("You're looking at it").create('h'));
  options.addOption(OptionBuilder.withLongOpt("role").withDescription("Role name").hasArg().create('r'));
  options.addOption(OptionBuilder.withLongOpt("partvals").withDescription("Comma separated list of partition values, in order of partition columns").hasArg().create('p'));
  options.addOption(OptionBuilder.withLongOpt("stats").withDescription("Get statistics rather than catalog object").create('s'));
  options.addOption(OptionBuilder.withLongOpt("table").withDescription("Table name").hasArg().create('t'));
  CommandLine cli=new GnuParser().parse(options,args);
  if (cli.hasOption('h')) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp("hbaseschematool",options);
    return;
  }
  String[] cmds=cli.getArgs();
  if (cmds.length != 1) {
    System.err.print("Must include a cmd, valid cmds are: ");
    for (int i=0; i < commands.length; i++) {
      if (i != 0)       System.err.print(", ");
      System.err.print(commands[i]);
    }
    System.err.println();
    System.exit(1);
  }
  String cmd=cmds[0];
  List<String> parts=null;
  if (cli.hasOption('p')) {
    parts=Arrays.asList(cli.getOptionValue('p').split(","));
  }
  List<String> cols=null;
  if (cli.hasOption('c')) {
    cols=Arrays.asList(cli.getOptionValue('c').split(","));
  }
  HBaseSchemaTool tool=new HBaseSchemaTool(cli.getOptionValue('d'),cli.getOptionValue('t'),parts,cli.getOptionValue('f'),cli.getOptionValue('r'),cols,cli.hasOption('s'));
  Method method=tool.getClass().getMethod(cmd);
  method.invoke(tool);
}
