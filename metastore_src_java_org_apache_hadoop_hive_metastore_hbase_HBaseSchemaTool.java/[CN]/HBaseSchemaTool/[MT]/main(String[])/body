{
  Options options=new Options();
  options.addOption(OptionBuilder.withLongOpt("help").withDescription("You're looking at it").create('h'));
  options.addOption(OptionBuilder.withLongOpt("install").withDescription("Install the schema onto an HBase cluster.").create('i'));
  options.addOption(OptionBuilder.withLongOpt("key").withDescription("Key to scan with.  This should be an exact key (not a regular expression").hasArg().create('k'));
  options.addOption(OptionBuilder.withLongOpt("list-tables").withDescription("List tables in HBase metastore").create('l'));
  options.addOption(OptionBuilder.withLongOpt("regex-key").withDescription("Regular expression to scan keys with.").hasArg().create('r'));
  options.addOption(OptionBuilder.withLongOpt("table").withDescription("HBase metastore table to scan").hasArg().create('t'));
  CommandLine cli=null;
  try {
    cli=new GnuParser().parse(options,args);
  }
 catch (  ParseException e) {
    System.err.println("Parse Exception: " + e.getMessage());
    usage(options);
    return;
  }
  if (cli.hasOption('h')) {
    usage(options);
    return;
  }
  Configuration conf=new Configuration();
  if (cli.hasOption('i')) {
    new HBaseSchemaTool().install(conf,System.err);
    return;
  }
  String key=null;
  if (cli.hasOption('k'))   key=cli.getOptionValue('k');
  String regex=null;
  if (cli.hasOption('r'))   regex=cli.getOptionValue('r');
  if (key != null && regex != null) {
    usage(options);
    return;
  }
  if (key == null && regex == null)   regex=".*";
  new HBaseSchemaTool().go(cli.hasOption('l'),cli.getOptionValue('t'),key,regex,conf,System.out,System.err);
}
