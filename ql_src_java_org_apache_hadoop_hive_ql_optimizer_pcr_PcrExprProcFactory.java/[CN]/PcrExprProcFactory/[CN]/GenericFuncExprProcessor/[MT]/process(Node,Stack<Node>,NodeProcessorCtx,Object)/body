{
  PcrExprProcCtx ctx=(PcrExprProcCtx)procCtx;
  ExprNodeGenericFuncDesc fd=(ExprNodeGenericFuncDesc)nd;
  if (LOG.isDebugEnabled()) {
    String err="Processing " + fd.getExprString() + " "+ fd.getGenericUDF().getUdfName()+ " outputs ";
    for (    Object child : nodeOutputs) {
      NodeInfoWrapper wrapper=(NodeInfoWrapper)child;
      err+="{" + wrapper.state + ", "+ wrapper.outExpr+ "}, ";
    }
    LOG.debug(err);
  }
  if (FunctionRegistry.isOpNot(fd)) {
    return handleUdfNot(ctx,fd,nodeOutputs);
  }
 else   if (FunctionRegistry.isOpAnd(fd)) {
    return handleUdfAnd(ctx,fd,nodeOutputs);
  }
 else   if (FunctionRegistry.isOpOr(fd)) {
    return handleUdfOr(ctx,fd,nodeOutputs);
  }
 else   if (FunctionRegistry.isIn(fd)) {
    List<ExprNodeDesc> children=fd.getChildren();
    for (int i=1; i < children.size(); i++) {
      if (children.get(i) instanceof ExprNodeDynamicListDesc) {
        return new NodeInfoWrapper(WalkState.UNKNOWN,null,getOutExpr(fd,nodeOutputs));
      }
    }
    return handleDeterministicUdf(ctx,fd,nodeOutputs);
  }
 else   if (fd.getGenericUDF() instanceof GenericUDFStruct) {
    for (    Object child : nodeOutputs) {
      NodeInfoWrapper wrapper=(NodeInfoWrapper)child;
      if (wrapper.state != WalkState.PART_COL) {
        return handleDeterministicUdf(ctx,fd,nodeOutputs);
      }
    }
    return new NodeInfoWrapper(WalkState.PART_COL_STRUCT,null,getOutExpr(fd,nodeOutputs));
  }
 else   if (!FunctionRegistry.isDeterministic(fd.getGenericUDF())) {
    return new NodeInfoWrapper(WalkState.UNKNOWN,null,getOutExpr(fd,nodeOutputs));
  }
 else {
    return handleDeterministicUdf(ctx,fd,nodeOutputs);
  }
}
