{
  TTupleProtocol oprot=(TTupleProtocol)prot;
  BitSet optionals=new BitSet();
  if (struct.isSetTaskId()) {
    optionals.set(0);
  }
  if (struct.isSetTaskType()) {
    optionals.set(1);
  }
  if (struct.isSetTaskAttributes()) {
    optionals.set(2);
  }
  if (struct.isSetTaskCounters()) {
    optionals.set(3);
  }
  if (struct.isSetOperatorGraph()) {
    optionals.set(4);
  }
  if (struct.isSetOperatorList()) {
    optionals.set(5);
  }
  if (struct.isSetDone()) {
    optionals.set(6);
  }
  if (struct.isSetStarted()) {
    optionals.set(7);
  }
  oprot.writeBitSet(optionals,8);
  if (struct.isSetTaskId()) {
    oprot.writeString(struct.taskId);
  }
  if (struct.isSetTaskType()) {
    oprot.writeI32(struct.taskType.getValue());
  }
  if (struct.isSetTaskAttributes()) {
{
      oprot.writeI32(struct.taskAttributes.size());
      for (      Map.Entry<String,String> _iter58 : struct.taskAttributes.entrySet()) {
        oprot.writeString(_iter58.getKey());
        oprot.writeString(_iter58.getValue());
      }
    }
  }
  if (struct.isSetTaskCounters()) {
{
      oprot.writeI32(struct.taskCounters.size());
      for (      Map.Entry<String,Long> _iter59 : struct.taskCounters.entrySet()) {
        oprot.writeString(_iter59.getKey());
        oprot.writeI64(_iter59.getValue());
      }
    }
  }
  if (struct.isSetOperatorGraph()) {
    struct.operatorGraph.write(oprot);
  }
  if (struct.isSetOperatorList()) {
{
      oprot.writeI32(struct.operatorList.size());
      for (      Operator _iter60 : struct.operatorList) {
        _iter60.write(oprot);
      }
    }
  }
  if (struct.isSetDone()) {
    oprot.writeBool(struct.done);
  }
  if (struct.isSetStarted()) {
    oprot.writeBool(struct.started);
  }
}
