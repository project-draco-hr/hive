{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.taskId=iprot.readString();
        struct.setTaskIdIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
    struct.taskType=TaskType.findByValue(iprot.readI32());
    struct.setTaskTypeIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map44=iprot.readMapBegin();
  struct.taskAttributes=new HashMap<String,String>(2 * _map44.size);
  for (int _i45=0; _i45 < _map44.size; ++_i45) {
    String _key46;
    String _val47;
    _key46=iprot.readString();
    _val47=iprot.readString();
    struct.taskAttributes.put(_key46,_val47);
  }
  iprot.readMapEnd();
}
struct.setTaskAttributesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map48=iprot.readMapBegin();
struct.taskCounters=new HashMap<String,Long>(2 * _map48.size);
for (int _i49=0; _i49 < _map48.size; ++_i49) {
String _key50;
long _val51;
_key50=iprot.readString();
_val51=iprot.readI64();
struct.taskCounters.put(_key50,_val51);
}
iprot.readMapEnd();
}
struct.setTaskCountersIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.operatorGraph=new Graph();
struct.operatorGraph.read(iprot);
struct.setOperatorGraphIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list52=iprot.readListBegin();
struct.operatorList=new ArrayList<Operator>(_list52.size);
for (int _i53=0; _i53 < _list52.size; ++_i53) {
Operator _elem54;
_elem54=new Operator();
_elem54.read(iprot);
struct.operatorList.add(_elem54);
}
iprot.readListEnd();
}
struct.setOperatorListIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 7:
if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
struct.done=iprot.readBool();
struct.setDoneIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 8:
if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
struct.started=iprot.readBool();
struct.setStartedIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
