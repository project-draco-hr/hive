{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == TType.STRING) {
        this.taskId=iprot.readString();
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == TType.I32) {
    this.taskType=TaskType.findByValue(iprot.readI32());
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == TType.MAP) {
{
  TMap _map22=iprot.readMapBegin();
  this.taskAttributes=new HashMap<String,String>(2 * _map22.size);
  for (int _i23=0; _i23 < _map22.size; ++_i23) {
    String _key24;
    String _val25;
    _key24=iprot.readString();
    _val25=iprot.readString();
    this.taskAttributes.put(_key24,_val25);
  }
  iprot.readMapEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 4:
if (field.type == TType.MAP) {
{
TMap _map26=iprot.readMapBegin();
this.taskCounters=new HashMap<String,Long>(2 * _map26.size);
for (int _i27=0; _i27 < _map26.size; ++_i27) {
String _key28;
long _val29;
_key28=iprot.readString();
_val29=iprot.readI64();
this.taskCounters.put(_key28,_val29);
}
iprot.readMapEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 5:
if (field.type == TType.STRUCT) {
this.operatorGraph=new Graph();
this.operatorGraph.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 6:
if (field.type == TType.LIST) {
{
TList _list30=iprot.readListBegin();
this.operatorList=new ArrayList<Operator>(_list30.size);
for (int _i31=0; _i31 < _list30.size; ++_i31) {
Operator _elem32;
_elem32=new Operator();
_elem32.read(iprot);
this.operatorList.add(_elem32);
}
iprot.readListEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 7:
if (field.type == TType.BOOL) {
this.done=iprot.readBool();
setDoneIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 8:
if (field.type == TType.BOOL) {
this.started=iprot.readBool();
setStartedIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
