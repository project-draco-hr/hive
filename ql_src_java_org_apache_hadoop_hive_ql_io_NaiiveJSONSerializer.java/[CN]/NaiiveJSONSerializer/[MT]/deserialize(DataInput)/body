{
  boolean more=true;
  CompositeHiveObject nr=null;
  int entries=0;
  if (width != -1) {
    nr=new CompositeHiveObject(width);
  }
 else {
    slist.clear();
  }
  do {
    bos.reset();
    streamStatus ss=readColumn(in,bos);
    if ((ss == streamStatus.EOF) || (ss == streamStatus.TERMINATED)) {
      more=false;
    }
    entries++;
    String col;
    if (bos.getCount() > 0) {
      col=new String(bos.getData(),0,bos.getCount(),"UTF-8");
    }
 else {
      col=NSTR;
    }
    if (width == -1) {
      slist.add(col);
    }
 else {
      if (entries <= width) {
        try {
          nr.addHiveObject(new PrimitiveHiveObject(col));
        }
 catch (        HiveException e) {
          e.printStackTrace();
          throw new IOException(e.getMessage());
        }
      }
    }
  }
 while (more);
  if (width == -1) {
    width=entries;
    nr=new CompositeHiveObject(width);
    for (    String col : slist) {
      try {
        nr.addHiveObject(new PrimitiveHiveObject(col));
      }
 catch (      HiveException e) {
        e.printStackTrace();
        throw new IOException(e.getMessage());
      }
    }
    return (nr);
  }
  if (width > entries) {
    readErrorCount++;
    return null;
  }
 else {
    return nr;
  }
}
