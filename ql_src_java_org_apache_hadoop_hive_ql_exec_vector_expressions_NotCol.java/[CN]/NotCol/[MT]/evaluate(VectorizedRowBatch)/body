{
  if (childExpressions != null) {
    super.evaluateChildren(batch);
  }
  LongColumnVector inputColVector=(LongColumnVector)batch.cols[colNum];
  int[] sel=batch.selected;
  int n=batch.size;
  long[] vector=inputColVector.vector;
  LongColumnVector outV=(LongColumnVector)batch.cols[outputColumn];
  long[] outputVector=outV.vector;
  if (n <= 0) {
    return;
  }
  if (inputColVector.noNulls) {
    outV.noNulls=true;
    if (inputColVector.isRepeating) {
      outV.isRepeating=true;
      outputVector[0]=~vector[0] & 1;
    }
 else     if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        outputVector[i]=~vector[i] & 1;
      }
      outV.isRepeating=false;
    }
 else {
      for (int i=0; i != n; i++) {
        outputVector[i]=~vector[i] & 1;
      }
      outV.isRepeating=false;
    }
  }
 else {
    outV.noNulls=false;
    if (inputColVector.isRepeating) {
      outV.isRepeating=true;
      outputVector[0]=~vector[0] & 1;
      outV.isNull[0]=inputColVector.isNull[0];
    }
 else     if (batch.selectedInUse) {
      outV.isRepeating=false;
      for (int j=0; j != n; j++) {
        int i=sel[j];
        outputVector[i]=~vector[i] & 1;
        outV.isNull[i]=inputColVector.isNull[i];
      }
    }
 else {
      outV.isRepeating=false;
      for (int i=0; i != n; i++) {
        outputVector[i]=~vector[i] & 1;
        outV.isNull[i]=inputColVector.isNull[i];
      }
    }
  }
}
