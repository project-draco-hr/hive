{
  try {
    exprNodeDesc exprDesc1=new exprNodeColumnDesc(TypeInfo.getPrimitiveTypeInfo(String.class),"col[1]");
    exprNodeDesc expr1=new exprNodeColumnDesc(String.class,"col[0]");
    exprNodeDesc expr2=new exprNodeConstantDesc("1");
    exprNodeDesc exprDesc2=SemanticAnalyzer.getFuncExprNodeDesc("concat",expr1,expr2);
    ArrayList<exprNodeDesc> earr=new ArrayList<exprNodeDesc>();
    earr.add(exprDesc1);
    earr.add(exprDesc2);
    selectDesc selectCtx=new selectDesc(earr);
    Operator<selectDesc> op=OperatorFactory.get(selectDesc.class);
    op.setConf(selectCtx);
    collectDesc cd=new collectDesc(Integer.valueOf(1));
    CollectOperator cdop=(CollectOperator)OperatorFactory.get(collectDesc.class);
    cdop.setConf(cd);
    ArrayList<Operator<? extends Serializable>> nextOp=new ArrayList<Operator<? extends Serializable>>();
    nextOp.add(cdop);
    op.setChildOperators(nextOp);
    op.initialize(null);
    op.process(r[0]);
    HiveObject ho=cdop.retrieve();
    exprDesc1=new exprNodeColumnDesc(TypeInfo.getPrimitiveTypeInfo(String.class),"0");
    ExprNodeEvaluator eval=ExprNodeEvaluatorFactory.get(exprDesc1);
    Object ret=eval.evaluateToObject(ho);
    assertEquals(ret,"1");
    exprDesc1=new exprNodeColumnDesc(TypeInfo.getPrimitiveTypeInfo(String.class),"1");
    eval=ExprNodeEvaluatorFactory.get(exprDesc1);
    ret=eval.evaluateToObject(ho);
    assertEquals(ret,"01");
    System.out.println("Select Operator ok");
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw e;
  }
}
