{
  try {
    exprNodeDesc f1=new exprNodeColumnDesc(String.class,"0.col[2]");
    exprNodeDesc f2=new exprNodeColumnDesc(String.class,"1.col[1]");
    exprNodeDesc f3=new exprNodeColumnDesc(String.class,"2.col[0]");
    exprNodeDesc func1=SemanticAnalyzer.getFuncExprNodeDesc("==",f1,f2);
    exprNodeDesc func2=SemanticAnalyzer.getFuncExprNodeDesc("==",f2,f3);
    exprNodeDesc func3=SemanticAnalyzer.getFuncExprNodeDesc("&&",func1,func2);
    filterDesc filterCtx=new filterDesc(func3);
    Operator<filterDesc> op=OperatorFactory.get(filterDesc.class);
    op.setConf(filterCtx);
    op.initialize(null);
    op.process(cr);
    Map<Enum<?>,Long> results=op.getStats();
    assertEquals(results.get(FilterOperator.Counter.FILTERED),Long.valueOf(0));
    assertEquals(results.get(FilterOperator.Counter.PASSED),Long.valueOf(1));
    System.out.println("Filter Operator ok");
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw e;
  }
}
