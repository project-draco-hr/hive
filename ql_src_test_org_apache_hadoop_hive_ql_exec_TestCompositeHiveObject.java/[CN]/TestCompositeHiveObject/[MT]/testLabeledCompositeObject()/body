{
  try {
    String[] fnames={"key","value"};
    LabeledCompositeHiveObject cr=new LabeledCompositeHiveObject(fnames);
    cr.addHiveObject(r[0]);
    cr.addHiveObject(r[1]);
    exprNodeDesc exprDesc=new exprNodeColumnDesc(String.class,"value.col[2]");
    ExprNodeEvaluator eval=ExprNodeEvaluatorFactory.get(exprDesc);
    Object ret=eval.evaluateToObject(cr);
    assertEquals(ret,"3");
    System.out.println("Labeled Composite full expression ok");
    exprDesc=new exprNodeColumnDesc(String.class,"value");
    eval=ExprNodeEvaluatorFactory.get(exprDesc);
    HiveObject ho=eval.evaluate(cr);
    exprDesc=new exprNodeColumnDesc(String.class,"col[2]");
    eval=ExprNodeEvaluatorFactory.get(exprDesc);
    ret=eval.evaluateToObject(ho);
    assertEquals(ret,"3");
    System.out.println("Labeled Composite nested Expression ok");
    exprDesc=new exprNodeColumnDesc(String.class,"invalid_field");
    eval=ExprNodeEvaluatorFactory.get(exprDesc);
    boolean gotException=false;
    try {
      ret=eval.evaluateToObject(cr);
    }
 catch (    Exception e) {
      gotException=true;
    }
    assertEquals(gotException,true);
    System.out.println("Invalid field name check ok");
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw e;
  }
}
