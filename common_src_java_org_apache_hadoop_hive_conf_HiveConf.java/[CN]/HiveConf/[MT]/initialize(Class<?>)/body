{
  hiveJar=(new JobConf(cls)).getJar();
  origProp=getAllProperties();
  addResource(getConfVarInputStream());
  if (hiveSiteURL != null) {
    addResource(hiveSiteURL);
  }
  applySystemProperties();
  if (this.get("hive.metastore.local",null) != null) {
    l4j.warn("DEPRECATED: Configuration property hive.metastore.local no longer has any " + "effect. Make sure to provide a valid value for hive.metastore.uris if you are " + "connecting to a remote metastore.");
  }
  if ((this.get("hive.metastore.ds.retry.attempts") != null) || this.get("hive.metastore.ds.retry.interval") != null) {
    l4j.warn("DEPRECATED: hive.metastore.ds.retry.* no longer has any effect.  " + "Use hive.hmshandler.retry.* instead");
  }
  if (hiveJar == null) {
    hiveJar=this.get(ConfVars.HIVEJAR.varname);
  }
  if (auxJars == null) {
    auxJars=this.get(ConfVars.HIVEAUXJARS.varname);
  }
  if (getBoolVar(ConfVars.METASTORE_SCHEMA_VERIFICATION)) {
    setBoolVar(ConfVars.METASTORE_AUTO_CREATE_SCHEMA,false);
    setBoolVar(ConfVars.METASTORE_FIXED_DATASTORE,true);
  }
  if (getBoolVar(HiveConf.ConfVars.HIVECONFVALIDATION)) {
    List<String> trimmed=new ArrayList<String>();
    for (    Map.Entry<String,String> entry : this) {
      String key=entry.getKey();
      if (key == null || !key.startsWith("hive.")) {
        continue;
      }
      ConfVars var=HiveConf.getConfVars(key);
      if (var == null) {
        var=HiveConf.getConfVars(key.trim());
        if (var != null) {
          trimmed.add(key);
        }
      }
      if (var == null) {
        l4j.warn("HiveConf of name " + key + " does not exist");
      }
 else       if (!var.isType(entry.getValue())) {
        l4j.warn("HiveConf " + var.varname + " expects "+ var.typeString()+ " type value");
      }
    }
    for (    String key : trimmed) {
      set(key.trim(),getRaw(key));
      unset(key);
    }
  }
  setupRestrictList();
}
