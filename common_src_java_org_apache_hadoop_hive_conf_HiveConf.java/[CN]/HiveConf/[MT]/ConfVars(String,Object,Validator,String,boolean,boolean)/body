{
  this.varname=varname;
  this.validator=validator;
  this.description=description;
  this.defaultExpr=defaultVal == null ? null : String.valueOf(defaultVal);
  this.excluded=excluded;
  this.caseSensitive=caseSensitive;
  if (defaultVal == null || defaultVal instanceof String) {
    this.valClass=String.class;
    this.valType=VarType.STRING;
    this.defaultStrVal=SystemVariables.substitute((String)defaultVal);
    this.defaultIntVal=-1;
    this.defaultLongVal=-1;
    this.defaultFloatVal=-1;
    this.defaultBoolVal=false;
  }
 else   if (defaultVal instanceof Integer) {
    this.valClass=Integer.class;
    this.valType=VarType.INT;
    this.defaultStrVal=null;
    this.defaultIntVal=(Integer)defaultVal;
    this.defaultLongVal=-1;
    this.defaultFloatVal=-1;
    this.defaultBoolVal=false;
  }
 else   if (defaultVal instanceof Long) {
    this.valClass=Long.class;
    this.valType=VarType.LONG;
    this.defaultStrVal=null;
    this.defaultIntVal=-1;
    this.defaultLongVal=(Long)defaultVal;
    this.defaultFloatVal=-1;
    this.defaultBoolVal=false;
  }
 else   if (defaultVal instanceof Float) {
    this.valClass=Float.class;
    this.valType=VarType.FLOAT;
    this.defaultStrVal=null;
    this.defaultIntVal=-1;
    this.defaultLongVal=-1;
    this.defaultFloatVal=(Float)defaultVal;
    this.defaultBoolVal=false;
  }
 else   if (defaultVal instanceof Boolean) {
    this.valClass=Boolean.class;
    this.valType=VarType.BOOLEAN;
    this.defaultStrVal=null;
    this.defaultIntVal=-1;
    this.defaultLongVal=-1;
    this.defaultFloatVal=-1;
    this.defaultBoolVal=(Boolean)defaultVal;
  }
 else {
    throw new IllegalArgumentException("Not supported type value " + defaultVal.getClass() + " for name "+ varname);
  }
}
