{
  super(context,baseWriter);
  this.context=context;
  jobInfo=HCatOutputFormat.getJobInfo(context);
  partColsToDel=jobInfo.getPosOfPartCols();
  dynamicPartitioningUsed=jobInfo.isDynamicPartitioningUsed();
  dynamicPartCols=jobInfo.getPosOfDynPartCols();
  maxDynamicPartitions=jobInfo.getMaxDynamicPartitions();
  if ((partColsToDel == null) || (dynamicPartitioningUsed && (dynamicPartCols == null))) {
    throw new HCatException("It seems that setSchema() is not called on " + "HCatOutputFormat. Please make sure that method is called.");
  }
  if (!dynamicPartitioningUsed) {
    storageDriver=HCatOutputFormat.getOutputDriverInstance(context,jobInfo);
    this.baseDynamicStorageDrivers=null;
    this.baseDynamicWriters=null;
    this.baseDynamicCommitters=null;
    prepareForStorageDriverOutput(context);
  }
 else {
    storageDriver=null;
    this.baseDynamicStorageDrivers=new HashMap<Integer,HCatOutputStorageDriver>();
    this.baseDynamicWriters=new HashMap<Integer,RecordWriter<? super WritableComparable<?>,? super Writable>>();
    this.baseDynamicCommitters=new HashMap<Integer,OutputCommitter>();
  }
}
