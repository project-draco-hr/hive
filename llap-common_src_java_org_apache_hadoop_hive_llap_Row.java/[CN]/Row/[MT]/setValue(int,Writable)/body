{
  Preconditions.checkArgument(colIdx <= schema.getColumns().size());
  if (value == null) {
    nullIndicators[colIdx]=true;
  }
 else {
    nullIndicators[colIdx]=false;
    FieldDesc colDesc=schema.getColumns().get(colIdx);
switch (colDesc.getTypeDesc().getType()) {
case BOOLEAN:
      ((BooleanWritable)colValues[colIdx]).set(((BooleanWritable)value).get());
    break;
case TINYINT:
  ((ByteWritable)colValues[colIdx]).set(((ByteWritable)value).get());
break;
case SMALLINT:
((ShortWritable)colValues[colIdx]).set(((ShortWritable)value).get());
break;
case INT:
((IntWritable)colValues[colIdx]).set(((IntWritable)value).get());
break;
case BIGINT:
((LongWritable)colValues[colIdx]).set(((LongWritable)value).get());
break;
case FLOAT:
((FloatWritable)colValues[colIdx]).set(((FloatWritable)value).get());
break;
case DOUBLE:
((DoubleWritable)colValues[colIdx]).set(((DoubleWritable)value).get());
break;
case STRING:
case CHAR:
case VARCHAR:
((Text)colValues[colIdx]).set((Text)value);
break;
case DATE:
((DateWritable)colValues[colIdx]).set((DateWritable)value);
break;
case TIMESTAMP:
((TimestampWritable)colValues[colIdx]).set((TimestampWritable)value);
break;
case BINARY:
((BytesWritable)colValues[colIdx]).set(((BytesWritable)value));
break;
case DECIMAL:
((HiveDecimalWritable)colValues[colIdx]).set((HiveDecimalWritable)value);
break;
}
}
}
