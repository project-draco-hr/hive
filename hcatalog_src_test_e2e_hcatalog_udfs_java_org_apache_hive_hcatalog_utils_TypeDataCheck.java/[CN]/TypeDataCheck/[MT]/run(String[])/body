{
  try {
    args=new GenericOptionsParser(conf,args).getRemainingArgs();
    String[] otherArgs=new String[5];
    int j=0;
    for (int i=0; i < args.length; i++) {
      if (args[i].equals("-libjars")) {
        conf.set("tmpjars",args[i + 1]);
        i=i + 1;
      }
 else {
        otherArgs[j++]=args[i];
      }
    }
    if (otherArgs.length != 5) {
      System.err.println("Other args:" + Arrays.asList(otherArgs));
      System.err.println("Usage: hadoop jar testudf.jar typedatacheck " + "<serveruri> <tablename> <hive types of cols + delimited> " + "<output dir> <tab|ctrla> <-libjars hive-hcat jar>\n"+ "The <tab|ctrla> argument controls the output delimiter.\n"+ "The hcat jar location should be specified as file://<full path to jar>\n");
      System.err.println(" The <tab|ctrla> argument controls the output delimiter.");
      System.exit(2);
    }
    String serverUri=otherArgs[0];
    String tableName=otherArgs[1];
    String schemaStr=otherArgs[2];
    String outputDir=otherArgs[3];
    String outputdelim=otherArgs[4];
    if (!outputdelim.equals("tab") && !outputdelim.equals("ctrla")) {
      System.err.println("ERROR: Specify 'tab' or 'ctrla' for output delimiter");
    }
    String dbName="default";
    String principalID=System.getProperty(HCatConstants.HCAT_METASTORE_PRINCIPAL);
    if (principalID != null) {
      conf.set(HCatConstants.HCAT_METASTORE_PRINCIPAL,principalID);
    }
    Job job=new Job(conf,"typedatacheck");
    HCatInputFormat.setInput(job,dbName,tableName);
    HCatSchema s=HCatInputFormat.getTableSchema(job);
    job.getConfiguration().set(SCHEMA_KEY,schemaStr);
    job.getConfiguration().set(DELIM,outputdelim);
    job.setInputFormatClass(HCatInputFormat.class);
    job.setOutputFormatClass(TextOutputFormat.class);
    job.setJarByClass(TypeDataCheck.class);
    job.setMapperClass(TypeDataCheckMapper.class);
    job.setNumReduceTasks(0);
    job.setOutputKeyClass(Long.class);
    job.setOutputValueClass(Text.class);
    FileOutputFormat.setOutputPath(job,new Path(outputDir));
    System.exit(job.waitForCompletion(true) ? 0 : 1);
    return 0;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
