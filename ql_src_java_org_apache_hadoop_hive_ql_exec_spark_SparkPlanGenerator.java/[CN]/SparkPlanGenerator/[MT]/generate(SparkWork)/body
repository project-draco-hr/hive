{
  SparkPlan plan=new SparkPlan();
  GraphTran trans=new GraphTran();
  Set<BaseWork> roots=sparkWork.getRoots();
  for (  BaseWork w : roots) {
    if (!(w instanceof MapWork)) {
      throw new Exception("The roots in the SparkWork must be MapWork instances!");
    }
    MapWork mapWork=(MapWork)w;
    SparkTran tran=generate(w);
    JavaPairRDD<BytesWritable,BytesWritable> input=generateRDD(mapWork);
    trans.addTranWithInput(tran,input);
    while (sparkWork.getChildren(w).size() > 0) {
      BaseWork child=sparkWork.getChildren(w).get(0);
      if (child instanceof ReduceWork) {
        SparkEdgeProperty edge=sparkWork.getEdgeProperty(w,child);
        SparkShuffler st=generate(edge);
        ReduceTran rt=generate((ReduceWork)child);
        rt.setShuffler(st);
        rt.setNumPartitions(edge.getNumPartitions());
        trans.addTran(rt);
        trans.connect(tran,rt);
        w=child;
        tran=rt;
      }
 else       if (child instanceof UnionWork) {
        if (unionWorkTrans.get(child) != null) {
          trans.connect(tran,unionWorkTrans.get(child));
          break;
        }
 else {
          SparkTran ut=generate((UnionWork)child);
          unionWorkTrans.put(child,ut);
          trans.addTran(ut);
          trans.connect(tran,ut);
          w=child;
          tran=ut;
        }
      }
    }
  }
  unionWorkTrans.clear();
  plan.setTran(trans);
  return plan;
}
