{
  MockitoAnnotations.initMocks(this);
  Mockito.when(htable.get(Mockito.any(Get.class))).thenAnswer(new Answer<Result>(){
    @Override public Result answer(    InvocationOnMock invocation) throws Throwable {
      List<Cell> cells=new ArrayList<Cell>();
      if (puts[0] == null)       return new Result();
      for (      Cell cell : puts[0].getFamilyCellMap().firstEntry().getValue()) {
        cells.add(cell);
      }
      return Result.create(cells);
    }
  }
);
  Mockito.when(htable.get(Mockito.anyList())).thenAnswer(new Answer<Result[]>(){
    @Override public Result[] answer(    InvocationOnMock invocation) throws Throwable {
      Result[] results=new Result[2];
      for (int i=0; i < 2; i++) {
        List<Cell> cells=new ArrayList<Cell>();
        if (puts[i] == null) {
          results[i]=new Result();
        }
 else {
          for (          Cell cell : puts[i].getFamilyCellMap().firstEntry().getValue()) {
            cells.add(cell);
          }
          results[i]=Result.create(cells);
        }
      }
      return results;
    }
  }
);
  HBaseConnection hconn=Mockito.mock(HBaseConnection.class);
  Mockito.when(hconn.getHBaseTable(Mockito.anyString())).thenReturn(htable);
  HiveConf conf=new HiveConf();
  conf.setIntVar(HiveConf.ConfVars.METASTORE_HBASE_CACHE_SIZE,30);
  conf.setVar(HiveConf.ConfVars.METASTORE_HBASE_CONNECTION_CLASS,HBaseReadWrite.TEST_CONN);
  hrw=HBaseReadWrite.getInstance(conf);
  hrw.setConnection(hconn);
  StatsCache.getInstance(conf).clear();
  puts[0]=puts[1]=null;
}
