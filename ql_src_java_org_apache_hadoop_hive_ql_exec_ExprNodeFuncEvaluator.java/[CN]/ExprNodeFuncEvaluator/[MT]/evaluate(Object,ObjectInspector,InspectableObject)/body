{
  if (result == null) {
    throw new HiveException("result cannot be null.");
  }
  for (int i=0; i < paramEvaluators.length; i++) {
    paramEvaluators[i].evaluate(row,rowInspector,paramInspectableObjects[i]);
    Category c=paramInspectableObjects[i].oi.getCategory();
switch (c) {
case LIST:
{
        paramValues[i]=((ListObjectInspector)paramInspectableObjects[i].oi).getList(paramInspectableObjects[i].o);
        break;
      }
case MAP:
{
      paramValues[i]=((MapObjectInspector)paramInspectableObjects[i].oi).getMap(paramInspectableObjects[i].o);
      break;
    }
case PRIMITIVE:
{
    PrimitiveObjectInspector poi=(PrimitiveObjectInspector)paramInspectableObjects[i].oi;
    paramValues[i]=(paramIsPrimitiveWritable[i] ? poi.getPrimitiveWritableObject(paramInspectableObjects[i].o) : poi.getPrimitiveJavaObject(paramInspectableObjects[i].o));
    break;
  }
default :
{
  paramValues[i]=paramInspectableObjects[i].o;
}
}
}
result.o=FunctionRegistry.invoke(udfMethod,udf,paramValues);
result.oi=outputObjectInspector;
}
