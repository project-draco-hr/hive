{
  this.expr=expr;
  assert(expr != null);
  Class<?> c=expr.getUDFClass();
  udfMethod=expr.getUDFMethod();
  LOG.debug(c.toString());
  LOG.debug(udfMethod.toString());
  udf=(UDF)ReflectionUtils.newInstance(expr.getUDFClass(),null);
  int paramNumber=expr.getChildren().size();
  paramEvaluators=new ExprNodeEvaluator[paramNumber];
  paramInspectableObjects=new InspectableObject[paramNumber];
  paramIsPrimitiveWritable=new boolean[paramNumber];
  for (int i=0; i < paramNumber; i++) {
    paramEvaluators[i]=ExprNodeEvaluatorFactory.get(expr.getChildExprs().get(i));
    paramInspectableObjects[i]=new InspectableObject();
    paramIsPrimitiveWritable[i]=PrimitiveObjectInspectorUtils.isPrimitiveWritableClass(udfMethod.getParameterTypes()[i]);
  }
  paramValues=new Object[expr.getChildren().size()];
  if (PrimitiveObjectInspectorUtils.isPrimitiveWritableClass(udfMethod.getReturnType())) {
    outputObjectInspector=PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(PrimitiveObjectInspectorUtils.getTypeEntryFromPrimitiveWritableClass(udfMethod.getReturnType()).primitiveCategory);
  }
 else {
    outputObjectInspector=PrimitiveObjectInspectorFactory.getPrimitiveJavaObjectInspector(PrimitiveObjectInspectorUtils.getTypeEntryFromPrimitiveJavaClass(udfMethod.getReturnType()).primitiveCategory);
  }
}
