{
  List<Byte> separatorCandidates=new ArrayList<Byte>();
  String extendNestingValue=tableProperties.getProperty(SERIALIZATION_EXTEND_NESTING_LEVELS);
  String extendAdditionalNestingValue=tableProperties.getProperty(SERIALIZATION_EXTEND_ADDITIONAL_NESTING_LEVELS);
  boolean extendedNesting=extendNestingValue != null && extendNestingValue.equalsIgnoreCase("true");
  boolean extendedAdditionalNesting=extendAdditionalNestingValue != null && extendAdditionalNestingValue.equalsIgnoreCase("true");
  separatorCandidates.add(LazyUtils.getByte(tableProperties.getProperty(serdeConstants.FIELD_DELIM,tableProperties.getProperty(serdeConstants.SERIALIZATION_FORMAT)),DefaultSeparators[0]));
  separatorCandidates.add(LazyUtils.getByte(tableProperties.getProperty(serdeConstants.COLLECTION_DELIM),DefaultSeparators[1]));
  separatorCandidates.add(LazyUtils.getByte(tableProperties.getProperty(serdeConstants.MAPKEY_DELIM),DefaultSeparators[2]));
  for (byte b=4; b <= 8; b++) {
    separatorCandidates.add(b);
  }
  separatorCandidates.add((byte)11);
  for (byte b=14; b <= 26; b++) {
    separatorCandidates.add(b);
  }
  for (byte b=28; b <= 31; b++) {
    separatorCandidates.add(b);
  }
  for (byte b=-128; b <= -1; b++) {
    separatorCandidates.add(b);
  }
  int numSeparators=8;
  if (extendedAdditionalNesting) {
    numSeparators=separatorCandidates.size();
  }
 else   if (extendedNesting) {
    numSeparators=24;
  }
  separators=new byte[numSeparators];
  for (int i=0; i < numSeparators; i++) {
    separators[i]=separatorCandidates.get(i);
  }
}
