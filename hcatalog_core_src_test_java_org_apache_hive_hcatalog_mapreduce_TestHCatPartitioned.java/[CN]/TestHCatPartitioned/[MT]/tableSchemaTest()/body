{
  HCatSchema tableSchema=getTableSchema();
  assertEquals(4,tableSchema.getFields().size());
  partitionColumns.add(HCatSchemaUtils.getHCatFieldSchema(new FieldSchema("c3",serdeConstants.STRING_TYPE_NAME,"")));
  writeRecords=new ArrayList<HCatRecord>();
  for (int i=0; i < 20; i++) {
    List<Object> objList=new ArrayList<Object>();
    objList.add(i);
    objList.add("strvalue" + i);
    objList.add("str2value" + i);
    writeRecords.add(new DefaultHCatRecord(objList));
  }
  Map<String,String> partitionMap=new HashMap<String,String>();
  partitionMap.put("part1","p1value5");
  partitionMap.put("part0","p0value5");
  runMRCreate(partitionMap,partitionColumns,writeRecords,10,true);
  tableSchema=getTableSchema();
  assertEquals(5,tableSchema.getFields().size());
  assertEquals("c1",tableSchema.getFields().get(0).getName());
  assertEquals("c2",tableSchema.getFields().get(1).getName());
  assertEquals("c3",tableSchema.getFields().get(2).getName());
  assertEquals("part1",tableSchema.getFields().get(3).getName());
  assertEquals("part0",tableSchema.getFields().get(4).getName());
  partitionMap.clear();
  partitionMap.put("part1","p1value6");
  partitionMap.put("part0","p0value6");
  partitionColumns=new ArrayList<HCatFieldSchema>();
  partitionColumns.add(HCatSchemaUtils.getHCatFieldSchema(new FieldSchema("c1",serdeConstants.INT_TYPE_NAME,"")));
  partitionColumns.add(HCatSchemaUtils.getHCatFieldSchema(new FieldSchema("c2",serdeConstants.INT_TYPE_NAME,"")));
  IOException exc=null;
  try {
    runMRCreate(partitionMap,partitionColumns,writeRecords,20,true);
  }
 catch (  IOException e) {
    exc=e;
  }
  assertTrue(exc != null);
  assertTrue(exc instanceof HCatException);
  assertEquals(ErrorType.ERROR_SCHEMA_TYPE_MISMATCH,((HCatException)exc).getErrorType());
  partitionColumns=new ArrayList<HCatFieldSchema>();
  partitionColumns.add(HCatSchemaUtils.getHCatFieldSchema(new FieldSchema("c1",serdeConstants.INT_TYPE_NAME,"")));
  partitionColumns.add(HCatSchemaUtils.getHCatFieldSchema(new FieldSchema("c2",serdeConstants.STRING_TYPE_NAME,"")));
  partitionColumns.add(HCatSchemaUtils.getHCatFieldSchema(new FieldSchema("c3",serdeConstants.STRING_TYPE_NAME,"")));
  partitionColumns.add(HCatSchemaUtils.getHCatFieldSchema(new FieldSchema("part1",serdeConstants.STRING_TYPE_NAME,"")));
  List<HCatRecord> recordsContainingPartitionCols=new ArrayList<HCatRecord>(20);
  for (int i=0; i < 20; i++) {
    List<Object> objList=new ArrayList<Object>();
    objList.add(i);
    objList.add("c2value" + i);
    objList.add("c3value" + i);
    objList.add("p1value6");
    recordsContainingPartitionCols.add(new DefaultHCatRecord(objList));
  }
  exc=null;
  try {
    runMRCreate(partitionMap,partitionColumns,recordsContainingPartitionCols,20,true);
  }
 catch (  IOException e) {
    exc=e;
  }
  List<HCatRecord> records=runMRRead(20,"part1 = \"p1value6\"");
  assertEquals(20,records.size());
  records=runMRRead(20,"part0 = \"p0value6\"");
  assertEquals(20,records.size());
  Integer i=0;
  for (  HCatRecord rec : records) {
    assertEquals(5,rec.size());
    assertEquals(rec.get(0),i);
    assertEquals(rec.get(1),"c2value" + i);
    assertEquals(rec.get(2),"c3value" + i);
    assertEquals(rec.get(3),"p1value6");
    assertEquals(rec.get(4),"p0value6");
    i++;
  }
}
