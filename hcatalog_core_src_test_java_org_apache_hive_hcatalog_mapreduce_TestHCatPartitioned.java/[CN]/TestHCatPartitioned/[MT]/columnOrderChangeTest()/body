{
  HCatSchema tableSchema=getTableSchema();
  assertEquals(5,tableSchema.getFields().size());
  partitionColumns=new ArrayList<HCatFieldSchema>();
  partitionColumns.add(HCatSchemaUtils.getHCatFieldSchema(new FieldSchema("c1",serdeConstants.INT_TYPE_NAME,"")));
  partitionColumns.add(HCatSchemaUtils.getHCatFieldSchema(new FieldSchema("c3",serdeConstants.STRING_TYPE_NAME,"")));
  partitionColumns.add(HCatSchemaUtils.getHCatFieldSchema(new FieldSchema("c2",serdeConstants.STRING_TYPE_NAME,"")));
  writeRecords=new ArrayList<HCatRecord>();
  for (int i=0; i < 10; i++) {
    List<Object> objList=new ArrayList<Object>();
    objList.add(i);
    objList.add("co strvalue" + i);
    objList.add("co str2value" + i);
    writeRecords.add(new DefaultHCatRecord(objList));
  }
  Map<String,String> partitionMap=new HashMap<String,String>();
  partitionMap.put("part1","p1value8");
  partitionMap.put("part0","508");
  Exception exc=null;
  try {
    runMRCreate(partitionMap,partitionColumns,writeRecords,10,true);
  }
 catch (  IOException e) {
    exc=e;
  }
  assertTrue(exc != null);
  assertTrue(exc instanceof HCatException);
  assertEquals(ErrorType.ERROR_SCHEMA_COLUMN_MISMATCH,((HCatException)exc).getErrorType());
  partitionColumns=new ArrayList<HCatFieldSchema>();
  partitionColumns.add(HCatSchemaUtils.getHCatFieldSchema(new FieldSchema("c1",serdeConstants.INT_TYPE_NAME,"")));
  partitionColumns.add(HCatSchemaUtils.getHCatFieldSchema(new FieldSchema("c2",serdeConstants.STRING_TYPE_NAME,"")));
  writeRecords=new ArrayList<HCatRecord>();
  for (int i=0; i < 10; i++) {
    List<Object> objList=new ArrayList<Object>();
    objList.add(i);
    objList.add("co strvalue" + i);
    writeRecords.add(new DefaultHCatRecord(objList));
  }
  runMRCreate(partitionMap,partitionColumns,writeRecords,10,true);
  if (isTableImmutable()) {
    runMRRead(70);
  }
 else {
    runMRRead(90);
  }
}
