{
  HiveConf conf=sess.getConf();
  if (linfo != null) {
    Iterator<Map.Entry<DependencyKey,Dependency>> iter=linfo.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<DependencyKey,Dependency> it=iter.next();
      Dependency dep=it.getValue();
      DependencyKey depK=it.getKey();
      JSONObject out_json=new JSONObject();
      JSONObject depk_json=new JSONObject();
      JSONObject field_json=new JSONObject();
      field_json.put("name",depK.getFieldSchema().getName());
      field_json.put("type",depK.getFieldSchema().getType());
      field_json.put("comment",depK.getFieldSchema().getComment());
      depk_json.put("fieldSchema",field_json);
      JSONObject dc_json=new JSONObject();
      dc_json.put("isPartition",depK.getDataContainer().isPartition());
      JSONObject tab_json=new JSONObject();
      if (depK.getDataContainer().isPartition()) {
        JSONObject part_json=new JSONObject();
        Partition part=depK.getDataContainer().getPartition();
        part_json.put("values",part.getValues());
        tab_json.put("tableName",depK.getDataContainer().getTable().getTableName());
        tab_json.put("dbName",depK.getDataContainer().getTable().getDbName());
        JSONArray fs_array=new JSONArray();
        for (        FieldSchema fs : depK.getDataContainer().getTable().getPartitionKeys()) {
          field_json=new JSONObject();
          field_json.put("name",fs.getName());
          field_json.put("type",fs.getType());
          field_json.put("comment",fs.getComment());
          fs_array.put(field_json);
        }
        tab_json.put("partitionKeys",fs_array);
        part_json.put("table",tab_json);
        dc_json.put("partition",part_json);
      }
 else {
        tab_json.put("tableName",depK.getDataContainer().getTable().getTableName());
        tab_json.put("dbName",depK.getDataContainer().getTable().getDbName());
        dc_json.put("table",tab_json);
      }
      depk_json.put("dataContainer",dc_json);
      out_json.put("key",depk_json);
      JSONObject dep_json=new JSONObject();
      dep_json.put("type",dep.getType().toString());
      dep_json.put("expr",dep.getExpr());
      JSONArray basecol_array=new JSONArray();
      for (      BaseColumnInfo col : dep.getBaseCols()) {
        JSONObject col_json=new JSONObject();
        field_json=new JSONObject();
        if (col.getColumn() != null) {
          field_json.put("name",col.getColumn().getName());
          field_json.put("type",col.getColumn().getType());
          field_json.put("comment",col.getColumn().getComment());
        }
        col_json.put("column",field_json);
        JSONObject tabAlias_json=new JSONObject();
        tabAlias_json.put("alias",col.getTabAlias().getAlias());
        tab_json=new JSONObject();
        tab_json.put("tableName",col.getTabAlias().getTable().getTableName());
        tab_json.put("dbName",col.getTabAlias().getTable().getDbName());
        tabAlias_json.put("table",tab_json);
        col_json.put("tabAlias",tabAlias_json);
        basecol_array.put(col_json);
      }
      dep_json.put("baseCols",basecol_array);
      out_json.put("value",dep_json);
      ArrayList<Object> sqlParams=new ArrayList<Object>();
      sqlParams.add(StringEscapeUtils.escapeJava(out_json.toString()));
      String sql="insert into lineage_log set info = ?";
      HookUtils.runInsert(conf,urlFactory,sql,sqlParams,HookUtils.getSqlNumRetry(conf));
    }
  }
}
