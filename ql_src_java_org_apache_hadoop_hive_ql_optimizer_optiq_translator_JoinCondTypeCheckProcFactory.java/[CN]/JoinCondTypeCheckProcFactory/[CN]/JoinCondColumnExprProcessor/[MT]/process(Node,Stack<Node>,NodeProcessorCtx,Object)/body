{
  JoinTypeCheckCtx ctx=(JoinTypeCheckCtx)procCtx;
  if (ctx.getError() != null) {
    return null;
  }
  ASTNode expr=(ASTNode)nd;
  ASTNode parent=stack.size() > 1 ? (ASTNode)stack.get(stack.size() - 2) : null;
  if (expr.getType() != HiveParser.TOK_TABLE_OR_COL) {
    ctx.setError(ErrorMsg.INVALID_COLUMN.getMsg(expr),expr);
    return null;
  }
  assert(expr.getChildCount() == 1);
  String tableOrCol=BaseSemanticAnalyzer.unescapeIdentifier(expr.getChild(0).getText());
  boolean qualifiedAccess=(parent != null && parent.getType() == HiveParser.DOT);
  ColumnInfo colInfo=null;
  if (!qualifiedAccess) {
    colInfo=getColInfo(ctx,null,tableOrCol,expr);
    return new ExprNodeColumnDesc(colInfo.getType(),colInfo.getInternalName(),colInfo.getTabAlias(),colInfo.getIsVirtualCol());
  }
 else   if (hasTableAlias(ctx,tableOrCol,expr)) {
    return null;
  }
 else {
    throw new SemanticException(ErrorMsg.INVALID_COLUMN.getMsg(expr));
  }
}
