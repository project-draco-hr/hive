{
  argumentOIs=arguments;
  returnOIResolver=new GenericUDFUtils.ReturnObjectInspectorResolver();
  for (int i=0; i + 1 < arguments.length; i+=2) {
    if (!arguments[i].getTypeName().equals(Constants.BOOLEAN_TYPE_NAME)) {
      throw new UDFArgumentTypeException(i,"\"" + Constants.BOOLEAN_TYPE_NAME + "\" is expected after WHEN, "+ "but \""+ arguments[i].getTypeName()+ "\" is found");
    }
    if (!returnOIResolver.update(arguments[i + 1])) {
      throw new UDFArgumentTypeException(i + 1,"The expressions after THEN should have the same type: \"" + returnOIResolver.get().getTypeName() + "\" is expected but \""+ arguments[i + 1].getTypeName()+ "\" is found");
    }
  }
  if (arguments.length % 2 == 1) {
    int i=arguments.length - 2;
    if (!returnOIResolver.update(arguments[i + 1])) {
      throw new UDFArgumentTypeException(i + 1,"The expression after ELSE should have the same type as those after THEN: \"" + returnOIResolver.get().getTypeName() + "\" is expected but \""+ arguments[i + 1].getTypeName()+ "\" is found");
    }
  }
  return returnOIResolver.get();
}
