{
  if (LOG.isDebugEnabled()) {
    LOG.debug("moveTaskOutputs " + file + " from: "+ srcDir+ " to: "+ destDir+ " dry: "+ dryRun+ " immutable: "+ immutable);
  }
  if (dynamicPartitioningUsed) {
    immutable=true;
  }
  if (file.getName().equals(TEMP_DIR_NAME) || file.getName().equals(LOGS_DIR_NAME) || file.getName().equals(SUCCEEDED_FILE_NAME)) {
    return;
  }
  final Path finalOutputPath=getFinalPath(fs,file,srcDir,destDir,immutable);
  if (fs.isFile(file)) {
    if (dryRun) {
      if (immutable) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Testing if moving file: [" + file + "] to ["+ finalOutputPath+ "] would cause a problem");
        }
        if (fs.exists(finalOutputPath)) {
          throw new HCatException(ErrorType.ERROR_MOVE_FAILED,"Data already exists in " + finalOutputPath + ", duplicate publish not possible.");
        }
      }
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Moving file: [ " + file + "] to ["+ finalOutputPath+ "]");
      }
      fs.mkdirs(finalOutputPath.getParent());
      if (!fs.rename(file,finalOutputPath)) {
        if (!fs.delete(finalOutputPath,true)) {
          throw new HCatException(ErrorType.ERROR_MOVE_FAILED,"Failed to delete existing path " + finalOutputPath);
        }
        if (!fs.rename(file,finalOutputPath)) {
          throw new HCatException(ErrorType.ERROR_MOVE_FAILED,"Failed to move output to " + finalOutputPath);
        }
      }
    }
  }
 else   if (fs.getFileStatus(file).isDir()) {
    FileStatus[] children=fs.listStatus(file);
    FileStatus firstChild=null;
    if (children != null) {
      int index=0;
      while (index < children.length) {
        if (!children[index].getPath().getName().equals(TEMP_DIR_NAME) && !children[index].getPath().getName().equals(LOGS_DIR_NAME) && !children[index].getPath().getName().equals(SUCCEEDED_FILE_NAME)) {
          firstChild=children[index];
          break;
        }
        index++;
      }
    }
    if (firstChild != null && firstChild.isDir()) {
      for (      FileStatus child : children) {
        moveTaskOutputs(fs,child.getPath(),srcDir,destDir,dryRun,immutable);
      }
    }
 else {
      if (!dryRun) {
        if (dynamicPartitioningUsed) {
          final Path parentDir=finalOutputPath.getParent();
          Path placeholder=new Path(parentDir,"_placeholder");
          if (fs.mkdirs(parentDir)) {
            fs.create(placeholder).close();
          }
          if (LOG.isDebugEnabled()) {
            LOG.debug("Moving directory: " + file + " to "+ parentDir);
          }
          Path dstPath=!customDynamicLocationUsed ? parentDir : finalOutputPath;
          if (!fs.rename(file,dstPath)) {
            final String msg="Failed to move file: " + file + " to "+ dstPath;
            LOG.error(msg);
            throw new HCatException(ErrorType.ERROR_MOVE_FAILED,msg);
          }
          fs.delete(placeholder,false);
        }
 else {
          for (          FileStatus child : children) {
            moveTaskOutputs(fs,child.getPath(),srcDir,destDir,dryRun,immutable);
          }
        }
      }
 else {
        if (immutable && fs.exists(finalOutputPath) && !MetaStoreUtils.isDirEmpty(fs,finalOutputPath)) {
          throw new HCatException(ErrorType.ERROR_DUPLICATE_PARTITION,"Data already exists in " + finalOutputPath + ", duplicate publish not possible.");
        }
      }
    }
  }
 else {
    final String msg="Unknown file type being asked to be moved, erroring out";
    throw new HCatException(ErrorType.ERROR_MOVE_FAILED,msg);
  }
}
