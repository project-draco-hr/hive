{
  registerFunction("concat",SqlStdOperatorTable.CONCAT,null);
  registerFunction("substr",SqlStdOperatorTable.SUBSTRING,null);
  registerFunction("substring",SqlStdOperatorTable.SUBSTRING,null);
  stringFunction("space");
  stringFunction("repeat");
  numericFunction("ascii");
  stringFunction("repeat");
  numericFunction("size");
  numericFunction("round");
  registerFunction("floor",SqlStdOperatorTable.FLOOR,null);
  registerFunction("sqrt",SqlStdOperatorTable.SQRT,null);
  registerFunction("ceil",SqlStdOperatorTable.CEIL,null);
  registerFunction("ceiling",SqlStdOperatorTable.CEIL,null);
  numericFunction("rand");
  operatorMap.put("abs",SqlStdOperatorTable.ABS);
  numericFunction("pmod");
  numericFunction("ln");
  numericFunction("log2");
  numericFunction("sin");
  numericFunction("asin");
  numericFunction("cos");
  numericFunction("acos");
  registerFunction("log10",SqlStdOperatorTable.LOG10,null);
  numericFunction("log");
  numericFunction("exp");
  numericFunction("power");
  numericFunction("pow");
  numericFunction("sign");
  numericFunction("pi");
  numericFunction("degrees");
  numericFunction("atan");
  numericFunction("tan");
  numericFunction("e");
  registerFunction("upper",SqlStdOperatorTable.UPPER,null);
  registerFunction("lower",SqlStdOperatorTable.LOWER,null);
  registerFunction("ucase",SqlStdOperatorTable.UPPER,null);
  registerFunction("lcase",SqlStdOperatorTable.LOWER,null);
  registerFunction("trim",SqlStdOperatorTable.TRIM,null);
  stringFunction("ltrim");
  stringFunction("rtrim");
  numericFunction("length");
  stringFunction("like");
  stringFunction("rlike");
  stringFunction("regexp");
  stringFunction("regexp_replace");
  stringFunction("regexp_extract");
  stringFunction("parse_url");
  numericFunction("day");
  numericFunction("dayofmonth");
  numericFunction("month");
  numericFunction("year");
  numericFunction("hour");
  numericFunction("minute");
  numericFunction("second");
  registerFunction("+",SqlStdOperatorTable.PLUS,hToken(HiveParser.PLUS,"+"));
  registerFunction("-",SqlStdOperatorTable.MINUS,hToken(HiveParser.MINUS,"-"));
  registerFunction("*",SqlStdOperatorTable.MULTIPLY,hToken(HiveParser.STAR,"*"));
  registerFunction("/",SqlStdOperatorTable.DIVIDE,hToken(HiveParser.STAR,"/"));
  registerFunction("%",SqlStdOperatorTable.MOD,hToken(HiveParser.STAR,"%"));
  numericFunction("div");
  numericFunction("isnull");
  numericFunction("isnotnull");
  numericFunction("if");
  numericFunction("in");
  registerFunction("and",SqlStdOperatorTable.AND,hToken(HiveParser.KW_AND,"and"));
  registerFunction("or",SqlStdOperatorTable.OR,hToken(HiveParser.KW_OR,"or"));
  registerFunction("=",SqlStdOperatorTable.EQUALS,hToken(HiveParser.EQUAL,"="));
  numericFunction("<=>");
  numericFunction("!=");
  numericFunction("<>");
  registerFunction("<",SqlStdOperatorTable.LESS_THAN,hToken(HiveParser.LESSTHAN,"<"));
  registerFunction("<=",SqlStdOperatorTable.LESS_THAN_OR_EQUAL,hToken(HiveParser.LESSTHANOREQUALTO,"<="));
  registerFunction(">",SqlStdOperatorTable.GREATER_THAN,hToken(HiveParser.GREATERTHAN,">"));
  registerFunction(">=",SqlStdOperatorTable.GREATER_THAN_OR_EQUAL,hToken(HiveParser.GREATERTHANOREQUALTO,">="));
  numericFunction("not");
  registerFunction("!",SqlStdOperatorTable.NOT,hToken(HiveParser.KW_NOT,"not"));
  numericFunction("between");
  registerFunction("case",SqlStdOperatorTable.CASE,null);
  numericFunction("when");
  numericFunction(serdeConstants.BOOLEAN_TYPE_NAME);
  numericFunction(serdeConstants.TINYINT_TYPE_NAME);
  numericFunction(serdeConstants.SMALLINT_TYPE_NAME);
  numericFunction(serdeConstants.INT_TYPE_NAME);
  numericFunction(serdeConstants.BIGINT_TYPE_NAME);
  numericFunction(serdeConstants.FLOAT_TYPE_NAME);
  numericFunction(serdeConstants.DOUBLE_TYPE_NAME);
  stringFunction(serdeConstants.STRING_TYPE_NAME);
}
