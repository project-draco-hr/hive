{
  AvroSerDe asd=new AvroSerDe();
  asd.initialize(new Configuration(),props);
  assertTrue(asd.getObjectInspector() instanceof StandardStructObjectInspector);
  StandardStructObjectInspector oi=(StandardStructObjectInspector)asd.getObjectInspector();
  List<? extends StructField> allStructFieldRefs=oi.getAllStructFieldRefs();
  assertEquals(SchemaResolutionProblem.SIGNAL_BAD_SCHEMA.getFields().size(),allStructFieldRefs.size());
  StructField firstField=allStructFieldRefs.get(0);
  assertTrue(firstField.toString().contains("error_error_error_error_error_error_error"));
  try {
    Writable mock=Mockito.mock(Writable.class);
    asd.deserialize(mock);
    fail("Should have thrown a BadSchemaException");
  }
 catch (  BadSchemaException bse) {
  }
  try {
    Object o=Mockito.mock(Object.class);
    ObjectInspector mockOI=Mockito.mock(ObjectInspector.class);
    asd.serialize(o,mockOI);
    fail("Should have thrown a BadSchemaException");
  }
 catch (  BadSchemaException bse) {
  }
}
