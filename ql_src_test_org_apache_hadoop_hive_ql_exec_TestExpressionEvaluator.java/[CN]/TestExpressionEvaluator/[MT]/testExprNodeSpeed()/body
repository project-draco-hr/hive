{
  try {
    int basetimes=100000;
    measureSpeed("1 + 2",basetimes * 100,ExprNodeEvaluatorFactory.get(SemanticAnalyzer.getFuncExprNodeDesc("+",new exprNodeConstantDesc(1),new exprNodeConstantDesc(2))),r,Integer.valueOf(1 + 2));
    measureSpeed("1 + 2 - 3",basetimes * 100,ExprNodeEvaluatorFactory.get(SemanticAnalyzer.getFuncExprNodeDesc("-",SemanticAnalyzer.getFuncExprNodeDesc("+",new exprNodeConstantDesc(1),new exprNodeConstantDesc(2)),new exprNodeConstantDesc(3))),r,Integer.valueOf(1 + 2 - 3));
    measureSpeed("1 + 2 - 3 + 4",basetimes * 100,ExprNodeEvaluatorFactory.get(SemanticAnalyzer.getFuncExprNodeDesc("+",SemanticAnalyzer.getFuncExprNodeDesc("-",SemanticAnalyzer.getFuncExprNodeDesc("+",new exprNodeConstantDesc(1),new exprNodeConstantDesc(2)),new exprNodeConstantDesc(3)),new exprNodeConstantDesc(4))),r,Integer.valueOf(1 + 2 - 3 + 4));
    measureSpeed("concat(\"1\", \"2\")",basetimes * 100,ExprNodeEvaluatorFactory.get(SemanticAnalyzer.getFuncExprNodeDesc("concat",new exprNodeConstantDesc("1"),new exprNodeConstantDesc("2"))),r,"12");
    measureSpeed("concat(concat(\"1\", \"2\"), \"3\")",basetimes * 100,ExprNodeEvaluatorFactory.get(SemanticAnalyzer.getFuncExprNodeDesc("concat",SemanticAnalyzer.getFuncExprNodeDesc("concat",new exprNodeConstantDesc("1"),new exprNodeConstantDesc("2")),new exprNodeConstantDesc("3"))),r,"123");
    measureSpeed("concat(concat(concat(\"1\", \"2\"), \"3\"), \"4\")",basetimes * 100,ExprNodeEvaluatorFactory.get(SemanticAnalyzer.getFuncExprNodeDesc("concat",SemanticAnalyzer.getFuncExprNodeDesc("concat",SemanticAnalyzer.getFuncExprNodeDesc("concat",new exprNodeConstantDesc("1"),new exprNodeConstantDesc("2")),new exprNodeConstantDesc("3")),new exprNodeConstantDesc("4"))),r,"1234");
    measureSpeed("concat(col[0], col[1])",basetimes * 10,ExprNodeEvaluatorFactory.get(SemanticAnalyzer.getFuncExprNodeDesc("concat",new exprNodeColumnDesc(String.class,"col[0]"),new exprNodeColumnDesc(String.class,"col[1]"))),r,"01");
    measureSpeed("concat(concat(col[0], col[1]), col[2])",basetimes * 10,ExprNodeEvaluatorFactory.get(SemanticAnalyzer.getFuncExprNodeDesc("concat",SemanticAnalyzer.getFuncExprNodeDesc("concat",new exprNodeColumnDesc(String.class,"col[0]"),new exprNodeColumnDesc(String.class,"col[1]")),new exprNodeColumnDesc(String.class,"col[2]"))),r,"012");
    measureSpeed("concat(concat(concat(col[0], col[1]), col[2]), col[3])",basetimes * 10,ExprNodeEvaluatorFactory.get(SemanticAnalyzer.getFuncExprNodeDesc("concat",SemanticAnalyzer.getFuncExprNodeDesc("concat",SemanticAnalyzer.getFuncExprNodeDesc("concat",new exprNodeColumnDesc(String.class,"col[0]"),new exprNodeColumnDesc(String.class,"col[1]")),new exprNodeColumnDesc(String.class,"col[2]")),new exprNodeColumnDesc(String.class,"col[3]"))),r,"0123");
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw e;
  }
}
