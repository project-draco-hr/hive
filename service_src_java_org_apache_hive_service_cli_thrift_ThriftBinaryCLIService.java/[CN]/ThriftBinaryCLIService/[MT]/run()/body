{
  try {
    String threadPoolName="HiveServer2-Handler-Pool";
    ExecutorService executorService=new ThreadPoolExecutorWithOomHook(minWorkerThreads,maxWorkerThreads,workerKeepAliveTime,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(),new ThreadFactoryWithGarbageCleanup(threadPoolName),oomHook);
    hiveAuthFactory=new HiveAuthFactory(hiveConf);
    TTransportFactory transportFactory=hiveAuthFactory.getAuthTransFactory();
    TProcessorFactory processorFactory=hiveAuthFactory.getAuthProcFactory(this);
    TServerSocket serverSocket=null;
    List<String> sslVersionBlacklist=new ArrayList<String>();
    for (    String sslVersion : hiveConf.getVar(ConfVars.HIVE_SSL_PROTOCOL_BLACKLIST).split(",")) {
      sslVersionBlacklist.add(sslVersion);
    }
    if (!hiveConf.getBoolVar(ConfVars.HIVE_SERVER2_USE_SSL)) {
      serverSocket=HiveAuthFactory.getServerSocket(hiveHost,portNum);
    }
 else {
      String keyStorePath=hiveConf.getVar(ConfVars.HIVE_SERVER2_SSL_KEYSTORE_PATH).trim();
      if (keyStorePath.isEmpty()) {
        throw new IllegalArgumentException(ConfVars.HIVE_SERVER2_SSL_KEYSTORE_PATH.varname + " Not configured for SSL connection");
      }
      String keyStorePassword=ShimLoader.getHadoopShims().getPassword(hiveConf,HiveConf.ConfVars.HIVE_SERVER2_SSL_KEYSTORE_PASSWORD.varname);
      serverSocket=HiveAuthFactory.getServerSSLSocket(hiveHost,portNum,keyStorePath,keyStorePassword,sslVersionBlacklist);
    }
    int maxMessageSize=hiveConf.getIntVar(HiveConf.ConfVars.HIVE_SERVER2_THRIFT_MAX_MESSAGE_SIZE);
    int requestTimeout=(int)hiveConf.getTimeVar(HiveConf.ConfVars.HIVE_SERVER2_THRIFT_LOGIN_TIMEOUT,TimeUnit.SECONDS);
    int beBackoffSlotLength=(int)hiveConf.getTimeVar(HiveConf.ConfVars.HIVE_SERVER2_THRIFT_LOGIN_BEBACKOFF_SLOT_LENGTH,TimeUnit.MILLISECONDS);
    TThreadPoolServer.Args sargs=new TThreadPoolServer.Args(serverSocket).processorFactory(processorFactory).transportFactory(transportFactory).protocolFactory(new TBinaryProtocol.Factory()).inputProtocolFactory(new TBinaryProtocol.Factory(true,true,maxMessageSize,maxMessageSize)).requestTimeout(requestTimeout).requestTimeoutUnit(TimeUnit.SECONDS).beBackoffSlotLength(beBackoffSlotLength).beBackoffSlotLengthUnit(TimeUnit.MILLISECONDS).executorService(executorService);
    server=new TThreadPoolServer(sargs);
    server.setServerEventHandler(serverEventHandler);
    String msg="Starting " + ThriftBinaryCLIService.class.getSimpleName() + " on port "+ portNum+ " with "+ minWorkerThreads+ "..."+ maxWorkerThreads+ " worker threads";
    LOG.info(msg);
    server.serve();
  }
 catch (  Throwable t) {
    LOG.fatal("Error starting HiveServer2: could not start " + ThriftBinaryCLIService.class.getSimpleName(),t);
    System.exit(-1);
  }
}
