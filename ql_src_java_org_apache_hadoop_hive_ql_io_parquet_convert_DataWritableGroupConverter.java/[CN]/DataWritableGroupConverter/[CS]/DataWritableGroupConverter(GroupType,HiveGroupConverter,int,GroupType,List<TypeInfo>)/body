{
  this.parent=parent;
  this.index=index;
  final int totalFieldCount=containingGroupType.getFieldCount();
  final int selectedFieldCount=selectedGroupType.getFieldCount();
  currentArr=new Object[totalFieldCount];
  converters=new Converter[selectedFieldCount];
  List<Type> selectedFields=selectedGroupType.getFields();
  for (int i=0; i < selectedFieldCount; i++) {
    Type subtype=selectedFields.get(i);
    if (containingGroupType.getFields().contains(subtype)) {
      converters[i]=getConverterFromDescription(subtype,containingGroupType.getFieldIndex(subtype.getName()),this,hiveSchemaTypeInfos);
    }
 else {
      throw new IllegalStateException("Group type [" + containingGroupType + "] does not contain requested field: "+ subtype);
    }
  }
}
