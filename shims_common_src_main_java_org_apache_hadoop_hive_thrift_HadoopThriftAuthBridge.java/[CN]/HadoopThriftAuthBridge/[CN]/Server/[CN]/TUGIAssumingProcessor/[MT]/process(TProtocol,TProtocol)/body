{
  TTransport trans=inProt.getTransport();
  if (!(trans instanceof TSaslServerTransport)) {
    throw new TException("Unexpected non-SASL transport " + trans.getClass());
  }
  TSaslServerTransport saslTrans=(TSaslServerTransport)trans;
  SaslServer saslServer=saslTrans.getSaslServer();
  String authId=saslServer.getAuthorizationID();
  LOG.debug("AUTH ID ======>" + authId);
  String endUser=authId;
  Socket socket=((TSocket)(saslTrans.getUnderlyingTransport())).getSocket();
  remoteAddress.set(socket.getInetAddress());
  String mechanismName=saslServer.getMechanismName();
  userAuthMechanism.set(mechanismName);
  if (AuthMethod.PLAIN.getMechanismName().equalsIgnoreCase(mechanismName)) {
    remoteUser.set(endUser);
    return wrapped.process(inProt,outProt);
  }
  authenticationMethod.set(AuthenticationMethod.KERBEROS);
  if (AuthMethod.TOKEN.getMechanismName().equalsIgnoreCase(mechanismName)) {
    try {
      TokenIdentifier tokenId=SaslRpcServer.getIdentifier(authId,secretManager);
      endUser=tokenId.getUser().getUserName();
      authenticationMethod.set(AuthenticationMethod.TOKEN);
    }
 catch (    InvalidToken e) {
      throw new TException(e.getMessage());
    }
  }
  UserGroupInformation clientUgi=null;
  try {
    if (useProxy) {
      clientUgi=UserGroupInformation.createProxyUser(endUser,UserGroupInformation.getLoginUser());
      remoteUser.set(clientUgi.getShortUserName());
      LOG.debug("Set remoteUser :" + remoteUser.get());
      return clientUgi.doAs(new PrivilegedExceptionAction<Boolean>(){
        @Override public Boolean run(){
          try {
            return wrapped.process(inProt,outProt);
          }
 catch (          TException te) {
            throw new RuntimeException(te);
          }
        }
      }
);
    }
 else {
      UserGroupInformation endUserUgi=UserGroupInformation.createRemoteUser(endUser);
      remoteUser.set(endUserUgi.getShortUserName());
      LOG.debug("Set remoteUser :" + remoteUser.get() + ", from endUser :"+ endUser);
      return wrapped.process(inProt,outProt);
    }
  }
 catch (  RuntimeException rte) {
    if (rte.getCause() instanceof TException) {
      throw (TException)rte.getCause();
    }
    throw rte;
  }
catch (  InterruptedException ie) {
    throw new RuntimeException(ie);
  }
catch (  IOException ioe) {
    throw new RuntimeException(ioe);
  }
 finally {
    if (clientUgi != null) {
      try {
        FileSystem.closeAllForUGI(clientUgi);
      }
 catch (      IOException exception) {
        LOG.error("Could not clean up file-system handles for UGI: " + clientUgi,exception);
      }
    }
  }
}
