{
  TypeDescription schema=TypeDescription.createLong();
  List<Long> input=Lists.newArrayList();
  for (int i=0; i < 25; i++) {
    input.add(371292224226367L);
    input.add(119622332222267L);
    input.add(686329400222007L);
    input.add(100233333222367L);
    input.add(636272333322222L);
    input.add(10202633223267L);
    input.add(36700222022230L);
    input.add(36023226224227L);
    input.add(47192226364427L);
    input.add(71963622222447L);
    input.add(22244444222222L);
    input.add(21220263327442L);
    input.add(21032233332232L);
    input.add(16026322232227L);
    input.add(40022262272212L);
    input.add(23634342227222L);
    input.add(16022222222227L);
    input.add(46026362222227L);
    input.add(46026362222227L);
    input.add(33322222222323L);
  }
  input.add(Long.MAX_VALUE);
  Writer writer=OrcFile.createWriter(testFilePath,OrcFile.writerOptions(conf).setSchema(schema).stripeSize(100000).bufferSize(10000).encodingStrategy(encodingStrategy));
  VectorizedRowBatch batch=schema.createRowBatch();
  for (  Long l : input) {
    appendLong(batch,l);
  }
  writer.addRowBatch(batch);
  writer.close();
  Reader reader=OrcFile.createReader(testFilePath,OrcFile.readerOptions(conf).filesystem(fs));
  RecordReader rows=reader.rows();
  batch=reader.getSchema().createRowBatch();
  int idx=0;
  while (rows.nextBatch(batch)) {
    for (int r=0; r < batch.size; ++r) {
      assertEquals(input.get(idx++).longValue(),((LongColumnVector)batch.cols[0]).vector[r]);
    }
  }
}
