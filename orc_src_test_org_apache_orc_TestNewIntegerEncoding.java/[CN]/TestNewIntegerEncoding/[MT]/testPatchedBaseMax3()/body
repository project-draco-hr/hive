{
  TypeDescription schema=TypeDescription.createLong();
  List<Long> input=Lists.newArrayList();
  input.add(371946367L);
  input.add(11963367L);
  input.add(68639400007L);
  input.add(100233367L);
  input.add(6367L);
  input.add(10026367L);
  input.add(3670000L);
  input.add(3602367L);
  input.add(4719226367L);
  input.add(7196367L);
  input.add(444442L);
  input.add(210267L);
  input.add(21033L);
  input.add(160267L);
  input.add(400267L);
  input.add(23634347L);
  input.add(16027L);
  input.add(46026367L);
  input.add(Long.MAX_VALUE);
  input.add(33333L);
  Writer writer=OrcFile.createWriter(testFilePath,OrcFile.writerOptions(conf).setSchema(schema).stripeSize(100000).bufferSize(10000).encodingStrategy(encodingStrategy));
  VectorizedRowBatch batch=schema.createRowBatch();
  for (  Long l : input) {
    appendLong(batch,l);
  }
  writer.addRowBatch(batch);
  writer.close();
  Reader reader=OrcFile.createReader(testFilePath,OrcFile.readerOptions(conf).filesystem(fs));
  RecordReader rows=reader.rows();
  int idx=0;
  while (rows.nextBatch(batch)) {
    for (int r=0; r < batch.size; ++r) {
      assertEquals(input.get(idx++).longValue(),((LongColumnVector)batch.cols[0]).vector[r]);
    }
  }
}
