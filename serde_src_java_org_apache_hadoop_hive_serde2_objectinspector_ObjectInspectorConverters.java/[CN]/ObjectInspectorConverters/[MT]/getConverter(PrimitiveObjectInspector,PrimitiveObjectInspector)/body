{
switch (outputOI.getPrimitiveCategory()) {
case BOOLEAN:
    return new PrimitiveObjectInspectorConverter.BooleanConverter(inputOI,(SettableBooleanObjectInspector)outputOI);
case BYTE:
  return new PrimitiveObjectInspectorConverter.ByteConverter(inputOI,(SettableByteObjectInspector)outputOI);
case SHORT:
return new PrimitiveObjectInspectorConverter.ShortConverter(inputOI,(SettableShortObjectInspector)outputOI);
case INT:
return new PrimitiveObjectInspectorConverter.IntConverter(inputOI,(SettableIntObjectInspector)outputOI);
case LONG:
return new PrimitiveObjectInspectorConverter.LongConverter(inputOI,(SettableLongObjectInspector)outputOI);
case FLOAT:
return new PrimitiveObjectInspectorConverter.FloatConverter(inputOI,(SettableFloatObjectInspector)outputOI);
case DOUBLE:
return new PrimitiveObjectInspectorConverter.DoubleConverter(inputOI,(SettableDoubleObjectInspector)outputOI);
case STRING:
if (outputOI instanceof WritableStringObjectInspector) {
return new PrimitiveObjectInspectorConverter.TextConverter(inputOI);
}
 else if (outputOI instanceof JavaStringObjectInspector) {
return new PrimitiveObjectInspectorConverter.StringConverter(inputOI);
}
case TIMESTAMP:
return new PrimitiveObjectInspectorConverter.TimestampConverter(inputOI,(SettableTimestampObjectInspector)outputOI);
case BINARY:
return new PrimitiveObjectInspectorConverter.BinaryConverter(inputOI,(SettableBinaryObjectInspector)outputOI);
case DECIMAL:
return new PrimitiveObjectInspectorConverter.BigDecimalConverter((PrimitiveObjectInspector)inputOI,(SettableBigDecimalObjectInspector)outputOI);
default :
throw new RuntimeException("Hive internal error: conversion of " + inputOI.getTypeName() + " to "+ outputOI.getTypeName()+ " not supported yet.");
}
}
