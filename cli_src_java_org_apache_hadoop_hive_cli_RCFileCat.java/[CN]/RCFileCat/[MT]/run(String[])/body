{
  long start=0l;
  long length=-1l;
  if (args.length < 1 || args.length > 3) {
    printUsage(null);
  }
  Path fileName=null;
  for (int i=0; i < args.length; i++) {
    String arg=args[i];
    if (arg.startsWith("--start=")) {
      start=Long.parseLong(arg.substring("--start=".length()));
    }
 else     if (arg.startsWith("--length=")) {
      length=Long.parseLong(arg.substring("--length=".length()));
    }
 else     if (fileName == null) {
      fileName=new Path(arg);
    }
 else {
      printUsage(null);
    }
  }
  FileSystem fs=FileSystem.get(fileName.toUri(),conf);
  long fileLen=fs.getFileStatus(fileName).getLen();
  if (start < 0) {
    start=0;
  }
  if (start > fileLen) {
    return 0;
  }
  if (length < 0 || (start + length) > fileLen) {
    length=fileLen - start;
  }
  FileSplit split=new FileSplit(fileName,start,length,new JobConf(conf));
  RCFileRecordReader recordReader=new RCFileRecordReader(conf,split);
  LongWritable key=new LongWritable();
  BytesRefArrayWritable value=new BytesRefArrayWritable();
  Text txt=new Text();
  while (recordReader.next(key,value)) {
    txt.clear();
    for (int i=0; i < value.size(); i++) {
      BytesRefWritable v=value.get(i);
      txt.set(v.getData(),v.getStart(),v.getLength());
      System.out.print(txt.toString());
      if (i < value.size() - 1) {
        System.out.print(RCFileCat.TAB);
      }
    }
    System.out.print(RCFileCat.NEWLINE);
  }
  return 0;
}
