{
  if (objInspector.getCategory() != Category.STRUCT) {
    throw new SerDeException(getClass().toString() + " can only serialize struct types, but we got: " + objInspector.getTypeName());
  }
  StructObjectInspector soi=(StructObjectInspector)objInspector;
  List<? extends StructField> fields=soi.getAllStructFieldRefs();
  List<Object> list=soi.getStructFieldsDataAsList(obj);
  List<? extends StructField> declaredFields=(serdeParams.rowTypeInfo != null && ((StructTypeInfo)serdeParams.rowTypeInfo).getAllStructFieldNames().size() > 0) ? ((StructObjectInspector)getObjectInspector()).getAllStructFieldRefs() : null;
  serializeStream.reset();
  serializedSize=0;
  for (int i=0; i < fields.size(); i++) {
    if (i > 0) {
      serializeStream.write(serdeParams.separators[0]);
    }
    ObjectInspector foi=fields.get(i).getFieldObjectInspector();
    Object f=(list == null ? null : list.get(i));
    if (declaredFields != null && i >= declaredFields.size()) {
      throw new SerDeException("Error: expecting " + declaredFields.size() + " but asking for field "+ i+ "\n"+ "data="+ obj+ "\n"+ "tableType="+ serdeParams.rowTypeInfo.toString()+ "\n"+ "dataType="+ TypeInfoUtils.getTypeInfoFromObjectInspector(objInspector));
    }
    serializeField(serializeStream,f,foi,serdeParams);
  }
  serializeCache.set(serializeStream.getData(),0,serializeStream.getLength());
  serializedSize=serializeStream.getLength();
  lastOperationSerialize=true;
  lastOperationDeserialize=false;
  return serializeCache;
}
