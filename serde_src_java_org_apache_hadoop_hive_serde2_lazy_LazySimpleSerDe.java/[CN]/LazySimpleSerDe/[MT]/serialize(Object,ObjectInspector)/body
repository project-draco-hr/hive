{
  if (objInspector.getCategory() != Category.STRUCT) {
    throw new SerDeException(getClass().toString() + " can only serialize struct types, but we got: " + objInspector.getTypeName());
  }
  StructObjectInspector soi=(StructObjectInspector)objInspector;
  List<? extends StructField> fields=soi.getAllStructFieldRefs();
  List<Object> list=soi.getStructFieldsDataAsList(obj);
  List<? extends StructField> declaredFields=(rowTypeInfo != null && rowTypeInfo.getAllStructFieldNames().size() > 0) ? ((StructObjectInspector)getObjectInspector()).getAllStructFieldRefs() : null;
  serializeStream.reset();
  try {
    for (int i=0; i < fields.size(); i++) {
      if (i > 0) {
        serializeStream.write(separators[0]);
      }
      ObjectInspector foi=fields.get(i).getFieldObjectInspector();
      Object f=(list == null ? null : list.get(i));
      if (declaredFields != null && i >= declaredFields.size()) {
        throw new SerDeException("Error: expecting " + declaredFields.size() + " but asking for field "+ i+ "\n"+ "data="+ obj+ "\n"+ "tableType="+ rowTypeInfo.toString()+ "\n"+ "dataType="+ TypeInfoUtils.getTypeInfoFromObjectInspector(objInspector));
      }
      if (!foi.getCategory().equals(Category.PRIMITIVE) && (declaredFields == null || declaredFields.get(i).getFieldObjectInspector().getCategory().equals(Category.PRIMITIVE))) {
        serialize(serializeStream,SerDeUtils.getJSONString(f,foi),stringObjectInspector,separators,1,nullSequence);
      }
 else {
        serialize(serializeStream,f,foi,separators,1,nullSequence);
      }
    }
  }
 catch (  IOException e) {
    throw new SerDeException(e);
  }
  serializeCache.set(serializeStream.getData(),0,serializeStream.getCount());
  return serializeCache;
}
