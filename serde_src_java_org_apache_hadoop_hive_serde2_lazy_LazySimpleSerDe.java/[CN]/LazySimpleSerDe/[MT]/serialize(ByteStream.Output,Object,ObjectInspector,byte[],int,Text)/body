{
  if (obj == null) {
    out.write(nullSequence.getBytes(),0,nullSequence.getLength());
    return;
  }
switch (objInspector.getCategory()) {
case PRIMITIVE:
{
      LazyUtils.writePrimitiveUTF8(out,obj);
      return;
    }
case LIST:
{
    char separator=(char)separators[level];
    ListObjectInspector loi=(ListObjectInspector)objInspector;
    List<?> list=loi.getList(obj);
    ObjectInspector eoi=loi.getListElementObjectInspector();
    if (list == null) {
      out.write(nullSequence.getBytes(),0,nullSequence.getLength());
    }
 else {
      for (int i=0; i < list.size(); i++) {
        if (i > 0) {
          out.write(separator);
        }
        serialize(out,list.get(i),eoi,separators,level + 1,nullSequence);
      }
    }
    return;
  }
case MAP:
{
  char separator=(char)separators[level];
  char keyValueSeparator=(char)separators[level + 1];
  MapObjectInspector moi=(MapObjectInspector)objInspector;
  ObjectInspector koi=moi.getMapKeyObjectInspector();
  ObjectInspector voi=moi.getMapValueObjectInspector();
  Map<?,?> map=moi.getMap(obj);
  if (map == null) {
    out.write(nullSequence.getBytes(),0,nullSequence.getLength());
  }
 else {
    boolean first=true;
    for (    Map.Entry<?,?> entry : map.entrySet()) {
      if (first) {
        first=false;
      }
 else {
        out.write(separator);
      }
      serialize(out,entry.getKey(),koi,separators,level + 2,nullSequence);
      out.write(keyValueSeparator);
      serialize(out,entry.getValue(),voi,separators,level + 2,nullSequence);
    }
  }
  return;
}
case STRUCT:
{
char separator=(char)separators[level];
StructObjectInspector soi=(StructObjectInspector)objInspector;
List<? extends StructField> fields=soi.getAllStructFieldRefs();
List<Object> list=soi.getStructFieldsDataAsList(obj);
if (list == null) {
  out.write(nullSequence.getBytes(),0,nullSequence.getLength());
}
 else {
  for (int i=0; i < list.size(); i++) {
    if (i > 0) {
      out.write(separator);
    }
    serialize(out,list.get(i),fields.get(i).getFieldObjectInspector(),separators,level + 1,nullSequence);
  }
}
return;
}
}
throw new RuntimeException("Unknown category type: " + objInspector.getCategory());
}
