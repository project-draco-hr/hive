{
switch (category) {
case BOOLEAN:
case BYTE:
case SHORT:
case INT:
case LONG:
case DATE:
    return new LongColumnVector(maxSize);
case TIMESTAMP:
  return new TimestampColumnVector(maxSize);
case FLOAT:
case DOUBLE:
return new DoubleColumnVector(maxSize);
case DECIMAL:
return new DecimalColumnVector(maxSize,precision,scale);
case STRING:
case BINARY:
case CHAR:
case VARCHAR:
return new BytesColumnVector(maxSize);
case STRUCT:
{
ColumnVector[] fieldVector=new ColumnVector[children.size()];
for (int i=0; i < fieldVector.length; ++i) {
fieldVector[i]=children.get(i).createColumn(maxSize);
}
return new StructColumnVector(maxSize,fieldVector);
}
case UNION:
{
ColumnVector[] fieldVector=new ColumnVector[children.size()];
for (int i=0; i < fieldVector.length; ++i) {
fieldVector[i]=children.get(i).createColumn(maxSize);
}
return new UnionColumnVector(maxSize,fieldVector);
}
case LIST:
return new ListColumnVector(maxSize,children.get(0).createColumn(maxSize));
case MAP:
return new MapColumnVector(maxSize,children.get(0).createColumn(maxSize),children.get(1).createColumn(maxSize));
default :
throw new IllegalArgumentException("Unknown type " + category);
}
}
