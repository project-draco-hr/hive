{
switch (columnType.getPrimitiveCategory()) {
case STRING:
    return datum.toString();
case BINARY:
  if (recordSchema.getType() == Type.FIXED) {
    Fixed fixed=(Fixed)datum;
    return fixed.bytes();
  }
 else   if (recordSchema.getType() == Type.BYTES) {
    return AvroSerdeUtils.getBytesFromByteBuffer((ByteBuffer)datum);
  }
 else {
    throw new AvroSerdeException("Unexpected Avro schema for Binary TypeInfo: " + recordSchema.getType());
  }
case DECIMAL:
if (fileSchema == null) {
  throw new AvroSerdeException("File schema is missing for decimal field. Reader schema is " + columnType);
}
int scale=0;
try {
scale=fileSchema.getJsonProp(AvroSerDe.AVRO_PROP_SCALE).asInt();
}
 catch (Exception ex) {
throw new AvroSerdeException("Failed to obtain scale value from file schema: " + fileSchema,ex);
}
HiveDecimal dec=AvroSerdeUtils.getHiveDecimalFromByteBuffer((ByteBuffer)datum,scale);
JavaHiveDecimalObjectInspector oi=(JavaHiveDecimalObjectInspector)PrimitiveObjectInspectorFactory.getPrimitiveJavaObjectInspector((DecimalTypeInfo)columnType);
return oi.set(null,dec);
case CHAR:
if (fileSchema == null) {
throw new AvroSerdeException("File schema is missing for char field. Reader schema is " + columnType);
}
int maxLength=0;
try {
maxLength=fileSchema.getJsonProp(AvroSerDe.AVRO_PROP_MAX_LENGTH).getValueAsInt();
}
 catch (Exception ex) {
throw new AvroSerdeException("Failed to obtain maxLength value for char field from file schema: " + fileSchema,ex);
}
String str=datum.toString();
HiveChar hc=new HiveChar(str,maxLength);
return hc;
case VARCHAR:
if (fileSchema == null) {
throw new AvroSerdeException("File schema is missing for varchar field. Reader schema is " + columnType);
}
maxLength=0;
try {
maxLength=fileSchema.getJsonProp(AvroSerDe.AVRO_PROP_MAX_LENGTH).getValueAsInt();
}
 catch (Exception ex) {
throw new AvroSerdeException("Failed to obtain maxLength value for varchar field from file schema: " + fileSchema,ex);
}
str=datum.toString();
HiveVarchar hvc=new HiveVarchar(str,maxLength);
return hvc;
case DATE:
if (recordSchema.getType() != Type.INT) {
throw new AvroSerdeException("Unexpected Avro schema for Date TypeInfo: " + recordSchema.getType());
}
return new Date(DateWritable.daysToMillis((Integer)datum));
case TIMESTAMP:
if (recordSchema.getType() != Type.LONG) {
throw new AvroSerdeException("Unexpected Avro schema for Date TypeInfo: " + recordSchema.getType());
}
return new Timestamp((Long)datum);
default :
return datum;
}
}
