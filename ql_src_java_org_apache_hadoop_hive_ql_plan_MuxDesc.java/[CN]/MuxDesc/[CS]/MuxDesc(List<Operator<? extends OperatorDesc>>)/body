{
  int numParents=ops.size();
  parentToKeyCols=new ArrayList<List<ExprNodeDesc>>(numParents);
  parentToOutputKeyColumnNames=new ArrayList<List<String>>(numParents);
  parentToValueCols=new ArrayList<List<ExprNodeDesc>>(numParents);
  parentToOutputValueColumnNames=new ArrayList<List<String>>(numParents);
  parentToTag=new ArrayList<Integer>(numParents);
  for (  Operator<? extends OperatorDesc> op : ops) {
    if (op != null && op instanceof ReduceSinkOperator) {
      ReduceSinkOperator rsop=(ReduceSinkOperator)op;
      List<ExprNodeDesc> keyCols=rsop.getConf().getKeyCols();
      List<ExprNodeDesc> valueCols=rsop.getConf().getValueCols();
      List<String> outputKeyColumnNames=rsop.getConf().getOutputKeyColumnNames();
      List<String> outputValueColumnNames=rsop.getConf().getOutputValueColumnNames();
      int tag=rsop.getConf().getTag();
      parentToKeyCols.add(keyCols);
      parentToValueCols.add(valueCols);
      parentToOutputKeyColumnNames.add(outputKeyColumnNames);
      parentToOutputValueColumnNames.add(outputValueColumnNames);
      parentToTag.add(tag);
    }
 else {
      parentToKeyCols.add(null);
      parentToValueCols.add(null);
      parentToOutputKeyColumnNames.add(null);
      parentToOutputValueColumnNames.add(null);
      parentToTag.add(null);
    }
  }
}
