{
  String ZK_PATH="/zktokenstore-testTokenStorage";
  ZooKeeperTokenStore ts=new ZooKeeperTokenStore();
  ts.setConf(createConf(ZK_PATH));
  int keySeq=ts.addMasterKey("key1Data");
  byte[] keyBytes=zkClient.getData(ZK_PATH + "/keys/" + String.format(ZooKeeperTokenStore.ZK_SEQ_FORMAT,keySeq),false,null);
  assertNotNull(keyBytes);
  assertEquals(new String(keyBytes),"key1Data");
  int keySeq2=ts.addMasterKey("key2Data");
  assertEquals("keys sequential",keySeq + 1,keySeq2);
  assertEquals("expected number keys",2,ts.getMasterKeys().length);
  ts.removeMasterKey(keySeq);
  assertEquals("expected number keys",1,ts.getMasterKeys().length);
  DelegationTokenIdentifier tokenId=new DelegationTokenIdentifier(new Text("owner"),new Text("renewer"),new Text("realUser"));
  DelegationTokenInformation tokenInfo=new DelegationTokenInformation(99,"password".getBytes());
  ts.addToken(tokenId,tokenInfo);
  DelegationTokenInformation tokenInfoRead=ts.getToken(tokenId);
  assertEquals(tokenInfo.getRenewDate(),tokenInfoRead.getRenewDate());
  assertNotSame(tokenInfo,tokenInfoRead);
  Assert.assertArrayEquals(HiveDelegationTokenSupport.encodeDelegationTokenInformation(tokenInfo),HiveDelegationTokenSupport.encodeDelegationTokenInformation(tokenInfoRead));
  List<DelegationTokenIdentifier> allIds=ts.getAllDelegationTokenIdentifiers();
  assertEquals(1,allIds.size());
  Assert.assertEquals(TokenStoreDelegationTokenSecretManager.encodeWritable(tokenId),TokenStoreDelegationTokenSecretManager.encodeWritable(allIds.get(0)));
  assertTrue(ts.removeToken(tokenId));
  assertEquals(0,ts.getAllDelegationTokenIdentifiers().size());
}
