{
  console.printError("Error during job, obtaining debugging information...");
  if (!conf.get("mapred.job.tracker","local").equals("local")) {
    console.printError("Job Tracking URL: " + rj.getTrackingURL());
  }
  TaskInfoGrabber tlg=new TaskInfoGrabber();
  Thread t=new Thread(tlg);
  try {
    t.start();
    t.join(HiveConf.getIntVar(conf,HiveConf.ConfVars.TASKLOG_DEBUG_TIMEOUT));
  }
 catch (  InterruptedException e) {
    console.printError("Timed out trying to finish grabbing task log URLs, " + "some task info may be missing");
  }
  for (  String task : successes) {
    failures.remove(task);
  }
  if (failures.keySet().size() == 0) {
    return;
  }
  computeMaxFailures();
  String jtUrl=null;
  try {
    jtUrl=JobTrackerURLResolver.getURL(conf);
  }
 catch (  Exception e) {
    console.printError("Unable to retrieve URL for Hadoop Task logs. " + e.getMessage());
  }
  for (  String task : failures.keySet()) {
    if (failures.get(task).intValue() == maxFailures) {
      TaskInfo ti=taskIdToInfo.get(task);
      String jobId=ti.getJobId();
      String taskUrl=(jtUrl == null) ? null : jtUrl + "/taskdetails.jsp?jobid=" + jobId+ "&tipid="+ task.toString();
      TaskLogProcessor tlp=new TaskLogProcessor(conf);
      for (      String logUrl : ti.getLogUrls()) {
        tlp.addTaskAttemptLogUrl(logUrl);
      }
      if (HiveConf.getBoolVar(conf,HiveConf.ConfVars.JOB_DEBUG_CAPTURE_STACKTRACES) && stackTraces != null) {
        if (!stackTraces.containsKey(jobId)) {
          stackTraces.put(jobId,new ArrayList<List<String>>());
        }
        stackTraces.get(jobId).addAll(tlp.getStackTraces());
      }
      if (HiveConf.getBoolVar(conf,HiveConf.ConfVars.SHOW_JOB_FAIL_DEBUG_INFO)) {
        List<ErrorAndSolution> errors=tlp.getErrors();
        StringBuilder sb=new StringBuilder();
        sb.append("\n");
        sb.append("Task with the most failures(" + maxFailures + "): \n");
        sb.append("-----\n");
        sb.append("Task ID:\n  " + task + "\n\n");
        if (taskUrl != null) {
          sb.append("URL:\n  " + taskUrl + "\n");
        }
        for (        ErrorAndSolution e : errors) {
          sb.append("\n");
          sb.append("Possible error:\n  " + e.getError() + "\n\n");
          sb.append("Solution:\n  " + e.getSolution() + "\n");
        }
        sb.append("-----\n");
        sb.append("Diagnostic Messages for this Task:\n");
        String[] diagMesgs=ti.getDiagnosticMesgs();
        for (        String mesg : diagMesgs) {
          sb.append(mesg + "\n");
        }
        console.printError(sb.toString());
      }
      break;
    }
  }
  return;
}
