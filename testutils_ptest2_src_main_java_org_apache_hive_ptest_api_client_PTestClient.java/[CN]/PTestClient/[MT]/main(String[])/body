{
  CommandLineParser parser=new GnuParser();
  Options options=new Options();
  options.addOption(HELP_SHORT,HELP_LONG,false,"Display help text and exit");
  options.addOption(null,ENDPOINT,true,"Service to use. E.g. http://localhost/ (Required)");
  options.addOption(null,COMMAND,true,"Command: [testStart, testStop, testTailLog, testList] (Required)");
  options.addOption(null,PASSWORD,true,"Password for service. Any committer should know this otherwise as private@. (Required)");
  options.addOption(null,PROFILE,true,"Test profile such as trunk-mr1 or trunk-mr2 (Required for testStart)");
  options.addOption(null,PATCH,true,"URI to patch, must start with http(s):// (Optional for testStart)");
  options.addOption(null,JIRA,true,"JIRA to post the results to e.g.: HIVE-XXXX");
  options.addOption(null,TEST_HANDLE,true,"Server supplied test handle. (Required for testStop and testTailLog)");
  options.addOption(null,OUTPUT_DIR,true,"Directory to download and save test-results.tar.gz to. (Optional for testStart)");
  options.addOption(null,CLEAR_LIBRARY_CACHE,false,"Before starting the test, delete the ivy and maven directories (Optional for testStart)");
  CommandLine commandLine=parser.parse(options,args);
  if (commandLine.hasOption(HELP_SHORT)) {
    new HelpFormatter().printHelp(PTestClient.class.getName(),options,true);
    System.exit(0);
  }
  assertRequired(commandLine,new String[]{COMMAND,PASSWORD,ENDPOINT});
  PTestClient client=new PTestClient(commandLine.getOptionValue(ENDPOINT),commandLine.getOptionValue(PASSWORD));
  String command=commandLine.getOptionValue(COMMAND);
  boolean result;
  if ("testStart".equalsIgnoreCase(command)) {
    assertRequired(commandLine,new String[]{PROFILE,TEST_HANDLE});
    result=client.testStart(commandLine.getOptionValue(PROFILE),commandLine.getOptionValue(TEST_HANDLE),commandLine.getOptionValue(JIRA),commandLine.getOptionValue(PATCH),commandLine.getOptionValue(OUTPUT_DIR),commandLine.hasOption(CLEAR_LIBRARY_CACHE));
  }
 else   if ("testTailLog".equalsIgnoreCase(command)) {
    result=client.testTailLog(commandLine.getOptionValue(TEST_HANDLE));
  }
 else   if ("testList".equalsIgnoreCase(command)) {
    result=client.testList();
  }
 else {
    throw new IllegalArgumentException("Unknown " + COMMAND + ": "+ command);
  }
  if (result) {
    System.exit(0);
  }
 else {
    System.exit(1);
  }
}
