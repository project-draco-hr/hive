{
  int bitsLeft=0;
  int current=0;
switch (bitSize) {
case 1:
    unrolledUnPack1(buffer,offset,len,input);
  return;
case 2:
unrolledUnPack2(buffer,offset,len,input);
return;
case 4:
unrolledUnPack4(buffer,offset,len,input);
return;
case 8:
unrolledUnPack8(buffer,offset,len,input);
return;
case 16:
unrolledUnPack16(buffer,offset,len,input);
return;
case 24:
unrolledUnPack24(buffer,offset,len,input);
return;
case 32:
unrolledUnPack32(buffer,offset,len,input);
return;
case 40:
unrolledUnPack40(buffer,offset,len,input);
return;
case 48:
unrolledUnPack48(buffer,offset,len,input);
return;
case 56:
unrolledUnPack56(buffer,offset,len,input);
return;
case 64:
unrolledUnPack64(buffer,offset,len,input);
return;
default :
break;
}
for (int i=offset; i < (offset + len); i++) {
long result=0;
int bitsLeftToRead=bitSize;
while (bitsLeftToRead > bitsLeft) {
result<<=bitsLeft;
result|=current & ((1 << bitsLeft) - 1);
bitsLeftToRead-=bitsLeft;
current=input.read();
bitsLeft=8;
}
if (bitsLeftToRead > 0) {
result<<=bitsLeftToRead;
bitsLeft-=bitsLeftToRead;
result|=(current >> bitsLeft) & ((1 << bitsLeftToRead) - 1);
}
buffer[i]=result;
}
}
