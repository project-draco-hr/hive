{
  HistoryLogger.logFragmentStart(request.getApplicationIdString(),request.getContainerIdString(),localAddress.get().getHostName(),null,null,-1,-1);
  LOG.info("Queuing container for execution: " + request);
  NDC.push(request.getContainerIdString());
  try {
    Map<String,String> env=new HashMap<String,String>();
    env.putAll(localEnv);
    env.put(ApplicationConstants.Environment.USER.name(),request.getUser());
    String[] localDirs=new String[localDirsBase.length];
    for (int i=0; i < localDirsBase.length; i++) {
      localDirs[i]=createAppSpecificLocalDir(localDirsBase[i],request.getApplicationIdString(),request.getUser());
      localFs.mkdirs(new Path(localDirs[i]));
    }
    LOG.info("DEBUG: Dirs are: " + Arrays.toString(localDirs));
    String workingDir=localDirs[0];
    Credentials credentials=new Credentials();
    DataInputBuffer dib=new DataInputBuffer();
    byte[] tokenBytes=request.getCredentialsBinary().toByteArray();
    dib.reset(tokenBytes,tokenBytes.length);
    credentials.readTokenStorageStream(dib);
    Token<JobTokenIdentifier> jobToken=TokenCache.getSessionToken(credentials);
    LOG.info("DEBUG: Registering request with the ShuffleHandler");
    ShuffleHandler.get().registerApplication(request.getApplicationIdString(),jobToken,request.getUser());
    ContainerRunnerCallable callable=new ContainerRunnerCallable(request,new Configuration(getConfig()),new ExecutionContextImpl(localAddress.get().getHostName()),env,localDirs,workingDir,credentials,memoryPerExecutor,localAddress.get().getHostName());
    ListenableFuture<ContainerExecutionResult> future=executorService.submit(callable);
    Futures.addCallback(future,new ContainerRunnerCallback(request,callable));
    metrics.incrExecutorTotalRequestsHandled();
    metrics.incrExecutorNumQueuedRequests();
  }
  finally {
    NDC.pop();
  }
}
