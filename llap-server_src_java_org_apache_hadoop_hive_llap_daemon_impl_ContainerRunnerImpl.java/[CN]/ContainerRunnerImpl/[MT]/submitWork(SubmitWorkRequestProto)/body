{
  LlapTokenInfo tokenInfo=LlapTokenChecker.getTokenInfo(clusterId);
  SignableVertexSpec vertex=extractVertexSpec(request,tokenInfo);
  TezEvent initialEvent=extractInitialEvent(request,tokenInfo);
  if (LOG.isInfoEnabled()) {
    LOG.info("Queueing container for execution: " + stringifySubmitRequest(request,vertex));
  }
  QueryIdentifierProto qIdProto=vertex.getQueryIdentifier();
  TezTaskAttemptID attemptId=Converters.createTaskAttemptId(vertex.getQueryIdentifier(),vertex.getVertexIndex(),request.getFragmentNumber(),request.getAttemptNumber());
  String fragmentIdString=attemptId.toString();
  HistoryLogger.logFragmentStart(qIdProto.getApplicationIdString(),request.getContainerIdString(),localAddress.get().getHostName(),vertex.getDagName(),qIdProto.getDagIndex(),vertex.getVertexName(),request.getFragmentNumber(),request.getAttemptNumber());
  final String dagId=attemptId.getTaskID().getVertexID().getDAGId().toString();
  final String queryId=vertex.getHiveQueryId();
  final String fragId=LlapTezUtils.stripAttemptPrefix(fragmentIdString);
  MDC.put("dagId",dagId);
  MDC.put("queryId",queryId);
  MDC.put("fragmentId",fragId);
  NDC.push(dagId);
  NDC.push(queryId);
  NDC.push(fragId);
  Scheduler.SubmissionState submissionState;
  SubmitWorkResponseProto.Builder responseBuilder=SubmitWorkResponseProto.newBuilder();
  try {
    Map<String,String> env=new HashMap<>();
    env.putAll(localEnv);
    env.put(ApplicationConstants.Environment.USER.name(),vertex.getUser());
    TezTaskAttemptID taskAttemptId=TezTaskAttemptID.fromString(fragmentIdString);
    int dagIdentifier=taskAttemptId.getTaskID().getVertexID().getDAGId().getId();
    QueryIdentifier queryIdentifier=new QueryIdentifier(qIdProto.getApplicationIdString(),dagIdentifier);
    Credentials credentials=new Credentials();
    DataInputBuffer dib=new DataInputBuffer();
    byte[] tokenBytes=request.getCredentialsBinary().toByteArray();
    dib.reset(tokenBytes,tokenBytes.length);
    credentials.readTokenStorageStream(dib);
    Token<JobTokenIdentifier> jobToken=TokenCache.getSessionToken(credentials);
    QueryFragmentInfo fragmentInfo=queryTracker.registerFragment(queryIdentifier,qIdProto.getApplicationIdString(),dagId,vertex.getDagName(),vertex.getHiveQueryId(),dagIdentifier,vertex.getVertexName(),request.getFragmentNumber(),request.getAttemptNumber(),vertex.getUser(),vertex,jobToken,fragmentIdString,tokenInfo);
    String[] localDirs=fragmentInfo.getLocalDirs();
    Preconditions.checkNotNull(localDirs);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Dirs are: " + Arrays.toString(localDirs));
    }
    Configuration callableConf=new Configuration(getConfig());
    UserGroupInformation taskUgi=fsUgiFactory == null ? null : fsUgiFactory.createUgi();
    TaskRunnerCallable callable=new TaskRunnerCallable(request,fragmentInfo,callableConf,new ExecutionContextImpl(localAddress.get().getHostName()),env,credentials,memoryPerExecutor,amReporter,confParams,metrics,killedTaskHandler,this,tezHadoopShim,attemptId,vertex,initialEvent,taskUgi);
    submissionState=executorService.schedule(callable);
    if (LOG.isInfoEnabled()) {
      LOG.info("SubmissionState for {} : {} ",fragmentIdString,submissionState);
    }
    if (submissionState.equals(Scheduler.SubmissionState.REJECTED)) {
      fragmentComplete(fragmentInfo);
      return responseBuilder.setSubmissionState(SubmissionStateProto.valueOf(submissionState.name())).build();
    }
    if (metrics != null) {
      metrics.incrExecutorTotalRequestsHandled();
    }
  }
  finally {
    MDC.clear();
    NDC.clear();
  }
  responseBuilder.setSubmissionState(SubmissionStateProto.valueOf(submissionState.name()));
  return responseBuilder.build();
}
