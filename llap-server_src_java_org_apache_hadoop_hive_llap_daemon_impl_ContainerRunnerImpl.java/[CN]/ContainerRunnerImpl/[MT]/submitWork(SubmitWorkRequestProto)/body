{
  HistoryLogger.logFragmentStart(request.getApplicationIdString(),request.getContainerIdString(),localAddress.get().getHostName(),request.getFragmentSpec().getDagName(),request.getFragmentSpec().getVertexName(),request.getFragmentSpec().getFragmentNumber(),request.getFragmentSpec().getAttemptNumber());
  LOG.info("Queueing container for execution: " + stringifyRequest(request));
  String ndcContextString=request.getContainerIdString() + "_" + request.getFragmentSpec().getDagName()+ "_"+ request.getFragmentSpec().getVertexName()+ "_"+ request.getFragmentSpec().getFragmentNumber()+ "_"+ request.getFragmentSpec().getAttemptNumber();
  NDC.push(ndcContextString);
  try {
    Map<String,String> env=new HashMap<String,String>();
    env.putAll(localEnv);
    env.put(ApplicationConstants.Environment.USER.name(),request.getUser());
    String[] localDirs=new String[localDirsBase.length];
    for (int i=0; i < localDirsBase.length; i++) {
      localDirs[i]=createAppSpecificLocalDir(localDirsBase[i],request.getApplicationIdString(),request.getUser());
      localFs.mkdirs(new Path(localDirs[i]));
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Dirs are: " + Arrays.toString(localDirs));
    }
    Credentials credentials=new Credentials();
    DataInputBuffer dib=new DataInputBuffer();
    byte[] tokenBytes=request.getCredentialsBinary().toByteArray();
    dib.reset(tokenBytes,tokenBytes.length);
    credentials.readTokenStorageStream(dib);
    Token<JobTokenIdentifier> jobToken=TokenCache.getSessionToken(credentials);
    LOG.info("DEBUG: Registering request with the ShuffleHandler");
    ShuffleHandler.get().registerApplication(request.getApplicationIdString(),jobToken,request.getUser(),localDirs);
    TaskRunnerCallable callable=new TaskRunnerCallable(request,new Configuration(getConfig()),new ExecutionContextImpl(localAddress.get().getHostName()),env,localDirs,credentials,memoryPerExecutor,amReporter,confParams);
    ListenableFuture<ContainerExecutionResult> future=executorService.submit(callable);
    Futures.addCallback(future,new TaskRunnerCallback(request,callable));
    metrics.incrExecutorTotalRequestsHandled();
    metrics.incrExecutorNumQueuedRequests();
  }
  finally {
    NDC.pop();
  }
}
