{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map524=iprot.readMapBegin();
          struct.metadata=new HashMap<Long,MetadataPpdResult>(2 * _map524.size);
          long _key525;
          MetadataPpdResult _val526;
          for (int _i527=0; _i527 < _map524.size; ++_i527) {
            _key525=iprot.readI64();
            _val526=new MetadataPpdResult();
            _val526.read(iprot);
            struct.metadata.put(_key525,_val526);
          }
          iprot.readMapEnd();
        }
        struct.setMetadataIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
    struct.isSupported=iprot.readBool();
    struct.setIsSupportedIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
  org.apache.thrift.protocol.TList _list528=iprot.readListBegin();
  struct.unknownFileIds=new ArrayList<Long>(_list528.size);
  long _elem529;
  for (int _i530=0; _i530 < _list528.size; ++_i530) {
    _elem529=iprot.readI64();
    struct.unknownFileIds.add(_elem529);
  }
  iprot.readListEnd();
}
struct.setUnknownFileIdsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
