{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map564=iprot.readMapBegin();
          struct.metadata=new HashMap<Long,MetadataPpdResult>(2 * _map564.size);
          long _key565;
          MetadataPpdResult _val566;
          for (int _i567=0; _i567 < _map564.size; ++_i567) {
            _key565=iprot.readI64();
            _val566=new MetadataPpdResult();
            _val566.read(iprot);
            struct.metadata.put(_key565,_val566);
          }
          iprot.readMapEnd();
        }
        struct.setMetadataIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
    struct.isSupported=iprot.readBool();
    struct.setIsSupportedIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
