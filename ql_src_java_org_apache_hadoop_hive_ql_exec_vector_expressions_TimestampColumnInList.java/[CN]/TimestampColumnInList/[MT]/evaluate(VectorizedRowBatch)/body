{
  if (childExpressions != null) {
    super.evaluateChildren(batch);
  }
  if (inSet == null) {
    inSet=new HashSet<Timestamp>(inListValues.length);
    for (    Timestamp val : inListValues) {
      inSet.add(val);
    }
  }
  TimestampColumnVector inputColVector=(TimestampColumnVector)batch.cols[inputCol];
  LongColumnVector outputColVector=(LongColumnVector)batch.cols[outputColumn];
  int[] sel=batch.selected;
  boolean[] nullPos=inputColVector.isNull;
  boolean[] outNulls=outputColVector.isNull;
  int n=batch.size;
  long[] outputVector=outputColVector.vector;
  if (n == 0) {
    return;
  }
  outputColVector.isRepeating=false;
  outputColVector.noNulls=inputColVector.noNulls;
  if (inputColVector.noNulls) {
    if (inputColVector.isRepeating) {
      outputVector[0]=inSet.contains(inputColVector.asScratchTimestamp(0)) ? 1 : 0;
      outputColVector.isRepeating=true;
    }
 else     if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        outputVector[i]=inSet.contains(inputColVector.asScratchTimestamp(i)) ? 1 : 0;
      }
    }
 else {
      for (int i=0; i != n; i++) {
        outputVector[i]=inSet.contains(inputColVector.asScratchTimestamp(i)) ? 1 : 0;
      }
    }
  }
 else {
    if (inputColVector.isRepeating) {
      if (!nullPos[0]) {
        outputVector[0]=inSet.contains(inputColVector.asScratchTimestamp(0)) ? 1 : 0;
        outNulls[0]=false;
      }
 else {
        outNulls[0]=true;
      }
      outputColVector.isRepeating=true;
    }
 else     if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        outNulls[i]=nullPos[i];
        if (!nullPos[i]) {
          outputVector[i]=inSet.contains(inputColVector.asScratchTimestamp(i)) ? 1 : 0;
        }
      }
    }
 else {
      System.arraycopy(nullPos,0,outNulls,0,n);
      for (int i=0; i != n; i++) {
        if (!nullPos[i]) {
          outputVector[i]=inSet.contains(inputColVector.asScratchTimestamp(i)) ? 1 : 0;
        }
      }
    }
  }
}
