{
  if (!doesHadoopPasswordAPIExist()) {
    System.out.println("Skipping Password API test" + " because this version of hadoop-2 does not support the password API.");
    return;
  }
  String credName="my.password";
  String credName2="my.password2";
  String credName3="my.password3";
  String hiveConfPassword="conf value";
  String credPassword="cred value";
  String confOnlyPassword="abcdefg";
  String credOnlyPassword="12345";
  Configuration conf=new Configuration();
  conf.set(credName,hiveConfPassword);
  conf.set(credName2,confOnlyPassword);
  assertEquals(hiveConfPassword,conf.get(credName));
  assertEquals(confOnlyPassword,conf.get(credName2));
  assertNull("credName3 should not exist in HiveConf",conf.get(credName3));
  conf.set("hadoop.security.credential.clear-text-fallback","true");
  conf.set("hadoop.security.credential.provider.path","jceks://file/" + tmpDir + "/test.jks");
  Class credentialProviderClass=Class.forName("org.apache.hadoop.security.alias.CredentialProvider");
  Class credentialProviderFactoryClass=Class.forName("org.apache.hadoop.security.alias.CredentialProviderFactory");
  Object provider=((List)invoke(credentialProviderFactoryClass,null,"getProviders",conf)).get(0);
  invoke(credentialProviderClass,provider,"createCredentialEntry",credName,credPassword.toCharArray());
  invoke(credentialProviderClass,provider,"createCredentialEntry",credName3,credOnlyPassword.toCharArray());
  invoke(credentialProviderClass,provider,"flush");
  assertEquals("getPassword() should use match value in credential provider",credPassword,ShimLoader.getHadoopShims().getPassword(conf,credName));
  assertEquals("getPassword() should match value from conf",confOnlyPassword,ShimLoader.getHadoopShims().getPassword(conf,credName2));
  assertEquals("getPassword() should use credential provider if conf has no value",credOnlyPassword,ShimLoader.getHadoopShims().getPassword(conf,credName3));
  assertNull("null if neither cred provider or conf have entry",ShimLoader.getHadoopShims().getPassword(conf,"nonexistentkey"));
}
