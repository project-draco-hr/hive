{
  String fileInURL="/jobfailures.jsp?jobid=" + job + "&kind=all&cause=failed";
  URL jobURL=new URL(jobURLInString);
  URL url=new URL(jobURL.getProtocol(),jobURL.getHost(),jobURL.getPort(),fileInURL);
  List<String>[] attemptLogStrings=getMatches(url,new Pattern[]{attemptDetailPattern});
  List<String> failedTaskStrings=new ArrayList<String>();
  for (  String attempt : attemptLogStrings[0]) {
    if (!failedTaskStrings.contains(attempt)) {
      failedTaskStrings.add(attempt);
    }
  }
  List<AttemptInfo> results=new ArrayList<AttemptInfo>();
  for (  String taskString : failedTaskStrings) {
    URL taskDetailsURL=new URL(jobURL.getProtocol(),jobURL.getHost(),jobURL.getPort(),"/" + taskString);
    List<String>[] taskAttemptURLAndTimestamp=getMatches(taskDetailsURL,new Pattern[]{attemptLogPattern,attemptStartTimePattern,attemptEndTimePattern});
    for (int i=0; i < taskAttemptURLAndTimestamp[0].size(); i++) {
      String attemptLogString=taskAttemptURLAndTimestamp[0].get(i);
      AttemptInfo attempt=new AttemptInfo();
      attempt.baseUrl=new URL(attemptLogString);
      attempt.startTime=taskAttemptURLAndTimestamp[1].get(i);
      attempt.endTime=taskAttemptURLAndTimestamp[2].get(i);
      Matcher matcher=attemptIDPattern.matcher(attemptLogString);
      if (matcher.find()) {
        attempt.id=matcher.group(1);
      }
      if (attempt.id.contains("_r_")) {
        attempt.type="reduce";
      }
      attempt.status=AttemptInfo.AttemptStatus.COMPLETED.FAILED;
      results.add(attempt);
    }
  }
  return results;
}
