{
  List<Object[]> parameters=new ArrayList<Object[]>();
  final Configuration conf=new Configuration();
  for (  StorageFormatDescriptor descriptor : ServiceLoader.load(StorageFormatDescriptor.class)) {
    String serdeClass=descriptor.getSerde();
    if (serdeClass == null) {
      if (descriptor instanceof RCFileStorageFormatDescriptor) {
        serdeClass=HiveConf.getVar(conf,HiveConf.ConfVars.HIVEDEFAULTRCFILESERDE);
      }
 else {
        serdeClass=HiveConf.getVar(conf,HiveConf.ConfVars.HIVEDEFAULTSERDE);
      }
    }
    String[] names=new String[descriptor.getNames().size()];
    names=descriptor.getNames().toArray(names);
    Object[] arguments=createTestArguments(names[0],serdeClass,descriptor.getInputFormat(),descriptor.getOutputFormat());
    parameters.add(arguments);
  }
  for (int i=0; i < ADDITIONAL_STORAGE_FORMATS.length; i++) {
    String serdeClass=(String)ADDITIONAL_STORAGE_FORMATS[i][1];
    String name=(String)ADDITIONAL_STORAGE_FORMATS[i][0];
    String inputFormatClass=(String)ADDITIONAL_STORAGE_FORMATS[i][2];
    String outputFormatClass=(String)ADDITIONAL_STORAGE_FORMATS[i][3];
    assertTrue("InputFormat for storage format not set",inputFormatClass != null);
    assertTrue("OutputFormat for storage format not set",outputFormatClass != null);
    Object[] arguments=createTestArguments(name,serdeClass,inputFormatClass,outputFormatClass);
    parameters.add(arguments);
  }
  return parameters;
}
