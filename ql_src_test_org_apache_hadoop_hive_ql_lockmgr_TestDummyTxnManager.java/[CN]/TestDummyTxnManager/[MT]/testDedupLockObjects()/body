{
  List<HiveLockObj> lockObjs=new ArrayList<HiveLockObj>();
  String path1="path1";
  String path2="path2";
  HiveLockObjectData lockData1=new HiveLockObjectData("query1","1","IMPLICIT","drop table table1");
  HiveLockObjectData lockData2=new HiveLockObjectData("query1","1","IMPLICIT","drop table table1");
  lockObjs.add(new HiveLockObj(new HiveLockObject(path1,lockData1),HiveLockMode.SHARED));
  String name1=lockObjs.get(lockObjs.size() - 1).getName();
  lockObjs.add(new HiveLockObj(new HiveLockObject(path1,lockData1),HiveLockMode.EXCLUSIVE));
  lockObjs.add(new HiveLockObj(new HiveLockObject(path2,lockData2),HiveLockMode.SHARED));
  String name2=lockObjs.get(lockObjs.size() - 1).getName();
  lockObjs.add(new HiveLockObj(new HiveLockObject(path2,lockData2),HiveLockMode.SHARED));
  lockObjs.add(new HiveLockObj(new HiveLockObject(path2,lockData2),HiveLockMode.SHARED));
  DummyTxnManager.dedupLockObjects(lockObjs);
  Assert.assertEquals("Locks should be deduped",2,lockObjs.size());
  Comparator<HiveLockObj> cmp=new Comparator<HiveLockObj>(){
    public int compare(    HiveLockObj lock1,    HiveLockObj lock2){
      return lock1.getName().compareTo(lock2.getName());
    }
  }
;
  Collections.sort(lockObjs,cmp);
  HiveLockObj lockObj=lockObjs.get(0);
  Assert.assertEquals(name1,lockObj.getName());
  Assert.assertEquals(HiveLockMode.EXCLUSIVE,lockObj.getMode());
  lockObj=lockObjs.get(1);
  Assert.assertEquals(name2,lockObj.getName());
  Assert.assertEquals(HiveLockMode.SHARED,lockObj.getMode());
}
