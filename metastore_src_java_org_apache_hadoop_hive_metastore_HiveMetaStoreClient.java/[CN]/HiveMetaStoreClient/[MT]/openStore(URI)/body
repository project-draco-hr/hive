{
  isConnected=false;
  TTransportException tte=null;
  HadoopShims shim=ShimLoader.getHadoopShims();
  boolean useSasl=conf.getBoolVar(ConfVars.METASTORE_USE_THRIFT_SASL);
  transport=new TSocket(store.getHost(),store.getPort());
  ((TSocket)transport).setTimeout(1000 * conf.getIntVar(ConfVars.METASTORE_CLIENT_SOCKET_TIMEOUT));
  if (useSasl) {
    try {
      HadoopThriftAuthBridge.Client authBridge=ShimLoader.getHadoopThriftAuthBridge().createClient();
      String tokenSig=conf.get("hive.metastore.token.signature");
      tokenStrForm=shim.getTokenStrForm(tokenSig);
      if (tokenStrForm != null) {
        transport=authBridge.createClientTransport(null,store.getHost(),"DIGEST",tokenStrForm,transport);
      }
 else {
        String principalConfig=conf.getVar(HiveConf.ConfVars.METASTORE_KERBEROS_PRINCIPAL);
        transport=authBridge.createClientTransport(principalConfig,store.getHost(),"KERBEROS",null,transport);
      }
    }
 catch (    IOException ioe) {
      LOG.error("Couldn't create client transport",ioe);
      throw new MetaException(ioe.toString());
    }
  }
  client=new ThriftHiveMetastore.Client(new TBinaryProtocol(transport));
  for (int attempt=0; !isConnected && attempt < retries; ++attempt) {
    if (attempt > 0 && retryDelaySeconds > 0) {
      try {
        LOG.info("Waiting " + retryDelaySeconds + " seconds before next connection attempt.");
        Thread.sleep(retryDelaySeconds * 1000);
      }
 catch (      InterruptedException ignore) {
      }
    }
    try {
      transport.open();
      isConnected=true;
    }
 catch (    TTransportException e) {
      tte=e;
      if (LOG.isDebugEnabled()) {
        LOG.warn("Failed to connect to the MetaStore Server...",e);
      }
 else {
        LOG.warn("Failed to connect to the MetaStore Server...");
      }
    }
  }
  if (!isConnected) {
    throw new MetaException("Could not connect to the MetaStore server! Caused by: " + StringUtils.stringifyException(tte));
  }
  if (!useSasl && conf.getBoolVar(ConfVars.METASTORE_EXECUTE_SET_UGI)) {
    try {
      UserGroupInformation ugi=shim.getUGIForConf(conf);
      client.set_ugi(ugi.getUserName(),Arrays.asList(ugi.getGroupNames()));
    }
 catch (    LoginException e) {
      LOG.warn("Failed to do login. set_ugi() is not successful, Continuing without it.",e);
    }
catch (    IOException e) {
      LOG.warn("Failed to find ugi of client set_ugi() is not successful, " + "Continuing without it.",e);
    }
catch (    TException e) {
      LOG.warn("set_ugi() not successful, Likely cause: new client talking to old server. " + "Continuing without it.",e);
    }
  }
}
