{
  isConnected=false;
  TTransportException tte=null;
  HadoopShims shim=ShimLoader.getHadoopShims();
  boolean useSasl=conf.getBoolVar(ConfVars.METASTORE_USE_THRIFT_SASL);
  boolean useFramedTransport=conf.getBoolVar(ConfVars.METASTORE_USE_THRIFT_FRAMED_TRANSPORT);
  int clientSocketTimeout=conf.getIntVar(ConfVars.METASTORE_CLIENT_SOCKET_TIMEOUT);
  for (int attempt=0; !isConnected && attempt < retries; ++attempt) {
    for (    URI store : metastoreUris) {
      LOG.info("Trying to connect to metastore with URI " + store);
      try {
        transport=new TSocket(store.getHost(),store.getPort(),1000 * clientSocketTimeout);
        if (useSasl) {
          try {
            HadoopThriftAuthBridge.Client authBridge=ShimLoader.getHadoopThriftAuthBridge().createClient();
            String tokenSig=conf.get("hive.metastore.token.signature");
            tokenStrForm=shim.getTokenStrForm(tokenSig);
            if (tokenStrForm != null) {
              transport=authBridge.createClientTransport(null,store.getHost(),"DIGEST",tokenStrForm,transport,MetaStoreUtils.getMetaStoreSaslProperties(conf));
            }
 else {
              String principalConfig=conf.getVar(HiveConf.ConfVars.METASTORE_KERBEROS_PRINCIPAL);
              transport=authBridge.createClientTransport(principalConfig,store.getHost(),"KERBEROS",null,transport,MetaStoreUtils.getMetaStoreSaslProperties(conf));
            }
          }
 catch (          IOException ioe) {
            LOG.error("Couldn't create client transport",ioe);
            throw new MetaException(ioe.toString());
          }
        }
 else         if (useFramedTransport) {
          transport=new TFramedTransport(transport);
        }
        client=new ThriftHiveMetastore.Client(new TBinaryProtocol(transport));
        try {
          transport.open();
          isConnected=true;
        }
 catch (        TTransportException e) {
          tte=e;
          if (LOG.isDebugEnabled()) {
            LOG.warn("Failed to connect to the MetaStore Server...",e);
          }
 else {
            LOG.warn("Failed to connect to the MetaStore Server...");
          }
        }
        if (isConnected && !useSasl && conf.getBoolVar(ConfVars.METASTORE_EXECUTE_SET_UGI)) {
          try {
            UserGroupInformation ugi=shim.getUGIForConf(conf);
            client.set_ugi(ugi.getUserName(),Arrays.asList(ugi.getGroupNames()));
          }
 catch (          LoginException e) {
            LOG.warn("Failed to do login. set_ugi() is not successful, " + "Continuing without it.",e);
          }
catch (          IOException e) {
            LOG.warn("Failed to find ugi of client set_ugi() is not successful, " + "Continuing without it.",e);
          }
catch (          TException e) {
            LOG.warn("set_ugi() not successful, Likely cause: new client talking to old server. " + "Continuing without it.",e);
          }
        }
      }
 catch (      MetaException e) {
        LOG.error("Unable to connect to metastore with URI " + store + " in attempt "+ attempt,e);
      }
      if (isConnected) {
        break;
      }
    }
    if (retryDelaySeconds > 0) {
      try {
        LOG.info("Waiting " + retryDelaySeconds + " seconds before next connection attempt.");
        Thread.sleep(retryDelaySeconds * 1000);
      }
 catch (      InterruptedException ignore) {
      }
    }
  }
  if (!isConnected) {
    throw new MetaException("Could not connect to meta store using any of the URIs provided." + " Most recent failure: " + StringUtils.stringifyException(tte));
  }
  LOG.info("Connected to metastore.");
}
