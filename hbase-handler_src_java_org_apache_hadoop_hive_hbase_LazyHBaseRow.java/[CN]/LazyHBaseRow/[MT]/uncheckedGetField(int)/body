{
  LazyObjectBase[] fields=getFields();
  boolean[] fieldsInited=getFieldInited();
  if (!fieldsInited[fieldID]) {
    fieldsInited[fieldID]=true;
    ColumnMapping colMap=columnsMapping[fieldID];
    if (!colMap.hbaseRowKey && !colMap.hbaseTimestamp && colMap.qualifierName == null) {
      ((LazyHBaseCellMap)fields[fieldID]).init(result,colMap.familyNameBytes,colMap.binaryStorage,colMap.qualifierPrefixBytes,colMap.isDoPrefixCut());
      return fields[fieldID].getObject();
    }
    if (colMap.hbaseTimestamp) {
      long timestamp=result.rawCells()[0].getTimestamp();
      for (int i=1; i < result.rawCells().length; i++) {
        timestamp=Math.max(timestamp,result.rawCells()[i].getTimestamp());
      }
      LazyObjectBase lz=fields[fieldID];
      if (lz instanceof LazyTimestamp) {
        ((LazyTimestamp)lz).getWritableObject().setTime(timestamp);
      }
 else {
        ((LazyLong)lz).getWritableObject().set(timestamp);
      }
      return lz.getObject();
    }
    byte[] bytes;
    if (colMap.hbaseRowKey) {
      bytes=result.getRow();
    }
 else {
      bytes=result.getValue(colMap.familyNameBytes,colMap.qualifierNameBytes);
    }
    if (bytes == null || isNull(oi.getNullSequence(),bytes,0,bytes.length)) {
      fields[fieldID].setNull();
    }
 else {
      ByteArrayRef ref=new ByteArrayRef();
      ref.setData(bytes);
      fields[fieldID].init(ref,0,bytes.length);
    }
  }
  return fields[fieldID].getObject();
}
