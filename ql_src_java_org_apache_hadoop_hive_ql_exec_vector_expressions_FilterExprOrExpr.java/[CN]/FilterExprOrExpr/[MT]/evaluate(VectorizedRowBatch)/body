{
  int n=batch.size;
  if (n <= 0) {
    return;
  }
  VectorExpression childExpr1=this.childExpressions[0];
  VectorExpression childExpr2=this.childExpressions[1];
  boolean prevSelectInUse=batch.selectedInUse;
  int[] sel=batch.selected;
  if (batch.selectedInUse) {
    System.arraycopy(sel,0,initialSelected,0,n);
  }
 else {
    for (int i=0; i < n; i++) {
      initialSelected[i]=i;
      sel[i]=i;
    }
    batch.selectedInUse=true;
  }
  childExpr1.evaluate(batch);
  int sizeAfterFirstChild=batch.size;
  int[] selectedAfterFirstChild=batch.selected;
  for (int j=0; j < n; j++) {
    tmp[initialSelected[j]]=0;
  }
  for (int j=0; j < batch.size; j++) {
    tmp[selectedAfterFirstChild[j]]=1;
  }
  int unselectedSize=0;
  for (int j=0; j < n; j++) {
    int i=initialSelected[j];
    if (tmp[i] == 0) {
      unselected[unselectedSize++]=i;
    }
  }
  batch.selected=unselected;
  batch.size=unselectedSize;
  childExpr2.evaluate(batch);
  int newSize=batch.size + sizeAfterFirstChild;
  for (int i=0; i < batch.size; i++) {
    tmp[batch.selected[i]]=1;
  }
  int k=0;
  for (int j=0; j < n; j++) {
    int i=initialSelected[j];
    if (tmp[i] == 1) {
      batch.selected[k++]=i;
    }
  }
  batch.size=newSize;
  if (newSize == n) {
    batch.selectedInUse=prevSelectInUse;
  }
  unselected=selectedAfterFirstChild;
}
