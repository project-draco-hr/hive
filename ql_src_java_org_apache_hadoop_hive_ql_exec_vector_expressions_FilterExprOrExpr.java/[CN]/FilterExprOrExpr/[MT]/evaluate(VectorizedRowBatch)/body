{
  int n=batch.size;
  if (n <= 0) {
    return;
  }
  boolean prevSelectInUse=batch.selectedInUse;
  int[] sel=batch.selected;
  if (batch.selectedInUse) {
    for (int i=0; i < n; i++) {
      tmpSelect1[i]=sel[i];
    }
  }
 else {
    for (int i=0; i < n; i++) {
      tmpSelect1[i]=i;
      sel[i]=i;
    }
    batch.selectedInUse=true;
  }
  childExpr1.evaluate(batch);
  for (int i=0; i < tmp.length; i++) {
    tmp[i]=0;
  }
  for (int j=0; j < batch.size; j++) {
    int i=sel[j];
    tmp[i]=1;
  }
  int unselectedSize=0;
  for (int j=0; j < n; j++) {
    int i=tmpSelect1[j];
    if (tmp[i] == 0) {
      unselected[unselectedSize++]=i;
    }
  }
  int currentSize=batch.size;
  int[] currentSelected=batch.selected;
  batch.selected=unselected;
  batch.size=unselectedSize;
  childExpr2.evaluate(batch);
  int newSize=batch.size + currentSize;
  for (int i=batch.size; i < newSize; i++) {
    batch.selected[i]=currentSelected[i - batch.size];
  }
  batch.size=newSize;
  if (newSize == n) {
    batch.selectedInUse=prevSelectInUse;
  }
}
