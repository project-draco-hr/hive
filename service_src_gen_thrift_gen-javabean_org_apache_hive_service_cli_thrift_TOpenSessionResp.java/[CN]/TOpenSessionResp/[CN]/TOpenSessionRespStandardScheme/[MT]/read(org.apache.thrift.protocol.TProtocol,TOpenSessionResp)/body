{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
        struct.status=new TStatus();
        struct.status.read(iprot);
        struct.setStatusIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
    struct.serverProtocolVersion=TProtocolVersion.findByValue(iprot.readI32());
    struct.setServerProtocolVersionIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.sessionHandle=new TSessionHandle();
struct.sessionHandle.read(iprot);
struct.setSessionHandleIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map144=iprot.readMapBegin();
struct.configuration=new HashMap<String,String>(2 * _map144.size);
for (int _i145=0; _i145 < _map144.size; ++_i145) {
String _key146;
String _val147;
_key146=iprot.readString();
_val147=iprot.readString();
struct.configuration.put(_key146,_val147);
}
iprot.readMapEnd();
}
struct.setConfigurationIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
