{
  String dbName="alterdb";
  String invTblName="alter-tbl";
  String tblName="altertbl";
  try {
    client.dropTable(dbName,tblName);
    silentDropDatabase(dbName);
    Database db=new Database();
    db.setName(dbName);
    client.createDatabase(db);
    ArrayList<FieldSchema> invCols=new ArrayList<FieldSchema>(2);
    invCols.add(new FieldSchema("n-ame",serdeConstants.STRING_TYPE_NAME,""));
    invCols.add(new FieldSchema("in.come",serdeConstants.INT_TYPE_NAME,""));
    Table tbl=new Table();
    tbl.setDbName(dbName);
    tbl.setTableName(invTblName);
    StorageDescriptor sd=new StorageDescriptor();
    tbl.setSd(sd);
    sd.setCols(invCols);
    sd.setCompressed(false);
    sd.setNumBuckets(1);
    sd.setParameters(new HashMap<String,String>());
    sd.getParameters().put("test_param_1","Use this for comments etc");
    sd.setBucketCols(new ArrayList<String>(2));
    sd.getBucketCols().add("name");
    sd.setSerdeInfo(new SerDeInfo());
    sd.getSerdeInfo().setName(tbl.getTableName());
    sd.getSerdeInfo().setParameters(new HashMap<String,String>());
    sd.getSerdeInfo().getParameters().put(org.apache.hadoop.hive.serde.serdeConstants.SERIALIZATION_FORMAT,"1");
    sd.getSerdeInfo().setSerializationLib(LazySimpleSerDe.class.getName());
    sd.setInputFormat(HiveInputFormat.class.getName());
    sd.setOutputFormat(HiveOutputFormat.class.getName());
    boolean failed=false;
    try {
      client.createTable(tbl);
    }
 catch (    InvalidObjectException ex) {
      failed=true;
    }
    if (!failed) {
      assertTrue("Able to create table with invalid name: " + invTblName,false);
    }
    ArrayList<FieldSchema> invColsInvType=new ArrayList<FieldSchema>(2);
    invColsInvType.add(new FieldSchema("name",serdeConstants.STRING_TYPE_NAME,""));
    invColsInvType.add(new FieldSchema("income","xyz",""));
    tbl.setTableName(tblName);
    tbl.getSd().setCols(invColsInvType);
    boolean failChecker=false;
    try {
      client.createTable(tbl);
    }
 catch (    InvalidObjectException ex) {
      failChecker=true;
    }
    if (!failChecker) {
      assertTrue("Able to create table with invalid column type: " + invTblName,false);
    }
    ArrayList<FieldSchema> cols=new ArrayList<FieldSchema>(2);
    cols.add(new FieldSchema("name",serdeConstants.STRING_TYPE_NAME,""));
    cols.add(new FieldSchema("income",serdeConstants.INT_TYPE_NAME,""));
    tbl.setTableName(tblName);
    tbl.getSd().setCols(cols);
    client.createTable(tbl);
    if (isThriftClient) {
      tbl=client.getTable(tbl.getDbName(),tbl.getTableName());
    }
    Table tbl2=client.getTable(dbName,tblName);
    failed=false;
    try {
      tbl2.setTableName(invTblName);
      tbl2.getSd().setCols(invCols);
      client.alter_table(dbName,tblName,tbl2);
    }
 catch (    InvalidOperationException ex) {
      failed=true;
    }
    if (!failed) {
      assertTrue("Able to rename table with invalid name: " + invTblName,false);
    }
    Table tbl_pk=client.getTable(tbl.getDbName(),tbl.getTableName());
    List<FieldSchema> partitionKeys=tbl_pk.getPartitionKeys();
    for (    FieldSchema fs : partitionKeys) {
      fs.setName("invalid_to_change_name");
      fs.setComment("can_change_comment");
    }
    tbl_pk.setPartitionKeys(partitionKeys);
    try {
      client.alter_table(dbName,tblName,tbl_pk);
    }
 catch (    InvalidOperationException ex) {
      failed=true;
    }
    assertTrue("Should not have succeeded in altering partition key name",failed);
    failed=false;
    tbl_pk=client.getTable(tbl.getDbName(),tbl.getTableName());
    partitionKeys=tbl_pk.getPartitionKeys();
    for (    FieldSchema fs : partitionKeys) {
      fs.setComment("can_change_comment");
    }
    tbl_pk.setPartitionKeys(partitionKeys);
    try {
      client.alter_table(dbName,tblName,tbl_pk);
    }
 catch (    InvalidOperationException ex) {
      failed=true;
    }
    assertFalse("Should not have failed alter table partition comment",failed);
    Table newT=client.getTable(tbl.getDbName(),tbl.getTableName());
    assertEquals(partitionKeys,newT.getPartitionKeys());
    tbl2.setTableName(tblName + "_renamed");
    tbl2.getSd().setCols(cols);
    tbl2.getSd().setNumBuckets(32);
    client.alter_table(dbName,tblName,tbl2);
    Table tbl3=client.getTable(dbName,tbl2.getTableName());
    assertEquals("Alter table didn't succeed. Num buckets is different ",tbl2.getSd().getNumBuckets(),tbl3.getSd().getNumBuckets());
    FileSystem fs=FileSystem.get((new Path(tbl.getSd().getLocation())).toUri(),hiveConf);
    assertFalse("old table location still exists",fs.exists(new Path(tbl.getSd().getLocation())));
    assertTrue("data did not move to new location",fs.exists(new Path(tbl3.getSd().getLocation())));
    if (!isThriftClient) {
      assertEquals("alter table didn't move data correct location",tbl3.getSd().getLocation(),tbl2.getSd().getLocation());
    }
    tbl_pk.getSd().setCols(invColsInvType);
    failed=false;
    try {
      client.alter_table(dbName,tbl2.getTableName(),tbl_pk);
    }
 catch (    InvalidOperationException ex) {
      failed=true;
    }
    assertTrue("Should not have succeeded in altering column",failed);
  }
 catch (  Exception e) {
    System.err.println(StringUtils.stringifyException(e));
    System.err.println("testSimpleTable() failed.");
    throw e;
  }
 finally {
    silentDropDatabase(dbName);
  }
}
