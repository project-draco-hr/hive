{
  String dbName="test_db";
  String funcName="test_func";
  String className="org.apache.hadoop.hive.ql.udf.generic.GenericUDFUpper";
  String owner="test_owner";
  final int N_FUNCTIONS=5;
  PrincipalType ownerType=PrincipalType.USER;
  int createTime=(int)(System.currentTimeMillis() / 1000);
  FunctionType funcType=FunctionType.JAVA;
  try {
    cleanUp(dbName,null,null);
    createDb(dbName);
    for (int i=0; i < N_FUNCTIONS; i++) {
      createFunction(dbName,funcName + "_" + i,className,owner,ownerType,createTime,funcType,null);
    }
    Function func=client.getFunction(dbName,funcName + "_0");
    assertEquals("function db name",dbName,func.getDbName());
    assertEquals("function name",funcName + "_0",func.getFunctionName());
    assertEquals("function class name",className,func.getClassName());
    assertEquals("function owner name",owner,func.getOwnerName());
    assertEquals("function owner type",PrincipalType.USER,func.getOwnerType());
    assertEquals("function type",funcType,func.getFunctionType());
    List<ResourceUri> resources=func.getResourceUris();
    assertTrue("function resources",resources == null || resources.size() == 0);
    boolean gotException=false;
    try {
      func=client.getFunction(dbName,"nonexistent_func");
    }
 catch (    MetaException e) {
      gotException=true;
    }
    assertEquals(true,gotException);
    GetAllFunctionsResponse response=client.getAllFunctions();
    List<Function> allFunctions=response.getFunctions();
    assertEquals(N_FUNCTIONS,allFunctions.size());
    assertEquals(funcName + "_3",allFunctions.get(3).getFunctionName());
    List<String> funcs=client.getFunctions(dbName,"*_func_*");
    assertEquals(N_FUNCTIONS,funcs.size());
    assertEquals(funcName + "_0",funcs.get(0));
    funcs=client.getFunctions(dbName,"nonexistent_func");
    assertEquals(0,funcs.size());
    for (int i=0; i < N_FUNCTIONS; i++) {
      client.dropFunction(dbName,funcName + "_" + i);
    }
    funcs=client.getFunctions(dbName,funcName);
    assertEquals(0,funcs.size());
    response=client.getAllFunctions();
    allFunctions=response.getFunctions();
    assertEquals(0,allFunctions.size());
  }
 catch (  Exception e) {
    System.err.println(StringUtils.stringifyException(e));
    System.err.println("testConcurrentMetastores() failed.");
    throw e;
  }
 finally {
    silentDropDatabase(dbName);
  }
}
