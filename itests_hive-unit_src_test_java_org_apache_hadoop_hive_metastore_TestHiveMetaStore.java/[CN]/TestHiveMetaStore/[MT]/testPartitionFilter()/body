{
  String dbName="filterdb";
  String tblName="filtertbl";
  silentDropDatabase(dbName);
  Database db=new Database();
  db.setName(dbName);
  client.createDatabase(db);
  ArrayList<FieldSchema> cols=new ArrayList<FieldSchema>(2);
  cols.add(new FieldSchema("c1",serdeConstants.STRING_TYPE_NAME,""));
  cols.add(new FieldSchema("c2",serdeConstants.INT_TYPE_NAME,""));
  ArrayList<FieldSchema> partCols=new ArrayList<FieldSchema>(3);
  partCols.add(new FieldSchema("p1",serdeConstants.STRING_TYPE_NAME,""));
  partCols.add(new FieldSchema("p2",serdeConstants.STRING_TYPE_NAME,""));
  partCols.add(new FieldSchema("p3",serdeConstants.INT_TYPE_NAME,""));
  Table tbl=new Table();
  tbl.setDbName(dbName);
  tbl.setTableName(tblName);
  StorageDescriptor sd=new StorageDescriptor();
  tbl.setSd(sd);
  sd.setCols(cols);
  sd.setCompressed(false);
  sd.setNumBuckets(1);
  sd.setParameters(new HashMap<String,String>());
  sd.setBucketCols(new ArrayList<String>());
  sd.setSerdeInfo(new SerDeInfo());
  sd.getSerdeInfo().setName(tbl.getTableName());
  sd.getSerdeInfo().setParameters(new HashMap<String,String>());
  sd.getSerdeInfo().getParameters().put(serdeConstants.SERIALIZATION_FORMAT,"1");
  sd.getSerdeInfo().setSerializationLib(LazySimpleSerDe.class.getName());
  sd.setInputFormat(HiveInputFormat.class.getName());
  sd.setOutputFormat(HiveOutputFormat.class.getName());
  sd.setSortCols(new ArrayList<Order>());
  tbl.setPartitionKeys(partCols);
  client.createTable(tbl);
  tbl=client.getTable(dbName,tblName);
  add_partition(client,tbl,Lists.newArrayList("p11","p21","31"),"part1");
  add_partition(client,tbl,Lists.newArrayList("p11","p22","32"),"part2");
  add_partition(client,tbl,Lists.newArrayList("p12","p21","31"),"part3");
  add_partition(client,tbl,Lists.newArrayList("p12","p23","32"),"part4");
  add_partition(client,tbl,Lists.newArrayList("p13","p24","31"),"part5");
  add_partition(client,tbl,Lists.newArrayList("p13","p25","-33"),"part6");
  checkFilter(client,dbName,tblName,"p1 = \"p11\"",2);
  checkFilter(client,dbName,tblName,"p1 = \"p12\"",2);
  checkFilter(client,dbName,tblName,"p2 = \"p21\"",2);
  checkFilter(client,dbName,tblName,"p2 = \"p23\"",1);
  checkFilter(client,dbName,tblName,"p3 = 31",3);
  checkFilter(client,dbName,tblName,"p3 = 33",0);
  checkFilter(client,dbName,tblName,"p3 = -33",1);
  checkFilter(client,dbName,tblName,"p1 = \"p11\" and p2=\"p22\"",1);
  checkFilter(client,dbName,tblName,"p1 = \"p11\" or p2=\"p23\"",3);
  checkFilter(client,dbName,tblName,"p1 = \"p11\" or p1=\"p12\"",4);
  checkFilter(client,dbName,tblName,"p1 = \"p11\" or p1=\"p12\"",4);
  checkFilter(client,dbName,tblName,"p1 = \"p11\" or p1=\"p12\"",4);
  checkFilter(client,dbName,tblName,"p1 = \"p11\" and p3 = 31",1);
  checkFilter(client,dbName,tblName,"p3 = -33 or p1 = \"p12\"",3);
  checkFilter(client,dbName,tblName,"p1 != \"p11\"",4);
  checkFilter(client,dbName,tblName,"p2 != \"p23\"",5);
  checkFilter(client,dbName,tblName,"p2 != \"p33\"",6);
  checkFilter(client,dbName,tblName,"p3 != 32",4);
  checkFilter(client,dbName,tblName,"p3 != 8589934592",6);
  checkFilter(client,dbName,tblName,"p1 != \"p11\" and p1 != \"p12\"",2);
  checkFilter(client,dbName,tblName,"p1 != \"p11\" and p2 != \"p22\"",4);
  checkFilter(client,dbName,tblName,"p1 != \"p11\" or p2 != \"p22\"",5);
  checkFilter(client,dbName,tblName,"p1 != \"p12\" and p2 != \"p25\"",3);
  checkFilter(client,dbName,tblName,"p1 != \"p12\" or p2 != \"p25\"",6);
  checkFilter(client,dbName,tblName,"p3 != -33 or p1 != \"p13\"",5);
  checkFilter(client,dbName,tblName,"p1 != \"p11\" and p3 = 31",2);
  checkFilter(client,dbName,tblName,"p3 != 31 and p1 = \"p12\"",1);
  checkFilter(client,dbName,tblName,"31 != p3 and p1 = \"p12\"",1);
  checkFilter(client,dbName,tblName,"\"p23\" = p2",1);
  checkFilter(client,dbName,tblName,"p1 = \"p11\" or (p1=\"p12\" and p2=\"p21\")",3);
  checkFilter(client,dbName,tblName,"p1 = \"p11\" or (p1=\"p12\" and p2=\"p21\") Or " + "(p1=\"p13\" aNd p2=\"p24\")",4);
  checkFilter(client,dbName,tblName,"p1=\"p12\" and (p2=\"p27\" Or p2=\"p21\")",1);
  checkFilter(client,dbName,tblName,"p1=\"p12\" and p2=\"p27\" Or p2=\"p21\"",2);
  checkFilter(client,dbName,tblName,"p1 > \"p12\"",2);
  checkFilter(client,dbName,tblName,"p1 >= \"p12\"",4);
  checkFilter(client,dbName,tblName,"p1 < \"p12\"",2);
  checkFilter(client,dbName,tblName,"p1 <= \"p12\"",4);
  checkFilter(client,dbName,tblName,"p1 like \"p1.*\"",6);
  checkFilter(client,dbName,tblName,"p2 like \"p.*3\"",1);
  checkFilter(client,dbName,tblName,"p3 < 0",1);
  checkFilter(client,dbName,tblName,"p3 >= -33",6);
  checkFilter(client,dbName,tblName,"p3 > -33",5);
  checkFilter(client,dbName,tblName,"p3 > 31 and p3 < 32",0);
  checkFilter(client,dbName,tblName,"p3 > 31 or p3 < 31",3);
  checkFilter(client,dbName,tblName,"p3 > 30 or p3 < 30",6);
  checkFilter(client,dbName,tblName,"p3 >= 31 or p3 < -32",6);
  checkFilter(client,dbName,tblName,"p3 >= 32",2);
  checkFilter(client,dbName,tblName,"p3 > 32",0);
  checkFilter(client,dbName,tblName,"p1 between \"p11\" and \"p12\"",4);
  checkFilter(client,dbName,tblName,"p1 not between \"p11\" and \"p12\"",2);
  checkFilter(client,dbName,tblName,"p3 not between 0 and 2",6);
  checkFilter(client,dbName,tblName,"p3 between 31 and 32",5);
  checkFilter(client,dbName,tblName,"p3 between 32 and 31",0);
  checkFilter(client,dbName,tblName,"p3 between -32 and 34 and p3 not between 31 and 32",0);
  checkFilter(client,dbName,tblName,"p3 between 1 and 3 or p3 not between 1 and 3",6);
  checkFilter(client,dbName,tblName,"p3 between 31 and 32 and p1 between \"p12\" and \"p14\"",3);
  List<Partition> partitions=client.listPartitionsByFilter(dbName,tblName,"p1 >= \"p12\"",(short)2);
  assertEquals("User specified row limit for partitions",2,partitions.size());
  Exception me=null;
  try {
    client.listPartitionsByFilter(dbName,tblName,"p3 >= \"p12\"",(short)-1);
  }
 catch (  MetaException e) {
    me=e;
  }
  assertNotNull(me);
  assertTrue("Filter on int partition key",me.getMessage().contains("Filtering is supported only on partition keys of type string"));
  me=null;
  try {
    client.listPartitionsByFilter(dbName,tblName,"c1 >= \"p12\"",(short)-1);
  }
 catch (  MetaException e) {
    me=e;
  }
  assertNotNull(me);
  assertTrue("Filter on invalid key",me.getMessage().contains("<c1> is not a partitioning key for the table"));
  me=null;
  try {
    client.listPartitionsByFilter(dbName,tblName,"c1 >= ",(short)-1);
  }
 catch (  MetaException e) {
    me=e;
  }
  assertNotNull(me);
  assertTrue("Invalid filter string",me.getMessage().contains("Error parsing partition filter"));
  me=null;
  try {
    client.listPartitionsByFilter("invDBName","invTableName","p1 = \"p11\"",(short)-1);
  }
 catch (  NoSuchObjectException e) {
    me=e;
  }
  assertNotNull(me);
  assertTrue("NoSuchObject exception",me.getMessage().contains("invDBName.invTableName table not found"));
  client.dropTable(dbName,tblName);
  client.dropDatabase(dbName);
}
