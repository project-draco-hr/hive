{
  try {
    silentDropDatabase(TEST_DB1_NAME);
    Database db=new Database();
    db.setName(TEST_DB1_NAME);
    String dbLocation=HiveConf.getVar(hiveConf,HiveConf.ConfVars.METASTOREWAREHOUSE) + "/_testDB_create_";
    db.setLocationUri(dbLocation);
    client.createDatabase(db);
    db=client.getDatabase(TEST_DB1_NAME);
    assertEquals("name of returned db is different from that of inserted db",TEST_DB1_NAME,db.getName());
    assertEquals("location of the returned db is different from that of inserted db",warehouse.getDnsPath(new Path(dbLocation)).toString(),db.getLocationUri());
    client.dropDatabase(TEST_DB1_NAME);
    silentDropDatabase(TEST_DB1_NAME);
    boolean objectNotExist=false;
    try {
      client.getDatabase(TEST_DB1_NAME);
    }
 catch (    NoSuchObjectException e) {
      objectNotExist=true;
    }
    assertTrue("Database " + TEST_DB1_NAME + " exists ",objectNotExist);
    db=new Database();
    db.setName(TEST_DB1_NAME);
    dbLocation=HiveConf.getVar(hiveConf,HiveConf.ConfVars.METASTOREWAREHOUSE) + "/_testDB_file_";
    FileSystem fs=FileSystem.get(new Path(dbLocation).toUri(),hiveConf);
    fs.createNewFile(new Path(dbLocation));
    fs.deleteOnExit(new Path(dbLocation));
    db.setLocationUri(dbLocation);
    boolean createFailed=false;
    try {
      client.createDatabase(db);
    }
 catch (    MetaException cantCreateDB) {
      System.err.println(cantCreateDB.getMessage());
      createFailed=true;
    }
    assertTrue("Database creation succeeded even location exists and is a file",createFailed);
    objectNotExist=false;
    try {
      client.getDatabase(TEST_DB1_NAME);
    }
 catch (    NoSuchObjectException e) {
      objectNotExist=true;
    }
    assertTrue("Database " + TEST_DB1_NAME + " exists when location is specified and is a file",objectNotExist);
  }
 catch (  Throwable e) {
    System.err.println(StringUtils.stringifyException(e));
    System.err.println("testDatabaseLocation() failed.");
    throw e;
  }
}
