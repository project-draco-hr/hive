{
  Join joinRel=call.rel(0);
  JoinRelType joinType=joinRel.getJoinType();
  Project leftProj;
  Project rightProj;
  RelNode leftJoinChild;
  RelNode rightJoinChild;
  if (hasLeftChild(call)) {
    leftProj=call.rel(1);
    leftJoinChild=getProjectChild(call,leftProj,true);
  }
 else {
    leftProj=null;
    leftJoinChild=call.rel(1);
  }
  if (hasRightChild(call)) {
    rightProj=getRightChild(call);
    rightJoinChild=getProjectChild(call,rightProj,false);
  }
 else {
    rightProj=null;
    rightJoinChild=joinRel.getRight();
  }
  if ((leftProj == null) && (rightProj == null)) {
    return;
  }
  RelDataType joinChildrenRowType=Join.deriveJoinRowType(leftJoinChild.getRowType(),rightJoinChild.getRowType(),JoinRelType.INNER,joinRel.getCluster().getTypeFactory(),null,Collections.<RelDataTypeField>emptyList());
  int nProjExprs=joinRel.getRowType().getFieldCount();
  List<Pair<RexNode,String>> projects=new ArrayList<Pair<RexNode,String>>();
  RexBuilder rexBuilder=joinRel.getCluster().getRexBuilder();
  createProjectExprs(leftProj,leftJoinChild,0,rexBuilder,joinChildrenRowType.getFieldList(),projects);
  List<RelDataTypeField> leftFields=leftJoinChild.getRowType().getFieldList();
  int nFieldsLeft=leftFields.size();
  createProjectExprs(rightProj,rightJoinChild,nFieldsLeft,rexBuilder,joinChildrenRowType.getFieldList(),projects);
  List<RelDataType> projTypes=new ArrayList<RelDataType>();
  for (int i=0; i < nProjExprs; i++) {
    projTypes.add(projects.get(i).left.getType());
  }
  RelDataType projRowType=rexBuilder.getTypeFactory().createStructType(projTypes,Pair.right(projects));
  RexProgram bottomProgram=RexProgram.create(joinChildrenRowType,Pair.left(projects),null,projRowType,rexBuilder);
  RexProgramBuilder topProgramBuilder=new RexProgramBuilder(projRowType,rexBuilder);
  topProgramBuilder.addIdentity();
  topProgramBuilder.addCondition(joinRel.getCondition());
  RexProgram topProgram=topProgramBuilder.getProgram();
  RexProgram mergedProgram=RexProgramBuilder.mergePrograms(topProgram,bottomProgram,rexBuilder);
  RexNode newCondition=mergedProgram.expandLocalRef(mergedProgram.getCondition());
  Join newJoinRel=joinRel.copy(joinRel.getTraitSet(),newCondition,leftJoinChild,rightJoinChild,joinRel.getJoinType(),joinRel.isSemiJoinDone());
  List<RexNode> newProjExprs=new ArrayList<RexNode>();
  List<RexLocalRef> projList=mergedProgram.getProjectList();
  List<RelDataTypeField> newJoinFields=newJoinRel.getRowType().getFieldList();
  int nJoinFields=newJoinFields.size();
  int[] adjustments=new int[nJoinFields];
  for (int i=0; i < nProjExprs; i++) {
    RexNode newExpr=mergedProgram.expandLocalRef(projList.get(i));
    if (joinType != JoinRelType.INNER) {
      newExpr=newExpr.accept(new RelOptUtil.RexInputConverter(rexBuilder,joinChildrenRowType.getFieldList(),newJoinFields,adjustments));
    }
    newProjExprs.add(newExpr);
  }
  RelNode newProjRel=projectFactory.createProject(newJoinRel,newProjExprs,joinRel.getRowType().getFieldNames());
  call.transformTo(newProjRel);
}
