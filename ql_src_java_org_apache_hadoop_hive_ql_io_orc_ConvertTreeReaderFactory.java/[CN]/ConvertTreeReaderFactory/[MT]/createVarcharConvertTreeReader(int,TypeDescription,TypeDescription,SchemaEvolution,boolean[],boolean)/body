{
switch (readerType.getCategory()) {
case BOOLEAN:
case BYTE:
case SHORT:
case INT:
case LONG:
    return new AnyIntegerFromStringGroupTreeReader(columnId,fileType,readerType);
case FLOAT:
  return new FloatFromStringGroupTreeReader(columnId,fileType);
case DOUBLE:
return new DoubleFromStringGroupTreeReader(columnId,fileType);
case DECIMAL:
return new DecimalFromStringGroupTreeReader(columnId,fileType,readerType);
case STRING:
return new StringGroupFromStringGroupTreeReader(columnId,fileType,readerType);
case CHAR:
return new StringGroupFromStringGroupTreeReader(columnId,fileType,readerType);
case VARCHAR:
throw new IllegalArgumentException("No conversion of type " + readerType.getCategory() + " to self needed");
case BINARY:
return new BinaryFromStringGroupTreeReader(columnId,fileType);
case TIMESTAMP:
return new TimestampFromStringGroupTreeReader(columnId,fileType);
case DATE:
return new DateFromStringGroupTreeReader(columnId,fileType);
case STRUCT:
case LIST:
case MAP:
case UNION:
default :
throw new IllegalArgumentException("Unsupported type " + readerType.getCategory());
}
}
