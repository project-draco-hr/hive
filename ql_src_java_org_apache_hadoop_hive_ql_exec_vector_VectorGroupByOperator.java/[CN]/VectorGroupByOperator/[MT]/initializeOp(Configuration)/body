{
  List<ObjectInspector> objectInspectors=new ArrayList<ObjectInspector>();
  try {
    vContext.setOperatorType(OperatorType.GROUPBY);
    ArrayList<AggregationDesc> aggrDesc=conf.getAggregators();
    keyExpressions=vContext.getVectorExpressions(conf.getKeys());
    for (int i=0; i < keyExpressions.length; ++i) {
      objectInspectors.add(vContext.createObjectInspector(keyExpressions[i]));
    }
    aggregators=new VectorAggregateExpression[aggrDesc.size()];
    for (int i=0; i < aggrDesc.size(); ++i) {
      AggregationDesc desc=aggrDesc.get(i);
      aggregators[i]=vContext.getAggregatorExpression(desc);
      objectInspectors.add(aggregators[i].getOutputObjectInspector());
    }
    keyWrappersBatch=VectorHashKeyWrapperBatch.compileKeyWrapperBatch(keyExpressions);
    aggregationBatchInfo=new VectorAggregationBufferBatch();
    mapKeysAggregationBuffers=new HashMap<KeyWrapper,VectorAggregationBufferRow>();
    List<String> outputFieldNames=conf.getOutputColumnNames();
    outputObjInspector=ObjectInspectorFactory.getStandardStructObjectInspector(outputFieldNames,objectInspectors);
  }
 catch (  HiveException he) {
    throw he;
  }
catch (  Throwable e) {
    throw new HiveException(e);
  }
  initializeChildren(hconf);
}
