{
  Collection<Future<?>> result=super.initializeOp(hconf);
  List<ObjectInspector> objectInspectors=new ArrayList<ObjectInspector>();
  List<ExprNodeDesc> keysDesc=conf.getKeys();
  try {
    List<String> outputFieldNames=conf.getOutputColumnNames();
    outputKeyLength=conf.pruneGroupingSetId() ? keyExpressions.length - 1 : keyExpressions.length;
    keyOutputWriters=new VectorExpressionWriter[outputKeyLength];
    for (int i=0; i < outputKeyLength; ++i) {
      keyOutputWriters[i]=VectorExpressionWriterFactory.genVectorExpressionWritable(keysDesc.get(i));
      objectInspectors.add(keyOutputWriters[i].getObjectInspector());
    }
    for (int i=0; i < aggregators.length; ++i) {
      aggregators[i].init(conf.getAggregators().get(i));
      objectInspectors.add(aggregators[i].getOutputObjectInspector());
    }
    if (!conf.getVectorDesc().isVectorGroupBatches()) {
      keyWrappersBatch=VectorHashKeyWrapperBatch.compileKeyWrapperBatch(keyExpressions);
      aggregationBatchInfo=new VectorAggregationBufferBatch();
      aggregationBatchInfo.compileAggregationBatchInfo(aggregators);
    }
    LOG.warn("VectorGroupByOperator is vector output " + isVectorOutput);
    outputObjInspector=ObjectInspectorFactory.getStandardStructObjectInspector(outputFieldNames,objectInspectors);
    if (isVectorOutput) {
      vrbCtx=new VectorizedRowBatchCtx();
      vrbCtx.init(vOutContext.getScratchColumnTypeMap(),(StructObjectInspector)outputObjInspector);
      outputBatch=vrbCtx.createVectorizedRowBatch();
      vectorColumnAssign=VectorColumnAssignFactory.buildAssigners(outputBatch,outputObjInspector,vOutContext.getProjectionColumnMap(),conf.getOutputColumnNames());
    }
  }
 catch (  HiveException he) {
    throw he;
  }
catch (  Throwable e) {
    throw new HiveException(e);
  }
  forwardCache=new Object[outputKeyLength + aggregators.length];
  if (outputKeyLength == 0) {
    processingMode=this.new ProcessingModeGlobalAggregate();
  }
 else   if (conf.getVectorDesc().isVectorGroupBatches()) {
    processingMode=this.new ProcessingModeGroupBatches();
  }
 else {
    processingMode=this.new ProcessingModeHashAggregate();
  }
  processingMode.initialize(hconf);
  return result;
}
