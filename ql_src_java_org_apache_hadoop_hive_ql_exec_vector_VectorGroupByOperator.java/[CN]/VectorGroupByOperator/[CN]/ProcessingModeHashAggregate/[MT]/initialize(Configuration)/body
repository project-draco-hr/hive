{
  if (null != hconf) {
    this.percentEntriesToFlush=HiveConf.getFloatVar(hconf,HiveConf.ConfVars.HIVE_VECTORIZATION_GROUPBY_FLUSH_PERCENT);
    this.checkInterval=HiveConf.getIntVar(hconf,HiveConf.ConfVars.HIVE_VECTORIZATION_GROUPBY_CHECKINTERVAL);
    this.maxHtEntries=HiveConf.getIntVar(hconf,HiveConf.ConfVars.HIVE_VECTORIZATION_GROUPBY_MAXENTRIES);
    this.minReductionHashAggr=HiveConf.getFloatVar(hconf,HiveConf.ConfVars.HIVEMAPAGGRHASHMINREDUCTION);
    this.numRowsCompareHashAggr=HiveConf.getLongVar(hconf,HiveConf.ConfVars.HIVEGROUPBYMAPINTERVAL);
  }
 else {
    this.percentEntriesToFlush=HiveConf.ConfVars.HIVE_VECTORIZATION_GROUPBY_FLUSH_PERCENT.defaultFloatVal;
    this.checkInterval=HiveConf.ConfVars.HIVE_VECTORIZATION_GROUPBY_CHECKINTERVAL.defaultIntVal;
    this.maxHtEntries=HiveConf.ConfVars.HIVE_VECTORIZATION_GROUPBY_MAXENTRIES.defaultIntVal;
    this.minReductionHashAggr=HiveConf.ConfVars.HIVEMAPAGGRHASHMINREDUCTION.defaultFloatVal;
    this.numRowsCompareHashAggr=HiveConf.ConfVars.HIVEGROUPBYMAPINTERVAL.defaultIntVal;
  }
  mapKeysAggregationBuffers=new HashMap<KeyWrapper,VectorAggregationBufferRow>();
  computeMemoryLimits();
  LOG.info("using hash aggregation processing mode");
}
