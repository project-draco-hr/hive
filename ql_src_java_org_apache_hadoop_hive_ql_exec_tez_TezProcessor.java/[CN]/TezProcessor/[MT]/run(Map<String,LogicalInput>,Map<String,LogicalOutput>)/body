{
  LOG.info("Running map: " + processorContext.getUniqueIdentifier());
  if (inputs.size() != 1) {
    throw new IOException("Cannot handle multiple inputs " + " inputCount=" + inputs.size());
  }
  if (outputs.size() > 1) {
    throw new IOException("Cannot handle more than one output" + ", outputCount=" + outputs.size());
  }
  LogicalInput in=inputs.values().iterator().next();
  LogicalOutput out=outputs.values().iterator().next();
  MRInput input=(MRInput)in;
  Configuration updatedConf=input.getConfigUpdates();
  if (updatedConf != null) {
    for (    Entry<String,String> entry : updatedConf) {
      this.jobConf.set(entry.getKey(),entry.getValue());
    }
  }
  KeyValueWriter kvWriter=(KeyValueWriter)out.getWriter();
  OutputCollector collector=new KVOutputCollector(kvWriter);
  if (isMap) {
    rproc=new MapRecordProcessor();
  }
 else {
    throw new UnsupportedOperationException("Reduce is yet to be implemented");
  }
  MRTaskReporter mrReporter=new MRTaskReporter(processorContext);
  rproc.init(jobConf,mrReporter,inputs.values(),collector);
  rproc.run();
}
