{
  try {
    TMemoryBuffer trans=new TMemoryBuffer(1024);
    TCTLSeparatedProtocol prot=new TCTLSeparatedProtocol(trans,10);
    prot.writeStructBegin(new TStruct());
    prot.writeFieldBegin(new TField());
    prot.writeString(null);
    prot.writeFieldEnd();
    prot.writeFieldBegin(new TField());
    prot.writeString(null);
    prot.writeFieldEnd();
    prot.writeFieldBegin(new TField());
    prot.writeI32(100);
    prot.writeFieldEnd();
    prot.writeFieldBegin(new TField());
    prot.writeString(null);
    prot.writeFieldEnd();
    prot.writeFieldBegin(new TField());
    prot.writeMapBegin(new TMap());
    prot.writeString(null);
    prot.writeString(null);
    prot.writeString("key2");
    prot.writeString(null);
    prot.writeString(null);
    prot.writeString("val3");
    prot.writeMapEnd();
    prot.writeFieldEnd();
    prot.writeStructEnd();
    byte b[]=new byte[3 * 1024];
    int len=trans.read(b,0,b.length);
    String written=new String(b,0,len);
    String testRef="\\N\\N100\\N\\N\\Nkey2\\N\\Nval3";
    assertTrue(testRef.equals(written));
    trans=new TMemoryBuffer(1023);
    trans.write(b,0,len);
    prot=new TCTLSeparatedProtocol(trans,3);
    prot.readStructBegin();
    prot.readFieldBegin();
    String ret=prot.readString();
    prot.readFieldEnd();
    assertTrue(ret.equals(""));
    prot.readFieldBegin();
    ret=prot.readString();
    prot.readFieldEnd();
    assertTrue(ret.equals(""));
    prot.readFieldBegin();
    int ret1=prot.readI32();
    prot.readFieldEnd();
    assertTrue(ret1 == 100);
    prot.readFieldBegin();
    ret1=prot.readI32();
    prot.readFieldEnd();
    prot.readFieldBegin();
    TMap map=prot.readMapBegin();
    assertTrue(map.size == 3);
    assertTrue(prot.readString().isEmpty());
    assertTrue(prot.readString().isEmpty());
    assertTrue(prot.readString().equals("key2"));
    assertTrue(prot.readString().isEmpty());
    assertTrue(prot.readString().isEmpty());
    assertTrue(prot.readString().equals("val3"));
    prot.readMapEnd();
    prot.readFieldEnd();
    assertTrue(ret1 == 0);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
