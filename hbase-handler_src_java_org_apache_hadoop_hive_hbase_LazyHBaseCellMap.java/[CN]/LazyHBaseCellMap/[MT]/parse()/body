{
  if (cachedMap == null) {
    cachedMap=new LinkedHashMap<Object,Object>();
  }
 else {
    cachedMap.clear();
  }
  NavigableMap<byte[],byte[]> familyMap=result.getFamilyMap(columnFamilyBytes);
  if (familyMap != null) {
    for (    Entry<byte[],byte[]> e : familyMap.entrySet()) {
      if (e.getValue() == null || e.getValue().length == 0) {
        continue;
      }
      if (qualPrefix != null && !Bytes.startsWith(e.getKey(),qualPrefix)) {
        continue;
      }
      LazyMapObjectInspector lazyMoi=getInspector();
      LazyPrimitive<? extends ObjectInspector,? extends Writable> key=LazyFactory.createLazyPrimitiveClass((PrimitiveObjectInspector)lazyMoi.getMapKeyObjectInspector(),binaryStorage.get(0));
      ByteArrayRef keyRef=new ByteArrayRef();
      keyRef.setData(e.getKey());
      key.init(keyRef,0,keyRef.getData().length);
      LazyObject<?> value=LazyFactory.createLazyObject(lazyMoi.getMapValueObjectInspector(),binaryStorage.get(1));
      byte[] bytes=e.getValue();
      if (isNull(oi.getNullSequence(),bytes,0,bytes.length)) {
        value.setNull();
      }
 else {
        ByteArrayRef valueRef=new ByteArrayRef();
        valueRef.setData(bytes);
        value.init(valueRef,0,valueRef.getData().length);
      }
      cachedMap.put(key.getObject(),value.getObject());
    }
  }
  setParsed(true);
}
