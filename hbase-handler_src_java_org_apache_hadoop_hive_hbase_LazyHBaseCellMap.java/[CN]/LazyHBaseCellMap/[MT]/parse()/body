{
  if (cachedMap == null) {
    cachedMap=new LinkedHashMap<Object,Object>();
  }
 else {
    cachedMap.clear();
  }
  NavigableMap<byte[],byte[]> familyMap=result.getFamilyMap(columnFamilyBytes);
  if (familyMap != null) {
    for (    Entry<byte[],byte[]> e : familyMap.entrySet()) {
      if (e.getValue() == null || e.getValue().length == 0) {
        continue;
      }
      LazyPrimitive<? extends ObjectInspector,? extends Writable> key=LazyFactory.createLazyPrimitiveClass((PrimitiveObjectInspector)getInspector().getMapKeyObjectInspector());
      ByteArrayRef keyRef=new ByteArrayRef();
      keyRef.setData(e.getKey());
      key.init(keyRef,0,keyRef.getData().length);
      LazyObject<?> value=LazyFactory.createLazyObject(getInspector().getMapValueObjectInspector());
      ByteArrayRef valueRef=new ByteArrayRef();
      valueRef.setData(e.getValue());
      value.init(valueRef,0,valueRef.getData().length);
      cachedMap.put(key.getObject(),value.getObject());
    }
  }
  setParsed(true);
}
