{
  try {
    VectorizedRowBatch batch=(VectorizedRowBatch)row;
    alias=(byte)tag;
    if (needCommonSetup) {
      commonSetup(batch);
      singleJoinColumn=bigTableKeyColumnMap[0];
      needCommonSetup=false;
    }
    if (needHashTableSetup) {
      hashSet=(VectorMapJoinBytesHashSet)vectorMapJoinHashTable;
      needHashTableSetup=false;
    }
    batchCounter++;
    for (    VectorExpression ve : bigTableFilterExpressions) {
      ve.evaluate(batch);
    }
    final int inputLogicalSize=batch.size;
    if (inputLogicalSize == 0) {
      if (isLogDebugEnabled) {
        LOG.debug(CLASS_NAME + " batch #" + batchCounter+ " empty");
      }
      return;
    }
    if (bigTableKeyExpressions != null) {
      for (      VectorExpression ve : bigTableKeyExpressions) {
        ve.evaluate(batch);
      }
    }
    BytesColumnVector joinColVector=(BytesColumnVector)batch.cols[singleJoinColumn];
    byte[][] vector=joinColVector.vector;
    int[] start=joinColVector.start;
    int[] length=joinColVector.length;
    boolean allKeyInputColumnsRepeating=joinColVector.isRepeating;
    if (allKeyInputColumnsRepeating) {
      byte[] keyBytes=vector[0];
      int keyStart=start[0];
      int keyLength=length[0];
      JoinUtil.JoinResult joinResult=hashSet.contains(keyBytes,keyStart,keyLength,hashSetResults[0]);
      if (isLogDebugEnabled) {
        LOG.debug(CLASS_NAME + " batch #" + batchCounter+ " repeated joinResult "+ joinResult.name());
      }
      finishLeftSemiRepeated(batch,joinResult,hashSetResults[0]);
    }
 else {
      if (isLogDebugEnabled) {
        LOG.debug(CLASS_NAME + " batch #" + batchCounter+ " non-repeated");
      }
      int selected[]=batch.selected;
      boolean selectedInUse=batch.selectedInUse;
      int hashSetResultCount=0;
      int allMatchCount=0;
      int spillCount=0;
      int saveKeyBatchIndex=-1;
      boolean haveSaveKey=false;
      JoinUtil.JoinResult saveJoinResult=JoinUtil.JoinResult.NOMATCH;
      for (int logical=0; logical < inputLogicalSize; logical++) {
        int batchIndex=(selectedInUse ? selected[logical] : logical);
        if (!haveSaveKey || StringExpr.equal(vector[saveKeyBatchIndex],start[saveKeyBatchIndex],length[saveKeyBatchIndex],vector[batchIndex],start[batchIndex],length[batchIndex]) == false) {
          if (haveSaveKey) {
switch (saveJoinResult) {
case MATCH:
              break;
case SPILL:
            hashSetResultCount++;
          break;
case NOMATCH:
        break;
    }
  }
  haveSaveKey=true;
  saveKeyBatchIndex=batchIndex;
  byte[] keyBytes=vector[batchIndex];
  int keyStart=start[batchIndex];
  int keyLength=length[batchIndex];
  saveJoinResult=hashSet.contains(keyBytes,keyStart,keyLength,hashSetResults[hashSetResultCount]);
switch (saveJoinResult) {
case MATCH:
    allMatchs[allMatchCount++]=batchIndex;
  break;
case SPILL:
spills[spillCount]=batchIndex;
spillHashMapResultIndices[spillCount]=hashSetResultCount;
spillCount++;
break;
case NOMATCH:
break;
}
}
 else {
switch (saveJoinResult) {
case MATCH:
allMatchs[allMatchCount++]=batchIndex;
break;
case SPILL:
spills[spillCount]=batchIndex;
spillHashMapResultIndices[spillCount]=hashSetResultCount;
spillCount++;
break;
case NOMATCH:
break;
}
}
}
if (haveSaveKey) {
switch (saveJoinResult) {
case MATCH:
break;
case SPILL:
hashSetResultCount++;
break;
case NOMATCH:
break;
}
}
if (isLogDebugEnabled) {
LOG.debug(CLASS_NAME + " allMatchs " + intArrayToRangesString(allMatchs,allMatchCount)+ " spills "+ intArrayToRangesString(spills,spillCount)+ " spillHashMapResultIndices "+ intArrayToRangesString(spillHashMapResultIndices,spillCount)+ " hashMapResults "+ Arrays.toString(Arrays.copyOfRange(hashSetResults,0,hashSetResultCount)));
}
finishLeftSemi(batch,allMatchCount,spillCount,(VectorMapJoinHashTableResult[])hashSetResults);
}
if (batch.size > 0) {
forwardBigTableBatch(batch);
}
}
 catch (IOException e) {
throw new HiveException(e);
}
catch (Exception e) {
throw new HiveException(e);
}
}
