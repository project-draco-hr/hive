{
  try {
    Class<? extends HCatOutputStorageDriver> driverClass=(Class<? extends HCatOutputStorageDriver>)Class.forName(jobInfo.getStorerInfo().getOutputSDClass());
    HCatOutputStorageDriver driver=driverClass.newInstance();
    Map<String,String> partitionValues=jobInfo.getTableInfo().getPartitionValues();
    String location=jobInfo.getLocation();
    if (dynamicPartVals != null) {
      List<String> dynamicPartKeys=jobInfo.getTableInfo().getDynamicPartitioningKeys();
      if (dynamicPartVals.size() != dynamicPartKeys.size()) {
        throw new HCatException(ErrorType.ERROR_INVALID_PARTITION_VALUES,"Unable to instantiate dynamic partitioning storage driver, mismatch between" + " number of partition values obtained[" + dynamicPartVals.size() + "] and number of partition values required["+ dynamicPartKeys.size()+ "]");
      }
      for (int i=0; i < dynamicPartKeys.size(); i++) {
        partitionValues.put(dynamicPartKeys.get(i),dynamicPartVals.get(i));
      }
      Table table=jobInfo.getTable();
      List<String> partitionCols=new ArrayList<String>();
      for (      FieldSchema schema : table.getPartitionKeys()) {
        partitionCols.add(schema.getName());
      }
      location=driver.getOutputLocation(jobContext,table.getSd().getLocation(),partitionCols,partitionValues,jobContext.getConfiguration().get(HCatConstants.HCAT_DYNAMIC_PTN_JOBID));
    }
    driver.setSchema(jobContext,jobInfo.getOutputSchema());
    driver.setPartitionValues(jobContext,partitionValues);
    driver.setOutputPath(jobContext,location);
    driver.initialize(jobContext,jobInfo.getStorerInfo().getProperties());
    return driver;
  }
 catch (  Exception e) {
    if (e instanceof HCatException) {
      throw (HCatException)e;
    }
 else {
      throw new HCatException(ErrorType.ERROR_INIT_STORAGE_DRIVER,e);
    }
  }
}
