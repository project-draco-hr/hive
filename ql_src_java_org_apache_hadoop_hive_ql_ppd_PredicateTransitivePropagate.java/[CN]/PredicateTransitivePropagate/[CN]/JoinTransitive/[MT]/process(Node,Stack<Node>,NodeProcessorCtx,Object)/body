{
  @SuppressWarnings("unchecked") CommonJoinOperator<JoinDesc> join=(CommonJoinOperator)nd;
  ReduceSinkOperator source=(ReduceSinkOperator)stack.get(stack.size() - 2);
  FilterOperator filter=(FilterOperator)stack.get(stack.size() - 3);
  int srcPos=join.getParentOperators().indexOf(source);
  TransitiveContext context=(TransitiveContext)procCtx;
  Map<CommonJoinOperator,int[][]> filterPropagates=context.getFilterPropates();
  Map<ReduceSinkOperator,ExprNodeDesc> newFilters=context.getNewfilters();
  int[][] targets=filterPropagates.get(join);
  if (targets == null) {
    filterPropagates.put(join,targets=getTargets(join));
  }
  List<Operator<? extends OperatorDesc>> parents=join.getParentOperators();
  for (  int targetPos : targets[srcPos]) {
    ReduceSinkOperator target=(ReduceSinkOperator)parents.get(targetPos);
    List<ExprNodeDesc> sourceKeys=source.getConf().getKeyCols();
    List<ExprNodeDesc> targetKeys=target.getConf().getKeyCols();
    ExprNodeDesc predicate=filter.getConf().getPredicate();
    ExprNodeDesc replaced=ExprNodeDescUtils.replace(predicate,sourceKeys,targetKeys);
    if (replaced != null && !filterExists(target,replaced)) {
      ExprNodeDesc prev=newFilters.get(target);
      if (prev == null) {
        newFilters.put(target,replaced);
      }
 else {
        newFilters.put(target,ExprNodeDescUtils.mergePredicates(prev,replaced));
      }
    }
  }
  return null;
}
