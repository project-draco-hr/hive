{
  MessageType schema=MessageTypeParser.parseMessageType("message test {  required float a; required int32 b; }");
  SearchArgument sarg=SearchArgumentFactory.newBuilder().startNot().startOr().isNull("a",PredicateLeaf.Type.FLOAT).between("a",PredicateLeaf.Type.FLOAT,10.2,20.3).in("b",PredicateLeaf.Type.LONG,1L,2L,3L).end().end().build();
  FilterPredicate p=ParquetFilterPredicateConverter.toFilterPredicate(sarg,schema);
  String expected="and(and(not(eq(a, null)), not(and(lteq(a, 20.3), not(lt(a, 10.2))))), not(or(or(eq(b, 1), eq(b, 2)), eq(b, 3))))";
  assertEquals(expected,p.toString());
}
