def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.BOOL):
                self.my_bool = iprot.readBool()
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.BYTE):
                self.my_byte = iprot.readByte()
            else:
                iprot.skip(ftype)
        elif (fid == 3):
            if (ftype == TType.I16):
                self.my_16bit_int = iprot.readI16()
            else:
                iprot.skip(ftype)
        elif (fid == 4):
            if (ftype == TType.I32):
                self.my_32bit_int = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 5):
            if (ftype == TType.I64):
                self.my_64bit_int = iprot.readI64()
            else:
                iprot.skip(ftype)
        elif (fid == 6):
            if (ftype == TType.DOUBLE):
                self.my_double = iprot.readDouble()
            else:
                iprot.skip(ftype)
        elif (fid == 7):
            if (ftype == TType.STRING):
                self.my_string = iprot.readString()
            else:
                iprot.skip(ftype)
        elif (fid == 8):
            if (ftype == TType.STRING):
                self.my_binary = iprot.readString()
            else:
                iprot.skip(ftype)
        elif (fid == 9):
            if (ftype == TType.MAP):
                self.my_string_string_map = {}
                (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                for _i4 in xrange(_size0):
                    _key5 = iprot.readString()
                    _val6 = iprot.readString()
                    self.my_string_string_map[_key5] = _val6
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 10):
            if (ftype == TType.MAP):
                self.my_string_enum_map = {}
                (_ktype8, _vtype9, _size7) = iprot.readMapBegin()
                for _i11 in xrange(_size7):
                    _key12 = iprot.readString()
                    _val13 = iprot.readI32()
                    self.my_string_enum_map[_key12] = _val13
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 11):
            if (ftype == TType.MAP):
                self.my_enum_string_map = {}
                (_ktype15, _vtype16, _size14) = iprot.readMapBegin()
                for _i18 in xrange(_size14):
                    _key19 = iprot.readI32()
                    _val20 = iprot.readString()
                    self.my_enum_string_map[_key19] = _val20
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 12):
            if (ftype == TType.MAP):
                self.my_enum_struct_map = {}
                (_ktype22, _vtype23, _size21) = iprot.readMapBegin()
                for _i25 in xrange(_size21):
                    _key26 = iprot.readI32()
                    _val27 = MiniStruct()
                    _val27.read(iprot)
                    self.my_enum_struct_map[_key26] = _val27
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 13):
            if (ftype == TType.MAP):
                self.my_enum_stringlist_map = {}
                (_ktype29, _vtype30, _size28) = iprot.readMapBegin()
                for _i32 in xrange(_size28):
                    _key33 = iprot.readI32()
                    _val34 = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in xrange(_size35):
                        _elem40 = iprot.readString()
                        _val34.append(_elem40)
                    iprot.readListEnd()
                    self.my_enum_stringlist_map[_key33] = _val34
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 14):
            if (ftype == TType.MAP):
                self.my_enum_structlist_map = {}
                (_ktype42, _vtype43, _size41) = iprot.readMapBegin()
                for _i45 in xrange(_size41):
                    _key46 = iprot.readI32()
                    _val47 = []
                    (_etype51, _size48) = iprot.readListBegin()
                    for _i52 in xrange(_size48):
                        _elem53 = MiniStruct()
                        _elem53.read(iprot)
                        _val47.append(_elem53)
                    iprot.readListEnd()
                    self.my_enum_structlist_map[_key46] = _val47
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 15):
            if (ftype == TType.LIST):
                self.my_stringlist = []
                (_etype57, _size54) = iprot.readListBegin()
                for _i58 in xrange(_size54):
                    _elem59 = iprot.readString()
                    self.my_stringlist.append(_elem59)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 16):
            if (ftype == TType.LIST):
                self.my_structlist = []
                (_etype63, _size60) = iprot.readListBegin()
                for _i64 in xrange(_size60):
                    _elem65 = MiniStruct()
                    _elem65.read(iprot)
                    self.my_structlist.append(_elem65)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 17):
            if (ftype == TType.LIST):
                self.my_enumlist = []
                (_etype69, _size66) = iprot.readListBegin()
                for _i70 in xrange(_size66):
                    _elem71 = iprot.readI32()
                    self.my_enumlist.append(_elem71)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 18):
            if (ftype == TType.SET):
                self.my_stringset = set()
                (_etype75, _size72) = iprot.readSetBegin()
                for _i76 in xrange(_size72):
                    _elem77 = iprot.readString()
                    self.my_stringset.add(_elem77)
                iprot.readSetEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 19):
            if (ftype == TType.SET):
                self.my_enumset = set()
                (_etype81, _size78) = iprot.readSetBegin()
                for _i82 in xrange(_size78):
                    _elem83 = iprot.readI32()
                    self.my_enumset.add(_elem83)
                iprot.readSetEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 20):
            if (ftype == TType.SET):
                self.my_structset = set()
                (_etype87, _size84) = iprot.readSetBegin()
                for _i88 in xrange(_size84):
                    _elem89 = MiniStruct()
                    _elem89.read(iprot)
                    self.my_structset.add(_elem89)
                iprot.readSetEnd()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
