{
  String dbName=MetaStoreUtils.DEFAULT_DATABASE_NAME;
  String tableName="table_for_testDropPartitionsWithPurge";
  try {
    Map<String,String> partitionSpec=new ImmutableMap.Builder<String,String>().put("ds","20141216").put("hr","12").build();
    int trashSizeBeforeDrop=getTrashContents().length;
    Table table=createPartitionedTable(dbName,tableName);
    hm.createPartition(table,partitionSpec);
    Partition partition=hm.getPartition(table,partitionSpec,false);
    assertNotNull("Newly created partition shouldn't be null!",partition);
    hm.dropPartition(dbName,tableName,partition.getValues(),PartitionDropOptions.instance().deleteData(true).purgeData(true));
    int trashSizeAfterDropPurge=getTrashContents().length;
    assertEquals("After dropPartitions(purge), trash should've remained unchanged!",trashSizeBeforeDrop,trashSizeAfterDropPurge);
    hm.createPartition(table,partitionSpec);
    partition=hm.getPartition(table,partitionSpec,false);
    assertNotNull("Newly created partition shouldn't be null!",partition);
    hm.dropPartition(dbName,tableName,partition.getValues(),PartitionDropOptions.instance().deleteData(true).purgeData(false));
    int trashSizeWithoutPurge=getTrashContents().length;
    assertEquals("After dropPartitions(noPurge), data should've gone to trash!",trashSizeBeforeDrop,trashSizeWithoutPurge);
  }
 catch (  Exception e) {
    fail("Unexpected exception: " + StringUtils.stringifyException(e));
  }
 finally {
    cleanUpTableQuietly(dbName,tableName);
  }
}
