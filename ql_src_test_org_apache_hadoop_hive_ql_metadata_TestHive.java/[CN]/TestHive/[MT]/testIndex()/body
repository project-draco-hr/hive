{
  try {
    String tableName="table_for_testindex";
    String qTableName=MetaStoreUtils.DEFAULT_DATABASE_NAME + "." + tableName;
    try {
      hm.dropTable(MetaStoreUtils.DEFAULT_DATABASE_NAME,tableName);
    }
 catch (    HiveException e) {
      e.printStackTrace();
      assertTrue("Unable to drop table",false);
    }
    Table tbl=new Table(MetaStoreUtils.DEFAULT_DATABASE_NAME,tableName);
    List<FieldSchema> fields=tbl.getCols();
    fields.add(new FieldSchema("col1",serdeConstants.INT_TYPE_NAME,"int -- first column"));
    fields.add(new FieldSchema("col2",serdeConstants.STRING_TYPE_NAME,"string -- second column"));
    fields.add(new FieldSchema("col3",serdeConstants.DOUBLE_TYPE_NAME,"double -- thrift column"));
    tbl.setFields(fields);
    tbl.setOutputFormatClass(HiveIgnoreKeyTextOutputFormat.class);
    tbl.setInputFormatClass(SequenceFileInputFormat.class);
    try {
      hm.createTable(tbl);
    }
 catch (    HiveException e) {
      e.printStackTrace();
      assertTrue("Unable to create table: " + tableName,false);
    }
    String indexName="index_on_table_for_testindex";
    String indexHandlerClass=HiveIndex.IndexType.COMPACT_SUMMARY_TABLE.getHandlerClsName();
    List<String> indexedCols=new ArrayList<String>();
    indexedCols.add("col1");
    String indexTableName="index_on_table_for_testindex_table";
    String qIndexTableName=MetaStoreUtils.DEFAULT_DATABASE_NAME + "." + indexTableName;
    boolean deferredRebuild=true;
    String inputFormat=SequenceFileInputFormat.class.getName();
    String outputFormat=SequenceFileOutputFormat.class.getName();
    String serde=null;
    String storageHandler=null;
    String location=null;
    String collItemDelim=null;
    String fieldDelim=null;
    String fieldEscape=null;
    String lineDelim=null;
    String mapKeyDelim=null;
    String indexComment=null;
    Map<String,String> indexProps=null;
    Map<String,String> tableProps=null;
    Map<String,String> serdeProps=new HashMap<String,String>();
    hm.createIndex(qTableName,indexName,indexHandlerClass,indexedCols,qIndexTableName,deferredRebuild,inputFormat,outputFormat,serde,storageHandler,location,indexProps,tableProps,serdeProps,collItemDelim,fieldDelim,fieldEscape,lineDelim,mapKeyDelim,indexComment);
    Index index=null;
    try {
      index=hm.getIndex(tableName,indexName);
      assertNotNull("Unable to fetch index",index);
      index.validate();
      assertEquals("Index names don't match for index: " + indexName,indexName,index.getIndexName());
      assertEquals("Table names don't match for index: " + indexName,tableName,index.getOrigTableName());
      assertEquals("Index table names didn't match for index: " + indexName,indexTableName,index.getIndexTableName());
      assertEquals("Index handler classes didn't match for index: " + indexName,indexHandlerClass,index.getIndexHandlerClass());
      assertEquals("Deferred rebuild didn't match for index: " + indexName,deferredRebuild,index.isDeferredRebuild());
    }
 catch (    HiveException e) {
      System.err.println(StringUtils.stringifyException(e));
      assertTrue("Unable to fetch index correctly: " + indexName,false);
    }
    try {
      hm.dropIndex(MetaStoreUtils.DEFAULT_DATABASE_NAME,tableName,indexName,true);
    }
 catch (    HiveException e) {
      System.err.println(StringUtils.stringifyException(e));
      assertTrue("Unable to drop index: " + indexName,false);
    }
    boolean dropIndexException=false;
    try {
      hm.getIndex(tableName,indexName);
    }
 catch (    HiveException e) {
      dropIndexException=true;
    }
    assertTrue("Unable to drop index: " + indexName,dropIndexException);
    try {
      hm.dropTable(tableName);
      Table droppedTable=hm.getTable(tableName,false);
      assertNull("Unable to drop table " + tableName,droppedTable);
    }
 catch (    HiveException e) {
      System.err.println(StringUtils.stringifyException(e));
      assertTrue("Unable to drop table: " + tableName,false);
    }
  }
 catch (  Throwable e) {
    System.err.println(StringUtils.stringifyException(e));
    System.err.println("testIndex failed");
    throw e;
  }
}
