{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 0:
      if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map718=iprot.readMapBegin();
          struct.success=new HashMap<String,String>(2 * _map718.size);
          for (int _i719=0; _i719 < _map718.size; ++_i719) {
            String _key720;
            String _val721;
            _key720=iprot.readString();
            _val721=iprot.readString();
            struct.success.put(_key720,_val721);
          }
          iprot.readMapEnd();
        }
        struct.setSuccessIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 1:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
    struct.o1=new MetaException();
    struct.o1.read(iprot);
    struct.setO1IsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
