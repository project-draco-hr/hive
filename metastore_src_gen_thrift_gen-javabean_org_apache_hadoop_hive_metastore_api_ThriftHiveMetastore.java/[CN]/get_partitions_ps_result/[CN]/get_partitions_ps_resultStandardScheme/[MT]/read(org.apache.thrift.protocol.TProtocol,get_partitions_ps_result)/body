{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 0:
      if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
          org.apache.thrift.protocol.TList _list886=iprot.readListBegin();
          struct.success=new ArrayList<Partition>(_list886.size);
          Partition _elem887;
          for (int _i888=0; _i888 < _list886.size; ++_i888) {
            _elem887=new Partition();
            _elem887.read(iprot);
            struct.success.add(_elem887);
          }
          iprot.readListEnd();
        }
        struct.setSuccessIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 1:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
    struct.o1=new MetaException();
    struct.o1.read(iprot);
    struct.setO1IsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 2:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.o2=new NoSuchObjectException();
struct.o2.read(iprot);
struct.setO2IsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
