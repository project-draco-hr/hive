{
  isPartitionMarkedForEvent_args args=new isPartitionMarkedForEvent_args();
  try {
    args.read(iprot);
  }
 catch (  TProtocolException e) {
    iprot.readMessageEnd();
    TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());
    oprot.writeMessageBegin(new TMessage("isPartitionMarkedForEvent",TMessageType.EXCEPTION,seqid));
    x.write(oprot);
    oprot.writeMessageEnd();
    oprot.getTransport().flush();
    return;
  }
  iprot.readMessageEnd();
  isPartitionMarkedForEvent_result result=new isPartitionMarkedForEvent_result();
  try {
    result.success=iface_.isPartitionMarkedForEvent(args.db_name,args.tbl_name,args.part_vals,args.eventType);
    result.setSuccessIsSet(true);
  }
 catch (  MetaException o1) {
    result.o1=o1;
  }
catch (  NoSuchObjectException o2) {
    result.o2=o2;
  }
catch (  UnknownDBException o3) {
    result.o3=o3;
  }
catch (  UnknownTableException o4) {
    result.o4=o4;
  }
catch (  UnknownPartitionException o5) {
    result.o5=o5;
  }
catch (  InvalidPartitionException o6) {
    result.o6=o6;
  }
catch (  Throwable th) {
    LOGGER.error("Internal error processing isPartitionMarkedForEvent",th);
    TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,"Internal error processing isPartitionMarkedForEvent");
    oprot.writeMessageBegin(new TMessage("isPartitionMarkedForEvent",TMessageType.EXCEPTION,seqid));
    x.write(oprot);
    oprot.writeMessageEnd();
    oprot.getTransport().flush();
    return;
  }
  oprot.writeMessageBegin(new TMessage("isPartitionMarkedForEvent",TMessageType.REPLY,seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}
