{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
        struct.tbl=new Table();
        struct.tbl.read(iprot);
        struct.setTblIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
      org.apache.thrift.protocol.TList _list674=iprot.readListBegin();
      struct.primaryKeys=new ArrayList<SQLPrimaryKey>(_list674.size);
      SQLPrimaryKey _elem675;
      for (int _i676=0; _i676 < _list674.size; ++_i676) {
        _elem675=new SQLPrimaryKey();
        _elem675.read(iprot);
        struct.primaryKeys.add(_elem675);
      }
      iprot.readListEnd();
    }
    struct.setPrimaryKeysIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
  org.apache.thrift.protocol.TList _list677=iprot.readListBegin();
  struct.foreignKeys=new ArrayList<SQLForeignKey>(_list677.size);
  SQLForeignKey _elem678;
  for (int _i679=0; _i679 < _list677.size; ++_i679) {
    _elem678=new SQLForeignKey();
    _elem678.read(iprot);
    struct.foreignKeys.add(_elem678);
  }
  iprot.readListEnd();
}
struct.setForeignKeysIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
