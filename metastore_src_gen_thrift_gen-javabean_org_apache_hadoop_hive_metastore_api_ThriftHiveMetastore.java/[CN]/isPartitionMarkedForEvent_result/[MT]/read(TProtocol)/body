{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 0:
      if (field.type == TType.BOOL) {
        this.success=iprot.readBool();
        setSuccessIsSet(true);
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 1:
  if (field.type == TType.STRUCT) {
    this.o1=new MetaException();
    this.o1.read(iprot);
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case 2:
if (field.type == TType.STRUCT) {
this.o2=new NoSuchObjectException();
this.o2.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 3:
if (field.type == TType.STRUCT) {
this.o3=new UnknownDBException();
this.o3.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 4:
if (field.type == TType.STRUCT) {
this.o4=new UnknownTableException();
this.o4.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 5:
if (field.type == TType.STRUCT) {
this.o5=new UnknownPartitionException();
this.o5.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 6:
if (field.type == TType.STRUCT) {
this.o6=new InvalidPartitionException();
this.o6.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
