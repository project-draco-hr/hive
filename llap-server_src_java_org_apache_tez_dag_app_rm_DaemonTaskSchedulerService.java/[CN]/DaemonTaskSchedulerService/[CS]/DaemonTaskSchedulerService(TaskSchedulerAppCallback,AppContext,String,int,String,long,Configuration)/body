{
  super(DaemonTaskSchedulerService.class.getName());
  this.appCallbackExecutor=createAppCallbackExecutorService();
  this.appClientDelegate=createAppCallbackDelegate(appClient);
  this.appContext=appContext;
  this.serviceHosts=new LinkedList<String>();
  this.serviceHostSet=new HashSet<>();
  this.containerFactory=new ContainerFactory(appContext,customAppIdIdentifier);
  this.memoryPerInstance=conf.getInt(LlapDaemonConfiguration.LLAP_DAEMON_MEMORY_PER_INSTANCE_MB,LlapDaemonConfiguration.LLAP_DAEMON_MEMORY_PER_INSTANCE_MB_DEFAULT);
  this.coresPerInstance=conf.getInt(LlapDaemonConfiguration.LLAP_DAEMON_VCPUS_PER_INSTANCE,LlapDaemonConfiguration.LLAP_DAEMON_VCPUS_PER_INSTANCE_DEFAULT);
  this.executorsPerInstance=conf.getInt(LlapDaemonConfiguration.LLAP_DAEMON_NUM_EXECUTORS,LlapDaemonConfiguration.LLAP_DAEMON_NUM_EXECUTORS_DEFAULT);
  this.clientHostname=clientHostname;
  this.clientPort=clientPort;
  this.trackingUrl=trackingUrl;
  int memoryPerExecutor=(int)(memoryPerInstance / (float)executorsPerInstance);
  int coresPerExecutor=(int)(coresPerInstance / (float)executorsPerInstance);
  this.resourcePerExecutor=Resource.newInstance(memoryPerExecutor,coresPerExecutor);
  String[] hosts=conf.getTrimmedStrings(LlapDaemonConfiguration.LLAP_DAEMON_AM_SERVICE_HOSTS);
  if (hosts == null || hosts.length == 0) {
    hosts=new String[]{"localhost"};
  }
  for (  String host : hosts) {
    serviceHosts.add(host);
    serviceHostSet.add(host);
  }
  LOG.info("Running with configuration: " + "memoryPerInstance=" + memoryPerInstance + ", vcoresPerInstance="+ coresPerInstance+ ", executorsPerInstance="+ executorsPerInstance+ ", resourcePerInstanceInferred="+ resourcePerExecutor+ ", hosts="+ serviceHosts.toString());
}
