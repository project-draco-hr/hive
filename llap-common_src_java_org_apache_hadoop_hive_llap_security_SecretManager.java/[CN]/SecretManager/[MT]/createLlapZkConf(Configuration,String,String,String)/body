{
  String principal=HiveConf.getVar(conf,ConfVars.LLAP_ZKSM_KERBEROS_PRINCIPAL,llapPrincipal);
  String keyTab=HiveConf.getVar(conf,ConfVars.LLAP_ZKSM_KERBEROS_KEYTAB_FILE,llapKeytab);
  final Configuration zkConf=new Configuration(conf);
  long tokenLifetime=HiveConf.getTimeVar(conf,ConfVars.LLAP_DELEGATION_TOKEN_LIFETIME,TimeUnit.SECONDS);
  zkConf.setLong(DelegationTokenManager.MAX_LIFETIME,tokenLifetime);
  zkConf.setLong(DelegationTokenManager.RENEW_INTERVAL,tokenLifetime);
  try {
    zkConf.set(SecretManager.ZK_DTSM_ZK_KERBEROS_PRINCIPAL,SecurityUtil.getServerPrincipal(principal,"0.0.0.0"));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  zkConf.set(SecretManager.ZK_DTSM_ZK_KERBEROS_KEYTAB,keyTab);
  String zkPath="zkdtsm_" + clusterId;
  LOG.info("Using {} as ZK secret manager path",zkPath);
  zkConf.set(SecretManager.ZK_DTSM_ZNODE_WORKING_PATH,zkPath);
  setZkConfIfNotSet(zkConf,SecretManager.ZK_DTSM_ZK_AUTH_TYPE,"sasl");
  setZkConfIfNotSet(zkConf,SecretManager.ZK_DTSM_ZK_CONNECTION_STRING,HiveConf.getVar(zkConf,ConfVars.LLAP_ZKSM_ZK_CONNECTION_STRING));
  UserGroupInformation zkUgi=null;
  try {
    zkUgi=LlapUtil.loginWithKerberos(principal,keyTab);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  return new LlapZkConf(zkConf,zkUgi);
}
