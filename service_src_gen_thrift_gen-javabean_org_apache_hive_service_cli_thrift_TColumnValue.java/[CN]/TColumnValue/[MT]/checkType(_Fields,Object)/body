{
switch (setField) {
case BOOL_VAL:
    if (value instanceof TBoolValue) {
      break;
    }
  throw new ClassCastException("Was expecting value of type TBoolValue for field 'boolVal', but got " + value.getClass().getSimpleName());
case BYTE_VAL:
if (value instanceof TByteValue) {
  break;
}
throw new ClassCastException("Was expecting value of type TByteValue for field 'byteVal', but got " + value.getClass().getSimpleName());
case I16_VAL:
if (value instanceof TI16Value) {
break;
}
throw new ClassCastException("Was expecting value of type TI16Value for field 'i16Val', but got " + value.getClass().getSimpleName());
case I32_VAL:
if (value instanceof TI32Value) {
break;
}
throw new ClassCastException("Was expecting value of type TI32Value for field 'i32Val', but got " + value.getClass().getSimpleName());
case I64_VAL:
if (value instanceof TI64Value) {
break;
}
throw new ClassCastException("Was expecting value of type TI64Value for field 'i64Val', but got " + value.getClass().getSimpleName());
case DOUBLE_VAL:
if (value instanceof TDoubleValue) {
break;
}
throw new ClassCastException("Was expecting value of type TDoubleValue for field 'doubleVal', but got " + value.getClass().getSimpleName());
case STRING_VAL:
if (value instanceof TStringValue) {
break;
}
throw new ClassCastException("Was expecting value of type TStringValue for field 'stringVal', but got " + value.getClass().getSimpleName());
default :
throw new IllegalArgumentException("Unknown field id " + setField);
}
}
