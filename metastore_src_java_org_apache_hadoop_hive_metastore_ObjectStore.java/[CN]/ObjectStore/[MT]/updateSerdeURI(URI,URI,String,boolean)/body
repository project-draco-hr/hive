{
  boolean committed=false;
  Query query=null;
  Map<String,String> updateLocations=new HashMap<String,String>();
  List<String> badRecords=new ArrayList<String>();
  UpdateSerdeURIRetVal retVal=null;
  try {
    openTransaction();
    query=pm.newQuery(MSerDeInfo.class);
    List<MSerDeInfo> mSerdes=(List<MSerDeInfo>)query.execute();
    pm.retrieveAll(mSerdes);
    for (    MSerDeInfo mSerde : mSerdes) {
      if (mSerde.getParameters().containsKey(serdeProp)) {
        String schemaLoc=mSerde.getParameters().get(serdeProp);
        URI schemaLocURI=null;
        try {
          schemaLocURI=new Path(schemaLoc).toUri();
        }
 catch (        IllegalArgumentException e) {
          badRecords.add(schemaLoc);
        }
        if (schemaLocURI == null) {
          badRecords.add(schemaLoc);
        }
 else {
          if (shouldUpdateURI(schemaLocURI,oldLoc)) {
            String newSchemaLoc=schemaLoc.replaceAll(oldLoc.toString(),newLoc.toString());
            updateLocations.put(schemaLocURI.toString(),newSchemaLoc);
            if (!isDryRun) {
              mSerde.getParameters().put(serdeProp,newSchemaLoc);
            }
          }
        }
      }
    }
    committed=commitTransaction();
    if (committed) {
      retVal=new UpdateSerdeURIRetVal(badRecords,updateLocations);
    }
    return retVal;
  }
  finally {
    if (!committed) {
      rollbackTransaction();
    }
    if (query != null) {
      query.closeAll();
    }
  }
}
