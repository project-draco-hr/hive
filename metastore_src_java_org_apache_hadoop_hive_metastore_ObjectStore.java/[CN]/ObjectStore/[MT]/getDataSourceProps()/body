{
  URL url=classLoader.getResource(JPOX_CONFIG);
  prop=new Properties();
  if (url == null) {
    LOG.info(JPOX_CONFIG + " not found");
  }
 else {
    LOG.info("found resource " + JPOX_CONFIG + " at "+ url);
    try {
      InputStream is=url.openStream();
      if (is == null) {
        throw new RuntimeException("Properties file not found " + JPOX_CONFIG);
      }
      prop.load(is);
    }
 catch (    IOException ex) {
      throw new RuntimeException("could not load: " + JPOX_CONFIG,ex);
    }
  }
  addHiveConfProperty(javax.jdo.Constants.PROPERTY_CONNECTION_URL);
  addHiveConfProperty(javax.jdo.Constants.PROPERTY_CONNECTION_DRIVER_NAME);
  addHiveConfProperty(javax.jdo.Constants.PROPERTY_CONNECTION_USER_NAME);
  addHiveConfProperty(javax.jdo.Constants.PROPERTY_CONNECTION_PASSWORD);
  addHiveConfProperty(javax.jdo.Constants.PROPERTY_NONTRANSACTIONAL_READ);
  addHiveConfProperty(javax.jdo.Constants.PROPERTY_DETACH_ALL_ON_COMMIT);
  addHiveConfProperty(javax.jdo.Constants.PROPERTY_PERSISTENCE_MANAGER_FACTORY_CLASS);
  if (LOG.isDebugEnabled()) {
    for (    Entry<Object,Object> e : prop.entrySet()) {
      LOG.debug(e.getKey() + " = " + e.getValue());
    }
  }
}
