{
  this.split=split;
  this.jc=job;
  this.rrClass=rrClass;
  this.reporter=reporter;
  this.idx=0;
  this.curReader=null;
  this.progress=0;
  isShrinked=false;
  assert(split instanceof Hadoop20Shims.InputSplitShim);
  if (((InputSplitShim)split).isShrinked()) {
    isShrinked=true;
    shrinkedLength=((InputSplitShim)split).getShrinkedLength();
  }
  try {
    rrConstructor=rrClass.getDeclaredConstructor(constructorSignature);
    rrConstructor.setAccessible(true);
  }
 catch (  Exception e) {
    throw new RuntimeException(rrClass.getName() + " does not have valid constructor",e);
  }
  initNextRecordReader(null);
}
