{
  Preconditions.checkState(hasNext());
  if (!readBufferUsed) {
    try {
      if (input == null && output != null) {
        output.close();
        output=null;
        FileInputStream fis=null;
        try {
          fis=new FileInputStream(tmpFile);
          input=new Input(fis);
        }
  finally {
          if (input == null && fis != null) {
            fis.close();
          }
        }
      }
      if (input != null) {
        for (int i=0; i < IN_MEMORY_NUM_ROWS; i++) {
          ObjectPair<HiveKey,BytesWritable> pair=readBuffer[i];
          pair.setFirst(readHiveKey(input));
          pair.setSecond(readValue(input));
        }
        if (input.eof()) {
          input.close();
          input=null;
        }
        rowsInReadBuffer=IN_MEMORY_NUM_ROWS;
        readBufferUsed=true;
        readCursor=0;
      }
 else       if (writeCursor == 1) {
        ObjectPair<HiveKey,BytesWritable> pair=writeBuffer[0];
        Tuple2<HiveKey,BytesWritable> row=new Tuple2<HiveKey,BytesWritable>(pair.getFirst(),pair.getSecond());
        pair.setFirst(null);
        pair.setSecond(null);
        writeCursor=0;
        return row;
      }
 else {
        switchBufferAndResetCursor();
      }
    }
 catch (    Exception e) {
      clear();
      throw new RuntimeException("Failed to load rows from disk",e);
    }
  }
  ObjectPair<HiveKey,BytesWritable> pair=readBuffer[readCursor];
  Tuple2<HiveKey,BytesWritable> row=new Tuple2<HiveKey,BytesWritable>(pair.getFirst(),pair.getSecond());
  pair.setFirst(null);
  pair.setSecond(null);
  if (++readCursor >= rowsInReadBuffer) {
    readBufferUsed=false;
    rowsInReadBuffer=0;
    readCursor=0;
  }
  return row;
}
