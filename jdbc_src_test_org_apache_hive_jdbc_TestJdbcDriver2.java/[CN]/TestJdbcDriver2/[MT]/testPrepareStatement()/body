{
  String sql="from (select count(1) from " + tableName + " where   'not?param?not?param' <> 'not_param??not_param' and ?=? "+ " and 1=? and 2=? and 3.0=? and 4.0=? and 'test\\'string\"'=? and 5=? and ?=? "+ " ) t  select '2011-03-25' ddate,'China',true bv, 10 num limit 10";
  try {
    PreparedStatement ps=con.prepareStatement(sql);
    ps.setBoolean(1,true);
    ps.setBoolean(2,true);
    ps.setShort(3,Short.valueOf("1"));
    ps.setInt(4,2);
    ps.setFloat(5,3f);
    ps.setDouble(6,Double.valueOf(4));
    ps.setString(7,"test'string\"");
    ps.setLong(8,5L);
    ps.setByte(9,(byte)1);
    ps.setByte(10,(byte)1);
    ps.setMaxRows(2);
    assertTrue(true);
    ResultSet res=ps.executeQuery();
    assertNotNull(res);
    while (res.next()) {
      assertEquals("2011-03-25",res.getString("ddate"));
      assertEquals("10",res.getString("num"));
      assertEquals((byte)10,res.getByte("num"));
      assertEquals("2011-03-25",res.getDate("ddate").toString());
      assertEquals(Double.valueOf(10).doubleValue(),res.getDouble("num"),0.1);
      assertEquals(10,res.getInt("num"));
      assertEquals(Short.valueOf("10").shortValue(),res.getShort("num"));
      assertEquals(10L,res.getLong("num"));
      assertEquals(true,res.getBoolean("bv"));
      Object o=res.getObject("ddate");
      assertNotNull(o);
      o=res.getObject("num");
      assertNotNull(o);
    }
    res.close();
    assertTrue(true);
    ps.close();
    assertTrue(true);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.toString());
  }
  Exception expectedException=null;
  try {
    PreparedStatement ps=con.prepareStatement(sql);
    ps.executeQuery();
  }
 catch (  Exception e) {
    expectedException=e;
  }
  assertNotNull("Execute the un-setted sql statement should throw exception",expectedException);
  expectedException=null;
  try {
    PreparedStatement ps=con.prepareStatement(sql);
    ps.setBoolean(1,true);
    ps.setBoolean(2,true);
    ps.executeQuery();
  }
 catch (  Exception e) {
    expectedException=e;
  }
  assertNotNull("Execute the invalid setted sql statement should throw exception",expectedException);
  expectedException=null;
  try {
    PreparedStatement ps=con.prepareStatement(sql);
    ps.setString(1,"wrong");
    assertTrue(true);
    ResultSet res=ps.executeQuery();
    if (!res.next()) {
      throw new Exception("there must be a empty result set");
    }
  }
 catch (  Exception e) {
    expectedException=e;
  }
  assertNotNull("Execute the invalid setted sql statement should throw exception",expectedException);
}
