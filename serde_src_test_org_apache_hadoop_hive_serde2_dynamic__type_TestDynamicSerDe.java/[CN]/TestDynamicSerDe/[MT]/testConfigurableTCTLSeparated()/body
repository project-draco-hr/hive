{
  try {
    ArrayList<String> bye=new ArrayList<String>();
    bye.add("firstString");
    bye.add("secondString");
    LinkedHashMap<String,Integer> another=new LinkedHashMap<String,Integer>();
    another.put("firstKey",1);
    another.put("secondKey",2);
    ArrayList<Object> struct=new ArrayList<Object>();
    struct.add(Integer.valueOf(234));
    struct.add(bye);
    struct.add(another);
    Properties schema=new Properties();
    schema.setProperty(serdeConstants.SERIALIZATION_FORMAT,org.apache.hadoop.hive.serde2.thrift.TCTLSeparatedProtocol.class.getName());
    schema.setProperty(org.apache.hadoop.hive.metastore.api.hive_metastoreConstants.META_TABLE_NAME,"test");
    schema.setProperty(serdeConstants.SERIALIZATION_DDL,"struct test { i32 hello, list<string> bye, map<string,i32> another}");
    schema.setProperty(serdeConstants.SERIALIZATION_LIB,new DynamicSerDe().getClass().toString());
    schema.setProperty(serdeConstants.FIELD_DELIM,"9");
    schema.setProperty(serdeConstants.COLLECTION_DELIM,"1");
    schema.setProperty(serdeConstants.LINE_DELIM,"2");
    schema.setProperty(serdeConstants.MAPKEY_DELIM,"4");
    DynamicSerDe serde=new DynamicSerDe();
    serde.initialize(new Configuration(),schema);
    TCTLSeparatedProtocol prot=(TCTLSeparatedProtocol)serde.oprot_;
    assertTrue(prot.getPrimarySeparator().equals("\u0009"));
    ObjectInspector oi=serde.getObjectInspector();
    BytesWritable bytes=(BytesWritable)serde.serialize(struct,oi);
    hexString(bytes);
    String compare="234" + "\u0009" + "firstString"+ "\u0001"+ "secondString"+ "\u0009"+ "firstKey"+ "\u0004"+ "1"+ "\u0001"+ "secondKey"+ "\u0004"+ "2";
    System.out.println("bytes in text =" + new String(bytes.get(),0,bytes.getSize()) + ">");
    System.out.println("compare to    =" + compare + ">");
    assertTrue(compare.equals(new String(bytes.get(),0,bytes.getSize())));
    Object o=serde.deserialize(bytes);
    System.out.println("o class = " + o.getClass());
    List<?> olist=(List<?>)o;
    System.out.println("o size = " + olist.size());
    System.out.println("o[0] class = " + olist.get(0).getClass());
    System.out.println("o[1] class = " + olist.get(1).getClass());
    System.out.println("o[2] class = " + olist.get(2).getClass());
    System.out.println("o = " + o);
    assertEquals(o,struct);
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw e;
  }
}
