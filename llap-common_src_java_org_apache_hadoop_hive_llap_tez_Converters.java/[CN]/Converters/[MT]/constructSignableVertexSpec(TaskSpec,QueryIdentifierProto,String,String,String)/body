{
  TezTaskAttemptID tId=taskSpec.getTaskAttemptID();
  SignableVertexSpec.Builder builder=SignableVertexSpec.newBuilder();
  builder.setQueryIdentifier(queryIdentifierProto);
  builder.setHiveQueryId(hiveQueryIdString);
  builder.setVertexIndex(tId.getTaskID().getVertexID().getId());
  builder.setDagName(taskSpec.getDAGName());
  builder.setVertexName(taskSpec.getVertexName());
  builder.setVertexParallelism(taskSpec.getVertexParallelism());
  builder.setTokenIdentifier(tokenIdentifier);
  builder.setUser(user);
  if (taskSpec.getProcessorDescriptor() != null) {
    builder.setProcessorDescriptor(convertToProto(taskSpec.getProcessorDescriptor()));
  }
  if (taskSpec.getInputs() != null && !taskSpec.getInputs().isEmpty()) {
    for (    InputSpec inputSpec : taskSpec.getInputs()) {
      builder.addInputSpecs(convertInputSpecToProto(inputSpec));
    }
  }
  if (taskSpec.getOutputs() != null && !taskSpec.getOutputs().isEmpty()) {
    for (    OutputSpec outputSpec : taskSpec.getOutputs()) {
      builder.addOutputSpecs(convertOutputSpecToProto(outputSpec));
    }
  }
  if (taskSpec.getGroupInputs() != null && !taskSpec.getGroupInputs().isEmpty()) {
    for (    GroupInputSpec groupInputSpec : taskSpec.getGroupInputs()) {
      builder.addGroupedInputSpecs(convertGroupInputSpecToProto(groupInputSpec));
    }
  }
  return builder;
}
