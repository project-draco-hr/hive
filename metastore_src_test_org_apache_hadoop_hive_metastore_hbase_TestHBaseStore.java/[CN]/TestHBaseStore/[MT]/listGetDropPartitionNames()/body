{
  String tableName="listParts";
  int startTime=(int)(System.currentTimeMillis() / 1000);
  List<FieldSchema> cols=new ArrayList<FieldSchema>();
  cols.add(new FieldSchema("col1","int","nocomment"));
  SerDeInfo serde=new SerDeInfo("serde","seriallib",null);
  StorageDescriptor sd=new StorageDescriptor(cols,"file:/tmp","input","output",false,0,serde,null,null,emptyParameters);
  List<FieldSchema> partCols=new ArrayList<FieldSchema>();
  partCols.add(new FieldSchema("pc","string",""));
  partCols.add(new FieldSchema("region","string",""));
  Table table=new Table(tableName,DB,"me",startTime,startTime,0,sd,partCols,emptyParameters,null,null,null);
  store.createTable(table);
  String[][] partVals=new String[][]{{"today","north america"},{"tomorrow","europe"}};
  for (  String[] pv : partVals) {
    List<String> vals=new ArrayList<String>();
    for (    String v : pv)     vals.add(v);
    StorageDescriptor psd=new StorageDescriptor(sd);
    psd.setLocation("file:/tmp/pc=" + pv[0] + "/region="+ pv[1]);
    Partition part=new Partition(vals,DB,tableName,startTime,startTime,psd,emptyParameters);
    store.addPartition(part);
  }
  List<String> names=store.listPartitionNames(DB,tableName,(short)-1);
  Assert.assertEquals(2,names.size());
  String[] resultNames=names.toArray(new String[names.size()]);
  Arrays.sort(resultNames);
  Assert.assertArrayEquals(resultNames,new String[]{"pc=today/region=north america","pc=tomorrow/region=europe"});
  List<Partition> parts=store.getPartitionsByNames(DB,tableName,names);
  Assert.assertArrayEquals(partVals[0],parts.get(0).getValues().toArray(new String[2]));
  Assert.assertArrayEquals(partVals[1],parts.get(1).getValues().toArray(new String[2]));
  store.dropPartitions(DB,tableName,names);
  List<Partition> afterDropParts=store.getPartitions(DB,tableName,-1);
  Assert.assertEquals(0,afterDropParts.size());
}
