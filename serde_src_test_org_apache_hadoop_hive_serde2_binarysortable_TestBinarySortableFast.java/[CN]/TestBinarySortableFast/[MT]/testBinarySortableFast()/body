{
  try {
    int num=1000;
    Random r=new Random(1234);
    MyTestPrimitiveClass myTestPrimitiveClasses[]=new MyTestPrimitiveClass[num];
    Map<Object,PrimitiveTypeInfo[]> primitiveTypeInfoMap=new HashMap<Object,PrimitiveTypeInfo[]>();
    for (int i=0; i < num; i++) {
      int randField=r.nextInt(MyTestPrimitiveClass.primitiveCount);
      MyTestPrimitiveClass t=new MyTestPrimitiveClass();
      int field=0;
      ExtraTypeInfo extraTypeInfo=new ExtraTypeInfo();
      t.randomFill(r,randField,field,extraTypeInfo);
      myTestPrimitiveClasses[i]=t;
      PrimitiveTypeInfo[] primitiveTypeInfos=MyTestPrimitiveClass.getPrimitiveTypeInfos(extraTypeInfo);
      primitiveTypeInfoMap.put(t,primitiveTypeInfos);
    }
    StructObjectInspector rowOI=(StructObjectInspector)ObjectInspectorFactory.getReflectionObjectInspector(MyTestPrimitiveClass.class,ObjectInspectorOptions.JAVA);
    TestBinarySortableSerDe.sort(myTestPrimitiveClasses,rowOI);
    String fieldNames=ObjectInspectorUtils.getFieldNames(rowOI);
    String fieldTypes=ObjectInspectorUtils.getFieldTypes(rowOI);
    String order;
    order=StringUtils.leftPad("",MyTestPrimitiveClass.primitiveCount,'+');
    SerDe serde_ascending=TestBinarySortableSerDe.getSerDe(fieldNames,fieldTypes,order);
    order=StringUtils.leftPad("",MyTestPrimitiveClass.primitiveCount,'-');
    SerDe serde_descending=TestBinarySortableSerDe.getSerDe(fieldNames,fieldTypes,order);
    boolean[] columnSortOrderIsDesc=new boolean[MyTestPrimitiveClass.primitiveCount];
    Arrays.fill(columnSortOrderIsDesc,false);
    testBinarySortableFast(myTestPrimitiveClasses,columnSortOrderIsDesc,serde_ascending,rowOI,true,primitiveTypeInfoMap);
    Arrays.fill(columnSortOrderIsDesc,true);
    testBinarySortableFast(myTestPrimitiveClasses,columnSortOrderIsDesc,serde_descending,rowOI,false,primitiveTypeInfoMap);
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw e;
  }
}
