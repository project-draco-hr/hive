{
  LinkedList<DiskRange> input=new LinkedList<DiskRange>();
  Iterator<DiskRange> iter=null;
  int intCount=0, lastInt=-1;
  int resultCount=stuff.length;
  for (  Object obj : stuff) {
    if (obj instanceof Integer) {
      --resultCount;
      assertTrue(intCount >= 0);
      if (intCount == 0) {
        lastInt=(Integer)obj;
        intCount=1;
      }
 else {
        input.add(new DiskRange(lastInt,(Integer)obj));
        intCount=0;
      }
      continue;
    }
 else     if (intCount >= 0) {
      assertTrue(intCount == 0);
      assertFalse(input.isEmpty());
      intCount=-1;
      cache.getFileData(fileName,input,0);
      assertEquals(resultCount,input.size());
      iter=input.iterator();
    }
    assertTrue(iter.hasNext());
    DiskRange next=iter.next();
    if (obj instanceof LlapMemoryBuffer) {
      assertTrue(next instanceof CacheChunk);
      assertSame(obj,((CacheChunk)next).buffer);
    }
 else {
      assertTrue(next.equals(obj));
    }
  }
}
