{
  Configuration conf=createConf();
  final LowLevelCacheImpl cache=new LowLevelCacheImpl(conf,new DummyCachePolicy(10),new DummyAllocator(),1);
  final String fn1="file1".intern(), fn2="file2".intern();
  final int offsetsToUse=8;
  final CountDownLatch cdlIn=new CountDownLatch(4), cdlOut=new CountDownLatch(1);
  final AtomicInteger rdmsDone=new AtomicInteger(0);
  Callable<Long> rdmCall=new Callable<Long>(){
    public Long call(){
      int gets=0, puts=0;
      try {
        Random rdm=new Random(1234 + Thread.currentThread().getId());
        syncThreadStart(cdlIn,cdlOut);
        for (int i=0; i < 20000; ++i) {
          boolean isGet=rdm.nextBoolean(), isFn1=rdm.nextBoolean();
          String fileName=isFn1 ? fn1 : fn2;
          int fileIndex=isFn1 ? 1 : 2;
          int count=rdm.nextInt(offsetsToUse);
          LinkedList<DiskRange> input=new LinkedList<DiskRange>();
          int[] offsets=new int[count];
          for (int j=0; j < count; ++j) {
            int next=rdm.nextInt(offsetsToUse);
            input.add(dr(next,next + 1));
            offsets[j]=next;
          }
          if (isGet) {
            cache.getFileData(fileName,input,0);
            int j=-1;
            for (            DiskRange dr : input) {
              ++j;
              if (!(dr instanceof CacheChunk))               continue;
              ++gets;
              LlapCacheableBuffer result=(LlapCacheableBuffer)((CacheChunk)dr).buffer;
              assertEquals(makeFakeArenaIndex(fileIndex,offsets[j]),result.arenaIndex);
              cache.releaseBuffer(result);
            }
          }
 else {
            LlapMemoryBuffer[] buffers=new LlapMemoryBuffer[count];
            for (int j=0; j < offsets.length; ++j) {
              LlapCacheableBuffer buf=LowLevelCacheImpl.allocateFake();
              buf.incRef();
              buf.arenaIndex=makeFakeArenaIndex(fileIndex,offsets[j]);
              buffers[j]=buf;
            }
            long[] mask=cache.putFileData(fileName,input.toArray(new DiskRange[count]),buffers,0);
            puts+=buffers.length;
            long maskVal=0;
            if (mask != null) {
              assertEquals(1,mask.length);
              maskVal=mask[0];
            }
            for (int j=0; j < offsets.length; ++j) {
              LlapCacheableBuffer buf=(LlapCacheableBuffer)(buffers[j]);
              if ((maskVal & 1) == 1) {
                assertEquals(makeFakeArenaIndex(fileIndex,offsets[j]),buf.arenaIndex);
              }
              maskVal>>=1;
              cache.releaseBuffer(buf);
            }
          }
        }
      }
  finally {
        rdmsDone.incrementAndGet();
      }
      return (((long)gets) << 32) | puts;
    }
    private int makeFakeArenaIndex(    int fileIndex,    long offset){
      return (int)((fileIndex << 16) + offset);
    }
  }
;
  FutureTask<Integer> evictionTask=new FutureTask<Integer>(new Callable<Integer>(){
    public Integer call(){
      boolean isFirstFile=false;
      Random rdm=new Random(1234 + Thread.currentThread().getId());
      LinkedList<DiskRange> input=new LinkedList<DiskRange>();
      DiskRange allOffsets=new DiskRange(0,offsetsToUse + 1);
      int evictions=0;
      syncThreadStart(cdlIn,cdlOut);
      while (rdmsDone.get() < 3) {
        input.clear();
        input.add(allOffsets);
        isFirstFile=!isFirstFile;
        String fileName=isFirstFile ? fn1 : fn2;
        cache.getFileData(fileName,input,0);
        DiskRange[] results=input.toArray(new DiskRange[input.size()]);
        int startIndex=rdm.nextInt(input.size()), index=startIndex;
        LlapCacheableBuffer victim=null;
        do {
          DiskRange r=results[index];
          if (r instanceof CacheChunk) {
            LlapCacheableBuffer result=(LlapCacheableBuffer)((CacheChunk)r).buffer;
            cache.releaseBuffer(result);
            if (victim == null && result.invalidate()) {
              ++evictions;
              victim=result;
            }
          }
          ++index;
          if (index == results.length)           index=0;
        }
 while (index != startIndex);
        if (victim == null)         continue;
        cache.notifyEvicted(victim);
      }
      return evictions;
    }
  }
);
  FutureTask<Long> rdmTask1=new FutureTask<Long>(rdmCall), rdmTask2=new FutureTask<Long>(rdmCall), rdmTask3=new FutureTask<Long>(rdmCall);
  Executor threadPool=Executors.newFixedThreadPool(4);
  threadPool.execute(rdmTask1);
  threadPool.execute(rdmTask2);
  threadPool.execute(rdmTask3);
  threadPool.execute(evictionTask);
  try {
    cdlIn.await();
    cdlOut.countDown();
    long result1=rdmTask1.get(), result2=rdmTask2.get(), result3=rdmTask3.get();
    int evictions=evictionTask.get();
    LOG.info("MTT test: task 1: " + descRdmTask(result1) + ", task 2: "+ descRdmTask(result2)+ ", task 3: "+ descRdmTask(result3)+ "; "+ evictions+ " evictions");
  }
 catch (  Throwable t) {
    throw new RuntimeException(t);
  }
}
