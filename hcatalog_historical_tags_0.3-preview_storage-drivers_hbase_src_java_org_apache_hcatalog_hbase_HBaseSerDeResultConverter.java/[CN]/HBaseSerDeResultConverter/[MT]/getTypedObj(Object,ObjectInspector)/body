{
switch (oi.getCategory()) {
case PRIMITIVE:
    return ((PrimitiveObjectInspector)oi).getPrimitiveJavaObject(data);
case MAP:
  MapObjectInspector moi=(MapObjectInspector)oi;
Map<?,?> lazyMap=moi.getMap(data);
ObjectInspector keyOI=moi.getMapKeyObjectInspector();
ObjectInspector valOI=moi.getMapValueObjectInspector();
Map<Object,Object> typedMap=new HashMap<Object,Object>(lazyMap.size());
for (Map.Entry<?,?> e : lazyMap.entrySet()) {
typedMap.put(getTypedObj(e.getKey(),keyOI),getTypedObj(e.getValue(),valOI));
}
return typedMap;
case LIST:
ListObjectInspector loi=(ListObjectInspector)oi;
List<?> lazyList=loi.getList(data);
ObjectInspector elemOI=loi.getListElementObjectInspector();
List<Object> typedList=new ArrayList<Object>(lazyList.size());
Iterator<?> itr=lazyList.listIterator();
while (itr.hasNext()) {
typedList.add(getTypedObj(itr.next(),elemOI));
}
return typedList;
case STRUCT:
StructObjectInspector soi=(StructObjectInspector)oi;
List<? extends StructField> fields=soi.getAllStructFieldRefs();
List<Object> typedStruct=new ArrayList<Object>(fields.size());
for (StructField field : fields) {
typedStruct.add(getTypedObj(soi.getStructFieldData(data,field),field.getFieldObjectInspector()));
}
return typedStruct;
default :
throw new IOException("Don't know how to deserialize: " + oi.getCategory());
}
}
