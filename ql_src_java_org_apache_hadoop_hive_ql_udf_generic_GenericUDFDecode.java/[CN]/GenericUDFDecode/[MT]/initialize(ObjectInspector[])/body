{
  if (arguments.length != 2) {
    throw new UDFArgumentLengthException("Decode() requires exactly two arguments");
  }
  if (arguments[0].getCategory() != Category.PRIMITIVE || ((PrimitiveObjectInspector)arguments[0]).getPrimitiveCategory() != PrimitiveCategory.BINARY) {
    throw new UDFArgumentTypeException(0,"The first argument to Decode() must be a binary");
  }
  bytesOI=(BinaryObjectInspector)arguments[0];
  if (arguments[1].getCategory() != Category.PRIMITIVE) {
    throw new UDFArgumentTypeException(1,"The second argument to Decode() must be primitive");
  }
  charsetOI=(PrimitiveObjectInspector)arguments[1];
  if (PrimitiveGrouping.STRING_GROUP != PrimitiveObjectInspectorUtils.getPrimitiveGrouping(charsetOI.getPrimitiveCategory())) {
    throw new UDFArgumentTypeException(1,"The second argument to Decode() must be from string group");
  }
  if (arguments[1] instanceof ConstantObjectInspector) {
    String charSetName=((ConstantObjectInspector)arguments[1]).getWritableConstantValue().toString();
    decoder=Charset.forName(charSetName).newDecoder().onMalformedInput(CodingErrorAction.REPORT).onUnmappableCharacter(CodingErrorAction.REPORT);
  }
  return (ObjectInspector)PrimitiveObjectInspectorFactory.javaStringObjectInspector;
}
