{
  return new Iterator<FileStatus>(){
    private final RemoteIterator<LocatedFileStatus> inner=fs.listLocatedStatus(path);
    private FileStatus next;
{
      if (inner.hasNext()) {
        next=inner.next();
      }
 else {
        next=null;
      }
    }
    @Override public boolean hasNext(){
      return next != null;
    }
    @Override public FileStatus next(){
      FileStatus result=next;
      next=null;
      try {
        while (inner.hasNext() && next == null) {
          next=inner.next();
          if (filter != null && !filter.accept(next.getPath())) {
            next=null;
          }
        }
      }
 catch (      IOException ioe) {
        throw new IllegalArgumentException("Iterator exception",ioe);
      }
      return result;
    }
    @Override public void remove(){
      throw new IllegalArgumentException("Not supported");
    }
  }
;
}
