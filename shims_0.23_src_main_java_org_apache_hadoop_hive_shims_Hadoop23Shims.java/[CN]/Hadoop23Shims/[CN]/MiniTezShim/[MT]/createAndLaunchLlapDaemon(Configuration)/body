{
  try {
    final String clusterName="llap";
    Class<?> llapDaemonKlass=Class.forName("org.apache.hadoop.hive.llap.daemon.impl.LlapDaemon",false,ShimLoader.class.getClassLoader());
    Method totalMemMethod=llapDaemonKlass.getMethod("getTotalHeapSize");
    final long maxMemory=(long)totalMemMethod.invoke(null);
    final long memoryForCache=(long)(0.15f * maxMemory);
    final long totalExecutorMemory=(long)(0.75f * maxMemory);
    final int numExecutors=conf.getInt("llap.daemon.num.executors",4);
    final boolean asyncIOEnabled=true;
    final boolean directMemoryEnabled=false;
    final int numLocalDirs=1;
    LOG.info("MiniLlap Configs - maxMemory: " + maxMemory + " memoryForCache: "+ memoryForCache+ " totalExecutorMemory: "+ totalExecutorMemory+ " numExecutors: "+ numExecutors+ " asyncIOEnabled: "+ asyncIOEnabled+ " directMemoryEnabled: "+ directMemoryEnabled+ " numLocalDirs: "+ numLocalDirs);
    miniLlapKlass=Class.forName("org.apache.hadoop.hive.llap.daemon.MiniLlapCluster",false,ShimLoader.class.getClassLoader());
    Method create=miniLlapKlass.getMethod("createAndLaunch",new Class[]{Configuration.class,String.class,Integer.TYPE,Long.TYPE,Boolean.TYPE,Boolean.TYPE,Long.TYPE,Integer.TYPE});
    miniLlapCluster=create.invoke(null,conf,clusterName,numExecutors,totalExecutorMemory,asyncIOEnabled,directMemoryEnabled,memoryForCache,numLocalDirs);
  }
 catch (  Exception e) {
    LOG.error("Unable to create MiniLlapCluster. Exception: " + e.getMessage());
    throw new IOException(e);
  }
}
