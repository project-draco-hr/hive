{
  String message="Starting " + CoreCliDriver.class.getName() + " run at "+ System.currentTimeMillis();
  LOG.info(message);
  System.err.println(message);
  final MiniClusterType miniMR=cliConfig.getClusterType();
  final String hiveConfDir=cliConfig.getHiveConfDir();
  final String initScript=cliConfig.getInitScript();
  final String cleanupScript=cliConfig.getCleanupScript();
  final boolean useHBaseMetastore=cliConfig.getMetastoreType() == MetastoreType.hbase;
  try {
    final String hadoopVer=cliConfig.getHadoopVersion();
    qt=new ElapsedTimeLoggingWrapper<QTestUtil>(){
      @Override public QTestUtil invokeInternal() throws Exception {
        return new QTestUtil((cliConfig.getResultsDir()),(cliConfig.getLogDir()),miniMR,hiveConfDir,hadoopVer,initScript,cleanupScript,useHBaseMetastore,true,false,cliConfig.getFsType());
      }
    }
.invoke("QtestUtil instance created",LOG,true);
    new ElapsedTimeLoggingWrapper<Void>(){
      @Override public Void invokeInternal() throws Exception {
        qt.cleanUp();
        return null;
      }
    }
.invoke("Initialization cleanup done.",LOG,true);
    new ElapsedTimeLoggingWrapper<Void>(){
      @Override public Void invokeInternal() throws Exception {
        qt.createSources();
        return null;
      }
    }
.invoke("Initialization createSources done.",LOG,true);
  }
 catch (  Exception e) {
    System.err.println("Exception: " + e.getMessage());
    e.printStackTrace();
    System.err.flush();
    throw new RuntimeException("Unexpected exception in static initialization",e);
  }
}
