{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.dbName=iprot.readString();
        struct.setDbNameIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
    struct.tblName=iprot.readString();
    struct.setTblNameIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
  org.apache.thrift.protocol.TList _list306=iprot.readListBegin();
  struct.colNames=new ArrayList<String>(_list306.size);
  for (int _i307=0; _i307 < _list306.size; ++_i307) {
    String _elem308;
    _elem308=iprot.readString();
    struct.colNames.add(_elem308);
  }
  iprot.readListEnd();
}
struct.setColNamesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list309=iprot.readListBegin();
struct.partNames=new ArrayList<String>(_list309.size);
for (int _i310=0; _i310 < _list309.size; ++_i310) {
String _elem311;
_elem311=iprot.readString();
struct.partNames.add(_elem311);
}
iprot.readListEnd();
}
struct.setPartNamesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
