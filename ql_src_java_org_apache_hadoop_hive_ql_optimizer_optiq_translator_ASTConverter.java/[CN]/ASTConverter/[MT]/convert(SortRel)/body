{
  new QBVisitor().go(root);
  QueryBlockInfo qb=convertSource(from);
  schema=qb.schema;
  hiveAST.from=ASTBuilder.construct(HiveParser.TOK_FROM,"TOK_FROM").add(qb.ast).node();
  if (where != null) {
    ASTNode cond=where.getCondition().accept(new RexVisitor(schema));
    hiveAST.where=ASTBuilder.where(cond);
  }
  if (groupBy != null) {
    ASTBuilder b=ASTBuilder.construct(HiveParser.TOK_GROUPBY,"TOK_GROUPBY");
    for (    int i : BitSets.toIter(groupBy.getGroupSet())) {
      RexInputRef iRef=new RexInputRef(i,groupBy.getCluster().getTypeFactory().createSqlType(SqlTypeName.ANY));
      b.add(iRef.accept(new RexVisitor(schema)));
    }
    if (!groupBy.getGroupSet().isEmpty())     hiveAST.groupBy=b.node();
    schema=new Schema(schema,groupBy);
  }
  if (having != null) {
    ASTNode cond=having.getCondition().accept(new RexVisitor(schema));
    hiveAST.having=ASTBuilder.having(cond);
  }
  ASTBuilder b=ASTBuilder.construct(HiveParser.TOK_SELECT,"TOK_SELECT");
  if (select.getChildExps().isEmpty()) {
    RexLiteral r=select.getCluster().getRexBuilder().makeExactLiteral(new BigDecimal(1));
    ASTNode selectExpr=ASTBuilder.selectExpr(ASTBuilder.literal(r),"1");
    b.add(selectExpr);
  }
 else {
    int i=0;
    for (    RexNode r : select.getChildExps()) {
      ASTNode selectExpr=ASTBuilder.selectExpr(r.accept(new RexVisitor(schema)),select.getRowType().getFieldNames().get(i++));
      b.add(selectExpr);
    }
  }
  hiveAST.select=b.node();
  if (sortrel != null) {
    HiveSortRel hiveSort=(HiveSortRel)sortrel;
    if (!hiveSort.getCollation().getFieldCollations().isEmpty()) {
      ASTNode orderAst=ASTBuilder.createAST(HiveParser.TOK_ORDERBY,"TOK_ORDERBY");
      schema=new Schema((HiveSortRel)sortrel);
      for (      RelFieldCollation c : hiveSort.getCollation().getFieldCollations()) {
        ColumnInfo cI=schema.get(c.getFieldIndex());
        ASTNode astCol=ASTBuilder.unqualifiedName(cI.column);
        ASTNode astNode=c.getDirection() == RelFieldCollation.Direction.ASCENDING ? ASTBuilder.createAST(HiveParser.TOK_TABSORTCOLNAMEASC,"TOK_TABSORTCOLNAMEASC") : ASTBuilder.createAST(HiveParser.TOK_TABSORTCOLNAMEDESC,"TOK_TABSORTCOLNAMEDESC");
        astNode.addChild(astCol);
        orderAst.addChild(astNode);
      }
      hiveAST.order=orderAst;
    }
    RexNode limitExpr=hiveSort.getFetchExpr();
    if (limitExpr != null) {
      Object val=((RexLiteral)limitExpr).getValue2();
      hiveAST.limit=ASTBuilder.limit(val);
    }
  }
  return hiveAST.getAST();
}
