{
  String loaderString=storageDriverArgs.getProperty(HCatConstants.HCAT_PIG_LOADER);
  if (loaderString == null) {
    throw new HCatException(ErrorType.ERROR_INIT_LOADER,"Don't know how to instantiate loader, " + HCatConstants.HCAT_PIG_LOADER + " property is not defined for table ");
  }
  String loaderArgs=storageDriverArgs.getProperty(HCatConstants.HCAT_PIG_LOADER_ARGS);
  String[] args;
  if (loaderArgs != null) {
    String delimit=storageDriverArgs.getProperty(HCatConstants.HCAT_PIG_ARGS_DELIMIT);
    if (delimit == null) {
      delimit=HCatConstants.HCAT_PIG_ARGS_DELIMIT_DEFAULT;
    }
    args=loaderArgs.split(delimit);
  }
 else {
    args=new String[0];
  }
  try {
    Class loaderClass=Class.forName(loaderString);
    Constructor[] constructors=loaderClass.getConstructors();
    for (    Constructor constructor : constructors) {
      if (constructor.getParameterTypes().length == args.length) {
        lf=(LoadFunc)constructor.newInstance(args);
        break;
      }
    }
  }
 catch (  Exception e) {
    throw new HCatException(ErrorType.ERROR_INIT_LOADER,"Cannot instantiate " + loaderString,e);
  }
  if (lf == null) {
    throw new HCatException(ErrorType.ERROR_INIT_LOADER,"Cannot instantiate " + loaderString + " with construct args "+ loaderArgs);
  }
  String innerSignature=context.getConfiguration().get(HCatLoader.INNER_SIGNATURE);
  lf.setUDFContextSignature(innerSignature);
  lf.setLocation(location,new Job(context.getConfiguration()));
  inputFormat=new LoadFuncBasedInputFormat(lf,PigHCatUtil.getResourceSchema(dataSchema),location,context.getConfiguration());
}
