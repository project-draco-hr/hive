{
  DynamicSerDeConstMapContents jjtn000=new DynamicSerDeConstMapContents(JJTCONSTMAPCONTENTS);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  try {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case tok_int_constant:
case tok_double_constant:
case IDENTIFIER:
case tok_literal:
case 61:
case 64:
      label_6:       while (true) {
        ConstValue();
        jj_consume_token(66);
        ConstValue();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 59:
case 60:
          CommaOrSemicolon();
        break;
default :
      jj_la1[17]=jj_gen;
    ;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case tok_int_constant:
case tok_double_constant:
case IDENTIFIER:
case tok_literal:
case 61:
case 64:
  ;
break;
default :
jj_la1[18]=jj_gen;
break label_6;
}
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
break;
default :
jj_la1[19]=jj_gen;
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
if (true) return jjtn000;
}
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
}
}
throw new Error("Missing return statement in function");
}
