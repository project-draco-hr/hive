{
  DynamicSerDeFunction jjtn000=new DynamicSerDeFunction(JJTFUNCTION);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  try {
    Async();
    FunctionType();
    jjtn000.name=jj_consume_token(IDENTIFIER).image;
    jj_consume_token(67);
    FieldList();
    jj_consume_token(68);
    Throws();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 59:
case 60:
      CommaOrSemicolon();
    break;
default :
  jj_la1[22]=jj_gen;
;
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
this.tables.put(jjtn000.name,jjtn000);
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
}
}
throw new Error("Missing return statement in function");
}
