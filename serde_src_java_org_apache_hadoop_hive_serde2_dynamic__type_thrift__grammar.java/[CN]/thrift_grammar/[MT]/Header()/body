{
  DynamicSerDeHeader jjtn000=new DynamicSerDeHeader(JJTHEADER);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  try {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case tok_include:
      Include();
    jjtree.closeNodeScope(jjtn000,true);
  jjtc000=false;
{
  if (true)   return jjtn000;
}
break;
case tok_namespace:
case tok_cpp_namespace:
case tok_cpp_include:
case tok_java_package:
case tok_cocoa_prefix:
case tok_csharp_namespace:
case tok_php_namespace:
case tok_py_module:
case tok_perl_package:
case tok_ruby_namespace:
case tok_smalltalk_category:
case tok_smalltalk_prefix:
case tok_xsd_namespace:
Namespace();
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
if (true) return jjtn000;
}
break;
default :
jj_la1[3]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
}
}
throw new Error("Missing return statement in function");
}
