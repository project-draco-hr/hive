{
  DynamicSerDeField jjtn000=new DynamicSerDeField(JJTFIELD);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  String fidnum="";
  String fid;
  try {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case tok_int_constant:
      fidnum=jj_consume_token(tok_int_constant).image;
    jj_consume_token(66);
  break;
default :
jj_la1[26]=jj_gen;
;
}
FieldRequiredness();
FieldType();
jjtn000.name=jj_consume_token(IDENTIFIER).image;
FieldValue();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 59:
case 60:
CommaOrSemicolon();
break;
default :
jj_la1[27]=jj_gen;
;
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
if (fidnum.length() > 0) {
int fidInt=Integer.valueOf(fidnum);
jjtn000.fieldid=fidInt;
}
 else {
jjtn000.fieldid=this.field_val--;
}
{
if (true) return jjtn000;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
}
}
throw new Error("Missing return statement in function");
}
