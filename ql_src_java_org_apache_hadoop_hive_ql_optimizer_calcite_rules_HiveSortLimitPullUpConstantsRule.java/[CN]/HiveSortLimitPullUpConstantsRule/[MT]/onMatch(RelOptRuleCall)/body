{
  final RelNode parent=call.rel(0);
  final Sort sort=call.rel(1);
  final int count=sort.getInput().getRowType().getFieldCount();
  if (count == 1) {
    return;
  }
  final RexBuilder rexBuilder=sort.getCluster().getRexBuilder();
  final RelMetadataQuery mq=RelMetadataQuery.instance();
  final RelOptPredicateList predicates=mq.getPulledUpPredicates(sort.getInput());
  if (predicates == null) {
    return;
  }
  Map<RexNode,RexNode> conditionsExtracted=HiveReduceExpressionsRule.predicateConstants(RexNode.class,rexBuilder,predicates);
  Map<RexNode,RexNode> constants=new HashMap<>();
  for (int i=0; i < count; i++) {
    RexNode expr=rexBuilder.makeInputRef(sort.getInput(),i);
    if (conditionsExtracted.containsKey(expr)) {
      constants.put(expr,conditionsExtracted.get(expr));
    }
  }
  if (constants.isEmpty()) {
    return;
  }
  if (count == constants.size()) {
    constants.remove(constants.keySet().iterator().next());
  }
  List<RelDataTypeField> fields=sort.getInput().getRowType().getFieldList();
  List<Pair<RexNode,String>> newChildExprs=new ArrayList<>();
  List<RexNode> topChildExprs=new ArrayList<>();
  List<String> topChildExprsFields=new ArrayList<>();
  for (int i=0; i < count; i++) {
    RexNode expr=rexBuilder.makeInputRef(sort.getInput(),i);
    RelDataTypeField field=fields.get(i);
    if (constants.containsKey(expr)) {
      topChildExprs.add(constants.get(expr));
      topChildExprsFields.add(field.getName());
    }
 else {
      newChildExprs.add(Pair.<RexNode,String>of(expr,field.getName()));
      topChildExprs.add(expr);
      topChildExprsFields.add(field.getName());
    }
  }
  final Mappings.TargetMapping mapping=RelOptUtil.permutation(Pair.left(newChildExprs),sort.getInput().getRowType()).inverse();
  List<RelFieldCollation> fieldCollations=new ArrayList<>();
  for (  RelFieldCollation fc : sort.getCollation().getFieldCollations()) {
    final int target=mapping.getTargetOpt(fc.getFieldIndex());
    if (target < 0) {
      continue;
    }
    fieldCollations.add(fc.copy(target));
  }
  topChildExprs=ImmutableList.copyOf(RexUtil.apply(mapping,topChildExprs));
  final RelBuilder relBuilder=call.builder();
  relBuilder.push(sort.getInput());
  relBuilder.project(Pair.left(newChildExprs),Pair.right(newChildExprs));
  final ImmutableList<RexNode> sortFields=relBuilder.fields(RelCollations.of(fieldCollations));
  relBuilder.sortLimit(sort.offset == null ? -1 : RexLiteral.intValue(sort.offset),sort.fetch == null ? -1 : RexLiteral.intValue(sort.fetch),sortFields);
  relBuilder.project(topChildExprs,topChildExprsFields);
  call.transformTo(parent.copy(parent.getTraitSet(),ImmutableList.of(relBuilder.build())));
}
