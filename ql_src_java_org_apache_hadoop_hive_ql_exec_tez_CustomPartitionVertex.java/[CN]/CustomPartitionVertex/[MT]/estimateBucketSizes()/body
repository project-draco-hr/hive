{
  Map<Integer,Long> bucketSizeMap=new HashMap<Integer,Long>();
  Map<Integer,Collection<InputSplit>> bucketSplitMap=bucketToInitialSplitMap.asMap();
  long totalSize=0;
  for (  int bucketId : bucketSplitMap.keySet()) {
    Long size=0L;
    Collection<InputSplit> inputSplitCollection=bucketSplitMap.get(bucketId);
    Iterator<InputSplit> iter=inputSplitCollection.iterator();
    while (iter.hasNext()) {
      FileSplit fsplit=(FileSplit)iter.next();
      size+=fsplit.getLength();
      totalSize+=fsplit.getLength();
    }
    bucketSizeMap.put(bucketId,size);
  }
  int totalResource=context.getTotalAVailableResource().getMemory();
  int taskResource=context.getVertexTaskResource().getMemory();
  float waves=conf.getFloat(TezConfiguration.TEZ_AM_GROUPING_SPLIT_WAVES,TezConfiguration.TEZ_AM_GROUPING_SPLIT_WAVES_DEFAULT);
  int numTasks=(int)((totalResource * waves) / taskResource);
  LOG.info("Total resource: " + totalResource + " Task Resource: "+ taskResource+ " waves: "+ waves+ " total size of splits: "+ totalSize+ " total number of tasks: "+ numTasks);
  for (  int bucketId : bucketSizeMap.keySet()) {
    int numEstimatedTasks=0;
    if (totalSize != 0) {
      numEstimatedTasks=(int)(numTasks * bucketSizeMap.get(bucketId) / totalSize);
    }
    LOG.info("Estimated number of tasks: " + numEstimatedTasks + " for bucket "+ bucketId);
    if (numEstimatedTasks == 0) {
      numEstimatedTasks=1;
    }
    bucketToNumTaskMap.put(bucketId,numEstimatedTasks);
  }
}
