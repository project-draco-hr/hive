{
  List<SplitInfo> result=new ArrayList<>(files.size());
  FooterCache cache=context.cacheStripeDetails ? ((deltas == null || deltas.isEmpty()) ? context.footerCache : Context.localCache) : null;
  if (cache != null) {
    FileInfo[] infos=new FileInfo[files.size()];
    ByteBuffer[] ppdResults=null;
    if (cache.hasPpd()) {
      ppdResults=new ByteBuffer[files.size()];
    }
    try {
      cache.getAndValidate(files,isOriginal,infos,ppdResults);
    }
 catch (    HiveException e) {
      throw new IOException(e);
    }
    int dirIx=-1, fileInDirIx=-1, filesInDirCount=0;
    ETLDir dir=null;
    for (int i=0; i < files.size(); ++i) {
      if ((++fileInDirIx) == filesInDirCount) {
        dir=dirs.get(++dirIx);
        filesInDirCount=dir.fileCount;
      }
      FileInfo info=infos[i];
      ByteBuffer ppdResult=ppdResults == null ? null : ppdResults[i];
      HdfsFileStatusWithId file=files.get(i);
      if (info != null) {
        context.cacheHitCounter.incrementAndGet();
      }
      if (ppdResult != FooterCache.NO_SPLIT_AFTER_PPD && file.getFileStatus().getLen() > 0) {
        result.add(new SplitInfo(context,dir.fs,file,info,isOriginal,deltas,true,dir.dir,covered,ppdResult));
      }
    }
  }
 else {
    int dirIx=-1, fileInDirIx=-1, filesInDirCount=0;
    ETLDir dir=null;
    for (    HdfsFileStatusWithId file : files) {
      if ((++fileInDirIx) == filesInDirCount) {
        dir=dirs.get(++dirIx);
        filesInDirCount=dir.fileCount;
      }
      if (file.getFileStatus().getLen() > 0) {
        result.add(new SplitInfo(context,dir.fs,file,null,isOriginal,deltas,true,dir.dir,covered,null));
      }
    }
  }
  return result;
}
