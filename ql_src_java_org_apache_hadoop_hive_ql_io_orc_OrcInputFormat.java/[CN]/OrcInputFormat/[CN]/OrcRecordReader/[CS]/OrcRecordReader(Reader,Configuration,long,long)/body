{
  String serializedPushdown=conf.get(TableScanDesc.FILTER_EXPR_CONF_STR);
  String columnNamesString=conf.get(ColumnProjectionUtils.READ_COLUMN_NAMES_CONF_STR);
  String[] columnNames=null;
  SearchArgument sarg=null;
  List<OrcProto.Type> types=file.getTypes();
  if (types.size() == 0) {
    numColumns=0;
  }
 else {
    numColumns=types.get(0).getSubtypesCount();
  }
  columnNames=new String[types.size()];
  LOG.info("included column ids = " + conf.get(ColumnProjectionUtils.READ_COLUMN_IDS_CONF_STR,"null"));
  LOG.info("included columns names = " + conf.get(ColumnProjectionUtils.READ_COLUMN_NAMES_CONF_STR,"null"));
  boolean[] includeColumn=findIncludedColumns(types,conf);
  if (serializedPushdown != null && columnNamesString != null) {
    sarg=SearchArgument.FACTORY.create(Utilities.deserializeExpression(serializedPushdown,conf));
    LOG.info("ORC pushdown predicate: " + sarg);
    String[] neededColumnNames=columnNamesString.split(",");
    int i=0;
    for (    int columnId : types.get(0).getSubtypesList()) {
      if (includeColumn == null || includeColumn[columnId]) {
        columnNames[columnId]=neededColumnNames[i++];
      }
    }
  }
 else {
    LOG.info("No ORC pushdown predicate");
  }
  this.reader=file.rows(offset,length,includeColumn,sarg,columnNames);
  this.offset=offset;
  this.length=length;
}
