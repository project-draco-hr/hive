{
  boolean vectorMode=Utilities.getUseVectorizedInputFileFormat(conf);
  boolean isAcidRead=isAcidRead(conf,inputSplit);
  if (!isAcidRead) {
    if (vectorMode) {
      return createVectorizedReader(inputSplit,conf,reporter);
    }
 else {
      OrcFile.ReaderOptions readerOptions=OrcFile.readerOptions(conf);
      if (inputSplit instanceof OrcSplit) {
        OrcSplit split=(OrcSplit)inputSplit;
        readerOptions.maxLength(split.getFileLength()).orcTail(split.getOrcTail());
      }
      return new OrcRecordReader(OrcFile.createReader(((FileSplit)inputSplit).getPath(),readerOptions),conf,(FileSplit)inputSplit);
    }
  }
  reporter.setStatus(inputSplit.toString());
  boolean isFastVectorizedReaderAvailable=VectorizedOrcAcidRowBatchReader.canCreateVectorizedAcidRowBatchReaderOnSplit(conf,inputSplit);
  if (vectorMode && isFastVectorizedReaderAvailable) {
    return (org.apache.hadoop.mapred.RecordReader)new VectorizedOrcAcidRowBatchReader(inputSplit,conf,reporter);
  }
  Options options=new Options(conf).reporter(reporter);
  final RowReader<OrcStruct> inner=getReader(inputSplit,options);
  if (vectorMode && !isFastVectorizedReaderAvailable) {
    return (org.apache.hadoop.mapred.RecordReader)new VectorizedOrcAcidRowReader(inner,conf,Utilities.getMapWork(conf).getVectorizedRowBatchCtx(),(FileSplit)inputSplit);
  }
 else {
    return new NullKeyRecordReader(inner,conf);
  }
}
