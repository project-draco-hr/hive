{
  Context context=new Context(conf);
  boolean useFileIds=HiveConf.getBoolVar(conf,ConfVars.HIVE_ORC_INCLUDE_FILE_ID_IN_SPLITS);
  List<OrcSplit> splits=Lists.newArrayList();
  List<Future<?>> pathFutures=Lists.newArrayList();
  List<Future<?>> splitFutures=Lists.newArrayList();
  for (  Path dir : getInputPaths(conf)) {
    FileSystem fs=dir.getFileSystem(conf);
    FileGenerator fileGenerator=new FileGenerator(context,fs,dir,useFileIds);
    pathFutures.add(context.threadPool.submit(fileGenerator));
  }
  try {
    for (    Future<?> pathFuture : pathFutures) {
      SplitStrategy splitStrategy=(SplitStrategy)pathFuture.get();
      if (isDebugEnabled) {
        LOG.debug(splitStrategy);
      }
      if (splitStrategy instanceof ETLSplitStrategy) {
        List<SplitInfo> splitInfos=splitStrategy.getSplits();
        for (        SplitInfo splitInfo : splitInfos) {
          splitFutures.add(context.threadPool.submit(new SplitGenerator(splitInfo)));
        }
      }
 else {
        splits.addAll(splitStrategy.getSplits());
      }
    }
    for (    Future<?> splitFuture : splitFutures) {
      splits.addAll((Collection<? extends OrcSplit>)splitFuture.get());
    }
  }
 catch (  Exception e) {
    cancelFutures(pathFutures);
    cancelFutures(splitFutures);
    throw new RuntimeException("serious problem",e);
  }
  if (context.cacheStripeDetails) {
    LOG.info("FooterCacheHitRatio: " + context.cacheHitCounter.get() + "/"+ context.numFilesCounter.get());
  }
  if (isDebugEnabled) {
    for (    OrcSplit split : splits) {
      LOG.debug(split + " projected_columns_uncompressed_size: " + split.getProjectedColumnsUncompressedSize());
    }
  }
  return splits;
}
