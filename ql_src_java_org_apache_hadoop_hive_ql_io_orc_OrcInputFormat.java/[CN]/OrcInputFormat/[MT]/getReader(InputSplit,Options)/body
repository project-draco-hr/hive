{
  final OrcSplit split=(OrcSplit)inputSplit;
  final Path path=split.getPath();
  Path root;
  if (split.hasBase()) {
    if (split.isOriginal()) {
      root=path.getParent();
    }
 else {
      root=path.getParent().getParent();
    }
  }
 else {
    root=path;
  }
  AcidUtils.AcidOperationalProperties acidOperationalProperties=AcidUtils.getAcidOperationalProperties(options.getConfiguration());
  final Path[] deltas=acidOperationalProperties.isSplitUpdate() ? AcidUtils.deserializeDeleteDeltas(root,split.getDeltas()) : AcidUtils.deserializeDeltas(root,split.getDeltas());
  final Configuration conf=options.getConfiguration();
  final Reader reader=OrcInputFormat.createOrcReaderForSplit(conf,split);
  final int bucket=OrcInputFormat.getBucketForSplit(conf,split);
  final Reader.Options readOptions=OrcInputFormat.createOptionsForReader(conf);
  readOptions.range(split.getStart(),split.getLength());
  String txnString=conf.get(ValidTxnList.VALID_TXNS_KEY);
  ValidTxnList validTxnList=txnString == null ? new ValidReadTxnList() : new ValidReadTxnList(txnString);
  final OrcRawRecordMerger records=new OrcRawRecordMerger(conf,true,reader,split.isOriginal(),bucket,validTxnList,readOptions,deltas);
  return new RowReader<OrcStruct>(){
    OrcStruct innerRecord=records.createValue();
    @Override public ObjectInspector getObjectInspector(){
      return OrcStruct.createObjectInspector(0,OrcUtils.getOrcTypes(readOptions.getSchema()));
    }
    @Override public boolean next(    RecordIdentifier recordIdentifier,    OrcStruct orcStruct) throws IOException {
      boolean result;
      do {
        result=records.next(recordIdentifier,innerRecord);
      }
 while (result && OrcRecordUpdater.getOperation(innerRecord) == OrcRecordUpdater.DELETE_OPERATION);
      if (result) {
        orcStruct.linkFields(OrcRecordUpdater.getRow(innerRecord));
      }
      return result;
    }
    @Override public RecordIdentifier createKey(){
      return records.createKey();
    }
    @Override public OrcStruct createValue(){
      return new OrcStruct(records.getColumns());
    }
    @Override public long getPos() throws IOException {
      return records.getPos();
    }
    @Override public void close() throws IOException {
      records.close();
    }
    @Override public float getProgress() throws IOException {
      return records.getProgress();
    }
  }
;
}
