{
  Context context=new Context(conf,numSplits);
  List<OrcSplit> splits=Lists.newArrayList();
  List<Future<AcidDirInfo>> pathFutures=Lists.newArrayList();
  List<Future<List<OrcSplit>>> splitFutures=Lists.newArrayList();
  boolean useFileIds=HiveConf.getBoolVar(conf,ConfVars.HIVE_ORC_INCLUDE_FILE_ID_IN_SPLITS);
  Path[] paths=getInputPaths(conf);
  CompletionService<AcidDirInfo> ecs=new ExecutorCompletionService<>(Context.threadPool);
  for (  Path dir : paths) {
    FileSystem fs=dir.getFileSystem(conf);
    FileGenerator fileGenerator=new FileGenerator(context,fs,dir,useFileIds);
    pathFutures.add(ecs.submit(fileGenerator));
  }
  try {
    for (int notIndex=0; notIndex < paths.length; ++notIndex) {
      AcidDirInfo adi=ecs.take().get();
      SplitStrategy<?> splitStrategy=determineSplitStrategy(context,adi.fs,adi.splitPath,adi.acidInfo,adi.baseOrOriginalFiles);
      if (isDebugEnabled) {
        LOG.debug(splitStrategy);
      }
      if (splitStrategy instanceof ETLSplitStrategy) {
        List<SplitInfo> splitInfos=((ETLSplitStrategy)splitStrategy).getSplits();
        for (        SplitInfo splitInfo : splitInfos) {
          splitFutures.add(Context.threadPool.submit(new SplitGenerator(splitInfo)));
        }
      }
 else {
        @SuppressWarnings("unchecked") List<OrcSplit> readySplits=(List<OrcSplit>)splitStrategy.getSplits();
        splits.addAll(readySplits);
      }
    }
    for (    Future<List<OrcSplit>> splitFuture : splitFutures) {
      splits.addAll(splitFuture.get());
    }
  }
 catch (  Exception e) {
    cancelFutures(pathFutures);
    cancelFutures(splitFutures);
    throw new RuntimeException("serious problem",e);
  }
  if (context.cacheStripeDetails) {
    LOG.info("FooterCacheHitRatio: " + context.cacheHitCounter.get() + "/"+ context.numFilesCounter.get());
  }
  if (isDebugEnabled) {
    for (    OrcSplit split : splits) {
      LOG.debug(split + " projected_columns_uncompressed_size: " + split.getProjectedColumnsUncompressedSize());
    }
  }
  return splits;
}
