{
  StringBuilder sb=new StringBuilder();
  Formatter formatter=new Formatter(sb,Locale.US);
  String pattern=((StringObjectInspector)argumentOIs[0]).getPrimitiveJavaObject(arguments[0].get());
  ArrayList argumentList=new ArrayList();
  for (int i=1; i < arguments.length; i++) {
switch (((PrimitiveObjectInspector)argumentOIs[i]).getPrimitiveCategory()) {
case BOOLEAN:
      argumentList.add(((BooleanObjectInspector)argumentOIs[i]).get(arguments[i].get()));
    break;
case BYTE:
  argumentList.add(((ByteObjectInspector)argumentOIs[i]).get(arguments[i].get()));
break;
case SHORT:
argumentList.add(((ShortObjectInspector)argumentOIs[i]).get(arguments[i].get()));
break;
case INT:
argumentList.add(((IntObjectInspector)argumentOIs[i]).get(arguments[i].get()));
break;
case LONG:
argumentList.add(((LongObjectInspector)argumentOIs[i]).get(arguments[i].get()));
break;
case FLOAT:
argumentList.add(((FloatObjectInspector)argumentOIs[i]).get(arguments[i].get()));
break;
case DOUBLE:
argumentList.add(((DoubleObjectInspector)argumentOIs[i]).get(arguments[i].get()));
break;
case STRING:
argumentList.add(((StringObjectInspector)argumentOIs[i]).getPrimitiveJavaObject(arguments[i].get()));
break;
case TIMESTAMP:
argumentList.add(((TimestampObjectInspector)argumentOIs[i]).getPrimitiveJavaObject(arguments[i].get()));
break;
case BINARY:
argumentList.add(arguments[i].get());
break;
default :
argumentList.add(arguments[i].get());
break;
}
}
formatter.format(pattern,argumentList.toArray());
resultText.set(sb.toString());
return resultText;
}
