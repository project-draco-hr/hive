{
  final String HBASE_TABLE_NAME="HiveExternalTable";
  HTableDescriptor htableDesc=new HTableDescriptor(HBASE_TABLE_NAME.getBytes());
  HColumnDescriptor hcolDesc=new HColumnDescriptor("cf".getBytes());
  htableDesc.addFamily(hcolDesc);
  boolean[] booleans=new boolean[]{true,false,true};
  byte[] bytes=new byte[]{Byte.MIN_VALUE,-1,Byte.MAX_VALUE};
  short[] shorts=new short[]{Short.MIN_VALUE,-1,Short.MAX_VALUE};
  int[] ints=new int[]{Integer.MIN_VALUE,-1,Integer.MAX_VALUE};
  long[] longs=new long[]{Long.MIN_VALUE,-1,Long.MAX_VALUE};
  String[] strings=new String[]{"Hadoop, HBase,","Hive","Test Strings"};
  float[] floats=new float[]{Float.MIN_VALUE,-1.0F,Float.MAX_VALUE};
  double[] doubles=new double[]{Double.MIN_VALUE,-1.0,Double.MAX_VALUE};
  HBaseAdmin hbaseAdmin=null;
  HTableInterface htable=null;
  try {
    hbaseAdmin=new HBaseAdmin(hbaseConn.getConfiguration());
    if (Arrays.asList(hbaseAdmin.listTables()).contains(htableDesc)) {
      return;
    }
    hbaseAdmin.createTable(htableDesc);
    htable=hbaseConn.getTable(HBASE_TABLE_NAME);
    Put[] puts=new Put[]{new Put("key-1".getBytes()),new Put("key-2".getBytes()),new Put("key-3".getBytes())};
    for (int i=0; i < puts.length; i++) {
      puts[i].add("cf".getBytes(),"cq-boolean".getBytes(),Bytes.toBytes(booleans[i]));
      puts[i].add("cf".getBytes(),"cq-byte".getBytes(),new byte[]{bytes[i]});
      puts[i].add("cf".getBytes(),"cq-short".getBytes(),Bytes.toBytes(shorts[i]));
      puts[i].add("cf".getBytes(),"cq-int".getBytes(),Bytes.toBytes(ints[i]));
      puts[i].add("cf".getBytes(),"cq-long".getBytes(),Bytes.toBytes(longs[i]));
      puts[i].add("cf".getBytes(),"cq-string".getBytes(),Bytes.toBytes(strings[i]));
      puts[i].add("cf".getBytes(),"cq-float".getBytes(),Bytes.toBytes(floats[i]));
      puts[i].add("cf".getBytes(),"cq-double".getBytes(),Bytes.toBytes(doubles[i]));
      htable.put(puts[i]);
    }
  }
  finally {
    if (htable != null)     htable.close();
    if (hbaseAdmin != null)     hbaseAdmin.close();
  }
}
