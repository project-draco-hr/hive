{
  if (predicate.getKind() != SqlKind.EQUALS) {
    decompose(excludeSet,predicate);
    return;
  }
  final List<RexNode> operands=((RexCall)predicate).getOperands();
  if (operands.size() != 2) {
    decompose(excludeSet,predicate);
    return;
  }
  final RexNode left=operands.get(0);
  final RexNode right=operands.get(1);
  if (right instanceof RexLiteral && !excludeSet.contains(left)) {
    RexLiteral existedValue=map.get(left);
    if (existedValue == null) {
      map.put(left,(RexLiteral)right);
    }
 else {
      if (!existedValue.getValue().equals(((RexLiteral)right).getValue())) {
        map.remove(left);
        excludeSet.add(left);
      }
    }
  }
 else   if (left instanceof RexLiteral && !excludeSet.contains(right)) {
    RexLiteral existedValue=map.get(right);
    if (existedValue == null) {
      map.put(right,(RexLiteral)left);
    }
 else {
      if (!existedValue.getValue().equals(((RexLiteral)left).getValue())) {
        map.remove(right);
        excludeSet.add(right);
      }
    }
  }
}
