{
  List<Object> row;
  PTFRowContainer<List<Object>> rc=rowContainer(blockSize);
  int i;
  for (i=0; i < sz; i++) {
    row=new ArrayList<Object>();
    row.add(new IntWritable(i));
    row.add(new Text("abc " + i));
    row.add(new DoubleWritable(i));
    row.add(new IntWritable(i));
    row.add(new Text("def " + i));
    rc.add(row);
  }
  assert(rc.rowCount() == sz);
  i=0;
  row=new ArrayList<Object>();
  row=rc.first();
  while (row != null) {
    assert(row.get(1).toString().equals("abc " + i));
    i++;
    row=rc.next();
  }
  row=rc.first();
  for (i=sz - 1; i >= 0; i--) {
    row=rc.getAt(i);
    assert(row.get(1).toString().equals("abc " + i));
  }
  Random r=new Random(1000L);
  for (i=0; i < 100; i++) {
    int j=r.nextInt(sz);
    row=rc.getAt(j);
    assert(row.get(1).toString().equals("abc " + j));
  }
  for (i=0; i < 100; i++) {
    int j=r.nextInt(sz);
    row=rc.getAt(j);
    assert(row.get(1).toString().equals("abc " + j));
    for (int k=j + 1; k < j + (blockSize / 4) && k < sz; k++) {
      row=rc.next();
      assert(row.get(4).toString().equals("def " + k));
    }
  }
}
