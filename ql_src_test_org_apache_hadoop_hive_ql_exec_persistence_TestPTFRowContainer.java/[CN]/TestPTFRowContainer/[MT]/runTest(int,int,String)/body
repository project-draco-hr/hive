{
  List<Object> row;
  PTFRowContainer<List<Object>> rc=rowContainer(blockSize);
  int i;
  for (i=0; i < sz; i++) {
    row=new ArrayList<Object>();
    row.add(new IntWritable(i));
    row.add(new Text("abc " + i));
    row.add(new DoubleWritable(i));
    row.add(new IntWritable(i));
    row.add(new Text("def " + i));
    row.add(new Text(value));
    rc.addRow(row);
  }
  assertEquals(sz,rc.rowCount());
  i=0;
  row=new ArrayList<Object>();
  row=rc.first();
  while (row != null) {
    assertEquals("abc " + i,row.get(1).toString());
    i++;
    row=rc.next();
  }
  row=rc.first();
  for (i=sz - 1; i >= 0; i--) {
    row=rc.getAt(i);
    assertEquals("abc " + i,row.get(1).toString());
  }
  Random r=new Random(1000L);
  for (i=0; i < 100; i++) {
    int j=r.nextInt(sz);
    row=rc.getAt(j);
    assertEquals("abc " + j,row.get(1).toString());
  }
  for (i=0; i < 100; i++) {
    int j=r.nextInt(sz);
    row=rc.getAt(j);
    assertEquals("abc " + j,row.get(1).toString());
    for (int k=j + 1; k < j + (blockSize / 4) && k < sz; k++) {
      row=rc.next();
      assertEquals("def " + k,row.get(4).toString());
    }
  }
}
