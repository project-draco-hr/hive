{
  if (!deep) {
    return null;
  }
  GenericUDF hiveUDF=null;
  try {
    hiveUDF=SqlFunctionConverter.getHiveUDF(call.getOperator(),call.getType(),call.operands.size());
    if (hiveUDF != null && !FunctionRegistry.isDeterministic(hiveUDF)) {
      return null;
    }
  }
  finally {
    if (hiveUDF != null) {
      try {
        hiveUDF.close();
      }
 catch (      IOException e) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Exception in closing " + hiveUDF,e);
        }
      }
    }
  }
  List<RexNode> args=new LinkedList<RexNode>();
  boolean argsPruned=false;
  for (  RexNode operand : call.operands) {
    RexNode n=operand.accept(this);
    if (n != null) {
      args.add(n);
    }
 else {
      argsPruned=true;
    }
  }
  if (call.getOperator() != SqlStdOperatorTable.AND) {
    return argsPruned ? null : call;
  }
 else {
    if (args.size() == 0) {
      return null;
    }
 else     if (args.size() == 1) {
      return args.get(0);
    }
 else {
      return cluster.getRexBuilder().makeCall(call.getOperator(),args);
    }
  }
}
