{
  int mm_size=mHash.size();
  MRUItem itm=mHash.get(key);
  if (mm_size < threshold) {
    if (itm != null) {
      itm.value=value;
      MRUList.moveToHead(itm);
      if (!mHash.get(key).value.equals(value))       LOG.error("HashMapWrapper.put() reuse MRUItem inconsistency [1].");
      assert(mHash.get(key).value.equals(value));
    }
 else {
      try {
        if (pHash != null && pHash.get(key) != null) {
          pHash.remove(key);
          pHash.put(key,value);
          recman.commit();
          return;
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        throw new HiveException(e);
      }
      itm=new MRUItem(key,value);
      MRUList.put(itm);
      mHash.put(key,itm);
    }
  }
 else {
    if (itm != null) {
      itm.value=value;
      MRUList.moveToHead(itm);
      if (!mHash.get(key).value.equals(value))       LOG.error("HashMapWrapper.put() reuse MRUItem inconsistency [2].");
      assert(mHash.get(key).value.equals(value));
    }
 else {
      if (pHash == null) {
        pHash=getPersistentHash();
      }
      try {
        pHash.put(key,value);
        recman.commit();
      }
 catch (      Exception e) {
        LOG.warn(e.toString());
        throw new HiveException(e);
      }
    }
  }
}
