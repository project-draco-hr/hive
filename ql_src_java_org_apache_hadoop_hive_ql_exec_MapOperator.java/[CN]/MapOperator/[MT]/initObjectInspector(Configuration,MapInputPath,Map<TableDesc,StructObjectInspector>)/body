{
  PartitionDesc pd=ctx.partDesc;
  TableDesc td=pd.getTableDesc();
  MapOpCtx opCtx=new MapOpCtx();
  Properties partProps=isPartitioned(pd) ? pd.getOverlayedProperties() : pd.getTableDesc().getProperties();
  Map<String,String> partSpec=pd.getPartSpec();
  opCtx.tableName=String.valueOf(partProps.getProperty("name"));
  opCtx.partName=String.valueOf(partSpec);
  Class serdeclass=pd.getDeserializerClass();
  if (serdeclass == null) {
    String className=checkSerdeClassName(pd.getSerdeClassName(),opCtx.tableName);
    serdeclass=hconf.getClassByName(className);
  }
  opCtx.deserializer=(Deserializer)serdeclass.newInstance();
  opCtx.deserializer.initialize(hconf,partProps);
  StructObjectInspector partRawRowObjectInspector=(StructObjectInspector)opCtx.deserializer.getObjectInspector();
  opCtx.tblRawRowObjectInspector=convertedOI.get(td);
  opCtx.partTblObjectInspectorConverter=ObjectInspectorConverters.getConverter(partRawRowObjectInspector,opCtx.tblRawRowObjectInspector);
  String pcols=partProps.getProperty(hive_metastoreConstants.META_TABLE_PARTITION_COLUMNS);
  if (pcols != null && pcols.length() > 0) {
    String[] partKeys=pcols.trim().split("/");
    List<String> partNames=new ArrayList<String>(partKeys.length);
    Object[] partValues=new Object[partKeys.length];
    List<ObjectInspector> partObjectInspectors=new ArrayList<ObjectInspector>(partKeys.length);
    for (int i=0; i < partKeys.length; i++) {
      String key=partKeys[i];
      partNames.add(key);
      if (partSpec == null) {
        partValues[i]=null;
      }
 else {
        partValues[i]=new Text(partSpec.get(key));
      }
      partObjectInspectors.add(PrimitiveObjectInspectorFactory.writableStringObjectInspector);
    }
    opCtx.rowWithPart=new Object[]{null,partValues};
    opCtx.partObjectInspector=ObjectInspectorFactory.getStandardStructObjectInspector(partNames,partObjectInspectors);
  }
  if (ctx.op instanceof TableScanOperator) {
    TableScanOperator tsOp=(TableScanOperator)ctx.op;
    TableScanDesc tsDesc=tsOp.getConf();
    if (tsDesc != null && tsDesc.hasVirtualCols()) {
      opCtx.vcs=tsDesc.getVirtualCols();
      opCtx.vcValues=new Writable[opCtx.vcs.size()];
      opCtx.vcsObjectInspector=VirtualColumn.getVCSObjectInspector(opCtx.vcs);
      if (opCtx.isPartitioned()) {
        opCtx.rowWithPartAndVC=Arrays.copyOfRange(opCtx.rowWithPart,0,3);
      }
 else {
        opCtx.rowWithPartAndVC=new Object[2];
      }
    }
  }
  if (!opCtx.hasVC() && !opCtx.isPartitioned()) {
    opCtx.rowObjectInspector=opCtx.tblRawRowObjectInspector;
    return opCtx;
  }
  List<StructObjectInspector> inspectors=new ArrayList<StructObjectInspector>();
  inspectors.add(opCtx.tblRawRowObjectInspector);
  if (opCtx.isPartitioned()) {
    inspectors.add(opCtx.partObjectInspector);
  }
  if (opCtx.hasVC()) {
    inspectors.add(opCtx.vcsObjectInspector);
  }
  opCtx.rowObjectInspector=ObjectInspectorFactory.getUnionStructObjectInspector(inspectors);
  return opCtx;
}
