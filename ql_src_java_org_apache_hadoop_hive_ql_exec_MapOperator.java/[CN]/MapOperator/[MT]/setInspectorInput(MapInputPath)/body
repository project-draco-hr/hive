{
  Operator<? extends Serializable> op=inp.getOp();
  deserializer=opCtxMap.get(inp).getDeserializer();
  isPartitioned=opCtxMap.get(inp).isPartitioned();
  rowWithPart=opCtxMap.get(inp).getRowWithPart();
  rowObjectInspector=opCtxMap.get(inp).getRowObjectInspector();
  if (listInputPaths.contains(inp)) {
    return;
  }
  listInputPaths.add(inp);
  StructObjectInspector rawRowObjectInspector=opCtxMap.get(inp).rawRowObjectInspector;
  StructObjectInspector partObjectInspector=opCtxMap.get(inp).partObjectInspector;
  if (op instanceof TableScanOperator) {
    TableScanOperator tsOp=(TableScanOperator)op;
    TableScanDesc tsDesc=tsOp.getConf();
    if (tsDesc != null) {
      this.vcs=tsDesc.getVirtualCols();
      if (vcs != null && vcs.size() > 0) {
        this.hasVC=true;
        List<String> vcNames=new ArrayList<String>(vcs.size());
        this.vcValues=new Writable[vcs.size()];
        List<ObjectInspector> vcsObjectInspectors=new ArrayList<ObjectInspector>(vcs.size());
        for (int i=0; i < vcs.size(); i++) {
          VirtualColumn vc=vcs.get(i);
          vcsObjectInspectors.add(PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(((PrimitiveTypeInfo)vc.getTypeInfo()).getPrimitiveCategory()));
          vcNames.add(vc.getName());
        }
        StructObjectInspector vcStructObjectInspector=ObjectInspectorFactory.getStandardStructObjectInspector(vcNames,vcsObjectInspectors);
        if (isPartitioned) {
          this.rowWithPartAndVC=new Object[3];
          this.rowWithPartAndVC[1]=this.rowWithPart[1];
        }
 else {
          this.rowWithPartAndVC=new Object[2];
        }
        if (partObjectInspector == null) {
          this.rowObjectInspector=ObjectInspectorFactory.getUnionStructObjectInspector(Arrays.asList(new StructObjectInspector[]{rowObjectInspector,vcStructObjectInspector}));
        }
 else {
          this.rowObjectInspector=ObjectInspectorFactory.getUnionStructObjectInspector(Arrays.asList(new StructObjectInspector[]{rawRowObjectInspector,partObjectInspector,vcStructObjectInspector}));
        }
        opCtxMap.get(inp).rowObjectInspector=this.rowObjectInspector;
      }
    }
  }
}
