{
  PartitionDesc td=conf.getPathToPartitionInfo().get(onefile);
  LinkedHashMap<String,String> partSpec=td.getPartSpec();
  Properties tblProps=td.getProperties();
  Class sdclass=td.getDeserializerClass();
  if (sdclass == null) {
    String className=td.getSerdeClassName();
    if ((className == "") || (className == null)) {
      throw new HiveException("SerDe class or the SerDe class name is not set for table: " + td.getProperties().getProperty("name"));
    }
    sdclass=hconf.getClassByName(className);
  }
  String tableName=String.valueOf(tblProps.getProperty("name"));
  String partName=String.valueOf(partSpec);
  Deserializer deserializer=(Deserializer)sdclass.newInstance();
  deserializer.initialize(hconf,tblProps);
  StructObjectInspector rowObjectInspector=(StructObjectInspector)deserializer.getObjectInspector();
  MapOpCtx opCtx=null;
  String pcols=tblProps.getProperty(org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_PARTITION_COLUMNS);
  if (pcols != null && pcols.length() > 0) {
    String[] partKeys=pcols.trim().split("/");
    List<String> partNames=new ArrayList<String>(partKeys.length);
    Object[] partValues=new Object[partKeys.length];
    List<ObjectInspector> partObjectInspectors=new ArrayList<ObjectInspector>(partKeys.length);
    for (int i=0; i < partKeys.length; i++) {
      String key=partKeys[i];
      partNames.add(key);
      if (partSpec == null) {
        partValues[i]=new Text();
      }
 else {
        partValues[i]=new Text(partSpec.get(key));
      }
      partObjectInspectors.add(PrimitiveObjectInspectorFactory.writableStringObjectInspector);
    }
    StructObjectInspector partObjectInspector=ObjectInspectorFactory.getStandardStructObjectInspector(partNames,partObjectInspectors);
    Object[] rowWithPart=new Object[2];
    rowWithPart[1]=partValues;
    rowObjectInspector=ObjectInspectorFactory.getUnionStructObjectInspector(Arrays.asList(new StructObjectInspector[]{rowObjectInspector,partObjectInspector}));
    opCtx=new MapOpCtx(true,rowObjectInspector,rowWithPart,deserializer);
  }
 else {
    opCtx=new MapOpCtx(false,rowObjectInspector,null,deserializer);
  }
  opCtx.tableName=tableName;
  opCtx.partName=partName;
  return opCtx;
}
