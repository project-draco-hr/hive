{
  if ((this.getExecContext() != null) && this.getExecContext().inputFileChanged()) {
    cleanUpInputFileChanged();
  }
  Object row=null;
  try {
    if (this.hasVC) {
      this.rowWithPartAndVC[0]=deserializer.deserialize(value);
      int vcPos=isPartitioned ? 2 : 1;
      populateVirtualColumnValues();
      this.rowWithPartAndVC[vcPos]=this.vcValues;
    }
 else     if (!isPartitioned) {
      row=deserializer.deserialize((Writable)value);
    }
 else {
      rowWithPart[0]=deserializer.deserialize((Writable)value);
    }
  }
 catch (  Exception e) {
    String rawRowString;
    try {
      rawRowString=value.toString();
    }
 catch (    Exception e2) {
      rawRowString="[Error getting row data with exception " + StringUtils.stringifyException(e2) + " ]";
    }
    deserialize_error_count.set(deserialize_error_count.get() + 1);
    throw new HiveException("Hive Runtime Error while processing writable " + rawRowString,e);
  }
  try {
    if (this.hasVC) {
      forward(this.rowWithPartAndVC,this.rowObjectInspector);
    }
 else     if (!isPartitioned) {
      forward(row,rowObjectInspector);
    }
 else {
      forward(rowWithPart,rowObjectInspector);
    }
  }
 catch (  Exception e) {
    String rowString;
    try {
      if (this.hasVC) {
        rowString=SerDeUtils.getJSONString(rowWithPartAndVC,rowObjectInspector);
      }
 else       if (!isPartitioned) {
        rowString=SerDeUtils.getJSONString(row,rowObjectInspector);
      }
 else {
        rowString=SerDeUtils.getJSONString(rowWithPart,rowObjectInspector);
      }
    }
 catch (    Exception e2) {
      rowString="[Error getting row data with exception " + StringUtils.stringifyException(e2) + " ]";
    }
    throw new HiveException("Hive Runtime Error while processing row " + rowString,e);
  }
}
