{
  try {
    conf.setBoolVar(ConfVars.HIVE_SERVER2_ENABLE_DOAS,false);
    conf.setVar(ConfVars.HIVE_SERVER2_TEZ_DEFAULT_QUEUES,"default,tezq1");
    conf.setIntVar(ConfVars.HIVE_SERVER2_TEZ_SESSIONS_PER_DEFAULT_QUEUE,1);
    poolManager=new TestTezSessionPoolManager();
    TezSessionState session=Mockito.mock(TezSessionState.class);
    Mockito.when(session.getQueueName()).thenReturn("default");
    Mockito.when(session.isDefault()).thenReturn(false);
    Mockito.when(session.getConf()).thenReturn(conf);
    poolManager.reopenSession(session,conf,null,false);
    Mockito.verify(session).close(false);
    String[] files=null;
    Mockito.verify(session).open(conf,files);
    assertEquals("default",session.getQueueName());
    conf.set("tez.queue.name","tezq1");
    poolManager.reopenSession(session,conf,null,false);
    assertEquals("tezq1",poolManager.getSession(null,conf,false,false).getQueueName());
    conf.unset("tez.queue.name");
    poolManager.reopenSession(session,conf,null,false);
    assertEquals("default",poolManager.getSession(null,conf,false,false).getQueueName());
    conf.unset("tez.queue.name");
    Mockito.when(session.getQueueName()).thenReturn("tezq1");
    poolManager.reopenSession(session,conf,null,false);
    assertEquals("tezq1",poolManager.getSession(null,conf,false,false).getQueueName());
    conf.set("tez.queue.name","default");
    poolManager.reopenSession(session,conf,null,false);
    assertEquals("default",poolManager.getSession(null,conf,false,false).getQueueName());
    conf.unset("tez.queue.name");
    poolManager.reopenSession(session,conf,null,false);
    assertEquals("tezq1",poolManager.getSession(null,conf,false,false).getQueueName());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail();
  }
}
