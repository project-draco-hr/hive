{
  Category category=objectInspector.getCategory();
switch (category) {
case PRIMITIVE:
    PrimitiveCategory primitiveCategory=((PrimitiveObjectInspector)objectInspector).getPrimitiveCategory();
switch (primitiveCategory) {
case VOID:
case BOOLEAN:
case BYTE:
    recordInfo.elementOffset=0;
  recordInfo.elementSize=1;
break;
case SHORT:
recordInfo.elementOffset=0;
recordInfo.elementSize=2;
break;
case FLOAT:
recordInfo.elementOffset=0;
recordInfo.elementSize=4;
break;
case DOUBLE:
recordInfo.elementOffset=0;
recordInfo.elementSize=8;
break;
case INT:
recordInfo.elementOffset=0;
recordInfo.elementSize=WritableUtils.decodeVIntSize(bytes[offset]);
break;
case LONG:
recordInfo.elementOffset=0;
recordInfo.elementSize=WritableUtils.decodeVIntSize(bytes[offset]);
break;
case STRING:
LazyBinaryUtils.readVInt(bytes,offset,vInt);
recordInfo.elementOffset=vInt.length;
recordInfo.elementSize=vInt.value;
break;
default :
{
throw new RuntimeException("Unrecognized primitive type: " + primitiveCategory);
}
}
break;
case LIST:
case MAP:
case STRUCT:
recordInfo.elementOffset=4;
recordInfo.elementSize=LazyBinaryUtils.byteArrayToInt(bytes,offset);
break;
default :
{
throw new RuntimeException("Unrecognized non-primitive type: " + category);
}
}
}
