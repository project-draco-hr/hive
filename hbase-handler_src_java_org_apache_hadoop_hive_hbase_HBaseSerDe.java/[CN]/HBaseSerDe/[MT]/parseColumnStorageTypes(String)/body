{
  boolean tableBinaryStorage=false;
  if (hbaseTableDefaultStorageType != null && !"".equals(hbaseTableDefaultStorageType)) {
    if (hbaseTableDefaultStorageType.equals("binary")) {
      tableBinaryStorage=true;
    }
 else     if (!hbaseTableDefaultStorageType.equals("string")) {
      throw new SerDeException("Error: " + HBASE_TABLE_DEFAULT_STORAGE_TYPE + " parameter must be specified as"+ " 'string' or 'binary'; '"+ hbaseTableDefaultStorageType+ "' is not a valid specification for this table/serde property.");
    }
  }
  List<TypeInfo> columnTypes=serdeParams.getColumnTypes();
  for (int i=0; i < columnsMapping.size(); i++) {
    ColumnMapping colMap=columnsMapping.get(i);
    TypeInfo colType=columnTypes.get(i);
    String mappingSpec=colMap.mappingSpec;
    String[] mapInfo=mappingSpec.split("#");
    String[] storageInfo=null;
    if (mapInfo.length == 2) {
      storageInfo=mapInfo[1].split(":");
    }
    if (storageInfo == null) {
      if (colType.getCategory() == Category.PRIMITIVE) {
        if (!colType.getTypeName().equals(serdeConstants.STRING_TYPE_NAME)) {
          colMap.binaryStorage.add(tableBinaryStorage);
        }
 else {
          colMap.binaryStorage.add(false);
        }
      }
 else       if (colType.getCategory() == Category.MAP) {
        TypeInfo keyTypeInfo=((MapTypeInfo)colType).getMapKeyTypeInfo();
        TypeInfo valueTypeInfo=((MapTypeInfo)colType).getMapValueTypeInfo();
        if (keyTypeInfo.getCategory() == Category.PRIMITIVE && !keyTypeInfo.getTypeName().equals(serdeConstants.STRING_TYPE_NAME)) {
          colMap.binaryStorage.add(tableBinaryStorage);
        }
 else {
          colMap.binaryStorage.add(false);
        }
        if (valueTypeInfo.getCategory() == Category.PRIMITIVE && !valueTypeInfo.getTypeName().equals(serdeConstants.STRING_TYPE_NAME)) {
          colMap.binaryStorage.add(tableBinaryStorage);
        }
 else {
          colMap.binaryStorage.add(false);
        }
      }
 else {
        colMap.binaryStorage.add(false);
      }
    }
 else     if (storageInfo.length == 1) {
      String storageOption=storageInfo[0];
      if ((colType.getCategory() == Category.MAP) || !(storageOption.equals("-") || "string".startsWith(storageOption) || "binary".startsWith(storageOption))) {
        throw new SerDeException("Error: A column storage specification is one of the following:" + " '-', a prefix of 'string', or a prefix of 'binary'. " + storageOption + " is not a valid storage option specification for "+ serdeParams.getColumnNames().get(i));
      }
      if (colType.getCategory() == Category.PRIMITIVE && !colType.getTypeName().equals(serdeConstants.STRING_TYPE_NAME)) {
        if ("-".equals(storageOption)) {
          colMap.binaryStorage.add(tableBinaryStorage);
        }
 else         if ("binary".startsWith(storageOption)) {
          colMap.binaryStorage.add(true);
        }
 else {
          colMap.binaryStorage.add(false);
        }
      }
 else {
        colMap.binaryStorage.add(false);
      }
    }
 else     if (storageInfo.length == 2) {
      String keyStorage=storageInfo[0];
      String valStorage=storageInfo[1];
      if ((colType.getCategory() != Category.MAP) || !(keyStorage.equals("-") || "string".startsWith(keyStorage) || "binary".startsWith(keyStorage)) || !(valStorage.equals("-") || "string".startsWith(valStorage) || "binary".startsWith(valStorage))) {
        throw new SerDeException("Error: To specify a valid column storage type for a Map" + " column, use any two specifiers from '-', a prefix of 'string', " + " and a prefix of 'binary' separated by a ':'."+ " Valid examples are '-:-', 's:b', etc. They specify the storage type for the"+ " key and value parts of the Map<?,?> respectively."+ " Invalid storage specification for column " + serdeParams.getColumnNames().get(i) + "; "+ storageInfo[0]+ ":"+ storageInfo[1]);
      }
      TypeInfo keyTypeInfo=((MapTypeInfo)colType).getMapKeyTypeInfo();
      TypeInfo valueTypeInfo=((MapTypeInfo)colType).getMapValueTypeInfo();
      if (keyTypeInfo.getCategory() == Category.PRIMITIVE && !keyTypeInfo.getTypeName().equals(serdeConstants.STRING_TYPE_NAME)) {
        if (keyStorage.equals("-")) {
          colMap.binaryStorage.add(tableBinaryStorage);
        }
 else         if ("binary".startsWith(keyStorage)) {
          colMap.binaryStorage.add(true);
        }
 else {
          colMap.binaryStorage.add(false);
        }
      }
 else {
        colMap.binaryStorage.add(false);
      }
      if (valueTypeInfo.getCategory() == Category.PRIMITIVE && !valueTypeInfo.getTypeName().equals(serdeConstants.STRING_TYPE_NAME)) {
        if (valStorage.equals("-")) {
          colMap.binaryStorage.add(tableBinaryStorage);
        }
 else         if ("binary".startsWith(valStorage)) {
          colMap.binaryStorage.add(true);
        }
 else {
          colMap.binaryStorage.add(false);
        }
      }
 else {
        colMap.binaryStorage.add(false);
      }
      if (colMap.binaryStorage.size() != 2) {
        throw new SerDeException("Error: In parsing the storage specification for column " + serdeParams.getColumnNames().get(i));
      }
    }
 else {
      throw new SerDeException("Error: " + HBASE_COLUMNS_MAPPING + " storage specification "+ mappingSpec+ " is not valid for column: "+ serdeParams.getColumnNames().get(i));
    }
  }
}
