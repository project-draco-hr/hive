{
  if (objInspector.getCategory() != Category.STRUCT) {
    throw new SerDeException(getClass().toString() + " can only serialize struct types, but we got: " + objInspector.getTypeName());
  }
  StructObjectInspector soi=(StructObjectInspector)objInspector;
  List<? extends StructField> fields=soi.getAllStructFieldRefs();
  List<Object> list=soi.getStructFieldsDataAsList(obj);
  List<? extends StructField> declaredFields=(serdeParams.getRowTypeInfo() != null && ((StructTypeInfo)serdeParams.getRowTypeInfo()).getAllStructFieldNames().size() > 0) ? ((StructObjectInspector)getObjectInspector()).getAllStructFieldRefs() : null;
  BatchUpdate batchUpdate;
  try {
    byte[] key=serializeField(iKey,HBASE_KEY_COL,null,fields,list,declaredFields);
    if (key == null) {
      throw new SerDeException("HBase row key cannot be NULL");
    }
    batchUpdate=new BatchUpdate(key);
    for (int i=0; i < fields.size(); i++) {
      if (i == iKey) {
        continue;
      }
      String hbaseColumn=hbaseColumnNames.get(i);
      serializeField(i,hbaseColumn,batchUpdate,fields,list,declaredFields);
    }
  }
 catch (  IOException e) {
    throw new SerDeException(e);
  }
  return batchUpdate;
}
