{
  Path testDir=new Path(System.getProperty("test.tmp.dir",".") + "/mapred/testsmallfirstsplit");
  Path testFile=new Path(testDir,"test_rcfile");
  fs.delete(testFile,true);
  Configuration cloneConf=new Configuration(conf);
  RCFileOutputFormat.setColumnNumber(cloneConf,bytesArray.length);
  cloneConf.setInt(RCFile.RECORD_INTERVAL_CONF_STR,intervalRecordCount);
  RCFile.Writer writer=new RCFile.Writer(fs,cloneConf,testFile,null,codec);
  BytesRefArrayWritable bytes=new BytesRefArrayWritable(bytesArray.length);
  for (int i=0; i < bytesArray.length; i++) {
    BytesRefWritable cu=null;
    cu=new BytesRefWritable(bytesArray[i],0,bytesArray[i].length);
    bytes.set(i,cu);
  }
  for (int i=0; i < writeCount; i++) {
    if (i == intervalRecordCount) {
      System.out.println("write position:" + writer.getLength());
    }
    writer.append(bytes);
  }
  writer.close();
  RCFileInputFormat inputFormat=new RCFileInputFormat();
  JobConf jonconf=new JobConf(cloneConf);
  jonconf.set("mapred.input.dir",testDir.toString());
  jonconf.setLong("mapred.min.split.size",minSplitSize);
  InputSplit[] splits=inputFormat.getSplits(jonconf,splitNumber);
  assertEquals("splits length should be " + splitNumber,splits.length,splitNumber);
  int readCount=0;
  for (int i=0; i < splits.length; i++) {
    int previousReadCount=readCount;
    RecordReader rr=inputFormat.getRecordReader(splits[i],jonconf,Reporter.NULL);
    Object key=rr.createKey();
    Object value=rr.createValue();
    while (rr.next(key,value)) {
      readCount++;
    }
    System.out.println("The " + i + "th split read "+ (readCount - previousReadCount));
  }
  assertEquals("readCount should be equal to writeCount",writeCount,readCount);
}
