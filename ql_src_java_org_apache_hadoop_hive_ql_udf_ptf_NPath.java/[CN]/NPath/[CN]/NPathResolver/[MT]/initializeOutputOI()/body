{
  try {
    NPath evaluator=(NPath)getEvaluator();
    PartitionedTableFunctionDef tDef=evaluator.getTableDef();
    ArrayList<PTFExpressionDef> args=tDef.getArgs();
    int argsNum=args.size();
    validateAndSetupPatternStr(evaluator,args);
    validateAndSetupSymbolInfo(evaluator,args,argsNum);
    validateAndSetupResultExprStr(evaluator,args,argsNum);
    setupSymbolFunctionChain(evaluator);
    StructObjectInspector selectListInputOI=NPath.createSelectListOI(evaluator,tDef.getInput());
    ResultExprInfo resultExprInfo=evaluator.resultExprInfo;
    ArrayList<ObjectInspector> selectListExprOIs=new ArrayList<ObjectInspector>();
    resultExprInfo.resultExprEvals=new ArrayList<ExprNodeEvaluator>();
    for (int i=0; i < resultExprInfo.resultExprNodes.size(); i++) {
      ExprNodeDesc selectColumnExprNode=resultExprInfo.resultExprNodes.get(i);
      ExprNodeEvaluator selectColumnExprEval=ExprNodeEvaluatorFactory.get(selectColumnExprNode);
      ObjectInspector selectColumnOI=selectColumnExprEval.initialize(selectListInputOI);
      resultExprInfo.resultExprEvals.add(selectColumnExprEval);
      selectListExprOIs.add(selectColumnOI);
    }
    resultExprInfo.resultOI=ObjectInspectorFactory.getStandardStructObjectInspector(resultExprInfo.resultExprNames,selectListExprOIs);
    setOutputOI(resultExprInfo.resultOI);
  }
 catch (  SemanticException se) {
    throw new HiveException(se);
  }
}
