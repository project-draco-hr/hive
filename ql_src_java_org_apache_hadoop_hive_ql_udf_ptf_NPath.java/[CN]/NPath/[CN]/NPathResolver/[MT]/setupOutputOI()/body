{
  NPath evaluator=(NPath)getEvaluator();
  PartitionedTableFunctionDef tDef=evaluator.getTableDef();
  ArrayList<PTFExpressionDef> args=tDef.getArgs();
  int argsNum=args == null ? 0 : args.size();
  if (argsNum < 4) {
    throwErrorWithSignature("at least 4 arguments required");
  }
  validateAndSetupPatternStr(evaluator,args);
  validateAndSetupSymbolInfo(evaluator,args,argsNum);
  validateAndSetupResultExprStr(evaluator,args,argsNum);
  setupSymbolFunctionChain(evaluator);
  RowResolver selectListInputRR=NPath.createSelectListRR(evaluator,tDef.getInput());
  ResultExpressionParser resultExprParser=new ResultExpressionParser(evaluator.resultExprStr,selectListInputRR);
  try {
    resultExprParser.translate();
  }
 catch (  HiveException he) {
    throw new SemanticException(he);
  }
  evaluator.resultExprInfo=resultExprParser.getResultExprInfo();
  StructObjectInspector OI=evaluator.resultExprInfo.resultOI;
  evaluator.selectListNames=new ArrayList<String>();
  extractOIColumnNames(resultExprParser.selectListInputOI,evaluator.selectListNames);
  setOutputOI(OI);
}
