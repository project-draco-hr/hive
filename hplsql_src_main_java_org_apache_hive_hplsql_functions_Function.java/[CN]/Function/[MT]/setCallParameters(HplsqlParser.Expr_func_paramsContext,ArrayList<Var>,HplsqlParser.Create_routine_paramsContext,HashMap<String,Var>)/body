{
  if (actual == null || actual.func_param() == null || actualValues == null) {
    return;
  }
  int actualCnt=actualValues.size();
  int formalCnt=formal.create_routine_param_item().size();
  for (int i=0; i < actualCnt; i++) {
    if (i >= formalCnt) {
      break;
    }
    HplsqlParser.ExprContext a=actual.func_param(i).expr();
    HplsqlParser.Create_routine_param_itemContext p=getCallParameter(actual,formal,i);
    String name=p.ident().getText();
    String type=p.dtype().getText();
    String len=null;
    String scale=null;
    if (p.dtype_len() != null) {
      len=p.dtype_len().L_INT(0).getText();
      if (p.dtype_len().L_INT(1) != null) {
        scale=p.dtype_len().L_INT(1).getText();
      }
    }
    Var var=setCallParameter(name,type,len,scale,actualValues.get(i));
    if (trace) {
      trace(actual,"SET PARAM " + name + " = "+ var.toString());
    }
    if (out != null && a.expr_atom() != null && a.expr_atom().ident() != null && (p.T_OUT() != null || p.T_INOUT() != null)) {
      String actualName=a.expr_atom().ident().getText();
      if (actualName != null) {
        out.put(actualName,var);
      }
    }
  }
}
