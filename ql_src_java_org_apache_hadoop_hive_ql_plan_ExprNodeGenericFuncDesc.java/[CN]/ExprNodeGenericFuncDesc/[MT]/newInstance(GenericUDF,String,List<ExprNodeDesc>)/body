{
  ObjectInspector[] childrenOIs=new ObjectInspector[children.size()];
  for (int i=0; i < childrenOIs.length; i++) {
    childrenOIs[i]=children.get(i).getWritableObjectInspector();
  }
  if (genericUDF instanceof GenericUDFBaseCompare && children.size() == 2) {
    TypeInfo oiTypeInfo0=children.get(0).getTypeInfo();
    TypeInfo oiTypeInfo1=children.get(1).getTypeInfo();
    SessionState ss=SessionState.get();
    Configuration conf=(ss != null) ? ss.getConf() : new Configuration();
    LogHelper console=new LogHelper(LOG);
    if ((oiTypeInfo0.equals(TypeInfoFactory.stringTypeInfo) && oiTypeInfo1.equals(TypeInfoFactory.longTypeInfo)) || (oiTypeInfo0.equals(TypeInfoFactory.longTypeInfo) && oiTypeInfo1.equals(TypeInfoFactory.stringTypeInfo))) {
      if (HiveConf.getVar(conf,HiveConf.ConfVars.HIVEMAPREDMODE).equalsIgnoreCase("strict")) {
        throw new UDFArgumentException(ErrorMsg.NO_COMPARE_BIGINT_STRING.getMsg());
      }
 else {
        console.printError("WARNING: Comparing a bigint and a string may result in a loss of precision.");
      }
    }
 else     if ((oiTypeInfo0.equals(TypeInfoFactory.doubleTypeInfo) && oiTypeInfo1.equals(TypeInfoFactory.longTypeInfo)) || (oiTypeInfo0.equals(TypeInfoFactory.longTypeInfo) && oiTypeInfo1.equals(TypeInfoFactory.doubleTypeInfo))) {
      if (HiveConf.getVar(conf,HiveConf.ConfVars.HIVEMAPREDMODE).equalsIgnoreCase("strict")) {
        throw new UDFArgumentException(ErrorMsg.NO_COMPARE_BIGINT_DOUBLE.getMsg());
      }
 else {
        console.printError("WARNING: Comparing a bigint and a double may result in a loss of precision.");
      }
    }
  }
  ObjectInspector oi=genericUDF.initializeAndFoldConstants(childrenOIs);
  String[] requiredJars=genericUDF.getRequiredJars();
  String[] requiredFiles=genericUDF.getRequiredFiles();
  SessionState ss=SessionState.get();
  if (requiredJars != null) {
    SessionState.ResourceType t=SessionState.find_resource_type("JAR");
    try {
      ss.add_resources(t,Arrays.asList(requiredJars));
    }
 catch (    Exception e) {
      throw new UDFArgumentException(e);
    }
  }
  if (requiredFiles != null) {
    SessionState.ResourceType t=SessionState.find_resource_type("FILE");
    try {
      ss.add_resources(t,Arrays.asList(requiredFiles));
    }
 catch (    Exception e) {
      throw new UDFArgumentException(e);
    }
  }
  return new ExprNodeGenericFuncDesc(oi,genericUDF,funcText,children);
}
