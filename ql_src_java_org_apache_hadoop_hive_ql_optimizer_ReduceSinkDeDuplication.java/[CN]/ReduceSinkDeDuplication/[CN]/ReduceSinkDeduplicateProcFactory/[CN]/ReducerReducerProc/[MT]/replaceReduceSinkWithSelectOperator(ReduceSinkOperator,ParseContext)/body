{
  List<Operator<? extends Serializable>> parentOp=childReduceSink.getParentOperators();
  List<Operator<? extends Serializable>> childOp=childReduceSink.getChildOperators();
  Operator<? extends Serializable> oldParent=childReduceSink;
  if (childOp != null && childOp.size() == 1 && ((childOp.get(0)) instanceof ExtractOperator)) {
    oldParent=childOp.get(0);
    childOp=childOp.get(0).getChildOperators();
  }
  Operator<? extends Serializable> input=parentOp.get(0);
  input.getChildOperators().clear();
  RowResolver inputRR=pGraphContext.getOpParseCtx().get(input).getRR();
  ArrayList<ExprNodeDesc> exprs=new ArrayList<ExprNodeDesc>();
  ArrayList<String> outputs=new ArrayList<String>();
  List<String> outputCols=childReduceSink.getConf().getOutputValueColumnNames();
  RowResolver outputRS=new RowResolver();
  Map<String,ExprNodeDesc> colExprMap=new HashMap<String,ExprNodeDesc>();
  for (int i=0; i < outputCols.size(); i++) {
    String internalName=outputCols.get(i);
    String[] nm=inputRR.reverseLookup(internalName);
    ColumnInfo valueInfo=inputRR.get(nm[0],nm[1]);
    ExprNodeDesc colDesc=childReduceSink.getConf().getValueCols().get(i);
    exprs.add(colDesc);
    outputs.add(internalName);
    outputRS.put(nm[0],nm[1],new ColumnInfo(internalName,valueInfo.getType(),nm[0],valueInfo.getIsVirtualCol(),valueInfo.isHiddenVirtualCol()));
    colExprMap.put(internalName,colDesc);
  }
  SelectDesc select=new SelectDesc(exprs,outputs,false);
  SelectOperator sel=(SelectOperator)putOpInsertMap(OperatorFactory.getAndMakeChild(select,new RowSchema(inputRR.getColumnInfos()),input),inputRR,pGraphContext);
  sel.setColumnExprMap(colExprMap);
  sel.setChildOperators(childOp);
  for (  Operator<? extends Serializable> ch : childOp) {
    ch.replaceParent(oldParent,sel);
  }
}
