{
  int common=Math.min(cexprs.size(),pexprs.size());
  int limit=Math.max(cexprs.size(),pexprs.size());
  int i=0;
  for (; i < common; i++) {
    ExprNodeDesc pexpr=pexprs.get(i);
    ExprNodeDesc cexpr=ExprNodeDescUtils.backtrack(cexprs.get(i),child,parent);
    if (!pexpr.isSame(cexpr)) {
      return null;
    }
  }
  for (; i < limit; i++) {
    if (cexprs.size() > pexprs.size()) {
      if (ExprNodeDescUtils.backtrack(cexprs.get(i),child,parent) == null) {
        return null;
      }
    }
  }
  return Integer.valueOf(cexprs.size()).compareTo(pexprs.size());
}
