{
  Operator<?> parent=getSingleParent(cRS);
  if (parent instanceof GroupByOperator) {
    GroupByOperator cGBYm=(GroupByOperator)parent;
    cGBYr.getConf().setKeys(cGBYm.getConf().getKeys());
    cGBYr.getConf().setAggregators(cGBYm.getConf().getAggregators());
    for (    AggregationDesc aggr : cGBYm.getConf().getAggregators()) {
      aggr.setMode(GenericUDAFEvaluator.Mode.COMPLETE);
    }
    cGBYr.setColumnExprMap(cGBYm.getColumnExprMap());
    cGBYr.setSchema(cGBYm.getSchema());
    RowResolver resolver=context.getOpParseCtx().get(cGBYm).getRowResolver();
    context.getOpParseCtx().get(cGBYr).setRowResolver(resolver);
  }
 else {
    cGBYr.getConf().setKeys(ExprNodeDescUtils.backtrack(cGBYr.getConf().getKeys(),cGBYr,cRS));
    for (    AggregationDesc aggr : cGBYr.getConf().getAggregators()) {
      aggr.setParameters(ExprNodeDescUtils.backtrack(aggr.getParameters(),cGBYr,cRS));
    }
    Map<String,ExprNodeDesc> oldMap=cGBYr.getColumnExprMap();
    RowResolver oldRR=context.getOpParseCtx().get(cGBYr).getRowResolver();
    Map<String,ExprNodeDesc> newMap=new HashMap<String,ExprNodeDesc>();
    RowResolver newRR=new RowResolver();
    List<String> outputCols=cGBYr.getConf().getOutputColumnNames();
    for (int i=0; i < outputCols.size(); i++) {
      String colName=outputCols.get(i);
      String[] nm=oldRR.reverseLookup(colName);
      ColumnInfo colInfo=oldRR.get(nm[0],nm[1]);
      newRR.put(nm[0],nm[1],colInfo);
      ExprNodeDesc colExpr=ExprNodeDescUtils.backtrack(oldMap.get(colName),cGBYr,cRS);
      if (colExpr != null) {
        newMap.put(colInfo.getInternalName(),colExpr);
      }
    }
    cGBYr.setColumnExprMap(newMap);
    cGBYr.setSchema(new RowSchema(newRR.getColumnInfos()));
    context.getOpParseCtx().get(cGBYr).setRowResolver(newRR);
  }
  cGBYr.getConf().setMode(GroupByDesc.Mode.COMPLETE);
  removeOperator(cRS,cGBYr,parent,context);
  dedupCtx.addRemovedOperator(cRS);
  if (parent instanceof GroupByOperator) {
    removeOperator(parent,cGBYr,getSingleParent(parent),context);
    dedupCtx.addRemovedOperator(cGBYr);
  }
}
