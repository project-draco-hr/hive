{
  List<Operator<?>> parents=pJoin.getParentOperators();
  ReduceSinkOperator[] pRSs=parents.toArray(new ReduceSinkOperator[parents.size()]);
  ReduceSinkDesc cRSc=cRS.getConf();
  ReduceSinkDesc pRS0c=pRSs[0].getConf();
  if (cRSc.getKeyCols().size() > pRS0c.getKeyCols().size()) {
    return false;
  }
  if (cRSc.getPartitionCols().size() > pRS0c.getPartitionCols().size()) {
    return false;
  }
  Integer moveReducerNumTo=checkNumReducer(cRSc.getNumReducers(),pRS0c.getNumReducers());
  if (moveReducerNumTo == null || moveReducerNumTo > 0 && cRSc.getNumReducers() < minReducer) {
    return false;
  }
  Integer moveRSOrderTo=checkOrder(cRSc.getOrder(),pRS0c.getOrder());
  if (moveRSOrderTo == null) {
    return false;
  }
  boolean[] sorted=getSortedTags(pJoin);
  int cKeySize=cRSc.getKeyCols().size();
  for (int i=0; i < cKeySize; i++) {
    ExprNodeDesc cexpr=cRSc.getKeyCols().get(i);
    ExprNodeDesc[] pexprs=new ExprNodeDesc[pRSs.length];
    for (int tag=0; tag < pRSs.length; tag++) {
      pexprs[tag]=pRSs[tag].getConf().getKeyCols().get(i);
    }
    int found=indexOf(cexpr,pexprs,cRS,pRSs,sorted);
    if (found < 0) {
      return false;
    }
  }
  int cPartSize=cRSc.getPartitionCols().size();
  for (int i=0; i < cPartSize; i++) {
    ExprNodeDesc cexpr=cRSc.getPartitionCols().get(i);
    ExprNodeDesc[] pexprs=new ExprNodeDesc[pRSs.length];
    for (int tag=0; tag < pRSs.length; tag++) {
      pexprs[tag]=pRSs[tag].getConf().getPartitionCols().get(i);
    }
    int found=indexOf(cexpr,pexprs,cRS,pRSs,sorted);
    if (found < 0) {
      return false;
    }
  }
  if (moveReducerNumTo > 0) {
    for (    ReduceSinkOperator pRS : pRSs) {
      pRS.getConf().setNumReducers(cRS.getConf().getNumReducers());
    }
  }
  return true;
}
