{
  try {
    byte buffer[]=new byte[1024];
    int threshold=conf.getInt("mapred.throttle.threshold.percent",DEFAULT_MEMORY_GC_PERCENT);
    int retry=conf.getInt("mapred.throttle.retry.period",DEFAULT_RETRY_PERIOD);
    if (threshold == 100) {
      return;
    }
    String infoAddr=conf.get("mapred.job.tracker.http.address");
    if (infoAddr == null) {
      throw new IOException("Throttle: Unable to find job tracker info port.");
    }
    InetSocketAddress infoSocAddr=NetUtils.createSocketAddr(infoAddr);
    int infoPort=infoSocAddr.getPort();
    String tracker="http://" + JobTracker.getAddress(conf).getHostName() + ":"+ infoPort+ "/gc.jsp?threshold="+ threshold;
    while (true) {
      URL url=new URL(tracker);
      LOG.debug("Throttle: URL " + tracker);
      InputStream in=url.openStream();
      int numRead=in.read(buffer);
      in.close();
      String fetchString=new String(buffer);
      Pattern dowait=Pattern.compile("<dogc>",Pattern.CASE_INSENSITIVE | Pattern.DOTALL | Pattern.MULTILINE);
      String[] results=dowait.split(fetchString);
      if (results.length != 2) {
        throw new IOException("Throttle: Unable to parse response of URL " + url + ". Get retuned "+ fetchString);
      }
      dowait=Pattern.compile("</dogc>",Pattern.CASE_INSENSITIVE | Pattern.DOTALL | Pattern.MULTILINE);
      results=dowait.split(results[1]);
      if (results.length < 1) {
        throw new IOException("Throttle: Unable to parse response of URL " + url + ". Get retuned "+ fetchString);
      }
      if (results[0].trim().compareToIgnoreCase("false") == 0) {
        return;
      }
      LOG.warn("Job is being throttled because of resource crunch on the " + "JobTracker. Will retry in " + retry + " seconds..");
      Thread.sleep(retry * 1000L);
    }
  }
 catch (  Exception e) {
    LOG.warn("Job is not being throttled. " + e);
  }
}
