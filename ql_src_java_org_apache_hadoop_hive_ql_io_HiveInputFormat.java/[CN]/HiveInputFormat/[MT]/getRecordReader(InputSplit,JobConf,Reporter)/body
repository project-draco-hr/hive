{
  HiveInputSplit hsplit=(HiveInputSplit)split;
  InputSplit inputSplit=hsplit.getInputSplit();
  String inputFormatClassName=null;
  Class inputFormatClass=null;
  try {
    inputFormatClassName=hsplit.inputFormatClassName();
    inputFormatClass=job.getClassByName(inputFormatClassName);
  }
 catch (  Exception e) {
    throw new IOException("cannot find class " + inputFormatClassName);
  }
  JobConf cloneJobConf=new JobConf(job);
  if (this.mrwork == null) {
    init(job);
  }
  boolean nonNative=false;
  PartitionDesc part=pathToPartitionInfo.get(hsplit.getPath().toString());
  if ((part != null) && (part.getTableDesc() != null)) {
    Utilities.copyTableJobPropertiesToConf(part.getTableDesc(),cloneJobConf);
    nonNative=part.getTableDesc().isNonNative();
  }
  pushProjectionsAndFilters(cloneJobConf,inputFormatClass,hsplit.getPath().toString(),hsplit.getPath().toUri().getPath(),nonNative);
  InputFormat inputFormat=getInputFormatFromCache(inputFormatClass,cloneJobConf);
  RecordReader innerReader=inputFormat.getRecordReader(inputSplit,cloneJobConf,reporter);
  HiveRecordReader<K,V> rr=new HiveRecordReader(innerReader);
  rr.initIOContext(hsplit,job,inputFormatClass,innerReader);
  return rr;
}
