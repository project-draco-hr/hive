{
  PerfLogger perfLogger=SessionState.getPerfLogger();
  perfLogger.PerfLogBegin(CLASS_NAME,PerfLogger.GET_SPLITS);
  init(job);
  Path[] dirs=getInputPaths(job);
  JobConf newjob=new JobConf(job);
  List<InputSplit> result=new ArrayList<InputSplit>();
  List<Path> currentDirs=new ArrayList<Path>();
  Class<? extends InputFormat> currentInputFormatClass=null;
  TableDesc currentTable=null;
  TableScanOperator currentTableScan=null;
  boolean pushDownProjection=false;
  StringBuilder readColumnsBuffer=new StringBuilder(newjob.get(ColumnProjectionUtils.READ_COLUMN_IDS_CONF_STR,""));
  ;
  StringBuilder readColumnNamesBuffer=new StringBuilder(newjob.get(ColumnProjectionUtils.READ_COLUMN_NAMES_CONF_STR,""));
  for (  Path dir : dirs) {
    PartitionDesc part=getPartitionDescFromPath(pathToPartitionInfo,dir);
    Class<? extends InputFormat> inputFormatClass=part.getInputFileFormatClass();
    TableDesc table=part.getTableDesc();
    TableScanOperator tableScan=null;
    List<String> aliases=mrwork.getPathToAliases().get(dir.toString());
    if ((aliases != null) && (aliases.size() == 1)) {
      Operator op=mrwork.getAliasToWork().get(aliases.get(0));
      if ((op != null) && (op instanceof TableScanOperator)) {
        tableScan=(TableScanOperator)op;
        readColumnsBuffer.setLength(0);
        readColumnNamesBuffer.setLength(0);
        ColumnProjectionUtils.appendReadColumns(readColumnsBuffer,readColumnNamesBuffer,tableScan.getNeededColumnIDs(),tableScan.getNeededColumns());
        pushDownProjection=true;
        pushFilters(newjob,tableScan);
      }
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug("aliases: {} pathToAliases: {} dir: {}",aliases,mrwork.getPathToAliases(),dir);
      }
    }
    if (!currentDirs.isEmpty() && inputFormatClass.equals(currentInputFormatClass) && table.equals(currentTable)&& tableScan == currentTableScan) {
      currentDirs.add(dir);
      continue;
    }
    if (!currentDirs.isEmpty()) {
      if (LOG.isInfoEnabled()) {
        LOG.info("Generating splits as currentDirs is not empty. currentDirs: {}",currentDirs);
      }
      if (pushDownProjection) {
        pushProjection(newjob,readColumnsBuffer,readColumnNamesBuffer);
      }
      addSplitsForGroup(currentDirs,currentTableScan,newjob,getInputFormatFromCache(currentInputFormatClass,job),currentInputFormatClass,currentDirs.size() * (numSplits / dirs.length),currentTable,result);
    }
    currentDirs.clear();
    currentDirs.add(dir);
    currentTableScan=tableScan;
    currentTable=table;
    currentInputFormatClass=inputFormatClass;
  }
  if (pushDownProjection) {
    pushProjection(newjob,readColumnsBuffer,readColumnNamesBuffer);
  }
  if (dirs.length != 0) {
    if (LOG.isInfoEnabled()) {
      LOG.info("Generating splits for dirs: {}",dirs);
    }
    addSplitsForGroup(currentDirs,currentTableScan,newjob,getInputFormatFromCache(currentInputFormatClass,job),currentInputFormatClass,currentDirs.size() * (numSplits / dirs.length),currentTable,result);
  }
  Utilities.clearWorkMapForConf(job);
  if (LOG.isInfoEnabled()) {
    LOG.info("number of splits " + result.size());
  }
  perfLogger.PerfLogEnd(CLASS_NAME,PerfLogger.GET_SPLITS);
  return result.toArray(new HiveInputSplit[result.size()]);
}
