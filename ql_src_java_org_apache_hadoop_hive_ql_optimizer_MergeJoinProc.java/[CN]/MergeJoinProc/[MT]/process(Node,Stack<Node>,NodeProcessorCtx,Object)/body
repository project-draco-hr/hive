{
  GenTezProcContext context=(GenTezProcContext)procCtx;
  CommonMergeJoinOperator mergeJoinOp=(CommonMergeJoinOperator)nd;
  if (stack.size() < 2 || !(stack.get(stack.size() - 2) instanceof DummyStoreOperator)) {
    context.currentMergeJoinOperator=mergeJoinOp;
    return null;
  }
  TezWork tezWork=context.currentTask.getWork();
  @SuppressWarnings("unchecked") Operator<? extends OperatorDesc> parentOp=(Operator<? extends OperatorDesc>)((stack.get(stack.size() - 2)));
  BaseWork parentWork=context.childToWorkMap.get(parentOp).get(0);
  MergeJoinWork mergeWork=null;
  if (context.opMergeJoinWorkMap.containsKey(mergeJoinOp)) {
    mergeWork=context.opMergeJoinWorkMap.get(mergeJoinOp);
  }
 else {
    mergeWork=new MergeJoinWork();
    tezWork.add(mergeWork);
    context.opMergeJoinWorkMap.put(mergeJoinOp,mergeWork);
  }
  mergeWork.setMergeJoinOperator(mergeJoinOp);
  mergeWork.addMergedWork(null,parentWork);
  tezWork.setVertexType(mergeWork,VertexType.MULTI_INPUT_UNINITIALIZED_EDGES);
  for (  BaseWork grandParentWork : tezWork.getParents(parentWork)) {
    parentWork.setName(grandParentWork.getName());
    TezEdgeProperty edgeProp=tezWork.getEdgeProperty(grandParentWork,parentWork);
    tezWork.disconnect(grandParentWork,parentWork);
    tezWork.connect(grandParentWork,mergeWork,edgeProp);
  }
  for (  BaseWork childWork : tezWork.getChildren(parentWork)) {
    TezEdgeProperty edgeProp=tezWork.getEdgeProperty(parentWork,childWork);
    tezWork.disconnect(parentWork,childWork);
    tezWork.connect(mergeWork,childWork,edgeProp);
  }
  tezWork.remove(parentWork);
  DummyStoreOperator dummyOp=(DummyStoreOperator)(stack.get(stack.size() - 2));
  parentWork.setTag(mergeJoinOp.getTagForOperator(dummyOp));
  mergeJoinOp.getParentOperators().remove(dummyOp);
  dummyOp.getChildOperators().clear();
  return true;
}
