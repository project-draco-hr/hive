{
  this.typeInfos=typeInfos;
  final int count=typeInfos.length;
  categories=new Category[count];
  primitiveCategories=new PrimitiveCategory[count];
  for (int i=0; i < count; i++) {
    TypeInfo typeInfo=typeInfos[i];
    Category category=typeInfo.getCategory();
    categories[i]=category;
    if (category == Category.PRIMITIVE) {
      PrimitiveTypeInfo primitiveTypeInfo=(PrimitiveTypeInfo)typeInfo;
      PrimitiveCategory primitiveCategory=primitiveTypeInfo.getPrimitiveCategory();
      primitiveCategories[i]=primitiveCategory;
switch (primitiveCategory) {
case DATE:
        if (currentDateWritable == null) {
          currentDateWritable=new DateWritable();
        }
      break;
case TIMESTAMP:
    if (currentTimestampWritable == null) {
      currentTimestampWritable=new TimestampWritable();
    }
  break;
case INTERVAL_YEAR_MONTH:
if (currentHiveIntervalYearMonthWritable == null) {
  currentHiveIntervalYearMonthWritable=new HiveIntervalYearMonthWritable();
}
break;
case INTERVAL_DAY_TIME:
if (currentHiveIntervalDayTimeWritable == null) {
currentHiveIntervalDayTimeWritable=new HiveIntervalDayTimeWritable();
}
break;
case DECIMAL:
if (currentHiveDecimalWritable == null) {
currentHiveDecimalWritable=new HiveDecimalWritable();
}
break;
default :
}
}
this.useExternalBuffer=useExternalBuffer;
}
columnsToInclude=null;
}
