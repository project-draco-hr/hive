{
  assert(parameters.length == 3 || parameters.length == 4);
  if (parameters[0] == null || parameters[1] == null || parameters[2] == null) {
    return;
  }
  NGramAggBuf myagg=(NGramAggBuf)agg;
  if (!myagg.nge.isInitialized()) {
    int k=PrimitiveObjectInspectorUtils.getInt(parameters[2],kOI);
    int pf=0;
    if (k < 1) {
      throw new HiveException(getClass().getSimpleName() + " needs 'k' to be at least 1, " + "but you supplied "+ k);
    }
    if (parameters.length == 4) {
      pf=PrimitiveObjectInspectorUtils.getInt(parameters[3],pOI);
      if (pf < 1) {
        throw new HiveException(getClass().getSimpleName() + " needs 'pf' to be at least 1, " + "but you supplied "+ pf);
      }
    }
 else {
      pf=1;
    }
    myagg.context.clear();
    List<Text> context=(List<Text>)contextListOI.getList(parameters[1]);
    int contextNulls=0;
    for (int i=0; i < context.size(); i++) {
      String word=PrimitiveObjectInspectorUtils.getString(context.get(i),contextOI);
      if (word == null) {
        contextNulls++;
      }
      myagg.context.add(word);
    }
    if (context.size() == 0) {
      throw new HiveException(getClass().getSimpleName() + " needs a context array " + "with at least one element.");
    }
    if (contextNulls == 0) {
      throw new HiveException(getClass().getSimpleName() + " the context array needs to " + "contain at least one 'null' value to indicate what should be counted.");
    }
    myagg.nge.initialize(k,pf,contextNulls);
  }
  List<Text> outer=(List<Text>)outerInputOI.getList(parameters[0]);
  if (innerInputOI != null) {
    for (int i=0; i < outer.size(); i++) {
      List<Text> inner=(List<Text>)innerInputOI.getList(outer.get(i));
      ArrayList<String> words=new ArrayList<String>();
      for (int j=0; j < inner.size(); j++) {
        String word=PrimitiveObjectInspectorUtils.getString(inner.get(j),inputOI);
        words.add(word);
      }
      processNgrams(myagg,words);
    }
  }
 else {
    ArrayList<String> words=new ArrayList<String>();
    for (int i=0; i < outer.size(); i++) {
      String word=PrimitiveObjectInspectorUtils.getString(outer.get(i),inputOI);
      words.add(word);
    }
    processNgrams(myagg,words);
  }
}
