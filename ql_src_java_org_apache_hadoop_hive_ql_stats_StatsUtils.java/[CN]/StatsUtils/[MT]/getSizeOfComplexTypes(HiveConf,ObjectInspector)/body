{
  long result=0;
  int length=0;
  int listEntries=HiveConf.getIntVar(conf,HiveConf.ConfVars.HIVE_STATS_LIST_NUM_ENTRIES);
  int mapEntries=HiveConf.getIntVar(conf,HiveConf.ConfVars.HIVE_STATS_MAP_NUM_ENTRIES);
switch (oi.getCategory()) {
case PRIMITIVE:
    String colTypeLowerCase=oi.getTypeName().toLowerCase();
  if (colTypeLowerCase.equals(serdeConstants.STRING_TYPE_NAME) || colTypeLowerCase.startsWith(serdeConstants.VARCHAR_TYPE_NAME) || colTypeLowerCase.startsWith(serdeConstants.CHAR_TYPE_NAME)) {
    int avgColLen=(int)getAvgColLenOf(conf,oi,colTypeLowerCase);
    result+=JavaDataModel.get().lengthForStringOfLength(avgColLen);
  }
 else   if (colTypeLowerCase.equals(serdeConstants.BINARY_TYPE_NAME)) {
    int avgColLen=(int)getAvgColLenOf(conf,oi,colTypeLowerCase);
    result+=JavaDataModel.get().lengthForByteArrayOfSize(avgColLen);
  }
 else {
    result+=getAvgColLenOfFixedLengthTypes(colTypeLowerCase);
  }
break;
case LIST:
if (oi instanceof StandardConstantListObjectInspector) {
StandardConstantListObjectInspector scloi=(StandardConstantListObjectInspector)oi;
length=scloi.getWritableConstantValue().size();
ObjectInspector leoi=scloi.getListElementObjectInspector();
if (leoi.getCategory().equals(ObjectInspector.Category.PRIMITIVE)) {
  result+=getSizeOfPrimitiveTypeArraysFromType(leoi.getTypeName(),length);
}
 else {
  result+=JavaDataModel.get().lengthForObjectArrayOfSize(length);
}
}
 else {
StandardListObjectInspector sloi=(StandardListObjectInspector)oi;
long elemSize=getSizeOfComplexTypes(conf,sloi.getListElementObjectInspector());
result+=JavaDataModel.get().arrayList() + (listEntries * elemSize);
}
break;
case MAP:
if (oi instanceof StandardConstantMapObjectInspector) {
StandardConstantMapObjectInspector scmoi=(StandardConstantMapObjectInspector)oi;
result+=getSizeOfMap(scmoi);
}
 else {
StandardMapObjectInspector smoi=(StandardMapObjectInspector)oi;
result+=getSizeOfComplexTypes(conf,smoi.getMapKeyObjectInspector());
result+=getSizeOfComplexTypes(conf,smoi.getMapValueObjectInspector());
result+=JavaDataModel.get().hashMap(mapEntries);
}
break;
case STRUCT:
if (oi instanceof StandardConstantStructObjectInspector) {
StandardConstantStructObjectInspector scsoi=(StandardConstantStructObjectInspector)oi;
result+=getSizeOfStruct(scsoi);
}
 else {
StructObjectInspector soi=(StructObjectInspector)oi;
result+=JavaDataModel.get().object();
result+=soi.getAllStructFieldRefs().size() * JavaDataModel.get().ref();
for (StructField field : soi.getAllStructFieldRefs()) {
result+=getSizeOfComplexTypes(conf,field.getFieldObjectInspector());
}
}
break;
case UNION:
UnionObjectInspector uoi=(UnionObjectInspector)oi;
result+=JavaDataModel.get().object();
result+=uoi.getObjectInspectors().size() * JavaDataModel.get().primitive1();
for (ObjectInspector foi : uoi.getObjectInspectors()) {
result+=getSizeOfComplexTypes(conf,foi);
}
break;
default :
break;
}
return result;
}
