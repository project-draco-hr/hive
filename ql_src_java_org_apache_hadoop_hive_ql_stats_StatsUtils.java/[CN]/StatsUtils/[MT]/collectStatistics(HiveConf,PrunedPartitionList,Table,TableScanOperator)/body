{
  Statistics stats=new Statistics();
  List<ColumnInfo> schema=tableScanOperator.getSchema().getSignature();
  List<String> neededColumns=tableScanOperator.getNeededColumns();
  String dbName=table.getDbName();
  String tabName=table.getTableName();
  boolean fetchColStats=HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_STATS_FETCH_COLUMN_STATS);
  float deserFactor=HiveConf.getFloatVar(conf,HiveConf.ConfVars.HIVE_STATS_DESERIALIZATION_FACTOR);
  if (!table.isPartitioned()) {
    long nr=getNumRows(dbName,tabName);
    long ds=getRawDataSize(dbName,tabName);
    if (ds <= 0) {
      ds=getTotalSize(dbName,tabName);
      if (ds <= 0) {
        ds=getFileSizeForTable(conf,table);
      }
      ds=(long)(ds * deserFactor);
    }
    if (nr <= 0) {
      int avgRowSize=estimateRowSizeFromSchema(conf,schema,neededColumns);
      if (avgRowSize > 0) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Estimated average row size: " + avgRowSize);
        }
        nr=ds / avgRowSize;
      }
    }
    stats.setNumRows(nr);
    stats.setDataSize(ds);
    List<ColStatistics> colStats=Lists.newArrayList();
    if (fetchColStats) {
      colStats=getTableColumnStats(table,schema,neededColumns);
    }
    if (checkIfColStatsAvailable(colStats) && colStats.contains(null)) {
      stats.setColumnStatsState(Statistics.State.PARTIAL);
    }
    if (checkIfColStatsAvailable(colStats) && !colStats.contains(null)) {
      stats.setColumnStatsState(Statistics.State.COMPLETE);
    }
    if (!checkIfColStatsAvailable(colStats)) {
      if (!neededColumns.isEmpty()) {
        stats.setColumnStatsState(Statistics.State.NONE);
      }
 else {
        stats.setColumnStatsState(Statistics.State.COMPLETE);
      }
    }
    stats.addToColumnStats(colStats);
  }
 else {
    if (partList != null) {
      List<String> partNames=Lists.newArrayList();
      for (      Partition part : partList.getNotDeniedPartns()) {
        partNames.add(part.getName());
      }
      List<Long> rowCounts=getBasicStatForPartitions(table,partNames,StatsSetupConst.ROW_COUNT);
      List<Long> dataSizes=getBasicStatForPartitions(table,partNames,StatsSetupConst.RAW_DATA_SIZE);
      long nr=getSumIgnoreNegatives(rowCounts);
      long ds=getSumIgnoreNegatives(dataSizes);
      if (ds <= 0) {
        dataSizes=getBasicStatForPartitions(table,partNames,StatsSetupConst.TOTAL_SIZE);
        ds=getSumIgnoreNegatives(dataSizes);
        if (ds <= 0) {
          dataSizes=getFileSizeForPartitions(conf,partList.getNotDeniedPartns());
        }
        ds=getSumIgnoreNegatives(dataSizes);
        ds=(long)(ds * deserFactor);
      }
      int avgRowSize=estimateRowSizeFromSchema(conf,schema,neededColumns);
      if (avgRowSize > 0) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Estimated average row size: " + avgRowSize);
        }
        for (int i=0; i < rowCounts.size(); i++) {
          long rc=rowCounts.get(i);
          long s=dataSizes.get(i);
          if (rc <= 0 && s > 0) {
            rc=s / avgRowSize;
            rowCounts.set(i,rc);
          }
          if (s <= 0 && rc > 0) {
            s=rc * avgRowSize;
            dataSizes.set(i,s);
          }
        }
        nr=getSumIgnoreNegatives(rowCounts);
        ds=getSumIgnoreNegatives(dataSizes);
        if (nr <= 0) {
          nr=ds / avgRowSize;
        }
      }
      stats.addToNumRows(nr);
      stats.addToDataSize(ds);
      if (containsNonPositives(rowCounts)) {
        stats.setBasicStatsState(State.PARTIAL);
      }
      for (      Partition part : partList.getNotDeniedPartns()) {
        List<ColStatistics> colStats=Lists.newArrayList();
        if (fetchColStats) {
          colStats=getPartitionColumnStats(table,part,schema,neededColumns);
        }
        if (checkIfColStatsAvailable(colStats) && colStats.contains(null)) {
          stats.updateColumnStatsState(Statistics.State.PARTIAL);
        }
 else         if (checkIfColStatsAvailable(colStats) && !colStats.contains(null)) {
          stats.updateColumnStatsState(Statistics.State.COMPLETE);
        }
 else {
          if (!neededColumns.isEmpty()) {
            stats.updateColumnStatsState(Statistics.State.NONE);
          }
 else {
            stats.updateColumnStatsState(Statistics.State.COMPLETE);
          }
        }
        stats.addToColumnStats(colStats);
      }
    }
  }
  return stats;
}
