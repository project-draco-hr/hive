{
  Statistics stats=new Statistics();
  List<ColumnInfo> schema=tableScanOperator.getSchema().getSignature();
  List<String> neededColumns=tableScanOperator.getNeededColumns();
  boolean fetchColStats=HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_STATS_FETCH_COLUMN_STATS);
  boolean fetchPartStats=HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_STATS_FETCH_PARTITION_STATS);
  float deserFactor=HiveConf.getFloatVar(conf,HiveConf.ConfVars.HIVE_STATS_DESERIALIZATION_FACTOR);
  if (!table.isPartitioned()) {
    long nr=getNumRows(table);
    long ds=getRawDataSize(table);
    if (ds <= 0) {
      ds=getTotalSize(table);
      if (ds <= 0) {
        ds=getFileSizeForTable(conf,table);
      }
      ds=(long)(ds * deserFactor);
    }
    if (nr <= 0) {
      int avgRowSize=estimateRowSizeFromSchema(conf,schema,neededColumns);
      if (avgRowSize > 0) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Estimated average row size: " + avgRowSize);
        }
        nr=ds / avgRowSize;
      }
    }
    stats.setNumRows(nr);
    stats.setDataSize(ds);
    List<ColStatistics> colStats=Lists.newArrayList();
    if (fetchColStats) {
      colStats=getTableColumnStats(table,schema,neededColumns);
    }
    stats.setColumnStatsState(deriveStatType(colStats,neededColumns));
    stats.addToColumnStats(colStats);
  }
 else   if (partList != null) {
    long nr=0;
    long ds=0;
    List<Long> rowCounts=Lists.newArrayList();
    List<Long> dataSizes=Lists.newArrayList();
    if (fetchPartStats) {
      rowCounts=getBasicStatForPartitions(table,partList.getNotDeniedPartns(),StatsSetupConst.ROW_COUNT);
      dataSizes=getBasicStatForPartitions(table,partList.getNotDeniedPartns(),StatsSetupConst.RAW_DATA_SIZE);
      nr=getSumIgnoreNegatives(rowCounts);
      ds=getSumIgnoreNegatives(dataSizes);
      if (ds <= 0) {
        dataSizes=getBasicStatForPartitions(table,partList.getNotDeniedPartns(),StatsSetupConst.TOTAL_SIZE);
        ds=getSumIgnoreNegatives(dataSizes);
      }
    }
    if (ds <= 0) {
      dataSizes=getFileSizeForPartitions(conf,partList.getNotDeniedPartns());
    }
    ds=getSumIgnoreNegatives(dataSizes);
    ds=(long)(ds * deserFactor);
    int avgRowSize=estimateRowSizeFromSchema(conf,schema,neededColumns);
    if (avgRowSize > 0) {
      setUnknownRcDsToAverage(rowCounts,dataSizes,avgRowSize);
      nr=getSumIgnoreNegatives(rowCounts);
      ds=getSumIgnoreNegatives(dataSizes);
      if (nr <= 0) {
        nr=ds / avgRowSize;
      }
    }
    stats.addToNumRows(nr);
    stats.addToDataSize(ds);
    if (containsNonPositives(rowCounts)) {
      stats.setBasicStatsState(State.PARTIAL);
    }
    boolean haveFullStats=fetchColStats;
    if (fetchColStats) {
      List<String> partNames=new ArrayList<String>(partList.getNotDeniedPartns().size());
      for (      Partition part : partList.getNotDeniedPartns()) {
        partNames.add(part.getName());
      }
      Map<String,List<ColStatistics>> partStats=getPartColumnStats(table,schema,partNames,neededColumns);
      if (partStats != null) {
        for (        String partName : partNames) {
          List<ColStatistics> partStat=partStats.get(partName);
          haveFullStats&=(partStat != null);
          if (partStat != null) {
            stats.updateColumnStatsState(deriveStatType(partStat,neededColumns));
            stats.addToColumnStats(partStat);
          }
        }
      }
    }
    if (!haveFullStats) {
      List<ColStatistics> emptyStats=Lists.<ColStatistics>newArrayList();
      stats.addToColumnStats(emptyStats);
      stats.updateColumnStatsState(deriveStatType(emptyStats,neededColumns));
    }
  }
  return stats;
}
