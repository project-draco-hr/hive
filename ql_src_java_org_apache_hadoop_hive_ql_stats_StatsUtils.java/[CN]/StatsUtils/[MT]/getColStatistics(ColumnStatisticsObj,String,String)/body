{
  ColStatistics cs=new ColStatistics(tabName,colName,cso.getColType());
  String colType=cso.getColType();
  ColumnStatisticsData csd=cso.getStatsData();
  if (colType.equalsIgnoreCase(serdeConstants.TINYINT_TYPE_NAME) || colType.equalsIgnoreCase(serdeConstants.SMALLINT_TYPE_NAME) || colType.equalsIgnoreCase(serdeConstants.INT_TYPE_NAME)) {
    cs.setCountDistint(csd.getLongStats().getNumDVs());
    cs.setNumNulls(csd.getLongStats().getNumNulls());
    cs.setAvgColLen(JavaDataModel.get().primitive1());
    cs.setRange(csd.getLongStats().getLowValue(),csd.getLongStats().getHighValue());
  }
 else   if (colType.equalsIgnoreCase(serdeConstants.BIGINT_TYPE_NAME)) {
    cs.setCountDistint(csd.getLongStats().getNumDVs());
    cs.setNumNulls(csd.getLongStats().getNumNulls());
    cs.setAvgColLen(JavaDataModel.get().primitive2());
    cs.setRange(csd.getLongStats().getLowValue(),csd.getLongStats().getHighValue());
  }
 else   if (colType.equalsIgnoreCase(serdeConstants.FLOAT_TYPE_NAME)) {
    cs.setCountDistint(csd.getDoubleStats().getNumDVs());
    cs.setNumNulls(csd.getDoubleStats().getNumNulls());
    cs.setAvgColLen(JavaDataModel.get().primitive1());
    cs.setRange(csd.getDoubleStats().getLowValue(),csd.getDoubleStats().getHighValue());
  }
 else   if (colType.equalsIgnoreCase(serdeConstants.DOUBLE_TYPE_NAME)) {
    cs.setCountDistint(csd.getDoubleStats().getNumDVs());
    cs.setNumNulls(csd.getDoubleStats().getNumNulls());
    cs.setAvgColLen(JavaDataModel.get().primitive2());
    cs.setRange(csd.getDoubleStats().getLowValue(),csd.getDoubleStats().getHighValue());
  }
 else   if (colType.equalsIgnoreCase(serdeConstants.STRING_TYPE_NAME) || colType.startsWith(serdeConstants.CHAR_TYPE_NAME) || colType.startsWith(serdeConstants.VARCHAR_TYPE_NAME)) {
    cs.setCountDistint(csd.getStringStats().getNumDVs());
    cs.setNumNulls(csd.getStringStats().getNumNulls());
    cs.setAvgColLen(csd.getStringStats().getAvgColLen());
  }
 else   if (colType.equalsIgnoreCase(serdeConstants.BOOLEAN_TYPE_NAME)) {
    if (csd.getBooleanStats().getNumFalses() > 0 && csd.getBooleanStats().getNumTrues() > 0) {
      cs.setCountDistint(2);
    }
 else {
      cs.setCountDistint(1);
    }
    cs.setNumTrues(csd.getBooleanStats().getNumTrues());
    cs.setNumFalses(csd.getBooleanStats().getNumFalses());
    cs.setNumNulls(csd.getBooleanStats().getNumNulls());
    cs.setAvgColLen(JavaDataModel.get().primitive1());
  }
 else   if (colType.equalsIgnoreCase(serdeConstants.BINARY_TYPE_NAME)) {
    cs.setAvgColLen(csd.getBinaryStats().getAvgColLen());
    cs.setNumNulls(csd.getBinaryStats().getNumNulls());
  }
 else   if (colType.equalsIgnoreCase(serdeConstants.TIMESTAMP_TYPE_NAME)) {
    cs.setAvgColLen(JavaDataModel.get().lengthOfTimestamp());
  }
 else   if (colType.startsWith(serdeConstants.DECIMAL_TYPE_NAME)) {
    cs.setAvgColLen(JavaDataModel.get().lengthOfDecimal());
    cs.setCountDistint(csd.getDecimalStats().getNumDVs());
    cs.setNumNulls(csd.getDecimalStats().getNumNulls());
    Decimal val=csd.getDecimalStats().getHighValue();
    BigDecimal maxVal=HiveDecimal.create(new BigInteger(val.getUnscaled()),val.getScale()).bigDecimalValue();
    val=csd.getDecimalStats().getLowValue();
    BigDecimal minVal=HiveDecimal.create(new BigInteger(val.getUnscaled()),val.getScale()).bigDecimalValue();
    cs.setRange(minVal,maxVal);
  }
 else   if (colType.equalsIgnoreCase(serdeConstants.DATE_TYPE_NAME)) {
    cs.setAvgColLen(JavaDataModel.get().lengthOfDate());
  }
 else {
    return null;
  }
  return cs;
}
