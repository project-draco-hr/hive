{
  Class c=defClass != null ? defClass : on.getClass();
  List<Method> candidateMethods=new LinkedList<Method>();
  Method[] m=c.getMethods();
  for (int i=0; i < m.length; i++) {
    if (m[i].getName().equalsIgnoreCase(method)) {
      candidateMethods.add(m[i]);
    }
  }
  if (candidateMethods.size() == 0) {
    throw new IllegalArgumentException(beeLine.loc("no-method",new Object[]{method,c.getName()}));
  }
  for (Iterator<Method> i=candidateMethods.iterator(); i.hasNext(); ) {
    Method meth=i.next();
    Class[] ptypes=meth.getParameterTypes();
    if (!(ptypes.length == args.size())) {
      continue;
    }
    Object[] converted=convert(args,ptypes);
    if (converted == null) {
      continue;
    }
    if (!Modifier.isPublic(meth.getModifiers())) {
      continue;
    }
    return meth.invoke(on,converted);
  }
  return null;
}
