{
  int targetColumnCount;
  if (columnsToIncludeTruncated == null) {
    targetColumnCount=targetTypeInfos.length;
  }
 else {
    targetColumnCount=Math.min(targetTypeInfos.length,columnsToIncludeTruncated.length);
  }
  int sourceColumnCount=Math.min(sourceTypeInfos.length,targetColumnCount);
  allocateArrays(sourceColumnCount);
  allocateConvertArrays(sourceColumnCount);
  for (int i=0; i < sourceColumnCount; i++) {
    if (columnsToIncludeTruncated != null && !columnsToIncludeTruncated[i]) {
    }
 else {
      TypeInfo targetTypeInfo=targetTypeInfos[i];
      if (targetTypeInfo.getCategory() != ObjectInspector.Category.PRIMITIVE) {
      }
 else {
        TypeInfo sourceTypeInfo=sourceTypeInfos[i];
        if (!sourceTypeInfo.equals(targetTypeInfo)) {
          if (VectorPartitionConversion.isImplicitVectorColumnConversion(sourceTypeInfo,targetTypeInfo)) {
            initTargetEntry(i,i,sourceTypeInfo);
          }
 else {
            initTargetEntry(i,i,targetTypeInfo);
            initConvertSourceEntry(i,sourceTypeInfo);
          }
        }
 else {
          initTargetEntry(i,i,targetTypeInfo);
        }
      }
    }
  }
  return sourceColumnCount;
}
