{
  Category targetCategory=targetCategories[logicalColumnIndex];
  if (targetCategory == null) {
    return;
  }
  final int projectionColumnNum=projectionColumnNums[logicalColumnIndex];
  if (object == null) {
    VectorizedBatchUtil.setNullColIsNullValue(batch.cols[projectionColumnNum],batchIndex);
    return;
  }
switch (targetCategory) {
case PRIMITIVE:
{
      PrimitiveCategory targetPrimitiveCategory=targetPrimitiveCategories[logicalColumnIndex];
switch (targetPrimitiveCategory) {
case VOID:
        VectorizedBatchUtil.setNullColIsNullValue(batch.cols[projectionColumnNum],batchIndex);
      return;
case BOOLEAN:
    ((LongColumnVector)batch.cols[projectionColumnNum]).vector[batchIndex]=(((BooleanWritable)object).get() ? 1 : 0);
  break;
case BYTE:
((LongColumnVector)batch.cols[projectionColumnNum]).vector[batchIndex]=((ByteWritable)object).get();
break;
case SHORT:
((LongColumnVector)batch.cols[projectionColumnNum]).vector[batchIndex]=((ShortWritable)object).get();
break;
case INT:
((LongColumnVector)batch.cols[projectionColumnNum]).vector[batchIndex]=((IntWritable)object).get();
break;
case LONG:
((LongColumnVector)batch.cols[projectionColumnNum]).vector[batchIndex]=((LongWritable)object).get();
break;
case TIMESTAMP:
((TimestampColumnVector)batch.cols[projectionColumnNum]).set(batchIndex,((TimestampWritable)object).getTimestamp());
break;
case DATE:
((LongColumnVector)batch.cols[projectionColumnNum]).vector[batchIndex]=((DateWritable)object).getDays();
break;
case FLOAT:
((DoubleColumnVector)batch.cols[projectionColumnNum]).vector[batchIndex]=((FloatWritable)object).get();
break;
case DOUBLE:
((DoubleColumnVector)batch.cols[projectionColumnNum]).vector[batchIndex]=((DoubleWritable)object).get();
break;
case BINARY:
{
BytesWritable bw=(BytesWritable)object;
((BytesColumnVector)batch.cols[projectionColumnNum]).setVal(batchIndex,bw.getBytes(),0,bw.getLength());
}
break;
case STRING:
{
Text tw=(Text)object;
((BytesColumnVector)batch.cols[projectionColumnNum]).setVal(batchIndex,tw.getBytes(),0,tw.getLength());
}
break;
case VARCHAR:
{
HiveVarchar hiveVarchar;
if (object instanceof HiveVarchar) {
hiveVarchar=(HiveVarchar)object;
}
 else {
hiveVarchar=((HiveVarcharWritable)object).getHiveVarchar();
}
byte[] bytes=hiveVarchar.getValue().getBytes();
((BytesColumnVector)batch.cols[projectionColumnNum]).setVal(batchIndex,bytes,0,bytes.length);
}
break;
case CHAR:
{
HiveChar hiveChar;
if (object instanceof HiveChar) {
hiveChar=(HiveChar)object;
}
 else {
hiveChar=((HiveCharWritable)object).getHiveChar();
}
byte[] bytes=hiveChar.getStrippedValue().getBytes();
((BytesColumnVector)batch.cols[projectionColumnNum]).setVal(batchIndex,bytes,0,bytes.length);
}
break;
case DECIMAL:
if (object instanceof HiveDecimal) {
((DecimalColumnVector)batch.cols[projectionColumnNum]).set(batchIndex,(HiveDecimal)object);
}
 else {
((DecimalColumnVector)batch.cols[projectionColumnNum]).set(batchIndex,(HiveDecimalWritable)object);
}
break;
case INTERVAL_YEAR_MONTH:
((LongColumnVector)batch.cols[projectionColumnNum]).vector[batchIndex]=((HiveIntervalYearMonthWritable)object).getHiveIntervalYearMonth().getTotalMonths();
break;
case INTERVAL_DAY_TIME:
((IntervalDayTimeColumnVector)batch.cols[projectionColumnNum]).set(batchIndex,((HiveIntervalDayTimeWritable)object).getHiveIntervalDayTime());
break;
default :
throw new RuntimeException("Primitive category " + targetPrimitiveCategory.name() + " not supported");
}
}
break;
default :
throw new RuntimeException("Category " + targetCategory.name() + " not supported");
}
batch.cols[projectionColumnNum].isNull[batchIndex]=false;
}
