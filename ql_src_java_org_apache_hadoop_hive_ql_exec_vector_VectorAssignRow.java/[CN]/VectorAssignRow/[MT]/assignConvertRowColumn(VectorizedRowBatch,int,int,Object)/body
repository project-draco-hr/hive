{
  Preconditions.checkState(isConvert[logicalColumnIndex]);
  Category targetCategory=targetCategories[logicalColumnIndex];
  if (targetCategory == null) {
    return;
  }
  final int projectionColumnNum=projectionColumnNums[logicalColumnIndex];
  if (object == null) {
    VectorizedBatchUtil.setNullColIsNullValue(batch.cols[projectionColumnNum],batchIndex);
    return;
  }
  try {
switch (targetCategory) {
case PRIMITIVE:
      PrimitiveCategory targetPrimitiveCategory=targetPrimitiveCategories[logicalColumnIndex];
switch (targetPrimitiveCategory) {
case VOID:
      VectorizedBatchUtil.setNullColIsNullValue(batch.cols[projectionColumnNum],batchIndex);
    return;
case BOOLEAN:
  ((LongColumnVector)batch.cols[projectionColumnNum]).vector[batchIndex]=(PrimitiveObjectInspectorUtils.getBoolean(object,convertSourcePrimitiveObjectInspectors[logicalColumnIndex]) ? 1 : 0);
break;
case BYTE:
((LongColumnVector)batch.cols[projectionColumnNum]).vector[batchIndex]=PrimitiveObjectInspectorUtils.getByte(object,convertSourcePrimitiveObjectInspectors[logicalColumnIndex]);
break;
case SHORT:
((LongColumnVector)batch.cols[projectionColumnNum]).vector[batchIndex]=PrimitiveObjectInspectorUtils.getShort(object,convertSourcePrimitiveObjectInspectors[logicalColumnIndex]);
break;
case INT:
((LongColumnVector)batch.cols[projectionColumnNum]).vector[batchIndex]=PrimitiveObjectInspectorUtils.getInt(object,convertSourcePrimitiveObjectInspectors[logicalColumnIndex]);
break;
case LONG:
((LongColumnVector)batch.cols[projectionColumnNum]).vector[batchIndex]=PrimitiveObjectInspectorUtils.getLong(object,convertSourcePrimitiveObjectInspectors[logicalColumnIndex]);
break;
case TIMESTAMP:
{
Timestamp timestamp=PrimitiveObjectInspectorUtils.getTimestamp(object,convertSourcePrimitiveObjectInspectors[logicalColumnIndex]);
if (timestamp == null) {
VectorizedBatchUtil.setNullColIsNullValue(batch.cols[projectionColumnNum],batchIndex);
return;
}
((TimestampColumnVector)batch.cols[projectionColumnNum]).set(batchIndex,timestamp);
}
break;
case DATE:
{
Date date=PrimitiveObjectInspectorUtils.getDate(object,convertSourcePrimitiveObjectInspectors[logicalColumnIndex]);
if (date == null) {
VectorizedBatchUtil.setNullColIsNullValue(batch.cols[projectionColumnNum],batchIndex);
return;
}
DateWritable dateWritable=(DateWritable)convertTargetWritables[logicalColumnIndex];
dateWritable.set(date);
((LongColumnVector)batch.cols[projectionColumnNum]).vector[batchIndex]=dateWritable.getDays();
}
break;
case FLOAT:
((DoubleColumnVector)batch.cols[projectionColumnNum]).vector[batchIndex]=PrimitiveObjectInspectorUtils.getFloat(object,convertSourcePrimitiveObjectInspectors[logicalColumnIndex]);
break;
case DOUBLE:
((DoubleColumnVector)batch.cols[projectionColumnNum]).vector[batchIndex]=PrimitiveObjectInspectorUtils.getDouble(object,convertSourcePrimitiveObjectInspectors[logicalColumnIndex]);
break;
case BINARY:
{
BytesWritable bytesWritable=PrimitiveObjectInspectorUtils.getBinary(object,convertSourcePrimitiveObjectInspectors[logicalColumnIndex]);
if (bytesWritable == null) {
VectorizedBatchUtil.setNullColIsNullValue(batch.cols[projectionColumnNum],batchIndex);
return;
}
((BytesColumnVector)batch.cols[projectionColumnNum]).setVal(batchIndex,bytesWritable.getBytes(),0,bytesWritable.getLength());
}
break;
case STRING:
{
String string=PrimitiveObjectInspectorUtils.getString(object,convertSourcePrimitiveObjectInspectors[logicalColumnIndex]);
if (string == null) {
VectorizedBatchUtil.setNullColIsNullValue(batch.cols[projectionColumnNum],batchIndex);
return;
}
Text text=(Text)convertTargetWritables[logicalColumnIndex];
text.set(string);
((BytesColumnVector)batch.cols[projectionColumnNum]).setVal(batchIndex,text.getBytes(),0,text.getLength());
}
break;
case VARCHAR:
{
HiveVarchar hiveVarchar=PrimitiveObjectInspectorUtils.getHiveVarchar(object,convertSourcePrimitiveObjectInspectors[logicalColumnIndex]);
if (hiveVarchar == null) {
VectorizedBatchUtil.setNullColIsNullValue(batch.cols[projectionColumnNum],batchIndex);
return;
}
byte[] bytes=hiveVarchar.getValue().getBytes();
((BytesColumnVector)batch.cols[projectionColumnNum]).setVal(batchIndex,bytes,0,bytes.length);
}
break;
case CHAR:
{
HiveChar hiveChar=PrimitiveObjectInspectorUtils.getHiveChar(object,convertSourcePrimitiveObjectInspectors[logicalColumnIndex]);
if (hiveChar == null) {
VectorizedBatchUtil.setNullColIsNullValue(batch.cols[projectionColumnNum],batchIndex);
return;
}
byte[] bytes=hiveChar.getStrippedValue().getBytes();
((BytesColumnVector)batch.cols[projectionColumnNum]).setVal(batchIndex,bytes,0,bytes.length);
}
break;
case DECIMAL:
{
HiveDecimal hiveDecimal=PrimitiveObjectInspectorUtils.getHiveDecimal(object,convertSourcePrimitiveObjectInspectors[logicalColumnIndex]);
if (hiveDecimal == null) {
VectorizedBatchUtil.setNullColIsNullValue(batch.cols[projectionColumnNum],batchIndex);
return;
}
((DecimalColumnVector)batch.cols[projectionColumnNum]).set(batchIndex,hiveDecimal);
}
break;
case INTERVAL_YEAR_MONTH:
{
HiveIntervalYearMonth intervalYearMonth=PrimitiveObjectInspectorUtils.getHiveIntervalYearMonth(object,convertSourcePrimitiveObjectInspectors[logicalColumnIndex]);
if (intervalYearMonth == null) {
VectorizedBatchUtil.setNullColIsNullValue(batch.cols[projectionColumnNum],batchIndex);
return;
}
((LongColumnVector)batch.cols[projectionColumnNum]).vector[batchIndex]=intervalYearMonth.getTotalMonths();
}
break;
case INTERVAL_DAY_TIME:
{
HiveIntervalDayTime intervalDayTime=PrimitiveObjectInspectorUtils.getHiveIntervalDayTime(object,convertSourcePrimitiveObjectInspectors[logicalColumnIndex]);
if (intervalDayTime == null) {
VectorizedBatchUtil.setNullColIsNullValue(batch.cols[projectionColumnNum],batchIndex);
return;
}
((IntervalDayTimeColumnVector)batch.cols[projectionColumnNum]).set(batchIndex,intervalDayTime);
}
break;
default :
throw new RuntimeException("Primitive category " + targetPrimitiveCategory.name() + " not supported");
}
break;
default :
throw new RuntimeException("Category " + targetCategory.name() + " not supported");
}
}
 catch (NumberFormatException e) {
VectorizedBatchUtil.setNullColIsNullValue(batch.cols[projectionColumnNum],batchIndex);
return;
}
batch.cols[projectionColumnNum].isNull[batchIndex]=false;
}
