{
  this();
  MapJoinDesc desc=(MapJoinDesc)conf;
  this.conf=desc;
  order=desc.getTagOrder();
  numAliases=desc.getExprs().size();
  posBigTable=(byte)desc.getPosBigTable();
  filterMaps=desc.getFilterMap();
  tagLen=desc.getTagLength();
  noOuterJoin=desc.isNoOuterJoin();
  vContext.setOperatorType(OperatorType.FILTER);
  Map<Byte,List<ExprNodeDesc>> filterExpressions=desc.getFilters();
  bigTableFilterExpressions=vContext.getVectorExpressions(filterExpressions.get(posBigTable));
  vContext.setOperatorType(OperatorType.MAPJOIN);
  List<ExprNodeDesc> keyDesc=desc.getKeys().get(posBigTable);
  keyExpressions=vContext.getVectorExpressions(keyDesc);
  keyOutputWriters=VectorExpressionWriterFactory.getExpressionWriters(keyDesc);
  Map<Byte,List<ExprNodeDesc>> exprs=desc.getExprs();
  bigTableValueExpressions=vContext.getVectorExpressions(exprs.get(posBigTable));
  List<String> outColNames=desc.getOutputColumnNames();
  int outputColumnIndex=0;
  Map<String,Integer> cMap=vContext.getColumnMap();
  for (  byte alias : order) {
    for (    ExprNodeDesc expr : exprs.get(alias)) {
      String columnName=outColNames.get(outputColumnIndex);
      if (!cMap.containsKey(columnName)) {
        vContext.addOutputColumn(columnName,expr.getTypeString());
      }
      ++outputColumnIndex;
    }
  }
  this.fileKey=vContext.getFileKey();
}
