{
  StringBuffer reportBuffer=new StringBuffer();
  SortedSet<String> keys=new TreeSet<String>(progressMap.keySet());
  for (  String s : keys) {
    Progress progress=progressMap.get(s);
    final int complete=progress.getSucceededTaskCount();
    final int total=progress.getTotalTaskCount();
    final int running=progress.getRunningTaskCount();
    final int failed=progress.getFailedTaskAttemptCount();
    if (total <= 0) {
      reportBuffer.append(String.format("%s: -/-\t",s,complete,total));
    }
 else {
      if (complete == total && !completed.contains(s)) {
        completed.add(s);
        if (!perfLogger.startTimeHasMethod(PerfLogger.TEZ_RUN_VERTEX + s)) {
          perfLogger.PerfLogBegin(CLASS_NAME,PerfLogger.TEZ_RUN_VERTEX + s);
        }
        perfLogger.PerfLogEnd(CLASS_NAME,PerfLogger.TEZ_RUN_VERTEX + s);
      }
      if (complete < total && (complete > 0 || running > 0 || failed > 0)) {
        if (!perfLogger.startTimeHasMethod(PerfLogger.TEZ_RUN_VERTEX + s)) {
          perfLogger.PerfLogBegin(CLASS_NAME,PerfLogger.TEZ_RUN_VERTEX + s);
        }
        if (failed > 0) {
          reportBuffer.append(String.format("%s: %d(+%d,-%d)/%d\t",s,complete,running,failed,total));
        }
 else {
          reportBuffer.append(String.format("%s: %d(+%d)/%d\t",s,complete,running,total));
        }
      }
 else {
        if (failed > 0) {
          reportBuffer.append(String.format("%s: %d(-%d)/%d\t",s,complete,failed,total));
        }
 else {
          reportBuffer.append(String.format("%s: %d/%d\t",s,complete,total));
        }
      }
    }
  }
  return reportBuffer.toString();
}
