{
  Map<String,List<Dependency>> result=new LinkedHashMap<String,List<Dependency>>();
  for (  BaseWork baseWork : getAllWork()) {
    if (invertedWorkGraph.get(baseWork) != null && invertedWorkGraph.get(baseWork).size() > 0) {
      List<Dependency> dependencies=new LinkedList<Dependency>();
      for (      BaseWork d : invertedWorkGraph.get(baseWork)) {
        Dependency dependency=new Dependency();
        dependency.w=d;
        dependency.prop=getEdgeProperty(d,baseWork);
        dependencies.add(dependency);
      }
      if (!dependencies.isEmpty()) {
        Collections.sort(dependencies);
        result.put(baseWork.getName(),dependencies);
      }
    }
  }
  return result;
}
