{
  LOG.debug("Determining who to run the job as.");
  final Path p=new Path(location);
  final FileSystem fs=p.getFileSystem(conf);
  try {
    FileStatus stat=fs.getFileStatus(p);
    LOG.debug("Running job as " + stat.getOwner());
    return stat.getOwner();
  }
 catch (  AccessControlException e) {
    LOG.debug("Unable to stat file as current user, trying as table owner");
    final List<String> wrapper=new ArrayList<String>(1);
    UserGroupInformation ugi=UserGroupInformation.createProxyUser(t.getOwner(),UserGroupInformation.getLoginUser());
    ugi.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        FileStatus stat=fs.getFileStatus(p);
        wrapper.add(stat.getOwner());
        return null;
      }
    }
);
    try {
      FileSystem.closeAllForUGI(ugi);
    }
 catch (    IOException exception) {
      LOG.error("Could not clean up file-system handles for UGI: " + ugi,exception);
    }
    if (wrapper.size() == 1) {
      LOG.debug("Running job as " + wrapper.get(0));
      return wrapper.get(0);
    }
  }
  LOG.error("Unable to stat file " + p + " as either current user("+ UserGroupInformation.getLoginUser()+ ") or table owner("+ t.getOwner()+ "), giving up");
  throw new IOException("Unable to stat file: " + p);
}
