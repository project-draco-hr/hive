{
  final int keyCount=keyTypeNames.length;
  PrimitiveTypeInfo[] keyPrimitiveTypeInfos=new PrimitiveTypeInfo[keyCount];
  PrimitiveCategory[] keyPrimitiveCategories=new PrimitiveCategory[keyCount];
  ArrayList<ObjectInspector> keyPrimitiveObjectInspectorList=new ArrayList<ObjectInspector>(keyCount);
  for (int i=0; i < keyCount; i++) {
    PrimitiveTypeInfo primitiveTypeInfo=(PrimitiveTypeInfo)TypeInfoUtils.getTypeInfoFromTypeString(keyTypeNames[i]);
    keyPrimitiveTypeInfos[i]=primitiveTypeInfo;
    PrimitiveCategory primitiveCategory=primitiveTypeInfo.getPrimitiveCategory();
    keyPrimitiveCategories[i]=primitiveCategory;
    keyPrimitiveObjectInspectorList.add(PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(primitiveTypeInfo));
  }
  boolean[] keyColumnSortOrderIsDesc=new boolean[keyCount];
  Arrays.fill(keyColumnSortOrderIsDesc,false);
  byte[] keyColumnNullMarker=new byte[keyCount];
  Arrays.fill(keyColumnNullMarker,BinarySortableSerDe.ZERO);
  byte[] keyColumnNotNullMarker=new byte[keyCount];
  Arrays.fill(keyColumnNotNullMarker,BinarySortableSerDe.ONE);
  BinarySortableSerializeWrite keySerializeWrite=new BinarySortableSerializeWrite(keyColumnSortOrderIsDesc,keyColumnNullMarker,keyColumnNotNullMarker);
  PrimitiveTypeInfo[] valuePrimitiveTypeInfos=valueSource.primitiveTypeInfos();
  final int columnCount=valuePrimitiveTypeInfos.length;
  SerializeWrite valueSerializeWrite=new LazyBinarySerializeWrite(columnCount);
  final int count=rows.length;
  for (int i=0; i < count; i++) {
    Object[] valueRow=rows[i];
    Output valueOutput=new Output();
    ((LazyBinarySerializeWrite)valueSerializeWrite).set(valueOutput);
    for (int index=0; index < columnCount; index++) {
      Writable writable=(Writable)valueRow[index];
      VerifyFastRow.serializeWrite(valueSerializeWrite,valuePrimitiveTypeInfos[index],writable);
    }
    byte[] value=Arrays.copyOf(valueOutput.getData(),valueOutput.getLength());
    byte[] key;
    if (random.nextBoolean() || verifyTable.getCount() == 0) {
      Object[] keyRow=VectorRandomRowSource.randomRow(keyCount,random,keyPrimitiveObjectInspectorList,keyPrimitiveCategories,keyPrimitiveTypeInfos);
      Output keyOutput=new Output();
      keySerializeWrite.set(keyOutput);
      for (int index=0; index < keyCount; index++) {
        Writable writable=(Writable)keyRow[index];
        VerifyFastRow.serializeWrite(keySerializeWrite,keyPrimitiveTypeInfos[index],writable);
      }
      key=Arrays.copyOf(keyOutput.getData(),keyOutput.getLength());
      verifyTable.add(key,keyRow,value,valueRow);
    }
 else {
      key=verifyTable.addRandomExisting(value,valueRow,random);
    }
    BytesWritable keyWritable=new BytesWritable(key);
    BytesWritable valueWritable=new BytesWritable(value);
    map.putRow(keyWritable,valueWritable);
  }
  verifyTable.verify(map,hashTableKeyType,valuePrimitiveTypeInfos,doClipping,useExactBytes,random);
}
