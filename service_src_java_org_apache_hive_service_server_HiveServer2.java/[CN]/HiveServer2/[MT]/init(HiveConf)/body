{
  try {
    if (hiveConf.getBoolVar(ConfVars.HIVE_SERVER2_METRICS_ENABLED)) {
      MetricsFactory.init(hiveConf);
    }
  }
 catch (  Throwable t) {
    LOG.warn("Could not initiate the HiveServer2 Metrics system.  Metrics may not be reported.",t);
  }
  cliService=new CLIService(this);
  addService(cliService);
  final HiveServer2 hiveServer2=this;
  Runnable oomHook=new Runnable(){
    @Override public void run(){
      hiveServer2.stop();
    }
  }
;
  if (isHTTPTransportMode(hiveConf)) {
    thriftCLIService=new ThriftHttpCLIService(cliService,oomHook);
  }
 else {
    thriftCLIService=new ThriftBinaryCLIService(cliService,oomHook);
  }
  addService(thriftCLIService);
  super.init(hiveConf);
  try {
    hiveConf.set(HiveConf.ConfVars.HIVE_SERVER2_THRIFT_BIND_HOST.varname,getServerHost());
  }
 catch (  Throwable t) {
    throw new Error("Unable to intitialize HiveServer2",t);
  }
  if (HiveConf.getBoolVar(hiveConf,ConfVars.LLAP_HS2_ENABLE_COORDINATOR)) {
    try {
      LlapCoordinator.initializeInstance(hiveConf);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  try {
    int webUIPort=hiveConf.getIntVar(ConfVars.HIVE_SERVER2_WEBUI_PORT);
    boolean uiDisabledInTest=hiveConf.getBoolVar(ConfVars.HIVE_IN_TEST) && (webUIPort == Integer.valueOf(ConfVars.HIVE_SERVER2_WEBUI_PORT.getDefaultValue()));
    if (uiDisabledInTest) {
      LOG.info("Web UI is disabled in test mode since webui port was not specified");
    }
 else {
      if (webUIPort <= 0) {
        LOG.info("Web UI is disabled since port is set to " + webUIPort);
      }
 else {
        LOG.info("Starting Web UI on port " + webUIPort);
        HttpServer.Builder builder=new HttpServer.Builder("hiveserver2");
        builder.setPort(webUIPort).setConf(hiveConf);
        builder.setHost(hiveConf.getVar(ConfVars.HIVE_SERVER2_WEBUI_BIND_HOST));
        builder.setMaxThreads(hiveConf.getIntVar(ConfVars.HIVE_SERVER2_WEBUI_MAX_THREADS));
        builder.setAdmins(hiveConf.getVar(ConfVars.USERS_IN_ADMIN_ROLE));
        builder.setContextAttribute("hive.sm",cliService.getSessionManager());
        hiveConf.set("startcode",String.valueOf(System.currentTimeMillis()));
        if (hiveConf.getBoolVar(ConfVars.HIVE_SERVER2_WEBUI_USE_SSL)) {
          String keyStorePath=hiveConf.getVar(ConfVars.HIVE_SERVER2_WEBUI_SSL_KEYSTORE_PATH);
          if (Strings.isBlank(keyStorePath)) {
            throw new IllegalArgumentException(ConfVars.HIVE_SERVER2_WEBUI_SSL_KEYSTORE_PATH.varname + " Not configured for SSL connection");
          }
          builder.setKeyStorePassword(ShimLoader.getHadoopShims().getPassword(hiveConf,ConfVars.HIVE_SERVER2_WEBUI_SSL_KEYSTORE_PASSWORD.varname));
          builder.setKeyStorePath(keyStorePath);
          builder.setUseSSL(true);
        }
        if (hiveConf.getBoolVar(ConfVars.HIVE_SERVER2_WEBUI_USE_SPNEGO)) {
          String spnegoPrincipal=hiveConf.getVar(ConfVars.HIVE_SERVER2_WEBUI_SPNEGO_PRINCIPAL);
          String spnegoKeytab=hiveConf.getVar(ConfVars.HIVE_SERVER2_WEBUI_SPNEGO_KEYTAB);
          if (Strings.isBlank(spnegoPrincipal) || Strings.isBlank(spnegoKeytab)) {
            throw new IllegalArgumentException(ConfVars.HIVE_SERVER2_WEBUI_SPNEGO_PRINCIPAL.varname + "/" + ConfVars.HIVE_SERVER2_WEBUI_SPNEGO_KEYTAB.varname+ " Not configured for SPNEGO authentication");
          }
          builder.setSPNEGOPrincipal(spnegoPrincipal);
          builder.setSPNEGOKeytab(spnegoKeytab);
          builder.setUseSPNEGO(true);
        }
        builder.addServlet("llap",LlapServlet.class);
        webServer=builder.build();
        webServer.addServlet("query_page","/query_page",QueryProfileServlet.class);
      }
    }
  }
 catch (  IOException ie) {
    throw new ServiceException(ie);
  }
  ShutdownHookManager.addShutdownHook(new Runnable(){
    @Override public void run(){
      hiveServer2.stop();
    }
  }
);
}
