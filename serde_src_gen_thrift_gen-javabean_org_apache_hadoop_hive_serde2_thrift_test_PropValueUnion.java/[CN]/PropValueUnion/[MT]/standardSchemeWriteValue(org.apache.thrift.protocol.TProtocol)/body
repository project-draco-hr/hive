{
switch (setField_) {
case INT_VALUE:
    Integer intValue=(Integer)value_;
  oprot.writeI32(intValue);
return;
case LONG_VALUE:
Long longValue=(Long)value_;
oprot.writeI64(longValue);
return;
case STRING_VALUE:
String stringValue=(String)value_;
oprot.writeString(stringValue);
return;
case DOUBLE_VALUE:
Double doubleValue=(Double)value_;
oprot.writeDouble(doubleValue);
return;
case FLAG:
Boolean flag=(Boolean)value_;
oprot.writeBool(flag);
return;
case L_STRING:
List<String> lString=(List<String>)value_;
{
oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,lString.size()));
for (String _iter7 : lString) {
oprot.writeString(_iter7);
}
oprot.writeListEnd();
}
return;
case UNION_MSTRING_STRING:
Map<String,String> unionMStringString=(Map<String,String>)value_;
{
oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,unionMStringString.size()));
for (Map.Entry<String,String> _iter8 : unionMStringString.entrySet()) {
oprot.writeString(_iter8.getKey());
oprot.writeString(_iter8.getValue());
}
oprot.writeMapEnd();
}
return;
default :
throw new IllegalStateException("Cannot write union with unknown field " + setField_);
}
}
