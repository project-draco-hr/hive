{
switch (setField) {
case INT_VALUE:
    if (value instanceof Integer) {
      break;
    }
  throw new ClassCastException("Was expecting value of type Integer for field 'intValue', but got " + value.getClass().getSimpleName());
case LONG_VALUE:
if (value instanceof Long) {
  break;
}
throw new ClassCastException("Was expecting value of type Long for field 'longValue', but got " + value.getClass().getSimpleName());
case STRING_VALUE:
if (value instanceof String) {
break;
}
throw new ClassCastException("Was expecting value of type String for field 'stringValue', but got " + value.getClass().getSimpleName());
case DOUBLE_VALUE:
if (value instanceof Double) {
break;
}
throw new ClassCastException("Was expecting value of type Double for field 'doubleValue', but got " + value.getClass().getSimpleName());
case FLAG:
if (value instanceof Boolean) {
break;
}
throw new ClassCastException("Was expecting value of type Boolean for field 'flag', but got " + value.getClass().getSimpleName());
case L_STRING:
if (value instanceof List) {
break;
}
throw new ClassCastException("Was expecting value of type List<String> for field 'lString', but got " + value.getClass().getSimpleName());
case UNION_MSTRING_STRING:
if (value instanceof Map) {
break;
}
throw new ClassCastException("Was expecting value of type Map<String,String> for field 'unionMStringString', but got " + value.getClass().getSimpleName());
default :
throw new IllegalArgumentException("Unknown field id " + setField);
}
}
