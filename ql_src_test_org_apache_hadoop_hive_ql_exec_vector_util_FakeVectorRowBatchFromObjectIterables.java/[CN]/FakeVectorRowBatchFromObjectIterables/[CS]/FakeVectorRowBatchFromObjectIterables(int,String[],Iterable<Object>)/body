{
  this.types=types;
  this.batchSize=batchSize;
  iterators=new ArrayList<Iterator<Object>>(types.length);
  columnAssign=new ColumnVectorAssign[types.length];
  batch=new VectorizedRowBatch(types.length,batchSize);
  for (int i=0; i < types.length; ++i) {
    if (types[i].equalsIgnoreCase("tinyint") || types[i].equalsIgnoreCase("smallint") || types[i].equalsIgnoreCase("int")|| types[i].equalsIgnoreCase("bigint")|| types[i].equalsIgnoreCase("long")) {
      batch.cols[i]=new LongColumnVector(batchSize);
      columnAssign[i]=new ColumnVectorAssign(){
        @Override public void assign(        ColumnVector columnVector,        int row,        Object value){
          LongColumnVector lcv=(LongColumnVector)columnVector;
          lcv.vector[row]=Long.valueOf(value.toString());
        }
      }
;
    }
 else     if (types[i].equalsIgnoreCase("boolean")) {
      batch.cols[i]=new LongColumnVector(batchSize);
      columnAssign[i]=new ColumnVectorAssign(){
        @Override public void assign(        ColumnVector columnVector,        int row,        Object value){
          LongColumnVector lcv=(LongColumnVector)columnVector;
          lcv.vector[row]=(Boolean)value ? 1 : 0;
        }
      }
;
    }
 else     if (types[i].equalsIgnoreCase("timestamp")) {
      batch.cols[i]=new LongColumnVector(batchSize);
      columnAssign[i]=new ColumnVectorAssign(){
        @Override public void assign(        ColumnVector columnVector,        int row,        Object value){
          LongColumnVector lcv=(LongColumnVector)columnVector;
          Timestamp t=(Timestamp)value;
          lcv.vector[row]=TimestampUtils.getTimeNanoSec(t);
        }
      }
;
    }
 else     if (types[i].equalsIgnoreCase("string")) {
      batch.cols[i]=new BytesColumnVector(batchSize);
      columnAssign[i]=new ColumnVectorAssign(){
        @Override public void assign(        ColumnVector columnVector,        int row,        Object value){
          BytesColumnVector bcv=(BytesColumnVector)columnVector;
          String s=(String)value;
          byte[] bytes=s.getBytes();
          bcv.vector[row]=bytes;
          bcv.start[row]=0;
          bcv.length[row]=bytes.length;
        }
      }
;
    }
 else     if (types[i].equalsIgnoreCase("double") || types[i].equalsIgnoreCase("float")) {
      batch.cols[i]=new DoubleColumnVector(batchSize);
      columnAssign[i]=new ColumnVectorAssign(){
        @Override public void assign(        ColumnVector columnVector,        int row,        Object value){
          DoubleColumnVector dcv=(DoubleColumnVector)columnVector;
          dcv.vector[row]=Double.valueOf(value.toString());
        }
      }
;
    }
 else     if (types[i].toLowerCase().startsWith("decimal")) {
      batch.cols[i]=new DecimalColumnVector(batchSize,38,0);
      columnAssign[i]=new ColumnVectorAssign(){
        @Override public void assign(        ColumnVector columnVector,        int row,        Object value){
          DecimalColumnVector dcv=(DecimalColumnVector)columnVector;
          dcv.vector[row]=(Decimal128)value;
        }
      }
;
    }
 else {
      throw new HiveException("Unimplemented type " + types[i]);
    }
    iterators.add(iterables[i].iterator());
  }
}
