{
  String tokenStrForm=getDelegationTokenStr(clientUgi,clientUgi);
  Token<DelegationTokenIdentifier> t=new Token<DelegationTokenIdentifier>();
  t.decodeFromUrlString(tokenStrForm);
  DelegationTokenIdentifier d=new DelegationTokenIdentifier();
  d.readFields(new DataInputStream(new ByteArrayInputStream(t.getIdentifier())));
  assertTrue("Usernames don't match",clientUgi.getShortUserName().equals(d.getUser().getShortUserName()));
  if (tokenSig != null) {
    conf.set("hive.metastore.token.signature",tokenSig);
    t.setService(new Text(tokenSig));
  }
  clientUgi.addToken(t);
  HiveMetaStoreClient hiveClient=clientUgi.doAs(new PrivilegedExceptionAction<HiveMetaStoreClient>(){
    public HiveMetaStoreClient run() throws Exception {
      HiveMetaStoreClient hiveClient=new HiveMetaStoreClient(conf);
      return hiveClient;
    }
  }
);
  assertTrue("Couldn't connect to metastore",hiveClient != null);
  createDBAndVerifyExistence(hiveClient);
  hiveClient.close();
  HiveMetaStore.cancelDelegationToken(tokenStrForm);
  hiveClient=clientUgi.doAs(new PrivilegedExceptionAction<HiveMetaStoreClient>(){
    public HiveMetaStoreClient run(){
      try {
        HiveMetaStoreClient hiveClient=new HiveMetaStoreClient(conf);
        return hiveClient;
      }
 catch (      MetaException e) {
        return null;
      }
    }
  }
);
  assertTrue("Expected metastore operations to fail",hiveClient == null);
}
