{
  Map<String,Object[]> tests=new HashMap<String,Object[]>();
  tests.put("test%jdbc%",new Object[]{"testhivejdbcdriver_table","testhivejdbcdriverpartitionedtable","testhivejdbcdriverview"});
  tests.put("%jdbcdriver\\_table",new Object[]{"testhivejdbcdriver_table"});
  tests.put("testhivejdbcdriver\\_table",new Object[]{"testhivejdbcdriver_table"});
  tests.put("test_ivejdbcdri_er\\_table",new Object[]{"testhivejdbcdriver_table"});
  tests.put("test_ivejdbcdri_er_table",new Object[]{"testhivejdbcdriver_table"});
  tests.put("test_ivejdbcdri_er%table",new Object[]{"testhivejdbcdriver_table","testhivejdbcdriverpartitionedtable"});
  tests.put("%jdbc%",new Object[]{"testhivejdbcdriver_table","testhivejdbcdriverpartitionedtable","testhivejdbcdriverview"});
  tests.put("",new Object[]{});
  for (  String checkPattern : tests.keySet()) {
    ResultSet rs=con.getMetaData().getTables("default",null,checkPattern,null);
    int cnt=0;
    while (rs.next()) {
      String resultTableName=rs.getString("TABLE_NAME");
      assertEquals("Get by index different from get by name.",rs.getString(3),resultTableName);
      assertEquals("Excpected a different table.",tests.get(checkPattern)[cnt],resultTableName);
      String resultTableComment=rs.getString("REMARKS");
      assertTrue("Missing comment on the table.",resultTableComment.length() > 0);
      String tableType=rs.getString("TABLE_TYPE");
      if (resultTableName.endsWith("view")) {
        assertEquals("Expected a tabletype view but got something else.","VIEW",tableType);
      }
      cnt++;
    }
    rs.close();
    assertEquals("Received an incorrect number of tables.",tests.get(checkPattern).length,cnt);
  }
  ResultSet rs=con.getMetaData().getTables("default",null,null,new String[]{"VIEW"});
  int cnt=0;
  while (rs.next()) {
    cnt++;
  }
  rs.close();
  assertEquals("Incorrect number of views found.",1,cnt);
}
