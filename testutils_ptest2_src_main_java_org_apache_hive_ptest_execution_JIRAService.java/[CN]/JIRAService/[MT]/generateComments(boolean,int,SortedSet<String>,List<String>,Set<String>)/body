{
  BuildInfo buildInfo=formatBuildTag(mBuildTag);
  String buildTagForLogs=formatBuildTagForLogs(mBuildTag);
  List<String> comments=Lists.newArrayList();
  comments.add("");
  comments.add("");
  if (!mPatch.isEmpty()) {
    comments.add("Here are the results of testing the latest attachment:");
    comments.add(mPatch);
  }
  comments.add("");
  if (error && numTestsExecuted == 0) {
    comments.add(formatError("-1 due to build exiting with an error"));
  }
 else {
    if (addedTests.size() > 0) {
      comments.add(formatSuccess("+1 due to " + addedTests.size() + " test(s) being added or modified."));
    }
 else {
      comments.add(formatError("-1 due to no test(s) being added or modified."));
    }
    comments.add("");
    if (numTestsExecuted == 0) {
      comments.add(formatError("-1 due to no tests executed"));
    }
 else {
      if (failedTests.isEmpty()) {
        comments.add(formatSuccess("+1 due to " + numTestsExecuted + " tests passed"));
      }
 else {
        comments.add(formatError("-1 due to " + failedTests.size() + " failed/errored test(s), "+ numTestsExecuted+ " tests executed"));
        comments.add("*Failed tests:*");
        comments.add("{noformat}");
        comments.addAll(failedTests);
        comments.add("{noformat}");
      }
    }
  }
  comments.add("");
  comments.add("Test results: " + mJenkinsURL + "/"+ buildInfo.getFormattedBuildTag()+ "/testReport");
  comments.add("Console output: " + mJenkinsURL + "/"+ buildInfo.getFormattedBuildTag()+ "/console");
  comments.add("Test logs: " + mLogsURL + buildTagForLogs);
  comments.add("");
  if (!messages.isEmpty()) {
    comments.add("Messages:");
    comments.add("{noformat}");
    comments.addAll(trimMessages(messages));
    comments.add("{noformat}");
    comments.add("");
  }
  comments.add("This message is automatically generated.");
  String attachmentId=parseAttachementId(mPatch);
  comments.add("");
  comments.add("ATTACHMENT ID: " + attachmentId + " - "+ buildInfo.getBuildName());
  mLogger.info("Comment: " + Joiner.on("\n").join(comments));
  return Joiner.on("\n").join(comments);
}
