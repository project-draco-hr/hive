{
  String planFileName=null;
  String jobConfFileName=null;
  boolean noLog=false;
  String files=null;
  boolean localtask=false;
  try {
    for (int i=0; i < args.length; i++) {
      if (args[i].equals("-plan")) {
        planFileName=args[++i];
      }
 else       if (args[i].equals("-jobconffile")) {
        jobConfFileName=args[++i];
      }
 else       if (args[i].equals("-nolog")) {
        noLog=true;
      }
 else       if (args[i].equals("-files")) {
        files=args[++i];
      }
 else       if (args[i].equals("-localtask")) {
        localtask=true;
      }
    }
  }
 catch (  IndexOutOfBoundsException e) {
    System.err.println("Missing argument to option");
    printUsage();
  }
  JobConf conf;
  if (localtask) {
    conf=new JobConf(MapredLocalTask.class);
  }
 else {
    conf=new JobConf(ExecDriver.class);
  }
  if (jobConfFileName != null) {
    conf.addResource(new Path(jobConfFileName));
  }
  if (files != null) {
    conf.set("tmpfiles",files);
  }
  String hadoopAuthToken=System.getenv(ShimLoader.getHadoopShims().getTokenFileLocEnvName());
  if (hadoopAuthToken != null) {
    conf.set("mapreduce.job.credentials.binary",hadoopAuthToken);
  }
  boolean isSilent=HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVESESSIONSILENT);
  if (noLog) {
    BasicConfigurator.resetConfiguration();
    BasicConfigurator.configure(new NullAppender());
  }
 else {
    setupChildLog4j(conf);
  }
  Log LOG=LogFactory.getLog(ExecDriver.class.getName());
  LogHelper console=new LogHelper(LOG,isSilent);
  if (planFileName == null) {
    console.printError("Must specify Plan File Name");
    printUsage();
  }
  for (  Appender appender : Collections.list((Enumeration<Appender>)LogManager.getRootLogger().getAllAppenders())) {
    if (appender instanceof FileAppender) {
      console.printInfo("Execution log at: " + ((FileAppender)appender).getFile());
    }
  }
  Path p=new Path(planFileName);
  FileSystem fs=FileSystem.getLocal(conf);
  InputStream pathData=fs.open(p);
  String auxJars=HiveConf.getVar(conf,HiveConf.ConfVars.HIVEAUXJARS);
  String addedJars=HiveConf.getVar(conf,HiveConf.ConfVars.HIVEADDEDJARS);
  try {
    ClassLoader loader=conf.getClassLoader();
    if (StringUtils.isNotBlank(auxJars)) {
      loader=Utilities.addToClassPath(loader,StringUtils.split(auxJars,","));
    }
    if (StringUtils.isNotBlank(addedJars)) {
      loader=Utilities.addToClassPath(loader,StringUtils.split(addedJars,","));
    }
    conf.setClassLoader(loader);
    Thread.currentThread().setContextClassLoader(loader);
  }
 catch (  Exception e) {
    throw new HiveException(e.getMessage(),e);
  }
  int ret;
  if (localtask) {
    memoryMXBean=ManagementFactory.getMemoryMXBean();
    MapredLocalWork plan=Utilities.deserializePlan(pathData,MapredLocalWork.class,conf);
    MapredLocalTask ed=new MapredLocalTask(plan,conf,isSilent);
    ret=ed.executeFromChildJVM(new DriverContext());
  }
 else {
    MapredWork plan=Utilities.deserializePlan(pathData,MapredWork.class,conf);
    ExecDriver ed=new ExecDriver(plan,conf,isSilent);
    ret=ed.execute(new DriverContext());
  }
  if (ret != 0) {
    System.exit(ret);
  }
}
