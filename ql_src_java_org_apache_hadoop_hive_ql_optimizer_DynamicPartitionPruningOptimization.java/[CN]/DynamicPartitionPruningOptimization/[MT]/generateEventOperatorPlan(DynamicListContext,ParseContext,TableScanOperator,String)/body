{
  Operator<? extends OperatorDesc> parentOfRS=ctx.generator.getParentOperators().get(0);
  ExprNodeDesc key=ctx.generator.getConf().getKeyCols().get(ctx.desc.getKeyIndex());
  ExprNodeDesc partKey=ctx.parent.getChildren().get(0);
  if (LOG.isDebugEnabled()) {
    LOG.debug("key expr: " + key);
    LOG.debug("partition key expr: " + partKey);
  }
  List<ExprNodeDesc> keyExprs=new ArrayList<ExprNodeDesc>();
  keyExprs.add(key);
  ArrayList<String> outputNames=new ArrayList<String>();
  outputNames.add(HiveConf.getColumnInternalName(0));
  SelectDesc select=new SelectDesc(keyExprs,outputNames);
  SelectOperator selectOp=(SelectOperator)OperatorFactory.getAndMakeChild(select,parentOfRS);
  float groupByMemoryUsage=HiveConf.getFloatVar(parseContext.getConf(),HiveConf.ConfVars.HIVEMAPAGGRHASHMEMORY);
  float memoryThreshold=HiveConf.getFloatVar(parseContext.getConf(),HiveConf.ConfVars.HIVEMAPAGGRMEMORYTHRESHOLD);
  ArrayList<ExprNodeDesc> groupByExprs=new ArrayList<ExprNodeDesc>();
  ExprNodeDesc groupByExpr=new ExprNodeColumnDesc(key.getTypeInfo(),outputNames.get(0),null,false);
  groupByExprs.add(groupByExpr);
  GroupByDesc groupBy=new GroupByDesc(GroupByDesc.Mode.HASH,outputNames,groupByExprs,new ArrayList<AggregationDesc>(),false,groupByMemoryUsage,memoryThreshold,null,false,0,true);
  GroupByOperator groupByOp=(GroupByOperator)OperatorFactory.getAndMakeChild(groupBy,selectOp);
  Map<String,ExprNodeDesc> colMap=new HashMap<String,ExprNodeDesc>();
  colMap.put(outputNames.get(0),groupByExpr);
  groupByOp.setColumnExprMap(colMap);
  DynamicPruningEventDesc eventDesc=new DynamicPruningEventDesc();
  eventDesc.setTableScan(ts);
  eventDesc.setTable(PlanUtils.getReduceValueTableDesc(PlanUtils.getFieldSchemasFromColumnList(keyExprs,"key")));
  eventDesc.setTargetColumnName(column);
  eventDesc.setPartKey(partKey);
  OperatorFactory.getAndMakeChild(eventDesc,groupByOp);
}
