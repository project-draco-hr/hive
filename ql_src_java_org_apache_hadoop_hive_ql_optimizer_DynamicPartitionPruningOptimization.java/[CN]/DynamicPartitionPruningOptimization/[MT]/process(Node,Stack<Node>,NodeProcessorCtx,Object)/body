{
  ParseContext parseContext;
  if (procCtx instanceof OptimizeTezProcContext) {
    parseContext=((OptimizeTezProcContext)procCtx).parseContext;
  }
 else   if (procCtx instanceof OptimizeSparkProcContext) {
    parseContext=((OptimizeSparkProcContext)procCtx).getParseContext();
  }
 else {
    throw new IllegalArgumentException("expected parseContext to be either " + "OptimizeTezProcContext or OptimizeSparkProcContext, but found " + procCtx.getClass().getName());
  }
  FilterOperator filter=(FilterOperator)nd;
  FilterDesc desc=filter.getConf();
  TableScanOperator ts=null;
  if (!parseContext.getConf().getBoolVar(ConfVars.TEZ_DYNAMIC_PARTITION_PRUNING) && !parseContext.getConf().getBoolVar(ConfVars.SPARK_DYNAMIC_PARTITION_PRUNING)) {
    return null;
  }
  DynamicPartitionPrunerContext removerContext=new DynamicPartitionPrunerContext();
  if (filter.getParentOperators().size() == 1 && filter.getParentOperators().get(0) instanceof TableScanOperator) {
    ts=(TableScanOperator)filter.getParentOperators().get(0);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Parent: " + filter.getParentOperators().get(0));
    LOG.debug("Filter: " + desc.getPredicateString());
    LOG.debug("TableScan: " + ts);
  }
  removerContext.dynLists.clear();
  collectDynamicPruningConditions(desc.getPredicate(),removerContext);
  for (  DynamicListContext ctx : removerContext) {
    String column=ExprNodeDescUtils.extractColName(ctx.parent);
    if (ts != null && column != null) {
      Table table=ts.getConf().getTableMetadata();
      if (table != null && table.isPartitionKey(column)) {
        String columnType=table.getPartColByName(column).getType();
        String alias=ts.getConf().getAlias();
        PrunedPartitionList plist=parseContext.getPrunedPartitions(alias,ts);
        if (LOG.isDebugEnabled()) {
          LOG.debug("alias: " + alias);
          LOG.debug("pruned partition list: ");
          if (plist != null) {
            for (            Partition p : plist.getPartitions()) {
              LOG.debug(p.getCompleteName());
            }
          }
        }
        if (plist == null || plist.getPartitions().size() != 0) {
          LOG.info("Dynamic partitioning: " + table.getCompleteName() + "."+ column);
          generateEventOperatorPlan(ctx,parseContext,ts,column,columnType);
        }
 else {
          LOG.debug("No partition pruning necessary.");
        }
      }
 else {
        LOG.debug("Column " + column + " is not a partition column");
      }
    }
    ExprNodeDesc constNode=new ExprNodeConstantDesc(ctx.parent.getTypeInfo(),true);
    if (ctx.grandParent == null) {
      desc.setPredicate(constNode);
    }
 else {
      int i=ctx.grandParent.getChildren().indexOf(ctx.parent);
      ctx.grandParent.getChildren().remove(i);
      ctx.grandParent.getChildren().add(i,constNode);
    }
  }
  cleanTableScanFilters(ts);
  return false;
}
