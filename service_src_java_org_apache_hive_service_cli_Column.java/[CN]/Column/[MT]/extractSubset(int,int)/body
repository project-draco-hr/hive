{
  BitSet subNulls=nulls.get(start,end);
  if (type == Type.BOOLEAN_TYPE) {
    Column subset=new Column(type,subNulls,Arrays.copyOfRange(boolVars,start,end));
    boolVars=Arrays.copyOfRange(boolVars,end,size);
    nulls=nulls.get(start,size);
    size=boolVars.length;
    return subset;
  }
  if (type == Type.TINYINT_TYPE) {
    Column subset=new Column(type,subNulls,Arrays.copyOfRange(byteVars,start,end));
    byteVars=Arrays.copyOfRange(byteVars,end,size);
    nulls=nulls.get(start,size);
    size=byteVars.length;
    return subset;
  }
  if (type == Type.SMALLINT_TYPE) {
    Column subset=new Column(type,subNulls,Arrays.copyOfRange(shortVars,start,end));
    shortVars=Arrays.copyOfRange(shortVars,end,size);
    nulls=nulls.get(start,size);
    size=shortVars.length;
    return subset;
  }
  if (type == Type.INT_TYPE) {
    Column subset=new Column(type,subNulls,Arrays.copyOfRange(intVars,start,end));
    intVars=Arrays.copyOfRange(intVars,end,size);
    nulls=nulls.get(start,size);
    size=intVars.length;
    return subset;
  }
  if (type == Type.BIGINT_TYPE) {
    Column subset=new Column(type,subNulls,Arrays.copyOfRange(longVars,start,end));
    longVars=Arrays.copyOfRange(longVars,end,size);
    nulls=nulls.get(start,size);
    size=longVars.length;
    return subset;
  }
  if (type == Type.DOUBLE_TYPE) {
    Column subset=new Column(type,subNulls,Arrays.copyOfRange(doubleVars,start,end));
    doubleVars=Arrays.copyOfRange(doubleVars,end,size);
    nulls=nulls.get(start,size);
    size=doubleVars.length;
    return subset;
  }
  if (type == Type.BINARY_TYPE) {
    Column subset=new Column(type,subNulls,binaryVars.subList(start,end));
    binaryVars=binaryVars.subList(end,binaryVars.size());
    nulls=nulls.get(start,size);
    size=binaryVars.size();
    return subset;
  }
  if (type == Type.STRING_TYPE) {
    Column subset=new Column(type,subNulls,stringVars.subList(start,end));
    stringVars=stringVars.subList(end,stringVars.size());
    nulls=nulls.get(start,size);
    size=stringVars.size();
    return subset;
  }
  throw new IllegalStateException("invalid union object");
}
