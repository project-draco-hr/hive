{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case TASKTRACKERS:
      if (field.type == TType.I32) {
        this.taskTrackers=iprot.readI32();
        this.__isset.taskTrackers=true;
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case MAPTASKS:
  if (field.type == TType.I32) {
    this.mapTasks=iprot.readI32();
    this.__isset.mapTasks=true;
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case REDUCETASKS:
if (field.type == TType.I32) {
this.reduceTasks=iprot.readI32();
this.__isset.reduceTasks=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case MAXMAPTASKS:
if (field.type == TType.I32) {
this.maxMapTasks=iprot.readI32();
this.__isset.maxMapTasks=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case MAXREDUCETASKS:
if (field.type == TType.I32) {
this.maxReduceTasks=iprot.readI32();
this.__isset.maxReduceTasks=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case STATE:
if (field.type == TType.I32) {
this.state=iprot.readI32();
this.__isset.state=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
