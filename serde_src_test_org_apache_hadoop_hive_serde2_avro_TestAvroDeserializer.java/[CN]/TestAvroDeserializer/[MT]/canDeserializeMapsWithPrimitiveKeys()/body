{
  Schema s=AvroSerdeUtils.getSchemaFor(TestAvroObjectInspectorGenerator.MAP_WITH_PRIMITIVE_VALUE_TYPE);
  GenericData.Record record=new GenericData.Record(s);
  Map<String,Long> m=new Hashtable<String,Long>();
  m.put("one",1l);
  m.put("two",2l);
  m.put("three",3l);
  record.put("aMap",m);
  assertTrue(GENERIC_DATA.validate(s,record));
  System.out.println("record = " + record);
  AvroGenericRecordWritable garw=Utils.serializeAndDeserializeRecord(record);
  AvroObjectInspectorGenerator aoig=new AvroObjectInspectorGenerator(s);
  AvroDeserializer de=new AvroDeserializer();
  ArrayList<Object> row=(ArrayList<Object>)de.deserialize(aoig.getColumnNames(),aoig.getColumnTypes(),garw,s);
  assertEquals(1,row.size());
  Object theMapObject=row.get(0);
  assertTrue(theMapObject instanceof Map);
  Map theMap=(Map)theMapObject;
  assertEquals(1l,theMap.get("one"));
  assertEquals(2l,theMap.get("two"));
  assertEquals(3l,theMap.get("three"));
  StandardStructObjectInspector oi=(StandardStructObjectInspector)aoig.getObjectInspector();
  List<Object> z=oi.getStructFieldsDataAsList(row);
  assertEquals(1,z.size());
  StructField fieldRef=oi.getStructFieldRef("amap");
  Map theMap2=(Map)oi.getStructFieldData(row,fieldRef);
  assertEquals(1l,theMap2.get("one"));
  assertEquals(2l,theMap2.get("two"));
  assertEquals(3l,theMap2.get("three"));
}
