{
  Schema s=Schema.parse(TestAvroObjectInspectorGenerator.RECORD_SCHEMA);
  GenericData.Record record=new GenericData.Record(s);
  GenericData.Record innerRecord=new GenericData.Record(s.getField("aRecord").schema());
  innerRecord.put("int1",42);
  innerRecord.put("boolean1",true);
  innerRecord.put("long1",42432234234l);
  record.put("aRecord",innerRecord);
  assertTrue(GENERIC_DATA.validate(s,record));
  AvroGenericRecordWritable garw=Utils.serializeAndDeserializeRecord(record);
  UID recordReaderID=new UID();
  garw.setRecordReaderID(recordReaderID);
  AvroObjectInspectorGenerator aoig=new AvroObjectInspectorGenerator(s);
  AvroDeserializer de=new AvroDeserializer();
  ArrayList<Object> row=(ArrayList<Object>)de.deserialize(aoig.getColumnNames(),aoig.getColumnTypes(),garw,s);
  assertEquals(1,de.getNoEncodingNeeded().size());
  assertEquals(0,de.getReEncoderCache().size());
  row=(ArrayList<Object>)de.deserialize(aoig.getColumnNames(),aoig.getColumnTypes(),garw,s);
  assertEquals(1,de.getNoEncodingNeeded().size());
  assertEquals(0,de.getReEncoderCache().size());
  garw.setRecordReaderID(new UID());
  row=(ArrayList<Object>)de.deserialize(aoig.getColumnNames(),aoig.getColumnTypes(),garw,s);
  assertEquals(2,de.getNoEncodingNeeded().size());
  assertEquals(0,de.getReEncoderCache().size());
  Schema evolvedSchema=Schema.parse(s.toString());
  evolvedSchema.getField("aRecord").schema().addProp("Testing","meaningless");
  garw.setRecordReaderID(recordReaderID=new UID());
  row=(ArrayList<Object>)de.deserialize(aoig.getColumnNames(),aoig.getColumnTypes(),garw,evolvedSchema);
  assertEquals(2,de.getNoEncodingNeeded().size());
  assertEquals(1,de.getReEncoderCache().size());
  garw.setRecordReaderID(recordReaderID);
  row=(ArrayList<Object>)de.deserialize(aoig.getColumnNames(),aoig.getColumnTypes(),garw,evolvedSchema);
  assertEquals(2,de.getNoEncodingNeeded().size());
  assertEquals(1,de.getReEncoderCache().size());
}
