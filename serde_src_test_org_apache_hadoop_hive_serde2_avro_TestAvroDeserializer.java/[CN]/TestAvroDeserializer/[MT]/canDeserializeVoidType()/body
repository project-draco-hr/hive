{
  String schemaString="{\n" + "  \"type\": \"record\", \n" + "  \"name\": \"nullTest\",\n"+ "  \"fields\" : [\n"+ "    {\"name\": \"isANull\", \"type\": \"null\"}\n"+ "  ]\n"+ "}";
  Schema s=AvroSerdeUtils.getSchemaFor(schemaString);
  GenericData.Record record=new GenericData.Record(s);
  record.put("isANull",null);
  assertTrue(GENERIC_DATA.validate(s,record));
  AvroGenericRecordWritable garw=Utils.serializeAndDeserializeRecord(record);
  AvroObjectInspectorGenerator aoig=new AvroObjectInspectorGenerator(s);
  AvroDeserializer de=new AvroDeserializer();
  ArrayList<Object> row=(ArrayList<Object>)de.deserialize(aoig.getColumnNames(),aoig.getColumnTypes(),garw,s);
  assertEquals(1,row.size());
  Object theVoidObject=row.get(0);
  assertNull(theVoidObject);
  StandardStructObjectInspector oi=(StandardStructObjectInspector)aoig.getObjectInspector();
  StructField fieldRef=oi.getStructFieldRef("isANull");
  Object shouldBeNull=oi.getStructFieldData(row,fieldRef);
  assertNull(shouldBeNull);
  assertTrue(fieldRef.getFieldObjectInspector() instanceof VoidObjectInspector);
}
