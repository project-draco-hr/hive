{
  Schema s=Schema.parse(TestAvroObjectInspectorGenerator.BYTES_SCHEMA);
  GenericData.Record record=new GenericData.Record(s);
  byte[] bytes="ANANCIENTBLUEBOX".getBytes();
  ByteBuffer bb=ByteBuffer.wrap(bytes);
  bb.rewind();
  record.put("bytesField",bb);
  assertTrue(GENERIC_DATA.validate(s,record));
  AvroGenericRecordWritable garw=Utils.serializeAndDeserializeRecord(record);
  AvroObjectInspectorGenerator aoig=new AvroObjectInspectorGenerator(s);
  AvroDeserializer de=new AvroDeserializer();
  ArrayList<Object> row=(ArrayList<Object>)de.deserialize(aoig.getColumnNames(),aoig.getColumnTypes(),garw,s);
  assertEquals(1,row.size());
  Object theArrayObject=row.get(0);
  assertTrue(theArrayObject instanceof List);
  StandardStructObjectInspector oi=(StandardStructObjectInspector)aoig.getObjectInspector();
  List<Object> fieldsDataAsList=oi.getStructFieldsDataAsList(row);
  assertEquals(1,fieldsDataAsList.size());
  StructField fieldRef=oi.getStructFieldRef("bytesField");
  List theList2=(List)oi.getStructFieldData(row,fieldRef);
  for (int i=0; i < bytes.length; i++) {
    assertEquals(bytes[i],theList2.get(i));
  }
}
