{
  Schema s=AvroSerdeUtils.getSchemaFor(TestAvroObjectInspectorGenerator.ARRAY_WITH_PRIMITIVE_ELEMENT_TYPE);
  GenericData.Record record=new GenericData.Record(s);
  List<String> list=new ArrayList<String>();
  list.add("Eccleston");
  list.add("Tennant");
  list.add("Smith");
  record.put("anArray",list);
  assertTrue(GENERIC_DATA.validate(s,record));
  System.out.println("Array-backed record = " + record);
  AvroGenericRecordWritable garw=Utils.serializeAndDeserializeRecord(record);
  AvroObjectInspectorGenerator aoig=new AvroObjectInspectorGenerator(s);
  AvroDeserializer de=new AvroDeserializer();
  ArrayList<Object> row=(ArrayList<Object>)de.deserialize(aoig.getColumnNames(),aoig.getColumnTypes(),garw,s);
  assertEquals(1,row.size());
  Object theArrayObject=row.get(0);
  assertTrue(theArrayObject instanceof List);
  List theList=(List)theArrayObject;
  assertEquals("Eccleston",theList.get(0));
  assertEquals("Tennant",theList.get(1));
  assertEquals("Smith",theList.get(2));
  StandardStructObjectInspector oi=(StandardStructObjectInspector)aoig.getObjectInspector();
  StructField fieldRefToArray=oi.getStructFieldRef("anArray");
  Object anArrayData=oi.getStructFieldData(row,fieldRefToArray);
  StandardListObjectInspector anArrayOI=(StandardListObjectInspector)fieldRefToArray.getFieldObjectInspector();
  assertEquals(3,anArrayOI.getListLength(anArrayData));
  JavaStringObjectInspector elementOI=(JavaStringObjectInspector)anArrayOI.getListElementObjectInspector();
  Object firstElement=anArrayOI.getListElement(anArrayData,0);
  assertEquals("Eccleston",elementOI.getPrimitiveJavaObject(firstElement));
  assertTrue(firstElement instanceof String);
  Object secondElement=anArrayOI.getListElement(anArrayData,1);
  assertEquals("Tennant",elementOI.getPrimitiveJavaObject(secondElement));
  assertTrue(secondElement instanceof String);
  Object thirdElement=anArrayOI.getListElement(anArrayData,2);
  assertEquals("Smith",elementOI.getPrimitiveJavaObject(thirdElement));
  assertTrue(thirdElement instanceof String);
}
