{
  checkConnection("getQueryLog");
  if (isCancelled) {
    throw new ClosedOrCancelledStatementException("Method getQueryLog() failed. The " + "statement has been closed or cancelled.");
  }
  List<String> logs=new ArrayList<String>();
  TFetchResultsResp tFetchResultsResp=null;
  try {
    if (stmtHandle != null) {
      TFetchResultsReq tFetchResultsReq=new TFetchResultsReq(stmtHandle,getFetchOrientation(incremental),fetchSize);
      tFetchResultsReq.setFetchType((short)1);
      tFetchResultsResp=client.FetchResults(tFetchResultsReq);
      Utils.verifySuccessWithInfo(tFetchResultsResp.getStatus());
    }
 else {
      if (isQueryClosed) {
        throw new ClosedOrCancelledStatementException("Method getQueryLog() failed. The " + "statement has been closed or cancelled.");
      }
      if (isExecuteStatementFailed) {
        throw new SQLException("Method getQueryLog() failed. Because the stmtHandle in " + "HiveStatement is null and the statement execution might fail.");
      }
 else {
        return logs;
      }
    }
  }
 catch (  SQLException e) {
    throw e;
  }
catch (  TException e) {
    throw new SQLException("Error when getting query log: " + e,e);
  }
catch (  Exception e) {
    throw new SQLException("Error when getting query log: " + e,e);
  }
  try {
    RowSet rowSet;
    rowSet=RowSetFactory.create(tFetchResultsResp.getResults(),connection.getProtocol());
    for (    Object[] row : rowSet) {
      logs.add(String.valueOf(row[0]));
    }
  }
 catch (  TException e) {
    throw new SQLException("Error building result set for query log: " + e,e);
  }
  return logs;
}
