{
  Properties properties=new Properties();
  properties.setProperty(HCatConstants.HCAT_DATA_CONVERT_BOOLEAN_TO_INTEGER,"false");
  PigServer server=new PigServer(ExecType.LOCAL,properties);
  server.registerQuery("X = load '" + ALL_PRIMITIVE_TYPES_TABLE + "' using "+ HCatLoader.class.getName()+ "();");
  Iterator<Tuple> XIter=server.openIterator("X");
  int numTuplesRead=0;
  while (XIter.hasNext()) {
    Tuple t=XIter.next();
    assertEquals(HCatFieldSchema.Type.numPrimitiveTypes(),t.size());
    int colPos=0;
    for (    Object referenceData : primitiveRows[numTuplesRead]) {
      if (referenceData == null) {
        assertTrue("rowNum=" + numTuplesRead + " colNum="+ colPos+ " Reference data is null; actual "+ t.get(colPos),t.get(colPos) == null);
      }
 else       if (referenceData instanceof java.util.Date) {
        assertTrue("rowNum=" + numTuplesRead + " colNum="+ colPos+ " Reference data="+ ((java.util.Date)referenceData).getTime()+ " actual="+ ((DateTime)t.get(colPos)).getMillis()+ "; types=("+ referenceData.getClass()+ ","+ t.get(colPos).getClass()+ ")",((java.util.Date)referenceData).getTime() == ((DateTime)t.get(colPos)).getMillis());
      }
 else {
        assertTrue("rowNum=" + numTuplesRead + " colNum="+ colPos+ " Reference data="+ referenceData+ " actual="+ t.get(colPos)+ "; types=("+ referenceData.getClass()+ ","+ t.get(colPos).getClass()+ ") ",referenceData.toString().equals(t.get(colPos).toString()));
      }
      colPos++;
    }
    numTuplesRead++;
  }
  assertTrue("Expected " + primitiveRows.length + "; found "+ numTuplesRead,numTuplesRead == primitiveRows.length);
}
