{
  assumeTrue(!TestUtil.shouldSkip(storageFormat,DISABLED_STORAGE_FORMATS));
  PigServer server=new PigServer(ExecType.LOCAL);
  server.registerQuery("Y1 = load '" + BASIC_TABLE + "' using org.apache.hive.hcatalog.pig.HCatLoader();");
  server.registerQuery("Y2 = foreach Y1 generate a;");
  server.registerQuery("Y3 = foreach Y1 generate b,a;");
  Schema dumpedY2Schema=server.dumpSchema("Y2");
  Schema dumpedY3Schema=server.dumpSchema("Y3");
  List<FieldSchema> Y2fields=dumpedY2Schema.getFields();
  List<FieldSchema> Y3fields=dumpedY3Schema.getFields();
  assertEquals(1,Y2fields.size());
  assertEquals("a",Y2fields.get(0).alias.toLowerCase());
  assertEquals(DataType.INTEGER,Y2fields.get(0).type);
  assertEquals(2,Y3fields.size());
  assertEquals("b",Y3fields.get(0).alias.toLowerCase());
  assertEquals(DataType.CHARARRAY,Y3fields.get(0).type);
  assertEquals("a",Y3fields.get(1).alias.toLowerCase());
  assertEquals(DataType.INTEGER,Y3fields.get(1).type);
  int numTuplesRead=0;
  Iterator<Tuple> Y2Iter=server.openIterator("Y2");
  while (Y2Iter.hasNext()) {
    Tuple t=Y2Iter.next();
    assertEquals(t.size(),1);
    assertNotNull(t.get(0));
    assertTrue(t.get(0).getClass() == Integer.class);
    assertEquals(t.get(0),basicInputData.get(numTuplesRead).first);
    numTuplesRead++;
  }
  numTuplesRead=0;
  Iterator<Tuple> Y3Iter=server.openIterator("Y3");
  while (Y3Iter.hasNext()) {
    Tuple t=Y3Iter.next();
    assertEquals(t.size(),2);
    assertNotNull(t.get(0));
    assertTrue(t.get(0).getClass() == String.class);
    assertEquals(t.get(0),basicInputData.get(numTuplesRead).second);
    assertNotNull(t.get(1));
    assertTrue(t.get(1).getClass() == Integer.class);
    assertEquals(t.get(1),basicInputData.get(numTuplesRead).first);
    numTuplesRead++;
  }
  assertEquals(basicInputData.size(),numTuplesRead);
}
