{
  if (o1 == null || o2 == null) {
    return false;
  }
  if (oi1.getPrimitiveCategory() != oi2.getPrimitiveCategory()) {
    return false;
  }
switch (oi1.getPrimitiveCategory()) {
case BOOLEAN:
{
      return ((BooleanObjectInspector)oi1).get(o1) == ((BooleanObjectInspector)oi2).get(o2);
    }
case BYTE:
{
    return ((ByteObjectInspector)oi1).get(o1) == ((ByteObjectInspector)oi2).get(o2);
  }
case SHORT:
{
  return ((ShortObjectInspector)oi1).get(o1) == ((ShortObjectInspector)oi2).get(o2);
}
case INT:
{
return ((IntObjectInspector)oi1).get(o1) == ((IntObjectInspector)oi2).get(o2);
}
case LONG:
{
return ((LongObjectInspector)oi1).get(o1) == ((LongObjectInspector)oi2).get(o2);
}
case FLOAT:
{
return ((FloatObjectInspector)oi1).get(o1) == ((FloatObjectInspector)oi2).get(o2);
}
case DOUBLE:
{
return ((DoubleObjectInspector)oi1).get(o1) == ((DoubleObjectInspector)oi2).get(o2);
}
case STRING:
{
Writable t1=((StringObjectInspector)oi1).getPrimitiveWritableObject(o1);
Writable t2=((StringObjectInspector)oi2).getPrimitiveWritableObject(o2);
return t1.equals(t2);
}
case CHAR:
{
return ((HiveCharObjectInspector)oi1).getPrimitiveWritableObject(o1).equals(((HiveCharObjectInspector)oi2).getPrimitiveWritableObject(o2));
}
case VARCHAR:
{
return ((HiveVarcharObjectInspector)oi1).getPrimitiveWritableObject(o1).equals(((HiveVarcharObjectInspector)oi2).getPrimitiveWritableObject(o2));
}
case DATE:
{
return ((DateObjectInspector)oi1).getPrimitiveWritableObject(o1).equals(((DateObjectInspector)oi2).getPrimitiveWritableObject(o2));
}
case TIMESTAMP:
{
return ((TimestampObjectInspector)oi1).getPrimitiveWritableObject(o1).equals(((TimestampObjectInspector)oi2).getPrimitiveWritableObject(o2));
}
case INTERVAL_YEAR_MONTH:
{
return ((HiveIntervalYearMonthObjectInspector)oi1).getPrimitiveWritableObject(o1).equals(((HiveIntervalYearMonthObjectInspector)oi2).getPrimitiveWritableObject(o2));
}
case INTERVAL_DAY_TIME:
{
return ((HiveIntervalDayTimeObjectInspector)oi1).getPrimitiveWritableObject(o1).equals(((HiveIntervalDayTimeObjectInspector)oi2).getPrimitiveWritableObject(o2));
}
case BINARY:
{
return ((BinaryObjectInspector)oi1).getPrimitiveWritableObject(o1).equals(((BinaryObjectInspector)oi2).getPrimitiveWritableObject(o2));
}
case DECIMAL:
{
return ((HiveDecimalObjectInspector)oi1).getPrimitiveJavaObject(o1).compareTo(((HiveDecimalObjectInspector)oi2).getPrimitiveJavaObject(o2)) == 0;
}
default :
return false;
}
}
