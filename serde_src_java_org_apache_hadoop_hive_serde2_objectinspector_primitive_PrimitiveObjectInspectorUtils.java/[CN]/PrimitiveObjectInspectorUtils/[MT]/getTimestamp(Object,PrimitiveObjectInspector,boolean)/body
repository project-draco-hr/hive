{
  if (o == null) {
    return null;
  }
  Timestamp result=null;
  long longValue=0;
switch (inputOI.getPrimitiveCategory()) {
case VOID:
    result=null;
  break;
case BOOLEAN:
longValue=((BooleanObjectInspector)inputOI).get(o) ? 1 : 0;
result=TimestampWritable.longToTimestamp(longValue,intToTimestampInSeconds);
break;
case BYTE:
longValue=((ByteObjectInspector)inputOI).get(o);
result=TimestampWritable.longToTimestamp(longValue,intToTimestampInSeconds);
break;
case SHORT:
longValue=((ShortObjectInspector)inputOI).get(o);
result=TimestampWritable.longToTimestamp(longValue,intToTimestampInSeconds);
break;
case INT:
longValue=((IntObjectInspector)inputOI).get(o);
result=TimestampWritable.longToTimestamp(longValue,intToTimestampInSeconds);
break;
case LONG:
longValue=((LongObjectInspector)inputOI).get(o);
result=TimestampWritable.longToTimestamp(longValue,intToTimestampInSeconds);
break;
case FLOAT:
result=TimestampUtils.doubleToTimestamp(((FloatObjectInspector)inputOI).get(o));
break;
case DOUBLE:
result=TimestampUtils.doubleToTimestamp(((DoubleObjectInspector)inputOI).get(o));
break;
case DECIMAL:
result=TimestampUtils.decimalToTimestamp(((HiveDecimalObjectInspector)inputOI).getPrimitiveJavaObject(o));
break;
case STRING:
StringObjectInspector soi=(StringObjectInspector)inputOI;
String s=soi.getPrimitiveJavaObject(o);
result=getTimestampFromString(s);
break;
case CHAR:
case VARCHAR:
result=getTimestampFromString(getString(o,inputOI));
break;
case DATE:
result=new Timestamp(((DateObjectInspector)inputOI).getPrimitiveWritableObject(o).get().getTime());
break;
case TIMESTAMP:
result=((TimestampObjectInspector)inputOI).getPrimitiveWritableObject(o).getTimestamp();
break;
default :
throw new RuntimeException("Hive 2 Internal error: unknown type: " + inputOI.getTypeName());
}
return result;
}
