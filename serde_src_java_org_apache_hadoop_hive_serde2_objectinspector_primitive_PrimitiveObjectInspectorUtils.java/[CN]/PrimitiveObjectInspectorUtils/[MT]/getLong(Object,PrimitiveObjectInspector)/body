{
  long result=0;
switch (oi.getPrimitiveCategory()) {
case VOID:
    result=0;
  break;
case BOOLEAN:
result=(((BooleanObjectInspector)oi).get(o) ? 1 : 0);
break;
case BYTE:
result=((ByteObjectInspector)oi).get(o);
break;
case SHORT:
result=((ShortObjectInspector)oi).get(o);
break;
case INT:
result=((IntObjectInspector)oi).get(o);
break;
case LONG:
result=((LongObjectInspector)oi).get(o);
break;
case FLOAT:
result=(long)((FloatObjectInspector)oi).get(o);
break;
case DOUBLE:
result=(long)((DoubleObjectInspector)oi).get(o);
break;
case STRING:
StringObjectInspector soi=(StringObjectInspector)oi;
if (soi.preferWritable()) {
Text t=soi.getPrimitiveWritableObject(o);
result=LazyLong.parseLong(t.getBytes(),0,t.getLength());
}
 else {
String s=soi.getPrimitiveJavaObject(o);
result=Long.parseLong(s);
}
break;
case TIMESTAMP:
result=((TimestampObjectInspector)oi).getPrimitiveWritableObject(o).getSeconds();
break;
case DECIMAL:
result=((BigDecimalObjectInspector)oi).getPrimitiveJavaObject(o).longValue();
break;
default :
throw new RuntimeException("Hive 2 Internal error: unknown type: " + oi.getTypeName());
}
return result;
}
