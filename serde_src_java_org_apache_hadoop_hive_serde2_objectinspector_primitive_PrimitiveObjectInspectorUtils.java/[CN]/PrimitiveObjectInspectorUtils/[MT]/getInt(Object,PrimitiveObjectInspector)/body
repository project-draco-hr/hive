{
  int result=0;
switch (oi.getPrimitiveCategory()) {
case VOID:
{
      result=0;
      break;
    }
case BOOLEAN:
{
    result=(((BooleanObjectInspector)oi).get(o) ? 1 : 0);
    break;
  }
case BYTE:
{
  result=((ByteObjectInspector)oi).get(o);
  break;
}
case SHORT:
{
result=((ShortObjectInspector)oi).get(o);
break;
}
case INT:
{
result=((IntObjectInspector)oi).get(o);
break;
}
case LONG:
{
result=(int)((LongObjectInspector)oi).get(o);
break;
}
case FLOAT:
{
result=(int)((FloatObjectInspector)oi).get(o);
break;
}
case DOUBLE:
{
result=(int)((DoubleObjectInspector)oi).get(o);
break;
}
case STRING:
{
StringObjectInspector soi=(StringObjectInspector)oi;
if (soi.preferWritable()) {
Text t=soi.getPrimitiveWritableObject(o);
result=LazyInteger.parseInt(t.getBytes(),0,t.getLength());
}
 else {
String s=soi.getPrimitiveJavaObject(o);
result=Integer.parseInt(s);
}
break;
}
case CHAR:
case VARCHAR:
{
result=Integer.parseInt(getString(o,oi));
break;
}
case TIMESTAMP:
result=(int)(((TimestampObjectInspector)oi).getPrimitiveWritableObject(o).getSeconds());
break;
case DECIMAL:
result=((HiveDecimalObjectInspector)oi).getPrimitiveJavaObject(o).intValue();
break;
case DATE:
default :
{
throw new RuntimeException("Hive 2 Internal error: unsupported conversion from type: " + oi.getTypeName());
}
}
return result;
}
