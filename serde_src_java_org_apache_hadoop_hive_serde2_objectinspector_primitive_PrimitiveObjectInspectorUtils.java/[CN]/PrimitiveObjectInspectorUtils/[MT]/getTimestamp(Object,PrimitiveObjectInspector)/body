{
  if (o == null) {
    return null;
  }
  Timestamp result=null;
switch (oi.getPrimitiveCategory()) {
case VOID:
    result=null;
  break;
case BOOLEAN:
result=new Timestamp(((BooleanObjectInspector)oi).get(o) ? 1 : 0);
break;
case BYTE:
result=new Timestamp(((ByteObjectInspector)oi).get(o));
break;
case SHORT:
result=new Timestamp(((ShortObjectInspector)oi).get(o));
break;
case INT:
result=new Timestamp(((IntObjectInspector)oi).get(o));
break;
case LONG:
result=new Timestamp(((LongObjectInspector)oi).get(o));
break;
case FLOAT:
result=TimestampWritable.floatToTimestamp(((FloatObjectInspector)oi).get(o));
break;
case DOUBLE:
result=TimestampWritable.doubleToTimestamp(((DoubleObjectInspector)oi).get(o));
break;
case STRING:
StringObjectInspector soi=(StringObjectInspector)oi;
String s=soi.getPrimitiveJavaObject(o).trim();
int periodIdx=s.indexOf(".");
if (periodIdx != -1) {
if (s.length() - periodIdx > 9) {
s=s.substring(0,periodIdx + 10);
}
}
try {
result=Timestamp.valueOf(s);
}
 catch (IllegalArgumentException e) {
result=null;
}
break;
case TIMESTAMP:
result=((TimestampObjectInspector)oi).getPrimitiveWritableObject(o).getTimestamp();
break;
default :
throw new RuntimeException("Hive 2 Internal error: unknown type: " + oi.getTypeName());
}
return result;
}
