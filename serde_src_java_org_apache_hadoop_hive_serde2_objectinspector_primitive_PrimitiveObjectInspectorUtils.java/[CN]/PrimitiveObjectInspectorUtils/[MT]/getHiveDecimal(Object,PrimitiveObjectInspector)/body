{
  if (o == null) {
    return null;
  }
  HiveDecimal result=null;
switch (oi.getPrimitiveCategory()) {
case VOID:
    result=null;
  break;
case BOOLEAN:
result=((BooleanObjectInspector)oi).get(o) ? HiveDecimal.ONE : HiveDecimal.ZERO;
break;
case BYTE:
result=HiveDecimal.create(((ByteObjectInspector)oi).get(o));
break;
case SHORT:
result=HiveDecimal.create(((ShortObjectInspector)oi).get(o));
break;
case INT:
result=HiveDecimal.create(((IntObjectInspector)oi).get(o));
break;
case LONG:
result=HiveDecimal.create(((LongObjectInspector)oi).get(o));
break;
case FLOAT:
Float f=((FloatObjectInspector)oi).get(o);
result=HiveDecimal.create(f.toString());
break;
case DOUBLE:
Double d=((DoubleObjectInspector)oi).get(o);
result=HiveDecimal.create(d.toString());
break;
case STRING:
result=HiveDecimal.create(((StringObjectInspector)oi).getPrimitiveJavaObject(o));
break;
case VARCHAR:
result=HiveDecimal.create(getString(o,oi));
break;
case TIMESTAMP:
Double ts=((TimestampObjectInspector)oi).getPrimitiveWritableObject(o).getDouble();
result=HiveDecimal.create(ts.toString());
break;
case DECIMAL:
result=((HiveDecimalObjectInspector)oi).getPrimitiveJavaObject(o);
break;
case DATE:
default :
throw new RuntimeException("Hive 2 Internal error: unsupported conversion from type: " + oi.getTypeName());
}
return result;
}
