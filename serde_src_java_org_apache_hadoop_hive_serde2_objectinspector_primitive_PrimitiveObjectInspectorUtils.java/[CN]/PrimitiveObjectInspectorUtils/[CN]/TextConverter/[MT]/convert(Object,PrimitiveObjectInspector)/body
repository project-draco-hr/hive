{
  if (o == null) {
    return null;
  }
switch (oi.getPrimitiveCategory()) {
case VOID:
{
      return null;
    }
case BOOLEAN:
{
    t.set(((BooleanObjectInspector)oi).get(o) ? trueBytes : falseBytes);
    return t;
  }
case BYTE:
{
  out.reset();
  LazyInteger.writeUTF8NoException(out,((ByteObjectInspector)oi).get(o));
  t.set(out.getData(),0,out.getCount());
  return t;
}
case SHORT:
{
out.reset();
LazyInteger.writeUTF8NoException(out,((ShortObjectInspector)oi).get(o));
t.set(out.getData(),0,out.getCount());
return t;
}
case INT:
{
out.reset();
LazyInteger.writeUTF8NoException(out,((IntObjectInspector)oi).get(o));
t.set(out.getData(),0,out.getCount());
return t;
}
case LONG:
{
out.reset();
LazyLong.writeUTF8NoException(out,((LongObjectInspector)oi).get(o));
t.set(out.getData(),0,out.getCount());
return t;
}
case FLOAT:
{
t.set(String.valueOf(((FloatObjectInspector)oi).get(o)));
return t;
}
case DOUBLE:
{
t.set(String.valueOf(((DoubleObjectInspector)oi).get(o)));
return t;
}
case STRING:
{
t.set(((StringObjectInspector)oi).getPrimitiveJavaObject(o));
return t;
}
default :
{
throw new RuntimeException("Hive 2 Internal error: type = " + oi.getTypeName());
}
}
}
