{
  String[] ALL=null;
  String[] VIEW_ONLY={viewTypeName};
  String[] TABLE_ONLY=tableTypeNames.toArray(new String[tableTypeNames.size()]);
  Set<String> viewOrTableArray=new HashSet<String>();
  viewOrTableArray.addAll(tableTypeNames);
  viewOrTableArray.add(viewTypeName);
  String[] VIEWORTABLE=viewOrTableArray.toArray(new String[viewOrTableArray.size()]);
  Map<Object[],String[]> tests=new IdentityHashMap<Object[],String[]>();
  tests.put(new Object[]{null,"test%jdbc%",ALL},new String[]{"default.testhivejdbcdriver_table","default.testhivejdbcdriverpartitionedtable","default.testhivejdbcdriverview","testdb.testhivejdbcdriver_table","testdb.testhivejdbcdriverpartitionedtable","testdb.testhivejdbcdriverview","default.testhivejdbcdriver_external"});
  tests.put(new Object[]{"test%","test%jdbc%",ALL},new String[]{"testdb.testhivejdbcdriver_table","testdb.testhivejdbcdriverpartitionedtable","testdb.testhivejdbcdriverview"});
  tests.put(new Object[]{"test%","test%jdbc%",VIEW_ONLY},new String[]{"testdb.testhivejdbcdriverview"});
  tests.put(new Object[]{null,"%jdbcdriver\\_table",VIEWORTABLE},new String[]{"default.testhivejdbcdriver_table","testdb.testhivejdbcdriver_table"});
  tests.put(new Object[]{"def%","%jdbcdriver\\_table",VIEWORTABLE},new String[]{"default.testhivejdbcdriver_table"});
  tests.put(new Object[]{"def%","%jdbcdriver\\_table",VIEW_ONLY},new String[0]);
  tests.put(new Object[]{null,"testhivejdbcdriver\\_table",ALL},new String[]{"default.testhivejdbcdriver_table","testdb.testhivejdbcdriver_table"});
  tests.put(new Object[]{"%faul%","testhivejdbcdriver\\_table",ALL},new String[]{"default.testhivejdbcdriver_table"});
  tests.put(new Object[]{"%faul%","testhivejdbcdriver\\_table",TABLE_ONLY},new String[]{"default.testhivejdbcdriver_table"});
  tests.put(new Object[]{null,"test_ivejdbcdri_er\\_table",ALL},new String[]{"default.testhivejdbcdriver_table","testdb.testhivejdbcdriver_table"});
  tests.put(new Object[]{"test__","test_ivejdbcdri_er\\_table",ALL},new String[]{"testdb.testhivejdbcdriver_table"});
  tests.put(new Object[]{null,"test_ivejdbcdri_er_table",ALL},new String[]{"default.testhivejdbcdriver_table","testdb.testhivejdbcdriver_table"});
  tests.put(new Object[]{null,"test_ivejdbcdri_er%table",ALL},new String[]{"default.testhivejdbcdriver_table","default.testhivejdbcdriverpartitionedtable","testdb.testhivejdbcdriver_table","testdb.testhivejdbcdriverpartitionedtable"});
  tests.put(new Object[]{null,"%jdbc%",ALL},new String[]{"default.testhivejdbcdriver_table","default.testhivejdbcdriverpartitionedtable","default.testhivejdbcdriverview","testdb.testhivejdbcdriver_table","testdb.testhivejdbcdriverpartitionedtable","testdb.testhivejdbcdriverview","default.testhivejdbcdriver_external"});
  tests.put(new Object[]{"%","%jdbc%",VIEW_ONLY},new String[]{"default.testhivejdbcdriverview","testdb.testhivejdbcdriverview"});
  tests.put(new Object[]{"%","%jdbc%",VIEW_ONLY},new String[]{"default.testhivejdbcdriverview","testdb.testhivejdbcdriverview"});
  tests.put(new Object[]{null,"",ALL},new String[]{});
  tests.put(new Object[]{null,"%jdbc%",TABLE_ONLY},new String[]{"default.testhivejdbcdriver_table","default.testhivejdbcdriverpartitionedtable","testdb.testhivejdbcdriver_table","testdb.testhivejdbcdriverpartitionedtable","default.testhivejdbcdriver_external"});
  for (  Map.Entry<Object[],String[]> entry : tests.entrySet()) {
    Object[] checkPattern=entry.getKey();
    String debugString=checkPattern[0] + ", " + checkPattern[1]+ ", "+ Arrays.toString((String[])checkPattern[2]);
    Set<String> expectedTables=new HashSet<String>(Arrays.asList(entry.getValue()));
    ResultSet rs=con.getMetaData().getTables(null,(String)checkPattern[0],(String)checkPattern[1],(String[])checkPattern[2]);
    ResultSetMetaData resMeta=rs.getMetaData();
    assertEquals(10,resMeta.getColumnCount());
    assertEquals("TABLE_CAT",resMeta.getColumnName(1));
    assertEquals("TABLE_SCHEM",resMeta.getColumnName(2));
    assertEquals("TABLE_NAME",resMeta.getColumnName(3));
    assertEquals("TABLE_TYPE",resMeta.getColumnName(4));
    assertEquals("REMARKS",resMeta.getColumnName(5));
    int cnt=0;
    while (rs.next()) {
      String resultDbName=rs.getString("TABLE_SCHEM");
      String resultTableName=rs.getString("TABLE_NAME");
      assertTrue("Invalid table " + resultDbName + "."+ resultTableName+ " for test "+ debugString,expectedTables.contains(resultDbName + "." + resultTableName));
      String resultTableComment=rs.getString("REMARKS");
      assertTrue("Missing comment on the table.",resultTableComment.length() > 0);
      String tableType=rs.getString("TABLE_TYPE");
      if (resultTableName.endsWith("view")) {
        assertEquals("Expected a tabletype view but got something else.",viewTypeName,tableType);
      }
 else {
        assertTrue("Expected one of " + tableTypeNames + " table but got something else: "+ tableType,tableTypeNames.contains(tableType));
      }
      cnt++;
    }
    rs.close();
    assertEquals("Received an incorrect number of tables for test " + debugString,expectedTables.size(),cnt);
  }
}
