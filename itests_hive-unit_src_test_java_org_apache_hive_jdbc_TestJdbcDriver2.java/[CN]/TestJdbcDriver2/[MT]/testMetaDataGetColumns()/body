{
  Map<String[],Integer> tests=new HashMap<String[],Integer>();
  tests.put(new String[]{"testhivejdbcdriver\\_table",null},2);
  tests.put(new String[]{"testhivejdbc%",null},8);
  tests.put(new String[]{"testhiveJDBC%",null},8);
  tests.put(new String[]{"%jdbcdriver\\_table",null},2);
  tests.put(new String[]{"%jdbcdriver\\_table%","under\\_col"},1);
  tests.put(new String[]{"%jdbcdriver\\_table%","under\\_co_"},1);
  tests.put(new String[]{"%jdbcdriver\\_table%","under_col"},1);
  tests.put(new String[]{"%jdbcdriver\\_table%","und%"},1);
  tests.put(new String[]{"%jdbcdriver\\_table%","%"},2);
  tests.put(new String[]{"%jdbcdriver\\_table%","_%"},2);
  for (  String[] checkPattern : tests.keySet()) {
    ResultSet rs=con.getMetaData().getColumns(null,"default",checkPattern[0],checkPattern[1]);
    ResultSetMetaData rsmd=rs.getMetaData();
    assertEquals("TABLE_CAT",rsmd.getColumnName(1));
    int cnt=0;
    while (rs.next()) {
      String columnname=rs.getString("COLUMN_NAME");
      int ordinalPos=rs.getInt("ORDINAL_POSITION");
switch (cnt) {
case 0:
        assertEquals("Wrong column name found","under_col",columnname);
      assertEquals("Wrong ordinal position found",ordinalPos,1);
    break;
case 1:
  assertEquals("Wrong column name found","value",columnname);
assertEquals("Wrong ordinal position found",ordinalPos,2);
break;
default :
break;
}
cnt++;
}
rs.close();
assertEquals("Found less columns then we test for.",tests.get(checkPattern).intValue(),cnt);
}
}
