{
  dropTestTables(stmt,prefix);
  String tableName=prefix + this.tableName;
  String partitionedTableName=prefix + this.partitionedTableName;
  String dataTypeTableName=prefix + this.dataTypeTableName;
  String viewName=prefix + this.viewName;
  stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string) comment '"+ tableComment+ "'");
  if (loadData) {
    stmt.execute("load data local inpath '" + dataFilePath.toString() + "' into table "+ tableName);
  }
  stmt.execute("create table " + partitionedTableName + " (under_col int, value string) comment '"+ partitionedTableComment+ "' partitioned by ("+ partitionedColumnName+ " STRING)");
  if (loadData) {
    stmt.execute("load data local inpath '" + dataFilePath.toString() + "' into table "+ partitionedTableName+ " PARTITION ("+ partitionedColumnName+ "="+ partitionedColumnValue+ ")");
  }
  stmt.execute("create table " + dataTypeTableName + " (c1 int, c2 boolean, c3 double, c4 string,"+ " c5 array<int>, c6 map<int,string>, c7 map<string,string>,"+ " c8 struct<r:string,s:int,t:double>,"+ " c9 tinyint, c10 smallint, c11 float, c12 bigint,"+ " c13 array<array<string>>,"+ " c14 map<int, map<int,int>>,"+ " c15 struct<r:int,s:struct<a:int,b:string>>,"+ " c16 array<struct<m:map<string,string>,n:int>>,"+ " c17 timestamp, "+ " c18 decimal(16,7), "+ " c19 binary, "+ " c20 date,"+ " c21 varchar(20),"+ " c22 char(15),"+ " c23 binary"+ ") comment'"+ dataTypeTableComment+ "' partitioned by (dt STRING)");
  if (loadData) {
    stmt.execute("load data local inpath '" + dataTypeDataFilePath.toString() + "' into table "+ dataTypeTableName+ " PARTITION (dt='20090619')");
  }
  stmt.execute("create view " + viewName + " comment '"+ viewComment+ "' as select * from "+ tableName);
}
