{
  boolean isPartitionTable=tableName.equals(partitionedTableName);
  Statement stmt=con.createStatement();
  if (maxRows >= 0) {
    stmt.setMaxRows(maxRows);
  }
  if (fetchSize > 0) {
    stmt.setFetchSize(fetchSize);
    assertEquals(fetchSize,stmt.getFetchSize());
  }
  int expectedMaxRows=maxRows < 1 ? 0 : maxRows;
  assertNotNull("Statement is null",stmt);
  assertEquals("Statement max rows not as expected",expectedMaxRows,stmt.getMaxRows());
  assertFalse("Statement should not be closed",stmt.isClosed());
  ResultSet res;
  res=stmt.executeQuery("select * from " + tableName);
  assertNotNull("ResultSet is null",res);
  assertTrue("getResultSet() not returning expected ResultSet",res == stmt.getResultSet());
  assertEquals("get update count not as expected",-1,stmt.getUpdateCount());
  int i=0;
  ResultSetMetaData meta=res.getMetaData();
  int expectedColCount=isPartitionTable ? 3 : 2;
  assertEquals("Unexpected column count",expectedColCount,meta.getColumnCount());
  String colQualifier=((tableName != null) && !tableName.isEmpty()) ? tableName.toLowerCase() + "." : "";
  boolean moreRow=res.next();
  while (moreRow) {
    try {
      i++;
      assertEquals(res.getInt(1),res.getInt(colQualifier + "under_col"));
      assertEquals(res.getString(1),res.getString(colQualifier + "under_col"));
      assertEquals(res.getString(2),res.getString(colQualifier + "value"));
      if (isPartitionTable) {
        assertEquals(res.getString(3),partitionedColumnValue);
        assertEquals(res.getString(3),res.getString(colQualifier + partitionedColumnName));
      }
      assertFalse("Last result value was not null",res.wasNull());
      assertNull("No warnings should be found on ResultSet",res.getWarnings());
      res.clearWarnings();
      assertEquals("getInt and getString don't align for the same result value",String.valueOf(res.getInt(1)),res.getString(1));
      assertEquals("Unexpected result found","val_" + res.getString(1),res.getString(2));
      moreRow=res.next();
    }
 catch (    SQLException e) {
      System.out.println(e.toString());
      e.printStackTrace();
      throw new Exception(e.toString());
    }
  }
  int expectedRowCount=maxRows > 0 ? maxRows : 500;
  assertEquals("Incorrect number of rows returned",expectedRowCount,i);
  assertEquals(false,moreRow);
  assertNull("No warnings should be found on statement",stmt.getWarnings());
  stmt.clearWarnings();
  assertNull("No warnings should be found on connection",con.getWarnings());
  con.clearWarnings();
  stmt.close();
  assertTrue("Statement should be closed",stmt.isClosed());
}
