{
  Statement stmt=con.createStatement();
  ResultSet res=stmt.executeQuery("select * from " + dataTypeTableName + " order by c1");
  ResultSetMetaData meta=res.getMetaData();
  assertTrue(res.next());
  for (int i=1; i < meta.getColumnCount(); i++) {
    assertNull(res.getObject(i));
  }
  assertEquals(0,res.getInt(1));
  assertEquals(false,res.getBoolean(2));
  assertEquals(0d,res.getDouble(3),floatCompareDelta);
  assertEquals(null,res.getString(4));
  assertEquals(null,res.getString(5));
  assertEquals(null,res.getString(6));
  assertEquals(null,res.getString(7));
  assertEquals(null,res.getString(8));
  assertEquals(0,res.getByte(9));
  assertEquals(0,res.getShort(10));
  assertEquals(0f,res.getFloat(11),floatCompareDelta);
  assertEquals(0L,res.getLong(12));
  assertEquals(null,res.getString(13));
  assertEquals(null,res.getString(14));
  assertEquals(null,res.getString(15));
  assertEquals(null,res.getString(16));
  assertEquals(null,res.getString(17));
  assertEquals(null,res.getString(18));
  assertEquals(null,res.getString(19));
  assertEquals(null,res.getString(20));
  assertEquals(null,res.getDate(20));
  assertEquals(null,res.getString(21));
  assertEquals(null,res.getString(22));
  assertTrue(res.next());
  assertEquals(-1,res.getInt(1));
  assertEquals(false,res.getBoolean(2));
  assertEquals(-1.1d,res.getDouble(3),floatCompareDelta);
  assertEquals("",res.getString(4));
  assertEquals("[]",res.getString(5));
  assertEquals("{}",res.getString(6));
  assertEquals("{}",res.getString(7));
  assertEquals("{\"r\":null,\"s\":null,\"t\":null}",res.getString(8));
  assertEquals(-1,res.getByte(9));
  assertEquals(-1,res.getShort(10));
  assertEquals(-1.0f,res.getFloat(11),floatCompareDelta);
  assertEquals(-1,res.getLong(12));
  assertEquals("[]",res.getString(13));
  assertEquals("{}",res.getString(14));
  assertEquals("{\"r\":null,\"s\":null}",res.getString(15));
  assertEquals("[]",res.getString(16));
  assertEquals(null,res.getString(17));
  assertEquals(null,res.getTimestamp(17));
  assertEquals(null,res.getBigDecimal(18));
  assertEquals(null,res.getString(19));
  assertEquals(null,res.getString(20));
  assertEquals(null,res.getDate(20));
  assertEquals(null,res.getString(21));
  assertEquals(null,res.getString(22));
  assertEquals(null,res.getString(23));
  assertTrue(res.next());
  assertEquals(1,res.getInt(1));
  assertEquals(true,res.getBoolean(2));
  assertEquals(1.1d,res.getDouble(3),floatCompareDelta);
  assertEquals("1",res.getString(4));
  assertEquals("[1,2]",res.getString(5));
  assertEquals("{1:\"x\",2:\"y\"}",res.getString(6));
  assertEquals("{\"k\":\"v\"}",res.getString(7));
  assertEquals("{\"r\":\"a\",\"s\":9,\"t\":2.2}",res.getString(8));
  assertEquals(1,res.getByte(9));
  assertEquals(1,res.getShort(10));
  assertEquals(1.0f,res.getFloat(11),floatCompareDelta);
  assertEquals(1,res.getLong(12));
  assertEquals("[[\"a\",\"b\"],[\"c\",\"d\"]]",res.getString(13));
  assertEquals("{1:{11:12,13:14},2:{21:22}}",res.getString(14));
  assertEquals("{\"r\":1,\"s\":{\"a\":2,\"b\":\"x\"}}",res.getString(15));
  assertEquals("[{\"m\":{},\"n\":1},{\"m\":{\"a\":\"b\",\"c\":\"d\"},\"n\":2}]",res.getString(16));
  assertEquals("2012-04-22 09:00:00.123456789",res.getString(17));
  assertEquals("2012-04-22 09:00:00.123456789",res.getTimestamp(17).toString());
  assertEquals("123456789.0123456",res.getBigDecimal(18).toString());
  assertEquals("abcd",res.getString(19));
  assertEquals("2013-01-01",res.getString(20));
  assertEquals("2013-01-01",res.getDate(20).toString());
  assertEquals("abc123",res.getString(21));
  assertEquals("abc123         ",res.getString(22));
  byte[] bytes="X'01FF'".getBytes("UTF-8");
  InputStream resultSetInputStream=res.getBinaryStream(23);
  int len=bytes.length;
  byte[] b=new byte[len];
  resultSetInputStream.read(b,0,len);
  for (int i=0; i < len; i++) {
    assertEquals(bytes[i],b[i]);
  }
  assertEquals(true,res.getBoolean(1));
  assertEquals(true,res.getBoolean(4));
  assertFalse(meta.isCaseSensitive(1));
  assertFalse(meta.isCaseSensitive(2));
  assertFalse(meta.isCaseSensitive(3));
  assertTrue(meta.isCaseSensitive(4));
  assertFalse(res.next());
}
