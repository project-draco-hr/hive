{
  when(mockRecordInspector.extractRecordIdentifier(RECORD)).thenReturn(ROW__ID_B0_R0,ROW__ID_B0_R1,ROW__ID_B1_R0,ROW__ID_INSERT);
  when(mockBucketIdResolver.computeBucketId(RECORD)).thenReturn(0,0,1,0);
  when(mockPartitionHelper.getPathForPartition(PARTITION_A)).thenReturn(PATH_A);
  when(mockPartitionHelper.getPathForPartition(PARTITION_B)).thenReturn(PATH_B);
  coordinator.update(PARTITION_A,RECORD);
  coordinator.insert(PARTITION_B,RECORD);
  coordinator.delete(PARTITION_B,RECORD);
  coordinator.update(PARTITION_B,RECORD);
  verify(mockPartitionHelper).createPartitionIfNotExists(PARTITION_B);
  verify(mockMutatorFactory).newMutator(any(OrcOutputFormat.class),eq(TRANSACTION_ID),eq(PATH_A),eq(BUCKET_ID));
  verify(mockMutatorFactory,times(2)).newMutator(any(OrcOutputFormat.class),eq(TRANSACTION_ID),eq(PATH_B),eq(BUCKET_ID));
  verify(mockMutatorFactory).newMutator(any(OrcOutputFormat.class),eq(TRANSACTION_ID),eq(PATH_B),eq(BUCKET_ID + 1));
  verify(mockMutator,times(2)).update(RECORD);
  verify(mockMutator).delete(RECORD);
  verify(mockMutator).insert(RECORD);
  verify(mockSequenceValidator,times(4)).reset();
}
