{
  int columnId=readerType.getId();
  TypeDescription fileType=evolution.getFileType(readerType);
switch (fileType.getCategory()) {
case BOOLEAN:
case BYTE:
case SHORT:
case INT:
case LONG:
    return createAnyIntegerConvertTreeReader(columnId,fileType,readerType,evolution,included,skipCorrupt);
case FLOAT:
  return createFloatConvertTreeReader(columnId,fileType,readerType,evolution,included,skipCorrupt);
case DOUBLE:
return createDoubleConvertTreeReader(columnId,fileType,readerType,evolution,included,skipCorrupt);
case DECIMAL:
return createDecimalConvertTreeReader(columnId,fileType,readerType,evolution,included,skipCorrupt);
case STRING:
return createStringConvertTreeReader(columnId,fileType,readerType,evolution,included,skipCorrupt);
case CHAR:
return createCharConvertTreeReader(columnId,fileType,readerType,evolution,included,skipCorrupt);
case VARCHAR:
return createVarcharConvertTreeReader(columnId,fileType,readerType,evolution,included,skipCorrupt);
case TIMESTAMP:
return createTimestampConvertTreeReader(columnId,fileType,readerType,evolution,included,skipCorrupt);
case DATE:
return createDateConvertTreeReader(columnId,fileType,readerType,evolution,included,skipCorrupt);
case BINARY:
return createBinaryConvertTreeReader(columnId,fileType,readerType,evolution,included,skipCorrupt);
case STRUCT:
case LIST:
case MAP:
case UNION:
default :
throw new IllegalArgumentException("Unsupported type " + fileType.getCategory());
}
}
