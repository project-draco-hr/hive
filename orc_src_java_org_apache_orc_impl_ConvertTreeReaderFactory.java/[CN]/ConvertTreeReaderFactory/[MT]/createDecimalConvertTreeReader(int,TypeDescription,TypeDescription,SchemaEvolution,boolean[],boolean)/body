{
switch (readerType.getCategory()) {
case BOOLEAN:
case BYTE:
case SHORT:
case INT:
case LONG:
    return new AnyIntegerFromDecimalTreeReader(columnId,fileType,readerType);
case FLOAT:
  return new FloatFromDecimalTreeReader(columnId,fileType,readerType);
case DOUBLE:
return new DoubleFromDecimalTreeReader(columnId,fileType,readerType);
case STRING:
case CHAR:
case VARCHAR:
return new StringGroupFromDecimalTreeReader(columnId,fileType,readerType,skipCorrupt);
case TIMESTAMP:
return new TimestampFromDecimalTreeReader(columnId,fileType,skipCorrupt);
case DECIMAL:
return new DecimalFromDecimalTreeReader(columnId,fileType,readerType);
case BINARY:
case DATE:
case STRUCT:
case LIST:
case MAP:
case UNION:
default :
throw new IllegalArgumentException("Unsupported type " + readerType.getCategory());
}
}
