{
switch (readerType.getCategory()) {
case BOOLEAN:
case BYTE:
case SHORT:
case INT:
case LONG:
    return new AnyIntegerFromTimestampTreeReader(columnId,readerType,skipCorrupt);
case FLOAT:
  return new FloatFromTimestampTreeReader(columnId,readerType,skipCorrupt);
case DOUBLE:
return new DoubleFromTimestampTreeReader(columnId,readerType,skipCorrupt);
case DECIMAL:
return new DecimalFromTimestampTreeReader(columnId,readerType,skipCorrupt);
case STRING:
case CHAR:
case VARCHAR:
return new StringGroupFromTimestampTreeReader(columnId,readerType,skipCorrupt);
case TIMESTAMP:
throw new IllegalArgumentException("No conversion of type " + readerType.getCategory() + " to self needed");
case DATE:
return new DateFromTimestampTreeReader(columnId,readerType,skipCorrupt);
case BINARY:
case STRUCT:
case LIST:
case MAP:
case UNION:
default :
throw new IllegalArgumentException("Unsupported type " + readerType.getCategory());
}
}
