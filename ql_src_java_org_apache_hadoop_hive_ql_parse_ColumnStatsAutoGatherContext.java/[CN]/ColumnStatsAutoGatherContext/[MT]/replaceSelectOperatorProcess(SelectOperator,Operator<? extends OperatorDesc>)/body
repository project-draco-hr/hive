{
  RowSchema selRS=operator.getSchema();
  ArrayList<ColumnInfo> signature=new ArrayList<>();
  OpParseContext inputCtx=sa.opParseCtx.get(input);
  RowResolver inputRR=inputCtx.getRowResolver();
  ArrayList<ColumnInfo> columns=inputRR.getColumnInfos();
  ArrayList<ExprNodeDesc> colList=new ArrayList<ExprNodeDesc>();
  ArrayList<String> columnNames=new ArrayList<String>();
  Map<String,ExprNodeDesc> columnExprMap=new HashMap<String,ExprNodeDesc>();
  for (int i=0; i < this.columns.size(); i++) {
    ColumnInfo col=columns.get(i);
    ExprNodeDesc exprNodeDesc=new ExprNodeColumnDesc(col);
    colList.add(exprNodeDesc);
    String internalName=selRS.getColumnNames().get(i);
    columnNames.add(internalName);
    columnExprMap.put(internalName,exprNodeDesc);
    signature.add(selRS.getSignature().get(i));
  }
  int dynamicPartBegin=-1;
  for (int i=0; i < partitionColumns.size(); i++) {
    ExprNodeDesc exprNodeDesc=null;
    String partColName=partitionColumns.get(i).getName();
    if (partSpec != null && partSpec.containsKey(partColName) && partSpec.get(partColName) != null) {
      if (dynamicPartBegin > 0) {
        throw new SemanticException("Dynamic partition columns should not come before static partition columns.");
      }
      exprNodeDesc=new ExprNodeConstantDesc(partSpec.get(partColName));
      TypeInfo srcType=exprNodeDesc.getTypeInfo();
      TypeInfo destType=selRS.getSignature().get(this.columns.size() + i).getType();
      if (!srcType.equals(destType)) {
        exprNodeDesc=ParseUtils.createConversionCast(exprNodeDesc,(PrimitiveTypeInfo)destType);
      }
    }
 else {
      dynamicPartBegin++;
      ColumnInfo col=columns.get(this.columns.size() + dynamicPartBegin);
      TypeInfo srcType=col.getType();
      TypeInfo destType=selRS.getSignature().get(this.columns.size() + i).getType();
      exprNodeDesc=new ExprNodeColumnDesc(col);
      if (!srcType.equals(destType)) {
        exprNodeDesc=ParseUtils.createConversionCast(exprNodeDesc,(PrimitiveTypeInfo)destType);
      }
    }
    colList.add(exprNodeDesc);
    String internalName=selRS.getColumnNames().get(this.columns.size() + i);
    columnNames.add(internalName);
    columnExprMap.put(internalName,exprNodeDesc);
    signature.add(selRS.getSignature().get(this.columns.size() + i));
  }
  operator.setConf(new SelectDesc(colList,columnNames));
  operator.setColumnExprMap(columnExprMap);
  selRS.setSignature(signature);
  operator.setSchema(selRS);
}
