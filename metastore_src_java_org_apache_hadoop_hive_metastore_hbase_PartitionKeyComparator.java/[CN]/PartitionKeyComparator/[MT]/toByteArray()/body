{
  HbaseMetastoreProto.PartitionKeyComparator.Builder builder=HbaseMetastoreProto.PartitionKeyComparator.newBuilder();
  builder.setNames(names);
  builder.setTypes(types);
  for (int i=0; i < ranges.size(); i++) {
    Range range=ranges.get(i);
    HbaseMetastoreProto.PartitionKeyComparator.Mark startMark=null;
    if (range.start != null) {
      startMark=HbaseMetastoreProto.PartitionKeyComparator.Mark.newBuilder().setValue(range.start.value).setInclusive(range.start.inclusive).build();
    }
    HbaseMetastoreProto.PartitionKeyComparator.Mark endMark=null;
    if (range.end != null) {
      endMark=HbaseMetastoreProto.PartitionKeyComparator.Mark.newBuilder().setValue(range.end.value).setInclusive(range.end.inclusive).build();
    }
    HbaseMetastoreProto.PartitionKeyComparator.Range.Builder rangeBuilder=HbaseMetastoreProto.PartitionKeyComparator.Range.newBuilder();
    rangeBuilder.setKey(range.keyName);
    if (startMark != null) {
      rangeBuilder.setStart(startMark);
    }
    if (endMark != null) {
      rangeBuilder.setEnd(endMark);
    }
    builder.addRange(rangeBuilder.build());
  }
  for (int i=0; i < ops.size(); i++) {
    Operator op=ops.get(i);
    builder.addOp(HbaseMetastoreProto.PartitionKeyComparator.Operator.newBuilder().setKey(op.keyName).setType(Type.valueOf(op.type.toString())).setVal(op.val).build());
  }
  return builder.build().toByteArray();
}
