{
  super(null);
  this.names=names;
  this.types=types;
  this.ranges=ranges;
  this.ops=ops;
  serdeProps=new Properties();
  serdeProps.setProperty(serdeConstants.LIST_COLUMNS,"dbName,tableName," + names);
  serdeProps.setProperty(serdeConstants.LIST_COLUMN_TYPES,"string,string," + types);
  this.nativeRanges=new ArrayList<NativeRange>(this.ranges.size());
  for (int i=0; i < ranges.size(); i++) {
    Range range=ranges.get(i);
    NativeRange nativeRange=new NativeRange();
    ;
    nativeRanges.add(i,nativeRange);
    nativeRange.pos=Arrays.asList(names.split(",")).indexOf(range.keyName);
    TypeInfo expectedType=TypeInfoUtils.getTypeInfoFromTypeString(types.split(",")[nativeRange.pos]);
    ObjectInspector outputOI=TypeInfoUtils.getStandardWritableObjectInspectorFromTypeInfo(expectedType);
    nativeRange.start=null;
    if (range.start != null) {
      Converter converter=ObjectInspectorConverters.getConverter(PrimitiveObjectInspectorFactory.javaStringObjectInspector,outputOI);
      nativeRange.start=(Comparable)converter.convert(range.start.value);
    }
    nativeRange.end=null;
    if (range.end != null) {
      Converter converter=ObjectInspectorConverters.getConverter(PrimitiveObjectInspectorFactory.javaStringObjectInspector,outputOI);
      nativeRange.end=(Comparable)converter.convert(range.end.value);
    }
  }
  this.nativeOps=new ArrayList<NativeOperator>(this.ops.size());
  for (int i=0; i < ops.size(); i++) {
    Operator op=ops.get(i);
    NativeOperator nativeOp=new NativeOperator();
    nativeOps.add(i,nativeOp);
    nativeOp.pos=ArrayUtils.indexOf(names.split(","),op.keyName);
    TypeInfo expectedType=TypeInfoUtils.getTypeInfoFromTypeString(types.split(",")[nativeOp.pos]);
    ObjectInspector outputOI=TypeInfoUtils.getStandardWritableObjectInspectorFromTypeInfo(expectedType);
    Converter converter=ObjectInspectorConverters.getConverter(PrimitiveObjectInspectorFactory.javaStringObjectInspector,outputOI);
    nativeOp.val=(Comparable)converter.convert(op.val);
  }
}
