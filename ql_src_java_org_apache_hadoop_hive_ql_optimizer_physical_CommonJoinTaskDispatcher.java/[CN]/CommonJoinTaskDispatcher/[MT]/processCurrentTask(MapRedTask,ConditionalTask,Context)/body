{
  JoinOperator joinOp=getJoinOp(currTask);
  if (joinOp == null || joinOp.getConf().isFixedAsSorted()) {
    return null;
  }
  currTask.setTaskTag(Task.COMMON_JOIN);
  MapWork currWork=currTask.getWork().getMapWork();
  List<Serializable> listWorks=new ArrayList<Serializable>();
  List<Task<? extends Serializable>> listTasks=new ArrayList<Task<? extends Serializable>>();
  HashMap<Task<? extends Serializable>,Set<String>> taskToAliases=new LinkedHashMap<Task<? extends Serializable>,Set<String>>();
  HashMap<String,ArrayList<String>> pathToAliases=currWork.getPathToAliases();
  Map<String,Operator<? extends OperatorDesc>> aliasToWork=currWork.getAliasToWork();
  ParseContext parseCtx=physicalContext.getParseContext();
  JoinDesc joinDesc=joinOp.getConf();
  if (aliasToSize == null) {
    aliasToSize=new HashMap<String,Long>();
  }
  try {
    long aliasTotalKnownInputSize=getTotalKnownInputSize(context,currWork,pathToAliases,aliasToSize);
    Set<Integer> bigTableCandidates=MapJoinProcessor.getBigTableCandidates(joinDesc.getConds());
    if (bigTableCandidates.isEmpty()) {
      return null;
    }
    bigTableCandidates=multiInsertBigTableCheck(joinOp,bigTableCandidates);
    Configuration conf=context.getConf();
    boolean convertJoinMapJoin=HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVECONVERTJOINNOCONDITIONALTASK);
    int bigTablePosition=-1;
    if (convertJoinMapJoin) {
      long mapJoinSize=HiveConf.getLongVar(conf,HiveConf.ConfVars.HIVECONVERTJOINNOCONDITIONALTASKTHRESHOLD);
      Long bigTableSize=null;
      Set<String> aliases=aliasToWork.keySet();
      for (      int tablePosition : bigTableCandidates) {
        Operator<?> parent=joinOp.getParentOperators().get(tablePosition);
        Set<String> participants=GenMapRedUtils.findAliases(currWork,parent);
        long sumOfOthers=Utilities.sumOfExcept(aliasToSize,aliases,participants);
        if (sumOfOthers < 0 || sumOfOthers > mapJoinSize) {
          continue;
        }
        if (bigTableSize == null && bigTablePosition >= 0 && tablePosition < bigTablePosition) {
          continue;
        }
        long aliasSize=Utilities.sumOf(aliasToSize,participants);
        if (bigTableSize == null || bigTableSize < 0 || (aliasSize >= 0 && aliasSize >= bigTableSize)) {
          bigTablePosition=tablePosition;
          bigTableSize=aliasSize;
        }
      }
    }
    currWork.setLeftInputJoin(joinOp.getConf().isLeftInputJoin());
    currWork.setBaseSrc(joinOp.getConf().getBaseSrc());
    currWork.setMapAliases(joinOp.getConf().getMapAliases());
    if (bigTablePosition >= 0) {
      MapRedTask newTask=convertTaskToMapJoinTask(currTask.getWork(),bigTablePosition);
      newTask.setTaskTag(Task.MAPJOIN_ONLY_NOBACKUP);
      newTask.setFetchSource(currTask.isFetchSource());
      replaceTask(currTask,newTask);
      if ((newTask.getChildTasks() != null) && (newTask.getChildTasks().size() == 1)) {
        mergeMapJoinTaskIntoItsChildMapRedTask(newTask,conf);
      }
      return newTask;
    }
    long ThresholdOfSmallTblSizeSum=HiveConf.getLongVar(conf,HiveConf.ConfVars.HIVESMALLTABLESFILESIZE);
    for (int pos=0; pos < joinOp.getNumParent(); pos++) {
      if (!bigTableCandidates.contains(pos)) {
        continue;
      }
      MapredWork newWork=SerializationUtilities.clonePlan(currTask.getWork());
      MapRedTask newTask=convertTaskToMapJoinTask(newWork,pos);
      Operator<?> startOp=joinOp.getParentOperators().get(pos);
      Set<String> aliases=GenMapRedUtils.findAliases(currWork,startOp);
      long aliasKnownSize=Utilities.sumOf(aliasToSize,aliases);
      if (cannotConvert(aliasKnownSize,aliasTotalKnownInputSize,ThresholdOfSmallTblSizeSum)) {
        continue;
      }
      listWorks.add(newTask.getWork());
      listTasks.add(newTask);
      newTask.setTaskTag(Task.CONVERTED_MAPJOIN);
      newTask.setFetchSource(currTask.isFetchSource());
      newTask.setBackupTask(currTask);
      newTask.setBackupChildrenTasks(currTask.getChildTasks());
      taskToAliases.put(newTask,aliases);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new SemanticException("Generate Map Join Task Error: " + e.getMessage());
  }
  listWorks.add(currTask.getWork());
  listTasks.add(currTask);
  currWork.setLeftInputJoin(false);
  currWork.setBaseSrc(null);
  currWork.setMapAliases(null);
  ConditionalWork cndWork=new ConditionalWork(listWorks);
  ConditionalTask cndTsk=(ConditionalTask)TaskFactory.get(cndWork,parseCtx.getConf());
  cndTsk.setListTasks(listTasks);
  cndTsk.setResolver(new ConditionalResolverCommonJoin());
  ConditionalResolverCommonJoinCtx resolverCtx=new ConditionalResolverCommonJoinCtx();
  resolverCtx.setPathToAliases(pathToAliases);
  resolverCtx.setAliasToKnownSize(aliasToSize);
  resolverCtx.setTaskToAliases(taskToAliases);
  resolverCtx.setCommonJoinTask(currTask);
  resolverCtx.setLocalTmpDir(context.getLocalScratchDir(false));
  resolverCtx.setHdfsTmpDir(context.getMRScratchDir());
  cndTsk.setResolverCtx(resolverCtx);
  replaceTaskWithConditionalTask(currTask,cndTsk);
  return cndTsk;
}
