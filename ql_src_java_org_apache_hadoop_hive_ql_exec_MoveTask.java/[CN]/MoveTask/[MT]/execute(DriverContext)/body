{
  try {
    LoadFileDesc lfd=work.getLoadFileWork();
    if (lfd != null) {
      Path targetPath=new Path(lfd.getTargetDir());
      Path sourcePath=new Path(lfd.getSourceDir());
      moveFile(sourcePath,targetPath,lfd.getIsDfsDir());
    }
    LoadMultiFilesDesc lmfd=work.getLoadMultiFilesWork();
    if (lmfd != null) {
      boolean isDfsDir=lmfd.getIsDfsDir();
      int i=0;
      while (i < lmfd.getSourceDirs().size()) {
        Path srcPath=new Path(lmfd.getSourceDirs().get(i));
        Path destPath=new Path(lmfd.getTargetDirs().get(i));
        FileSystem fs=destPath.getFileSystem(conf);
        if (!fs.exists(destPath.getParent())) {
          fs.mkdirs(destPath.getParent());
        }
        moveFile(srcPath,destPath,isDfsDir);
        i++;
      }
    }
    LoadTableDesc tbd=work.getLoadTableWork();
    if (tbd != null) {
      StringBuilder mesg=new StringBuilder("Loading data to table ").append(tbd.getTable().getTableName());
      if (tbd.getPartitionSpec().size() > 0) {
        mesg.append(" partition (");
        Map<String,String> partSpec=tbd.getPartitionSpec();
        for (        String key : partSpec.keySet()) {
          mesg.append(key).append('=').append(partSpec.get(key)).append(", ");
        }
        mesg.setLength(mesg.length() - 2);
        mesg.append(')');
      }
      String mesg_detail=" from " + tbd.getSourceDir();
      console.printInfo(mesg.toString(),mesg_detail);
      Table table=db.getTable(tbd.getTable().getTableName());
      if (work.getCheckFileFormat()) {
        FileStatus[] dirs;
        ArrayList<FileStatus> files;
        FileSystem fs;
        try {
          fs=FileSystem.get(table.getDataLocation(),conf);
          dirs=fs.globStatus(new Path(tbd.getSourceDir()));
          files=new ArrayList<FileStatus>();
          for (int i=0; (dirs != null && i < dirs.length); i++) {
            files.addAll(Arrays.asList(fs.listStatus(dirs[i].getPath())));
            if (files.size() > 0) {
              break;
            }
          }
        }
 catch (        IOException e) {
          throw new HiveException("addFiles: filesystem error in check phase",e);
        }
        if (HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVECHECKFILEFORMAT)) {
          boolean flag=HiveFileFormatUtils.checkInputFormat(fs,conf,tbd.getTable().getInputFileFormatClass(),files);
          if (!flag) {
            throw new HiveException("Wrong file format. Please check the file's format.");
          }
        }
      }
      DataContainer dc=null;
      if (tbd.getPartitionSpec().size() == 0) {
        dc=new DataContainer(table.getTTable());
        db.loadTable(new Path(tbd.getSourceDir()),tbd.getTable().getTableName(),tbd.getReplace(),tbd.getHoldDDLTime());
        if (work.getOutputs() != null) {
          work.getOutputs().add(new WriteEntity(table,true));
        }
      }
 else {
        LOG.info("Partition is: " + tbd.getPartitionSpec().toString());
        DynamicPartitionCtx dpCtx=tbd.getDPCtx();
        if (dpCtx != null && dpCtx.getNumDPCols() > 0) {
          List<LinkedHashMap<String,String>> dps=Utilities.getFullDPSpecs(conf,dpCtx);
          if (dps != null && dps.size() > 0) {
            pushFeed(FeedType.DYNAMIC_PARTITIONS,dps);
          }
          ArrayList<LinkedHashMap<String,String>> dp=db.loadDynamicPartitions(new Path(tbd.getSourceDir()),tbd.getTable().getTableName(),tbd.getPartitionSpec(),tbd.getReplace(),dpCtx.getNumDPCols(),tbd.getHoldDDLTime());
          if (dp.size() == 0 && conf.getBoolVar(HiveConf.ConfVars.HIVE_ERROR_ON_EMPTY_PARTITION)) {
            throw new HiveException("This query creates no partitions." + " To turn off this error, set hive.error.on.empty.partition=false.");
          }
          for (          LinkedHashMap<String,String> partSpec : dp) {
            Partition partn=db.getPartition(table,partSpec,false);
            WriteEntity enty=new WriteEntity(partn,true);
            if (work.getOutputs() != null) {
              work.getOutputs().add(enty);
            }
            if (queryPlan.getOutputs() == null) {
              queryPlan.setOutputs(new HashSet<WriteEntity>());
            }
            queryPlan.getOutputs().add(enty);
            dc=new DataContainer(table.getTTable(),partn.getTPartition());
            if (SessionState.get() != null) {
              SessionState.get().getLineageState().setLineage(tbd.getSourceDir(),dc,table.getCols());
            }
            console.printInfo("\tLoading partition " + partSpec);
          }
          dc=null;
        }
 else {
          db.loadPartition(new Path(tbd.getSourceDir()),tbd.getTable().getTableName(),tbd.getPartitionSpec(),tbd.getReplace(),tbd.getHoldDDLTime(),tbd.getInheritTableSpecs());
          Partition partn=db.getPartition(table,tbd.getPartitionSpec(),false);
          dc=new DataContainer(table.getTTable(),partn.getTPartition());
          if (work.getOutputs() != null) {
            work.getOutputs().add(new WriteEntity(partn,true));
          }
        }
      }
      if (SessionState.get() != null && dc != null) {
        SessionState.get().getLineageState().setLineage(tbd.getSourceDir(),dc,table.getCols());
      }
    }
    return 0;
  }
 catch (  Exception e) {
    console.printError("Failed with exception " + e.getMessage(),"\n" + StringUtils.stringifyException(e));
    return (1);
  }
}
