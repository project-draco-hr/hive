{
  HiveConf conf=new HiveConf(getClass());
  Driver driver=new Driver(conf);
  SessionState.start(new CliSessionState(conf));
  driver.run("drop table mytbl");
  driver.run("create table mytbl (a string, b int)");
  Iterator<Entry<String,String>> itr=conf.iterator();
  Map<String,String> map=new HashMap<String,String>();
  while (itr.hasNext()) {
    Entry<String,String> kv=itr.next();
    map.put(kv.getKey(),kv.getValue());
  }
  WriterContext cntxt=runsInMaster(map);
  File writeCntxtFile=File.createTempFile("hcat-write","temp");
  writeCntxtFile.deleteOnExit();
  ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(writeCntxtFile));
  oos.writeObject(cntxt);
  oos.flush();
  oos.close();
  ObjectInputStream ois=new ObjectInputStream(new FileInputStream(writeCntxtFile));
  cntxt=(WriterContext)ois.readObject();
  ois.close();
  runsInSlave(cntxt);
  commit(map,true,cntxt);
  ReaderContext readCntxt=runsInMaster(map,false);
  File readCntxtFile=File.createTempFile("hcat-read","temp");
  readCntxtFile.deleteOnExit();
  oos=new ObjectOutputStream(new FileOutputStream(readCntxtFile));
  oos.writeObject(readCntxt);
  oos.flush();
  oos.close();
  ois=new ObjectInputStream(new FileInputStream(readCntxtFile));
  readCntxt=(ReaderContext)ois.readObject();
  ois.close();
  for (  InputSplit split : readCntxt.getSplits()) {
    runsInSlave(split,readCntxt.getConf());
  }
}
