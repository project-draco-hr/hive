{
  List<FieldSchema> parts=new ArrayList<FieldSchema>();
  parts.add(new FieldSchema("year","string",null));
  parts.add(new FieldSchema("month","string",null));
  parts.add(new FieldSchema("state","string",null));
  ExpressionTree exprTree=PartFilterExprUtil.getFilterParser("year = 2015 and state = 'CA'").tree;
  PlanResult planRes=HBaseFilterPlanUtil.getFilterPlan(exprTree,parts);
  Assert.assertEquals(planRes.plan.getPlans().size(),1);
  ScanPlan sp=planRes.plan.getPlans().get(0);
  byte[] startRowSuffix=sp.getStartRowSuffix("testdb","testtb",parts);
  byte[] endRowSuffix=sp.getEndRowSuffix("testdb","testtb",parts);
  RowFilter filter=(RowFilter)sp.getFilter(parts);
  Assert.assertTrue(Bytes.contains(startRowSuffix,"2015".getBytes()));
  Assert.assertTrue(Bytes.contains(endRowSuffix,"2015".getBytes()));
  Assert.assertFalse(Bytes.contains(startRowSuffix,"CA".getBytes()));
  Assert.assertFalse(Bytes.contains(endRowSuffix,"CA".getBytes()));
  PartitionKeyComparator comparator=(PartitionKeyComparator)filter.getComparator();
  Assert.assertEquals(comparator.ranges.size(),1);
  Assert.assertEquals(comparator.ranges.get(0).keyName,"state");
  exprTree=PartFilterExprUtil.getFilterParser("year = 2015 and month > 10 " + "and month <= 11 and state like 'C%'").tree;
  planRes=HBaseFilterPlanUtil.getFilterPlan(exprTree,parts);
  Assert.assertEquals(planRes.plan.getPlans().size(),1);
  sp=planRes.plan.getPlans().get(0);
  startRowSuffix=sp.getStartRowSuffix("testdb","testtb",parts);
  endRowSuffix=sp.getEndRowSuffix("testdb","testtb",parts);
  filter=(RowFilter)sp.getFilter(parts);
  Assert.assertTrue(Bytes.contains(startRowSuffix,"2015".getBytes()));
  Assert.assertTrue(Bytes.contains(endRowSuffix,"2015".getBytes()));
  Assert.assertTrue(Bytes.contains(startRowSuffix,"10".getBytes()));
  Assert.assertTrue(Bytes.contains(endRowSuffix,"11".getBytes()));
  comparator=(PartitionKeyComparator)filter.getComparator();
  Assert.assertEquals(comparator.ops.size(),1);
  Assert.assertEquals(comparator.ops.get(0).keyName,"state");
  exprTree=PartFilterExprUtil.getFilterParser("year >= 2014 and month > 10 " + "and month <= 11 and state like 'C%'").tree;
  planRes=HBaseFilterPlanUtil.getFilterPlan(exprTree,parts);
  Assert.assertEquals(planRes.plan.getPlans().size(),1);
  sp=planRes.plan.getPlans().get(0);
  startRowSuffix=sp.getStartRowSuffix("testdb","testtb",parts);
  endRowSuffix=sp.getEndRowSuffix("testdb","testtb",parts);
  filter=(RowFilter)sp.getFilter(parts);
  Assert.assertTrue(Bytes.contains(startRowSuffix,"2014".getBytes()));
  comparator=(PartitionKeyComparator)filter.getComparator();
  Assert.assertEquals(comparator.ranges.size(),1);
  Assert.assertEquals(comparator.ranges.get(0).keyName,"month");
  Assert.assertEquals(comparator.ops.size(),1);
  Assert.assertEquals(comparator.ops.get(0).keyName,"state");
  exprTree=PartFilterExprUtil.getFilterParser("year = 2014 and (month > 10 " + "or month < 3)").tree;
  planRes=HBaseFilterPlanUtil.getFilterPlan(exprTree,parts);
  sp=planRes.plan.getPlans().get(0);
  startRowSuffix=sp.getStartRowSuffix("testdb","testtb",parts);
  endRowSuffix=sp.getEndRowSuffix("testdb","testtb",parts);
  filter=(RowFilter)sp.getFilter(parts);
  Assert.assertTrue(Bytes.contains(startRowSuffix,"2014".getBytes()));
  Assert.assertTrue(Bytes.contains(endRowSuffix,"2014".getBytes()));
  Assert.assertTrue(Bytes.contains(startRowSuffix,"10".getBytes()));
  sp=planRes.plan.getPlans().get(1);
  startRowSuffix=sp.getStartRowSuffix("testdb","testtb",parts);
  endRowSuffix=sp.getEndRowSuffix("testdb","testtb",parts);
  filter=(RowFilter)sp.getFilter(parts);
  Assert.assertTrue(Bytes.contains(startRowSuffix,"2014".getBytes()));
  Assert.assertTrue(Bytes.contains(endRowSuffix,"2014".getBytes()));
  Assert.assertTrue(Bytes.contains(endRowSuffix,"3".getBytes()));
}
