{
  final String KEY="k1";
  final String VAL1="10";
  final String VAL2="11";
  LeafNode l=new LeafNode();
  l.keyName=KEY;
  l.value=VAL1;
  final ScanMarker DEFAULT_SCANMARKER=null;
  List<FieldSchema> parts=new ArrayList<FieldSchema>();
  parts.add(new FieldSchema("k1","int",null));
  LeafNode r=new LeafNode();
  r.keyName=KEY;
  r.value=VAL2;
  TreeNode tn=new TreeNode(l,LogicalOperator.AND,r);
  l.operator=Operator.GREATERTHANOREQUALTO;
  r.operator=Operator.LESSTHAN;
  verifyPlan(tn,parts,KEY,new ScanMarker(VAL1,INCLUSIVE,"int"),new ScanMarker(VAL2,!INCLUSIVE,"int"));
  l.operator=Operator.GREATERTHANOREQUALTO;
  r.operator=Operator.GREATERTHAN;
  verifyPlan(tn,parts,KEY,new ScanMarker(VAL2,!INCLUSIVE,"int"),DEFAULT_SCANMARKER);
  tn=new TreeNode(l,LogicalOperator.OR,r);
  ExpressionTree e=new ExpressionTree();
  e.setRootForTest(tn);
  PlanResult planRes=HBaseFilterPlanUtil.getFilterPlan(e,parts);
  Assert.assertEquals(2,planRes.plan.getPlans().size());
  Assert.assertEquals(false,planRes.hasUnsupportedCondition);
  TreeNode tn2=new TreeNode(l,LogicalOperator.AND,tn);
  e=new ExpressionTree();
  e.setRootForTest(tn2);
  planRes=HBaseFilterPlanUtil.getFilterPlan(e,parts);
  Assert.assertEquals(2,planRes.plan.getPlans().size());
  Assert.assertEquals(false,planRes.hasUnsupportedCondition);
  LeafNode klike=new LeafNode();
  klike.keyName=KEY;
  klike.value=VAL1;
  klike.operator=Operator.LIKE;
  TreeNode tn3=new TreeNode(tn2,LogicalOperator.OR,klike);
  e=new ExpressionTree();
  e.setRootForTest(tn3);
  planRes=HBaseFilterPlanUtil.getFilterPlan(e,parts);
  Assert.assertEquals(3,planRes.plan.getPlans().size());
  Assert.assertEquals(false,planRes.hasUnsupportedCondition);
}
