{
  TezContext tezContext=(TezContext)MapredContext.get();
  Map<Integer,String> parentToInput=desc.getParentToInput();
  int hashTableThreshold=HiveConf.getIntVar(hconf,HiveConf.ConfVars.HIVEHASHTABLETHRESHOLD);
  float hashTableLoadFactor=HiveConf.getFloatVar(hconf,HiveConf.ConfVars.HIVEHASHTABLELOADFACTOR);
  boolean useLazyRows=HiveConf.getBoolVar(hconf,HiveConf.ConfVars.HIVEMAPJOINLAZYHASHTABLE);
  for (int pos=0; pos < mapJoinTables.length; pos++) {
    if (pos == desc.getPosBigTable()) {
      continue;
    }
    LogicalInput input=tezContext.getInput(parentToInput.get(pos));
    try {
      KeyValueReader kvReader=(KeyValueReader)input.getReader();
      MapJoinTableContainer tableContainer=new HashMapWrapper(hashTableThreshold,hashTableLoadFactor);
      while (kvReader.next()) {
        MapJoinKey key=new MapJoinKey();
        key.read(mapJoinTableSerdes[pos].getKeyContext(),(Writable)kvReader.getCurrentKey());
        LazyFlatRowContainer values=(LazyFlatRowContainer)tableContainer.get(key);
        if (values == null) {
          values=new LazyFlatRowContainer();
          tableContainer.put(key,values);
        }
        values.add(mapJoinTableSerdes[pos].getValueContext(),(BytesWritable)kvReader.getCurrentValue(),useLazyRows);
      }
      mapJoinTables[pos]=tableContainer;
    }
 catch (    IOException e) {
      throw new HiveException(e);
    }
catch (    SerDeException e) {
      throw new HiveException(e);
    }
catch (    Exception e) {
      throw new HiveException(e);
    }
  }
}
