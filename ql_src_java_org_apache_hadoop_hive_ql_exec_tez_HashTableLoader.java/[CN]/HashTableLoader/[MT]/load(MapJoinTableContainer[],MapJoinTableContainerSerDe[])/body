{
  Map<Integer,String> parentToInput=desc.getParentToInput();
  Map<Integer,Long> parentKeyCounts=desc.getParentKeyCounts();
  boolean isCrossProduct=false;
  List<ExprNodeDesc> joinExprs=desc.getKeys().values().iterator().next();
  if (joinExprs.size() == 0) {
    isCrossProduct=true;
  }
  boolean useOptimizedTables=HiveConf.getBoolVar(hconf,HiveConf.ConfVars.HIVEMAPJOINUSEOPTIMIZEDTABLE);
  boolean useHybridGraceHashJoin=desc.isHybridHashJoin();
  boolean isFirstKey=true;
  long totalMapJoinMemory=desc.getMemoryNeeded();
  LOG.info("Memory manager allocates " + totalMapJoinMemory + " bytes for the loading hashtable.");
  if (totalMapJoinMemory <= 0) {
    totalMapJoinMemory=HiveConf.getLongVar(hconf,HiveConf.ConfVars.HIVECONVERTJOINNOCONDITIONALTASKTHRESHOLD);
  }
  long processMaxMemory=ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getMax();
  if (totalMapJoinMemory > processMaxMemory) {
    float hashtableMemoryUsage=HiveConf.getFloatVar(hconf,HiveConf.ConfVars.HIVEHASHTABLEFOLLOWBYGBYMAXMEMORYUSAGE);
    LOG.warn("totalMapJoinMemory value of " + totalMapJoinMemory + " is greater than the max memory size of "+ processMaxMemory);
    totalMapJoinMemory=(long)(processMaxMemory * hashtableMemoryUsage);
  }
  HybridHashTableConf nwayConf=null;
  long totalSize=0;
  int biggest=0;
  Map<Integer,Long> tableMemorySizes=null;
  if (useHybridGraceHashJoin && mapJoinTables.length > 2) {
    nwayConf=new HybridHashTableConf();
    long maxSize=Long.MIN_VALUE;
    for (int pos=0; pos < mapJoinTables.length; pos++) {
      if (pos == desc.getPosBigTable()) {
        continue;
      }
      long smallTableSize=desc.getParentDataSizes().get(pos);
      totalSize+=smallTableSize;
      if (maxSize < smallTableSize) {
        maxSize=smallTableSize;
        biggest=pos;
      }
    }
    tableMemorySizes=divideHybridHashTableMemory(mapJoinTables,desc,totalSize,totalMapJoinMemory);
    long memory=tableMemorySizes.get(biggest);
    int numPartitions=0;
    try {
      numPartitions=HybridHashTableContainer.calcNumPartitions(memory,maxSize,HiveConf.getIntVar(hconf,HiveConf.ConfVars.HIVEHYBRIDGRACEHASHJOINMINNUMPARTITIONS),HiveConf.getIntVar(hconf,HiveConf.ConfVars.HIVEHYBRIDGRACEHASHJOINMINWBSIZE));
    }
 catch (    IOException e) {
      throw new HiveException(e);
    }
    nwayConf.setNumberOfPartitions(numPartitions);
  }
  for (int pos=0; pos < mapJoinTables.length; pos++) {
    if (pos == desc.getPosBigTable()) {
      continue;
    }
    String inputName=parentToInput.get(pos);
    LogicalInput input=tezContext.getInput(inputName);
    try {
      input.start();
      tezContext.getTezProcessorContext().waitForAnyInputReady(Collections.<Input>singletonList(input));
    }
 catch (    Exception e) {
      throw new HiveException(e);
    }
    try {
      KeyValueReader kvReader=(KeyValueReader)input.getReader();
      MapJoinObjectSerDeContext keyCtx=mapJoinTableSerdes[pos].getKeyContext(), valCtx=mapJoinTableSerdes[pos].getValueContext();
      if (useOptimizedTables) {
        ObjectInspector keyOi=keyCtx.getSerDe().getObjectInspector();
        if (!MapJoinBytesTableContainer.isSupportedKey(keyOi)) {
          if (isFirstKey) {
            useOptimizedTables=false;
            LOG.info(describeOi("Not using optimized hash table. " + "Only a subset of mapjoin keys is supported. Unsupported key: ",keyOi));
          }
 else {
            throw new HiveException(describeOi("Only a subset of mapjoin keys is supported. Unsupported key: ",keyOi));
          }
        }
      }
      isFirstKey=false;
      Long keyCountObj=parentKeyCounts.get(pos);
      long keyCount=(keyCountObj == null) ? -1 : keyCountObj.longValue();
      long memory=0;
      if (useHybridGraceHashJoin) {
        if (mapJoinTables.length > 2) {
          memory=tableMemorySizes.get(pos);
        }
 else {
          memory=totalMapJoinMemory;
        }
      }
      MapJoinTableContainer tableContainer;
      if (useOptimizedTables) {
        if (!useHybridGraceHashJoin || isCrossProduct) {
          tableContainer=new MapJoinBytesTableContainer(hconf,valCtx,keyCount,0);
        }
 else {
          tableContainer=new HybridHashTableContainer(hconf,keyCount,memory,desc.getParentDataSizes().get(pos),nwayConf);
        }
      }
 else {
        tableContainer=new HashMapWrapper(hconf,keyCount);
      }
      LOG.info("Using tableContainer " + tableContainer.getClass().getSimpleName());
      tableContainer.setSerde(keyCtx,valCtx);
      while (kvReader.next()) {
        tableContainer.putRow((Writable)kvReader.getCurrentKey(),(Writable)kvReader.getCurrentValue());
      }
      tableContainer.seal();
      mapJoinTables[pos]=tableContainer;
    }
 catch (    Exception e) {
      throw new HiveException(e);
    }
  }
}
