{
  int smallTableCount=Math.max(mapJoinTables.length - 1,1);
  Map<Integer,Long> tableMemorySizes=new HashMap<Integer,Long>();
  boolean fallbackToEqualProportions=totalSize <= 0;
  if (!fallbackToEqualProportions) {
    for (    Map.Entry<Integer,Long> tableSizeEntry : desc.getParentDataSizes().entrySet()) {
      if (tableSizeEntry.getKey() == desc.getPosBigTable()) {
        continue;
      }
      long tableSize=tableSizeEntry.getValue();
      if (tableSize <= 0) {
        fallbackToEqualProportions=true;
        break;
      }
      float percentage=(float)tableSize / totalSize;
      long tableMemory=(long)(totalHashTableMemory * percentage);
      tableMemorySizes.put(tableSizeEntry.getKey(),tableMemory);
    }
  }
  if (fallbackToEqualProportions) {
    long equalPortion=totalHashTableMemory / smallTableCount;
    for (    Integer pos : desc.getParentDataSizes().keySet()) {
      if (pos == desc.getPosBigTable()) {
        break;
      }
      tableMemorySizes.put(pos,equalPortion);
    }
  }
  return tableMemorySizes;
}
