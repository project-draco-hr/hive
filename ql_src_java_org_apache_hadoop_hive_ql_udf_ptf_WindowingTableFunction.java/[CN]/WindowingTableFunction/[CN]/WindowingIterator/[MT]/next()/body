{
  int i;
  for (i=0; i < outputFromPivotFunctions.length; i++) {
    if (outputFromPivotFunctions[i] != null) {
      output.set(i,outputFromPivotFunctions[i].get(currIdx));
    }
  }
  try {
    for (    int j : wFnsToProcess) {
      WindowFunctionDef wFn=wTFnDef.getWindowFunctions().get(j);
      Range rng=getRange(wFn,currIdx,iPart,order);
      PTFPartitionIterator<Object> rItr=rng.iterator();
      PTFOperator.connectLeadLagFunctionsToPartition(ptfDesc,rItr);
      output.set(j,evaluateWindowFunction(wFn,rItr));
    }
    Object iRow=iPart.getAt(currIdx);
    i=wTFnDef.getWindowFunctions().size();
    for (    StructField f : inputOI.getAllStructFieldRefs()) {
      output.set(i++,inputOI.getStructFieldData(iRow,f));
    }
  }
 catch (  HiveException he) {
    throw new RuntimeException(he);
  }
  currIdx++;
  return output;
}
