{
  WindowTableFunctionDef wTFnDef=(WindowTableFunctionDef)getTableDef();
  ArrayList<Object> output=new ArrayList<Object>();
  List<?>[] outputFromPivotFunctions=new List<?>[wTFnDef.getWindowFunctions().size()];
  ArrayList<Integer> wFnsWithWindows=new ArrayList<Integer>();
  PTFPartition iPart=pItr.getPartition();
  int i=0;
  for (  WindowFunctionDef wFn : wTFnDef.getWindowFunctions()) {
    boolean processWindow=processWindow(wFn);
    pItr.reset();
    if (!processWindow && !wFn.isPivotResult()) {
      Object out=evaluateWindowFunction(wFn,pItr);
      output.add(out);
    }
 else     if (wFn.isPivotResult()) {
      GenericUDAFEvaluator streamingEval=wFn.getWFnEval().getWindowingEvaluator(wFn.getWindowFrame());
      if (streamingEval != null && streamingEval instanceof ISupportStreamingModeForWindowing) {
        ISupportStreamingModeForWindowing strEval=(ISupportStreamingModeForWindowing)streamingEval;
        if (strEval.getRowsRemainingAfterTerminate() == 0) {
          wFn.setWFnEval(streamingEval);
          if (wFn.getOI() instanceof ListObjectInspector) {
            ListObjectInspector listOI=(ListObjectInspector)wFn.getOI();
            wFn.setOI(listOI.getListElementObjectInspector());
          }
          output.add(null);
          wFnsWithWindows.add(i);
        }
 else {
          outputFromPivotFunctions[i]=(List)evaluateWindowFunction(wFn,pItr);
          output.add(null);
        }
      }
 else {
        outputFromPivotFunctions[i]=(List)evaluateWindowFunction(wFn,pItr);
        output.add(null);
      }
    }
 else {
      output.add(null);
      wFnsWithWindows.add(i);
    }
    i++;
  }
  i=0;
  for (i=0; i < iPart.getOutputOI().getAllStructFieldRefs().size(); i++) {
    output.add(null);
  }
  return new WindowingIterator(iPart,output,outputFromPivotFunctions,ArrayUtils.toPrimitive(wFnsWithWindows.toArray(new Integer[wFnsWithWindows.size()])));
}
