{
  canAcceptInputAsStream=false;
  if (ptfDesc.getLlInfo().getLeadLagExprs() != null) {
    return null;
  }
  WindowTableFunctionDef tabDef=(WindowTableFunctionDef)getTableDef();
  int startPos=Integer.MAX_VALUE;
  int endPos=Integer.MIN_VALUE;
  for (int i=0; i < tabDef.getWindowFunctions().size(); i++) {
    WindowFunctionDef wFnDef=tabDef.getWindowFunctions().get(i);
    WindowFrameDef wdwFrame=wFnDef.getWindowFrame();
    GenericUDAFEvaluator fnEval=wFnDef.getWFnEval();
    boolean streamingPossible=streamingPossible(cfg,wFnDef);
    GenericUDAFEvaluator streamingEval=streamingPossible ? fnEval.getWindowingEvaluator(wdwFrame) : null;
    if (streamingEval != null && streamingEval instanceof ISupportStreamingModeForWindowing) {
      continue;
    }
    BoundaryDef start=wdwFrame.getStart();
    BoundaryDef end=wdwFrame.getEnd();
    if (!(end instanceof ValueBoundaryDef) && !(start instanceof ValueBoundaryDef)) {
      if (!end.isUnbounded() && !start.isUnbounded()) {
        startPos=Math.min(startPos,wdwFrame.getStart().getRelativeOffset());
        endPos=Math.max(endPos,wdwFrame.getEnd().getRelativeOffset());
        continue;
      }
    }
    return null;
  }
  int windowLimit=HiveConf.getIntVar(cfg,ConfVars.HIVEJOINCACHESIZE);
  if (windowLimit < (endPos - startPos + 1)) {
    return null;
  }
  canAcceptInputAsStream=true;
  return new int[]{startPos,endPos};
}
