{
  boolean storagehandlerofhivepassthru=false;
  HiveOutputFormat<?,?> hiveOutputFormat;
  try {
    if (tableInfo.getJobProperties() != null) {
      if (tableInfo.getJobProperties().get(HivePassThroughOutputFormat.HIVE_PASSTHROUGH_STORAGEHANDLER_OF_JOBCONFKEY) != null) {
        jc.set(HivePassThroughOutputFormat.HIVE_PASSTHROUGH_STORAGEHANDLER_OF_JOBCONFKEY,tableInfo.getJobProperties().get(HivePassThroughOutputFormat.HIVE_PASSTHROUGH_STORAGEHANDLER_OF_JOBCONFKEY));
        storagehandlerofhivepassthru=true;
      }
    }
    if (storagehandlerofhivepassthru) {
      hiveOutputFormat=ReflectionUtils.newInstance(tableInfo.getOutputFileFormatClass(),jc);
    }
 else {
      hiveOutputFormat=tableInfo.getOutputFileFormatClass().newInstance();
    }
    boolean isCompressed=conf.getCompressed();
    JobConf jc_output=jc;
    if (isCompressed) {
      jc_output=new JobConf(jc);
      String codecStr=conf.getCompressCodec();
      if (codecStr != null && !codecStr.trim().equals("")) {
        Class<? extends CompressionCodec> codec=(Class<? extends CompressionCodec>)Class.forName(codecStr);
        FileOutputFormat.setOutputCompressorClass(jc_output,codec);
      }
      String type=conf.getCompressType();
      if (type != null && !type.trim().equals("")) {
        CompressionType style=CompressionType.valueOf(type);
        SequenceFileOutputFormat.setOutputCompressionType(jc,style);
      }
    }
    return getRecordWriter(jc_output,hiveOutputFormat,outputClass,isCompressed,tableInfo.getProperties(),outPath,reporter);
  }
 catch (  Exception e) {
    throw new HiveException(e);
  }
}
