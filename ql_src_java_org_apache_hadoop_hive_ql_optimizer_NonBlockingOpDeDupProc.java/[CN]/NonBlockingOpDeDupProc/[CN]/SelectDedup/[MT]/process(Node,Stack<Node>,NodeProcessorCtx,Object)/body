{
  SelectOperator cSEL=(SelectOperator)nd;
  SelectOperator pSEL=(SelectOperator)stack.get(stack.size() - 2);
  if (pSEL.getNumChild() > 1) {
    return null;
  }
  if (pSEL.getConf().isSelStarNoCompute()) {
    return null;
  }
  if (!cSEL.getConf().isSelStarNoCompute()) {
    Set<String> funcOutputs=getFunctionOutputs(pSEL.getConf().getOutputColumnNames(),pSEL.getConf().getColList());
    List<ExprNodeDesc> cSELColList=cSEL.getConf().getColList();
    List<String> cSELOutputColumnNames=cSEL.getConf().getOutputColumnNames();
    if (!funcOutputs.isEmpty() && !checkReferences(cSELColList,funcOutputs)) {
      return null;
    }
    if (cSEL.getColumnExprMap() == null) {
      pSEL.getConf().setColList(ExprNodeDescUtils.backtrack(cSELColList,cSEL,pSEL));
      pSEL.getConf().setOutputColumnNames(cSELOutputColumnNames);
    }
 else {
      List<ExprNodeDesc> newPSELColList=new ArrayList<ExprNodeDesc>();
      List<String> newPSELOutputColumnNames=new ArrayList<String>();
      Map<String,ExprNodeDesc> colExprMap=new HashMap<String,ExprNodeDesc>();
      for (int i=0; i < cSELOutputColumnNames.size(); i++) {
        String outputColumnName=cSELOutputColumnNames.get(i);
        ExprNodeDesc cSELExprNodeDesc=cSELColList.get(i);
        ExprNodeDesc newPSELExprNodeDesc=ExprNodeDescUtils.backtrack(cSELExprNodeDesc,cSEL,pSEL);
        newPSELColList.add(newPSELExprNodeDesc);
        newPSELOutputColumnNames.add(outputColumnName);
        colExprMap.put(outputColumnName,newPSELExprNodeDesc);
      }
      pSEL.getConf().setColList(newPSELColList);
      pSEL.getConf().setOutputColumnNames(newPSELOutputColumnNames);
      pSEL.setColumnExprMap(colExprMap);
    }
    pSEL.setSchema(cSEL.getSchema());
  }
  pSEL.getConf().setSelectStar(cSEL.getConf().isSelectStar());
  pSEL.removeChildAndAdoptItsChildren(cSEL);
  cSEL.setParentOperators(null);
  cSEL.setChildOperators(null);
  fixContextReferences(cSEL,pSEL);
  cSEL=null;
  return null;
}
