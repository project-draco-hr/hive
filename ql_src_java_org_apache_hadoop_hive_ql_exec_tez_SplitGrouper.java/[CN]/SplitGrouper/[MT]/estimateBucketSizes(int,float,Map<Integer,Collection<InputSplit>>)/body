{
  Map<Integer,Long> bucketSizeMap=new HashMap<Integer,Long>();
  Map<Integer,Integer> bucketTaskMap=new HashMap<Integer,Integer>();
  long totalSize=0;
  boolean earlyExit=false;
  for (  int bucketId : bucketSplitMap.keySet()) {
    long size=0;
    for (    InputSplit s : bucketSplitMap.get(bucketId)) {
      if (!(s instanceof FileSplit)) {
        bucketTaskMap.put(bucketId,(int)(availableSlots * waves));
        earlyExit=true;
        continue;
      }
      FileSplit fsplit=(FileSplit)s;
      size+=fsplit.getLength();
      totalSize+=fsplit.getLength();
    }
    bucketSizeMap.put(bucketId,size);
  }
  if (earlyExit) {
    return bucketTaskMap;
  }
  for (  int bucketId : bucketSizeMap.keySet()) {
    int numEstimatedTasks=0;
    if (totalSize != 0) {
      numEstimatedTasks=(int)(availableSlots * waves * bucketSizeMap.get(bucketId) / totalSize);
    }
    LOG.info("Estimated number of tasks: " + numEstimatedTasks + " for bucket "+ bucketId);
    if (numEstimatedTasks == 0) {
      numEstimatedTasks=1;
    }
    bucketTaskMap.put(bucketId,numEstimatedTasks);
  }
  return bucketTaskMap;
}
