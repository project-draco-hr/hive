{
  super(queryState);
  opToPartPruner=new HashMap<TableScanOperator,ExprNodeDesc>();
  opToPartList=new HashMap<TableScanOperator,PrunedPartitionList>();
  opToSamplePruner=new HashMap<TableScanOperator,SampleDesc>();
  nameToSplitSample=new HashMap<String,SplitSample>();
  topOps=new LinkedHashMap<String,TableScanOperator>();
  loadTableWork=new ArrayList<LoadTableDesc>();
  loadFileWork=new ArrayList<LoadFileDesc>();
  columnStatsAutoGatherContexts=new ArrayList<ColumnStatsAutoGatherContext>();
  opParseCtx=new LinkedHashMap<Operator<? extends OperatorDesc>,OpParseContext>();
  joinContext=new HashMap<JoinOperator,QBJoinTree>();
  smbMapJoinContext=new HashMap<SMBMapJoinOperator,QBJoinTree>();
  topToTable=new LinkedHashMap<TableScanOperator,Table>();
  fsopToTable=new HashMap<FileSinkOperator,Table>();
  reduceSinkOperatorsAddedByEnforceBucketingSorting=new ArrayList<ReduceSinkOperator>();
  topToTableProps=new HashMap<TableScanOperator,Map<String,String>>();
  destTableId=1;
  uCtx=null;
  listMapJoinOpsNoReducer=new ArrayList<AbstractMapJoinOperator<? extends MapJoinDesc>>();
  groupOpToInputTables=new HashMap<GroupByOperator,Set<String>>();
  prunedPartitions=new HashMap<String,PrunedPartitionList>();
  tabNameToTabObject=new HashMap<String,Table>();
  unparseTranslator=new UnparseTranslator(conf);
  autogenColAliasPrfxLbl=HiveConf.getVar(conf,HiveConf.ConfVars.HIVE_AUTOGEN_COLUMNALIAS_PREFIX_LABEL);
  autogenColAliasPrfxIncludeFuncName=HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_AUTOGEN_COLUMNALIAS_PREFIX_INCLUDEFUNCNAME);
  queryProperties=new QueryProperties();
  opToPartToSkewedPruner=new HashMap<TableScanOperator,Map<String,ExprNodeDesc>>();
  aliasToCTEs=new HashMap<String,CTEClause>();
  globalLimitCtx=new GlobalLimitCtx();
  viewAliasToInput=new HashMap<String,ReadEntity>();
  noscan=partialscan=false;
  tabNameToTabObject=new HashMap<>();
}
