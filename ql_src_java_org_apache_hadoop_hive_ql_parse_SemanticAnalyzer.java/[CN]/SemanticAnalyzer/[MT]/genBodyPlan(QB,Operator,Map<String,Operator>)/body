{
  QBParseInfo qbp=qb.getParseInfo();
  TreeSet<String> ks=new TreeSet<String>(qbp.getClauseNames());
  Map<String,Operator<? extends OperatorDesc>> inputs=createInputForDests(qb,input,ks);
  List<ASTNode> commonDistinctExprs=getCommonDistinctExprs(qb,input);
  boolean optimizeMultiGroupBy=commonDistinctExprs != null && conf.getBoolVar(HiveConf.ConfVars.HIVE_OPTIMIZE_MULTI_GROUPBY_COMMON_DISTINCTS);
  Operator curr=input;
  if (optimizeMultiGroupBy) {
    curr=createCommonReduceSink(qb,input);
    RowResolver currRR=opParseCtx.get(curr).getRowResolver();
    input=putOpInsertMap(OperatorFactory.getAndMakeChild(new ForwardDesc(),new RowSchema(currRR.getColumnInfos()),curr),currRR);
    for (    String dest : ks) {
      curr=input;
      curr=genGroupByPlan2MRMultiGroupBy(dest,qb,curr);
      curr=genSelectPlan(dest,qb,curr);
      Integer limit=qbp.getDestLimit(dest);
      if (limit != null) {
        curr=genLimitMapRedPlan(dest,qb,curr,limit.intValue(),true);
        qb.getParseInfo().setOuterQueryLimit(limit.intValue());
      }
      curr=genFileSinkPlan(dest,qb,curr);
    }
  }
 else {
    List<List<String>> commonGroupByDestGroups=null;
    if (conf.getBoolVar(HiveConf.ConfVars.HIVEMULTIGROUPBYSINGLEREDUCER)) {
      try {
        commonGroupByDestGroups=getCommonGroupByDestGroups(qb,inputs);
      }
 catch (      SemanticException e) {
        LOG.error("Failed to group clauses by common spray keys.",e);
      }
    }
    if (commonGroupByDestGroups == null) {
      commonGroupByDestGroups=new ArrayList<List<String>>();
      commonGroupByDestGroups.add(new ArrayList<String>(ks));
    }
    if (!commonGroupByDestGroups.isEmpty()) {
      for (      List<String> commonGroupByDestGroup : commonGroupByDestGroups) {
        if (commonGroupByDestGroup.isEmpty()) {
          continue;
        }
        String firstDest=commonGroupByDestGroup.get(0);
        input=inputs.get(firstDest);
        if (commonGroupByDestGroup.size() == 1 || (qbp.getAggregationExprsForClause(firstDest).size() == 0 && getGroupByForClause(qbp,firstDest).size() == 0) || conf.getBoolVar(HiveConf.ConfVars.HIVEGROUPBYSKEW) || !conf.getBoolVar(HiveConf.ConfVars.HIVEMULTIGROUPBYSINGLEREDUCER)) {
          for (          String dest : commonGroupByDestGroup) {
            curr=inputs.get(dest);
            if (qbp.getWhrForClause(dest) != null) {
              ASTNode whereExpr=qb.getParseInfo().getWhrForClause(dest);
              curr=genFilterPlan((ASTNode)whereExpr.getChild(0),qb,curr,aliasToOpInfo,false);
            }
            if (qbp.getAggregationExprsForClause(dest).size() != 0 || getGroupByForClause(qbp,dest).size() > 0) {
              if (conf.getBoolVar(HiveConf.ConfVars.HIVEGROUPBYSKEW) && qbp.getDistinctFuncExprsForClause(dest).size() > 1) {
                throw new SemanticException(ErrorMsg.UNSUPPORTED_MULTIPLE_DISTINCTS.getMsg());
              }
              curr=insertSelectAllPlanForGroupBy(curr);
              if (conf.getBoolVar(HiveConf.ConfVars.HIVEMAPSIDEAGGREGATE)) {
                if (!conf.getBoolVar(HiveConf.ConfVars.HIVEGROUPBYSKEW)) {
                  curr=genGroupByPlanMapAggrNoSkew(dest,qb,curr);
                }
 else {
                  curr=genGroupByPlanMapAggr2MR(dest,qb,curr);
                }
              }
 else               if (conf.getBoolVar(HiveConf.ConfVars.HIVEGROUPBYSKEW)) {
                curr=genGroupByPlan2MR(dest,qb,curr);
              }
 else {
                curr=genGroupByPlan1MR(dest,qb,curr);
              }
            }
            curr=genPostGroupByBodyPlan(curr,dest,qb,aliasToOpInfo);
          }
        }
 else {
          curr=genGroupByPlan1ReduceMultiGBY(commonGroupByDestGroup,qb,input,aliasToOpInfo);
        }
      }
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Created Body Plan for Query Block " + qb.getId());
  }
  return curr;
}
