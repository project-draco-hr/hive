{
  QBParseInfo qbp=qb.getParseInfo();
  TreeSet<String> ks=new TreeSet<String>(qbp.getClauseNames());
  Map<String,Operator<? extends OperatorDesc>> inputs=createInputForDests(qb,input,ks);
  Operator curr=input;
  List<List<String>> commonGroupByDestGroups=null;
  if (conf.getBoolVar(HiveConf.ConfVars.HIVEMULTIGROUPBYSINGLEREDUCER)) {
    try {
      commonGroupByDestGroups=getCommonGroupByDestGroups(qb,inputs);
    }
 catch (    SemanticException e) {
      LOG.error("Failed to group clauses by common spray keys.",e);
    }
  }
  if (commonGroupByDestGroups == null) {
    commonGroupByDestGroups=new ArrayList<List<String>>();
    commonGroupByDestGroups.add(new ArrayList<String>(ks));
  }
  if (!commonGroupByDestGroups.isEmpty()) {
    for (    List<String> commonGroupByDestGroup : commonGroupByDestGroups) {
      if (commonGroupByDestGroup.isEmpty()) {
        continue;
      }
      String firstDest=commonGroupByDestGroup.get(0);
      input=inputs.get(firstDest);
      if (commonGroupByDestGroup.size() == 1 || (qbp.getAggregationExprsForClause(firstDest).size() == 0 && getGroupByForClause(qbp,firstDest).size() == 0) || conf.getBoolVar(HiveConf.ConfVars.HIVEGROUPBYSKEW) || !conf.getBoolVar(HiveConf.ConfVars.HIVEMULTIGROUPBYSINGLEREDUCER)) {
        for (        String dest : commonGroupByDestGroup) {
          curr=inputs.get(dest);
          if (qbp.getWhrForClause(dest) != null) {
            ASTNode whereExpr=qb.getParseInfo().getWhrForClause(dest);
            curr=genFilterPlan((ASTNode)whereExpr.getChild(0),qb,curr,aliasToOpInfo,false);
          }
          Operator<?> gbySource=curr;
          if (qbp.getAggregationExprsForClause(dest).size() != 0 || getGroupByForClause(qbp,dest).size() > 0) {
            if (conf.getBoolVar(HiveConf.ConfVars.HIVEGROUPBYSKEW) && qbp.getDistinctFuncExprsForClause(dest).size() > 1) {
              throw new SemanticException(ErrorMsg.UNSUPPORTED_MULTIPLE_DISTINCTS.getMsg());
            }
            curr=insertSelectAllPlanForGroupBy(curr);
            ASTNode selExprList=qbp.getSelForClause(dest);
            if (selExprList.getToken().getType() == HiveParser.TOK_SELECTDI && selExprList.getChildCount() == 1 && selExprList.getChild(0).getChildCount() == 1) {
              ASTNode node=(ASTNode)selExprList.getChild(0).getChild(0);
              if (node.getToken().getType() == HiveParser.TOK_ALLCOLREF) {
                curr=genSelectPlan(dest,qb,curr,curr);
                RowResolver rr=opParseCtx.get(curr).getRowResolver();
                qbp.setSelExprForClause(dest,SemanticAnalyzer.genSelectDIAST(rr));
              }
            }
            if (conf.getBoolVar(HiveConf.ConfVars.HIVEMAPSIDEAGGREGATE)) {
              if (!conf.getBoolVar(HiveConf.ConfVars.HIVEGROUPBYSKEW)) {
                curr=genGroupByPlanMapAggrNoSkew(dest,qb,curr);
              }
 else {
                curr=genGroupByPlanMapAggr2MR(dest,qb,curr);
              }
            }
 else             if (conf.getBoolVar(HiveConf.ConfVars.HIVEGROUPBYSKEW)) {
              curr=genGroupByPlan2MR(dest,qb,curr);
            }
 else {
              curr=genGroupByPlan1MR(dest,qb,curr);
            }
          }
          if (LOG.isDebugEnabled()) {
            LOG.debug("RR before GB " + opParseCtx.get(gbySource).getRowResolver() + " after GB "+ opParseCtx.get(curr).getRowResolver());
          }
          curr=genPostGroupByBodyPlan(curr,dest,qb,aliasToOpInfo,gbySource);
        }
      }
 else {
        curr=genGroupByPlan1ReduceMultiGBY(commonGroupByDestGroup,qb,input,aliasToOpInfo);
      }
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Created Body Plan for Query Block " + qb.getId());
  }
  return curr;
}
