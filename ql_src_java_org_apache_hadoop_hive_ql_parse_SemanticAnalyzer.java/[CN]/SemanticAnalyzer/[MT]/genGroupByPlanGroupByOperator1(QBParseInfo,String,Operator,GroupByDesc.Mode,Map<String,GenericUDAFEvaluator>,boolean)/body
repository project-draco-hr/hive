{
  ArrayList<String> outputColumnNames=new ArrayList<String>();
  RowResolver groupByInputRowResolver=opParseCtx.get(reduceSinkOperatorInfo).getRR();
  RowResolver groupByOutputRowResolver=new RowResolver();
  groupByOutputRowResolver.setIsExprResolver(true);
  ArrayList<ExprNodeDesc> groupByKeys=new ArrayList<ExprNodeDesc>();
  ArrayList<AggregationDesc> aggregations=new ArrayList<AggregationDesc>();
  List<ASTNode> grpByExprs=getGroupByForClause(parseInfo,dest);
  Map<String,ExprNodeDesc> colExprMap=new HashMap<String,ExprNodeDesc>();
  for (int i=0; i < grpByExprs.size(); ++i) {
    ASTNode grpbyExpr=grpByExprs.get(i);
    ColumnInfo exprInfo=groupByInputRowResolver.getExpression(grpbyExpr);
    if (exprInfo == null) {
      throw new SemanticException(ErrorMsg.INVALID_COLUMN.getMsg(grpbyExpr));
    }
    groupByKeys.add(new ExprNodeColumnDesc(exprInfo.getType(),exprInfo.getInternalName(),exprInfo.getTabAlias(),exprInfo.getIsPartitionCol()));
    String field=getColumnInternalName(i);
    outputColumnNames.add(field);
    groupByOutputRowResolver.putExpression(grpbyExpr,new ColumnInfo(field,exprInfo.getType(),"",false));
    colExprMap.put(field,groupByKeys.get(groupByKeys.size() - 1));
  }
  HashMap<String,ASTNode> aggregationTrees=parseInfo.getAggregationExprsForClause(dest);
  for (  Map.Entry<String,ASTNode> entry : aggregationTrees.entrySet()) {
    ASTNode value=entry.getValue();
    String aggName=value.getChild(0).getText();
    ArrayList<ExprNodeDesc> aggParameters=new ArrayList<ExprNodeDesc>();
    boolean partialAggDone=!(distPartAgg || (value.getToken().getType() == HiveParser.TOK_FUNCTIONDI));
    if (!partialAggDone) {
      for (int i=1; i < value.getChildCount(); i++) {
        ASTNode paraExpr=(ASTNode)value.getChild(i);
        ColumnInfo paraExprInfo=groupByInputRowResolver.getExpression(paraExpr);
        if (paraExprInfo == null) {
          throw new SemanticException(ErrorMsg.INVALID_COLUMN.getMsg(paraExpr));
        }
        String paraExpression=paraExprInfo.getInternalName();
        assert(paraExpression != null);
        aggParameters.add(new ExprNodeColumnDesc(paraExprInfo.getType(),paraExprInfo.getInternalName(),paraExprInfo.getTabAlias(),paraExprInfo.getIsPartitionCol()));
      }
    }
 else {
      ColumnInfo paraExprInfo=groupByInputRowResolver.getExpression(value);
      if (paraExprInfo == null) {
        throw new SemanticException(ErrorMsg.INVALID_COLUMN.getMsg(value));
      }
      String paraExpression=paraExprInfo.getInternalName();
      assert(paraExpression != null);
      aggParameters.add(new ExprNodeColumnDesc(paraExprInfo.getType(),paraExpression,paraExprInfo.getTabAlias(),paraExprInfo.getIsPartitionCol()));
    }
    boolean isDistinct=(value.getType() == HiveParser.TOK_FUNCTIONDI);
    boolean isAllColumns=value.getType() == HiveParser.TOK_FUNCTIONSTAR;
    Mode amode=groupByDescModeToUDAFMode(mode,isDistinct);
    GenericUDAFEvaluator genericUDAFEvaluator=null;
    if (distPartAgg) {
      genericUDAFEvaluator=getGenericUDAFEvaluator(aggName,aggParameters,value,isDistinct,isAllColumns);
      assert(genericUDAFEvaluator != null);
      genericUDAFEvaluators.put(entry.getKey(),genericUDAFEvaluator);
    }
 else {
      genericUDAFEvaluator=genericUDAFEvaluators.get(entry.getKey());
      assert(genericUDAFEvaluator != null);
    }
    GenericUDAFInfo udaf=getGenericUDAFInfo(genericUDAFEvaluator,amode,aggParameters);
    aggregations.add(new AggregationDesc(aggName.toLowerCase(),udaf.genericUDAFEvaluator,udaf.convertedParameters,(mode != GroupByDesc.Mode.FINAL && isDistinct),amode));
    String field=getColumnInternalName(groupByKeys.size() + aggregations.size() - 1);
    outputColumnNames.add(field);
    groupByOutputRowResolver.putExpression(value,new ColumnInfo(field,udaf.returnType,"",false));
  }
  Operator op=putOpInsertMap(OperatorFactory.getAndMakeChild(new GroupByDesc(mode,outputColumnNames,groupByKeys,aggregations,distPartAgg),new RowSchema(groupByOutputRowResolver.getColumnInfos()),reduceSinkOperatorInfo),groupByOutputRowResolver);
  op.setColumnExprMap(colExprMap);
  return op;
}
