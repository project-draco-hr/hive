{
  if (gByExpr.getType() == HiveParser.DOT && gByExpr.getChild(0).getType() == HiveParser.TOK_TABLE_OR_COL) {
    String tab_alias=BaseSemanticAnalyzer.unescapeIdentifier(gByExpr.getChild(0).getChild(0).getText());
    String col_alias=BaseSemanticAnalyzer.unescapeIdentifier(gByExpr.getChild(1).getText());
    gByRR.put(tab_alias,col_alias,colInfo);
  }
 else   if (gByExpr.getType() == HiveParser.TOK_TABLE_OR_COL) {
    String col_alias=BaseSemanticAnalyzer.unescapeIdentifier(gByExpr.getChild(0).getText());
    String tab_alias=null;
    Operator<? extends OperatorDesc> parent=reduceSinkOp;
    while (parent instanceof ReduceSinkOperator || parent instanceof GroupByOperator) {
      parent=parent.getParentOperators().get(0);
    }
    RowResolver parentRR=opParseCtx.get(parent).getRowResolver();
    try {
      ColumnInfo pColInfo=parentRR.get(tab_alias,col_alias);
      tab_alias=pColInfo == null ? null : pColInfo.getTabAlias();
    }
 catch (    SemanticException se) {
    }
    gByRR.put(tab_alias,col_alias,colInfo);
  }
}
