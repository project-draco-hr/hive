{
  boolean tableSamplePresent=false;
  boolean splitSamplePresent=false;
  int aliasIndex=0;
  if (tabref.getChildCount() == 2) {
    ASTNode ct=(ASTNode)tabref.getChild(1);
    if (ct.getToken().getType() == HiveParser.TOK_TABLEBUCKETSAMPLE) {
      tableSamplePresent=true;
    }
 else     if (ct.getToken().getType() == HiveParser.TOK_TABLESPLITSAMPLE) {
      splitSamplePresent=true;
    }
 else {
      aliasIndex=1;
    }
  }
 else   if (tabref.getChildCount() == 3) {
    aliasIndex=2;
    ASTNode ct=(ASTNode)tabref.getChild(1);
    if (ct.getToken().getType() == HiveParser.TOK_TABLEBUCKETSAMPLE) {
      tableSamplePresent=true;
    }
 else     if (ct.getToken().getType() == HiveParser.TOK_TABLESPLITSAMPLE) {
      splitSamplePresent=true;
    }
  }
  ASTNode tableTree=(ASTNode)(tabref.getChild(0));
  String tabIdName=getUnescapedName(tableTree);
  String alias=(aliasIndex != 0) ? unescapeIdentifier(tabref.getChild(aliasIndex).getText()) : tabIdName;
  if (qb.exists(alias)) {
    throw new SemanticException(ErrorMsg.AMBIGUOUS_TABLE_ALIAS.getMsg(tabref.getChild(aliasIndex)));
  }
  if (tableSamplePresent) {
    ASTNode sampleClause=(ASTNode)tabref.getChild(1);
    ArrayList<ASTNode> sampleCols=new ArrayList<ASTNode>();
    if (sampleClause.getChildCount() > 2) {
      for (int i=2; i < sampleClause.getChildCount(); i++) {
        sampleCols.add((ASTNode)sampleClause.getChild(i));
      }
    }
    if (sampleCols.size() > 2) {
      throw new SemanticException(generateErrorMessage((ASTNode)tabref.getChild(0),ErrorMsg.SAMPLE_RESTRICTION.getMsg()));
    }
    qb.getParseInfo().setTabSample(alias,new TableSample(unescapeIdentifier(sampleClause.getChild(0).getText()),unescapeIdentifier(sampleClause.getChild(1).getText()),sampleCols));
    if (unparseTranslator.isEnabled()) {
      for (      ASTNode sampleCol : sampleCols) {
        unparseTranslator.addIdentifierTranslation((ASTNode)sampleCol.getChild(0));
      }
    }
  }
 else   if (splitSamplePresent) {
    String inputFormat=HiveConf.getVar(conf,HiveConf.ConfVars.HIVEINPUTFORMAT);
    if (!inputFormat.equals(CombineHiveInputFormat.class.getName())) {
      throw new SemanticException(generateErrorMessage((ASTNode)tabref.getChild(1),"Percentage sampling is not supported in " + inputFormat));
    }
    ASTNode sampleClause=(ASTNode)tabref.getChild(1);
    String alias_id=getAliasId(alias,qb);
    String strPercentage=unescapeIdentifier(sampleClause.getChild(0).getText());
    Double percent=Double.valueOf(strPercentage).doubleValue();
    if (percent < 0 || percent > 100) {
      throw new SemanticException(generateErrorMessage(sampleClause,"Sampling percentage should be between 0 and 100"));
    }
    nameToSplitSample.put(alias_id,new SplitSample(percent,conf.getIntVar(ConfVars.HIVESAMPLERANDOMNUM)));
  }
  qb.setTabAlias(alias,tabIdName);
  qb.addAlias(alias);
  qb.getParseInfo().setSrcForAlias(alias,tableTree);
  unparseTranslator.addTableNameTranslation(tableTree);
  if (aliasIndex != 0) {
    unparseTranslator.addIdentifierTranslation((ASTNode)tabref.getChild(aliasIndex));
  }
  return alias;
}
