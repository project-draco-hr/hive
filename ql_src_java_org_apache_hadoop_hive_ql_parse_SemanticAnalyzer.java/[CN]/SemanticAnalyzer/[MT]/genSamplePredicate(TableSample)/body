{
  exprNodeDesc numeratorExpr=new exprNodeConstantDesc(TypeInfo.getPrimitiveTypeInfo(Integer.class),Integer.valueOf(ts.getNumerator()));
  exprNodeDesc denominatorExpr=new exprNodeConstantDesc(TypeInfo.getPrimitiveTypeInfo(Integer.class),Integer.valueOf(ts.getDenominator()));
  exprNodeDesc intMaxExpr=new exprNodeConstantDesc(TypeInfo.getPrimitiveTypeInfo(Integer.class),Integer.valueOf(Integer.MAX_VALUE));
  ArrayList<exprNodeDesc> args=new ArrayList<exprNodeDesc>();
  for (  String col : ts.getCols()) {
    args.add(new exprNodeColumnDesc(String.class,col));
  }
  exprNodeDesc hashfnExpr=getFuncExprNodeDesc("default_sample_hashfn",args);
  assert(hashfnExpr != null);
  LOG.info("hashfnExpr = " + hashfnExpr);
  exprNodeDesc andExpr=getFuncExprNodeDesc("&",hashfnExpr,intMaxExpr);
  assert(andExpr != null);
  LOG.info("andExpr = " + andExpr);
  exprNodeDesc modExpr=getFuncExprNodeDesc("%",andExpr,denominatorExpr);
  assert(modExpr != null);
  LOG.info("modExpr = " + modExpr);
  LOG.info("numeratorExpr = " + numeratorExpr);
  exprNodeDesc equalsExpr=getFuncExprNodeDesc("==",modExpr,numeratorExpr);
  LOG.info("equalsExpr = " + equalsExpr);
  assert(equalsExpr != null);
  return equalsExpr;
}
