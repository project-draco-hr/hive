{
  RowResolver groupByInputRowResolver=opParseCtx.get(reduceSinkOperatorInfo).getRR();
  RowResolver groupByOutputRowResolver=new RowResolver();
  groupByOutputRowResolver.setIsExprResolver(true);
  ArrayList<exprNodeDesc> groupByKeys=new ArrayList<exprNodeDesc>();
  ArrayList<aggregationDesc> aggregations=new ArrayList<aggregationDesc>();
  List<ASTNode> grpByExprs=getGroupByForClause(parseInfo,dest);
  for (int i=0; i < grpByExprs.size(); ++i) {
    ASTNode grpbyExpr=grpByExprs.get(i);
    String text=grpbyExpr.toStringTree();
    ColumnInfo exprInfo=groupByInputRowResolver.get("",text);
    if (exprInfo == null) {
      throw new SemanticException(ErrorMsg.INVALID_COLUMN.getMsg(grpbyExpr));
    }
    groupByKeys.add(new exprNodeColumnDesc(exprInfo.getType(),exprInfo.getInternalName()));
    String field=(Integer.valueOf(i)).toString();
    groupByOutputRowResolver.put("",grpbyExpr.toStringTree(),new ColumnInfo(field,exprInfo.getType()));
  }
  HashMap<String,ASTNode> aggregationTrees=parseInfo.getAggregationExprsForClause(dest);
  for (  Map.Entry<String,ASTNode> entry : aggregationTrees.entrySet()) {
    ASTNode value=entry.getValue();
    String aggName=value.getChild(0).getText();
    Class<? extends UDAF> aggClass=FunctionRegistry.getUDAF(aggName);
    assert(aggClass != null);
    Method aggEvaluateMethod=null;
    ArrayList<exprNodeDesc> aggParameters=null;
    if (value.getToken().getType() == HiveParser.TOK_FUNCTIONDI) {
      ArrayList<Class<?>> aggClasses=new ArrayList<Class<?>>();
      ArrayList<exprNodeDesc> params=new ArrayList<exprNodeDesc>();
      for (int i=1; i < value.getChildCount(); i++) {
        String text=value.getChild(i).toStringTree();
        ASTNode paraExpr=(ASTNode)value.getChild(i);
        ColumnInfo paraExprInfo=groupByInputRowResolver.get("",text);
        if (paraExprInfo == null) {
          throw new SemanticException(ErrorMsg.INVALID_COLUMN.getMsg(paraExpr));
        }
        String paraExpression=paraExprInfo.getInternalName();
        assert(paraExpression != null);
        params.add(new exprNodeColumnDesc(paraExprInfo.getType(),paraExprInfo.getInternalName()));
        aggClasses.add(paraExprInfo.getType().getPrimitiveClass());
      }
      UDAFInfo udaf=getUDAFInfo(aggName,mode,aggClasses,params,value);
      aggParameters=udaf.convertedParameters;
      aggEvaluateMethod=udaf.evaluateMethod;
    }
 else {
      aggParameters=new ArrayList<exprNodeDesc>();
      aggEvaluateMethod=FunctionRegistry.getUDAFEvaluateMethod(aggName,mode);
      String text=entry.getKey();
      ColumnInfo paraExprInfo=groupByInputRowResolver.get("",text);
      if (paraExprInfo == null) {
        throw new SemanticException(ErrorMsg.INVALID_COLUMN.getMsg(value));
      }
      String paraExpression=paraExprInfo.getInternalName();
      assert(paraExpression != null);
      aggParameters.add(new exprNodeColumnDesc(paraExprInfo.getType(),paraExpression));
    }
    aggregations.add(new aggregationDesc(aggClass,aggParameters,((mode == groupByDesc.Mode.FINAL) ? false : (value.getToken().getType() == HiveParser.TOK_FUNCTIONDI))));
    groupByOutputRowResolver.put("",value.toStringTree(),new ColumnInfo(Integer.valueOf(groupByKeys.size() + aggregations.size() - 1).toString(),aggEvaluateMethod.getReturnType()));
  }
  return putOpInsertMap(OperatorFactory.getAndMakeChild(new groupByDesc(mode,groupByKeys,aggregations),new RowSchema(groupByOutputRowResolver.getColumnInfos()),reduceSinkOperatorInfo),groupByOutputRowResolver);
}
