{
  exprNodeDesc desc=null;
  ColumnInfo colInfo=input.get("",expr.toStringTree());
  if (colInfo != null) {
    desc=new exprNodeColumnDesc(colInfo.getType(),colInfo.getInternalName());
    return desc;
  }
  desc=genSimpleExprNodeDesc(expr);
  if (desc != null) {
    return desc;
  }
  int tokType=expr.getType();
switch (tokType) {
case HiveParser.TOK_COLREF:
{
      desc=genExprNodeDescFromColRef(expr,input);
      break;
    }
default :
{
    boolean isFunction=(expr.getType() == HiveParser.TOK_FUNCTION);
    int childrenBegin=(isFunction ? 1 : 0);
    ArrayList<exprNodeDesc> children=new ArrayList<exprNodeDesc>(expr.getChildCount() - childrenBegin);
    for (int ci=childrenBegin; ci < expr.getChildCount(); ci++) {
      children.add(genExprNodeDesc(qbm,(ASTNode)expr.getChild(ci),input));
    }
    desc=getXpathOrFuncExprNodeDesc(expr,isFunction,children);
    break;
  }
}
assert(desc != null);
return desc;
}
