{
  ExprNodeDesc numeratorExpr=new ExprNodeConstantDesc(TypeInfoFactory.intTypeInfo,Integer.valueOf(ts.getNumerator() - 1));
  ExprNodeDesc denominatorExpr=new ExprNodeConstantDesc(TypeInfoFactory.intTypeInfo,Integer.valueOf(ts.getDenominator()));
  ExprNodeDesc intMaxExpr=new ExprNodeConstantDesc(TypeInfoFactory.intTypeInfo,Integer.valueOf(Integer.MAX_VALUE));
  ArrayList<ExprNodeDesc> args=new ArrayList<ExprNodeDesc>();
  if (planExpr != null) {
    args.add(planExpr);
  }
 else   if (useBucketCols) {
    for (    String col : bucketCols) {
      ColumnInfo ci=rwsch.get(alias,col);
      args.add(new ExprNodeColumnDesc(ci.getType(),ci.getInternalName(),ci.getTabAlias(),ci.getIsPartitionCol()));
    }
  }
 else {
    for (    ASTNode expr : ts.getExprs()) {
      args.add(genExprNodeDesc(expr,rwsch));
    }
  }
  ExprNodeDesc equalsExpr=null;
{
    ExprNodeDesc hashfnExpr=new ExprNodeGenericFuncDesc(TypeInfoFactory.intTypeInfo,new GenericUDFHash(),args);
    assert(hashfnExpr != null);
    LOG.info("hashfnExpr = " + hashfnExpr);
    ExprNodeDesc andExpr=TypeCheckProcFactory.DefaultExprProcessor.getFuncExprNodeDesc("&",hashfnExpr,intMaxExpr);
    assert(andExpr != null);
    LOG.info("andExpr = " + andExpr);
    ExprNodeDesc modExpr=TypeCheckProcFactory.DefaultExprProcessor.getFuncExprNodeDesc("%",andExpr,denominatorExpr);
    assert(modExpr != null);
    LOG.info("modExpr = " + modExpr);
    LOG.info("numeratorExpr = " + numeratorExpr);
    equalsExpr=TypeCheckProcFactory.DefaultExprProcessor.getFuncExprNodeDesc("==",modExpr,numeratorExpr);
    LOG.info("equalsExpr = " + equalsExpr);
    assert(equalsExpr != null);
  }
  return equalsExpr;
}
