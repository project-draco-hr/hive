{
  QBParseInfo qbp=qb.getParseInfo();
  boolean skipRecursion=false;
  if (ast.getToken() != null) {
    skipRecursion=true;
switch (ast.getToken().getType()) {
case HiveParser.TOK_SELECTDI:
      qb.countSelDi();
case HiveParser.TOK_SELECT:
    qb.countSel();
  qbp.setSelExprForClause(ctx_1.dest,ast);
HashMap<String,CommonTree> aggregations=doPhase1GetAggregationsFromSelect(ast);
qbp.setAggregationExprsForClause(ctx_1.dest,aggregations);
qbp.setDistinctFuncExprForClause(ctx_1.dest,doPhase1GetDistinctFuncExpr(aggregations));
break;
case HiveParser.TOK_WHERE:
{
qbp.setWhrExprForClause(ctx_1.dest,ast);
}
break;
case HiveParser.TOK_DESTINATION:
{
ctx_1.dest="insclause-" + ctx_1.nextNum;
ctx_1.nextNum++;
qbp.setDestForClause(ctx_1.dest,(CommonTree)ast.getChild(0));
}
break;
case HiveParser.TOK_FROM:
{
int child_count=ast.getChildCount();
if (child_count != 1) throw new SemanticException("Multiple Children " + child_count);
CommonTree frm=(CommonTree)ast.getChild(0);
if (frm.getToken().getType() == HiveParser.TOK_TABREF) processTable(qb,frm);
 else if (frm.getToken().getType() == HiveParser.TOK_SUBQUERY) processSubQuery(qb,frm);
 else if (isJoinToken(frm)) {
processJoin(qb,frm);
qbp.setJoinExpr(frm);
}
}
break;
case HiveParser.TOK_CLUSTERBY:
{
qbp.setClusterByExprForClause(ctx_1.dest,ast);
}
break;
case HiveParser.TOK_DISTRIBUTEBY:
{
qbp.setDistributeByExprForClause(ctx_1.dest,ast);
if (qbp.getClusterByForClause(ctx_1.dest) != null) {
throw new SemanticException(ErrorMsg.CLUSTERBY_DISTRIBUTEBY_CONFLICT.getMsg(ast));
}
}
break;
case HiveParser.TOK_SORTBY:
{
qbp.setSortByExprForClause(ctx_1.dest,ast);
if (qbp.getClusterByForClause(ctx_1.dest) != null) {
throw new SemanticException(ErrorMsg.CLUSTERBY_SORTBY_CONFLICT.getMsg(ast));
}
}
break;
case HiveParser.TOK_GROUPBY:
{
if (qbp.getSelForClause(ctx_1.dest).getToken().getType() == HiveParser.TOK_SELECTDI) {
throw new SemanticException(ErrorMsg.SELECT_DISTINCT_WITH_GROUPBY.getMsg(ast));
}
qbp.setGroupByExprForClause(ctx_1.dest,ast);
skipRecursion=true;
}
break;
case HiveParser.TOK_LIMIT:
{
qbp.setDestLimit(ctx_1.dest,new Integer(ast.getChild(0).getText()));
}
break;
case HiveParser.TOK_UNION:
if (!qbp.getIsSubQ()) throw new SemanticException(ErrorMsg.UNION_NOTIN_SUBQ.getMsg());
default :
skipRecursion=false;
break;
}
}
if (!skipRecursion) {
int child_count=ast.getChildCount();
for (int child_pos=0; child_pos < child_count; ++child_pos) {
doPhase1((CommonTree)ast.getChild(child_pos),qb,ctx_1);
}
}
}
