{
  if (tabAlias != null && !input.hasTableAlias(tabAlias)) {
    throw new SemanticException(ErrorMsg.INVALID_TABLE_ALIAS.getMsg(sel));
  }
  Pattern regex=null;
  try {
    regex=Pattern.compile(colRegex,Pattern.CASE_INSENSITIVE);
  }
 catch (  PatternSyntaxException e) {
    throw new SemanticException(ErrorMsg.INVALID_COLUMN.getMsg(sel,e.getMessage()));
  }
  StringBuilder replacementText=new StringBuilder();
  int matched=0;
  if (!aliases.contains("")) {
    aliases.add("");
  }
  Map<ColumnInfo,ColumnInfo> inputColsProcessed=new HashMap<ColumnInfo,ColumnInfo>();
  for (  String alias : aliases) {
    HashMap<String,ColumnInfo> fMap=input.getFieldMap(alias);
    if (fMap == null) {
      continue;
    }
    for (    Map.Entry<String,ColumnInfo> entry : fMap.entrySet()) {
      ColumnInfo colInfo=entry.getValue();
      if (excludeCols != null && excludeCols.contains(colInfo)) {
        continue;
      }
      String name=colInfo.getInternalName();
      String[] tmp=input.reverseLookup(name);
      if (tabAlias != null && !tmp[0].equalsIgnoreCase(tabAlias)) {
        continue;
      }
      if (colInfo.getIsVirtualCol() && colInfo.isHiddenVirtualCol()) {
        continue;
      }
      if (!regex.matcher(tmp[1]).matches()) {
        continue;
      }
      ColumnInfo oColInfo=inputColsProcessed.get(colInfo);
      if (oColInfo == null) {
        ExprNodeColumnDesc expr=new ExprNodeColumnDesc(colInfo.getType(),name,colInfo.getTabAlias(),colInfo.getIsVirtualCol(),colInfo.isSkewedCol());
        col_list.add(expr);
        oColInfo=new ColumnInfo(getColumnInternalName(pos),colInfo.getType(),colInfo.getTabAlias(),colInfo.getIsVirtualCol(),colInfo.isHiddenVirtualCol());
        inputColsProcessed.put(colInfo,oColInfo);
      }
      output.put(tmp[0],tmp[1],oColInfo);
      pos=Integer.valueOf(pos.intValue() + 1);
      matched++;
      if (unparseTranslator.isEnabled()) {
        if (replacementText.length() > 0) {
          replacementText.append(", ");
        }
        replacementText.append(HiveUtils.unparseIdentifier(tmp[0],conf));
        replacementText.append(".");
        replacementText.append(HiveUtils.unparseIdentifier(tmp[1],conf));
      }
    }
  }
  if (matched == 0) {
    throw new SemanticException(ErrorMsg.INVALID_COLUMN.getMsg(sel));
  }
  if (unparseTranslator.isEnabled()) {
    unparseTranslator.addTranslation(sel,replacementText.toString());
  }
  return pos;
}
