{
  RowResolver groupByInputRowResolver=opParseCtx.get(inputOperatorInfo).getRowResolver();
  RowResolver groupByOutputRowResolver=new RowResolver();
  ArrayList<ExprNodeDesc> groupByKeys=new ArrayList<ExprNodeDesc>();
  ArrayList<String> outputColumnNames=new ArrayList<String>();
  ArrayList<AggregationDesc> aggregations=new ArrayList<AggregationDesc>();
  Map<String,ExprNodeDesc> colExprMap=new HashMap<String,ExprNodeDesc>();
  qb.getParseInfo();
  groupByOutputRowResolver.setIsExprResolver(true);
  for (int i=0; i < fields.size(); ++i) {
    ASTNode colName=fields.get(i);
    ExprNodeDesc grpByExprNode=genExprNodeDesc(colName,groupByInputRowResolver);
    groupByKeys.add(grpByExprNode);
    String field=getColumnInternalName(i);
    outputColumnNames.add(field);
    ColumnInfo colInfo2=new ColumnInfo(field,grpByExprNode.getTypeInfo(),"",false);
    groupByOutputRowResolver.putExpression(colName,colInfo2);
    colExprMap.put(field,grpByExprNode);
  }
  Operator op=putOpInsertMap(OperatorFactory.getAndMakeChild(new GroupByDesc(mode,outputColumnNames,groupByKeys,aggregations,false),new RowSchema(groupByOutputRowResolver.getColumnInfos()),inputOperatorInfo),groupByOutputRowResolver);
  op.setColumnExprMap(colExprMap);
  return op;
}
