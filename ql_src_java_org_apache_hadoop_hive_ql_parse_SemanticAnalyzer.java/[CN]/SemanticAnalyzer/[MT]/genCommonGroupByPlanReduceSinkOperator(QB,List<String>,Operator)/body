{
  RowResolver reduceSinkInputRowResolver=opParseCtx.get(inputOperatorInfo).getRowResolver();
  QBParseInfo parseInfo=qb.getParseInfo();
  RowResolver reduceSinkOutputRowResolver=new RowResolver();
  reduceSinkOutputRowResolver.setIsExprResolver(true);
  Map<String,ExprNodeDesc> colExprMap=new HashMap<String,ExprNodeDesc>();
  String dest=dests.get(0);
  List<String> outputKeyColumnNames=new ArrayList<String>();
  List<String> outputValueColumnNames=new ArrayList<String>();
  List<ASTNode> grpByExprs=getGroupByForClause(parseInfo,dest);
  ArrayList<ExprNodeDesc> reduceKeys=getReduceKeysForReduceSink(grpByExprs,dest,reduceSinkInputRowResolver,reduceSinkOutputRowResolver,outputKeyColumnNames,colExprMap);
  List<List<Integer>> distinctColIndices=getDistinctColIndicesForReduceSink(parseInfo,dest,reduceKeys,reduceSinkInputRowResolver,reduceSinkOutputRowResolver,outputKeyColumnNames);
  ArrayList<ExprNodeDesc> reduceValues=new ArrayList<ExprNodeDesc>();
  for (  String destination : dests) {
    getReduceValuesForReduceSinkNoMapAgg(parseInfo,dest,reduceSinkInputRowResolver,reduceSinkOutputRowResolver,outputValueColumnNames,reduceValues);
    ASTNode whereClause=parseInfo.getWhrForClause(destination);
    if (whereClause != null) {
      List<ASTNode> columnExprs=getColumnExprsFromASTNode(whereClause,reduceSinkInputRowResolver);
      for (int i=0; i < columnExprs.size(); i++) {
        ASTNode parameter=columnExprs.get(i);
        if (reduceSinkOutputRowResolver.getExpression(parameter) == null) {
          reduceValues.add(genExprNodeDesc(parameter,reduceSinkInputRowResolver));
          outputValueColumnNames.add(getColumnInternalName(reduceValues.size() - 1));
          String field=Utilities.ReduceField.VALUE.toString() + "." + getColumnInternalName(reduceValues.size() - 1);
          reduceSinkOutputRowResolver.putExpression(parameter,new ColumnInfo(field,reduceValues.get(reduceValues.size() - 1).getTypeInfo(),null,false));
        }
      }
    }
  }
  ReduceSinkOperator rsOp=(ReduceSinkOperator)putOpInsertMap(OperatorFactory.getAndMakeChild(PlanUtils.getReduceSinkDesc(reduceKeys,grpByExprs.size(),reduceValues,distinctColIndices,outputKeyColumnNames,outputValueColumnNames,true,-1,grpByExprs.size(),-1),new RowSchema(reduceSinkOutputRowResolver.getColumnInfos()),inputOperatorInfo),reduceSinkOutputRowResolver);
  rsOp.setColumnExprMap(colExprMap);
  return rsOp;
}
