{
  QBJoinTree tree=qb.getQbJoinTree();
  if (tree.getJoinSrc() == null) {
    return;
  }
  List<QBJoinTree> trees=new ArrayList<QBJoinTree>();
  for (; tree != null; tree=tree.getJoinSrc()) {
    trees.add(tree);
  }
  boolean mergedQBJTree=false;
  for (int i=trees.size() - 1; i >= 0; i--) {
    QBJoinTree target=trees.get(i);
    if (target == null) {
      continue;
    }
    JoinType prevType=null;
    boolean continueScanning=true;
    for (int j=i - 1; j >= 0 && continueScanning; j--) {
      QBJoinTree node=trees.get(j);
      if (node == null) {
        continue;
      }
      JoinType currType=getType(node.getJoinCond());
      if (prevType != null && prevType != currType) {
        break;
      }
      ObjectPair<Integer,int[]> mergeDetails=findMergePos(node,target);
      int pos=mergeDetails.getFirst();
      if (pos >= 0) {
        if (!node.getNoOuterJoin() || !target.getNoOuterJoin()) {
          if (node.getRightAliases().length + target.getRightAliases().length + 1 > 16) {
            LOG.info(ErrorMsg.JOINNODE_OUTERJOIN_MORETHAN_16);
            continueScanning=continueJoinMerge();
            continue;
          }
        }
        mergeJoins(qb,node,target,pos,mergeDetails.getSecond());
        trees.set(j,null);
        mergedQBJTree=true;
        continue;
      }
      continueScanning=continueJoinMerge();
      if (prevType == null) {
        prevType=currType;
      }
    }
  }
  if ((trees.size() > 1) && mergedQBJTree) {
    QBJoinTree curQBJTree=null;
    QBJoinTree prevQBJTree=null;
    for (int i=trees.size() - 1; i >= 0; i--) {
      curQBJTree=trees.get(i);
      if (curQBJTree != null) {
        if (prevQBJTree != null) {
          ArrayList<String> newCurLeftAliases=new ArrayList<String>();
          newCurLeftAliases.addAll(Arrays.asList(prevQBJTree.getLeftAliases()));
          newCurLeftAliases.addAll(Arrays.asList(prevQBJTree.getRightAliases()));
          curQBJTree.setLeftAliases(newCurLeftAliases.toArray(new String[newCurLeftAliases.size()]));
        }
        prevQBJTree=curQBJTree;
      }
    }
  }
  QBJoinTree current=null;
  for (int i=0; i < trees.size(); i++) {
    QBJoinTree target=trees.get(i);
    if (target == null) {
      continue;
    }
    if (current == null) {
      qb.setQbJoinTree(current=target);
    }
 else {
      current.setJoinSrc(target);
      current=target;
    }
  }
}
