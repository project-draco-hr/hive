{
switch (condn.getToken().getType()) {
case HiveParser.TOK_COLREF:
    String tblName=unescapeIdentifier(condn.getChild(0).getText().toLowerCase());
  if (isPresent(joinTree.getLeftAliases(),tblName)) {
    if (!leftAliases.contains(tblName))     leftAliases.add(tblName);
  }
 else   if (isPresent(joinTree.getRightAliases(),tblName)) {
    if (!rightAliases.contains(tblName))     rightAliases.add(tblName);
  }
 else   throw new SemanticException(ErrorMsg.INVALID_TABLE_ALIAS.getMsg(condn.getChild(0)));
break;
case HiveParser.Number:
case HiveParser.StringLiteral:
case HiveParser.TOK_CHARSETLITERAL:
case HiveParser.KW_TRUE:
case HiveParser.KW_FALSE:
break;
case HiveParser.TOK_FUNCTION:
for (int i=1; i < condn.getChildCount(); i++) parseJoinCondPopulateAlias(joinTree,(CommonTree)condn.getChild(i),leftAliases,rightAliases);
break;
default :
if (condn.getChildCount() == 1) parseJoinCondPopulateAlias(joinTree,(CommonTree)condn.getChild(0),leftAliases,rightAliases);
 else if (condn.getChildCount() == 2) {
parseJoinCondPopulateAlias(joinTree,(CommonTree)condn.getChild(0),leftAliases,rightAliases);
parseJoinCondPopulateAlias(joinTree,(CommonTree)condn.getChild(1),leftAliases,rightAliases);
}
 else throw new SemanticException(condn.toStringTree() + " encountered with " + condn.getChildCount()+ " children");
break;
}
}
