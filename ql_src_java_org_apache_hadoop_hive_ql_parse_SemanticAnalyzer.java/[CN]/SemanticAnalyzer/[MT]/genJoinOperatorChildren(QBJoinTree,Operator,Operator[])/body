{
  RowResolver outputRS=new RowResolver();
  ArrayList<String> outputColumnNames=new ArrayList<String>();
  Operator<?>[] rightOps=new Operator[right.length];
  int pos=0;
  int outputPos=0;
  HashMap<Byte,List<exprNodeDesc>> exprMap=new HashMap<Byte,List<exprNodeDesc>>();
  Map<String,exprNodeDesc> colExprMap=new HashMap<String,exprNodeDesc>();
  HashMap<Integer,Set<String>> posToAliasMap=new HashMap<Integer,Set<String>>();
  for (  Operator input : right) {
    ArrayList<exprNodeDesc> keyDesc=new ArrayList<exprNodeDesc>();
    if (input == null)     input=left;
    Byte tag=Byte.valueOf((byte)(((reduceSinkDesc)(input.getConf())).getTag()));
    RowResolver inputRS=opParseCtx.get(input).getRR();
    Iterator<String> keysIter=inputRS.getTableNames().iterator();
    Set<String> aliases=posToAliasMap.get(pos);
    if (aliases == null) {
      aliases=new HashSet<String>();
      posToAliasMap.put(pos,aliases);
    }
    while (keysIter.hasNext()) {
      String key=keysIter.next();
      aliases.add(key);
      HashMap<String,ColumnInfo> map=inputRS.getFieldMap(key);
      Iterator<String> fNamesIter=map.keySet().iterator();
      while (fNamesIter.hasNext()) {
        String field=fNamesIter.next();
        ColumnInfo valueInfo=inputRS.get(key,field);
        keyDesc.add(new exprNodeColumnDesc(valueInfo.getType(),valueInfo.getInternalName()));
        if (outputRS.get(key,field) == null) {
          String colName=getColumnInternalName(outputPos);
          outputPos++;
          outputColumnNames.add(colName);
          colExprMap.put(colName,keyDesc.get(keyDesc.size() - 1));
          outputRS.put(key,field,new ColumnInfo(colName,valueInfo.getType()));
        }
      }
    }
    exprMap.put(tag,keyDesc);
    rightOps[pos++]=input;
  }
  org.apache.hadoop.hive.ql.plan.joinCond[] joinCondns=new org.apache.hadoop.hive.ql.plan.joinCond[join.getJoinCond().length];
  for (int i=0; i < join.getJoinCond().length; i++) {
    joinCond condn=join.getJoinCond()[i];
    joinCondns[i]=new org.apache.hadoop.hive.ql.plan.joinCond(condn);
  }
  JoinOperator joinOp=(JoinOperator)OperatorFactory.getAndMakeChild(new joinDesc(exprMap,outputColumnNames,joinCondns),new RowSchema(outputRS.getColumnInfos()),rightOps);
  joinOp.setColumnExprMap(colExprMap);
  joinOp.setPosToAliasMap(posToAliasMap);
  return putOpInsertMap(joinOp,outputRS);
}
