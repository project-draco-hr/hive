{
  RowResolver groupByInputRowResolver2=opParseCtx.get(reduceSinkOperatorInfo2).getRowResolver();
  RowResolver groupByOutputRowResolver2=new RowResolver();
  groupByOutputRowResolver2.setIsExprResolver(true);
  ArrayList<ExprNodeDesc> groupByKeys=new ArrayList<ExprNodeDesc>();
  ArrayList<AggregationDesc> aggregations=new ArrayList<AggregationDesc>();
  Map<String,ExprNodeDesc> colExprMap=new HashMap<String,ExprNodeDesc>();
  List<ASTNode> grpByExprs=getGroupByForClause(parseInfo,dest);
  ArrayList<String> outputColumnNames=new ArrayList<String>();
  for (int i=0; i < grpByExprs.size(); ++i) {
    ASTNode grpbyExpr=grpByExprs.get(i);
    ColumnInfo exprInfo=groupByInputRowResolver2.getExpression(grpbyExpr);
    if (exprInfo == null) {
      throw new SemanticException(ErrorMsg.INVALID_COLUMN.getMsg(grpbyExpr));
    }
    String expression=exprInfo.getInternalName();
    groupByKeys.add(new ExprNodeColumnDesc(exprInfo.getType(),expression,exprInfo.getTabAlias(),exprInfo.getIsVirtualCol()));
    String field=getColumnInternalName(i);
    outputColumnNames.add(field);
    ColumnInfo oColInfo=new ColumnInfo(field,exprInfo.getType(),"",false);
    groupByOutputRowResolver2.putExpression(grpbyExpr,oColInfo);
    addAlternateGByKeyMappings(grpbyExpr,oColInfo,reduceSinkOperatorInfo2,groupByOutputRowResolver2);
    colExprMap.put(field,groupByKeys.get(groupByKeys.size() - 1));
  }
  int groupingSetsPosition=-1;
  if (groupingSetsPresent) {
    groupingSetsPosition=groupByKeys.size();
    addGroupingSetKey(groupByKeys,groupByInputRowResolver2,groupByOutputRowResolver2,outputColumnNames,colExprMap);
  }
  HashMap<String,ASTNode> aggregationTrees=parseInfo.getAggregationExprsForClause(dest);
  boolean containsDistinctAggr=false;
  for (  Map.Entry<String,ASTNode> entry : aggregationTrees.entrySet()) {
    ArrayList<ExprNodeDesc> aggParameters=new ArrayList<ExprNodeDesc>();
    ASTNode value=entry.getValue();
    ColumnInfo paraExprInfo=groupByInputRowResolver2.getExpression(value);
    if (paraExprInfo == null) {
      throw new SemanticException(ErrorMsg.INVALID_COLUMN.getMsg(value));
    }
    String paraExpression=paraExprInfo.getInternalName();
    assert(paraExpression != null);
    aggParameters.add(new ExprNodeColumnDesc(paraExprInfo.getType(),paraExpression,paraExprInfo.getTabAlias(),paraExprInfo.getIsVirtualCol()));
    String aggName=unescapeIdentifier(value.getChild(0).getText());
    boolean isDistinct=value.getType() == HiveParser.TOK_FUNCTIONDI;
    containsDistinctAggr=containsDistinctAggr || isDistinct;
    boolean isStar=value.getType() == HiveParser.TOK_FUNCTIONSTAR;
    Mode amode=groupByDescModeToUDAFMode(mode,isDistinct);
    GenericUDAFEvaluator genericUDAFEvaluator=genericUDAFEvaluators.get(entry.getKey());
    assert(genericUDAFEvaluator != null);
    GenericUDAFInfo udaf=getGenericUDAFInfo(genericUDAFEvaluator,amode,aggParameters);
    aggregations.add(new AggregationDesc(aggName.toLowerCase(),udaf.genericUDAFEvaluator,udaf.convertedParameters,(mode != GroupByDesc.Mode.FINAL && value.getToken().getType() == HiveParser.TOK_FUNCTIONDI),amode));
    String field=getColumnInternalName(groupByKeys.size() + aggregations.size() - 1);
    outputColumnNames.add(field);
    groupByOutputRowResolver2.putExpression(value,new ColumnInfo(field,udaf.returnType,"",false));
  }
  float groupByMemoryUsage=HiveConf.getFloatVar(conf,HiveConf.ConfVars.HIVEMAPAGGRHASHMEMORY);
  float memoryThreshold=HiveConf.getFloatVar(conf,HiveConf.ConfVars.HIVEMAPAGGRMEMORYTHRESHOLD);
  Operator op=putOpInsertMap(OperatorFactory.getAndMakeChild(new GroupByDesc(mode,outputColumnNames,groupByKeys,aggregations,false,groupByMemoryUsage,memoryThreshold,null,false,groupingSetsPosition,containsDistinctAggr),new RowSchema(groupByOutputRowResolver2.getColumnInfos()),reduceSinkOperatorInfo2),groupByOutputRowResolver2);
  op.setColumnExprMap(colExprMap);
  return op;
}
