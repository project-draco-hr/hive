{
  ArrayList<ExprNodeDesc> partCols=new ArrayList<ExprNodeDesc>();
  ArrayList<ExprNodeDesc> orderCols=new ArrayList<ExprNodeDesc>();
  StringBuilder order=new StringBuilder();
  for (  PartitionExpression partCol : spec.getQueryPartitionSpec().getExpressions()) {
    ExprNodeDesc partExpr=genExprNodeDesc(partCol.getExpression(),inputRR);
    partCols.add(partExpr);
    orderCols.add(partExpr);
    order.append('+');
  }
  if (spec.getQueryOrderSpec() != null) {
    for (    OrderExpression orderCol : spec.getQueryOrderSpec().getExpressions()) {
      String orderString=orderCol.getOrder().name();
      if (orderString.equals("ASC")) {
        order.append('+');
      }
 else {
        order.append('-');
      }
      orderCols.add(genExprNodeDesc(orderCol.getExpression(),inputRR));
    }
  }
  return genReduceSinkPlan(input,partCols,orderCols,order.toString(),-1,Operation.NOT_ACID);
}
