{
  ColumnInfo colInfo=input.get("",expr.toStringTree());
  if (colInfo != null) {
    return new exprNodeColumnDesc(colInfo.getType(),colInfo.getInternalName(),colInfo.getTabAlias(),colInfo.getIsPartitionCol());
  }
  TypeCheckCtx tcCtx=new TypeCheckCtx(input);
  Map<Rule,NodeProcessor> opRules=new LinkedHashMap<Rule,NodeProcessor>();
  opRules.put(new RuleRegExp("R1",HiveParser.TOK_NULL + "%"),TypeCheckProcFactory.getNullExprProcessor());
  opRules.put(new RuleRegExp("R2",HiveParser.Number + "%"),TypeCheckProcFactory.getNumExprProcessor());
  opRules.put(new RuleRegExp("R3",HiveParser.Identifier + "%|" + HiveParser.StringLiteral+ "%|"+ HiveParser.TOK_CHARSETLITERAL+ "%|"+ HiveParser.KW_IF+ "%|"+ HiveParser.KW_CASE+ "%|"+ HiveParser.KW_WHEN+ "%"),TypeCheckProcFactory.getStrExprProcessor());
  opRules.put(new RuleRegExp("R4",HiveParser.KW_TRUE + "%|" + HiveParser.KW_FALSE+ "%"),TypeCheckProcFactory.getBoolExprProcessor());
  opRules.put(new RuleRegExp("R5",HiveParser.TOK_TABLE_OR_COL + "%"),TypeCheckProcFactory.getColumnExprProcessor());
  Dispatcher disp=new DefaultRuleDispatcher(TypeCheckProcFactory.getDefaultExprProcessor(),opRules,tcCtx);
  GraphWalker ogw=new DefaultGraphWalker(disp);
  ArrayList<Node> topNodes=new ArrayList<Node>();
  topNodes.add(expr);
  HashMap<Node,Object> nodeOutputs=new HashMap<Node,Object>();
  ogw.startWalking(topNodes,nodeOutputs);
  exprNodeDesc desc=(exprNodeDesc)nodeOutputs.get(expr);
  if (desc == null) {
    throw new SemanticException(tcCtx.getError());
  }
  return desc;
}
