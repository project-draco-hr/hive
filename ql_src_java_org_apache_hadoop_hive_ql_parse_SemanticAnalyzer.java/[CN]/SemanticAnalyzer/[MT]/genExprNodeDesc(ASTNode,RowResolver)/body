{
  ColumnInfo colInfo=input.get("",expr.toStringTree());
  if (colInfo != null) {
    return new ExprNodeColumnDesc(colInfo.getType(),colInfo.getInternalName(),colInfo.getTabAlias(),colInfo.getIsPartitionCol());
  }
  TypeCheckCtx tcCtx=new TypeCheckCtx(input);
  tcCtx.setUnparseTranslator(unparseTranslator);
  Map<Rule,NodeProcessor> opRules=new LinkedHashMap<Rule,NodeProcessor>();
  opRules.put(new RuleRegExp("R1",HiveParser.TOK_NULL + "%"),TypeCheckProcFactory.getNullExprProcessor());
  opRules.put(new RuleRegExp("R2",HiveParser.Number + "%"),TypeCheckProcFactory.getNumExprProcessor());
  opRules.put(new RuleRegExp("R3",HiveParser.Identifier + "%|" + HiveParser.StringLiteral+ "%|"+ HiveParser.TOK_CHARSETLITERAL+ "%|"+ HiveParser.KW_IF+ "%|"+ HiveParser.KW_CASE+ "%|"+ HiveParser.KW_WHEN+ "%"),TypeCheckProcFactory.getStrExprProcessor());
  opRules.put(new RuleRegExp("R4",HiveParser.KW_TRUE + "%|" + HiveParser.KW_FALSE+ "%"),TypeCheckProcFactory.getBoolExprProcessor());
  opRules.put(new RuleRegExp("R5",HiveParser.TOK_TABLE_OR_COL + "%"),TypeCheckProcFactory.getColumnExprProcessor());
  Dispatcher disp=new DefaultRuleDispatcher(TypeCheckProcFactory.getDefaultExprProcessor(),opRules,tcCtx);
  GraphWalker ogw=new DefaultGraphWalker(disp);
  ArrayList<Node> topNodes=new ArrayList<Node>();
  topNodes.add(expr);
  HashMap<Node,Object> nodeOutputs=new HashMap<Node,Object>();
  ogw.startWalking(topNodes,nodeOutputs);
  ExprNodeDesc desc=(ExprNodeDesc)nodeOutputs.get(expr);
  if (desc == null) {
    throw new SemanticException(tcCtx.getError());
  }
  if (!unparseTranslator.isEnabled()) {
    return desc;
  }
  for (  Map.Entry<Node,Object> entry : nodeOutputs.entrySet()) {
    if (!(entry.getKey() instanceof ASTNode)) {
      continue;
    }
    if (!(entry.getValue() instanceof ExprNodeColumnDesc)) {
      continue;
    }
    ASTNode node=(ASTNode)entry.getKey();
    ExprNodeColumnDesc columnDesc=(ExprNodeColumnDesc)entry.getValue();
    if ((columnDesc.getTabAlias() == null) || (columnDesc.getTabAlias().length() == 0)) {
      continue;
    }
    String[] tmp=input.reverseLookup(columnDesc.getColumn());
    StringBuilder replacementText=new StringBuilder();
    replacementText.append(HiveUtils.unparseIdentifier(tmp[0]));
    replacementText.append(".");
    replacementText.append(HiveUtils.unparseIdentifier(tmp[1]));
    unparseTranslator.addTranslation(node,replacementText.toString());
  }
  return desc;
}
