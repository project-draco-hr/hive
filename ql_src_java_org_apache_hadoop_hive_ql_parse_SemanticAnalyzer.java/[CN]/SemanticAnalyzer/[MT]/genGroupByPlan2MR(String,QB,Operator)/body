{
  QBParseInfo parseInfo=qb.getParseInfo();
  Operator reduceSinkOperatorInfo=genGroupByPlanReduceSinkOperator(qb,dest,input,(parseInfo.getDistinctFuncExprsForClause(dest).isEmpty() ? -1 : Integer.MAX_VALUE),-1,false);
  Map<String,GenericUDAFEvaluator> genericUDAFEvaluators=new LinkedHashMap<String,GenericUDAFEvaluator>();
  GroupByOperator groupByOperatorInfo=(GroupByOperator)genGroupByPlanGroupByOperator(parseInfo,dest,reduceSinkOperatorInfo,GroupByDesc.Mode.PARTIAL1,genericUDAFEvaluators);
  int numReducers=-1;
  List<ASTNode> grpByExprs=getGroupByForClause(parseInfo,dest);
  if (grpByExprs.isEmpty()) {
    numReducers=1;
  }
  Operator reduceSinkOperatorInfo2=genGroupByPlanReduceSinkOperator2MR(parseInfo,dest,groupByOperatorInfo,grpByExprs.size(),numReducers);
  Operator groupByOperatorInfo2=genGroupByPlanGroupByOperator2MR(parseInfo,dest,reduceSinkOperatorInfo2,GroupByDesc.Mode.FINAL,genericUDAFEvaluators);
  return groupByOperatorInfo2;
}
