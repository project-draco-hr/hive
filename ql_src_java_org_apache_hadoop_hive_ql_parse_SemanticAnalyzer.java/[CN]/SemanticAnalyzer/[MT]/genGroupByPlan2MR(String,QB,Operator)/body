{
  QBParseInfo parseInfo=qb.getParseInfo();
  ObjectPair<List<ASTNode>,List<Integer>> grpByExprsGroupingSets=getGroupByGroupingSetsForClause(parseInfo,dest);
  List<ASTNode> grpByExprs=grpByExprsGroupingSets.getFirst();
  List<Integer> groupingSets=grpByExprsGroupingSets.getSecond();
  if (!groupingSets.isEmpty()) {
    throw new SemanticException(ErrorMsg.HIVE_GROUPING_SETS_AGGR_NOMAPAGGR.getMsg());
  }
  Operator reduceSinkOperatorInfo=genGroupByPlanReduceSinkOperator(qb,dest,input,grpByExprs,(parseInfo.getDistinctFuncExprsForClause(dest).isEmpty() ? -1 : Integer.MAX_VALUE),false,-1,false,false);
  Map<String,GenericUDAFEvaluator> genericUDAFEvaluators=new LinkedHashMap<String,GenericUDAFEvaluator>();
  GroupByOperator groupByOperatorInfo=(GroupByOperator)genGroupByPlanGroupByOperator(parseInfo,dest,reduceSinkOperatorInfo,GroupByDesc.Mode.PARTIAL1,genericUDAFEvaluators);
  int numReducers=-1;
  if (grpByExprs.isEmpty()) {
    numReducers=1;
  }
  Operator reduceSinkOperatorInfo2=genGroupByPlanReduceSinkOperator2MR(parseInfo,dest,groupByOperatorInfo,grpByExprs.size(),numReducers,false);
  Operator groupByOperatorInfo2=genGroupByPlanGroupByOperator2MR(parseInfo,dest,reduceSinkOperatorInfo2,GroupByDesc.Mode.FINAL,genericUDAFEvaluators,false);
  return groupByOperatorInfo2;
}
