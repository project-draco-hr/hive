{
  RowResolver inputRR=opParseCtx.get(input).getRowResolver();
  QBParseInfo qbp=qb.getParseInfo();
  TreeSet<String> ks=new TreeSet<String>();
  ks.addAll(qbp.getClauseNames());
  if (ks.size() <= 1) {
    return null;
  }
  List<ExprNodeDesc.ExprNodeDescEqualityWrapper> oldList=null;
  List<ASTNode> oldASTList=null;
  for (  String dest : ks) {
    if (!qbp.getDestCubes().isEmpty() || !qbp.getDestRollups().isEmpty()) {
      return null;
    }
    if (qbp.getWhrForClause(dest) != null) {
      return null;
    }
    if (qbp.getAggregationExprsForClause(dest).size() == 0 && getGroupByForClause(qbp,dest).size() == 0) {
      return null;
    }
    List<ASTNode> list=qbp.getDistinctFuncExprsForClause(dest);
    if (list.isEmpty()) {
      return null;
    }
    List<ExprNodeDesc.ExprNodeDescEqualityWrapper> currDestList;
    try {
      currDestList=getDistinctExprs(qbp,dest,inputRR);
    }
 catch (    SemanticException e) {
      return null;
    }
    List<ASTNode> currASTList=new ArrayList<ASTNode>();
    for (    ASTNode value : list) {
      for (int i=1; i < value.getChildCount(); i++) {
        ASTNode parameter=(ASTNode)value.getChild(i);
        currASTList.add(parameter);
      }
      if (oldList == null) {
        oldList=currDestList;
        oldASTList=currASTList;
      }
 else {
        if (!matchExprLists(oldList,currDestList)) {
          return null;
        }
      }
    }
  }
  return oldASTList;
}
