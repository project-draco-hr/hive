{
  QBParseInfo qbParseInfo=localQb.getParseInfo();
  if (localQb.getNumSelDi() == 0 && qbParseInfo.getDestToClusterBy().isEmpty() && qbParseInfo.getDestToDistributeBy().isEmpty() && qbParseInfo.getDestToOrderBy().isEmpty() && qbParseInfo.getDestToSortBy().isEmpty() && qbParseInfo.getDestToAggregationExprs().size() <= 1 && qbParseInfo.getDestToDistinctFuncExprs().size() <= 1 && qbParseInfo.getNameToSample().isEmpty()) {
    if ((qbParseInfo.getDestToAggregationExprs().size() < 1 || qbParseInfo.getDestToAggregationExprs().values().iterator().next().isEmpty()) && (qbParseInfo.getDestToDistinctFuncExprs().size() < 1 || qbParseInfo.getDestToDistinctFuncExprs().values().iterator().next().isEmpty()) && qbParseInfo.getDestToLimit().size() <= 1) {
      Integer retValue;
      if (qbParseInfo.getDestToLimit().size() == 0) {
        retValue=0;
      }
 else {
        retValue=qbParseInfo.getDestToLimit().values().iterator().next().intValue();
      }
      for (      String alias : localQb.getSubqAliases()) {
        Integer limit=checkQbpForGlobalLimit(localQb.getSubqForAlias(alias).getQB());
        if (limit == null) {
          return null;
        }
 else         if (retValue > 0 && limit > 0) {
          return null;
        }
 else         if (limit > 0) {
          retValue=limit;
        }
      }
      return retValue;
    }
  }
  return null;
}
