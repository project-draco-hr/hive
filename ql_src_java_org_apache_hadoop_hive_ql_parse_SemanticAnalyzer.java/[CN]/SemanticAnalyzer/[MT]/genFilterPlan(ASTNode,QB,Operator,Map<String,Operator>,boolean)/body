{
  OpParseContext inputCtx=opParseCtx.get(input);
  RowResolver inputRR=inputCtx.getRowResolver();
  List<ASTNode> subQueriesInOriginalTree=SubQueryUtils.findSubQueries(searchCond);
  if (subQueriesInOriginalTree.size() > 0) {
    if (qb.getSubQueryPredicateDef() != null) {
      throw new SemanticException(ErrorMsg.UNSUPPORTED_SUBQUERY_EXPRESSION.getMsg(subQueriesInOriginalTree.get(0),"Nested SubQuery expressions are not supported."));
    }
    if (subQueriesInOriginalTree.size() > 1) {
      throw new SemanticException(ErrorMsg.UNSUPPORTED_SUBQUERY_EXPRESSION.getMsg(subQueriesInOriginalTree.get(1),"Only 1 SubQuery expression is supported."));
    }
    ASTNode clonedSearchCond=(ASTNode)ParseDriver.adaptor.dupTree(searchCond);
    List<ASTNode> subQueries=SubQueryUtils.findSubQueries(clonedSearchCond);
    for (int i=0; i < subQueries.size(); i++) {
      ASTNode subQueryAST=subQueries.get(i);
      ASTNode originalSubQueryAST=subQueriesInOriginalTree.get(i);
      int sqIdx=qb.incrNumSubQueryPredicates();
      clonedSearchCond=SubQueryUtils.rewriteParentQueryWhere(clonedSearchCond,subQueryAST);
      QBSubQuery subQuery=SubQueryUtils.buildSubQuery(qb.getId(),sqIdx,subQueryAST,originalSubQueryAST,ctx);
      String havingInputAlias=null;
      if (forHavingClause) {
        havingInputAlias="gby_sq" + sqIdx;
        aliasToOpInfo.put(havingInputAlias,input);
      }
      subQuery.validateAndRewriteAST(inputRR,forHavingClause,havingInputAlias);
      QB qbSQ=new QB(subQuery.getOuterQueryId(),subQuery.getAlias(),true);
      Operator sqPlanTopOp=genPlanForSubQueryPredicate(qbSQ,subQuery);
      aliasToOpInfo.put(subQuery.getAlias(),sqPlanTopOp);
      RowResolver sqRR=opParseCtx.get(sqPlanTopOp).getRowResolver();
      if (subQuery.getOperator().getType() != SubQueryType.EXISTS && subQuery.getOperator().getType() != SubQueryType.NOT_EXISTS && sqRR.getColumnInfos().size() - subQuery.getNumOfCorrelationExprsAddedToSQSelect() > 1) {
        throw new SemanticException(ErrorMsg.INVALID_SUBQUERY_EXPRESSION.getMsg(subQueryAST,"SubQuery can contain only 1 item in Select List."));
      }
      if (subQuery.getNotInCheck() != null) {
        QBSubQuery.NotInCheck notInCheck=subQuery.getNotInCheck();
        notInCheck.setSQRR(sqRR);
        QB qbSQ_nic=new QB(subQuery.getOuterQueryId(),notInCheck.getAlias(),true);
        Operator sqnicPlanTopOp=genPlanForSubQueryPredicate(qbSQ_nic,notInCheck);
        aliasToOpInfo.put(notInCheck.getAlias(),sqnicPlanTopOp);
        QBJoinTree joinTree_nic=genSQJoinTree(qb,notInCheck,input,aliasToOpInfo);
        pushJoinFilters(qb,joinTree_nic,aliasToOpInfo,false);
        input=genJoinOperator(qbSQ_nic,joinTree_nic,aliasToOpInfo,input);
        inputRR=opParseCtx.get(input).getRowResolver();
        if (forHavingClause) {
          aliasToOpInfo.put(havingInputAlias,input);
        }
      }
      subQuery.buildJoinCondition(inputRR,sqRR,forHavingClause,havingInputAlias);
      QBJoinTree joinTree=genSQJoinTree(qb,subQuery,input,aliasToOpInfo);
      pushJoinFilters(qb,joinTree,aliasToOpInfo,false);
      input=genJoinOperator(qbSQ,joinTree,aliasToOpInfo,input);
      searchCond=subQuery.updateOuterQueryFilter(clonedSearchCond);
    }
  }
  return genFilterPlan(qb,searchCond,input);
}
