{
  int childCount=selectExpr.getChildCount();
  ASTNode windowSpec=(ASTNode)selectExpr.getChild(childCount - 1);
  boolean hasWindowSpec=windowSpec.getType() == HiveParser.TOK_WINDOWSPEC;
  ArrayList<ASTNode> functions=extractWindowingUDAFs((ASTNode)selectExpr.getChild(0),!hasWindowSpec);
  if (functions.size() == 0) {
    return false;
  }
  WindowingSpec spec=qb.getWindowingSpec(dest);
  if (spec == null) {
    queryProperties.setHasWindowing(true);
    spec=new WindowingSpec();
    qb.addDestToWindowingSpec(dest,spec);
  }
  HashMap<String,ASTNode> wExprsInDest=qb.getParseInfo().getWindowingExprsForClause(dest);
  int wColIdx=spec.getWindowExpressions() == null ? 0 : spec.getWindowExpressions().size();
  for (  ASTNode function : functions) {
    WindowFunctionSpec wFnSpec=processWindowFunction(function,hasWindowSpec ? windowSpec : null);
    if (wExprsInDest != null && wExprsInDest.containsKey(wFnSpec.getExpression().toStringTree())) {
      continue;
    }
    wFnSpec.setAlias("_wcol" + wColIdx++);
    spec.addWindowFunction(wFnSpec);
    qb.getParseInfo().addWindowingExprToClause(dest,wFnSpec.getExpression());
  }
  return true;
}
