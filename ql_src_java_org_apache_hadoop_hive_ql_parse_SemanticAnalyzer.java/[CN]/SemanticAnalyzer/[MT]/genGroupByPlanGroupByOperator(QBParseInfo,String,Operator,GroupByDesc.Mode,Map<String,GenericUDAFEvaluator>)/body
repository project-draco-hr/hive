{
  RowResolver groupByInputRowResolver=opParseCtx.get(reduceSinkOperatorInfo).getRR();
  RowResolver groupByOutputRowResolver=new RowResolver();
  groupByOutputRowResolver.setIsExprResolver(true);
  ArrayList<ExprNodeDesc> groupByKeys=new ArrayList<ExprNodeDesc>();
  ArrayList<AggregationDesc> aggregations=new ArrayList<AggregationDesc>();
  ArrayList<String> outputColumnNames=new ArrayList<String>();
  Map<String,ExprNodeDesc> colExprMap=new HashMap<String,ExprNodeDesc>();
  List<ASTNode> grpByExprs=getGroupByForClause(parseInfo,dest);
  for (int i=0; i < grpByExprs.size(); ++i) {
    ASTNode grpbyExpr=grpByExprs.get(i);
    String text=grpbyExpr.toStringTree();
    ColumnInfo exprInfo=groupByInputRowResolver.get("",text);
    if (exprInfo == null) {
      throw new SemanticException(ErrorMsg.INVALID_COLUMN.getMsg(grpbyExpr));
    }
    groupByKeys.add(new ExprNodeColumnDesc(exprInfo.getType(),exprInfo.getInternalName(),"",false));
    String field=getColumnInternalName(i);
    outputColumnNames.add(field);
    groupByOutputRowResolver.put("",grpbyExpr.toStringTree(),new ColumnInfo(field,exprInfo.getType(),null,false));
    colExprMap.put(field,groupByKeys.get(groupByKeys.size() - 1));
  }
  HashMap<String,ASTNode> aggregationTrees=parseInfo.getAggregationExprsForClause(dest);
  assert(aggregationTrees != null);
  for (  Map.Entry<String,ASTNode> entry : aggregationTrees.entrySet()) {
    ASTNode value=entry.getValue();
    String aggName=value.getChild(0).getText();
    ArrayList<ExprNodeDesc> aggParameters=new ArrayList<ExprNodeDesc>();
    for (int i=1; i < value.getChildCount(); i++) {
      String text=value.getChild(i).toStringTree();
      ASTNode paraExpr=(ASTNode)value.getChild(i);
      ColumnInfo paraExprInfo=groupByInputRowResolver.get("",text);
      if (paraExprInfo == null) {
        throw new SemanticException(ErrorMsg.INVALID_COLUMN.getMsg(paraExpr));
      }
      String paraExpression=paraExprInfo.getInternalName();
      assert(paraExpression != null);
      aggParameters.add(new ExprNodeColumnDesc(paraExprInfo.getType(),paraExprInfo.getInternalName(),paraExprInfo.getTabAlias(),paraExprInfo.getIsPartitionCol()));
    }
    boolean isDistinct=value.getType() == HiveParser.TOK_FUNCTIONDI;
    Mode amode=groupByDescModeToUDAFMode(mode,isDistinct);
    GenericUDAFEvaluator genericUDAFEvaluator=getGenericUDAFEvaluator(aggName,aggParameters,value);
    assert(genericUDAFEvaluator != null);
    GenericUDAFInfo udaf=getGenericUDAFInfo(genericUDAFEvaluator,amode,aggParameters);
    aggregations.add(new AggregationDesc(aggName.toLowerCase(),udaf.genericUDAFEvaluator,udaf.convertedParameters,isDistinct,amode));
    String field=getColumnInternalName(groupByKeys.size() + aggregations.size() - 1);
    outputColumnNames.add(field);
    groupByOutputRowResolver.put("",value.toStringTree(),new ColumnInfo(field,udaf.returnType,"",false));
    if (genericUDAFEvaluators != null) {
      genericUDAFEvaluators.put(entry.getKey(),genericUDAFEvaluator);
    }
  }
  Operator op=putOpInsertMap(OperatorFactory.getAndMakeChild(new GroupByDesc(mode,outputColumnNames,groupByKeys,aggregations,false),new RowSchema(groupByOutputRowResolver.getColumnInfos()),reduceSinkOperatorInfo),groupByOutputRowResolver);
  op.setColumnExprMap(colExprMap);
  return op;
}
