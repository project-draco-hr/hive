{
  tcCtx.setUnparseTranslator(unparseTranslator);
  Map<ASTNode,ExprNodeDesc> nodeOutputs=TypeCheckProcFactory.genExprNode(expr,tcCtx);
  ExprNodeDesc desc=nodeOutputs.get(expr);
  if (desc == null) {
    String errMsg=tcCtx.getError();
    if (errMsg == null) {
      errMsg="Error in parsing ";
    }
    throw new SemanticException(errMsg);
  }
  if (desc instanceof ExprNodeColumnListDesc) {
    throw new SemanticException("TOK_ALLCOLREF is not supported in current context");
  }
  if (!unparseTranslator.isEnabled()) {
    return nodeOutputs;
  }
  Map<ExprNodeDesc,String> nodeToText=new HashMap<>();
  List<Entry<ASTNode,ExprNodeDesc>> fieldDescList=new ArrayList<>();
  for (  Map.Entry<ASTNode,ExprNodeDesc> entry : nodeOutputs.entrySet()) {
    if (!(entry.getValue() instanceof ExprNodeColumnDesc)) {
      if (entry.getValue() instanceof ExprNodeFieldDesc) {
        fieldDescList.add(entry);
      }
      continue;
    }
    ASTNode node=entry.getKey();
    ExprNodeColumnDesc columnDesc=(ExprNodeColumnDesc)entry.getValue();
    if ((columnDesc.getTabAlias() == null) || (columnDesc.getTabAlias().length() == 0)) {
      continue;
    }
    String[] tmp=input.reverseLookup(columnDesc.getColumn());
    StringBuilder replacementText=new StringBuilder();
    replacementText.append(HiveUtils.unparseIdentifier(tmp[0],conf));
    replacementText.append(".");
    replacementText.append(HiveUtils.unparseIdentifier(tmp[1],conf));
    nodeToText.put(columnDesc,replacementText.toString());
    unparseTranslator.addTranslation(node,replacementText.toString());
  }
  if (fieldDescList.size() != 0) {
    Collections.sort(fieldDescList,new Comparator<Map.Entry<ASTNode,ExprNodeDesc>>(){
      @Override public int compare(      Entry<ASTNode,ExprNodeDesc> o1,      Entry<ASTNode,ExprNodeDesc> o2){
        ExprNodeFieldDesc fieldDescO1=(ExprNodeFieldDesc)o1.getValue();
        ExprNodeFieldDesc fieldDescO2=(ExprNodeFieldDesc)o2.getValue();
        return fieldDescO1.toString().length() < fieldDescO2.toString().length() ? -1 : 1;
      }
    }
);
    for (    Map.Entry<ASTNode,ExprNodeDesc> entry : fieldDescList) {
      ASTNode node=entry.getKey();
      ExprNodeFieldDesc fieldDesc=(ExprNodeFieldDesc)entry.getValue();
      ExprNodeDesc exprNodeDesc=fieldDesc.getDesc();
      String fieldName=fieldDesc.getFieldName();
      StringBuilder replacementText=new StringBuilder();
      replacementText.append(nodeToText.get(exprNodeDesc));
      replacementText.append(".");
      replacementText.append(HiveUtils.unparseIdentifier(fieldName,conf));
      nodeToText.put(fieldDesc,replacementText.toString());
      unparseTranslator.addTranslation(node,replacementText.toString());
    }
  }
  return nodeOutputs;
}
