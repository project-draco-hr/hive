{
  tcCtx.setUnparseTranslator(unparseTranslator);
  Map<ASTNode,ExprNodeDesc> nodeOutputs=TypeCheckProcFactory.genExprNode(expr,tcCtx);
  ExprNodeDesc desc=nodeOutputs.get(expr);
  if (desc == null) {
    String errMsg=tcCtx.getError();
    if (errMsg == null) {
      errMsg="Error in parsing ";
    }
    throw new SemanticException(errMsg);
  }
  if (desc instanceof ExprNodeColumnListDesc) {
    throw new SemanticException("TOK_ALLCOLREF is not supported in current context");
  }
  if (!unparseTranslator.isEnabled()) {
    return nodeOutputs;
  }
  Map<ExprNodeDesc,String> nodeToText=new HashMap<>();
  List<ASTNode> fieldDescList=new ArrayList<>();
  for (  Map.Entry<ASTNode,ExprNodeDesc> entry : nodeOutputs.entrySet()) {
    if (!(entry.getValue() instanceof ExprNodeColumnDesc)) {
      if (entry.getValue() instanceof ExprNodeFieldDesc) {
        fieldDescList.add(entry.getKey());
      }
      continue;
    }
    ASTNode node=entry.getKey();
    ExprNodeColumnDesc columnDesc=(ExprNodeColumnDesc)entry.getValue();
    if ((columnDesc.getTabAlias() == null) || (columnDesc.getTabAlias().length() == 0)) {
      continue;
    }
    String[] tmp=input.reverseLookup(columnDesc.getColumn());
    StringBuilder replacementText=new StringBuilder();
    replacementText.append(HiveUtils.unparseIdentifier(tmp[0],conf));
    replacementText.append(".");
    replacementText.append(HiveUtils.unparseIdentifier(tmp[1],conf));
    nodeToText.put(columnDesc,replacementText.toString());
    unparseTranslator.addTranslation(node,replacementText.toString());
  }
  for (  ASTNode node : fieldDescList) {
    Map<ASTNode,String> map=translateFieldDesc(node);
    for (    Entry<ASTNode,String> entry : map.entrySet()) {
      unparseTranslator.addTranslation(entry.getKey(),entry.getValue());
    }
  }
  return nodeOutputs;
}
