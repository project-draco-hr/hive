{
  exprNodeDesc numeratorExpr=new exprNodeConstantDesc(TypeInfoFactory.getPrimitiveTypeInfo(Integer.class),Integer.valueOf(ts.getNumerator() - 1));
  exprNodeDesc denominatorExpr=new exprNodeConstantDesc(TypeInfoFactory.getPrimitiveTypeInfo(Integer.class),Integer.valueOf(ts.getDenominator()));
  exprNodeDesc intMaxExpr=new exprNodeConstantDesc(TypeInfoFactory.getPrimitiveTypeInfo(Integer.class),Integer.valueOf(Integer.MAX_VALUE));
  ArrayList<exprNodeDesc> args=new ArrayList<exprNodeDesc>();
  if (useBucketCols) {
    for (    String col : bucketCols) {
      ColumnInfo ci=rwsch.get(alias,col);
      args.add(new exprNodeColumnDesc(ci.getType().getPrimitiveClass(),col));
    }
  }
 else {
    for (    CommonTree expr : ts.getExprs()) {
      args.add(genExprNodeDesc(qbm,expr,rwsch));
    }
  }
  exprNodeDesc hashfnExpr=getFuncExprNodeDesc("default_sample_hashfn",args);
  assert(hashfnExpr != null);
  LOG.info("hashfnExpr = " + hashfnExpr);
  exprNodeDesc andExpr=getFuncExprNodeDesc("&",hashfnExpr,intMaxExpr);
  assert(andExpr != null);
  LOG.info("andExpr = " + andExpr);
  exprNodeDesc modExpr=getFuncExprNodeDesc("%",andExpr,denominatorExpr);
  assert(modExpr != null);
  LOG.info("modExpr = " + modExpr);
  LOG.info("numeratorExpr = " + numeratorExpr);
  exprNodeDesc equalsExpr=getFuncExprNodeDesc("==",modExpr,numeratorExpr);
  LOG.info("equalsExpr = " + equalsExpr);
  assert(equalsExpr != null);
  return equalsExpr;
}
