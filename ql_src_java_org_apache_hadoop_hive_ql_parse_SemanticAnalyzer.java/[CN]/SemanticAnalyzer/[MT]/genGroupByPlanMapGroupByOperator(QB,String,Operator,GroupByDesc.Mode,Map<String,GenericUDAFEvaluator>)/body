{
  RowResolver groupByInputRowResolver=opParseCtx.get(inputOperatorInfo).getRowResolver();
  QBParseInfo parseInfo=qb.getParseInfo();
  RowResolver groupByOutputRowResolver=new RowResolver();
  groupByOutputRowResolver.setIsExprResolver(true);
  ArrayList<ExprNodeDesc> groupByKeys=new ArrayList<ExprNodeDesc>();
  ArrayList<String> outputColumnNames=new ArrayList<String>();
  ArrayList<AggregationDesc> aggregations=new ArrayList<AggregationDesc>();
  Map<String,ExprNodeDesc> colExprMap=new HashMap<String,ExprNodeDesc>();
  List<ASTNode> grpByExprs=getGroupByForClause(parseInfo,dest);
  for (int i=0; i < grpByExprs.size(); ++i) {
    ASTNode grpbyExpr=grpByExprs.get(i);
    ExprNodeDesc grpByExprNode=genExprNodeDesc(grpbyExpr,groupByInputRowResolver);
    groupByKeys.add(grpByExprNode);
    String field=getColumnInternalName(i);
    outputColumnNames.add(field);
    groupByOutputRowResolver.putExpression(grpbyExpr,new ColumnInfo(field,grpByExprNode.getTypeInfo(),"",false));
    colExprMap.put(field,groupByKeys.get(groupByKeys.size() - 1));
  }
  if (!parseInfo.getDistinctFuncExprsForClause(dest).isEmpty()) {
    List<ASTNode> list=parseInfo.getDistinctFuncExprsForClause(dest);
    int numDistn=0;
    for (    ASTNode value : list) {
      for (int i=1; i < value.getChildCount(); i++) {
        ASTNode parameter=(ASTNode)value.getChild(i);
        if (groupByOutputRowResolver.getExpression(parameter) == null) {
          ExprNodeDesc distExprNode=genExprNodeDesc(parameter,groupByInputRowResolver);
          groupByKeys.add(distExprNode);
          numDistn++;
          String field=getColumnInternalName(grpByExprs.size() + numDistn - 1);
          outputColumnNames.add(field);
          groupByOutputRowResolver.putExpression(parameter,new ColumnInfo(field,distExprNode.getTypeInfo(),"",false));
          colExprMap.put(field,groupByKeys.get(groupByKeys.size() - 1));
        }
      }
    }
  }
  HashMap<String,ASTNode> aggregationTrees=parseInfo.getAggregationExprsForClause(dest);
  assert(aggregationTrees != null);
  for (  Map.Entry<String,ASTNode> entry : aggregationTrees.entrySet()) {
    ASTNode value=entry.getValue();
    String aggName=unescapeIdentifier(value.getChild(0).getText());
    ArrayList<ExprNodeDesc> aggParameters=new ArrayList<ExprNodeDesc>();
    new ArrayList<Class<?>>();
    for (int i=1; i < value.getChildCount(); i++) {
      ASTNode paraExpr=(ASTNode)value.getChild(i);
      ExprNodeDesc paraExprNode=genExprNodeDesc(paraExpr,groupByInputRowResolver);
      aggParameters.add(paraExprNode);
    }
    boolean isDistinct=value.getType() == HiveParser.TOK_FUNCTIONDI;
    boolean isAllColumns=value.getType() == HiveParser.TOK_FUNCTIONSTAR;
    Mode amode=groupByDescModeToUDAFMode(mode,isDistinct);
    GenericUDAFEvaluator genericUDAFEvaluator=getGenericUDAFEvaluator(aggName,aggParameters,value,isDistinct,isAllColumns);
    assert(genericUDAFEvaluator != null);
    GenericUDAFInfo udaf=getGenericUDAFInfo(genericUDAFEvaluator,amode,aggParameters);
    aggregations.add(new AggregationDesc(aggName.toLowerCase(),udaf.genericUDAFEvaluator,udaf.convertedParameters,isDistinct,amode));
    String field=getColumnInternalName(groupByKeys.size() + aggregations.size() - 1);
    outputColumnNames.add(field);
    groupByOutputRowResolver.putExpression(value,new ColumnInfo(field,udaf.returnType,"",false));
    if (genericUDAFEvaluators != null) {
      genericUDAFEvaluators.put(entry.getKey(),genericUDAFEvaluator);
    }
  }
  Operator op=putOpInsertMap(OperatorFactory.getAndMakeChild(new GroupByDesc(mode,outputColumnNames,groupByKeys,aggregations,false),new RowSchema(groupByOutputRowResolver.getColumnInfos()),inputOperatorInfo),groupByOutputRowResolver);
  op.setColumnExprMap(colExprMap);
  return op;
}
