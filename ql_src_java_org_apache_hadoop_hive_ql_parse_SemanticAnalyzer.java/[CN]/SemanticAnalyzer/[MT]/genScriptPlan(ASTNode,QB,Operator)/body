{
  ArrayList<String> outputColList=new ArrayList<String>();
  boolean defaultOutputColList=(trfm.getChildCount() < 3);
  if (defaultOutputColList) {
    outputColList.add("key");
    outputColList.add("value");
  }
 else {
    ASTNode collist=(ASTNode)trfm.getChild(2);
    int ccount=collist.getChildCount();
    for (int i=0; i < ccount; ++i) {
      outputColList.add(unescapeIdentifier(((ASTNode)collist.getChild(i)).getText()));
    }
  }
  RowResolver out_rwsch=new RowResolver();
  StringBuilder columns=new StringBuilder();
  for (int i=0; i < outputColList.size(); ++i) {
    if (i != 0) {
      columns.append(",");
    }
    columns.append(outputColList.get(i));
    out_rwsch.put(qb.getParseInfo().getAlias(),outputColList.get(i),new ColumnInfo(outputColList.get(i),String.class));
  }
  Operator output=putOpInsertMap(OperatorFactory.getAndMakeChild(new scriptDesc(getFixedCmd(stripQuotes(trfm.getChild(1).getText())),PlanUtils.getDefaultTableDesc(Integer.toString(Utilities.tabCode),columns.toString(),defaultOutputColList),PlanUtils.getDefaultTableDesc(Integer.toString(Utilities.tabCode),"")),new RowSchema(out_rwsch.getColumnInfos()),input),out_rwsch);
  return output;
}
