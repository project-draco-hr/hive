{
  LOG.debug("validation start");
  for (  ReadEntity readEntity : getInputs()) {
    ReadEntity.Type type=readEntity.getType();
    if (type != ReadEntity.Type.TABLE && type != ReadEntity.Type.PARTITION) {
      continue;
    }
    Table tbl=readEntity.getTable();
    Partition p=readEntity.getPartition();
    if (p != null) {
      tbl=p.getTable();
    }
    if (tbl != null && AcidUtils.isAcidTable(tbl)) {
      checkAcidTxnManager(tbl);
    }
  }
  for (  WriteEntity writeEntity : getOutputs()) {
    WriteEntity.Type type=writeEntity.getType();
    if (type == WriteEntity.Type.PARTITION || type == WriteEntity.Type.DUMMYPARTITION) {
      String conflictingArchive;
      try {
        Partition usedp=writeEntity.getPartition();
        Table tbl=usedp.getTable();
        LOG.debug("validated " + usedp.getName());
        LOG.debug(usedp.getTable().getTableName());
        conflictingArchive=ArchiveUtils.conflictingArchiveNameOrNull(db,tbl,usedp.getSpec());
      }
 catch (      HiveException e) {
        throw new SemanticException(e);
      }
      if (conflictingArchive != null) {
        String message=String.format("Insert conflict with existing archive: %s",conflictingArchive);
        throw new SemanticException(message);
      }
    }
    if (type != WriteEntity.Type.TABLE && type != WriteEntity.Type.PARTITION) {
      LOG.debug("not validating writeEntity, because entity is neither table nor partition");
      continue;
    }
    Table tbl;
    Partition p;
    if (type == WriteEntity.Type.PARTITION) {
      Partition inputPartition=writeEntity.getPartition();
      try {
        p=Hive.get().getPartition(inputPartition.getTable(),inputPartition.getSpec(),false);
        if (p != null) {
          tbl=p.getTable();
        }
 else {
          tbl=inputPartition.getTable();
        }
      }
 catch (      HiveException e) {
        throw new SemanticException(e);
      }
    }
 else {
      LOG.debug("Not a partition.");
      tbl=writeEntity.getTable();
    }
    if (tbl != null && AcidUtils.isAcidTable(tbl)) {
      checkAcidTxnManager(tbl);
    }
  }
  boolean reworkMapredWork=HiveConf.getBoolVar(this.conf,HiveConf.ConfVars.HIVE_REWORK_MAPREDWORK);
  for (  Task<? extends Serializable> rootTask : rootTasks) {
    validate(rootTask,reworkMapredWork);
  }
}
