{
  Operator dummy=Operator.createDummy();
  dummy.setParentOperators(Arrays.asList(child));
  RowResolver inputRR=opParseCtx.get(child).getRowResolver();
  RowResolver outputRR=new RowResolver();
  ArrayList<String> outputColumns=new ArrayList<String>();
  ArrayList<ExprNodeDesc> reduceKeys=new ArrayList<ExprNodeDesc>();
  ArrayList<ExprNodeDesc> reduceKeysBack=new ArrayList<ExprNodeDesc>();
  for (  ExprNodeDesc joinKey : joinKeys) {
    reduceKeys.add(joinKey);
    reduceKeysBack.add(ExprNodeDescUtils.backtrack(joinKey,dummy,child));
  }
  ArrayList<ExprNodeDesc> reduceValues=new ArrayList<ExprNodeDesc>();
  ArrayList<ExprNodeDesc> reduceValuesBack=new ArrayList<ExprNodeDesc>();
  Map<String,ExprNodeDesc> colExprMap=new HashMap<String,ExprNodeDesc>();
  List<ColumnInfo> columns=inputRR.getColumnInfos();
  int[] index=new int[columns.size()];
  for (int i=0; i < columns.size(); i++) {
    ColumnInfo colInfo=columns.get(i);
    String[] nm=inputRR.reverseLookup(colInfo.getInternalName());
    String[] nm2=inputRR.getAlternateMappings(colInfo.getInternalName());
    ExprNodeDesc expr=new ExprNodeColumnDesc(colInfo.getType(),colInfo.getInternalName(),colInfo.getTabAlias(),colInfo.getIsVirtualCol());
    ExprNodeDesc exprBack=ExprNodeDescUtils.backtrack(expr,dummy,child);
    int kindex=exprBack == null ? -1 : ExprNodeDescUtils.indexOf(exprBack,reduceKeysBack);
    if (kindex >= 0) {
      ColumnInfo newColInfo=new ColumnInfo(colInfo);
      newColInfo.setInternalName(Utilities.ReduceField.KEY + ".reducesinkkey" + kindex);
      newColInfo.setTabAlias(nm[0]);
      outputRR.addMappingOnly(nm[0],nm[1],newColInfo);
      if (nm2 != null) {
        outputRR.addMappingOnly(nm2[0],nm2[1],newColInfo);
      }
      index[i]=kindex;
      continue;
    }
    int vindex=exprBack == null ? -1 : ExprNodeDescUtils.indexOf(exprBack,reduceValuesBack);
    if (kindex >= 0) {
      index[i]=-vindex - 1;
      continue;
    }
    index[i]=-reduceValues.size() - 1;
    String outputColName=getColumnInternalName(reduceValues.size());
    reduceValues.add(expr);
    reduceValuesBack.add(exprBack);
    ColumnInfo newColInfo=new ColumnInfo(colInfo);
    newColInfo.setInternalName(Utilities.ReduceField.VALUE + "." + outputColName);
    newColInfo.setTabAlias(nm[0]);
    outputRR.put(nm[0],nm[1],newColInfo);
    if (nm2 != null) {
      outputRR.addMappingOnly(nm2[0],nm2[1],newColInfo);
    }
    outputColumns.add(outputColName);
  }
  dummy.setParentOperators(null);
  int numReds=-1;
  if (reduceKeys.size() == 0) {
    numReds=1;
    if (conf.getVar(HiveConf.ConfVars.HIVEMAPREDMODE).equalsIgnoreCase("strict")) {
      throw new SemanticException(ErrorMsg.NO_CARTESIAN_PRODUCT.getMsg());
    }
  }
  ReduceSinkDesc rsDesc=PlanUtils.getReduceSinkDesc(reduceKeys,reduceValues,outputColumns,false,tag,reduceKeys.size(),numReds,AcidUtils.Operation.NOT_ACID);
  ReduceSinkOperator rsOp=(ReduceSinkOperator)putOpInsertMap(OperatorFactory.getAndMakeChild(rsDesc,new RowSchema(outputRR.getColumnInfos()),child),outputRR);
  List<String> keyColNames=rsDesc.getOutputKeyColumnNames();
  for (int i=0; i < keyColNames.size(); i++) {
    colExprMap.put(Utilities.ReduceField.KEY + "." + keyColNames.get(i),reduceKeys.get(i));
  }
  List<String> valColNames=rsDesc.getOutputValueColumnNames();
  for (int i=0; i < valColNames.size(); i++) {
    colExprMap.put(Utilities.ReduceField.VALUE + "." + valColNames.get(i),reduceValues.get(i));
  }
  rsOp.setValueIndex(index);
  rsOp.setColumnExprMap(colExprMap);
  rsOp.setInputAliases(srcs);
  return rsOp;
}
