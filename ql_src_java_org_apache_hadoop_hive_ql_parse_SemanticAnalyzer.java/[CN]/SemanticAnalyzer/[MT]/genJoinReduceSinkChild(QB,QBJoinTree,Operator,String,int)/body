{
  RowResolver inputRS=opParseCtx.get(child).getRR();
  RowResolver outputRS=new RowResolver();
  ArrayList<exprNodeDesc> reduceKeys=new ArrayList<exprNodeDesc>();
  Vector<ASTNode> exprs=joinTree.getExpressions().get(pos);
  for (int i=0; i < exprs.size(); i++) {
    ASTNode expr=exprs.get(i);
    reduceKeys.add(genExprNodeDesc(expr,inputRS));
  }
  ArrayList<exprNodeDesc> reduceValues=new ArrayList<exprNodeDesc>();
  Iterator<String> tblNamesIter=inputRS.getTableNames().iterator();
  Map<String,exprNodeDesc> colExprMap=new HashMap<String,exprNodeDesc>();
  while (tblNamesIter.hasNext()) {
    String src=tblNamesIter.next();
    HashMap<String,ColumnInfo> fMap=inputRS.getFieldMap(src);
    for (    Map.Entry<String,ColumnInfo> entry : fMap.entrySet()) {
      String field=entry.getKey();
      ColumnInfo valueInfo=entry.getValue();
      exprNodeColumnDesc inputExpr=new exprNodeColumnDesc(valueInfo.getType(),valueInfo.getInternalName());
      reduceValues.add(inputExpr);
      if (outputRS.get(src,field) == null) {
        ColumnInfo newColInfo=new ColumnInfo(Utilities.ReduceField.VALUE.toString() + "." + Integer.valueOf(reduceValues.size() - 1).toString(),valueInfo.getType());
        colExprMap.put(newColInfo.getInternalName(),inputExpr);
        outputRS.put(src,field,newColInfo);
      }
    }
  }
  ReduceSinkOperator rsOp=(ReduceSinkOperator)putOpInsertMap(OperatorFactory.getAndMakeChild(PlanUtils.getReduceSinkDesc(reduceKeys,reduceValues,joinTree.getNextTag(),reduceKeys.size(),-1),new RowSchema(outputRS.getColumnInfos()),child),outputRS);
  rsOp.setColumnExprMap(colExprMap);
  return rsOp;
}
