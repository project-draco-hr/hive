{
  List<FieldSchema> derivedSchema=new ArrayList<FieldSchema>(resultSchema);
  ParseUtils.validateColumnNameUniqueness(derivedSchema);
  List<FieldSchema> imposedSchema=createVwDesc.getSchema();
  if (imposedSchema != null) {
    int explicitColCount=imposedSchema.size();
    int derivedColCount=derivedSchema.size();
    if (explicitColCount != derivedColCount) {
      throw new SemanticException(generateErrorMessage(viewSelect,ErrorMsg.VIEW_COL_MISMATCH.getMsg()));
    }
  }
  String originalText=ctx.getTokenRewriteStream().toString(viewSelect.getTokenStartIndex(),viewSelect.getTokenStopIndex());
  createVwDesc.setViewOriginalText(originalText);
  unparseTranslator.applyTranslations(ctx.getTokenRewriteStream());
  String expandedText=ctx.getTokenRewriteStream().toString(viewSelect.getTokenStartIndex(),viewSelect.getTokenStopIndex());
  if (imposedSchema != null) {
    StringBuilder sb=new StringBuilder();
    sb.append("SELECT ");
    int n=derivedSchema.size();
    for (int i=0; i < n; ++i) {
      if (i > 0) {
        sb.append(", ");
      }
      FieldSchema fieldSchema=derivedSchema.get(i);
      fieldSchema=new FieldSchema(fieldSchema);
      derivedSchema.set(i,fieldSchema);
      sb.append(HiveUtils.unparseIdentifier(fieldSchema.getName()));
      sb.append(" AS ");
      String imposedName=imposedSchema.get(i).getName();
      sb.append(HiveUtils.unparseIdentifier(imposedName));
      fieldSchema.setName(imposedName);
      fieldSchema.setComment(imposedSchema.get(i).getComment());
    }
    sb.append(" FROM (");
    sb.append(expandedText);
    sb.append(") ");
    sb.append(HiveUtils.unparseIdentifier(createVwDesc.getViewName()));
    expandedText=sb.toString();
  }
  if (createVwDesc.getPartColNames() != null) {
    List<String> partColNames=createVwDesc.getPartColNames();
    if (partColNames.size() > derivedSchema.size()) {
      throw new SemanticException(ErrorMsg.VIEW_PARTITION_MISMATCH.getMsg());
    }
    List<FieldSchema> partitionColumns=derivedSchema.subList(derivedSchema.size() - partColNames.size(),derivedSchema.size());
    Iterator<String> colNameIter=partColNames.iterator();
    Iterator<FieldSchema> schemaIter=partitionColumns.iterator();
    while (colNameIter.hasNext()) {
      String colName=colNameIter.next();
      FieldSchema fieldSchema=schemaIter.next();
      if (!fieldSchema.getName().equals(colName)) {
        throw new SemanticException(ErrorMsg.VIEW_PARTITION_MISMATCH.getMsg());
      }
    }
    if (partColNames.size() == derivedSchema.size()) {
      throw new SemanticException(ErrorMsg.VIEW_PARTITION_TOTAL.getMsg());
    }
    createVwDesc.setPartCols(new ArrayList<FieldSchema>(partitionColumns));
    partitionColumns.clear();
  }
  createVwDesc.setSchema(derivedSchema);
  createVwDesc.setViewExpandedText(expandedText);
}
