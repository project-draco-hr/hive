{
  List<List<Integer>> distinctColIndices=new ArrayList<List<Integer>>();
  if (!parseInfo.getDistinctFuncExprsForClause(dest).isEmpty()) {
    List<ASTNode> distFuncs=parseInfo.getDistinctFuncExprsForClause(dest);
    String colName=getColumnInternalName(reduceKeys.size());
    outputKeyColumnNames.add(colName);
    for (int i=0; i < distFuncs.size(); i++) {
      ASTNode value=distFuncs.get(i);
      int numExprs=0;
      List<Integer> distinctIndices=new ArrayList<Integer>();
      for (int j=1; j < value.getChildCount(); j++) {
        ASTNode parameter=(ASTNode)value.getChild(j);
        ExprNodeDesc expr=genExprNodeDesc(parameter,reduceSinkInputRowResolver);
        int ri;
        for (ri=0; ri < reduceKeys.size(); ri++) {
          if (reduceKeys.get(ri).getExprString().equals(expr.getExprString())) {
            break;
          }
        }
        if (ri == reduceKeys.size()) {
          reduceKeys.add(expr);
        }
        distinctIndices.add(ri);
        String name=getColumnInternalName(numExprs);
        String field=Utilities.ReduceField.KEY.toString() + "." + colName+ ":"+ i+ "."+ name;
        ColumnInfo colInfo=new ColumnInfo(field,expr.getTypeInfo(),null,false);
        reduceSinkOutputRowResolver.putExpression(parameter,colInfo);
        numExprs++;
        colExprMap.put(colInfo.getInternalName(),expr);
      }
      distinctColIndices.add(distinctIndices);
    }
  }
  return distinctColIndices;
}
