{
switch (predicate.getType()) {
case HiveParser.KW_AND:
    extractJoinCondsFromWhereClause(joinTree,qb,dest,(ASTNode)predicate.getChild(0));
  extractJoinCondsFromWhereClause(joinTree,qb,dest,(ASTNode)predicate.getChild(1));
break;
case HiveParser.EQUAL_NS:
case HiveParser.EQUAL:
ASTNode leftCondn=(ASTNode)predicate.getChild(0);
ArrayList<String> leftCondAl1=new ArrayList<String>();
ArrayList<String> leftCondAl2=new ArrayList<String>();
try {
parseJoinCondPopulateAlias(joinTree,leftCondn,leftCondAl1,leftCondAl2,null);
}
 catch (SemanticException se) {
return;
}
ASTNode rightCondn=(ASTNode)predicate.getChild(1);
ArrayList<String> rightCondAl1=new ArrayList<String>();
ArrayList<String> rightCondAl2=new ArrayList<String>();
try {
parseJoinCondPopulateAlias(joinTree,rightCondn,rightCondAl1,rightCondAl2,null);
}
 catch (SemanticException se) {
return;
}
if (((leftCondAl1.size() != 0) && (leftCondAl2.size() != 0)) || ((rightCondAl1.size() != 0) && (rightCondAl2.size() != 0))) {
return;
}
if (((leftCondAl1.size() == 0) && (leftCondAl2.size() == 0)) || ((rightCondAl1.size() == 0) && (rightCondAl2.size() == 0))) {
return;
}
List<String> leftSrc=new ArrayList<String>();
JoinCond cond=joinTree.getJoinCond()[0];
JoinType type=cond.getJoinType();
applyEqualityPredicateToQBJoinTree(joinTree,type,leftSrc,predicate,leftCondn,rightCondn,leftCondAl1,leftCondAl2,rightCondAl1,rightCondAl2);
if (leftSrc.size() == 1) {
joinTree.setLeftAlias(leftSrc.get(0));
}
break;
default :
return;
}
}
