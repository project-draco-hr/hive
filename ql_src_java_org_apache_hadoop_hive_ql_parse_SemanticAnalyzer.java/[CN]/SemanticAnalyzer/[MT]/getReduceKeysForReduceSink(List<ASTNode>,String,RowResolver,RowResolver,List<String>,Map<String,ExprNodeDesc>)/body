{
  ArrayList<ExprNodeDesc> reduceKeys=new ArrayList<ExprNodeDesc>();
  for (int i=0; i < grpByExprs.size(); ++i) {
    ASTNode grpbyExpr=grpByExprs.get(i);
    ExprNodeDesc inputExpr=genExprNodeDesc(grpbyExpr,reduceSinkInputRowResolver);
    reduceKeys.add(inputExpr);
    if (reduceSinkOutputRowResolver.getExpression(grpbyExpr) == null) {
      outputKeyColumnNames.add(getColumnInternalName(reduceKeys.size() - 1));
      String field=Utilities.ReduceField.KEY.toString() + "." + getColumnInternalName(reduceKeys.size() - 1);
      ColumnInfo colInfo=new ColumnInfo(field,reduceKeys.get(reduceKeys.size() - 1).getTypeInfo(),null,false);
      reduceSinkOutputRowResolver.putExpression(grpbyExpr,colInfo);
      colExprMap.put(colInfo.getInternalName(),inputExpr);
    }
 else {
      throw new SemanticException(ErrorMsg.DUPLICATE_GROUPBY_KEY.getMsg(grpbyExpr));
    }
  }
  return reduceKeys;
}
