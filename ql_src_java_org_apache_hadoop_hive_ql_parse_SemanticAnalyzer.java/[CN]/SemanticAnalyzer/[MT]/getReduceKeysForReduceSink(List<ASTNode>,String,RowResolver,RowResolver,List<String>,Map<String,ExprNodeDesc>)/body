{
  ArrayList<ExprNodeDesc> reduceKeys=new ArrayList<ExprNodeDesc>();
  for (int i=0; i < grpByExprs.size(); ++i) {
    ASTNode grpbyExpr=grpByExprs.get(i);
    ExprNodeDesc inputExpr=genExprNodeDesc(grpbyExpr,reduceSinkInputRowResolver);
    ColumnInfo prev=reduceSinkOutputRowResolver.getExpression(grpbyExpr);
    if (prev != null && isDeterministic(inputExpr)) {
      colExprMap.put(prev.getInternalName(),inputExpr);
      continue;
    }
    reduceKeys.add(inputExpr);
    outputKeyColumnNames.add(getColumnInternalName(reduceKeys.size() - 1));
    String field=Utilities.ReduceField.KEY.toString() + "." + getColumnInternalName(reduceKeys.size() - 1);
    ColumnInfo colInfo=new ColumnInfo(field,reduceKeys.get(reduceKeys.size() - 1).getTypeInfo(),null,false);
    reduceSinkOutputRowResolver.putExpression(grpbyExpr,colInfo);
    colExprMap.put(colInfo.getInternalName(),inputExpr);
  }
  return reduceKeys;
}
