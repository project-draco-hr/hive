{
  RowResolver groupByInputRowResolver2=opParseCtx.get(reduceSinkOperatorInfo2).getRR();
  RowResolver groupByOutputRowResolver2=new RowResolver();
  groupByOutputRowResolver2.setIsExprResolver(true);
  ArrayList<ExprNodeDesc> groupByKeys=new ArrayList<ExprNodeDesc>();
  ArrayList<AggregationDesc> aggregations=new ArrayList<AggregationDesc>();
  Map<String,ExprNodeDesc> colExprMap=new HashMap<String,ExprNodeDesc>();
  List<ASTNode> grpByExprs=getGroupByForClause(parseInfo,dest);
  ArrayList<String> outputColumnNames=new ArrayList<String>();
  for (int i=0; i < grpByExprs.size(); ++i) {
    ASTNode grpbyExpr=grpByExprs.get(i);
    String text=grpbyExpr.toStringTree();
    ColumnInfo exprInfo=groupByInputRowResolver2.get("",text);
    if (exprInfo == null) {
      throw new SemanticException(ErrorMsg.INVALID_COLUMN.getMsg(grpbyExpr));
    }
    String expression=exprInfo.getInternalName();
    groupByKeys.add(new ExprNodeColumnDesc(exprInfo.getType(),expression,exprInfo.getTabAlias(),exprInfo.getIsPartitionCol()));
    String field=getColumnInternalName(i);
    outputColumnNames.add(field);
    groupByOutputRowResolver2.put("",grpbyExpr.toStringTree(),new ColumnInfo(field,exprInfo.getType(),"",false));
    colExprMap.put(field,groupByKeys.get(groupByKeys.size() - 1));
  }
  HashMap<String,ASTNode> aggregationTrees=parseInfo.getAggregationExprsForClause(dest);
  for (  Map.Entry<String,ASTNode> entry : aggregationTrees.entrySet()) {
    ArrayList<ExprNodeDesc> aggParameters=new ArrayList<ExprNodeDesc>();
    ASTNode value=entry.getValue();
    String text=entry.getKey();
    ColumnInfo paraExprInfo=groupByInputRowResolver2.get("",text);
    if (paraExprInfo == null) {
      throw new SemanticException(ErrorMsg.INVALID_COLUMN.getMsg(value));
    }
    String paraExpression=paraExprInfo.getInternalName();
    assert(paraExpression != null);
    aggParameters.add(new ExprNodeColumnDesc(paraExprInfo.getType(),paraExpression,paraExprInfo.getTabAlias(),paraExprInfo.getIsPartitionCol()));
    String aggName=value.getChild(0).getText();
    boolean isDistinct=value.getType() == HiveParser.TOK_FUNCTIONDI;
    Mode amode=groupByDescModeToUDAFMode(mode,isDistinct);
    GenericUDAFEvaluator genericUDAFEvaluator=genericUDAFEvaluators.get(entry.getKey());
    assert(genericUDAFEvaluator != null);
    GenericUDAFInfo udaf=getGenericUDAFInfo(genericUDAFEvaluator,amode,aggParameters);
    aggregations.add(new AggregationDesc(aggName.toLowerCase(),udaf.genericUDAFEvaluator,udaf.convertedParameters,(mode != GroupByDesc.Mode.FINAL && value.getToken().getType() == HiveParser.TOK_FUNCTIONDI),amode));
    String field=getColumnInternalName(groupByKeys.size() + aggregations.size() - 1);
    outputColumnNames.add(field);
    groupByOutputRowResolver2.put("",value.toStringTree(),new ColumnInfo(field,udaf.returnType,"",false));
  }
  Operator op=putOpInsertMap(OperatorFactory.getAndMakeChild(new GroupByDesc(mode,outputColumnNames,groupByKeys,aggregations,false),new RowSchema(groupByOutputRowResolver2.getColumnInfos()),reduceSinkOperatorInfo2),groupByOutputRowResolver2);
  op.setColumnExprMap(colExprMap);
  return op;
}
