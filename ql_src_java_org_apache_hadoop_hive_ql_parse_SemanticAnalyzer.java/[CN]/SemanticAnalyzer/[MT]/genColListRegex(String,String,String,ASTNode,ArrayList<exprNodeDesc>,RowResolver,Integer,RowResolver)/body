{
  if (tabAlias != null && !input.hasTableAlias(tabAlias))   throw new SemanticException(ErrorMsg.INVALID_TABLE_ALIAS.getMsg(sel));
  Pattern regex=null;
  try {
    regex=Pattern.compile(colRegex,Pattern.CASE_INSENSITIVE);
  }
 catch (  PatternSyntaxException e) {
    throw new SemanticException(ErrorMsg.INVALID_COLUMN.getMsg(sel,e.getMessage()));
  }
  StringBuilder replacementText=new StringBuilder();
  int matched=0;
  for (  ColumnInfo colInfo : input.getColumnInfos()) {
    String name=colInfo.getInternalName();
    String[] tmp=input.reverseLookup(name);
    if (tabAlias != null && !tmp[0].equalsIgnoreCase(tabAlias)) {
      continue;
    }
    if (!regex.matcher(tmp[1]).matches()) {
      continue;
    }
    exprNodeColumnDesc expr=new exprNodeColumnDesc(colInfo.getType(),name,colInfo.getTabAlias(),colInfo.getIsPartitionCol());
    col_list.add(expr);
    output.put(tmp[0],tmp[1],new ColumnInfo(getColumnInternalName(pos),colInfo.getType(),colInfo.getTabAlias(),colInfo.getIsPartitionCol()));
    pos=Integer.valueOf(pos.intValue() + 1);
    matched++;
    if (unparseTranslator.isEnabled()) {
      if (replacementText.length() > 0) {
        replacementText.append(", ");
      }
      replacementText.append(HiveUtils.unparseIdentifier(tmp[0]));
      replacementText.append(".");
      replacementText.append(HiveUtils.unparseIdentifier(tmp[1]));
    }
  }
  if (matched == 0) {
    throw new SemanticException(ErrorMsg.INVALID_COLUMN.getMsg(sel));
  }
  if (unparseTranslator.isEnabled()) {
    unparseTranslator.addTranslation(sel,replacementText.toString());
  }
  return pos;
}
