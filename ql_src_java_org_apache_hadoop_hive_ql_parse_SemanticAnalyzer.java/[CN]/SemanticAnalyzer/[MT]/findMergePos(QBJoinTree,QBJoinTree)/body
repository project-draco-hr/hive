{
  int res=-1;
  String leftAlias=node.getLeftAlias();
  ArrayList<ASTNode> nodeCondn=node.getExpressions().get(0);
  ArrayList<ASTNode> targetCondn=null;
  if (leftAlias == null || leftAlias.equals(target.getLeftAlias())) {
    targetCondn=target.getExpressions().get(0);
    res=0;
  }
 else {
    for (int i=0; i < target.getRightAliases().length; i++) {
      if (leftAlias.equals(target.getRightAliases()[i])) {
        targetCondn=target.getExpressions().get(i + 1);
        res=i + 1;
        break;
      }
    }
  }
  if (targetCondn == null || (nodeCondn.size() != targetCondn.size())) {
    return new ObjectPair(-1,null);
  }
  int[] tgtToNodeExprMap=new int[targetCondn.size()];
  boolean[] nodeFiltersMapped=new boolean[nodeCondn.size()];
  int i, j;
  for (i=0; i < targetCondn.size(); i++) {
    String tgtExprTree=targetCondn.get(i).toStringTree();
    tgtToNodeExprMap[i]=-1;
    for (j=0; j < nodeCondn.size(); j++) {
      if (nodeCondn.get(j).toStringTree().equals(tgtExprTree)) {
        tgtToNodeExprMap[i]=j;
        nodeFiltersMapped[j]=true;
      }
    }
    if (tgtToNodeExprMap[i] == -1) {
      return new ObjectPair(-1,null);
    }
  }
  for (j=0; j < nodeCondn.size(); j++) {
    if (!nodeFiltersMapped[j]) {
      return new ObjectPair(-1,null);
    }
  }
  return new ObjectPair(res,tgtToNodeExprMap);
}
