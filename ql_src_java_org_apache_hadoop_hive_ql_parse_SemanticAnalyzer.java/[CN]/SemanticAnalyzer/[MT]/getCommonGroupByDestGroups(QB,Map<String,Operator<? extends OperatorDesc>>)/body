{
  QBParseInfo qbp=qb.getParseInfo();
  TreeSet<String> ks=new TreeSet<String>();
  ks.addAll(qbp.getClauseNames());
  List<List<String>> commonGroupByDestGroups=new ArrayList<List<String>>();
  if (ks.size() <= 1) {
    List<String> oneList=new ArrayList<String>(1);
    if (ks.size() == 1) {
      oneList.add(ks.first());
    }
    commonGroupByDestGroups.add(oneList);
    return commonGroupByDestGroups;
  }
  List<Operator<? extends OperatorDesc>> inputOperators=new ArrayList<Operator<? extends OperatorDesc>>(ks.size());
  List<List<ExprNodeDesc>> sprayKeyLists=new ArrayList<List<ExprNodeDesc>>(ks.size());
  List<List<ExprNodeDesc>> distinctKeyLists=new ArrayList<List<ExprNodeDesc>>(ks.size());
  for (  String dest : ks) {
    Operator input=inputs.get(dest);
    RowResolver inputRR=opParseCtx.get(input).getRowResolver();
    List<ExprNodeDesc> distinctKeys=getDistinctExprs(qbp,dest,inputRR);
    List<ExprNodeDesc> sprayKeys=new ArrayList<ExprNodeDesc>();
    List<ASTNode> grpByExprs=getGroupByForClause(qbp,dest);
    for (    ASTNode grpByExpr : grpByExprs) {
      ExprNodeDesc exprDesc=genExprNodeDesc(grpByExpr,inputRR);
      if (ExprNodeDescUtils.indexOf(exprDesc,sprayKeys) < 0) {
        sprayKeys.add(exprDesc);
      }
    }
    boolean found=false;
    for (int i=0; i < sprayKeyLists.size(); i++) {
      if (!input.equals(inputOperators.get(i))) {
        continue;
      }
      if (distinctKeys.isEmpty()) {
        List<ExprNodeDesc> combinedList=new ArrayList<ExprNodeDesc>();
        combineExprNodeLists(sprayKeyLists.get(i),distinctKeyLists.get(i),combinedList);
        if (!matchExprLists(combinedList,sprayKeys)) {
          continue;
        }
      }
 else {
        if (distinctKeyLists.get(i).isEmpty()) {
          List<ExprNodeDesc> combinedList=new ArrayList<ExprNodeDesc>();
          combineExprNodeLists(sprayKeys,distinctKeys,combinedList);
          if (!matchExprLists(combinedList,sprayKeyLists.get(i))) {
            continue;
          }
 else {
            distinctKeyLists.remove(i);
            sprayKeyLists.remove(i);
            distinctKeyLists.add(i,distinctKeys);
            sprayKeyLists.add(i,sprayKeys);
            commonGroupByDestGroups.get(i).add(0,dest);
            found=true;
            break;
          }
        }
 else {
          if (!matchExprLists(distinctKeyLists.get(i),distinctKeys)) {
            continue;
          }
          if (!matchExprLists(sprayKeyLists.get(i),sprayKeys)) {
            continue;
          }
        }
      }
      commonGroupByDestGroups.get(i).add(dest);
      found=true;
      break;
    }
    if (!found) {
      inputOperators.add(input);
      sprayKeyLists.add(sprayKeys);
      distinctKeyLists.add(distinctKeys);
      List<String> destGroup=new ArrayList<String>();
      destGroup.add(dest);
      commonGroupByDestGroups.add(destGroup);
    }
  }
  return commonGroupByDestGroups;
}
