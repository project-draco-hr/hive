{
  ASTNode child=ast;
  this.ast=ast;
  viewsExpanded=new ArrayList<String>();
  ctesExpanded=new ArrayList<String>();
  LOG.info("Starting Semantic Analysis");
  processPositionAlias(ast);
  if (ast.getToken().getType() == HiveParser.TOK_CREATETABLE) {
    if ((child=analyzeCreateTable(ast,qb)) == null) {
      return;
    }
  }
 else {
    SessionState.get().setCommandType(HiveOperation.QUERY);
  }
  if (ast.getToken().getType() == HiveParser.TOK_CREATEVIEW || ast.getToken().getType() == HiveParser.TOK_ALTERVIEW_AS) {
    child=analyzeCreateView(ast,qb);
    SessionState.get().setCommandType(HiveOperation.CREATEVIEW);
    if (child == null) {
      return;
    }
    viewSelect=child;
    viewsExpanded.add(SessionState.get().getCurrentDatabase() + "." + createVwDesc.getViewName());
  }
  Phase1Ctx ctx_1=initPhase1Ctx();
  if (!doPhase1(child,qb,ctx_1)) {
    return;
  }
  LOG.info("Completed phase 1 of Semantic Analysis");
  getMetaData(qb);
  LOG.info("Completed getting MetaData in Semantic Analysis");
  Operator sinkOp=genPlan(qb);
  if (createVwDesc != null)   resultSchema=convertRowSchemaToViewSchema(opParseCtx.get(sinkOp).getRowResolver());
 else   resultSchema=convertRowSchemaToResultSetSchema(opParseCtx.get(sinkOp).getRowResolver(),HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_RESULTSET_USE_UNIQUE_COLUMN_NAMES));
  ParseContext pCtx=new ParseContext(conf,qb,child,opToPartPruner,opToPartList,topOps,topSelOps,opParseCtx,joinContext,smbMapJoinContext,topToTable,topToTableProps,fsopToTable,loadTableWork,loadFileWork,ctx,idToTableNameMap,destTableId,uCtx,listMapJoinOpsNoReducer,groupOpToInputTables,prunedPartitions,opToSamplePruner,globalLimitCtx,nameToSplitSample,inputs,rootTasks,opToPartToSkewedPruner,viewAliasToInput,reduceSinkOperatorsAddedByEnforceBucketingSorting,queryProperties);
  if (createVwDesc != null) {
    saveViewDefinition();
    validateCreateView(createVwDesc);
    ctx.setResDir(null);
    ctx.setResFile(null);
    try {
      PlanUtils.addInputsForView(pCtx);
    }
 catch (    HiveException e) {
      throw new SemanticException(e);
    }
    return;
  }
  if (HiveConf.getBoolVar(this.conf,HiveConf.ConfVars.HIVE_STATS_COLLECT_TABLEKEYS) == true) {
    TableAccessAnalyzer tableAccessAnalyzer=new TableAccessAnalyzer(pCtx);
    setTableAccessInfo(tableAccessAnalyzer.analyzeTableAccess());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Before logical optimization\n" + Operator.toString(pCtx.getTopOps().values()));
  }
  Optimizer optm=new Optimizer();
  optm.setPctx(pCtx);
  optm.initialize(conf);
  pCtx=optm.optimize();
  FetchTask origFetchTask=pCtx.getFetchTask();
  if (LOG.isDebugEnabled()) {
    LOG.debug("After logical optimization\n" + Operator.toString(pCtx.getTopOps().values()));
  }
  if (HiveConf.getBoolVar(this.conf,HiveConf.ConfVars.HIVE_STATS_COLLECT_SCANCOLS) == true) {
    ColumnAccessAnalyzer columnAccessAnalyzer=new ColumnAccessAnalyzer(pCtx);
    setColumnAccessInfo(columnAccessAnalyzer.analyzeColumnAccess());
  }
  if (!ctx.getExplainLogical()) {
    TaskCompiler compiler=TaskCompilerFactory.getCompiler(conf,pCtx);
    compiler.init(conf,console,db);
    compiler.compile(pCtx,rootTasks,inputs,outputs);
    fetchTask=pCtx.getFetchTask();
  }
  LOG.info("Completed plan generation");
  if (!ctx.getExplain()) {
    enforceScanLimits(pCtx,origFetchTask);
  }
  return;
}
