{
  ArrayList<ArrayList<exprNodeDesc>> keys=new ArrayList<ArrayList<exprNodeDesc>>();
  int keyLength=0;
  for (int i=0; i < right.length; i++) {
    Operator oi=(i == 0 && right[i] == null ? left : right[i]);
    reduceSinkDesc now=((ReduceSinkOperator)(oi)).getConf();
    if (i == 0) {
      keyLength=now.getKeyCols().size();
    }
 else {
      assert(keyLength == now.getKeyCols().size());
    }
    keys.add(now.getKeyCols());
  }
  for (int k=0; k < keyLength; k++) {
    Class<?> commonClass=keys.get(0).get(k).getTypeInfo().getPrimitiveClass();
    for (int i=1; i < right.length; i++) {
      Class<?> a=commonClass;
      Class<?> b=keys.get(i).get(k).getTypeInfo().getPrimitiveClass();
      commonClass=FunctionRegistry.getCommonClass(a,b);
      if (commonClass == null) {
        throw new SemanticException("Cannot do equality join on different types: " + a.getClass() + " and "+ b.getClass());
      }
    }
    for (int i=0; i < right.length; i++) {
      if (!commonClass.isAssignableFrom(keys.get(i).get(k).getTypeInfo().getPrimitiveClass())) {
        keys.get(i).set(k,getFuncExprNodeDesc(commonClass.getName(),keys.get(i).get(k)));
      }
    }
  }
  for (int i=0; i < right.length; i++) {
    Operator oi=(i == 0 && right[i] == null ? left : right[i]);
    reduceSinkDesc now=((ReduceSinkOperator)(oi)).getConf();
    now.setKeySerializeInfo(PlanUtils.getBinarySortableTableDesc(PlanUtils.getFieldSchemasFromColumnList(now.getKeyCols(),"joinkey"),now.getOrder()));
  }
}
