{
  String[] qualifiedTabName=getQualifiedTableName((ASTNode)ast.getChild(0));
  String dbDotTab=getDotName(qualifiedTabName);
  String likeTableName=null;
  List<FieldSchema> cols=new ArrayList<FieldSchema>();
  List<FieldSchema> partCols=new ArrayList<FieldSchema>();
  List<String> bucketCols=new ArrayList<String>();
  List<Order> sortCols=new ArrayList<Order>();
  int numBuckets=-1;
  String comment=null;
  String location=null;
  Map<String,String> tblProps=null;
  boolean ifNotExists=false;
  boolean isExt=false;
  boolean isTemporary=false;
  boolean isMaterialization=false;
  ASTNode selectStmt=null;
  final int CREATE_TABLE=0;
  final int CTLT=1;
  final int CTAS=2;
  int command_type=CREATE_TABLE;
  List<String> skewedColNames=new ArrayList<String>();
  List<List<String>> skewedValues=new ArrayList<List<String>>();
  Map<List<String>,String> listBucketColValuesMapping=new HashMap<List<String>,String>();
  boolean storedAsDirs=false;
  boolean isUserStorageFormat=false;
  RowFormatParams rowFormatParams=new RowFormatParams();
  StorageFormat storageFormat=new StorageFormat(conf);
  LOG.info("Creating table " + dbDotTab + " position="+ ast.getCharPositionInLine());
  int numCh=ast.getChildCount();
  for (int num=1; num < numCh; num++) {
    ASTNode child=(ASTNode)ast.getChild(num);
    if (storageFormat.fillStorageFormat(child)) {
      isUserStorageFormat=true;
      continue;
    }
switch (child.getToken().getType()) {
case HiveParser.TOK_IFNOTEXISTS:
      ifNotExists=true;
    break;
case HiveParser.KW_EXTERNAL:
  isExt=true;
break;
case HiveParser.KW_TEMPORARY:
isTemporary=true;
isMaterialization=MATERIALIZATION_MARKER.equals(child.getText());
break;
case HiveParser.TOK_LIKETABLE:
if (child.getChildCount() > 0) {
likeTableName=getUnescapedName((ASTNode)child.getChild(0));
if (likeTableName != null) {
if (command_type == CTAS) {
throw new SemanticException(ErrorMsg.CTAS_CTLT_COEXISTENCE.getMsg());
}
if (cols.size() != 0) {
throw new SemanticException(ErrorMsg.CTLT_COLLST_COEXISTENCE.getMsg());
}
}
command_type=CTLT;
}
break;
case HiveParser.TOK_QUERY:
if (command_type == CTLT) {
throw new SemanticException(ErrorMsg.CTAS_CTLT_COEXISTENCE.getMsg());
}
if (cols.size() != 0) {
throw new SemanticException(ErrorMsg.CTAS_COLLST_COEXISTENCE.getMsg());
}
if (partCols.size() != 0 || bucketCols.size() != 0) {
boolean dynPart=HiveConf.getBoolVar(conf,HiveConf.ConfVars.DYNAMICPARTITIONING);
if (dynPart == false) {
throw new SemanticException(ErrorMsg.CTAS_PARCOL_COEXISTENCE.getMsg());
}
 else {
throw new SemanticException(ErrorMsg.CTAS_PARCOL_COEXISTENCE.getMsg());
}
}
if (isExt) {
throw new SemanticException(ErrorMsg.CTAS_EXTTBL_COEXISTENCE.getMsg());
}
command_type=CTAS;
if (plannerCtx != null) {
plannerCtx.setCTASToken(child);
}
selectStmt=child;
break;
case HiveParser.TOK_TABCOLLIST:
cols=getColumns(child);
break;
case HiveParser.TOK_TABLECOMMENT:
comment=unescapeSQLString(child.getChild(0).getText());
break;
case HiveParser.TOK_TABLEPARTCOLS:
partCols=getColumns((ASTNode)child.getChild(0),false);
break;
case HiveParser.TOK_ALTERTABLE_BUCKETS:
bucketCols=getColumnNames((ASTNode)child.getChild(0));
if (child.getChildCount() == 2) {
numBuckets=Integer.parseInt(child.getChild(1).getText());
}
 else {
sortCols=getColumnNamesOrder((ASTNode)child.getChild(1));
numBuckets=Integer.parseInt(child.getChild(2).getText());
}
break;
case HiveParser.TOK_TABLEROWFORMAT:
rowFormatParams.analyzeRowFormat(child);
break;
case HiveParser.TOK_TABLELOCATION:
location=unescapeSQLString(child.getChild(0).getText());
location=EximUtil.relativeToAbsolutePath(conf,location);
inputs.add(toReadEntity(location));
break;
case HiveParser.TOK_TABLEPROPERTIES:
tblProps=DDLSemanticAnalyzer.getProps((ASTNode)child.getChild(0));
break;
case HiveParser.TOK_TABLESERIALIZER:
child=(ASTNode)child.getChild(0);
storageFormat.setSerde(unescapeSQLString(child.getChild(0).getText()));
if (child.getChildCount() == 2) {
readProps((ASTNode)(child.getChild(1).getChild(0)),storageFormat.getSerdeProps());
}
break;
case HiveParser.TOK_TABLESKEWED:
HiveConf hiveConf=SessionState.get().getConf();
skewedColNames=analyzeSkewedTablDDLColNames(skewedColNames,child);
analyzeDDLSkewedValues(skewedValues,child);
storedAsDirs=analyzeStoredAdDirs(child);
break;
default :
throw new AssertionError("Unknown token: " + child.getToken());
}
}
storageFormat.fillDefaultStorageFormat(isExt);
if ((command_type == CTAS) && (storageFormat.getStorageHandler() != null)) {
throw new SemanticException(ErrorMsg.CREATE_NON_NATIVE_AS.getMsg());
}
if (ifNotExists) {
try {
Table table=getTable(qualifiedTabName,false);
if (table != null) {
return null;
}
}
 catch (HiveException e) {
throw new IllegalStateException("Unxpected Exception thrown: " + e.getMessage(),e);
}
}
addDbAndTabToOutputs(qualifiedTabName,TableType.MANAGED_TABLE);
if (isTemporary) {
if (partCols.size() > 0) {
throw new SemanticException("Partition columns are not supported on temporary tables");
}
if (location == null) {
try {
Path path=new Path(SessionState.getTempTableSpace(conf),UUID.randomUUID().toString());
path=Warehouse.getDnsPath(path,conf);
location=path.toString();
}
 catch (MetaException err) {
throw new SemanticException("Error while generating temp table path:",err);
}
}
}
switch (command_type) {
case CREATE_TABLE:
tblProps=addDefaultProperties(tblProps);
CreateTableDesc crtTblDesc=new CreateTableDesc(dbDotTab,isExt,isTemporary,cols,partCols,bucketCols,sortCols,numBuckets,rowFormatParams.fieldDelim,rowFormatParams.fieldEscape,rowFormatParams.collItemDelim,rowFormatParams.mapKeyDelim,rowFormatParams.lineDelim,comment,storageFormat.getInputFormat(),storageFormat.getOutputFormat(),location,storageFormat.getSerde(),storageFormat.getStorageHandler(),storageFormat.getSerdeProps(),tblProps,ifNotExists,skewedColNames,skewedValues);
crtTblDesc.setStoredAsSubDirectories(storedAsDirs);
crtTblDesc.setNullFormat(rowFormatParams.nullFormat);
crtTblDesc.validate(conf);
queryState.setCommandType(HiveOperation.CREATETABLE);
rootTasks.add(TaskFactory.get(new DDLWork(getInputs(),getOutputs(),crtTblDesc),conf));
break;
case CTLT:
tblProps=addDefaultProperties(tblProps);
if (isTemporary) {
Table likeTable=getTable(likeTableName,false);
if (likeTable != null && likeTable.getPartCols().size() > 0) {
throw new SemanticException("Partition columns are not supported on temporary tables " + "and source table in CREATE TABLE LIKE is partitioned.");
}
}
CreateTableLikeDesc crtTblLikeDesc=new CreateTableLikeDesc(dbDotTab,isExt,isTemporary,storageFormat.getInputFormat(),storageFormat.getOutputFormat(),location,storageFormat.getSerde(),storageFormat.getSerdeProps(),tblProps,ifNotExists,likeTableName,isUserStorageFormat);
queryState.setCommandType(HiveOperation.CREATETABLE);
rootTasks.add(TaskFactory.get(new DDLWork(getInputs(),getOutputs(),crtTblLikeDesc),conf));
break;
case CTAS:
if (isTemporary) {
if (!ctx.getExplain() && !isMaterialization) {
String dbName=qualifiedTabName[0];
String tblName=qualifiedTabName[1];
SessionState ss=SessionState.get();
if (ss == null) {
throw new SemanticException("No current SessionState, cannot create temporary table " + dbName + "."+ tblName);
}
Map<String,Table> tables=SessionHiveMetaStoreClient.getTempTablesForDatabase(dbName);
if (tables != null && tables.containsKey(tblName)) {
throw new SemanticException("Temporary table " + dbName + "."+ tblName+ " already exists");
}
}
}
 else {
try {
Table dumpTable=db.newTable(dbDotTab);
if (null != db.getTable(dumpTable.getDbName(),dumpTable.getTableName(),false) && !ctx.getExplain()) {
throw new SemanticException(ErrorMsg.TABLE_ALREADY_EXISTS.getMsg(dbDotTab));
}
}
 catch (HiveException e) {
throw new SemanticException(e);
}
}
if (location != null && location.length() != 0) {
Path locPath=new Path(location);
FileSystem curFs=null;
FileStatus locStats=null;
try {
curFs=locPath.getFileSystem(conf);
if (curFs != null) {
locStats=curFs.getFileStatus(locPath);
}
if (locStats != null && locStats.isDir()) {
FileStatus[] lStats=curFs.listStatus(locPath);
if (lStats != null && lStats.length != 0) {
throw new SemanticException(ErrorMsg.CTAS_LOCATION_NONEMPTY.getMsg(location));
}
}
}
 catch (FileNotFoundException nfe) {
}
catch (IOException ioE) {
if (LOG.isDebugEnabled()) {
LOG.debug("Exception when validate folder ",ioE);
}
}
}
tblProps=addDefaultProperties(tblProps);
tableDesc=new CreateTableDesc(qualifiedTabName[0],dbDotTab,isExt,isTemporary,cols,partCols,bucketCols,sortCols,numBuckets,rowFormatParams.fieldDelim,rowFormatParams.fieldEscape,rowFormatParams.collItemDelim,rowFormatParams.mapKeyDelim,rowFormatParams.lineDelim,comment,storageFormat.getInputFormat(),storageFormat.getOutputFormat(),location,storageFormat.getSerde(),storageFormat.getStorageHandler(),storageFormat.getSerdeProps(),tblProps,ifNotExists,skewedColNames,skewedValues,true);
tableDesc.setMaterialization(isMaterialization);
tableDesc.setStoredAsSubDirectories(storedAsDirs);
tableDesc.setNullFormat(rowFormatParams.nullFormat);
qb.setTableDesc(tableDesc);
queryState.setCommandType(HiveOperation.CREATETABLE_AS_SELECT);
return selectStmt;
default :
throw new SemanticException("Unrecognized command.");
}
return null;
}
