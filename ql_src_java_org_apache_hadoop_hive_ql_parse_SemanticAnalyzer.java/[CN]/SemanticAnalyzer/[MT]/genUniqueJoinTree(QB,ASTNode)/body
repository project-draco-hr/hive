{
  QBJoinTree joinTree=new QBJoinTree();
  joinTree.setNoOuterJoin(false);
  joinTree.setExpressions(new ArrayList<ArrayList<ASTNode>>());
  joinTree.setFilters(new ArrayList<ArrayList<ASTNode>>());
  joinTree.setFiltersForPushing(new ArrayList<ArrayList<ASTNode>>());
  ArrayList<String> rightAliases=new ArrayList<String>();
  ArrayList<String> leftAliases=new ArrayList<String>();
  ArrayList<String> baseSrc=new ArrayList<String>();
  ArrayList<Boolean> preserved=new ArrayList<Boolean>();
  boolean lastPreserved=false;
  int cols=-1;
  for (int i=0; i < joinParseTree.getChildCount(); i++) {
    ASTNode child=(ASTNode)joinParseTree.getChild(i);
switch (child.getToken().getType()) {
case HiveParser.TOK_TABREF:
      String tableName=unescapeIdentifier(child.getChild(0).getText());
    String alias=child.getChildCount() == 1 ? tableName : unescapeIdentifier(child.getChild(child.getChildCount() - 1).getText().toLowerCase());
  if (i == 0) {
    leftAliases.add(alias);
    joinTree.setLeftAlias(alias);
  }
 else {
    rightAliases.add(alias);
  }
baseSrc.add(alias);
preserved.add(lastPreserved);
lastPreserved=false;
break;
case HiveParser.TOK_EXPLIST:
if (cols == -1 && child.getChildCount() != 0) {
cols=child.getChildCount();
}
 else if (child.getChildCount() != cols) {
throw new SemanticException("Tables with different or invalid " + "number of keys in UNIQUEJOIN");
}
ArrayList<ASTNode> expressions=new ArrayList<ASTNode>();
ArrayList<ASTNode> filt=new ArrayList<ASTNode>();
ArrayList<ASTNode> filters=new ArrayList<ASTNode>();
for (Node exp : child.getChildren()) {
expressions.add((ASTNode)exp);
}
joinTree.getExpressions().add(expressions);
joinTree.getFilters().add(filt);
joinTree.getFiltersForPushing().add(filters);
break;
case HiveParser.KW_PRESERVE:
lastPreserved=true;
break;
case HiveParser.TOK_SUBQUERY:
throw new SemanticException("Subqueries are not supported in UNIQUEJOIN");
default :
throw new SemanticException("Unexpected UNIQUEJOIN structure");
}
}
joinTree.setBaseSrc(baseSrc.toArray(new String[0]));
joinTree.setLeftAliases(leftAliases.toArray(new String[0]));
joinTree.setRightAliases(rightAliases.toArray(new String[0]));
JoinCond[] condn=new JoinCond[preserved.size()];
for (int i=0; i < condn.length; i++) {
condn[i]=new JoinCond(preserved.get(i));
}
joinTree.setJoinCond(condn);
if (qb.getParseInfo().getHints() != null) {
parseStreamTables(joinTree,qb);
}
return joinTree;
}
