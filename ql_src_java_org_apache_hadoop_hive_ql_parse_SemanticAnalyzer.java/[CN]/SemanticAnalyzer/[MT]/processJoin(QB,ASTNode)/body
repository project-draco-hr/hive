{
  int numChildren=join.getChildCount();
  if ((numChildren != 2) && (numChildren != 3) && join.getToken().getType() != HiveParser.TOK_UNIQUEJOIN) {
    throw new SemanticException(generateErrorMessage(join,"Join with multiple children"));
  }
  for (int num=0; num < numChildren; num++) {
    ASTNode child=(ASTNode)join.getChild(num);
    if (child.getToken().getType() == HiveParser.TOK_TABREF) {
      processTable(qb,child);
    }
 else     if (child.getToken().getType() == HiveParser.TOK_SUBQUERY) {
      processSubQuery(qb,child);
    }
 else     if (child.getToken().getType() == HiveParser.TOK_PTBLFUNCTION) {
      queryProperties.setHasPTF(true);
      processPTF(qb,child);
      PTFInvocationSpec ptfInvocationSpec=qb.getPTFInvocationSpec(child);
      String inputAlias=ptfInvocationSpec == null ? null : ((PartitionedTableFunctionSpec)ptfInvocationSpec.getFunction()).getAlias();
      ;
      if (inputAlias == null) {
        throw new SemanticException(generateErrorMessage(child,"PTF invocation in a Join must have an alias"));
      }
    }
 else     if (child.getToken().getType() == HiveParser.TOK_LATERAL_VIEW) {
      throw new SemanticException(ErrorMsg.LATERAL_VIEW_WITH_JOIN.getMsg(join));
    }
 else     if (isJoinToken(child)) {
      processJoin(qb,child);
    }
  }
}
