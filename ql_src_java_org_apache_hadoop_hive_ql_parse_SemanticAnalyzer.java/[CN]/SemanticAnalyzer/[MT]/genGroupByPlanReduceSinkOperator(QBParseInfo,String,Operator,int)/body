{
  RowResolver reduceSinkInputRowResolver=opParseCtx.get(inputOperatorInfo).getRR();
  RowResolver reduceSinkOutputRowResolver=new RowResolver();
  reduceSinkOutputRowResolver.setIsExprResolver(true);
  ArrayList<exprNodeDesc> reduceKeys=new ArrayList<exprNodeDesc>();
  List<ASTNode> grpByExprs=getGroupByForClause(parseInfo,dest);
  for (int i=0; i < grpByExprs.size(); ++i) {
    ASTNode grpbyExpr=grpByExprs.get(i);
    String text=grpbyExpr.toStringTree();
    if (reduceSinkOutputRowResolver.get("",text) == null) {
      ColumnInfo exprInfo=reduceSinkInputRowResolver.get("",text);
      reduceKeys.add(new exprNodeColumnDesc(exprInfo.getType(),exprInfo.getInternalName()));
      reduceSinkOutputRowResolver.put("",text,new ColumnInfo(Utilities.ReduceField.KEY.toString() + "." + Integer.valueOf(reduceKeys.size() - 1).toString(),exprInfo.getType()));
    }
  }
  if (parseInfo.getDistinctFuncExprForClause(dest) != null) {
    ASTNode value=parseInfo.getDistinctFuncExprForClause(dest);
    for (int i=1; i < value.getChildCount(); i++) {
      ASTNode parameter=(ASTNode)value.getChild(i);
      String text=parameter.toStringTree();
      if (reduceSinkOutputRowResolver.get("",text) == null) {
        ColumnInfo exprInfo=reduceSinkInputRowResolver.get("",text);
        reduceKeys.add(new exprNodeColumnDesc(exprInfo.getType(),exprInfo.getInternalName()));
        reduceSinkOutputRowResolver.put("",text,new ColumnInfo(Utilities.ReduceField.KEY.toString() + "." + Integer.valueOf(reduceKeys.size() - 1).toString(),exprInfo.getType()));
      }
    }
  }
  ArrayList<exprNodeDesc> reduceValues=new ArrayList<exprNodeDesc>();
  HashMap<String,ASTNode> aggregationTrees=parseInfo.getAggregationExprsForClause(dest);
  int inputField=reduceKeys.size();
  for (  Map.Entry<String,ASTNode> entry : aggregationTrees.entrySet()) {
    TypeInfo type=reduceSinkInputRowResolver.getColumnInfos().get(inputField).getType();
    reduceValues.add(new exprNodeColumnDesc(type,(Integer.valueOf(inputField)).toString()));
    inputField++;
    reduceSinkOutputRowResolver.put("",((ASTNode)entry.getValue()).toStringTree(),new ColumnInfo(Utilities.ReduceField.VALUE.toString() + "." + (Integer.valueOf(reduceValues.size() - 1)).toString(),type));
  }
  return putOpInsertMap(OperatorFactory.getAndMakeChild(PlanUtils.getReduceSinkDesc(reduceKeys,reduceValues,-1,(parseInfo.getDistinctFuncExprForClause(dest) == null ? -1 : Integer.MAX_VALUE),numReducers),new RowSchema(reduceSinkOutputRowResolver.getColumnInfos()),inputOperatorInfo),reduceSinkOutputRowResolver);
}
