{
  RowResolver rr=opParseCtx.get(input).getRowResolver();
  PTFDesc ptfDesc=translatePTFInvocationSpec(ptfQSpec,rr);
{
    PartitionedTableFunctionDef tabDef=ptfDesc.getStartOfChain();
    if (tabDef.isTransformsRawInput()) {
      RowResolver ptfMapRR=tabDef.getRawInputShape().getRr();
      ptfDesc.setMapSide(true);
      input=putOpInsertMap(OperatorFactory.getAndMakeChild(ptfDesc,new RowSchema(ptfMapRR.getColumnInfos()),input),ptfMapRR);
      rr=opParseCtx.get(input).getRowResolver();
    }
    ArrayList<ExprNodeDesc> partCols=new ArrayList<ExprNodeDesc>();
    ArrayList<ExprNodeDesc> orderCols=new ArrayList<ExprNodeDesc>();
    StringBuilder orderString=new StringBuilder();
    StringBuilder nullOrderString=new StringBuilder();
    buildPTFReduceSinkDetails(tabDef,rr,partCols,orderCols,orderString,nullOrderString);
    input=genReduceSinkPlan(input,partCols,orderCols,orderString.toString(),nullOrderString.toString(),-1,Operation.NOT_ACID);
  }
{
    rr=opParseCtx.get(input).getRowResolver();
    ptfDesc=translatePTFInvocationSpec(ptfQSpec,rr);
    RowResolver ptfOpRR=ptfDesc.getFuncDef().getOutputShape().getRr();
    input=putOpInsertMap(OperatorFactory.getAndMakeChild(ptfDesc,new RowSchema(ptfOpRR.getColumnInfos()),input),ptfOpRR);
  }
  return input;
}
