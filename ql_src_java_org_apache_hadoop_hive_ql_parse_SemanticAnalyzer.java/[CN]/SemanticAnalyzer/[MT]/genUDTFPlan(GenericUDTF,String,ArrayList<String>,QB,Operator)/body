{
  QBParseInfo qbp=qb.getParseInfo();
  if (!qbp.getDestToGroupBy().isEmpty()) {
    throw new SemanticException(ErrorMsg.UDTF_NO_GROUP_BY.getMsg());
  }
  if (!qbp.getDestToDistributeBy().isEmpty()) {
    throw new SemanticException(ErrorMsg.UDTF_NO_DISTRIBUTE_BY.getMsg());
  }
  if (!qbp.getDestToSortBy().isEmpty()) {
    throw new SemanticException(ErrorMsg.UDTF_NO_SORT_BY.getMsg());
  }
  if (!qbp.getDestToClusterBy().isEmpty()) {
    throw new SemanticException(ErrorMsg.UDTF_NO_CLUSTER_BY.getMsg());
  }
  if (!qbp.getAliasToLateralViews().isEmpty()) {
    throw new SemanticException(ErrorMsg.UDTF_LATERAL_VIEW.getMsg());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Table alias: " + outputTableAlias + " Col aliases: "+ colAliases);
  }
  RowResolver selectRR=opParseCtx.get(input).getRowResolver();
  ArrayList<ColumnInfo> inputCols=selectRR.getColumnInfos();
  ArrayList<String> colNames=new ArrayList<String>();
  ObjectInspector[] colOIs=new ObjectInspector[inputCols.size()];
  for (int i=0; i < inputCols.size(); i++) {
    colNames.add(inputCols.get(i).getInternalName());
    colOIs[i]=inputCols.get(i).getObjectInspector();
  }
  StructObjectInspector outputOI=genericUDTF.initialize(colOIs);
  int numUdtfCols=outputOI.getAllStructFieldRefs().size();
  int numSuppliedAliases=colAliases.size();
  if (numUdtfCols != numSuppliedAliases) {
    throw new SemanticException(ErrorMsg.UDTF_ALIAS_MISMATCH.getMsg("expected " + numUdtfCols + " aliases "+ "but got "+ numSuppliedAliases));
  }
  ArrayList<ColumnInfo> udtfCols=new ArrayList<ColumnInfo>();
  Iterator<String> colAliasesIter=colAliases.iterator();
  for (  StructField sf : outputOI.getAllStructFieldRefs()) {
    String colAlias=colAliasesIter.next();
    assert(colAlias != null);
    ColumnInfo col=new ColumnInfo(sf.getFieldName(),TypeInfoUtils.getTypeInfoFromObjectInspector(sf.getFieldObjectInspector()),outputTableAlias,false);
    udtfCols.add(col);
  }
  RowResolver out_rwsch=new RowResolver();
  for (int i=0; i < udtfCols.size(); i++) {
    out_rwsch.put(outputTableAlias,colAliases.get(i),udtfCols.get(i));
  }
  Operator<?> udtf=putOpInsertMap(OperatorFactory.getAndMakeChild(new UDTFDesc(genericUDTF),new RowSchema(out_rwsch.getColumnInfos()),input),out_rwsch);
  return udtf;
}
