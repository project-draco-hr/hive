{
  RowResolver reduceSinkInputRowResolver=opParseCtx.get(inputOperatorInfo).getRR();
  QBParseInfo parseInfo=qb.getParseInfo();
  RowResolver reduceSinkOutputRowResolver=new RowResolver();
  reduceSinkOutputRowResolver.setIsExprResolver(true);
  Map<String,ExprNodeDesc> colExprMap=new HashMap<String,ExprNodeDesc>();
  ArrayList<ExprNodeDesc> reduceKeys=new ArrayList<ExprNodeDesc>();
  List<String> outputColumnNames=new ArrayList<String>();
  List<ASTNode> grpByExprs=getGroupByForClause(parseInfo,dest);
  for (int i=0; i < grpByExprs.size(); ++i) {
    ASTNode grpbyExpr=grpByExprs.get(i);
    ExprNodeDesc inputExpr=genExprNodeDesc(grpbyExpr,reduceSinkInputRowResolver);
    reduceKeys.add(inputExpr);
    String text=grpbyExpr.toStringTree();
    if (reduceSinkOutputRowResolver.get("",text) == null) {
      outputColumnNames.add(getColumnInternalName(reduceKeys.size() - 1));
      String field=Utilities.ReduceField.KEY.toString() + "." + getColumnInternalName(reduceKeys.size() - 1);
      ColumnInfo colInfo=new ColumnInfo(field,reduceKeys.get(reduceKeys.size() - 1).getTypeInfo(),null,false);
      reduceSinkOutputRowResolver.put("",text,colInfo);
      colExprMap.put(colInfo.getInternalName(),inputExpr);
    }
 else {
      throw new SemanticException(ErrorMsg.DUPLICATE_GROUPBY_KEY.getMsg(grpbyExpr));
    }
  }
  if (parseInfo.getDistinctFuncExprForClause(dest) != null) {
    ASTNode value=parseInfo.getDistinctFuncExprForClause(dest);
    for (int i=1; i < value.getChildCount(); i++) {
      ASTNode parameter=(ASTNode)value.getChild(i);
      String text=parameter.toStringTree();
      if (reduceSinkOutputRowResolver.get("",text) == null) {
        reduceKeys.add(genExprNodeDesc(parameter,reduceSinkInputRowResolver));
        outputColumnNames.add(getColumnInternalName(reduceKeys.size() - 1));
        String field=Utilities.ReduceField.KEY.toString() + "." + getColumnInternalName(reduceKeys.size() - 1);
        ColumnInfo colInfo=new ColumnInfo(field,reduceKeys.get(reduceKeys.size() - 1).getTypeInfo(),null,false);
        reduceSinkOutputRowResolver.put("",text,colInfo);
        colExprMap.put(colInfo.getInternalName(),reduceKeys.get(reduceKeys.size() - 1));
      }
    }
  }
  ArrayList<ExprNodeDesc> reduceValues=new ArrayList<ExprNodeDesc>();
  HashMap<String,ASTNode> aggregationTrees=parseInfo.getAggregationExprsForClause(dest);
  if (!mapAggrDone) {
    for (    Map.Entry<String,ASTNode> entry : aggregationTrees.entrySet()) {
      ASTNode value=entry.getValue();
      for (int i=1; i < value.getChildCount(); i++) {
        ASTNode parameter=(ASTNode)value.getChild(i);
        String text=parameter.toStringTree();
        if (reduceSinkOutputRowResolver.get("",text) == null) {
          reduceValues.add(genExprNodeDesc(parameter,reduceSinkInputRowResolver));
          outputColumnNames.add(getColumnInternalName(reduceValues.size() - 1));
          String field=Utilities.ReduceField.VALUE.toString() + "." + getColumnInternalName(reduceValues.size() - 1);
          reduceSinkOutputRowResolver.put("",text,new ColumnInfo(field,reduceValues.get(reduceValues.size() - 1).getTypeInfo(),null,false));
        }
      }
    }
  }
 else {
    int inputField=reduceKeys.size();
    for (    Map.Entry<String,ASTNode> entry : aggregationTrees.entrySet()) {
      TypeInfo type=reduceSinkInputRowResolver.getColumnInfos().get(inputField).getType();
      reduceValues.add(new ExprNodeColumnDesc(type,getColumnInternalName(inputField),"",false));
      inputField++;
      outputColumnNames.add(getColumnInternalName(reduceValues.size() - 1));
      String field=Utilities.ReduceField.VALUE.toString() + "." + getColumnInternalName(reduceValues.size() - 1);
      reduceSinkOutputRowResolver.put("",(entry.getValue()).toStringTree(),new ColumnInfo(field,type,null,false));
    }
  }
  ReduceSinkOperator rsOp=(ReduceSinkOperator)putOpInsertMap(OperatorFactory.getAndMakeChild(PlanUtils.getReduceSinkDesc(reduceKeys,reduceValues,outputColumnNames,true,-1,numPartitionFields,numReducers),new RowSchema(reduceSinkOutputRowResolver.getColumnInfos()),inputOperatorInfo),reduceSinkOutputRowResolver);
  rsOp.setColumnExprMap(colExprMap);
  return rsOp;
}
