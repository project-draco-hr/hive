{
  LOG.info("Starting Semantic Analysis");
  if (!genResolvedParseTree(ast,plannerCtx)) {
    return;
  }
  Operator sinkOp=genOPTree(ast,plannerCtx);
  if (createVwDesc != null) {
    resultSchema=convertRowSchemaToViewSchema(opParseCtx.get(sinkOp).getRowResolver());
  }
 else {
    if (resultSchema == null) {
      resultSchema=convertRowSchemaToResultSetSchema(opParseCtx.get(sinkOp).getRowResolver(),HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_RESULTSET_USE_UNIQUE_COLUMN_NAMES));
    }
  }
  copyInfoToQueryProperties(queryProperties);
  ParseContext pCtx=new ParseContext(conf,opToPartPruner,opToPartList,topOps,new HashSet<JoinOperator>(joinContext.keySet()),new HashSet<SMBMapJoinOperator>(smbMapJoinContext.keySet()),loadTableWork,loadFileWork,ctx,idToTableNameMap,destTableId,uCtx,listMapJoinOpsNoReducer,prunedPartitions,opToSamplePruner,globalLimitCtx,nameToSplitSample,inputs,rootTasks,opToPartToSkewedPruner,viewAliasToInput,reduceSinkOperatorsAddedByEnforceBucketingSorting,analyzeRewrite,tableDesc,queryProperties,viewProjectToTableSchema);
  if (createVwDesc != null) {
    saveViewDefinition();
    validateCreateView(createVwDesc);
    ctx.setResDir(null);
    ctx.setResFile(null);
    try {
      PlanUtils.addInputsForView(pCtx);
    }
 catch (    HiveException e) {
      throw new SemanticException(e);
    }
    if (HiveConf.getVar(conf,HiveConf.ConfVars.POSTEXECHOOKS).contains("org.apache.hadoop.hive.ql.hooks.LineageLogger")) {
      ArrayList<Transform> transformations=new ArrayList<Transform>();
      transformations.add(new HiveOpConverterPostProc());
      transformations.add(new Generator());
      for (      Transform t : transformations) {
        pCtx=t.transform(pCtx);
      }
    }
    return;
  }
  if (HiveConf.getBoolVar(this.conf,HiveConf.ConfVars.HIVE_STATS_COLLECT_TABLEKEYS)) {
    TableAccessAnalyzer tableAccessAnalyzer=new TableAccessAnalyzer(pCtx);
    setTableAccessInfo(tableAccessAnalyzer.analyzeTableAccess());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Before logical optimization\n" + Operator.toString(pCtx.getTopOps().values()));
  }
  Optimizer optm=new Optimizer();
  optm.setPctx(pCtx);
  optm.initialize(conf);
  pCtx=optm.optimize();
  if (pCtx.getColumnAccessInfo() != null) {
    setColumnAccessInfo(pCtx.getColumnAccessInfo());
  }
  FetchTask origFetchTask=pCtx.getFetchTask();
  if (LOG.isDebugEnabled()) {
    LOG.debug("After logical optimization\n" + Operator.toString(pCtx.getTopOps().values()));
  }
  boolean isColumnInfoNeedForAuth=SessionState.get().isAuthorizationModeV2() && HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_AUTHORIZATION_ENABLED);
  if (isColumnInfoNeedForAuth || HiveConf.getBoolVar(this.conf,HiveConf.ConfVars.HIVE_STATS_COLLECT_SCANCOLS)) {
    ColumnAccessAnalyzer columnAccessAnalyzer=new ColumnAccessAnalyzer(pCtx);
    setColumnAccessInfo(columnAccessAnalyzer.analyzeColumnAccess());
  }
  if (!ctx.getExplainLogical()) {
    TaskCompiler compiler=TaskCompilerFactory.getCompiler(conf,pCtx);
    compiler.init(conf,console,db);
    compiler.compile(pCtx,rootTasks,inputs,outputs);
    fetchTask=pCtx.getFetchTask();
  }
  LOG.info("Completed plan generation");
  if (HiveConf.getBoolVar(this.conf,HiveConf.ConfVars.HIVE_STATS_COLLECT_SCANCOLS)) {
    putAccessedColumnsToReadEntity(inputs,columnAccessInfo);
  }
  if (!ctx.getExplain()) {
    enforceScanLimits(pCtx,origFetchTask);
  }
  return;
}
