{
  LinkedHashMap<String,ASTNode> aggregationTrees=new LinkedHashMap<String,ASTNode>();
  List<ASTNode> wdwFns=new ArrayList<ASTNode>();
  for (int i=0; i < selExpr.getChildCount(); ++i) {
    ASTNode function=(ASTNode)selExpr.getChild(i).getChild(0);
    doPhase1GetAllAggregations(function,aggregationTrees,wdwFns);
  }
  for (  ASTNode wdwFn : wdwFns) {
    WindowingSpec spec=qb.getWindowingSpec(dest);
    if (spec == null) {
      queryProperties.setHasWindowing(true);
      spec=new WindowingSpec();
      qb.addDestToWindowingSpec(dest,spec);
    }
    HashMap<String,ASTNode> wExprsInDest=qb.getParseInfo().getWindowingExprsForClause(dest);
    int wColIdx=spec.getWindowExpressions() == null ? 0 : spec.getWindowExpressions().size();
    WindowFunctionSpec wFnSpec=processWindowFunction(wdwFn,(ASTNode)wdwFn.getChild(wdwFn.getChildCount() - 1));
    if (wExprsInDest != null && wExprsInDest.containsKey(wFnSpec.getExpression().toStringTree())) {
      continue;
    }
    wFnSpec.setAlias("_wcol" + wColIdx);
    spec.addWindowFunction(wFnSpec);
    qb.getParseInfo().addWindowingExprToClause(dest,wFnSpec.getExpression());
  }
  return aggregationTrees;
}
