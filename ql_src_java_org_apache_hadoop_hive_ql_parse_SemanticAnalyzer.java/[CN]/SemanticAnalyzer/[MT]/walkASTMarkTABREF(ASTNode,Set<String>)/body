{
  Queue<Node> queue=new LinkedList<>();
  queue.add(ast);
  Map<HivePrivilegeObject,MaskAndFilterInfo> basicInfos=new LinkedHashMap<>();
  while (!queue.isEmpty()) {
    ASTNode astNode=(ASTNode)queue.poll();
    if (astNode.getToken().getType() == HiveParser.TOK_TABREF) {
      int aliasIndex=0;
      StringBuffer additionalTabInfo=new StringBuffer();
      for (int index=1; index < astNode.getChildCount(); index++) {
        ASTNode ct=(ASTNode)astNode.getChild(index);
        if (ct.getToken().getType() == HiveParser.TOK_TABLEBUCKETSAMPLE || ct.getToken().getType() == HiveParser.TOK_TABLESPLITSAMPLE || ct.getToken().getType() == HiveParser.TOK_TABLEPROPERTIES) {
          additionalTabInfo.append(ctx.getTokenRewriteStream().toString(ct.getTokenStartIndex(),ct.getTokenStopIndex()));
        }
 else {
          aliasIndex=index;
        }
      }
      ASTNode tableTree=(ASTNode)(astNode.getChild(0));
      String tabIdName=getUnescapedName(tableTree);
      String alias;
      if (aliasIndex != 0) {
        alias=unescapeIdentifier(astNode.getChild(aliasIndex).getText());
      }
 else {
        alias=getUnescapedUnqualifiedTableName(tableTree);
      }
      if (cteAlias.contains(tabIdName)) {
        continue;
      }
      String replacementText=null;
      Table table=null;
      try {
        table=getTableObjectByName(tabIdName);
      }
 catch (      HiveException e) {
        throw new SemanticException("Table " + tabIdName + " is not found.");
      }
      List<String> columns=new ArrayList<>();
      for (      FieldSchema col : table.getAllCols()) {
        columns.add(col.getName());
      }
      basicInfos.put(new HivePrivilegeObject(table.getDbName(),table.getTableName(),columns),new MaskAndFilterInfo(additionalTabInfo.toString(),alias,astNode));
    }
    if (astNode.getChildCount() > 0 && !ignoredTokens.contains(astNode.getToken().getType())) {
      for (      Node child : astNode.getChildren()) {
        queue.offer(child);
      }
    }
  }
  List<HivePrivilegeObject> basicPrivObjs=new ArrayList<>();
  basicPrivObjs.addAll(basicInfos.keySet());
  List<HivePrivilegeObject> needRewritePrivObjs=tableMask.applyRowFilterAndColumnMasking(basicPrivObjs);
  if (needRewritePrivObjs != null && !needRewritePrivObjs.isEmpty()) {
    tableMask.setNeedsRewrite(true);
    for (    HivePrivilegeObject privObj : needRewritePrivObjs) {
      MaskAndFilterInfo info=basicInfos.get(privObj);
      String replacementText=tableMask.create(privObj,info);
      tableMask.addTableMasking(info.astNode,replacementText);
    }
  }
}
