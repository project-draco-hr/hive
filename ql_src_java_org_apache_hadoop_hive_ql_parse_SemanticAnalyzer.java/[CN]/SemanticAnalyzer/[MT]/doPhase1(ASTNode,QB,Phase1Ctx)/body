{
  QBParseInfo qbp=qb.getParseInfo();
  boolean skipRecursion=false;
  if (ast.getToken() != null) {
    skipRecursion=true;
switch (ast.getToken().getType()) {
case HiveParser.TOK_SELECTDI:
      qb.countSelDi();
case HiveParser.TOK_SELECT:
    qb.countSel();
  qbp.setSelExprForClause(ctx_1.dest,ast);
if (((ASTNode)ast.getChild(0)).getToken().getType() == HiveParser.TOK_HINTLIST) {
  qbp.setHints((ASTNode)ast.getChild(0));
}
LinkedHashMap<String,ASTNode> aggregations=doPhase1GetAggregationsFromSelect(ast);
doPhase1GetColumnAliasesFromSelect(ast,qbp);
qbp.setAggregationExprsForClause(ctx_1.dest,aggregations);
qbp.setDistinctFuncExprsForClause(ctx_1.dest,doPhase1GetDistinctFuncExprs(aggregations));
break;
case HiveParser.TOK_WHERE:
qbp.setWhrExprForClause(ctx_1.dest,ast);
break;
case HiveParser.TOK_INSERT_INTO:
String tab_name=getUnescapedName((ASTNode)ast.getChild(0).getChild(0));
qbp.addInsertIntoTable(tab_name);
case HiveParser.TOK_DESTINATION:
ctx_1.dest="insclause-" + ctx_1.nextNum;
ctx_1.nextNum++;
if (qbp.getIsSubQ()) {
ASTNode ch=(ASTNode)ast.getChild(0);
if ((ch.getToken().getType() != HiveParser.TOK_DIR) || (((ASTNode)ch.getChild(0)).getToken().getType() != HiveParser.TOK_TMP_FILE)) {
throw new SemanticException(ErrorMsg.NO_INSERT_INSUBQUERY.getMsg(ast));
}
}
qbp.setDestForClause(ctx_1.dest,(ASTNode)ast.getChild(0));
break;
case HiveParser.TOK_FROM:
int child_count=ast.getChildCount();
if (child_count != 1) {
throw new SemanticException(generateErrorMessage(ast,"Multiple Children " + child_count));
}
ASTNode frm=(ASTNode)ast.getChild(0);
if (frm.getToken().getType() == HiveParser.TOK_TABREF) {
processTable(qb,frm);
}
 else if (frm.getToken().getType() == HiveParser.TOK_SUBQUERY) {
processSubQuery(qb,frm);
}
 else if (frm.getToken().getType() == HiveParser.TOK_LATERAL_VIEW) {
processLateralView(qb,frm);
}
 else if (isJoinToken(frm)) {
processJoin(qb,frm);
qbp.setJoinExpr(frm);
}
break;
case HiveParser.TOK_CLUSTERBY:
qbp.setClusterByExprForClause(ctx_1.dest,ast);
break;
case HiveParser.TOK_DISTRIBUTEBY:
qbp.setDistributeByExprForClause(ctx_1.dest,ast);
if (qbp.getClusterByForClause(ctx_1.dest) != null) {
throw new SemanticException(generateErrorMessage(ast,ErrorMsg.CLUSTERBY_DISTRIBUTEBY_CONFLICT.getMsg()));
}
 else if (qbp.getOrderByForClause(ctx_1.dest) != null) {
throw new SemanticException(generateErrorMessage(ast,ErrorMsg.ORDERBY_DISTRIBUTEBY_CONFLICT.getMsg()));
}
break;
case HiveParser.TOK_SORTBY:
qbp.setSortByExprForClause(ctx_1.dest,ast);
if (qbp.getClusterByForClause(ctx_1.dest) != null) {
throw new SemanticException(generateErrorMessage(ast,ErrorMsg.CLUSTERBY_SORTBY_CONFLICT.getMsg()));
}
 else if (qbp.getOrderByForClause(ctx_1.dest) != null) {
throw new SemanticException(generateErrorMessage(ast,ErrorMsg.ORDERBY_SORTBY_CONFLICT.getMsg()));
}
break;
case HiveParser.TOK_ORDERBY:
qbp.setOrderByExprForClause(ctx_1.dest,ast);
if (qbp.getClusterByForClause(ctx_1.dest) != null) {
throw new SemanticException(generateErrorMessage(ast,ErrorMsg.CLUSTERBY_ORDERBY_CONFLICT.getMsg()));
}
break;
case HiveParser.TOK_GROUPBY:
if (qbp.getSelForClause(ctx_1.dest).getToken().getType() == HiveParser.TOK_SELECTDI) {
throw new SemanticException(generateErrorMessage(ast,ErrorMsg.SELECT_DISTINCT_WITH_GROUPBY.getMsg()));
}
qbp.setGroupByExprForClause(ctx_1.dest,ast);
skipRecursion=true;
break;
case HiveParser.TOK_HAVING:
qbp.setHavingExprForClause(ctx_1.dest,ast);
qbp.addAggregationExprsForClause(ctx_1.dest,doPhase1GetAggregationsFromSelect(ast));
break;
case HiveParser.TOK_LIMIT:
qbp.setDestLimit(ctx_1.dest,new Integer(ast.getChild(0).getText()));
break;
case HiveParser.TOK_ANALYZE:
String table_name=getUnescapedName((ASTNode)ast.getChild(0).getChild(0));
qb.setTabAlias(table_name,table_name);
qb.addAlias(table_name);
qb.getParseInfo().setIsAnalyzeCommand(true);
HiveConf.setVar(conf,HiveConf.ConfVars.DYNAMICPARTITIONINGMODE,"nonstrict");
HiveConf.setVar(conf,HiveConf.ConfVars.HIVEMAPREDMODE,"nonstrict");
break;
case HiveParser.TOK_UNION:
if (!qbp.getIsSubQ()) {
throw new SemanticException(generateErrorMessage(ast,ErrorMsg.UNION_NOTIN_SUBQ.getMsg()));
}
default :
skipRecursion=false;
break;
}
}
if (!skipRecursion) {
int child_count=ast.getChildCount();
for (int child_pos=0; child_pos < child_count; ++child_pos) {
doPhase1((ASTNode)ast.getChild(child_pos),qb,ctx_1);
}
}
}
