{
  RowResolver lvForwardRR=new RowResolver();
  RowResolver source=opParseCtx.get(op).getRowResolver();
  Map<String,ExprNodeDesc> lvfColExprMap=new HashMap<String,ExprNodeDesc>();
  Map<String,ExprNodeDesc> selColExprMap=new HashMap<String,ExprNodeDesc>();
  List<ExprNodeDesc> colList=new ArrayList<ExprNodeDesc>();
  List<String> colNames=new ArrayList<String>();
  for (  ColumnInfo col : source.getColumnInfos()) {
    String[] tabCol=source.reverseLookup(col.getInternalName());
    lvForwardRR.put(tabCol[0],tabCol[1],col);
    ExprNodeDesc colExpr=new ExprNodeColumnDesc(col);
    colList.add(colExpr);
    colNames.add(colExpr.getName());
    lvfColExprMap.put(col.getInternalName(),colExpr);
    selColExprMap.put(col.getInternalName(),colExpr.clone());
  }
  Operator lvForward=putOpInsertMap(OperatorFactory.getAndMakeChild(new LateralViewForwardDesc(),new RowSchema(lvForwardRR.getColumnInfos()),op),lvForwardRR);
  lvForward.setColumnExprMap(lvfColExprMap);
  RowResolver allPathRR=opParseCtx.get(lvForward).getRowResolver();
  SelectDesc sDesc=new SelectDesc(colList,colNames,false);
  sDesc.setSelStarNoCompute(true);
  Operator allPath=putOpInsertMap(OperatorFactory.getAndMakeChild(sDesc,new RowSchema(allPathRR.getColumnInfos()),lvForward),allPathRR);
  allPath.setColumnExprMap(selColExprMap);
  int allColumns=allPathRR.getColumnInfos().size();
  QB blankQb=new QB(null,null,false);
  Operator udtfPath=genSelectPlan((ASTNode)lateralViewTree.getChild(0),blankQb,lvForward,null,lateralViewTree.getType() == HiveParser.TOK_LATERAL_VIEW_OUTER);
  for (  String udtfAlias : blankQb.getAliases()) {
    qb.addAlias(udtfAlias);
  }
  RowResolver udtfPathRR=opParseCtx.get(udtfPath).getRowResolver();
  RowResolver lateralViewRR=new RowResolver();
  ArrayList<String> outputInternalColNames=new ArrayList<String>();
  Map<String,ExprNodeDesc> colExprMap=new HashMap<String,ExprNodeDesc>();
  LVmergeRowResolvers(allPathRR,lateralViewRR,colExprMap,outputInternalColNames);
  LVmergeRowResolvers(udtfPathRR,lateralViewRR,colExprMap,outputInternalColNames);
  Operator lateralViewJoin=putOpInsertMap(OperatorFactory.getAndMakeChild(new LateralViewJoinDesc(allColumns,outputInternalColNames),new RowSchema(lateralViewRR.getColumnInfos()),allPath,udtfPath),lateralViewRR);
  lateralViewJoin.setColumnExprMap(colExprMap);
  return lateralViewJoin;
}
