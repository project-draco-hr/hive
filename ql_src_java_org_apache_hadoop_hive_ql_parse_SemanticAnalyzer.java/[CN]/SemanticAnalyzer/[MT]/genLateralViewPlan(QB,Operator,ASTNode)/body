{
  RowResolver lvForwardRR=new RowResolver();
  RowResolver source=opParseCtx.get(op).getRowResolver();
  for (  ColumnInfo col : source.getColumnInfos()) {
    String[] tabCol=source.reverseLookup(col.getInternalName());
    lvForwardRR.put(tabCol[0],tabCol[1],col);
  }
  Operator lvForward=putOpInsertMap(OperatorFactory.getAndMakeChild(new LateralViewForwardDesc(),new RowSchema(lvForwardRR.getColumnInfos()),op),lvForwardRR);
  RowResolver allPathRR=opParseCtx.get(lvForward).getRowResolver();
  Operator allPath=putOpInsertMap(OperatorFactory.getAndMakeChild(new SelectDesc(true),new RowSchema(allPathRR.getColumnInfos()),lvForward),allPathRR);
  int allColumns=allPathRR.getColumnInfos().size();
  QB blankQb=new QB(null,null,false);
  Operator udtfPath=genSelectPlan((ASTNode)lateralViewTree.getChild(0),blankQb,lvForward,lateralViewTree.getType() == HiveParser.TOK_LATERAL_VIEW_OUTER);
  for (  String udtfAlias : blankQb.getAliases()) {
    qb.addAlias(udtfAlias);
  }
  RowResolver udtfPathRR=opParseCtx.get(udtfPath).getRowResolver();
  RowResolver lateralViewRR=new RowResolver();
  ArrayList<String> outputInternalColNames=new ArrayList<String>();
  Map<String,ExprNodeDesc> colExprMap=new HashMap<String,ExprNodeDesc>();
  LVmergeRowResolvers(allPathRR,lateralViewRR,colExprMap,outputInternalColNames);
  LVmergeRowResolvers(udtfPathRR,lateralViewRR,colExprMap,outputInternalColNames);
  Operator lateralViewJoin=putOpInsertMap(OperatorFactory.getAndMakeChild(new LateralViewJoinDesc(allColumns,outputInternalColNames),new RowSchema(lateralViewRR.getColumnInfos()),allPath,udtfPath),lateralViewRR);
  lateralViewJoin.setColumnExprMap(colExprMap);
  return lateralViewJoin;
}
