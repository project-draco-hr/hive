{
  boolean isByPos=false;
  if (HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_GROUPBY_ORDERBY_POSITION_ALIAS) == true) {
    isByPos=true;
  }
  Deque<ASTNode> stack=new ArrayDeque<ASTNode>();
  stack.push(ast);
  while (!stack.isEmpty()) {
    ASTNode next=stack.pop();
    if (next.getChildCount() == 0) {
      continue;
    }
    boolean isAllCol;
    ASTNode selectNode=null;
    ASTNode groupbyNode=null;
    ASTNode orderbyNode=null;
    int child_count=next.getChildCount();
    for (int child_pos=0; child_pos < child_count; ++child_pos) {
      ASTNode node=(ASTNode)next.getChild(child_pos);
      int type=node.getToken().getType();
      if (type == HiveParser.TOK_SELECT) {
        selectNode=node;
      }
 else       if (type == HiveParser.TOK_GROUPBY) {
        groupbyNode=node;
      }
 else       if (type == HiveParser.TOK_ORDERBY) {
        orderbyNode=node;
      }
    }
    if (selectNode != null) {
      int selectExpCnt=selectNode.getChildCount();
      if (groupbyNode != null) {
        for (int child_pos=0; child_pos < groupbyNode.getChildCount(); ++child_pos) {
          ASTNode node=(ASTNode)groupbyNode.getChild(child_pos);
          if (node.getToken().getType() == HiveParser.Number) {
            if (isByPos) {
              int pos=Integer.parseInt(node.getText());
              if (pos > 0 && pos <= selectExpCnt) {
                groupbyNode.setChild(child_pos,selectNode.getChild(pos - 1).getChild(0));
              }
 else {
                throw new SemanticException(ErrorMsg.INVALID_POSITION_ALIAS_IN_GROUPBY.getMsg("Position alias: " + pos + " does not exist\n"+ "The Select List is indexed from 1 to "+ selectExpCnt));
              }
            }
 else {
              warn("Using constant number  " + node.getText() + " in group by. If you try to use position alias when hive.groupby.orderby.position.alias is false, the position alias will be ignored.");
            }
          }
        }
      }
      if (orderbyNode != null) {
        isAllCol=false;
        for (int child_pos=0; child_pos < selectNode.getChildCount(); ++child_pos) {
          ASTNode node=(ASTNode)selectNode.getChild(child_pos).getChild(0);
          if (node.getToken().getType() == HiveParser.TOK_ALLCOLREF) {
            isAllCol=true;
          }
        }
        for (int child_pos=0; child_pos < orderbyNode.getChildCount(); ++child_pos) {
          ASTNode colNode=(ASTNode)orderbyNode.getChild(child_pos);
          ASTNode node=(ASTNode)colNode.getChild(0);
          if (node.getToken().getType() == HiveParser.Number) {
            if (isByPos) {
              if (!isAllCol) {
                int pos=Integer.parseInt(node.getText());
                if (pos > 0 && pos <= selectExpCnt) {
                  colNode.setChild(0,selectNode.getChild(pos - 1).getChild(0));
                }
 else {
                  throw new SemanticException(ErrorMsg.INVALID_POSITION_ALIAS_IN_ORDERBY.getMsg("Position alias: " + pos + " does not exist\n"+ "The Select List is indexed from 1 to "+ selectExpCnt));
                }
              }
 else {
                throw new SemanticException(ErrorMsg.NO_SUPPORTED_ORDERBY_ALLCOLREF_POS.getMsg());
              }
            }
 else {
              warn("Using constant number " + node.getText() + " in order by. If you try to use position alias when hive.groupby.orderby.position.alias is false, the position alias will be ignored.");
            }
          }
        }
      }
    }
    for (int i=next.getChildren().size() - 1; i >= 0; i--) {
      stack.push((ASTNode)next.getChildren().get(i));
    }
  }
}
