{
  String[] nodeRightAliases=node.getRightAliases();
  String[] trgtRightAliases=target.getRightAliases();
  String[] rightAliases=new String[nodeRightAliases.length + trgtRightAliases.length];
  for (int i=0; i < trgtRightAliases.length; i++)   rightAliases[i]=trgtRightAliases[i];
  for (int i=0; i < nodeRightAliases.length; i++)   rightAliases[i + trgtRightAliases.length]=nodeRightAliases[i];
  target.setRightAliases(rightAliases);
  String[] nodeBaseSrc=node.getBaseSrc();
  String[] trgtBaseSrc=target.getBaseSrc();
  String[] baseSrc=new String[nodeBaseSrc.length + trgtBaseSrc.length - 1];
  for (int i=0; i < trgtBaseSrc.length; i++)   baseSrc[i]=trgtBaseSrc[i];
  for (int i=1; i < nodeBaseSrc.length; i++)   baseSrc[i + trgtBaseSrc.length - 1]=nodeBaseSrc[i];
  target.setBaseSrc(baseSrc);
  Vector<Vector<CommonTree>> expr=target.getExpressions();
  for (int i=0; i < nodeRightAliases.length; i++)   expr.add(node.getExpressions().get(i + 1));
  if (qb.getQbJoinTree() == node)   qb.setQbJoinTree(node.getJoinSrc());
 else   parent.setJoinSrc(node.getJoinSrc());
  if (node.getNoOuterJoin() && target.getNoOuterJoin())   target.setNoOuterJoin(true);
 else   target.setNoOuterJoin(false);
  joinCond[] nodeCondns=node.getJoinCond();
  int nodeCondnsSize=nodeCondns.length;
  joinCond[] targetCondns=target.getJoinCond();
  int targetCondnsSize=targetCondns.length;
  joinCond[] newCondns=new joinCond[nodeCondnsSize + targetCondnsSize];
  for (int i=0; i < targetCondnsSize; i++)   newCondns[i]=targetCondns[i];
  for (int i=0; i < nodeCondnsSize; i++) {
    joinCond nodeCondn=nodeCondns[i];
    if (nodeCondn.getLeft() == 0)     nodeCondn.setLeft(pos);
 else     nodeCondn.setLeft(nodeCondn.getLeft() + targetCondnsSize - 1);
    nodeCondn.setRight(nodeCondn.getRight() + targetCondnsSize - 1);
    newCondns[targetCondnsSize + i]=nodeCondn;
  }
  target.setJoinCond(newCondns);
}
