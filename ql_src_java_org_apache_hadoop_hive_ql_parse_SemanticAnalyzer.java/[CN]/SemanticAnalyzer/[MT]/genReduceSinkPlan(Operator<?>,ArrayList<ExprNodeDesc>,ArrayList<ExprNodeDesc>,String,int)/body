{
  RowResolver inputRR=opParseCtx.get(input).getRowResolver();
  Operator dummy=Operator.createDummy();
  dummy.setParentOperators(Arrays.asList(input));
  ArrayList<ExprNodeDesc> sortColsBack=new ArrayList<ExprNodeDesc>();
  for (  ExprNodeDesc sortCol : sortCols) {
    sortColsBack.add(ExprNodeDescUtils.backtrack(sortCol,dummy,input));
  }
  RowResolver rsRR=new RowResolver();
  ArrayList<String> outputColumns=new ArrayList<String>();
  ArrayList<ExprNodeDesc> valueCols=new ArrayList<ExprNodeDesc>();
  ArrayList<ExprNodeDesc> valueColsBack=new ArrayList<ExprNodeDesc>();
  Map<String,ExprNodeDesc> colExprMap=new HashMap<String,ExprNodeDesc>();
  ArrayList<ColumnInfo> columnInfos=inputRR.getColumnInfos();
  int[] index=new int[columnInfos.size()];
  for (int i=0; i < index.length; i++) {
    ColumnInfo colInfo=columnInfos.get(i);
    String[] nm=inputRR.reverseLookup(colInfo.getInternalName());
    String[] nm2=inputRR.getAlternateMappings(colInfo.getInternalName());
    ExprNodeColumnDesc value=new ExprNodeColumnDesc(colInfo);
    ExprNodeDesc valueBack=ExprNodeDescUtils.backtrack(value,dummy,input);
    int kindex=valueBack == null ? -1 : ExprNodeDescUtils.indexOf(valueBack,sortColsBack);
    if (kindex >= 0) {
      index[i]=kindex;
      ColumnInfo newColInfo=new ColumnInfo(colInfo);
      newColInfo.setInternalName(Utilities.ReduceField.KEY + ".reducesinkkey" + kindex);
      newColInfo.setTabAlias(nm[0]);
      rsRR.addMappingOnly(nm[0],nm[1],newColInfo);
      if (nm2 != null) {
        rsRR.addMappingOnly(nm2[0],nm2[1],newColInfo);
      }
      continue;
    }
    int vindex=valueBack == null ? -1 : ExprNodeDescUtils.indexOf(valueBack,valueColsBack);
    if (vindex >= 0) {
      index[i]=-vindex - 1;
      continue;
    }
    index[i]=-valueCols.size() - 1;
    String outputColName=getColumnInternalName(valueCols.size());
    valueCols.add(value);
    valueColsBack.add(valueBack);
    ColumnInfo newColInfo=new ColumnInfo(colInfo);
    newColInfo.setInternalName(Utilities.ReduceField.VALUE + "." + outputColName);
    newColInfo.setTabAlias(nm[0]);
    rsRR.put(nm[0],nm[1],newColInfo);
    if (nm2 != null) {
      rsRR.addMappingOnly(nm2[0],nm2[1],newColInfo);
    }
    outputColumns.add(outputColName);
  }
  dummy.setParentOperators(null);
  ReduceSinkDesc rsdesc=PlanUtils.getReduceSinkDesc(sortCols,valueCols,outputColumns,false,-1,partitionCols,sortOrder,numReducers,AcidUtils.Operation.NOT_ACID);
  Operator interim=putOpInsertMap(OperatorFactory.getAndMakeChild(rsdesc,new RowSchema(rsRR.getColumnInfos()),input),rsRR);
  List<String> keyColNames=rsdesc.getOutputKeyColumnNames();
  for (int i=0; i < keyColNames.size(); i++) {
    colExprMap.put(Utilities.ReduceField.KEY + "." + keyColNames.get(i),sortCols.get(i));
  }
  List<String> valueColNames=rsdesc.getOutputValueColumnNames();
  for (int i=0; i < valueColNames.size(); i++) {
    colExprMap.put(Utilities.ReduceField.VALUE + "." + valueColNames.get(i),valueCols.get(i));
  }
  interim.setColumnExprMap(colExprMap);
  RowResolver selectRR=new RowResolver();
  ArrayList<ExprNodeDesc> selCols=new ArrayList<ExprNodeDesc>();
  ArrayList<String> selOutputCols=new ArrayList<String>();
  Map<String,ExprNodeDesc> selColExprMap=new HashMap<String,ExprNodeDesc>();
  for (int i=0; i < index.length; i++) {
    ColumnInfo prev=columnInfos.get(i);
    String[] nm=inputRR.reverseLookup(prev.getInternalName());
    String[] nm2=inputRR.getAlternateMappings(prev.getInternalName());
    ColumnInfo info=new ColumnInfo(prev);
    String field;
    if (index[i] >= 0) {
      field=Utilities.ReduceField.KEY + "." + keyColNames.get(index[i]);
    }
 else {
      field=Utilities.ReduceField.VALUE + "." + valueColNames.get(-index[i] - 1);
    }
    String internalName=getColumnInternalName(i);
    ExprNodeColumnDesc desc=new ExprNodeColumnDesc(info.getType(),field,info.getTabAlias(),info.getIsVirtualCol());
    selCols.add(desc);
    info.setInternalName(internalName);
    selectRR.put(nm[0],nm[1],info);
    if (nm2 != null) {
      selectRR.addMappingOnly(nm2[0],nm2[1],info);
    }
    selOutputCols.add(internalName);
    selColExprMap.put(internalName,desc);
  }
  SelectDesc select=new SelectDesc(selCols,selOutputCols);
  Operator output=putOpInsertMap(OperatorFactory.getAndMakeChild(select,new RowSchema(selectRR.getColumnInfos()),interim),selectRR);
  output.setColumnExprMap(selColExprMap);
  return output;
}
