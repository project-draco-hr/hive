{
  RowResolver reduceSinkInputRowResolver=opParseCtx.get(inputOperatorInfo).getRowResolver();
  QBParseInfo parseInfo=qb.getParseInfo();
  RowResolver reduceSinkOutputRowResolver=new RowResolver();
  reduceSinkOutputRowResolver.setIsExprResolver(true);
  Map<String,ExprNodeDesc> colExprMap=new HashMap<String,ExprNodeDesc>();
  List<String> outputKeyColumnNames=new ArrayList<String>();
  List<String> outputValueColumnNames=new ArrayList<String>();
  ArrayList<ExprNodeDesc> reduceKeys=getReduceKeysForReduceSink(grpByExprs,dest,reduceSinkInputRowResolver,reduceSinkOutputRowResolver,outputKeyColumnNames,colExprMap);
  int keyLength=reduceKeys.size();
  int numOfColsRmedFromkey=grpByExprs.size() - keyLength;
  if (groupingSetsPresent) {
    processGroupingSetReduceSinkOperator(reduceSinkInputRowResolver,reduceSinkOutputRowResolver,reduceKeys,outputKeyColumnNames,colExprMap);
    if (changeNumPartitionFields) {
      numPartitionFields++;
    }
  }
  List<List<Integer>> distinctColIndices=getDistinctColIndicesForReduceSink(parseInfo,dest,reduceKeys,reduceSinkInputRowResolver,reduceSinkOutputRowResolver,outputKeyColumnNames,colExprMap);
  ArrayList<ExprNodeDesc> reduceValues=new ArrayList<ExprNodeDesc>();
  HashMap<String,ASTNode> aggregationTrees=parseInfo.getAggregationExprsForClause(dest);
  if (!mapAggrDone) {
    getReduceValuesForReduceSinkNoMapAgg(parseInfo,dest,reduceSinkInputRowResolver,reduceSinkOutputRowResolver,outputValueColumnNames,reduceValues,colExprMap);
  }
 else {
    int inputField=reduceKeys.size() + numOfColsRmedFromkey;
    for (    Map.Entry<String,ASTNode> entry : aggregationTrees.entrySet()) {
      TypeInfo type=reduceSinkInputRowResolver.getColumnInfos().get(inputField).getType();
      ExprNodeColumnDesc exprDesc=new ExprNodeColumnDesc(type,getColumnInternalName(inputField),"",false);
      reduceValues.add(exprDesc);
      inputField++;
      String outputColName=getColumnInternalName(reduceValues.size() - 1);
      outputValueColumnNames.add(outputColName);
      String internalName=Utilities.ReduceField.VALUE.toString() + "." + outputColName;
      reduceSinkOutputRowResolver.putExpression(entry.getValue(),new ColumnInfo(internalName,type,null,false));
      colExprMap.put(internalName,exprDesc);
    }
  }
  ReduceSinkOperator rsOp=(ReduceSinkOperator)putOpInsertMap(OperatorFactory.getAndMakeChild(PlanUtils.getReduceSinkDesc(reduceKeys,groupingSetsPresent ? keyLength + 1 : keyLength,reduceValues,distinctColIndices,outputKeyColumnNames,outputValueColumnNames,true,-1,numPartitionFields,numReducers,AcidUtils.Operation.NOT_ACID),new RowSchema(reduceSinkOutputRowResolver.getColumnInfos()),inputOperatorInfo),reduceSinkOutputRowResolver);
  rsOp.setColumnExprMap(colExprMap);
  return rsOp;
}
