{
  QBParseInfo parseInfo=qb.getParseInfo();
  Operator groupByOperatorInfo=genGroupByPlanMapGroupByOperator(qb,dest,inputOperatorInfo,groupByDesc.Mode.HASH);
  if (!optimizeMapAggrGroupBy(dest,qb)) {
    Operator reduceSinkOperatorInfo=genGroupByPlanReduceSinkOperator(qb,dest,groupByOperatorInfo,(parseInfo.getDistinctFuncExprForClause(dest) == null ? -1 : Integer.MAX_VALUE),-1,true);
    Operator groupByOperatorInfo2=genGroupByPlanGroupByOperator1(parseInfo,dest,reduceSinkOperatorInfo,groupByDesc.Mode.PARTIAL2);
    int numReducers=-1;
    List<ASTNode> grpByExprs=getGroupByForClause(parseInfo,dest);
    if (grpByExprs.isEmpty())     numReducers=1;
    Operator reduceSinkOperatorInfo2=genGroupByPlanReduceSinkOperator2MR(parseInfo,dest,groupByOperatorInfo2,grpByExprs.size(),numReducers);
    return genGroupByPlanGroupByOperator2MR(parseInfo,dest,reduceSinkOperatorInfo2,groupByDesc.Mode.FINAL);
  }
 else {
    Operator reduceSinkOperatorInfo=genGroupByPlanReduceSinkOperator(qb,dest,groupByOperatorInfo,getGroupByForClause(parseInfo,dest).size(),1,true);
    return genGroupByPlanGroupByOperator2MR(parseInfo,dest,reduceSinkOperatorInfo,groupByDesc.Mode.FINAL);
  }
}
