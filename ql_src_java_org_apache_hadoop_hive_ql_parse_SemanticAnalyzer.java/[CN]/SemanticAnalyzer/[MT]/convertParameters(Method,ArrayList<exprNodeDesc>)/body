{
  ArrayList<exprNodeDesc> newParameters=new ArrayList<exprNodeDesc>();
  Class<?>[] pTypes=m.getParameterTypes();
  for (int i=0; i < aggParameters.size(); i++) {
    exprNodeDesc desc=aggParameters.get(i);
    Class<?> pType=ObjectInspectorUtils.generalizePrimitive(pTypes[i]);
    if (desc instanceof exprNodeNullDesc) {
      exprNodeConstantDesc newCh=new exprNodeConstantDesc(TypeInfoFactory.getPrimitiveTypeInfo(pType),null);
      newParameters.add(newCh);
    }
 else     if (pType.isAssignableFrom(desc.getTypeInfo().getPrimitiveClass())) {
      newParameters.add(desc);
    }
 else {
      Class<?> from=desc.getTypeInfo().getPrimitiveClass();
      Class<?> to=pType;
      assert(FunctionRegistry.implicitConvertable(from,to));
      Method conv=FunctionRegistry.getUDFMethod(to.getName(),true,from);
      assert(conv != null);
      Class<? extends UDF> c=FunctionRegistry.getUDFClass(to.getName());
      assert(c != null);
      ArrayList<exprNodeDesc> conversionArg=new ArrayList<exprNodeDesc>(1);
      conversionArg.add(desc);
      newParameters.add(new exprNodeFuncDesc(TypeInfoFactory.getPrimitiveTypeInfo(pType),c,conv,conversionArg));
    }
  }
  return newParameters;
}
