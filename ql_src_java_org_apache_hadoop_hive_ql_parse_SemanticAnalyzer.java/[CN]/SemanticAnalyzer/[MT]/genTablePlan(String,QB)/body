{
  String alias_id=getAliasId(alias,qb);
  Table tab=qb.getMetaData().getSrcForAlias(alias);
  RowResolver rwsch;
  Operator<? extends Serializable> top=topOps.get(alias_id);
  Operator<? extends Serializable> dummySel=topSelOps.get(alias_id);
  if (dummySel != null) {
    top=dummySel;
  }
  if (top == null) {
    rwsch=new RowResolver();
    try {
      StructObjectInspector rowObjectInspector=(StructObjectInspector)tab.getDeserializer().getObjectInspector();
      List<? extends StructField> fields=rowObjectInspector.getAllStructFieldRefs();
      for (int i=0; i < fields.size(); i++) {
        rwsch.put(alias,fields.get(i).getFieldName(),new ColumnInfo(fields.get(i).getFieldName(),TypeInfoUtils.getTypeInfoFromObjectInspector(fields.get(i).getFieldObjectInspector()),alias,false));
      }
    }
 catch (    SerDeException e) {
      throw new RuntimeException(e);
    }
    for (    FieldSchema part_col : tab.getPartCols()) {
      LOG.trace("Adding partition col: " + part_col);
      rwsch.put(alias,part_col.getName(),new ColumnInfo(part_col.getName(),TypeInfoFactory.stringTypeInfo,alias,true));
    }
    Iterator<VirtualColumn> vcs=VirtualColumn.getRegistry(conf).iterator();
    List<VirtualColumn> vcList=new ArrayList<VirtualColumn>();
    while (vcs.hasNext()) {
      VirtualColumn vc=vcs.next();
      rwsch.put(alias,vc.getName(),new ColumnInfo(vc.getName(),vc.getTypeInfo(),alias,true,vc.getIsHidden()));
      vcList.add(vc);
    }
    TableScanDesc tsDesc=new TableScanDesc(alias,vcList);
    setupStats(tsDesc,qb.getParseInfo(),tab,alias,rwsch);
    top=putOpInsertMap(OperatorFactory.get(tsDesc,new RowSchema(rwsch.getColumnInfos())),rwsch);
    topOps.put(alias_id,top);
    topToTable.put((TableScanOperator)top,tab);
  }
 else {
    rwsch=opParseCtx.get(top).getRowResolver();
    top.setChildOperators(null);
  }
  Operator<? extends Serializable> tableOp=top;
  TableSample ts=qb.getParseInfo().getTabSample(alias);
  if (ts != null) {
    int num=ts.getNumerator();
    int den=ts.getDenominator();
    ArrayList<ASTNode> sampleExprs=ts.getExprs();
    List<String> tabBucketCols=tab.getBucketCols();
    int numBuckets=tab.getNumBuckets();
    if (tabBucketCols.size() == 0 && sampleExprs.size() == 0) {
      throw new SemanticException(ErrorMsg.NON_BUCKETED_TABLE.getMsg() + " " + tab.getTableName());
    }
    if (num > den) {
      throw new SemanticException(ErrorMsg.BUCKETED_NUMBERATOR_BIGGER_DENOMINATOR.getMsg() + " " + tab.getTableName());
    }
    boolean colsEqual=true;
    if ((sampleExprs.size() != tabBucketCols.size()) && (sampleExprs.size() != 0)) {
      colsEqual=false;
    }
    for (int i=0; i < sampleExprs.size() && colsEqual; i++) {
      boolean colFound=false;
      for (int j=0; j < tabBucketCols.size() && !colFound; j++) {
        if (sampleExprs.get(i).getToken().getType() != HiveParser.TOK_TABLE_OR_COL) {
          break;
        }
        if (((ASTNode)sampleExprs.get(i).getChild(0)).getText().equalsIgnoreCase(tabBucketCols.get(j))) {
          colFound=true;
        }
      }
      colsEqual=(colsEqual && colFound);
    }
    ts.setInputPruning((sampleExprs == null || sampleExprs.size() == 0 || colsEqual));
    if ((sampleExprs == null || sampleExprs.size() == 0 || colsEqual) && (num == den || (den % numBuckets == 0 || numBuckets % den == 0))) {
      LOG.info("No need for sample filter");
      ExprNodeDesc samplePredicate=genSamplePredicate(ts,tabBucketCols,colsEqual,alias,rwsch,qb.getMetaData(),null);
      tableOp=OperatorFactory.getAndMakeChild(new FilterDesc(samplePredicate,true,new sampleDesc(ts.getNumerator(),ts.getDenominator(),tabBucketCols,true)),new RowSchema(rwsch.getColumnInfos()),top);
    }
 else {
      LOG.info("Need sample filter");
      ExprNodeDesc samplePredicate=genSamplePredicate(ts,tabBucketCols,colsEqual,alias,rwsch,qb.getMetaData(),null);
      tableOp=OperatorFactory.getAndMakeChild(new FilterDesc(samplePredicate,true),new RowSchema(rwsch.getColumnInfos()),top);
    }
  }
 else {
    boolean testMode=conf.getBoolVar(HiveConf.ConfVars.HIVETESTMODE);
    if (testMode) {
      String tabName=tab.getTableName();
      String unSampleTblList=conf.getVar(HiveConf.ConfVars.HIVETESTMODENOSAMPLE);
      String[] unSampleTbls=unSampleTblList.split(",");
      boolean unsample=false;
      for (      String unSampleTbl : unSampleTbls) {
        if (tabName.equalsIgnoreCase(unSampleTbl)) {
          unsample=true;
        }
      }
      if (!unsample) {
        int numBuckets=tab.getNumBuckets();
        if (numBuckets > 0) {
          TableSample tsSample=new TableSample(1,numBuckets);
          tsSample.setInputPruning(true);
          qb.getParseInfo().setTabSample(alias,tsSample);
          ExprNodeDesc samplePred=genSamplePredicate(tsSample,tab.getBucketCols(),true,alias,rwsch,qb.getMetaData(),null);
          tableOp=OperatorFactory.getAndMakeChild(new FilterDesc(samplePred,true,new sampleDesc(tsSample.getNumerator(),tsSample.getDenominator(),tab.getBucketCols(),true)),new RowSchema(rwsch.getColumnInfos()),top);
          LOG.info("No need for sample filter");
        }
 else {
          int freq=conf.getIntVar(HiveConf.ConfVars.HIVETESTMODESAMPLEFREQ);
          TableSample tsSample=new TableSample(1,freq);
          tsSample.setInputPruning(false);
          qb.getParseInfo().setTabSample(alias,tsSample);
          LOG.info("Need sample filter");
          ExprNodeDesc randFunc=TypeCheckProcFactory.DefaultExprProcessor.getFuncExprNodeDesc("rand",new ExprNodeConstantDesc(Integer.valueOf(460476415)));
          ExprNodeDesc samplePred=genSamplePredicate(tsSample,null,false,alias,rwsch,qb.getMetaData(),randFunc);
          tableOp=OperatorFactory.getAndMakeChild(new FilterDesc(samplePred,true),new RowSchema(rwsch.getColumnInfos()),top);
        }
      }
    }
  }
  Operator output=putOpInsertMap(tableOp,rwsch);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Created Table Plan for " + alias + " "+ tableOp.toString());
  }
  return output;
}
