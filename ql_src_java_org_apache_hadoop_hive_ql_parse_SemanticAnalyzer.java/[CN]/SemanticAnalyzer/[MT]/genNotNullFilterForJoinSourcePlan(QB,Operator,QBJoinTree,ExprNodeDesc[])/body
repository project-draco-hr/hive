{
  if (qb == null || joinTree == null) {
    return input;
  }
  if (!joinTree.getNoOuterJoin()) {
    return input;
  }
  if (joinKeys == null || joinKeys.length == 0) {
    return input;
  }
  Map<Integer,ExprNodeDesc> hashes=new HashMap<Integer,ExprNodeDesc>();
  if (input instanceof FilterOperator) {
    ExprNodeDescUtils.getExprNodeColumnDesc(Arrays.asList(((FilterDesc)input.getConf()).getPredicate()),hashes);
  }
  ExprNodeDesc filterPred=null;
  List<Boolean> nullSafes=joinTree.getNullSafes();
  for (int i=0; i < joinKeys.length; i++) {
    if (nullSafes.get(i) || (joinKeys[i] instanceof ExprNodeColumnDesc && ((ExprNodeColumnDesc)joinKeys[i]).getIsPartitionColOrVirtualCol())) {
      continue;
    }
    if (null != hashes.get(joinKeys[i].hashCode())) {
      continue;
    }
    List<ExprNodeDesc> args=new ArrayList<ExprNodeDesc>();
    args.add(joinKeys[i]);
    ExprNodeDesc nextExpr=ExprNodeGenericFuncDesc.newInstance(FunctionRegistry.getFunctionInfo("isnotnull").getGenericUDF(),args);
    filterPred=filterPred == null ? nextExpr : ExprNodeDescUtils.mergePredicates(filterPred,nextExpr);
  }
  if (filterPred == null) {
    return input;
  }
  OpParseContext inputCtx=opParseCtx.get(input);
  RowResolver inputRR=inputCtx.getRowResolver();
  if (input instanceof FilterOperator) {
    FilterOperator f=(FilterOperator)input;
    List<ExprNodeDesc> preds=new ArrayList<ExprNodeDesc>();
    preds.add(f.getConf().getPredicate());
    preds.add(filterPred);
    f.getConf().setPredicate(ExprNodeDescUtils.mergePredicates(preds));
    return input;
  }
  FilterDesc filterDesc=new FilterDesc(filterPred,false);
  filterDesc.setGenerated(true);
  Operator output=putOpInsertMap(OperatorFactory.getAndMakeChild(filterDesc,new RowSchema(inputRR.getColumnInfos()),input),inputRR);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Created Filter Plan for " + qb.getId() + " row schema: "+ inputRR.toString());
  }
  return output;
}
