{
  RowResolver inputRR=opParseCtx.get(input).getRR();
  QBMetaData qbm=qb.getMetaData();
  Integer dest_type=qbm.getDestTypeForAlias(dest);
  Table dest_tab;
  String queryTmpdir;
  Path dest_path;
  TableDesc table_desc=null;
  int currentTableId=0;
  boolean isLocal=false;
switch (dest_type.intValue()) {
case QBMetaData.DEST_TABLE:
{
      dest_tab=qbm.getDestTableForAlias(dest);
      List<FieldSchema> parts=dest_tab.getTTable().getPartitionKeys();
      if (parts != null && parts.size() > 0) {
        throw new SemanticException(ErrorMsg.NEED_PARTITION_ERROR.getMsg());
      }
      dest_path=dest_tab.getPath();
      queryTmpdir=ctx.getExternalTmpFileURI(dest_path.toUri());
      table_desc=Utilities.getTableDesc(dest_tab);
      idToTableNameMap.put(String.valueOf(destTableId),dest_tab.getName());
      currentTableId=destTableId;
      destTableId++;
      loadTableWork.add(new LoadTableDesc(queryTmpdir,ctx.getExternalTmpFileURI(dest_path.toUri()),table_desc,new HashMap<String,String>()));
      if (!outputs.add(new WriteEntity(dest_tab))) {
        throw new SemanticException(ErrorMsg.OUTPUT_SPECIFIED_MULTIPLE_TIMES.getMsg(dest_tab.getName()));
      }
      break;
    }
case QBMetaData.DEST_PARTITION:
{
    Partition dest_part=qbm.getDestPartitionForAlias(dest);
    dest_tab=dest_part.getTable();
    dest_path=dest_part.getPath()[0];
    queryTmpdir=ctx.getExternalTmpFileURI(dest_path.toUri());
    table_desc=Utilities.getTableDesc(dest_tab);
    idToTableNameMap.put(String.valueOf(destTableId),dest_tab.getName());
    currentTableId=destTableId;
    destTableId++;
    loadTableWork.add(new LoadTableDesc(queryTmpdir,ctx.getExternalTmpFileURI(dest_path.toUri()),table_desc,dest_part.getSpec()));
    if (!outputs.add(new WriteEntity(dest_part))) {
      throw new SemanticException(ErrorMsg.OUTPUT_SPECIFIED_MULTIPLE_TIMES.getMsg(dest_tab.getName() + "@" + dest_part.getName()));
    }
    break;
  }
case QBMetaData.DEST_LOCAL_FILE:
isLocal=true;
case QBMetaData.DEST_DFS_FILE:
{
dest_path=new Path(qbm.getDestFileForAlias(dest));
String destStr=dest_path.toString();
if (isLocal) {
  queryTmpdir=ctx.getMRTmpFileURI();
}
 else {
  try {
    Path qPath=FileUtils.makeQualified(dest_path,conf);
    queryTmpdir=ctx.getExternalTmpFileURI(qPath.toUri());
  }
 catch (  Exception e) {
    throw new SemanticException("Error creating temporary folder on: " + dest_path,e);
  }
}
String cols=new String();
String colTypes=new String();
Vector<ColumnInfo> colInfos=inputRR.getColumnInfos();
List<FieldSchema> field_schemas=null;
CreateTableDesc tblDesc=qb.getTableDesc();
if (tblDesc != null) {
  field_schemas=new ArrayList<FieldSchema>();
}
boolean first=true;
for (ColumnInfo colInfo : colInfos) {
  String[] nm=inputRR.reverseLookup(colInfo.getInternalName());
  if (nm[1] != null) {
    colInfo.setAlias(nm[1]);
  }
  if (field_schemas != null) {
    FieldSchema col=new FieldSchema();
    if (nm[1] != null) {
      col.setName(colInfo.getAlias());
    }
 else {
      col.setName(colInfo.getInternalName());
    }
    col.setType(colInfo.getType().getTypeName());
    field_schemas.add(col);
  }
  if (!first) {
    cols=cols.concat(",");
    colTypes=colTypes.concat(":");
  }
  first=false;
  cols=cols.concat(colInfo.getInternalName());
  String tName=colInfo.getType().getTypeName();
  if (tName.equals(Constants.VOID_TYPE_NAME)) {
    colTypes=colTypes.concat(Constants.STRING_TYPE_NAME);
  }
 else {
    colTypes=colTypes.concat(tName);
  }
}
if (tblDesc != null) {
  tblDesc.setCols(field_schemas);
}
if (!ctx.isMRTmpFileURI(destStr)) {
  idToTableNameMap.put(String.valueOf(destTableId),destStr);
  currentTableId=destTableId;
  destTableId++;
}
boolean isDfsDir=(dest_type.intValue() == QBMetaData.DEST_DFS_FILE);
loadFileWork.add(new LoadFileDesc(queryTmpdir,destStr,isDfsDir,cols,colTypes));
if (tblDesc == null) {
  table_desc=PlanUtils.getDefaultTableDesc(Integer.toString(Utilities.ctrlaCode),cols,colTypes,false);
}
 else {
  table_desc=PlanUtils.getTableDesc(tblDesc,cols,colTypes);
}
if (!outputs.add(new WriteEntity(destStr,!isDfsDir))) {
  throw new SemanticException(ErrorMsg.OUTPUT_SPECIFIED_MULTIPLE_TIMES.getMsg(destStr));
}
break;
}
default :
throw new SemanticException("Unknown destination type: " + dest_type);
}
input=genConversionSelectOperator(dest,qb,input,table_desc);
inputRR=opParseCtx.get(input).getRR();
Vector<ColumnInfo> vecCol=new Vector<ColumnInfo>();
try {
StructObjectInspector rowObjectInspector=(StructObjectInspector)table_desc.getDeserializer().getObjectInspector();
List<? extends StructField> fields=rowObjectInspector.getAllStructFieldRefs();
for (int i=0; i < fields.size(); i++) {
vecCol.add(new ColumnInfo(fields.get(i).getFieldName(),TypeInfoUtils.getTypeInfoFromObjectInspector(fields.get(i).getFieldObjectInspector()),"",false));
}
}
 catch (Exception e) {
throw new SemanticException(e.getMessage());
}
RowSchema fsRS=new RowSchema(vecCol);
Operator output=putOpInsertMap(OperatorFactory.getAndMakeChild(new FileSinkDesc(queryTmpdir,table_desc,conf.getBoolVar(HiveConf.ConfVars.COMPRESSRESULT),currentTableId),fsRS,input),inputRR);
LOG.debug("Created FileSink Plan for clause: " + dest + "dest_path: "+ dest_path+ " row schema: "+ inputRR.toString());
return output;
}
