{
  RowResolver inputRR=opParseCtx.get(input).getRR();
  String queryTmpdir=this.scratchDir + File.separator + this.randomid+ '.'+ this.pathid+ '.'+ dest;
  this.pathid++;
  String dest_path=null;
  tableDesc table_desc=null;
  int currentTableId=0;
  Integer dest_type=qb.getMetaData().getDestTypeForAlias(dest);
switch (dest_type.intValue()) {
case QBMetaData.DEST_TABLE:
{
      Table dest_tab=qb.getMetaData().getDestTableForAlias(dest);
      table_desc=Utilities.getTableDesc(dest_tab);
      this.idToTableNameMap.put(String.valueOf(this.destTableId),dest_tab.getName());
      currentTableId=this.destTableId;
      this.destTableId++;
      dest_path=dest_tab.getPath().toString();
      this.loadTableWork.add(new loadTableDesc(queryTmpdir,table_desc,new HashMap<String,String>()));
      break;
    }
case QBMetaData.DEST_PARTITION:
{
    Partition dest_part=qb.getMetaData().getDestPartitionForAlias(dest);
    Table dest_tab=dest_part.getTable();
    table_desc=Utilities.getTableDesc(dest_tab);
    dest_path=dest_part.getPath()[0].toString();
    this.idToTableNameMap.put(String.valueOf(this.destTableId),dest_tab.getName());
    currentTableId=this.destTableId;
    this.destTableId++;
    this.loadTableWork.add(new loadTableDesc(queryTmpdir,table_desc,dest_part.getSpec()));
    break;
  }
case QBMetaData.DEST_LOCAL_FILE:
case QBMetaData.DEST_DFS_FILE:
{
  dest_path=qb.getMetaData().getDestFileForAlias(dest);
  String cols=new String();
  Vector<ColumnInfo> colInfos=inputRR.getColumnInfos();
  boolean first=true;
  for (  ColumnInfo colInfo : colInfos) {
    String[] nm=inputRR.reverseLookup(colInfo.getInternalName());
    if (!first)     cols=cols.concat(",");
    first=false;
    if (nm[0] == null)     cols=cols.concat(nm[1]);
 else     cols=cols.concat(nm[0] + "." + nm[1]);
  }
  if (!dest_path.startsWith(this.scratchDir + File.separator)) {
    this.idToTableNameMap.put(String.valueOf(this.destTableId),dest_path);
    currentTableId=this.destTableId;
    this.destTableId++;
  }
  this.loadFileWork.add(new loadFileDesc(queryTmpdir,dest_path,(dest_type.intValue() == QBMetaData.DEST_DFS_FILE),cols));
  table_desc=PlanUtils.getDefaultTableDesc(Integer.toString(Utilities.ctrlaCode),cols);
  break;
}
default :
throw new SemanticException("Unknown destination type: " + dest_type);
}
input=genConversionSelectOperator(dest,qb,input,table_desc);
Operator output=putOpInsertMap(OperatorFactory.getAndMakeChild(new fileSinkDesc(queryTmpdir,table_desc,conf.getBoolVar(HiveConf.ConfVars.COMPRESSRESULT),currentTableId),new RowSchema(inputRR.getColumnInfos()),input),inputRR);
LOG.debug("Created FileSink Plan for clause: " + dest + "dest_path: "+ dest_path+ " row schema: "+ inputRR.toString());
return output;
}
