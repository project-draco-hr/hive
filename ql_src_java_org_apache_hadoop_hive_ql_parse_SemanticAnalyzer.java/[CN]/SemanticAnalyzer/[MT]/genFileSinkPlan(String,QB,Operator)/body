{
  RowResolver inputRR=opParseCtx.get(input).getRowResolver();
  QBMetaData qbm=qb.getMetaData();
  Integer dest_type=qbm.getDestTypeForAlias(dest);
  Table dest_tab=null;
  boolean destTableIsAcid=false;
  Partition dest_part=null;
  Path queryTmpdir=null;
  Path dest_path=null;
  TableDesc table_desc=null;
  int currentTableId=0;
  boolean isLocal=false;
  SortBucketRSCtx rsCtx=new SortBucketRSCtx();
  DynamicPartitionCtx dpCtx=null;
  LoadTableDesc ltd=null;
  boolean holdDDLTime=checkHoldDDLTime(qb);
  ListBucketingCtx lbCtx=null;
switch (dest_type.intValue()) {
case QBMetaData.DEST_TABLE:
{
      dest_tab=qbm.getDestTableForAlias(dest);
      destTableIsAcid=isAcidTable(dest_tab);
      if ((!conf.getBoolVar(HiveConf.ConfVars.HIVE_INSERT_INTO_EXTERNAL_TABLES)) && (dest_tab.getTableType().equals(TableType.EXTERNAL_TABLE))) {
        throw new SemanticException(ErrorMsg.INSERT_EXTERNAL_TABLE.getMsg(dest_tab.getTableName()));
      }
      Map<String,String> partSpec=qbm.getPartSpecForAlias(dest);
      dest_path=dest_tab.getPath();
      if (dest_tab.isImmutable() && qb.getParseInfo().isInsertIntoTable(dest_tab.getDbName(),dest_tab.getTableName())) {
        try {
          FileSystem fs=dest_path.getFileSystem(conf);
          if (!MetaStoreUtils.isDirEmpty(fs,dest_path)) {
            LOG.warn("Attempted write into an immutable table : " + dest_tab.getTableName() + " : "+ dest_path);
            throw new SemanticException(ErrorMsg.INSERT_INTO_IMMUTABLE_TABLE.getMsg(dest_tab.getTableName()));
          }
        }
 catch (        IOException ioe) {
          LOG.warn("Error while trying to determine if immutable table has any data : " + dest_tab.getTableName() + " : "+ dest_path);
          throw new SemanticException(ErrorMsg.INSERT_INTO_IMMUTABLE_TABLE.getMsg(ioe.getMessage()));
        }
      }
      List<FieldSchema> parts=dest_tab.getPartitionKeys();
      if (parts != null && parts.size() > 0) {
        if (partSpec == null || partSpec.size() == 0) {
          throw new SemanticException(generateErrorMessage(qb.getParseInfo().getDestForClause(dest),ErrorMsg.NEED_PARTITION_ERROR.getMsg()));
        }
        if (holdDDLTime) {
          throw new SemanticException(generateErrorMessage(qb.getParseInfo().getDestForClause(dest),ErrorMsg.HOLD_DDLTIME_ON_NONEXIST_PARTITIONS.getMsg()));
        }
        dpCtx=qbm.getDPCtx(dest);
        if (dpCtx == null) {
          dest_tab.validatePartColumnNames(partSpec,false);
          dpCtx=new DynamicPartitionCtx(dest_tab,partSpec,conf.getVar(HiveConf.ConfVars.DEFAULTPARTITIONNAME),conf.getIntVar(HiveConf.ConfVars.DYNAMICPARTITIONMAXPARTSPERNODE));
          qbm.setDPCtx(dest,dpCtx);
        }
        if (!HiveConf.getBoolVar(conf,HiveConf.ConfVars.DYNAMICPARTITIONING)) {
          throw new SemanticException(generateErrorMessage(qb.getParseInfo().getDestForClause(dest),ErrorMsg.DYNAMIC_PARTITION_DISABLED.getMsg()));
        }
        if (dpCtx.getSPPath() != null) {
          dest_path=new Path(dest_tab.getPath(),dpCtx.getSPPath());
        }
        if ((dest_tab.getNumBuckets() > 0) && (conf.getBoolVar(HiveConf.ConfVars.HIVEENFORCEBUCKETING))) {
          dpCtx.setNumBuckets(dest_tab.getNumBuckets());
        }
      }
      boolean isNonNativeTable=dest_tab.isNonNative();
      if (isNonNativeTable) {
        queryTmpdir=dest_path;
      }
 else {
        queryTmpdir=ctx.getExternalTmpPath(dest_path);
      }
      if (dpCtx != null) {
        dpCtx.setRootPath(queryTmpdir);
      }
      table_desc=Utilities.getTableDesc(dest_tab);
      input=genBucketingSortingDest(dest,input,qb,table_desc,dest_tab,rsCtx);
      idToTableNameMap.put(String.valueOf(destTableId),dest_tab.getTableName());
      currentTableId=destTableId;
      destTableId++;
      lbCtx=constructListBucketingCtx(dest_tab.getSkewedColNames(),dest_tab.getSkewedColValues(),dest_tab.getSkewedColValueLocationMaps(),dest_tab.isStoredAsSubDirectories(),conf);
      if (!isNonNativeTable) {
        AcidUtils.Operation acidOp=AcidUtils.Operation.NOT_ACID;
        if (destTableIsAcid) {
          acidOp=getAcidType(table_desc.getOutputFileFormatClass());
          checkAcidConstraints(qb,table_desc,dest_tab);
        }
        ltd=new LoadTableDesc(queryTmpdir,table_desc,dpCtx,acidOp);
        ltd.setReplace(!qb.getParseInfo().isInsertIntoTable(dest_tab.getDbName(),dest_tab.getTableName()));
        ltd.setLbCtx(lbCtx);
        if (holdDDLTime) {
          LOG.info("this query will not update transient_lastDdlTime!");
          ltd.setHoldDDLTime(true);
        }
        loadTableWork.add(ltd);
      }
      WriteEntity output=null;
      if ((dpCtx == null || dpCtx.getNumDPCols() == 0)) {
        output=new WriteEntity(dest_tab,determineWriteType(ltd,isNonNativeTable));
        if (!outputs.add(output)) {
          throw new SemanticException(ErrorMsg.OUTPUT_SPECIFIED_MULTIPLE_TIMES.getMsg(dest_tab.getTableName()));
        }
      }
      if ((dpCtx != null) && (dpCtx.getNumDPCols() >= 0)) {
        if (dpCtx.getNumSPCols() == 0) {
          output=new WriteEntity(dest_tab,determineWriteType(ltd,isNonNativeTable),false);
          outputs.add(output);
        }
 else {
          try {
            String ppath=dpCtx.getSPPath();
            ppath=ppath.substring(0,ppath.length() - 1);
            DummyPartition p=new DummyPartition(dest_tab,dest_tab.getDbName() + "@" + dest_tab.getTableName()+ "@"+ ppath,partSpec);
            output=new WriteEntity(p,WriteEntity.WriteType.INSERT,false);
            outputs.add(output);
          }
 catch (          HiveException e) {
            throw new SemanticException(e.getMessage(),e);
          }
        }
      }
      ctx.getLoadTableOutputMap().put(ltd,output);
      break;
    }
case QBMetaData.DEST_PARTITION:
{
    dest_part=qbm.getDestPartitionForAlias(dest);
    dest_tab=dest_part.getTable();
    destTableIsAcid=isAcidTable(dest_tab);
    if ((!conf.getBoolVar(HiveConf.ConfVars.HIVE_INSERT_INTO_EXTERNAL_TABLES)) && dest_tab.getTableType().equals(TableType.EXTERNAL_TABLE)) {
      throw new SemanticException(ErrorMsg.INSERT_EXTERNAL_TABLE.getMsg(dest_tab.getTableName()));
    }
    Path tabPath=dest_tab.getPath();
    Path partPath=dest_part.getDataLocation();
    if (dest_tab.isImmutable() && qb.getParseInfo().isInsertIntoTable(dest_tab.getDbName(),dest_tab.getTableName())) {
      qb.getParseInfo().isInsertToTable();
      try {
        FileSystem fs=partPath.getFileSystem(conf);
        if (!MetaStoreUtils.isDirEmpty(fs,partPath)) {
          LOG.warn("Attempted write into an immutable table partition : " + dest_tab.getTableName() + " : "+ partPath);
          throw new SemanticException(ErrorMsg.INSERT_INTO_IMMUTABLE_TABLE.getMsg(dest_tab.getTableName()));
        }
      }
 catch (      IOException ioe) {
        LOG.warn("Error while trying to determine if immutable table partition has any data : " + dest_tab.getTableName() + " : "+ partPath);
        throw new SemanticException(ErrorMsg.INSERT_INTO_IMMUTABLE_TABLE.getMsg(ioe.getMessage()));
      }
    }
    dest_path=new Path(tabPath.toUri().getScheme(),tabPath.toUri().getAuthority(),partPath.toUri().getPath());
    queryTmpdir=ctx.getExternalTmpPath(dest_path);
    table_desc=Utilities.getTableDesc(dest_tab);
    input=genBucketingSortingDest(dest,input,qb,table_desc,dest_tab,rsCtx);
    idToTableNameMap.put(String.valueOf(destTableId),dest_tab.getTableName());
    currentTableId=destTableId;
    destTableId++;
    lbCtx=constructListBucketingCtx(dest_part.getSkewedColNames(),dest_part.getSkewedColValues(),dest_part.getSkewedColValueLocationMaps(),dest_part.isStoredAsSubDirectories(),conf);
    AcidUtils.Operation acidOp=AcidUtils.Operation.NOT_ACID;
    if (destTableIsAcid) {
      acidOp=getAcidType(table_desc.getOutputFileFormatClass());
      checkAcidConstraints(qb,table_desc,dest_tab);
    }
    ltd=new LoadTableDesc(queryTmpdir,table_desc,dest_part.getSpec(),acidOp);
    ltd.setReplace(!qb.getParseInfo().isInsertIntoTable(dest_tab.getDbName(),dest_tab.getTableName()));
    ltd.setLbCtx(lbCtx);
    if (holdDDLTime) {
      try {
        Partition part=db.getPartition(dest_tab,dest_part.getSpec(),false);
        if (part == null) {
          throw new SemanticException(generateErrorMessage(qb.getParseInfo().getDestForClause(dest),ErrorMsg.HOLD_DDLTIME_ON_NONEXIST_PARTITIONS.getMsg()));
        }
      }
 catch (      HiveException e) {
        throw new SemanticException(e);
      }
      LOG.info("this query will not update transient_lastDdlTime!");
      ltd.setHoldDDLTime(true);
    }
    loadTableWork.add(ltd);
    if (!outputs.add(new WriteEntity(dest_part,(ltd.getReplace() ? WriteEntity.WriteType.INSERT_OVERWRITE : WriteEntity.WriteType.INSERT)))) {
      throw new SemanticException(ErrorMsg.OUTPUT_SPECIFIED_MULTIPLE_TIMES.getMsg(dest_tab.getTableName() + "@" + dest_part.getName()));
    }
    break;
  }
case QBMetaData.DEST_LOCAL_FILE:
isLocal=true;
case QBMetaData.DEST_DFS_FILE:
{
dest_path=new Path(qbm.getDestFileForAlias(dest));
if (isLocal) {
  queryTmpdir=ctx.getMRTmpPath();
}
 else {
  try {
    Path qPath=FileUtils.makeQualified(dest_path,conf);
    queryTmpdir=ctx.getExternalTmpPath(qPath);
  }
 catch (  Exception e) {
    throw new SemanticException("Error creating temporary folder on: " + dest_path,e);
  }
}
String cols="";
String colTypes="";
ArrayList<ColumnInfo> colInfos=inputRR.getColumnInfos();
List<FieldSchema> field_schemas=null;
CreateTableDesc tblDesc=qb.getTableDesc();
if (tblDesc != null) {
  field_schemas=new ArrayList<FieldSchema>();
}
boolean first=true;
for (ColumnInfo colInfo : colInfos) {
  String[] nm=inputRR.reverseLookup(colInfo.getInternalName());
  if (nm[1] != null) {
    colInfo.setAlias(nm[1]);
  }
  String colName=colInfo.getInternalName();
  if (field_schemas != null) {
    FieldSchema col=new FieldSchema();
    if (!("".equals(nm[0])) && nm[1] != null) {
      colName=unescapeIdentifier(colInfo.getAlias()).toLowerCase();
    }
    col.setName(colName);
    ;
    col.setType(colInfo.getType().getTypeName());
    field_schemas.add(col);
  }
  if (!first) {
    cols=cols.concat(",");
    colTypes=colTypes.concat(":");
  }
  first=false;
  cols=cols.concat(colName);
  String tName=colInfo.getType().getTypeName();
  if (tName.equals(serdeConstants.VOID_TYPE_NAME)) {
    colTypes=colTypes.concat(serdeConstants.STRING_TYPE_NAME);
  }
 else {
    colTypes=colTypes.concat(tName);
  }
}
if (tblDesc != null) {
  tblDesc.setCols(new ArrayList<FieldSchema>(field_schemas));
}
boolean isDestTempFile=true;
if (!ctx.isMRTmpFileURI(dest_path.toUri().toString())) {
  idToTableNameMap.put(String.valueOf(destTableId),dest_path.toUri().toString());
  currentTableId=destTableId;
  destTableId++;
  isDestTempFile=false;
}
boolean isDfsDir=(dest_type.intValue() == QBMetaData.DEST_DFS_FILE);
loadFileWork.add(new LoadFileDesc(tblDesc,queryTmpdir,dest_path,isDfsDir,cols,colTypes));
if (tblDesc == null) {
  if (qb.getIsQuery()) {
    String fileFormat=HiveConf.getVar(conf,HiveConf.ConfVars.HIVEQUERYRESULTFILEFORMAT);
    table_desc=PlanUtils.getDefaultQueryOutputTableDesc(cols,colTypes,fileFormat);
  }
 else {
    table_desc=PlanUtils.getDefaultTableDesc(qb.getLLocalDirectoryDesc(),cols,colTypes);
  }
}
 else {
  table_desc=PlanUtils.getTableDesc(tblDesc,cols,colTypes);
}
if (!outputs.add(new WriteEntity(dest_path,!isDfsDir,isDestTempFile))) {
  throw new SemanticException(ErrorMsg.OUTPUT_SPECIFIED_MULTIPLE_TIMES.getMsg(dest_path.toUri().toString()));
}
break;
}
default :
throw new SemanticException("Unknown destination type: " + dest_type);
}
input=genConversionSelectOperator(dest,qb,input,table_desc,dpCtx);
inputRR=opParseCtx.get(input).getRowResolver();
ArrayList<ColumnInfo> vecCol=new ArrayList<ColumnInfo>();
if (updating() || deleting()) {
vecCol.add(new ColumnInfo(VirtualColumn.ROWID.getName(),VirtualColumn.ROWID.getTypeInfo(),"",true));
}
 else {
try {
StructObjectInspector rowObjectInspector=(StructObjectInspector)table_desc.getDeserializer().getObjectInspector();
List<? extends StructField> fields=rowObjectInspector.getAllStructFieldRefs();
for (int i=0; i < fields.size(); i++) {
vecCol.add(new ColumnInfo(fields.get(i).getFieldName(),TypeInfoUtils.getTypeInfoFromObjectInspector(fields.get(i).getFieldObjectInspector()),"",false));
}
}
 catch (Exception e) {
throw new SemanticException(e.getMessage(),e);
}
}
RowSchema fsRS=new RowSchema(vecCol);
boolean canBeMerged=(dest_tab == null || !((dest_tab.getNumBuckets() > 0 && conf.getBoolVar(HiveConf.ConfVars.HIVEENFORCEBUCKETING)) || (dest_tab.getSortCols() != null && dest_tab.getSortCols().size() > 0 && conf.getBoolVar(HiveConf.ConfVars.HIVEENFORCESORTING))));
canBeMerged&=!destTableIsAcid;
FileSinkDesc fileSinkDesc=new FileSinkDesc(queryTmpdir,table_desc,conf.getBoolVar(HiveConf.ConfVars.COMPRESSRESULT),currentTableId,rsCtx.isMultiFileSpray(),canBeMerged,rsCtx.getNumFiles(),rsCtx.getTotalFiles(),rsCtx.getPartnCols(),dpCtx);
if (destTableIsAcid) {
AcidUtils.Operation wt=updating() ? AcidUtils.Operation.UPDATE : (deleting() ? AcidUtils.Operation.DELETE : AcidUtils.Operation.INSERT);
fileSinkDesc.setWriteType(wt);
acidFileSinks.add(fileSinkDesc);
}
if (lbCtx != null) {
lbCtx.processRowSkewedIndex(fsRS);
lbCtx.calculateSkewedValueSubDirList();
}
fileSinkDesc.setLbCtx(lbCtx);
fileSinkDesc.setStatsCollectRawDataSize(HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_STATS_COLLECT_RAWDATASIZE));
fileSinkDesc.setStatsAggPrefix(fileSinkDesc.getDirName().toString());
if (HiveConf.getVar(conf,HIVESTATSDBCLASS).equalsIgnoreCase(StatDB.fs.name())) {
String statsTmpLoc=ctx.getExternalTmpPath(queryTmpdir).toString();
LOG.info("Set stats collection dir : " + statsTmpLoc);
conf.set(StatsSetupConst.STATS_TMP_LOC,statsTmpLoc);
}
if (dest_part != null) {
try {
String staticSpec=Warehouse.makePartPath(dest_part.getSpec());
fileSinkDesc.setStaticSpec(staticSpec);
}
 catch (MetaException e) {
throw new SemanticException(e);
}
}
 else if (dpCtx != null) {
fileSinkDesc.setStaticSpec(dpCtx.getSPPath());
}
Operator output=putOpInsertMap(OperatorFactory.getAndMakeChild(fileSinkDesc,fsRS,input),inputRR);
if (ltd != null && SessionState.get() != null) {
SessionState.get().getLineageState().mapDirToFop(ltd.getSourcePath(),(FileSinkOperator)output);
}
if (LOG.isDebugEnabled()) {
LOG.debug("Created FileSink Plan for clause: " + dest + "dest_path: "+ dest_path+ " row schema: "+ inputRR.toString());
}
fsopToTable.put((FileSinkOperator)output,dest_tab);
return output;
}
