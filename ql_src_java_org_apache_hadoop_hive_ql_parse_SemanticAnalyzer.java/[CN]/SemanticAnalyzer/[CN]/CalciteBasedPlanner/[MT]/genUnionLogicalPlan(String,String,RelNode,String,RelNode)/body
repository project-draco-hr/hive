{
  HiveUnion unionRel=null;
  RowResolver leftRR=this.relToHiveRR.get(leftRel);
  RowResolver rightRR=this.relToHiveRR.get(rightRel);
  HashMap<String,ColumnInfo> leftmap=leftRR.getFieldMap(leftalias);
  HashMap<String,ColumnInfo> rightmap=rightRR.getFieldMap(rightalias);
  if (leftmap.size() != rightmap.size()) {
    throw new SemanticException("Schema of both sides of union should match.");
  }
  ASTNode tabref=qb.getAliases().isEmpty() ? null : qb.getParseInfo().getSrcForAlias(qb.getAliases().get(0));
  for (  Map.Entry<String,ColumnInfo> lEntry : leftmap.entrySet()) {
    String field=lEntry.getKey();
    ColumnInfo lInfo=lEntry.getValue();
    ColumnInfo rInfo=rightmap.get(field);
    if (rInfo == null) {
      throw new SemanticException(generateErrorMessage(tabref,"Schema of both sides of union should match. " + rightalias + " does not have the field "+ field));
    }
    if (lInfo == null) {
      throw new SemanticException(generateErrorMessage(tabref,"Schema of both sides of union should match. " + leftalias + " does not have the field "+ field));
    }
    if (!lInfo.getInternalName().equals(rInfo.getInternalName())) {
      throw new CalciteSemanticException(generateErrorMessage(tabref,"Schema of both sides of union should match: field " + field + ":"+ " appears on the left side of the UNION at column position: "+ getPositionFromInternalName(lInfo.getInternalName())+ ", and on the right side of the UNION at column position: "+ getPositionFromInternalName(rInfo.getInternalName())+ ". Column positions should match for a UNION"));
    }
    TypeInfo commonTypeInfo=FunctionRegistry.getCommonClassForUnionAll(lInfo.getType(),rInfo.getType());
    if (commonTypeInfo == null) {
      throw new CalciteSemanticException(generateErrorMessage(tabref,"Schema of both sides of union should match: Column " + field + " is of type "+ lInfo.getType().getTypeName()+ " on first table and type "+ rInfo.getType().getTypeName()+ " on second table"));
    }
  }
  RowResolver unionoutRR=new RowResolver();
  for (  Map.Entry<String,ColumnInfo> lEntry : leftmap.entrySet()) {
    String field=lEntry.getKey();
    ColumnInfo lInfo=lEntry.getValue();
    ColumnInfo rInfo=rightmap.get(field);
    ColumnInfo unionColInfo=new ColumnInfo(lInfo);
    unionColInfo.setTabAlias(unionalias);
    unionColInfo.setType(FunctionRegistry.getCommonClassForUnionAll(lInfo.getType(),rInfo.getType()));
    unionoutRR.put(unionalias,field,unionColInfo);
  }
  boolean leftNeedsTypeCast=false;
  boolean rightNeedsTypeCast=false;
  List<RexNode> leftProjs=new ArrayList<RexNode>();
  List<RexNode> rightProjs=new ArrayList<RexNode>();
  List<RelDataTypeField> leftRowDT=leftRel.getRowType().getFieldList();
  List<RelDataTypeField> rightRowDT=rightRel.getRowType().getFieldList();
  RelDataType leftFieldDT;
  RelDataType rightFieldDT;
  RelDataType unionFieldDT;
  for (int i=0; i < leftRowDT.size(); i++) {
    leftFieldDT=leftRowDT.get(i).getType();
    rightFieldDT=rightRowDT.get(i).getType();
    if (!leftFieldDT.equals(rightFieldDT)) {
      unionFieldDT=TypeConverter.convert(unionoutRR.getColumnInfos().get(i).getType(),cluster.getTypeFactory());
      if (!unionFieldDT.equals(leftFieldDT)) {
        leftNeedsTypeCast=true;
      }
      leftProjs.add(cluster.getRexBuilder().ensureType(unionFieldDT,cluster.getRexBuilder().makeInputRef(leftFieldDT,i),true));
      if (!unionFieldDT.equals(rightFieldDT)) {
        rightNeedsTypeCast=true;
      }
      rightProjs.add(cluster.getRexBuilder().ensureType(unionFieldDT,cluster.getRexBuilder().makeInputRef(rightFieldDT,i),true));
    }
 else {
      leftProjs.add(cluster.getRexBuilder().ensureType(leftFieldDT,cluster.getRexBuilder().makeInputRef(leftFieldDT,i),true));
      rightProjs.add(cluster.getRexBuilder().ensureType(rightFieldDT,cluster.getRexBuilder().makeInputRef(rightFieldDT,i),true));
    }
  }
  RelNode unionLeftInput=leftRel;
  RelNode unionRightInput=rightRel;
  if (leftNeedsTypeCast) {
    unionLeftInput=HiveProject.create(leftRel,leftProjs,leftRel.getRowType().getFieldNames());
  }
  if (rightNeedsTypeCast) {
    unionRightInput=HiveProject.create(rightRel,rightProjs,rightRel.getRowType().getFieldNames());
  }
  ImmutableList.Builder bldr=new ImmutableList.Builder<RelNode>();
  bldr.add(unionLeftInput);
  bldr.add(unionRightInput);
  unionRel=new HiveUnion(cluster,TraitsUtil.getDefaultTraitSet(cluster),bldr.build());
  relToHiveRR.put(unionRel,unionoutRR);
  relToHiveColNameCalcitePosMap.put(unionRel,this.buildHiveToCalciteColumnMap(unionoutRR,unionRel));
  return unionRel;
}
