{
  ExprNodeDesc filterCondn=genExprNodeDesc(filterExpr,relToHiveRR.get(srcRel));
  if (filterCondn instanceof ExprNodeConstantDesc && !filterCondn.getTypeString().equals(serdeConstants.BOOLEAN_TYPE_NAME)) {
    throw new OptiqSemanticException("Filter expression with non-boolean return type.");
  }
  ImmutableMap<String,Integer> hiveColNameOptiqPosMap=this.relToHiveColNameOptiqPosMap.get(srcRel);
  RexNode convertedFilterExpr=new RexNodeConverter(cluster,srcRel.getRowType(),hiveColNameOptiqPosMap,0,true).convert(filterCondn);
  RelNode filterRel=new HiveFilterRel(cluster,cluster.traitSetOf(HiveRel.CONVENTION),srcRel,convertedFilterExpr);
  this.relToHiveColNameOptiqPosMap.put(filterRel,hiveColNameOptiqPosMap);
  relToHiveRR.put(filterRel,relToHiveRR.get(srcRel));
  relToHiveColNameOptiqPosMap.put(filterRel,hiveColNameOptiqPosMap);
  return filterRel;
}
