{
  int numSrcColumns=srcRel.getRowType().getFieldCount();
  List<ASTNode> subQueriesInOriginalTree=SubQueryUtils.findSubQueries(searchCond);
  if (subQueriesInOriginalTree.size() > 0) {
    if (qb.getSubQueryPredicateDef() != null) {
      throw new SemanticException(ErrorMsg.UNSUPPORTED_SUBQUERY_EXPRESSION.getMsg(subQueriesInOriginalTree.get(0),"Nested SubQuery expressions are not supported."));
    }
    if (subQueriesInOriginalTree.size() > 1) {
      throw new SemanticException(ErrorMsg.UNSUPPORTED_SUBQUERY_EXPRESSION.getMsg(subQueriesInOriginalTree.get(1),"Only 1 SubQuery expression is supported."));
    }
    ASTNode clonedSearchCond=(ASTNode)SubQueryUtils.adaptor.dupTree(searchCond);
    List<ASTNode> subQueries=SubQueryUtils.findSubQueries(clonedSearchCond);
    RowResolver inputRR=relToHiveRR.get(srcRel);
    RowResolver outerQBRR=inputRR;
    ImmutableMap<String,Integer> outerQBPosMap=relToHiveColNameOptiqPosMap.get(srcRel);
    for (int i=0; i < subQueries.size(); i++) {
      ASTNode subQueryAST=subQueries.get(i);
      ASTNode originalSubQueryAST=subQueriesInOriginalTree.get(i);
      int sqIdx=qb.incrNumSubQueryPredicates();
      clonedSearchCond=SubQueryUtils.rewriteParentQueryWhere(clonedSearchCond,subQueryAST);
      QBSubQuery subQuery=SubQueryUtils.buildSubQuery(qb.getId(),sqIdx,subQueryAST,originalSubQueryAST,ctx);
      if (!forHavingClause) {
        qb.setWhereClauseSubQueryPredicate(subQuery);
      }
 else {
        qb.setHavingClauseSubQueryPredicate(subQuery);
      }
      String havingInputAlias=null;
      if (forHavingClause) {
        havingInputAlias="gby_sq" + sqIdx;
        aliasToRel.put(havingInputAlias,srcRel);
      }
      subQuery.validateAndRewriteAST(inputRR,forHavingClause,havingInputAlias,aliasToRel.keySet());
      QB qbSQ=new QB(subQuery.getOuterQueryId(),subQuery.getAlias(),true);
      qbSQ.setSubQueryDef(subQuery.getSubQuery());
      Phase1Ctx ctx_1=initPhase1Ctx();
      doPhase1(subQuery.getSubQueryAST(),qbSQ,ctx_1);
      getMetaData(qbSQ);
      RelNode subQueryRelNode=genLogicalPlan(qbSQ);
      aliasToRel.put(subQuery.getAlias(),subQueryRelNode);
      RowResolver sqRR=relToHiveRR.get(subQueryRelNode);
      if (subQuery.getOperator().getType() != SubQueryType.EXISTS && subQuery.getOperator().getType() != SubQueryType.NOT_EXISTS && sqRR.getColumnInfos().size() - subQuery.getNumOfCorrelationExprsAddedToSQSelect() > 1) {
        throw new SemanticException(ErrorMsg.INVALID_SUBQUERY_EXPRESSION.getMsg(subQueryAST,"SubQuery can contain only 1 item in Select List."));
      }
      if (subQuery.getNotInCheck() != null) {
        QBSubQuery.NotInCheck notInCheck=subQuery.getNotInCheck();
        notInCheck.setSQRR(sqRR);
        QB qbSQ_nic=new QB(subQuery.getOuterQueryId(),notInCheck.getAlias(),true);
        qbSQ_nic.setSubQueryDef(notInCheck.getSubQuery());
        ctx_1=initPhase1Ctx();
        doPhase1(notInCheck.getSubQueryAST(),qbSQ_nic,ctx_1);
        getMetaData(qbSQ_nic);
        RelNode subQueryNICRelNode=genLogicalPlan(qbSQ_nic);
        aliasToRel.put(notInCheck.getAlias(),subQueryNICRelNode);
        srcRel=genJoinRelNode(srcRel,subQueryNICRelNode,JoinType.INNER,notInCheck.getJoinConditionAST());
        inputRR=relToHiveRR.get(srcRel);
        if (forHavingClause) {
          aliasToRel.put(havingInputAlias,srcRel);
        }
      }
      subQuery.buildJoinCondition(inputRR,sqRR,forHavingClause,havingInputAlias);
      srcRel=genJoinRelNode(srcRel,subQueryRelNode,subQuery.getJoinType(),subQuery.getJoinConditionAST());
      searchCond=subQuery.updateOuterQueryFilter(clonedSearchCond);
      srcRel=genFilterRelNode(searchCond,srcRel);
      if (subQuery.getOperator().getType() != SubQueryType.NOT_EXISTS || subQuery.getOperator().getType() != SubQueryType.NOT_IN) {
        srcRel=projectLeftOuterSide(srcRel,numSrcColumns);
      }
    }
    relToHiveRR.put(srcRel,outerQBRR);
    relToHiveColNameOptiqPosMap.put(srcRel,outerQBPosMap);
    return srcRel;
  }
  return genFilterRelNode(searchCond,srcRel);
}
