{
  RelNode srcRel=null;
  RelNode filterRel=null;
  RelNode gbRel=null;
  RelNode gbHavingRel=null;
  RelNode havingRel=null;
  RelNode selectRel=null;
  RelNode obRel=null;
  RelNode limitRel=null;
  RelNode rootRel=null;
  Map<String,RelNode> aliasToRel=new HashMap<String,RelNode>();
  String reason=canHandleQbForCbo(qb,false,LOG.isDebugEnabled());
  if (reason != null) {
    String msg="CBO can not handle Sub Query";
    if (LOG.isDebugEnabled()) {
      LOG.debug(msg + " because it: " + reason);
    }
    throw new OptiqSemanticException(msg);
  }
  for (  String subqAlias : qb.getSubqAliases()) {
    QBExpr qbexpr=qb.getSubqForAlias(subqAlias);
    aliasToRel.put(subqAlias,genLogicalPlan(qbexpr));
  }
  for (  String tableAlias : qb.getTabAliases()) {
    RelNode op=genTableLogicalPlan(tableAlias,qb);
    aliasToRel.put(tableAlias,op);
  }
  if (aliasToRel.isEmpty()) {
    throw new OptiqSemanticException("Unsupported");
  }
  if (qb.getParseInfo().getJoinExpr() != null) {
    srcRel=genJoinLogicalPlan(qb.getParseInfo().getJoinExpr(),aliasToRel);
  }
 else {
    srcRel=aliasToRel.values().iterator().next();
  }
  filterRel=genFilterLogicalPlan(qb,srcRel,aliasToRel,false);
  srcRel=(filterRel == null) ? srcRel : filterRel;
  RelNode starSrcRel=srcRel;
  gbRel=genGBLogicalPlan(qb,srcRel);
  srcRel=(gbRel == null) ? srcRel : gbRel;
  gbHavingRel=genGBHavingLogicalPlan(qb,srcRel,aliasToRel);
  srcRel=(gbHavingRel == null) ? srcRel : gbHavingRel;
  selectRel=genSelectLogicalPlan(qb,srcRel,starSrcRel);
  srcRel=(selectRel == null) ? srcRel : selectRel;
  Pair<RelNode,RelNode> obTopProjPair=genOBLogicalPlan(qb,srcRel,outerMostQB);
  obRel=obTopProjPair.getKey();
  RelNode topConstrainingProjArgsRel=obTopProjPair.getValue();
  srcRel=(obRel == null) ? srcRel : obRel;
  limitRel=genLimitLogicalPlan(qb,srcRel);
  srcRel=(limitRel == null) ? srcRel : limitRel;
  if (topConstrainingProjArgsRel != null) {
    List<RexNode> originalInputRefs=Lists.transform(topConstrainingProjArgsRel.getRowType().getFieldList(),new Function<RelDataTypeField,RexNode>(){
      @Override public RexNode apply(      RelDataTypeField input){
        return new RexInputRef(input.getIndex(),input.getType());
      }
    }
);
    RowResolver topConstrainingProjRR=new RowResolver();
    if (!RowResolver.add(topConstrainingProjRR,this.relToHiveRR.get(topConstrainingProjArgsRel))) {
      LOG.warn("Duplicates detected when adding columns to RR: see previous message");
    }
    srcRel=genSelectRelNode(originalInputRefs,topConstrainingProjRR,srcRel);
  }
  if (qb.getParseInfo().getAlias() != null) {
    RowResolver rr=this.relToHiveRR.get(srcRel);
    RowResolver newRR=new RowResolver();
    String alias=qb.getParseInfo().getAlias();
    for (    ColumnInfo colInfo : rr.getColumnInfos()) {
      String name=colInfo.getInternalName();
      String[] tmp=rr.reverseLookup(name);
      if ("".equals(tmp[0]) || tmp[1] == null) {
        tmp[1]=colInfo.getInternalName();
      }
      ColumnInfo newCi=new ColumnInfo(colInfo);
      newCi.setTabAlias(alias);
      newRR.put(alias,tmp[1],newCi);
    }
    relToHiveRR.put(srcRel,newRR);
    relToHiveColNameOptiqPosMap.put(srcRel,buildHiveToOptiqColumnMap(newRR,srcRel));
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Created Plan for Query Block " + qb.getId());
  }
  return srcRel;
}
