{
  AggInfo aInfo=null;
  ArrayList<ExprNodeDesc> aggParameters=new ArrayList<ExprNodeDesc>();
  for (int i=1; i <= aggFnLstArgIndx; i++) {
    ASTNode paraExpr=(ASTNode)aggAst.getChild(i);
    ExprNodeDesc paraExprNode=genExprNodeDesc(paraExpr,inputRR);
    aggParameters.add(paraExprNode);
  }
  boolean isDistinct=aggAst.getType() == HiveParser.TOK_FUNCTIONDI;
  TypeInfo udafRetType=null;
  String aggName=unescapeIdentifier(aggAst.getChild(0).getText());
  if (FunctionRegistry.isRankingFunction(aggName)) {
    if (aggName.equalsIgnoreCase("percent_rank"))     udafRetType=TypeInfoFactory.doubleTypeInfo;
 else     udafRetType=TypeInfoFactory.intTypeInfo;
  }
 else {
    try {
      boolean isAllColumns=aggAst.getType() == HiveParser.TOK_FUNCTIONSTAR;
      Mode amode=groupByDescModeToUDAFMode(GroupByDesc.Mode.COMPLETE,isDistinct);
      GenericUDAFEvaluator genericUDAFEvaluator=getGenericUDAFEvaluator(aggName,aggParameters,aggAst,isDistinct,isAllColumns);
      assert(genericUDAFEvaluator != null);
      GenericUDAFInfo udaf=getGenericUDAFInfo(genericUDAFEvaluator,amode,aggParameters);
      udafRetType=udaf.returnType;
    }
 catch (    Exception e) {
      LOG.debug("CBO: Couldn't Obtain UDAF evaluators for " + aggName + ", trying to translate to GenericUDF");
    }
    if (udafRetType == null) {
      TypeCheckCtx tcCtx=new TypeCheckCtx(inputRR);
      tcCtx.setAllowStatefulFunctions(true);
      tcCtx.setAllowDistinctFunctions(false);
      ExprNodeDesc exp=genExprNodeDesc((ASTNode)aggAst.getChild(0),inputRR,tcCtx);
      udafRetType=exp.getTypeInfo();
    }
  }
  aInfo=new AggInfo(aggParameters,udafRetType,aggName,isDistinct);
  return aInfo;
}
