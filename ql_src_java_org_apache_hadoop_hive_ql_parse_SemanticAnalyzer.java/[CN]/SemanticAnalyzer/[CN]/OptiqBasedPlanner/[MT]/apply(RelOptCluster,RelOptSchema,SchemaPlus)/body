{
  RelNode optiqGenPlan=null;
  RelNode optiqPreCboPlan=null;
  RelNode optiqOptimizedPlan=null;
  RelOptPlanner planner=HiveVolcanoPlanner.createPlanner();
  final RelOptQuery query=new RelOptQuery(planner);
  final RexBuilder rexBuilder=cluster.getRexBuilder();
  cluster=query.createCluster(rexBuilder.getTypeFactory(),rexBuilder);
  m_cluster=cluster;
  m_relOptSchema=relOptSchema;
  m_rootSchema=rootSchema;
  try {
    optiqGenPlan=genLogicalPlan(qb);
  }
 catch (  SemanticException e) {
    m_semanticException=e;
    throw new RuntimeException(e);
  }
  optiqPreCboPlan=applyPreCBOTransforms(optiqGenPlan,HiveDefaultRelMetadataProvider.INSTANCE);
  List<RelMetadataProvider> list=Lists.newArrayList();
  list.add(HiveDefaultRelMetadataProvider.INSTANCE);
  RelTraitSet desiredTraits=cluster.traitSetOf(HiveRel.CONVENTION,RelCollationImpl.EMPTY);
  if (!HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_CBO_GREEDY_JOIN_ORDER)) {
    planner.registerMetadataProviders(list);
    RelMetadataProvider chainedProvider=ChainedRelMetadataProvider.of(list);
    cluster.setMetadataProvider(new CachingRelMetadataProvider(chainedProvider,planner));
    planner.addRule(HiveSwapJoinRule.INSTANCE);
    planner.addRule(HivePushJoinThroughJoinRule.LEFT);
    planner.addRule(HivePushJoinThroughJoinRule.RIGHT);
    if (HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_CBO_PULLPROJECTABOVEJOIN_RULE)) {
      planner.addRule(HivePullUpProjectsAboveJoinRule.BOTH_PROJECT);
      planner.addRule(HivePullUpProjectsAboveJoinRule.LEFT_PROJECT);
      planner.addRule(HivePullUpProjectsAboveJoinRule.RIGHT_PROJECT);
      planner.addRule(HiveMergeProjectRule.INSTANCE);
    }
    RelNode rootRel=optiqPreCboPlan;
    if (!optiqPreCboPlan.getTraitSet().equals(desiredTraits)) {
      rootRel=planner.changeTraits(optiqPreCboPlan,desiredTraits);
    }
    planner.setRoot(rootRel);
    optiqOptimizedPlan=planner.findBestExp();
  }
 else {
    final HepProgram hepPgm=new HepProgramBuilder().addMatchOrder(HepMatchOrder.BOTTOM_UP).addRuleInstance(new ConvertMultiJoinRule(HiveJoinRel.class)).addRuleInstance(LoptOptimizeJoinRule.INSTANCE).build();
    HepPlanner hepPlanner=new HepPlanner(hepPgm);
    hepPlanner.registerMetadataProviders(list);
    RelMetadataProvider chainedProvider=ChainedRelMetadataProvider.of(list);
    cluster.setMetadataProvider(new CachingRelMetadataProvider(chainedProvider,hepPlanner));
    RelNode rootRel=optiqPreCboPlan;
    if (!optiqPreCboPlan.getTraitSet().equals(desiredTraits)) {
      rootRel=hepPlanner.changeTraits(optiqPreCboPlan,desiredTraits);
    }
    hepPlanner.setRoot(rootRel);
    optiqOptimizedPlan=hepPlanner.findBestExp();
  }
  return optiqOptimizedPlan;
}
