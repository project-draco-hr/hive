{
  RexNode w=null;
  TypeInfo wHiveRetType=null;
  QBParseInfo qbp=getQBParseInfo(qb);
  WindowingSpec wSpec=qb.getAllWindowingSpecs().values().iterator().next();
  if (wSpec != null) {
    wSpec.validateAndMakeEffective();
    WindowExpressionSpec wExpSpec=wSpec.aliasToWdwExpr.get("_wcol" + wndProjPos);
    if (wExpSpec instanceof WindowFunctionSpec) {
      AggInfo hiveAggInfo=getHiveAggInfo(windowProjAst,wndSpecASTIndx - 1,this.m_relToHiveRR.get(srcRel));
      wHiveRetType=hiveAggInfo.m_returnType;
      RelDataType optiqAggFnRetType=TypeConverter.convert(hiveAggInfo.m_returnType,this.m_cluster.getTypeFactory());
      ImmutableMap<String,Integer> posMap=this.m_relToHiveColNameOptiqPosMap.get(srcRel);
      RexNodeConverter converter=new RexNodeConverter(this.m_cluster,srcRel.getRowType(),posMap,0,false);
      Builder<RexNode> optiqAggFnArgsBldr=ImmutableList.<RexNode>builder();
      Builder<RelDataType> optiqAggFnArgsTypeBldr=ImmutableList.<RelDataType>builder();
      RexNode rexNd=null;
      for (int i=0; i < hiveAggInfo.m_aggParams.size(); i++) {
        optiqAggFnArgsBldr.add(converter.convert(hiveAggInfo.m_aggParams.get(i)));
        optiqAggFnArgsTypeBldr.add(TypeConverter.convert(hiveAggInfo.m_aggParams.get(i).getTypeInfo(),this.m_cluster.getTypeFactory()));
      }
      ImmutableList<RexNode> optiqAggFnArgs=optiqAggFnArgsBldr.build();
      ImmutableList<RelDataType> optiqAggFnArgsType=optiqAggFnArgsTypeBldr.build();
      final SqlAggFunction optiqAggFn=SqlFunctionConverter.getOptiqAggFn(hiveAggInfo.m_udfName,optiqAggFnArgsType,optiqAggFnRetType);
      RowResolver inputRR=m_relToHiveRR.get(srcRel);
      WindowSpec wndSpec=((WindowFunctionSpec)wExpSpec).getWindowSpec();
      List<RexNode> partitionKeys=getPartitionKeys(wndSpec.getPartition(),converter,inputRR);
      List<RexFieldCollation> orderKeys=getOrderKeys(wndSpec.getOrder(),converter,inputRR);
      RexWindowBound upperBound=getBound(wndSpec.windowFrame.start,converter);
      RexWindowBound lowerBound=getBound(wndSpec.windowFrame.end,converter);
      boolean isRows=((wndSpec.windowFrame.start instanceof RangeBoundarySpec) || (wndSpec.windowFrame.end instanceof RangeBoundarySpec)) ? true : false;
      w=m_cluster.getRexBuilder().makeOver(optiqAggFnRetType,optiqAggFn,optiqAggFnArgs,partitionKeys,ImmutableList.<RexFieldCollation>copyOf(orderKeys),lowerBound,upperBound,isRows,true,false);
    }
 else {
      throw new RuntimeException("Unsupported window Spec");
    }
  }
  return new Pair(w,wHiveRetType);
}
