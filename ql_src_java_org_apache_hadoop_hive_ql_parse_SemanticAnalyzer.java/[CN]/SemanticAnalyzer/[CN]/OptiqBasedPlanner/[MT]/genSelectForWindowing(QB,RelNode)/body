{
  RelNode selOpForWindow=null;
  QBParseInfo qbp=getQBParseInfo(qb);
  WindowingSpec wSpec=(!qb.getAllWindowingSpecs().isEmpty()) ? qb.getAllWindowingSpecs().values().iterator().next() : null;
  if (wSpec != null) {
    wSpec.validateAndMakeEffective();
    List<WindowExpressionSpec> windowExpressions=wSpec.getWindowExpressions();
    if (windowExpressions != null && !windowExpressions.isEmpty()) {
      RowResolver inputRR=this.relToHiveRR.get(srcRel);
      List<RexNode> projsForWindowSelOp=new ArrayList<RexNode>(HiveOptiqUtil.getProjsFromBelowAsInputRef(srcRel));
      RowResolver out_rwsch=new RowResolver();
      RowResolver.add(out_rwsch,inputRR,0);
      for (      WindowExpressionSpec wExprSpec : windowExpressions) {
        if (out_rwsch.getExpression(wExprSpec.getExpression()) == null) {
          Pair<RexNode,TypeInfo> wtp=genWindowingProj(qb,wExprSpec,srcRel);
          projsForWindowSelOp.add(wtp.getKey());
          ColumnInfo oColInfo=new ColumnInfo(getColumnInternalName(projsForWindowSelOp.size()),wtp.getValue(),null,false);
          String colAlias=wExprSpec.getAlias();
          if (false) {
            out_rwsch.checkColumn(null,wExprSpec.getAlias());
            out_rwsch.put(null,wExprSpec.getAlias(),oColInfo);
          }
 else {
            out_rwsch.putExpression(wExprSpec.getExpression(),oColInfo);
          }
        }
      }
      selOpForWindow=genSelectRelNode(projsForWindowSelOp,out_rwsch,srcRel);
    }
  }
  return selOpForWindow;
}
