{
  RelNode joinRel=null;
  RowResolver leftRR=this.relToHiveRR.get(leftRel);
  RowResolver rightRR=this.relToHiveRR.get(rightRel);
  RowResolver joinRR=null;
  if (hiveJoinType != JoinType.LEFTSEMI) {
    joinRR=RowResolver.getCombinedRR(leftRR,rightRR);
  }
 else {
    joinRR=new RowResolver();
    RowResolver.add(joinRR,leftRR,0);
  }
  RexNode optiqJoinCond=null;
  if (joinCond != null) {
    JoinTypeCheckCtx jCtx=new JoinTypeCheckCtx(leftRR,rightRR,hiveJoinType);
    Map<ASTNode,ExprNodeDesc> exprNodes=JoinCondTypeCheckProcFactory.genExprNode(joinCond,jCtx);
    if (jCtx.getError() != null)     throw new SemanticException(SemanticAnalyzer.generateErrorMessage(jCtx.getErrorSrcNode(),jCtx.getError()));
    ExprNodeDesc joinCondnExprNode=exprNodes.get(joinCond);
    List<RelNode> inputRels=new ArrayList<RelNode>();
    inputRels.add(leftRel);
    inputRels.add(rightRel);
    optiqJoinCond=RexNodeConverter.convert(cluster,joinCondnExprNode,inputRels,relToHiveRR,relToHiveColNameOptiqPosMap,false);
  }
 else {
    optiqJoinCond=cluster.getRexBuilder().makeLiteral(true);
  }
  boolean leftSemiJoin=false;
  JoinRelType optiqJoinType;
switch (hiveJoinType) {
case LEFTOUTER:
    optiqJoinType=JoinRelType.LEFT;
  break;
case RIGHTOUTER:
optiqJoinType=JoinRelType.RIGHT;
break;
case FULLOUTER:
optiqJoinType=JoinRelType.FULL;
break;
case LEFTSEMI:
optiqJoinType=JoinRelType.INNER;
leftSemiJoin=true;
break;
case INNER:
default :
optiqJoinType=JoinRelType.INNER;
break;
}
if (leftSemiJoin) {
List<RelDataTypeField> sysFieldList=new ArrayList<RelDataTypeField>();
List<RexNode> leftJoinKeys=new ArrayList<RexNode>();
List<RexNode> rightJoinKeys=new ArrayList<RexNode>();
RexNode nonEquiConds=RelOptUtil.splitJoinCondition(sysFieldList,leftRel,rightRel,optiqJoinCond,leftJoinKeys,rightJoinKeys,null,null);
if (!nonEquiConds.isAlwaysTrue()) {
throw new SemanticException("Non equality condition not supported in Semi-Join" + nonEquiConds);
}
RelNode[] inputRels=new RelNode[]{leftRel,rightRel};
final List<Integer> leftKeys=new ArrayList<Integer>();
final List<Integer> rightKeys=new ArrayList<Integer>();
optiqJoinCond=HiveOptiqUtil.projectNonColumnEquiConditions(HiveProjectRel.DEFAULT_PROJECT_FACTORY,inputRels,leftJoinKeys,rightJoinKeys,0,leftKeys,rightKeys);
joinRel=new SemiJoinRel(cluster,cluster.traitSetOf(HiveRel.CONVENTION),inputRels[0],inputRels[1],optiqJoinCond,ImmutableIntList.copyOf(leftKeys),ImmutableIntList.copyOf(rightKeys));
}
 else {
joinRel=HiveJoinRel.getJoin(cluster,leftRel,rightRel,optiqJoinCond,optiqJoinType,leftSemiJoin);
}
relToHiveColNameOptiqPosMap.put(joinRel,this.buildHiveToOptiqColumnMap(joinRR,joinRel));
relToHiveRR.put(joinRel,joinRR);
return joinRel;
}
