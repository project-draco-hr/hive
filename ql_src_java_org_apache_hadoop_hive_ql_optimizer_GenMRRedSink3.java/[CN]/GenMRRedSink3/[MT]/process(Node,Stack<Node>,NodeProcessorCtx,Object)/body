{
  ReduceSinkOperator op=(ReduceSinkOperator)nd;
  GenMRProcContext ctx=(GenMRProcContext)opProcCtx;
  ParseContext parseCtx=ctx.getParseCtx();
  UnionProcContext uCtx=parseCtx.getUCtx();
  if (uCtx.isMapOnlySubq()) {
    return (new GenMRRedSink1()).process(nd,stack,opProcCtx,nodeOutputs);
  }
  Operator<? extends Serializable> reducer=op.getChildOperators().get(0);
  Map<Operator<? extends Serializable>,GenMapRedCtx> mapCurrCtx=ctx.getMapCurrCtx();
  GenMapRedCtx mapredCtx=mapCurrCtx.get(op.getParentOperators().get(0));
  Task<? extends Serializable> currTask=mapredCtx.getCurrTask();
  mapredWork plan=(mapredWork)currTask.getWork();
  HashMap<Operator<? extends Serializable>,Task<? extends Serializable>> opTaskMap=ctx.getOpTaskMap();
  Task<? extends Serializable> opMapTask=opTaskMap.get(reducer);
  ctx.setCurrTask(currTask);
  if (opMapTask == null) {
    if (plan.getReducer() == null) {
      GenMapRedUtils.initUnionPlan(op,ctx);
    }
 else {
      GenMapRedUtils.splitPlan(op,ctx);
    }
  }
 else   if (plan.getReducer() == reducer) {
    GenMapRedUtils.initUnionPlan(op,ctx);
  }
 else {
    GenMapRedUtils.initUnionPlan(ctx,currTask,false);
    GenMapRedUtils.joinPlan(op,currTask,opMapTask,ctx,-1,true,false,false);
  }
  mapCurrCtx.put(op,new GenMapRedCtx(ctx.getCurrTask(),ctx.getCurrTopOp(),ctx.getCurrAliasId()));
  ctx.setCurrUnionOp(null);
  return null;
}
