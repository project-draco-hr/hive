{
  ReduceSinkOperator op=(ReduceSinkOperator)nd;
  GenMRProcContext ctx=(GenMRProcContext)opProcCtx;
  ParseContext parseCtx=ctx.getParseCtx();
  UnionProcContext uCtx=parseCtx.getUCtx();
  if (uCtx.isMapOnlySubq())   return (new GenMRRedSink1()).process(nd,stack,opProcCtx,nodeOutputs);
  Operator<? extends Serializable> reducer=op.getChildOperators().get(0);
  Map<Operator<? extends Serializable>,GenMapRedCtx> mapCurrCtx=ctx.getMapCurrCtx();
  GenMapRedCtx mapredCtx=mapCurrCtx.get(op.getParentOperators().get(0));
  Task<? extends Serializable> currTask=mapredCtx.getCurrTask();
  mapredWork plan=(mapredWork)currTask.getWork();
  HashMap<Operator<? extends Serializable>,Task<? extends Serializable>> opTaskMap=ctx.getOpTaskMap();
  opTaskMap.put(reducer,currTask);
  plan.setReducer(reducer);
  reduceSinkDesc desc=(reduceSinkDesc)op.getConf();
  plan.setNumReduceTasks(desc.getNumReducers());
  if (reducer.getClass() == JoinOperator.class)   plan.setNeedsTagging(true);
  ctx.setCurrTask(currTask);
  ctx.setCurrTopOp(null);
  ctx.setCurrAliasId(null);
  return null;
}
