{
  ReduceSinkOperator op=(ReduceSinkOperator)nd;
  GenMRProcContext ctx=(GenMRProcContext)opProcCtx;
  Operator<? extends OperatorDesc> reducer=op.getChildOperators().get(0);
  Map<Operator<? extends OperatorDesc>,GenMapRedCtx> mapCurrCtx=ctx.getMapCurrCtx();
  GenMapRedCtx mapredCtx=mapCurrCtx.get(ctx.getCurrUnionOp());
  Task<? extends Serializable> unionTask=null;
  if (mapredCtx != null) {
    unionTask=mapredCtx.getCurrTask();
  }
 else {
    unionTask=ctx.getCurrTask();
  }
  MapredWork plan=(MapredWork)unionTask.getWork();
  HashMap<Operator<? extends OperatorDesc>,Task<? extends Serializable>> opTaskMap=ctx.getOpTaskMap();
  Task<? extends Serializable> reducerTask=opTaskMap.get(reducer);
  ctx.setCurrTask(unionTask);
  if (reducerTask == null) {
    if (plan.getReducer() == null) {
      GenMapRedUtils.initUnionPlan(op,ctx,unionTask);
    }
 else {
      GenMapRedUtils.splitPlan(op,ctx);
    }
  }
 else   if (plan.getReducer() == reducer) {
    GenMapRedUtils.initUnionPlan(op,ctx,unionTask);
  }
 else {
    GenMapRedUtils.joinUnionPlan(ctx,unionTask,reducerTask,false);
    ctx.setCurrTask(reducerTask);
  }
  mapCurrCtx.put(op,new GenMapRedCtx(ctx.getCurrTask(),ctx.getCurrTopOp(),ctx.getCurrAliasId()));
  ctx.setCurrUnionOp(null);
  return null;
}
