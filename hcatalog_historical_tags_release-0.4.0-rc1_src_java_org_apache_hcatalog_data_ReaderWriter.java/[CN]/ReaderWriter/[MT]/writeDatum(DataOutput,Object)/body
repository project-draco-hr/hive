{
  byte type=DataType.findType(val);
switch (type) {
case DataType.LIST:
    out.writeByte(DataType.LIST);
  List<?> list=(List<?>)val;
int sz=list.size();
out.writeInt(sz);
for (int i=0; i < sz; i++) {
writeDatum(out,list.get(i));
}
return;
case DataType.MAP:
out.writeByte(DataType.MAP);
Map<?,?> m=(Map<?,?>)val;
out.writeInt(m.size());
Iterator<?> i=m.entrySet().iterator();
while (i.hasNext()) {
Entry<?,?> entry=(Entry<?,?>)i.next();
writeDatum(out,entry.getKey());
writeDatum(out,entry.getValue());
}
return;
case DataType.INTEGER:
out.writeByte(DataType.INTEGER);
new VIntWritable((Integer)val).write(out);
return;
case DataType.LONG:
out.writeByte(DataType.LONG);
new VLongWritable((Long)val).write(out);
return;
case DataType.FLOAT:
out.writeByte(DataType.FLOAT);
out.writeFloat((Float)val);
return;
case DataType.DOUBLE:
out.writeByte(DataType.DOUBLE);
out.writeDouble((Double)val);
return;
case DataType.BOOLEAN:
out.writeByte(DataType.BOOLEAN);
out.writeBoolean((Boolean)val);
return;
case DataType.BYTE:
out.writeByte(DataType.BYTE);
out.writeByte((Byte)val);
return;
case DataType.SHORT:
out.writeByte(DataType.SHORT);
out.writeShort((Short)val);
return;
case DataType.STRING:
String s=(String)val;
byte[] utfBytes=s.getBytes(ReaderWriter.UTF8);
out.writeByte(DataType.STRING);
out.writeInt(utfBytes.length);
out.write(utfBytes);
return;
case DataType.NULL:
out.writeByte(DataType.NULL);
return;
default :
throw new IOException("Unexpected data type " + type + " found in stream.");
}
}
