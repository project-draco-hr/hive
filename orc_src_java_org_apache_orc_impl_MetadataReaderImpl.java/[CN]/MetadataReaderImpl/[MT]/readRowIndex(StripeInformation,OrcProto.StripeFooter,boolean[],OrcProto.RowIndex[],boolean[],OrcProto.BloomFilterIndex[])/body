{
  if (footer == null) {
    footer=readStripeFooter(stripe);
  }
  if (indexes == null) {
    indexes=new OrcProto.RowIndex[typeCount];
  }
  if (bloomFilterIndices == null) {
    bloomFilterIndices=new OrcProto.BloomFilterIndex[typeCount];
  }
  long offset=stripe.getOffset();
  List<OrcProto.Stream> streams=footer.getStreamsList();
  for (int i=0; i < streams.size(); i++) {
    OrcProto.Stream stream=streams.get(i);
    OrcProto.Stream nextStream=null;
    if (i < streams.size() - 1) {
      nextStream=streams.get(i + 1);
    }
    int col=stream.getColumn();
    int len=(int)stream.getLength();
    if (stream.hasKind() && (stream.getKind() == OrcProto.Stream.Kind.ROW_INDEX)) {
      boolean readBloomFilter=false;
      if (sargColumns != null && sargColumns[col] && nextStream.getKind() == OrcProto.Stream.Kind.BLOOM_FILTER) {
        len+=nextStream.getLength();
        i+=1;
        readBloomFilter=true;
      }
      if ((included == null || included[col]) && indexes[col] == null) {
        byte[] buffer=new byte[len];
        file.readFully(offset,buffer,0,buffer.length);
        ByteBuffer bb=ByteBuffer.wrap(buffer);
        indexes[col]=OrcProto.RowIndex.parseFrom(InStream.create("index",Lists.<DiskRange>newArrayList(new BufferChunk(bb,0)),stream.getLength(),codec,bufferSize));
        if (readBloomFilter) {
          bb.position((int)stream.getLength());
          bloomFilterIndices[col]=OrcProto.BloomFilterIndex.parseFrom(InStream.create("bloom_filter",Lists.<DiskRange>newArrayList(new BufferChunk(bb,0)),nextStream.getLength(),codec,bufferSize));
        }
      }
    }
    offset+=len;
  }
  OrcIndex index=new OrcIndex(indexes,bloomFilterIndices);
  return index;
}
