{
  RewriteCanApplyCtx canApplyCtx=(RewriteCanApplyCtx)ctx;
  for (  Node node : stack) {
    if (node instanceof TableScanOperator) {
      TableScanOperator ts=(TableScanOperator)node;
      canApplyCtx.setTableScanOperator(ts);
      List<String> selectColumns=ts.getConf().getReferencedColumns();
      if (selectColumns == null || selectColumns.size() != 1) {
        canApplyCtx.setSelClauseColsFetchException(true);
        return null;
      }
 else {
        canApplyCtx.setIndexKey(selectColumns.get(0));
      }
    }
 else     if (node instanceof SelectOperator) {
      if (canApplyCtx.getSelectOperators() == null) {
        canApplyCtx.setSelectOperators(new ArrayList<SelectOperator>());
      }
      canApplyCtx.getSelectOperators().add((SelectOperator)node);
    }
 else     if (node instanceof GroupByOperator) {
      if (canApplyCtx.getGroupByOperators() == null) {
        canApplyCtx.setGroupByOperators(new ArrayList<GroupByOperator>());
      }
      GroupByOperator operator=(GroupByOperator)node;
      canApplyCtx.getGroupByOperators().add(operator);
      if (!canApplyCtx.isQueryHasGroupBy()) {
        canApplyCtx.setQueryHasGroupBy(true);
        GroupByDesc conf=operator.getConf();
        List<AggregationDesc> aggrList=conf.getAggregators();
        if (aggrList == null || aggrList.size() != 1 || !("count".equals(aggrList.get(0).getGenericUDAFName()))) {
          canApplyCtx.setAggFuncIsNotCount(true);
          return null;
        }
 else {
          List<ExprNodeDesc> para=aggrList.get(0).getParameters();
          if (para == null || para.size() == 0 || para.size() > 1) {
            canApplyCtx.setAggParameterException(true);
            return null;
          }
 else {
            ExprNodeDesc expr=ExprNodeDescUtils.backtrack(para.get(0),operator,(Operator<OperatorDesc>)stack.get(0));
            if (!(expr instanceof ExprNodeColumnDesc)) {
              canApplyCtx.setAggParameterException(true);
              return null;
            }
          }
        }
      }
    }
  }
  return null;
}
