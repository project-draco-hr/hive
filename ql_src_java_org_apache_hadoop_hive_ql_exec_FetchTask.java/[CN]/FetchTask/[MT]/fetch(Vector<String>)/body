{
  try {
    int numRows=0;
    int rowsRet=maxRows;
    if ((work.getLimit() >= 0) && ((work.getLimit() - totalRows) < rowsRet))     rowsRet=work.getLimit() - totalRows;
    if (rowsRet <= 0) {
      if (currRecReader != null) {
        currRecReader.close();
        currRecReader=null;
      }
      return false;
    }
    while (numRows < rowsRet) {
      if (currRecReader == null) {
        currRecReader=getRecordReader();
        if (currRecReader == null) {
          if (numRows == 0)           return false;
          totalRows+=numRows;
          return true;
        }
      }
      boolean ret=currRecReader.next(key,value);
      if (ret) {
        if (tblDataDone) {
          Object obj=serde.deserialize(value);
          res.add(((Text)mSerde.serialize(obj,serde.getObjectInspector())).toString());
        }
 else {
          rowWithPart[0]=serde.deserialize(value);
          res.add(((Text)mSerde.serialize(rowWithPart,rowObjectInspector)).toString());
        }
        numRows++;
      }
 else {
        currRecReader.close();
        currRecReader=null;
        currRecReader=getRecordReader();
        if (currRecReader == null) {
          if (numRows == 0)           return false;
          totalRows+=numRows;
          return true;
        }
 else {
          key=currRecReader.createKey();
          value=currRecReader.createValue();
        }
      }
    }
    totalRows+=numRows;
    return true;
  }
 catch (  Exception e) {
    console.printError("Failed with exception " + e.getClass().getName() + ":"+ e.getMessage(),"\n" + StringUtils.stringifyException(e));
    return false;
  }
}
