{
  JoinOperator joinOp=(JoinOperator)nd;
  String[] baseSrc=new String[joinOp.getParentOperators().size()];
  String[] rightAliases=new String[joinOp.getParentOperators().size() - 1];
  for (int i=0; i < joinOp.getParentOperators().size(); i++) {
    ReduceSinkOperator rsOp=(ReduceSinkOperator)joinOp.getParentOperators().get(i);
    Set<String> aliases=rsOp.getSchema().getTableNames();
    if (aliases == null || aliases.size() != 1) {
      throw new SemanticException("In return path join annotate rule, we find " + aliases == null ? null : aliases.size() + " aliases for " + rsOp.toString());
    }
    baseSrc[i]=aliases.iterator().next();
    if (i == 0) {
      joinOp.getConf().setLeftAlias(baseSrc[i]);
    }
 else {
      rightAliases[i - 1]=baseSrc[i];
    }
  }
  joinOp.getConf().setBaseSrc(baseSrc);
  joinOp.getConf().setRightAliases(rightAliases);
  joinOp.getConf().setAliasToOpInfo(aliasToOpInfo);
  Set<String> aliases=joinOp.getSchema().getTableNames();
  if (aliases == null || aliases.size() != 1) {
    throw new SemanticException("In return path join annotate rule, we find " + aliases == null ? null : aliases.size() + " aliases for " + joinOp.toString());
  }
  final String joinOpAlias=aliases.iterator().next();
  aliasToOpInfo.put(joinOpAlias,joinOp);
  pctx.getJoinOps().add(joinOp);
  return null;
}
