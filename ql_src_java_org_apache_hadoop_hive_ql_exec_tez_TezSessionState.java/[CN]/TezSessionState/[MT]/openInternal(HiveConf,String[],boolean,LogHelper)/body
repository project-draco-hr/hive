{
  this.conf=conf;
  this.queueName=conf.get("tez.queue.name");
  this.doAsEnabled=conf.getBoolVar(HiveConf.ConfVars.HIVE_SERVER2_ENABLE_DOAS);
  final boolean llapMode="llap".equals(HiveConf.getVar(conf,HiveConf.ConfVars.HIVE_EXECUTION_MODE));
  UserGroupInformation ugi=Utils.getUGI();
  user=ugi.getShortUserName();
  LOG.info("User of session id " + sessionId + " is "+ user);
  tezScratchDir=createTezDir(sessionId);
  additionalFilesNotFromConf.clear();
  if (additionalFiles != null) {
    for (    String originalFile : additionalFiles) {
      additionalFilesNotFromConf.add(originalFile);
    }
  }
  refreshLocalResourcesFromConf(conf);
  appJarLr=createJarLocalResource(utils.getExecJarPathLocal());
  final Map<String,LocalResource> commonLocalResources=new HashMap<String,LocalResource>();
  commonLocalResources.put(utils.getBaseName(appJarLr),appJarLr);
  for (  LocalResource lr : localizedResources) {
    commonLocalResources.put(utils.getBaseName(lr),lr);
  }
  if (llapMode) {
    conf.addResource("llap-daemon-site.xml");
    try {
      final File daemonJar=new File(Utilities.jarFinderGetJar(Class.forName("org.apache.hadoop.hive.llap.io.api.impl.LlapInputFormat")));
      final LocalResource daemonLr=createJarLocalResource(daemonJar.toURI().toURL().toExternalForm());
      commonLocalResources.put(utils.getBaseName(daemonLr),daemonLr);
    }
 catch (    ClassNotFoundException ce) {
      throw new IOException("Cannot find LlapInputFormat in the classpath",ce);
    }
    try {
      final File registryJar=new File(Utilities.jarFinderGetJar(Class.forName("org.apache.hadoop.registry.client.api.RegistryOperations")));
      final LocalResource registryLr=createJarLocalResource(registryJar.toURI().toURL().toExternalForm());
      commonLocalResources.put(utils.getBaseName(registryLr),registryLr);
    }
 catch (    ClassNotFoundException ce) {
      throw new IOException("Cannot find Hadoop Registry in the classpath",ce);
    }
  }
  Map<String,String> amEnv=new HashMap<String,String>();
  MRHelpers.updateEnvBasedOnMRAMEnv(conf,amEnv);
  final TezConfiguration tezConfig=new TezConfiguration(conf);
  tezConfig.set(TezConfiguration.TEZ_AM_STAGING_DIR,tezScratchDir.toUri().toString());
  Utilities.stripHivePasswordDetails(tezConfig);
  ServicePluginsDescriptor servicePluginsDescriptor;
  UserPayload servicePluginPayload=TezUtils.createUserPayloadFromConf(tezConfig);
  if (llapMode) {
    servicePluginsDescriptor=ServicePluginsDescriptor.create(true,new TaskSchedulerDescriptor[]{TaskSchedulerDescriptor.create(LLAP_SERVICE,LLAP_SCHEDULER).setUserPayload(servicePluginPayload)},new ContainerLauncherDescriptor[]{ContainerLauncherDescriptor.create(LLAP_SERVICE,LLAP_LAUNCHER)},new TaskCommunicatorDescriptor[]{TaskCommunicatorDescriptor.create(LLAP_SERVICE,LLAP_TASK_COMMUNICATOR).setUserPayload(servicePluginPayload)});
  }
 else {
    servicePluginsDescriptor=ServicePluginsDescriptor.create(true);
  }
  if (HiveConf.getBoolVar(conf,ConfVars.HIVE_PREWARM_ENABLED)) {
    int n=HiveConf.getIntVar(conf,ConfVars.HIVE_PREWARM_NUM_CONTAINERS);
    n=Math.max(tezConfig.getInt(TezConfiguration.TEZ_AM_SESSION_MIN_HELD_CONTAINERS,TezConfiguration.TEZ_AM_SESSION_MIN_HELD_CONTAINERS_DEFAULT),n);
    tezConfig.setInt(TezConfiguration.TEZ_AM_SESSION_MIN_HELD_CONTAINERS,n);
  }
  final TezClient session=TezClient.newBuilder("HIVE-" + sessionId,tezConfig).setIsSession(true).setLocalResources(commonLocalResources).setServicePluginDescriptor(servicePluginsDescriptor).build();
  LOG.info("Opening new Tez Session (id: " + sessionId + ", scratch dir: "+ tezScratchDir+ ")");
  TezJobMonitor.initShutdownHook();
  if (!isAsync) {
    startSessionAndContainers(session,conf,commonLocalResources,tezConfig,false);
    this.session=session;
  }
 else {
    FutureTask<TezClient> sessionFuture=new FutureTask<>(new Callable<TezClient>(){
      @Override public TezClient call() throws Exception {
        return startSessionAndContainers(session,conf,commonLocalResources,tezConfig,true);
      }
    }
);
    new Thread(sessionFuture,"Tez session start thread").start();
    this.console=console;
    this.sessionFuture=sessionFuture;
  }
}
