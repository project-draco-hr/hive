{
  this.conf=conf;
  this.queueName=conf.get("tez.queue.name");
  this.doAsEnabled=conf.getBoolVar(HiveConf.ConfVars.HIVE_SERVER2_ENABLE_DOAS);
  final boolean llapMode="llap".equals(HiveConf.getVar(conf,HiveConf.ConfVars.HIVE_EXECUTION_MODE));
  UserGroupInformation ugi=Utils.getUGI();
  user=ugi.getShortUserName();
  LOG.info("User of session id " + sessionId + " is "+ user);
  tezScratchDir=createTezDir(sessionId);
  additionalFilesNotFromConf.clear();
  if (additionalFiles != null) {
    for (    String originalFile : additionalFiles) {
      additionalFilesNotFromConf.add(originalFile);
    }
  }
  refreshLocalResourcesFromConf(conf);
  appJarLr=createJarLocalResource(utils.getExecJarPathLocal());
  Map<String,LocalResource> commonLocalResources=new HashMap<String,LocalResource>();
  commonLocalResources.put(utils.getBaseName(appJarLr),appJarLr);
  for (  LocalResource lr : localizedResources) {
    commonLocalResources.put(utils.getBaseName(lr),lr);
  }
  if (llapMode) {
    conf.addResource("llap-daemon-site.xml");
    try {
      final File daemonJar=new File(Utilities.jarFinderGetJar(Class.forName("org.apache.hadoop.hive.llap.io.api.impl.LlapInputFormat")));
      final LocalResource daemonLr=createJarLocalResource(daemonJar.toURI().toURL().toExternalForm());
      commonLocalResources.put(utils.getBaseName(daemonLr),daemonLr);
    }
 catch (    ClassNotFoundException ce) {
      throw new IOException("Cannot find LlapInputFormat in the classpath",ce);
    }
    try {
      final File registryJar=new File(Utilities.jarFinderGetJar(Class.forName("org.apache.hadoop.registry.client.api.RegistryOperations")));
      final LocalResource registryLr=createJarLocalResource(registryJar.toURI().toURL().toExternalForm());
      commonLocalResources.put(utils.getBaseName(registryLr),registryLr);
    }
 catch (    ClassNotFoundException ce) {
      throw new IOException("Cannot find Hadoop Registry in the classpath",ce);
    }
  }
  Map<String,String> amEnv=new HashMap<String,String>();
  MRHelpers.updateEnvBasedOnMRAMEnv(conf,amEnv);
  TezConfiguration tezConfig=new TezConfiguration(conf);
  tezConfig.set(TezConfiguration.TEZ_AM_STAGING_DIR,tezScratchDir.toUri().toString());
  if (llapMode) {
    tezConfig.setStrings(TezConfiguration.TEZ_AM_TASK_SCHEDULERS,DEFAULT_SERVICE,LOCAL_SERVICE,LLAP_SERVICE_SCHEDULER);
    tezConfig.setStrings(TezConfiguration.TEZ_AM_CONTAINER_LAUNCHERS,DEFAULT_SERVICE,LOCAL_SERVICE,LLAP_SERVICE_LAUNCHER);
    tezConfig.setStrings(TezConfiguration.TEZ_AM_TASK_COMMUNICATORS,DEFAULT_SERVICE,LOCAL_SERVICE,LLAP_SERVICE_TASK_COMMUNICATOR);
  }
 else {
    tezConfig.setStrings(TezConfiguration.TEZ_AM_TASK_SCHEDULERS,DEFAULT_SERVICE,LOCAL_SERVICE);
    tezConfig.setStrings(TezConfiguration.TEZ_AM_CONTAINER_LAUNCHERS,DEFAULT_SERVICE,LOCAL_SERVICE);
    tezConfig.setStrings(TezConfiguration.TEZ_AM_TASK_COMMUNICATORS,DEFAULT_SERVICE,LOCAL_SERVICE);
  }
  if (HiveConf.getBoolVar(conf,ConfVars.HIVE_PREWARM_ENABLED)) {
    int n=HiveConf.getIntVar(conf,ConfVars.HIVE_PREWARM_NUM_CONTAINERS);
    n=Math.max(tezConfig.getInt(TezConfiguration.TEZ_AM_SESSION_MIN_HELD_CONTAINERS,TezConfiguration.TEZ_AM_SESSION_MIN_HELD_CONTAINERS_DEFAULT),n);
    tezConfig.setInt(TezConfiguration.TEZ_AM_SESSION_MIN_HELD_CONTAINERS,n);
  }
  session=TezClient.create("HIVE-" + sessionId,tezConfig,true,commonLocalResources,null);
  LOG.info("Opening new Tez Session (id: " + sessionId + ", scratch dir: "+ tezScratchDir+ ")");
  TezJobMonitor.initShutdownHook();
  session.start();
  if (HiveConf.getBoolVar(conf,ConfVars.HIVE_PREWARM_ENABLED)) {
    int n=HiveConf.getIntVar(conf,ConfVars.HIVE_PREWARM_NUM_CONTAINERS);
    LOG.info("Prewarming " + n + " containers  (id: "+ sessionId+ ", scratch dir: "+ tezScratchDir+ ")");
    PreWarmVertex prewarmVertex=utils.createPreWarmVertex(tezConfig,n,commonLocalResources);
    try {
      session.preWarm(prewarmVertex);
    }
 catch (    IOException ie) {
      if (ie.getMessage().contains("Interrupted while waiting")) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Hive Prewarm threw an exception ",ie);
        }
      }
 else {
        throw ie;
      }
    }
  }
  try {
    session.waitTillReady();
  }
 catch (  InterruptedException ie) {
  }
}
