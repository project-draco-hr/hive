{
  try {
    System.out.println("Beginning Test testBinarySortableSerDe:");
    int num=1000;
    Random r=new Random(1234);
    MyTestClass rows[]=new MyTestClass[num];
    for (int i=0; i < num; i++) {
      int randField=r.nextInt(11);
      MyTestClass t=new MyTestClass();
      t.myByte=randField > 0 ? null : Byte.valueOf((byte)r.nextInt());
      t.myShort=randField > 1 ? null : Short.valueOf((short)r.nextInt());
      t.myInt=randField > 2 ? null : Integer.valueOf(r.nextInt());
      t.myLong=randField > 3 ? null : Long.valueOf(r.nextLong());
      t.myFloat=randField > 4 ? null : Float.valueOf(r.nextFloat() * 10 - 5);
      t.myDouble=randField > 5 ? null : Double.valueOf(r.nextDouble() * 10 - 5);
      t.myString=randField > 6 ? null : getRandString(r);
      t.myDecimal=randField > 7 ? null : getRandHiveDecimal(r);
      t.myDate=randField > 8 ? null : getRandDate(r);
      t.myStruct=randField > 9 ? null : new MyTestInnerStruct(r.nextInt(5) - 2,r.nextInt(5) - 2);
      t.myList=randField > 10 ? null : getRandIntegerArray(r);
      t.myBA=getRandBA(r,i);
      rows[i]=t;
    }
    StructObjectInspector rowOI=(StructObjectInspector)ObjectInspectorFactory.getReflectionObjectInspector(MyTestClass.class,ObjectInspectorOptions.JAVA);
    sort(rows,rowOI);
    String fieldNames=ObjectInspectorUtils.getFieldNames(rowOI);
    String fieldTypes=ObjectInspectorUtils.getFieldTypes(rowOI);
    testBinarySortableSerDe(rows,rowOI,getSerDe(fieldNames,fieldTypes,"++++++++++++"),true);
    testBinarySortableSerDe(rows,rowOI,getSerDe(fieldNames,fieldTypes,"------------"),false);
    System.out.println("Test testTBinarySortableProtocol passed!");
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw e;
  }
}
