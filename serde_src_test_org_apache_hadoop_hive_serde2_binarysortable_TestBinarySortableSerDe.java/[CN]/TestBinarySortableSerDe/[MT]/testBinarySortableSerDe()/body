{
  try {
    System.out.println("Beginning Test testBinarySortableSerDe:");
    int num=1000;
    Random r=new Random(1234);
    MyTestClass rows[]=new MyTestClass[num];
    int i;
    for (i=0; i < MyTestClass.nrDecimal.length; i++) {
      MyTestClass t=new MyTestClass();
      t.nonRandomFill(i);
      rows[i]=t;
    }
    for (; i < num; i++) {
      MyTestClass t=new MyTestClass();
      ExtraTypeInfo extraTypeInfo=new ExtraTypeInfo();
      t.randomFill(r,extraTypeInfo);
      rows[i]=t;
    }
    StructObjectInspector rowOI=(StructObjectInspector)ObjectInspectorFactory.getReflectionObjectInspector(MyTestClass.class,ObjectInspectorOptions.JAVA);
    sort(rows,rowOI);
    String fieldNames=ObjectInspectorUtils.getFieldNames(rowOI);
    String fieldTypes=ObjectInspectorUtils.getFieldTypes(rowOI);
    String order;
    order=StringUtils.leftPad("",MyTestClass.fieldCount,'+');
    String nullOrder;
    nullOrder=StringUtils.leftPad("",MyTestClass.fieldCount,'a');
    testBinarySortableSerDe(rows,rowOI,getSerDe(fieldNames,fieldTypes,order,nullOrder),true);
    order=StringUtils.leftPad("",MyTestClass.fieldCount,'-');
    nullOrder=StringUtils.leftPad("",MyTestClass.fieldCount,'z');
    testBinarySortableSerDe(rows,rowOI,getSerDe(fieldNames,fieldTypes,order,nullOrder),false);
    System.out.println("Test testTBinarySortableProtocol passed!");
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw e;
  }
}
