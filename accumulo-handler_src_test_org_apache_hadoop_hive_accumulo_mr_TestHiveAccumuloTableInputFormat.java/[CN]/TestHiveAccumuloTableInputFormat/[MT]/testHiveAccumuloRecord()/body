{
  FileInputFormat.addInputPath(conf,new Path("unused"));
  InputSplit[] splits=inputformat.getSplits(conf,0);
  assertEquals(splits.length,1);
  RecordReader<Text,AccumuloHiveRow> reader=inputformat.getRecordReader(splits[0],conf,null);
  Text rowId=new Text("r1");
  AccumuloHiveRow row=new AccumuloHiveRow();
  row.add(COLUMN_FAMILY.toString(),NAME.toString(),"brian".getBytes());
  row.add(COLUMN_FAMILY.toString(),SID.toString(),parseIntBytes("1"));
  row.add(COLUMN_FAMILY.toString(),DEGREES.toString(),parseDoubleBytes("44.5"));
  row.add(COLUMN_FAMILY.toString(),MILLIS.toString(),parseLongBytes("555"));
  assertTrue(reader.next(rowId,row));
  assertEquals(rowId.toString(),row.getRowId());
  assertTrue(row.hasFamAndQual(COLUMN_FAMILY,NAME));
  assertArrayEquals("brian".getBytes(),row.getValue(COLUMN_FAMILY,NAME));
  assertTrue(row.hasFamAndQual(COLUMN_FAMILY,SID));
  assertArrayEquals(parseIntBytes("1"),row.getValue(COLUMN_FAMILY,SID));
  assertTrue(row.hasFamAndQual(COLUMN_FAMILY,DEGREES));
  assertArrayEquals(parseDoubleBytes("44.5"),row.getValue(COLUMN_FAMILY,DEGREES));
  assertTrue(row.hasFamAndQual(COLUMN_FAMILY,MILLIS));
  assertArrayEquals(parseLongBytes("555"),row.getValue(COLUMN_FAMILY,MILLIS));
}
