{
  Connector con=mockInstance.getConnector(USER,new PasswordToken(PASS.getBytes()));
  Scanner scan=con.createScanner(TEST_TABLE,new Authorizations("blah"));
  IteratorSetting is=new IteratorSetting(1,PrimitiveComparisonFilter.FILTER_PREFIX + 1,PrimitiveComparisonFilter.class);
  is.addOption(PrimitiveComparisonFilter.P_COMPARE_CLASS,IntCompare.class.getName());
  is.addOption(PrimitiveComparisonFilter.COMPARE_OPT_CLASS,GreaterThan.class.getName());
  is.addOption(PrimitiveComparisonFilter.CONST_VAL,new String(Base64.encodeBase64(parseIntBytes("1"))));
  is.addOption(PrimitiveComparisonFilter.COLUMN,"cf:sid");
  scan.addScanIterator(is);
  boolean foundMark=false;
  boolean foundDennis=false;
  int totalCount=0;
  for (  Map.Entry<Key,Value> kv : scan) {
    boolean foundName=false;
    boolean foundSid=false;
    boolean foundDegrees=false;
    boolean foundMillis=false;
    SortedMap<Key,Value> items=PrimitiveComparisonFilter.decodeRow(kv.getKey(),kv.getValue());
    for (    Map.Entry<Key,Value> item : items.entrySet()) {
      if (item.getKey().getRow().toString().equals("r2")) {
        foundMark=true;
      }
 else       if (item.getKey().getRow().toString().equals("r3")) {
        foundDennis=true;
      }
      if (item.getKey().getColumnQualifier().equals(NAME)) {
        foundName=true;
      }
 else       if (item.getKey().getColumnQualifier().equals(SID)) {
        foundSid=true;
      }
 else       if (item.getKey().getColumnQualifier().equals(DEGREES)) {
        foundDegrees=true;
      }
 else       if (item.getKey().getColumnQualifier().equals(MILLIS)) {
        foundMillis=true;
      }
    }
    totalCount++;
    assertTrue(foundDegrees & foundMillis & foundName& foundSid);
  }
  assertTrue(foundDennis & foundMark);
  assertEquals(totalCount,2);
}
