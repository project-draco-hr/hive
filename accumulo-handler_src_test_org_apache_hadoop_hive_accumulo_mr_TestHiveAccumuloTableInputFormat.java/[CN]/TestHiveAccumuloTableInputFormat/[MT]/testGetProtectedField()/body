{
  FileInputFormat.addInputPath(conf,new Path("unused"));
  BatchWriterConfig writerConf=new BatchWriterConfig();
  BatchWriter writer=con.createBatchWriter(TEST_TABLE,writerConf);
  Authorizations origAuths=con.securityOperations().getUserAuthorizations(USER);
  con.securityOperations().changeUserAuthorizations(USER,new Authorizations(origAuths.toString() + ",foo"));
  Mutation m=new Mutation("r4");
  m.put(COLUMN_FAMILY,NAME,new ColumnVisibility("foo"),new Value("frank".getBytes()));
  m.put(COLUMN_FAMILY,SID,new ColumnVisibility("foo"),new Value(parseIntBytes("4")));
  m.put(COLUMN_FAMILY,DEGREES,new ColumnVisibility("foo"),new Value(parseDoubleBytes("60.6")));
  m.put(COLUMN_FAMILY,MILLIS,new ColumnVisibility("foo"),new Value(parseLongBytes("777")));
  writer.addMutation(m);
  writer.close();
  conf.set(AccumuloSerDeParameters.AUTHORIZATIONS_KEY,"foo");
  InputSplit[] splits=inputformat.getSplits(conf,0);
  assertEquals(splits.length,1);
  RecordReader<Text,AccumuloHiveRow> reader=inputformat.getRecordReader(splits[0],conf,null);
  Text rowId=new Text("r1");
  AccumuloHiveRow row=new AccumuloHiveRow();
  assertTrue(reader.next(rowId,row));
  assertEquals(row.getRowId(),rowId.toString());
  assertTrue(row.hasFamAndQual(COLUMN_FAMILY,NAME));
  assertArrayEquals(row.getValue(COLUMN_FAMILY,NAME),"brian".getBytes());
  rowId=new Text("r2");
  assertTrue(reader.next(rowId,row));
  assertEquals(row.getRowId(),rowId.toString());
  assertTrue(row.hasFamAndQual(COLUMN_FAMILY,NAME));
  assertArrayEquals(row.getValue(COLUMN_FAMILY,NAME),"mark".getBytes());
  rowId=new Text("r3");
  assertTrue(reader.next(rowId,row));
  assertEquals(row.getRowId(),rowId.toString());
  assertTrue(row.hasFamAndQual(COLUMN_FAMILY,NAME));
  assertArrayEquals(row.getValue(COLUMN_FAMILY,NAME),"dennis".getBytes());
  rowId=new Text("r4");
  assertTrue(reader.next(rowId,row));
  assertEquals(row.getRowId(),rowId.toString());
  assertTrue(row.hasFamAndQual(COLUMN_FAMILY,NAME));
  assertArrayEquals(row.getValue(COLUMN_FAMILY,NAME),"frank".getBytes());
  assertFalse(reader.next(rowId,row));
}
