{
  Connector con=mockInstance.getConnector(USER,new PasswordToken(PASS.getBytes()));
  Scanner scan=con.createScanner(TEST_TABLE,new Authorizations("blah"));
  IteratorSetting is=new IteratorSetting(1,PrimitiveComparisonFilter.FILTER_PREFIX + 1,PrimitiveComparisonFilter.class);
  is.addOption(PrimitiveComparisonFilter.P_COMPARE_CLASS,DoubleCompare.class.getName());
  is.addOption(PrimitiveComparisonFilter.COMPARE_OPT_CLASS,GreaterThanOrEqual.class.getName());
  is.addOption(PrimitiveComparisonFilter.CONST_VAL,new String(Base64.encodeBase64(parseDoubleBytes("55.6"))));
  is.addOption(PrimitiveComparisonFilter.COLUMN,"cf:dgrs");
  scan.addScanIterator(is);
  IteratorSetting is2=new IteratorSetting(2,PrimitiveComparisonFilter.FILTER_PREFIX + 2,PrimitiveComparisonFilter.class);
  is2.addOption(PrimitiveComparisonFilter.P_COMPARE_CLASS,LongCompare.class.getName());
  is2.addOption(PrimitiveComparisonFilter.COMPARE_OPT_CLASS,LessThan.class.getName());
  is2.addOption(PrimitiveComparisonFilter.CONST_VAL,new String(Base64.encodeBase64(parseLongBytes("778"))));
  is2.addOption(PrimitiveComparisonFilter.COLUMN,"cf:mills");
  scan.addScanIterator(is2);
  boolean foundDennis=false;
  int totalCount=0;
  for (  Map.Entry<Key,Value> kv : scan) {
    boolean foundName=false;
    boolean foundSid=false;
    boolean foundDegrees=false;
    boolean foundMillis=false;
    SortedMap<Key,Value> items=PrimitiveComparisonFilter.decodeRow(kv.getKey(),kv.getValue());
    for (    Map.Entry<Key,Value> item : items.entrySet()) {
      SortedMap<Key,Value> nestedItems=PrimitiveComparisonFilter.decodeRow(item.getKey(),item.getValue());
      for (      Map.Entry<Key,Value> nested : nestedItems.entrySet()) {
        if (nested.getKey().getRow().toString().equals("r3")) {
          foundDennis=true;
        }
        if (nested.getKey().getColumnQualifier().equals(NAME)) {
          foundName=true;
        }
 else         if (nested.getKey().getColumnQualifier().equals(SID)) {
          foundSid=true;
        }
 else         if (nested.getKey().getColumnQualifier().equals(DEGREES)) {
          foundDegrees=true;
        }
 else         if (nested.getKey().getColumnQualifier().equals(MILLIS)) {
          foundMillis=true;
        }
      }
    }
    totalCount++;
    assertTrue(foundDegrees & foundMillis & foundName& foundSid);
  }
  assertTrue(foundDennis);
  assertEquals(totalCount,1);
}
