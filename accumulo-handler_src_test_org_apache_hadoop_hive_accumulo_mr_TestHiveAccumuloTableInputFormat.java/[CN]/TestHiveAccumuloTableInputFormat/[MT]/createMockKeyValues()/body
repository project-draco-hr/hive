{
  mockInstance=new MockInstance(test.getMethodName());
  inputformat=new HiveAccumuloTableInputFormat();
  conf=new JobConf();
  conf.set(AccumuloSerDeParameters.TABLE_NAME,TEST_TABLE);
  conf.set(AccumuloSerDeParameters.USE_MOCK_INSTANCE,"true");
  conf.set(AccumuloSerDeParameters.INSTANCE_NAME,test.getMethodName());
  conf.set(AccumuloSerDeParameters.USER_NAME,USER);
  conf.set(AccumuloSerDeParameters.USER_PASS,PASS);
  conf.set(AccumuloSerDeParameters.ZOOKEEPERS,"localhost:2181");
  columnNames=Arrays.asList("name","sid","dgrs","mills");
  columnTypes=Arrays.<TypeInfo>asList(TypeInfoFactory.stringTypeInfo,TypeInfoFactory.intTypeInfo,TypeInfoFactory.doubleTypeInfo,TypeInfoFactory.longTypeInfo);
  conf.set(AccumuloSerDeParameters.COLUMN_MAPPINGS,"cf:name,cf:sid,cf:dgrs,cf:mills");
  conf.set(serdeConstants.LIST_COLUMNS,"name,sid,dgrs,mills");
  conf.set(serdeConstants.LIST_COLUMN_TYPES,"string,int,double,bigint");
  con=mockInstance.getConnector(USER,new PasswordToken(PASS.getBytes()));
  con.tableOperations().create(TEST_TABLE);
  con.securityOperations().changeUserAuthorizations(USER,new Authorizations("blah"));
  BatchWriterConfig writerConf=new BatchWriterConfig();
  BatchWriter writer=con.createBatchWriter(TEST_TABLE,writerConf);
  Mutation m1=new Mutation(new Text("r1"));
  m1.put(COLUMN_FAMILY,NAME,new Value("brian".getBytes()));
  m1.put(COLUMN_FAMILY,SID,new Value(parseIntBytes("1")));
  m1.put(COLUMN_FAMILY,DEGREES,new Value(parseDoubleBytes("44.5")));
  m1.put(COLUMN_FAMILY,MILLIS,new Value(parseLongBytes("555")));
  Mutation m2=new Mutation(new Text("r2"));
  m2.put(COLUMN_FAMILY,NAME,new Value("mark".getBytes()));
  m2.put(COLUMN_FAMILY,SID,new Value(parseIntBytes("2")));
  m2.put(COLUMN_FAMILY,DEGREES,new Value(parseDoubleBytes("55.5")));
  m2.put(COLUMN_FAMILY,MILLIS,new Value(parseLongBytes("666")));
  Mutation m3=new Mutation(new Text("r3"));
  m3.put(COLUMN_FAMILY,NAME,new Value("dennis".getBytes()));
  m3.put(COLUMN_FAMILY,SID,new Value(parseIntBytes("3")));
  m3.put(COLUMN_FAMILY,DEGREES,new Value(parseDoubleBytes("65.5")));
  m3.put(COLUMN_FAMILY,MILLIS,new Value(parseLongBytes("777")));
  writer.addMutation(m1);
  writer.addMutation(m2);
  writer.addMutation(m3);
  writer.close();
}
