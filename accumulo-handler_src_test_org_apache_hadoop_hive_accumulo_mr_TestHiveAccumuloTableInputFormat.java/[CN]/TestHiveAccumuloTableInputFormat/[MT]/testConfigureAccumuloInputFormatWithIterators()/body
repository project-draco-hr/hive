{
  AccumuloConnectionParameters accumuloParams=new AccumuloConnectionParameters(conf);
  ColumnMapper columnMapper=new ColumnMapper(conf.get(AccumuloSerDeParameters.COLUMN_MAPPINGS),conf.get(AccumuloSerDeParameters.DEFAULT_STORAGE_TYPE),columnNames,columnTypes);
  Set<Pair<Text,Text>> cfCqPairs=inputformat.getPairCollection(columnMapper.getColumnMappings());
  List<IteratorSetting> iterators=new ArrayList<IteratorSetting>();
  Set<Range> ranges=Collections.singleton(new Range());
  String instanceName="realInstance";
  String zookeepers="host1:2181,host2:2181,host3:2181";
  IteratorSetting cfg=new IteratorSetting(50,PrimitiveComparisonFilter.class);
  cfg.addOption(PrimitiveComparisonFilter.P_COMPARE_CLASS,StringCompare.class.getName());
  cfg.addOption(PrimitiveComparisonFilter.COMPARE_OPT_CLASS,Equal.class.getName());
  cfg.addOption(PrimitiveComparisonFilter.CONST_VAL,"dave");
  cfg.addOption(PrimitiveComparisonFilter.COLUMN,"person:name");
  iterators.add(cfg);
  cfg=new IteratorSetting(50,PrimitiveComparisonFilter.class);
  cfg.addOption(PrimitiveComparisonFilter.P_COMPARE_CLASS,IntCompare.class.getName());
  cfg.addOption(PrimitiveComparisonFilter.COMPARE_OPT_CLASS,Equal.class.getName());
  cfg.addOption(PrimitiveComparisonFilter.CONST_VAL,"50");
  cfg.addOption(PrimitiveComparisonFilter.COLUMN,"person:age");
  iterators.add(cfg);
  ZooKeeperInstance zkInstance=Mockito.mock(ZooKeeperInstance.class);
  HiveAccumuloTableInputFormat mockInputFormat=Mockito.mock(HiveAccumuloTableInputFormat.class);
  Mockito.when(zkInstance.getInstanceName()).thenReturn(instanceName);
  Mockito.when(zkInstance.getZooKeepers()).thenReturn(zookeepers);
  Mockito.doCallRealMethod().when(mockInputFormat).configure(conf,zkInstance,con,accumuloParams,columnMapper,iterators,ranges);
  Mockito.doCallRealMethod().when(mockInputFormat).getPairCollection(columnMapper.getColumnMappings());
  mockInputFormat.configure(conf,zkInstance,con,accumuloParams,columnMapper,iterators,ranges);
  Mockito.verify(mockInputFormat).setZooKeeperInstance(conf,instanceName,zookeepers,false);
  Mockito.verify(mockInputFormat).setConnectorInfo(conf,USER,new PasswordToken(PASS));
  Mockito.verify(mockInputFormat).setInputTableName(conf,TEST_TABLE);
  Mockito.verify(mockInputFormat).setScanAuthorizations(conf,con.securityOperations().getUserAuthorizations(USER));
  Mockito.verify(mockInputFormat).addIterators(conf,iterators);
  Mockito.verify(mockInputFormat).setRanges(conf,ranges);
  Mockito.verify(mockInputFormat).fetchColumns(conf,cfCqPairs);
}
