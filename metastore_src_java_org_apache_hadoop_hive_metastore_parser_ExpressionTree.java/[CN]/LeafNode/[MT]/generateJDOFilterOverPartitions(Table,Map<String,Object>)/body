{
  int partitionColumnCount=table.getPartitionKeys().size();
  int partitionColumnIndex=getPartColIndexForFilter(table);
  String valueAsString=getFilterPushdownParam(table,partitionColumnIndex);
  String paramName=PARAM_PREFIX + params.size();
  params.put(paramName,valueAsString);
  boolean isOpEquals=operator == Operator.EQUALS;
  if (isOpEquals || operator == Operator.NOTEQUALS || operator == Operator.NOTEQUALS2) {
    return makeFilterForEquals(keyName,valueAsString,paramName,params,partitionColumnIndex,partitionColumnCount,isOpEquals);
  }
  String keyEqual=FileUtils.escapePathName(keyName) + "=";
  int keyEqualLength=keyEqual.length();
  String valString;
  if (partitionColumnIndex == (partitionColumnCount - 1)) {
    valString="partitionName.substring(partitionName.indexOf(\"" + keyEqual + "\")+"+ keyEqualLength+ ")";
  }
 else {
    valString="partitionName.substring(partitionName.indexOf(\"" + keyEqual + "\")+"+ keyEqualLength+ ").substring(0, partitionName.substring(partitionName.indexOf(\""+ keyEqual+ "\")+"+ keyEqualLength+ ").indexOf(\"/\"))";
  }
  if (operator == Operator.LIKE) {
    if (isReverseOrder) {
      throw new MetaException("Value should be on the RHS for LIKE operator : Key <" + keyName + ">");
    }
    return " " + valString + "."+ operator.getJdoOp()+ "("+ paramName+ ") ";
  }
  return isReverseOrder ? paramName + " " + operator.getJdoOp()+ " "+ valString : " " + valString + " "+ operator.getJdoOp()+ " "+ paramName;
}
