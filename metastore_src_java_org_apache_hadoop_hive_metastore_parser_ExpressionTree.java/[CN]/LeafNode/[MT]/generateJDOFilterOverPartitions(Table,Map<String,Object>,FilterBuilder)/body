{
  int partitionColumnCount=table.getPartitionKeys().size();
  int partitionColumnIndex=getPartColIndexForFilter(table,filterBuilder);
  if (filterBuilder.hasError())   return;
  String valueAsString=getFilterPushdownParam(table,partitionColumnIndex,filterBuilder);
  if (filterBuilder.hasError())   return;
  String paramName=PARAM_PREFIX + params.size();
  params.put(paramName,valueAsString);
  boolean isOpEquals=operator == Operator.EQUALS;
  if (isOpEquals || operator == Operator.NOTEQUALS || operator == Operator.NOTEQUALS2) {
    makeFilterForEquals(keyName,valueAsString,paramName,params,partitionColumnIndex,partitionColumnCount,isOpEquals,filterBuilder);
    return;
  }
  String keyEqual=FileUtils.escapePathName(keyName) + "=";
  String valString="partitionName.substring(";
  String indexOfKeyStr="";
  if (partitionColumnIndex != 0) {
    keyEqual="/" + keyEqual;
    indexOfKeyStr="partitionName.indexOf(\"" + keyEqual + "\") + ";
    valString+=indexOfKeyStr;
  }
  valString+=keyEqual.length();
  if (partitionColumnIndex != (partitionColumnCount - 1)) {
    valString+=", partitionName.indexOf(\"/\", " + indexOfKeyStr + keyEqual.length()+ ")";
  }
  valString+=")";
  if (operator == Operator.LIKE) {
    if (isReverseOrder) {
      filterBuilder.setError("Value should be on the RHS for LIKE operator : Key <" + keyName + ">");
    }
    filterBuilder.append(" " + valString + "."+ operator.getJdoOp()+ "("+ paramName+ ") ");
  }
 else {
    filterBuilder.append(isReverseOrder ? paramName + " " + operator.getJdoOp()+ " "+ valString : " " + valString + " "+ operator.getJdoOp()+ " "+ paramName);
  }
}
