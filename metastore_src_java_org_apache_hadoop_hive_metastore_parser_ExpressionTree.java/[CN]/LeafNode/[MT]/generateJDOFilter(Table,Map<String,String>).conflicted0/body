{
  int partitionIndex;
  for (partitionIndex=0; partitionIndex < table.getPartitionKeys().size(); partitionIndex++) {
    if (table.getPartitionKeys().get(partitionIndex).getName().equalsIgnoreCase(keyName)) {
      break;
    }
  }
  if (partitionIndex == table.getPartitionKeys().size()) {
    throw new MetaException("Specified key <" + keyName + "> is not a partitioning key for the table");
  }
  if (!table.getPartitionKeys().get(partitionIndex).getType().equals(Constants.STRING_TYPE_NAME)) {
    throw new MetaException("Filtering is supported only on partition keys of type string");
  }
  String paramName=PARAM_PREFIX + params.size();
  params.put(paramName,value);
  String filter;
  if (isReverseOrder) {
    if (operator == Operator.LIKE) {
      throw new MetaException("Value should be on the RHS for LIKE operator : " + "Key <" + keyName + ">");
    }
    filter=paramName + " " + operator.getJdoOp()+ " "+ " this.values.get("+ partitionIndex+ ")";
  }
 else {
    if (operator == Operator.LIKE) {
      filter=" this.values.get(" + partitionIndex + ")."+ operator.getJdoOp()+ "("+ paramName+ ") ";
    }
 else {
      filter=" this.values.get(" + partitionIndex + ") "+ operator.getJdoOp()+ " "+ paramName;
    }
  }
  return filter;
}
