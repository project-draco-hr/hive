{
  if (hcatFieldSchema == null) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("hcatFieldSchema is null for fSchema '" + fSchema.alias + "'");
    }
  }
  byte type=fSchema.type;
switch (type) {
case DataType.CHARARRAY:
case DataType.BIGCHARARRAY:
    if (hcatFieldSchema != null && hcatFieldSchema.getTypeInfo() != null) {
      return new HCatFieldSchema(fSchema.alias,hcatFieldSchema.getTypeInfo(),null);
    }
  return new HCatFieldSchema(fSchema.alias,TypeInfoFactory.stringTypeInfo,null);
case DataType.INTEGER:
if (hcatFieldSchema != null) {
  if (!SUPPORTED_INTEGER_CONVERSIONS.contains(hcatFieldSchema.getType())) {
    throw new FrontendException("Unsupported type: " + type + "  in Pig's schema",PigHCatUtil.PIG_EXCEPTION_CODE);
  }
  return new HCatFieldSchema(fSchema.alias,hcatFieldSchema.getTypeInfo(),null);
}
return new HCatFieldSchema(fSchema.alias,TypeInfoFactory.intTypeInfo,null);
case DataType.LONG:
return new HCatFieldSchema(fSchema.alias,TypeInfoFactory.longTypeInfo,null);
case DataType.FLOAT:
return new HCatFieldSchema(fSchema.alias,TypeInfoFactory.floatTypeInfo,null);
case DataType.DOUBLE:
return new HCatFieldSchema(fSchema.alias,TypeInfoFactory.doubleTypeInfo,null);
case DataType.BYTEARRAY:
return new HCatFieldSchema(fSchema.alias,TypeInfoFactory.binaryTypeInfo,null);
case DataType.BOOLEAN:
return new HCatFieldSchema(fSchema.alias,TypeInfoFactory.booleanTypeInfo,null);
case DataType.DATETIME:
if (hcatFieldSchema != null && hcatFieldSchema.getTypeInfo() != null) {
return new HCatFieldSchema(fSchema.alias,hcatFieldSchema.getTypeInfo(),null);
}
return new HCatFieldSchema(fSchema.alias,TypeInfoFactory.timestampTypeInfo,null);
case DataType.BIGDECIMAL:
if (hcatFieldSchema != null && hcatFieldSchema.getTypeInfo() != null) {
return new HCatFieldSchema(fSchema.alias,hcatFieldSchema.getTypeInfo(),null);
}
return new HCatFieldSchema(fSchema.alias,TypeInfoFactory.decimalTypeInfo,null);
case DataType.BAG:
Schema bagSchema=fSchema.schema;
List<HCatFieldSchema> arrFields=new ArrayList<HCatFieldSchema>(1);
FieldSchema field;
if (removeTupleFromBag(hcatFieldSchema,fSchema)) {
field=bagSchema.getField(0).schema.getField(0);
}
 else {
field=bagSchema.getField(0);
}
arrFields.add(getHCatFSFromPigFS(field,hcatFieldSchema == null ? null : hcatFieldSchema.getArrayElementSchema().get(0),pigSchema,tableSchema));
return new HCatFieldSchema(fSchema.alias,Type.ARRAY,new HCatSchema(arrFields),"");
case DataType.TUPLE:
List<HCatFieldSchema> hcatFSs=new ArrayList<HCatFieldSchema>();
HCatSchema structSubSchema=hcatFieldSchema == null ? null : hcatFieldSchema.getStructSubSchema();
List<FieldSchema> fields=fSchema.schema.getFields();
for (int i=0; i < fields.size(); i++) {
FieldSchema fieldSchema=fields.get(i);
hcatFSs.add(getHCatFSFromPigFS(fieldSchema,structSubSchema == null ? null : structSubSchema.get(i),pigSchema,tableSchema));
}
return new HCatFieldSchema(fSchema.alias,Type.STRUCT,new HCatSchema(hcatFSs),"");
case DataType.MAP:
{
HCatFieldSchema valFS;
List<HCatFieldSchema> valFSList=new ArrayList<HCatFieldSchema>(1);
if (hcatFieldSchema != null) {
return HCatFieldSchema.createMapTypeFieldSchema(fSchema.alias,hcatFieldSchema.getMapKeyTypeInfo(),hcatFieldSchema.getMapValueSchema(),"");
}
valFS=new HCatFieldSchema(fSchema.alias,TypeInfoFactory.stringTypeInfo,"");
valFSList.add(valFS);
return HCatFieldSchema.createMapTypeFieldSchema(fSchema.alias,TypeInfoFactory.stringTypeInfo,new HCatSchema(valFSList),"");
}
case DataType.BIGINTEGER:
default :
throw new FrontendException("Unsupported type: " + type + "  in Pig's schema",PigHCatUtil.PIG_EXCEPTION_CODE);
}
}
