{
  try {
    if (pigObj == null)     return null;
    Type type=hcatFS.getType();
switch (type) {
case BINARY:
      return ((DataByteArray)pigObj).get();
case STRUCT:
    HCatSchema structSubSchema=hcatFS.getStructSubSchema();
  List<Object> all=((Tuple)pigObj).getAll();
ArrayList<Object> converted=new ArrayList<Object>(all.size());
for (int i=0; i < all.size(); i++) {
converted.add(getJavaObj(all.get(i),structSubSchema.get(i)));
}
return converted;
case ARRAY:
DataBag pigBag=(DataBag)pigObj;
HCatFieldSchema tupFS=hcatFS.getArrayElementSchema().get(0);
boolean needTuple=tupFS.getType() == Type.STRUCT;
List<Object> bagContents=new ArrayList<Object>((int)pigBag.size());
Iterator<Tuple> bagItr=pigBag.iterator();
while (bagItr.hasNext()) {
bagContents.add(getJavaObj(needTuple ? bagItr.next() : bagItr.next().get(0),tupFS));
}
return bagContents;
case MAP:
Map<?,?> pigMap=(Map<?,?>)pigObj;
Map<Object,Object> typeMap=new HashMap<Object,Object>();
for (Entry<?,?> entry : pigMap.entrySet()) {
typeMap.put((String)entry.getKey(),getJavaObj(entry.getValue(),hcatFS.getMapValueSchema().get(0)));
}
return typeMap;
case STRING:
case INT:
case BIGINT:
case FLOAT:
case DOUBLE:
return pigObj;
case SMALLINT:
if ((Integer)pigObj < Short.MIN_VALUE || (Integer)pigObj > Short.MAX_VALUE) {
handleOutOfRangeValue(pigObj,hcatFS);
return null;
}
return ((Integer)pigObj).shortValue();
case TINYINT:
if ((Integer)pigObj < Byte.MIN_VALUE || (Integer)pigObj > Byte.MAX_VALUE) {
handleOutOfRangeValue(pigObj,hcatFS);
return null;
}
return ((Integer)pigObj).byteValue();
case BOOLEAN:
if (pigObj instanceof String) {
if (((String)pigObj).trim().compareTo("0") == 0) {
return Boolean.FALSE;
}
if (((String)pigObj).trim().compareTo("1") == 0) {
return Boolean.TRUE;
}
throw new BackendException("Unexpected type " + type + " for value "+ pigObj+ " of class "+ pigObj.getClass().getName(),PigHCatUtil.PIG_EXCEPTION_CODE);
}
return Boolean.parseBoolean(pigObj.toString());
case DECIMAL:
BigDecimal bd=(BigDecimal)pigObj;
DecimalTypeInfo dti=(DecimalTypeInfo)hcatFS.getTypeInfo();
if (bd.precision() > dti.precision() || bd.scale() > dti.scale()) {
handleOutOfRangeValue(pigObj,hcatFS);
return null;
}
return HiveDecimal.create(bd);
case CHAR:
String charVal=(String)pigObj;
CharTypeInfo cti=(CharTypeInfo)hcatFS.getTypeInfo();
if (charVal.length() > cti.getLength()) {
handleOutOfRangeValue(pigObj,hcatFS);
return null;
}
return new HiveChar(charVal,cti.getLength());
case VARCHAR:
String varcharVal=(String)pigObj;
VarcharTypeInfo vti=(VarcharTypeInfo)hcatFS.getTypeInfo();
if (varcharVal.length() > vti.getLength()) {
handleOutOfRangeValue(pigObj,hcatFS);
return null;
}
return new HiveVarchar(varcharVal,vti.getLength());
case TIMESTAMP:
DateTime dt=(DateTime)pigObj;
return new Timestamp(dt.getMillis());
case DATE:
DateTime dateTime=((DateTime)pigObj);
if (dateTime.getMillisOfDay() != 0) {
handleOutOfRangeValue(pigObj,hcatFS,"Time component must be 0 (midnight) in local timezone; Local TZ val='" + pigObj + "'");
return null;
}
return new Date(dateTime.getYear() - 1900,dateTime.getMonthOfYear() - 1,dateTime.getDayOfMonth());
default :
throw new BackendException("Unexpected HCat type " + type + " for value "+ pigObj+ " of class "+ pigObj.getClass().getName(),PigHCatUtil.PIG_EXCEPTION_CODE);
}
}
 catch (BackendException e) {
throw new BackendException((hcatFS.getName() == null ? " " : hcatFS.getName() + ".") + e.getMessage(),e);
}
}
