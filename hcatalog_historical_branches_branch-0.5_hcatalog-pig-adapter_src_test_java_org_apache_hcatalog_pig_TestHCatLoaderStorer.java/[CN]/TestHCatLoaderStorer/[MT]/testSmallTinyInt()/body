{
  String readTblName="test_small_tiny_int";
  File dataDir=new File(TEST_DATA_DIR + "/testSmallTinyIntData");
  File dataFile=new File(dataDir,"testSmallTinyInt.tsv");
  String writeTblName="test_small_tiny_int_write";
  File writeDataFile=new File(TEST_DATA_DIR,writeTblName + ".tsv");
  FileUtil.fullyDelete(dataDir);
  Assert.assertTrue(dataDir.mkdir());
  HcatTestUtils.createTestDataFile(dataFile.getAbsolutePath(),new String[]{String.format("%d\t%d",Short.MIN_VALUE,Byte.MIN_VALUE),String.format("%d\t%d",Short.MAX_VALUE,Byte.MAX_VALUE)});
  Assert.assertEquals(0,driver.run("drop table if exists " + readTblName).getResponseCode());
  Assert.assertEquals(0,driver.run("create external table " + readTblName + " (my_small_int smallint, my_tiny_int tinyint)"+ " row format delimited fields terminated by '\t' stored as textfile").getResponseCode());
  Assert.assertEquals(0,driver.run("load data local inpath '" + dataDir.getAbsolutePath() + "' into table "+ readTblName).getResponseCode());
  PigServer server=new PigServer(ExecType.LOCAL);
  server.registerQuery("data = load '" + readTblName + "' using org.apache.hcatalog.pig.HCatLoader();");
  Schema schema=server.dumpSchema("data");
  Assert.assertEquals(2,schema.getFields().size());
  Assert.assertEquals("my_small_int",schema.getField(0).alias);
  Assert.assertEquals(DataType.INTEGER,schema.getField(0).type);
  Assert.assertEquals("my_tiny_int",schema.getField(1).alias);
  Assert.assertEquals(DataType.INTEGER,schema.getField(1).type);
  Iterator<Tuple> it=server.openIterator("data");
  Tuple t=it.next();
  Assert.assertEquals(new Integer(Short.MIN_VALUE),t.get(0));
  Assert.assertEquals(new Integer(Byte.MIN_VALUE),t.get(1));
  t=it.next();
  Assert.assertEquals(new Integer(Short.MAX_VALUE),t.get(0));
  Assert.assertEquals(new Integer(Byte.MAX_VALUE),t.get(1));
  Assert.assertFalse(it.hasNext());
  Assert.assertEquals(0,driver.run("drop table if exists " + writeTblName).getResponseCode());
  Assert.assertEquals(0,driver.run("create table " + writeTblName + " (my_small_int smallint, my_tiny_int tinyint) stored as rcfile").getResponseCode());
  HcatTestUtils.createTestDataFile(writeDataFile.getAbsolutePath(),new String[]{String.format("%d\t%d",Short.MIN_VALUE,Byte.MIN_VALUE),String.format("%d\t%d",Short.MAX_VALUE,Byte.MAX_VALUE)});
  smallTinyIntBoundsCheckHelper(writeDataFile.getAbsolutePath(),ExecJob.JOB_STATUS.COMPLETED);
  HcatTestUtils.createTestDataFile(TEST_DATA_DIR + "/shortTooSmall.tsv",new String[]{String.format("%d\t%d",Short.MIN_VALUE - 1,0)});
  smallTinyIntBoundsCheckHelper(TEST_DATA_DIR + "/shortTooSmall.tsv",ExecJob.JOB_STATUS.FAILED);
  HcatTestUtils.createTestDataFile(TEST_DATA_DIR + "/shortTooBig.tsv",new String[]{String.format("%d\t%d",Short.MAX_VALUE + 1,0)});
  smallTinyIntBoundsCheckHelper(TEST_DATA_DIR + "/shortTooBig.tsv",ExecJob.JOB_STATUS.FAILED);
  HcatTestUtils.createTestDataFile(TEST_DATA_DIR + "/byteTooSmall.tsv",new String[]{String.format("%d\t%d",0,Byte.MIN_VALUE - 1)});
  smallTinyIntBoundsCheckHelper(TEST_DATA_DIR + "/byteTooSmall.tsv",ExecJob.JOB_STATUS.FAILED);
  HcatTestUtils.createTestDataFile(TEST_DATA_DIR + "/byteTooBig.tsv",new String[]{String.format("%d\t%d",0,Byte.MAX_VALUE + 1)});
  smallTinyIntBoundsCheckHelper(TEST_DATA_DIR + "/byteTooBig.tsv",ExecJob.JOB_STATUS.FAILED);
}
