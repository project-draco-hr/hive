{
  if (arguments.length < 2) {
    throw new UDFArgumentLengthException("The function GenericUDFReflect2(arg0,method[,arg1[,arg2]...])" + " accepts 2 or more arguments.");
  }
  if (arguments[0].getCategory() != ObjectInspector.Category.PRIMITIVE) {
    throw new UDFArgumentTypeException(1,"The target instance should be a primitive type.");
  }
  targetOI=(PrimitiveObjectInspector)arguments[0];
  if (!(arguments[1] instanceof StringObjectInspector)) {
    throw new UDFArgumentTypeException(1,"The method name should be string type.");
  }
  if (!(arguments[1] instanceof ConstantObjectInspector)) {
    throw new UDFArgumentTypeException(1,"The method name should be a constant.");
  }
  Text methodName=(Text)((ConstantObjectInspector)arguments[1]).getWritableConstantValue();
  if (methodName.toString().equals("hashCode") && arguments.length == 2) {
    throw new UDFArgumentTypeException(1,"Use hash() UDF instead of this.");
  }
  setupParameterOIs(arguments,2);
  Class<?> targetClass=PrimitiveObjectInspectorUtils.getTypeEntryFromPrimitiveCategory(targetOI.getPrimitiveCategory()).primitiveJavaClass;
  try {
    method=findMethod(targetClass,methodName.toString(),null,true);
    returnOI=PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(getTypeFor(method.getReturnType()).primitiveCategory);
    returnObj=(Writable)returnOI.getPrimitiveWritableClass().newInstance();
  }
 catch (  Exception e) {
    throw new UDFArgumentException(e);
  }
  return returnOI;
}
