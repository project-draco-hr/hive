{
{
    populateDataFile();
    PigServer server=new PigServer(ExecType.LOCAL,props);
    UDFContext.getUDFContext().setClientSystemProps();
    server.setBatchOn();
    server.registerQuery("A = load '" + fqdataLocation + "' using PigStorage(',') as (emp_id:int, emp_name:chararray, emp_dob:chararray, emp_sex:chararray, emp_country:chararray, emp_state:chararray);");
    server.registerQuery("INTN = FILTER A BY emp_country == 'IN' AND emp_state == 'TN';");
    server.registerQuery("INKA = FILTER A BY emp_country == 'IN' AND emp_state == 'KA';");
    server.registerQuery("USTN = FILTER A BY emp_country == 'US' AND emp_state == 'TN';");
    server.registerQuery("USKA = FILTER A BY emp_country == 'US' AND emp_state == 'KA';");
    server.registerQuery("store INTN into '" + PARTITIONED_TABLE + "' using org.apache.hcatalog.pig.HCatEximStorer('"+ fqexportLocation+ "', 'emp_country=in,emp_state=tn');");
    server.registerQuery("store INKA into '" + PARTITIONED_TABLE + "' using org.apache.hcatalog.pig.HCatEximStorer('"+ fqexportLocation+ "', 'emp_country=in,emp_state=ka');");
    server.registerQuery("store USTN into '" + PARTITIONED_TABLE + "' using org.apache.hcatalog.pig.HCatEximStorer('"+ fqexportLocation+ "', 'emp_country=us,emp_state=tn');");
    server.registerQuery("store USKA into '" + PARTITIONED_TABLE + "' using org.apache.hcatalog.pig.HCatEximStorer('"+ fqexportLocation+ "', 'emp_country=us,emp_state=ka');");
    server.executeBatch();
  }
{
    PigServer server=new PigServer(ExecType.LOCAL,props);
    UDFContext.getUDFContext().setClientSystemProps();
    server.registerQuery("A = load '" + fqexportLocation + "' using org.apache.hcatalog.pig.HCatEximLoader() "+ ";");
    Iterator<Tuple> XIter=server.openIterator("A");
    Map<Integer,EmpDetail> empDetails=new TreeMap<Integer,EmpDetail>();
    addEmpDetail(empDetails,237,"Krishna","01/01/1990","M","in","tn");
    addEmpDetail(empDetails,238,"Kalpana","01/01/2000","F","in","ka");
    addEmpDetail(empDetails,239,"Satya","01/01/2001","M","us","tn");
    addEmpDetail(empDetails,240,"Kavya","01/01/2002","F","us","ka");
    while (XIter.hasNext()) {
      Tuple t=XIter.next();
      assertNotSame(0,empDetails.size());
      assertEmpDetail(t,empDetails);
    }
    assertEquals(0,empDetails.size());
  }
}
