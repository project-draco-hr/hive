{
  JoinAlgorithm joinAlgorithm=null;
  RelOptCost minJoinCost=null;
  if (LOG.isTraceEnabled()) {
    LOG.trace("Join algorithm selection for:\n" + RelOptUtil.toString(join));
  }
  for (  JoinAlgorithm possibleAlgorithm : this.joinAlgorithms) {
    if (!possibleAlgorithm.isExecutable(join)) {
      continue;
    }
    RelOptCost joinCost=possibleAlgorithm.getCost(join);
    if (LOG.isTraceEnabled()) {
      LOG.trace(possibleAlgorithm + " cost: " + joinCost);
    }
    if (minJoinCost == null || joinCost.isLt(minJoinCost)) {
      joinAlgorithm=possibleAlgorithm;
      minJoinCost=joinCost;
    }
  }
  if (LOG.isTraceEnabled()) {
    LOG.trace(joinAlgorithm + " selected");
  }
  join.setJoinAlgorithm(joinAlgorithm);
  join.setJoinCost(minJoinCost);
  return minJoinCost;
}
