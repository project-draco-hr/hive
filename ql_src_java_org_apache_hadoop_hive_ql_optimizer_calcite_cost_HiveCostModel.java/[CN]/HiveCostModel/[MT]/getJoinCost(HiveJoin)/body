{
  EnumSet<JoinAlgorithm> possibleAlgorithms=getExecutableJoinAlgorithms(join);
  JoinAlgorithm joinAlgorithm=null;
  RelOptCost minJoinCost=null;
  if (LOG.isDebugEnabled()) {
    LOG.debug("Join algorithm selection for:\n" + RelOptUtil.toString(join));
  }
  for (  JoinAlgorithm possibleAlgorithm : possibleAlgorithms) {
    RelOptCost joinCost=getJoinCost(join,possibleAlgorithm);
    if (LOG.isDebugEnabled()) {
      LOG.debug(possibleAlgorithm + " cost: " + joinCost);
    }
    if (minJoinCost == null || joinCost.isLt(minJoinCost)) {
      joinAlgorithm=possibleAlgorithm;
      minJoinCost=joinCost;
    }
  }
  join.setJoinAlgorithm(joinAlgorithm);
  join.setJoinCost(minJoinCost);
  if (LOG.isDebugEnabled()) {
    LOG.debug(joinAlgorithm + " selected");
  }
  return minJoinCost;
}
