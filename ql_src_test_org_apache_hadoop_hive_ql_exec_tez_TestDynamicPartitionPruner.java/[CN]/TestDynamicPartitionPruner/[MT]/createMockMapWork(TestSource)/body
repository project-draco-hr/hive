{
  MapWork mapWork=mock(MapWork.class);
  Map<String,List<TableDesc>> tableMap=new HashMap<>();
  Map<String,List<String>> columnMap=new HashMap<>();
  Map<String,List<String>> typeMap=new HashMap<>();
  Map<String,List<ExprNodeDesc>> exprMap=new HashMap<>();
  int count=0;
  for (  TestSource testSource : testSources) {
    for (int i=0; i < testSource.numExpressions; i++) {
      List<TableDesc> tableDescList=tableMap.get(testSource.vertexName);
      if (tableDescList == null) {
        tableDescList=new LinkedList<>();
        tableMap.put(testSource.vertexName,tableDescList);
      }
      tableDescList.add(mock(TableDesc.class));
      List<String> columnList=columnMap.get(testSource.vertexName);
      if (columnList == null) {
        columnList=new LinkedList<>();
        columnMap.put(testSource.vertexName,columnList);
      }
      columnList.add(testSource.vertexName + "c_" + count+ "_"+ i);
      List<String> typeList=typeMap.get(testSource.vertexName);
      if (typeList == null) {
        typeList=new LinkedList<>();
        typeMap.put(testSource.vertexName,typeList);
      }
      typeList.add("string");
      List<ExprNodeDesc> exprNodeDescList=exprMap.get(testSource.vertexName);
      if (exprNodeDescList == null) {
        exprNodeDescList=new LinkedList<>();
        exprMap.put(testSource.vertexName,exprNodeDescList);
      }
      exprNodeDescList.add(mock(ExprNodeDesc.class));
    }
    count++;
  }
  doReturn(tableMap).when(mapWork).getEventSourceTableDescMap();
  doReturn(columnMap).when(mapWork).getEventSourceColumnNameMap();
  doReturn(exprMap).when(mapWork).getEventSourcePartKeyExprMap();
  doReturn(typeMap).when(mapWork).getEventSourceColumnTypeMap();
  return mapWork;
}
