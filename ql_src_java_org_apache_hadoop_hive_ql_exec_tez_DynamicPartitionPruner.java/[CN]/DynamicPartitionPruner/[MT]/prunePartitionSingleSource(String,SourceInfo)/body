{
  if (si.skipPruning.get()) {
    LOG.info("Skip pruning on " + source + ", column "+ si.columnName);
    return;
  }
  Set<Object> values=si.values;
  String columnName=si.columnName;
  if (LOG.isDebugEnabled()) {
    StringBuilder sb=new StringBuilder("Pruning ");
    sb.append(columnName);
    sb.append(" with ");
    for (    Object value : values) {
      sb.append(value == null ? null : value.toString());
      sb.append(", ");
    }
    LOG.debug(sb.toString());
  }
  ObjectInspector targetOi=findTargetOi(si.partKey,si.columnName);
  Converter converter=ObjectInspectorConverters.getConverter(PrimitiveObjectInspectorFactory.javaStringObjectInspector,targetOi);
  StructObjectInspector soi=ObjectInspectorFactory.getStandardStructObjectInspector(Collections.singletonList(columnName),Collections.singletonList(targetOi));
  @SuppressWarnings("rawtypes") ExprNodeEvaluator eval=ExprNodeEvaluatorFactory.get(si.partKey);
  eval.initialize(soi);
  applyFilterToPartitions(converter,eval,columnName,values);
}
