{
switch (type.getCategory()) {
case PRIMITIVE:
    PrimitiveTypeInfo primitiveType=(PrimitiveTypeInfo)type;
  return PrimitiveObjectInspectorFactory.getPrimitiveJavaObjectInspector(primitiveType);
case MAP:
MapTypeInfo mapType=(MapTypeInfo)type;
MapObjectInspector mapInspector=ObjectInspectorFactory.getStandardMapObjectInspector(getObjectInspector(mapType.getMapKeyTypeInfo()),getObjectInspector(mapType.getMapValueTypeInfo()));
return mapInspector;
case LIST:
ListTypeInfo listType=(ListTypeInfo)type;
ListObjectInspector listInspector=ObjectInspectorFactory.getStandardListObjectInspector(getObjectInspector(listType.getListElementTypeInfo()));
return listInspector;
case STRUCT:
StructTypeInfo structType=(StructTypeInfo)type;
List<TypeInfo> fieldTypes=structType.getAllStructFieldTypeInfos();
List<ObjectInspector> fieldInspectors=new ArrayList<ObjectInspector>();
for (TypeInfo fieldType : fieldTypes) {
fieldInspectors.add(getObjectInspector(fieldType));
}
StructObjectInspector structInspector=ObjectInspectorFactory.getStandardStructObjectInspector(structType.getAllStructFieldNames(),fieldInspectors);
return structInspector;
default :
throw new IOException("Unknown field schema type");
}
}
