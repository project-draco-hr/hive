{
  try {
    while (!isShutdown.get()) {
synchronized (lock) {
        task=waitQueue.peek();
        if (task == null) {
          if (!isShutdown.get()) {
            lock.wait();
          }
          continue;
        }
        boolean shouldWait=false;
        if (task.getTaskRunnerCallable().canFinish()) {
          if (isDebugEnabled) {
            LOG.debug("Attempting to schedule task {}, canFinish={}. Current state: preemptionQueueSize={}, numSlotsAvailable={}, waitQueueSize={}",task.getRequestId(),task.getTaskRunnerCallable().canFinish(),preemptionQueue.size(),numSlotsAvailable.get(),waitQueue.size());
          }
          if (numSlotsAvailable.get() == 0 && preemptionQueue.isEmpty()) {
            shouldWait=true;
          }
        }
 else {
          if (numSlotsAvailable.get() == 0) {
            shouldWait=true;
          }
        }
        if (shouldWait) {
          if (!isShutdown.get()) {
            lock.wait();
          }
          continue;
        }
      }
      boolean scheduled=trySchedule(task);
      if (scheduled) {
synchronized (lock) {
          waitQueue.remove(task);
        }
      }
synchronized (lock) {
        while (waitQueue.isEmpty()) {
          if (!isShutdown.get()) {
            lock.wait();
          }
        }
      }
    }
  }
 catch (  InterruptedException e) {
    if (isShutdown.get()) {
      LOG.info(WAIT_QUEUE_SCHEDULER_THREAD_NAME_FORMAT + " thread has been interrupted after shutdown.");
    }
 else {
      LOG.warn(WAIT_QUEUE_SCHEDULER_THREAD_NAME_FORMAT + " interrupted without shutdown",e);
      throw new RuntimeException(e);
    }
  }
}
