{
  super(TaskExecutorService.class.getSimpleName());
  LOG.info("TaskExecutorService is being setup with parameters: " + "numExecutors=" + numExecutors + ", waitQueueSize="+ waitQueueSize+ ", waitQueueComparatorClassName="+ waitQueueComparatorClassName+ ", enablePreemption="+ enablePreemption);
  final Comparator<TaskWrapper> waitQueueComparator;
  try {
    Class<? extends Comparator> waitQueueComparatorClazz=(Class<? extends Comparator>)Class.forName(waitQueueComparatorClassName);
    Constructor<? extends Comparator> ctor=waitQueueComparatorClazz.getConstructor(null);
    waitQueueComparator=ctor.newInstance(null);
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException("Failed to load wait queue comparator, class=" + waitQueueComparatorClassName,e);
  }
catch (  NoSuchMethodException e) {
    throw new RuntimeException("Failed to find constructor for wait queue comparator, class=" + waitQueueComparatorClassName,e);
  }
catch (  InvocationTargetException|InstantiationException|IllegalAccessException e) {
    throw new RuntimeException("Failed to find instantiate wait queue comparator, class=" + waitQueueComparatorClassName,e);
  }
  this.waitQueue=new EvictingPriorityBlockingQueue<>(waitQueueComparator,waitQueueSize);
  this.threadPoolExecutor=new ThreadPoolExecutor(numExecutors,numExecutors,1,TimeUnit.MINUTES,new SynchronousQueue<Runnable>(),new ThreadFactoryBuilder().setDaemon(true).setNameFormat(TASK_EXECUTOR_THREAD_NAME_FORMAT).build());
  this.executorService=MoreExecutors.listeningDecorator(threadPoolExecutor);
  this.preemptionQueue=new PriorityBlockingQueue<>(numExecutors,new PreemptionQueueComparator());
  this.enablePreemption=enablePreemption;
  this.numSlotsAvailable=new AtomicInteger(numExecutors);
  ExecutorService wes=Executors.newFixedThreadPool(1,new ThreadFactoryBuilder().setDaemon(true).setNameFormat(WAIT_QUEUE_SCHEDULER_THREAD_NAME_FORMAT).build());
  this.waitQueueExecutorService=MoreExecutors.listeningDecorator(wes);
  ExecutorService executionCompletionExecutorServiceRaw=Executors.newFixedThreadPool(1,new ThreadFactoryBuilder().setDaemon(true).setNameFormat("ExecutionCompletionThread #%d").build());
  executionCompletionExecutorService=MoreExecutors.listeningDecorator(executionCompletionExecutorServiceRaw);
  ListenableFuture<?> future=waitQueueExecutorService.submit(new WaitQueueWorker());
  Futures.addCallback(future,new WaitQueueWorkerCallback());
}
