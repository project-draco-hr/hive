{
  this.waitLock=new Object();
  this.waitQueue=new EvictingPriorityBlockingQueue<>(new WaitQueueComparator(),waitQueueSize);
  this.threadPoolExecutor=new ThreadPoolExecutor(numExecutors,numExecutors,1,TimeUnit.MINUTES,new SynchronousQueue<Runnable>(),new ThreadFactoryBuilder().setNameFormat(TASK_EXECUTOR_THREAD_NAME_FORMAT).build());
  this.executorService=MoreExecutors.listeningDecorator(threadPoolExecutor);
  this.preemptionQueue=new PriorityBlockingQueue<>(numExecutors,new PreemptionQueueComparator());
  this.enablePreemption=enablePreemption;
  this.numSlotsAvailable=new AtomicInteger(numExecutors);
  ExecutorService wes=Executors.newFixedThreadPool(1,new ThreadFactoryBuilder().setDaemon(true).setNameFormat(WAIT_QUEUE_SCHEDULER_THREAD_NAME_FORMAT).build());
  this.waitQueueExecutorService=MoreExecutors.listeningDecorator(wes);
  ExecutorService executionCompletionExecutorServiceRaw=Executors.newFixedThreadPool(1,new ThreadFactoryBuilder().setDaemon(true).setNameFormat("ExecutionCompletionThread #%d").build());
  executionCompletionExecutorService=MoreExecutors.listeningDecorator(executionCompletionExecutorServiceRaw);
  ListenableFuture<?> future=waitQueueExecutorService.submit(new WaitQueueWorker());
  Futures.addCallback(future,new WaitQueueWorkerCallback());
  LOG.info("TaskExecutorService started with parameters: " + "numExecutors=" + numExecutors + ", waitQueueSize="+ waitQueueSize+ ", enablePreemption="+ enablePreemption);
}
