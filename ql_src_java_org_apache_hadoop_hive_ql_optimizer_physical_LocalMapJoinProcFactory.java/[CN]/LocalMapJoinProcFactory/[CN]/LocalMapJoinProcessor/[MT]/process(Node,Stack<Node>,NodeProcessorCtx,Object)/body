{
  LocalMapJoinProcCtx context=(LocalMapJoinProcCtx)ctx;
  if (!nd.getName().equals("MAPJOIN")) {
    return null;
  }
  MapJoinOperator mapJoinOp=(MapJoinOperator)nd;
  try {
    hasGroupBy(mapJoinOp,context);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  HashTableSinkDesc hashTableSinkDesc=new HashTableSinkDesc(mapJoinOp.getConf());
  HashTableSinkOperator hashTableSinkOp=(HashTableSinkOperator)OperatorFactory.get(hashTableSinkDesc);
  float hashtableMemoryUsage;
  if (context.isFollowedByGroupBy()) {
    hashtableMemoryUsage=context.getParseCtx().getConf().getFloatVar(HiveConf.ConfVars.HIVEHASHTABLEFOLLOWBYGBYMAXMEMORYUSAGE);
  }
 else {
    hashtableMemoryUsage=context.getParseCtx().getConf().getFloatVar(HiveConf.ConfVars.HIVEHASHTABLEMAXMEMORYUSAGE);
  }
  hashTableSinkOp.getConf().setHashtableMemoryUsage(hashtableMemoryUsage);
  int bigTable=mapJoinOp.getConf().getPosBigTable();
  List<Operator<? extends OperatorDesc>> smallTablesParentOp=new ArrayList<Operator<? extends OperatorDesc>>();
  List<Operator<? extends OperatorDesc>> dummyOperators=new ArrayList<Operator<? extends OperatorDesc>>();
  List<Operator<? extends OperatorDesc>> parentsOp=mapJoinOp.getParentOperators();
  for (int i=0; i < parentsOp.size(); i++) {
    if (i == bigTable) {
      smallTablesParentOp.add(null);
      continue;
    }
    Operator<? extends OperatorDesc> parent=parentsOp.get(i);
    parent.replaceChild(mapJoinOp,hashTableSinkOp);
    smallTablesParentOp.add(parent);
    HashTableDummyDesc desc=new HashTableDummyDesc();
    HashTableDummyOperator dummyOp=(HashTableDummyOperator)OperatorFactory.get(desc);
    TableDesc tbl;
    if (parent.getSchema() == null) {
      if (parent instanceof TableScanOperator) {
        tbl=((TableScanOperator)parent).getTableDesc();
      }
 else {
        throw new SemanticException();
      }
    }
 else {
      RowSchema rowSchema=parent.getSchema();
      tbl=PlanUtils.getIntermediateFileTableDesc(PlanUtils.getFieldSchemasFromRowSchema(rowSchema,""));
    }
    dummyOp.getConf().setTbl(tbl);
    mapJoinOp.replaceParent(parent,dummyOp);
    List<Operator<? extends OperatorDesc>> dummyChildren=new ArrayList<Operator<? extends OperatorDesc>>();
    dummyChildren.add(mapJoinOp);
    dummyOp.setChildOperators(dummyChildren);
    dummyOperators.add(dummyOp);
  }
  hashTableSinkOp.setParentOperators(smallTablesParentOp);
  for (  Operator<? extends OperatorDesc> op : dummyOperators) {
    context.addDummyParentOp(op);
  }
  return null;
}
