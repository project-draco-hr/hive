{
  RawStore ms=getMS();
  if (!ms.isFileMetadataSupported()) {
    return new CacheFileMetadataResult(false);
  }
  String dbName=req.getDbName(), tblName=req.getTblName(), partName=req.isSetPartName() ? req.getPartName() : null;
  boolean isAllPart=req.isSetIsAllParts() && req.isIsAllParts();
  ms.openTransaction();
  boolean success=false;
  try {
    Table tbl=ms.getTable(dbName,tblName);
    if (tbl == null) {
      throw new NoSuchObjectException(dbName + "." + tblName+ " not found");
    }
    boolean isPartitioned=tbl.isSetPartitionKeys() && tbl.getPartitionKeysSize() > 0;
    String tableInputFormat=tbl.isSetSd() ? tbl.getSd().getInputFormat() : null;
    if (!isPartitioned) {
      if (partName != null || isAllPart) {
        throw new MetaException("Table is not partitioned");
      }
      if (!tbl.isSetSd() || !tbl.getSd().isSetLocation()) {
        throw new MetaException("Table does not have storage location; this operation is not supported on views");
      }
      FileMetadataExprType type=expressionProxy.getMetadataType(tableInputFormat);
      if (type == null) {
        throw new MetaException("The operation is not supported for " + tableInputFormat);
      }
      fileMetadataManager.queueCacheMetadata(tbl.getSd().getLocation(),type);
      success=true;
    }
 else {
      List<String> partNames=null;
      if (partName != null) {
        partNames=Lists.newArrayList(partName);
      }
 else       if (isAllPart) {
        partNames=ms.listPartitionNames(dbName,tblName,(short)-1);
      }
 else {
        throw new MetaException("Table is partitioned");
      }
      int batchSize=HiveConf.getIntVar(hiveConf,ConfVars.METASTORE_BATCH_RETRIEVE_OBJECTS_MAX);
      int index=0;
      int successCount=0, failCount=0;
      HashSet<String> failFormats=null;
      while (index < partNames.size()) {
        int currentBatchSize=Math.min(batchSize,partNames.size() - index);
        List<String> nameBatch=partNames.subList(index,index + currentBatchSize);
        index+=currentBatchSize;
        List<Partition> parts=ms.getPartitionsByNames(dbName,tblName,nameBatch);
        for (        Partition part : parts) {
          if (!part.isSetSd() || !part.getSd().isSetLocation()) {
            throw new MetaException("Partition does not have storage location;" + " this operation is not supported on views");
          }
          String inputFormat=part.getSd().isSetInputFormat() ? part.getSd().getInputFormat() : tableInputFormat;
          FileMetadataExprType type=expressionProxy.getMetadataType(inputFormat);
          if (type == null) {
            ++failCount;
            if (failFormats == null) {
              failFormats=new HashSet<>();
            }
            failFormats.add(inputFormat);
          }
 else {
            ++successCount;
            fileMetadataManager.queueCacheMetadata(part.getSd().getLocation(),type);
          }
        }
      }
      success=true;
      if (failCount > 0) {
        String errorMsg="The operation failed for " + failCount + " partitions and "+ "succeeded for "+ successCount+ " partitions; unsupported formats: ";
        boolean isFirst=true;
        for (        String s : failFormats) {
          if (!isFirst) {
            errorMsg+=", ";
          }
          isFirst=false;
          errorMsg+=s;
        }
        throw new MetaException(errorMsg);
      }
    }
  }
  finally {
    if (success) {
      if (!ms.commitTransaction()) {
        throw new MetaException("Failed to commit");
      }
    }
 else {
      ms.rollbackTransaction();
    }
  }
  return new CacheFileMetadataResult(true);
}
