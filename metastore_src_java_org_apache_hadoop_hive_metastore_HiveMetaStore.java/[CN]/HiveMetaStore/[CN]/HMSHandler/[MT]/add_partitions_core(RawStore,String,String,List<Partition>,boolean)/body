{
  logInfo("add_partitions");
  boolean success=false;
  final Map<PartValEqWrapper,Boolean> addedPartitions=Collections.synchronizedMap(new HashMap<PartValEqWrapper,Boolean>());
  final List<Partition> result=new ArrayList<Partition>();
  final List<Partition> existingParts=new ArrayList<Partition>();
  ;
  Table tbl=null;
  try {
    ms.openTransaction();
    tbl=ms.getTable(dbName,tblName);
    if (tbl == null) {
      throw new InvalidObjectException("Unable to add partitions because " + "database or table " + dbName + "."+ tblName+ " does not exist");
    }
    if (!parts.isEmpty()) {
      firePreEvent(new PreAddPartitionEvent(tbl,parts,this));
    }
    List<Future<Partition>> partFutures=Lists.newArrayList();
    final Table table=tbl;
    for (    final Partition part : parts) {
      if (!part.getTableName().equals(tblName) || !part.getDbName().equals(dbName)) {
        throw new MetaException("Partition does not belong to target table " + dbName + "."+ tblName+ ": "+ part);
      }
      MetaStoreUtils.validatePartitionNameCharacters(part.getValues(),partitionValidationPattern);
      partFutures.add(threadPool.submit(new Callable(){
        @Override public Partition call() throws Exception {
          boolean madeDir=createLocationForAddedPartition(table,part);
          if (addedPartitions.put(new PartValEqWrapper(part),madeDir) != null) {
            throw new MetaException("Duplicate partitions in the list: " + part);
          }
          initializeAddedPartition(table,part,madeDir);
          return part;
        }
      }
));
    }
    try {
      for (      Future<Partition> partFuture : partFutures) {
        Partition part=partFuture.get();
        if (part != null) {
          result.add(part);
        }
      }
    }
 catch (    InterruptedException|ExecutionException e) {
      for (      Future<Partition> partFuture : partFutures) {
        partFuture.cancel(true);
      }
      throw new MetaException(e.getMessage());
    }
    if (!result.isEmpty()) {
      success=ms.addPartitions(dbName,tblName,result);
    }
 else {
      success=true;
    }
    success=success && ms.commitTransaction();
  }
  finally {
    if (!success) {
      ms.rollbackTransaction();
      for (      Map.Entry<PartValEqWrapper,Boolean> e : addedPartitions.entrySet()) {
        if (e.getValue()) {
          wh.deleteDir(new Path(e.getKey().partition.getSd().getLocation()),true);
        }
      }
      fireMetaStoreAddPartitionEvent(tbl,parts,null,false);
    }
 else {
      fireMetaStoreAddPartitionEvent(tbl,result,null,true);
      if (existingParts != null) {
        fireMetaStoreAddPartitionEvent(tbl,existingParts,null,false);
      }
    }
  }
  return result;
}
