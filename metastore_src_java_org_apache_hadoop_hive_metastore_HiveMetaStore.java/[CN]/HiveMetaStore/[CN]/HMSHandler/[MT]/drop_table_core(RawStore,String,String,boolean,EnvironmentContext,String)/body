{
  boolean success=false;
  boolean isExternal=false;
  Path tblPath=null;
  List<Path> partPaths=null;
  Table tbl=null;
  boolean ifPurge=false;
  try {
    ms.openTransaction();
    tbl=get_table_core(dbname,name);
    if (tbl == null) {
      throw new NoSuchObjectException(name + " doesn't exist");
    }
    if (tbl.getSd() == null) {
      throw new MetaException("Table metadata is corrupted");
    }
    ifPurge=((envContext != null) && Boolean.parseBoolean(envContext.getProperties().get("ifPurge"))) || (tbl.isSetParameters() && "true".equalsIgnoreCase(tbl.getParameters().get("auto.purge")));
    firePreEvent(new PreDropTableEvent(tbl,deleteData,this));
    boolean isIndexTable=isIndexTable(tbl);
    if (indexName == null && isIndexTable) {
      throw new RuntimeException("The table " + name + " is an index table. Please do drop index instead.");
    }
    if (!isIndexTable) {
      try {
        List<Index> indexes=ms.getIndexes(dbname,name,Short.MAX_VALUE);
        while (indexes != null && indexes.size() > 0) {
          for (          Index idx : indexes) {
            this.drop_index_by_name(dbname,name,idx.getIndexName(),true);
          }
          indexes=ms.getIndexes(dbname,name,Short.MAX_VALUE);
        }
      }
 catch (      TException e) {
        throw new MetaException(e.getMessage());
      }
    }
    isExternal=isExternal(tbl);
    if (tbl.getSd().getLocation() != null) {
      tblPath=new Path(tbl.getSd().getLocation());
      if (!wh.isWritable(tblPath.getParent())) {
        String target=indexName == null ? "Table" : "Index table";
        throw new MetaException(target + " metadata not deleted since " + tblPath.getParent()+ " is not writable by "+ hiveConf.getUser());
      }
    }
    if (!ifPurge) {
      String trashInterval=hiveConf.get("fs.trash.interval");
      boolean trashEnabled=trashInterval != null && trashInterval.length() > 0 && Float.parseFloat(trashInterval) > 0;
      if (trashEnabled) {
        HadoopShims.HdfsEncryptionShim shim=ShimLoader.getHadoopShims().createHdfsEncryptionShim(FileSystem.get(hiveConf),hiveConf);
        if (shim.isPathEncrypted(tblPath)) {
          throw new MetaException("Unable to drop table because it is in an encryption zone" + " and trash is enabled.  Use PURGE option to skip trash.");
        }
      }
    }
    partPaths=dropPartitionsAndGetLocations(ms,dbname,name,tblPath,tbl.getPartitionKeys(),deleteData && !isExternal);
    if (!ms.dropTable(dbname,name)) {
      String tableName=dbname + "." + name;
      throw new MetaException(indexName == null ? "Unable to drop table " + tableName : "Unable to drop index table " + tableName + " for index "+ indexName);
    }
    success=ms.commitTransaction();
  }
  finally {
    if (!success) {
      ms.rollbackTransaction();
    }
 else     if (deleteData && !isExternal) {
      deletePartitionData(partPaths,ifPurge);
      deleteTableData(tblPath,ifPurge);
    }
    for (    MetaStoreEventListener listener : listeners) {
      DropTableEvent dropTableEvent=new DropTableEvent(tbl,success,deleteData,this);
      dropTableEvent.setEnvironmentContext(envContext);
      listener.onDropTable(dropTableEvent);
    }
  }
  return success;
}
