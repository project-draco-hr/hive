{
  incrementCounter("get_partitions_ps");
  logStartPartitionFunction("get_partitions_ps",db_name,tbl_name,part_vals);
  Table t;
  try {
    t=get_table(db_name,tbl_name);
  }
 catch (  NoSuchObjectException e) {
    throw new MetaException(e.getMessage());
  }
  if (part_vals.size() > t.getPartitionKeys().size()) {
    throw new MetaException("Incorrect number of partition values");
  }
  Map<String,String> partKeyToValues=new LinkedHashMap<String,String>();
  int i=0;
  for (  String value : part_vals) {
    String col=t.getPartitionKeys().get(i).getName();
    if (value.length() > 0) {
      partKeyToValues.put(col,value);
    }
    i++;
  }
  final String filter=MetaStoreUtils.makeFilterStringFromMap(partKeyToValues);
  List<Partition> ret=null;
  try {
    ret=executeWithRetry(new Command<List<Partition>>(){
      @Override List<Partition> run(      RawStore ms) throws Exception {
        return ms.getPartitionsByFilter(db_name,tbl_name,filter,max_parts);
      }
    }
);
  }
 catch (  MetaException e) {
    throw e;
  }
catch (  Exception e) {
    assert(e instanceof RuntimeException);
    throw (RuntimeException)e;
  }
  return ret;
}
