{
  startTableFunction("alter_partition",db_name,tbl_name);
  if (LOG.isInfoEnabled()) {
    LOG.info("New partition values:" + new_part.getValues());
    if (part_vals != null && part_vals.size() > 0) {
      LOG.info("Old Partition values:" + part_vals);
    }
  }
  if (new_part.getSd() != null) {
    String newLocation=new_part.getSd().getLocation();
    if (org.apache.commons.lang.StringUtils.isNotEmpty(newLocation)) {
      Path tblPath=wh.getDnsPath(new Path(newLocation));
      new_part.getSd().setLocation(tblPath.toString());
    }
  }
  Partition oldPart=null;
  Exception ex=null;
  try {
    firePreEvent(new PreAlterPartitionEvent(db_name,tbl_name,part_vals,new_part,this));
    if (part_vals != null && !part_vals.isEmpty()) {
      MetaStoreUtils.validatePartitionNameCharacters(new_part.getValues(),partitionValidationPattern);
    }
    oldPart=alterHandler.alterPartition(getMS(),wh,db_name,tbl_name,part_vals,new_part,envContext);
    Table table=null;
    for (    MetaStoreEventListener listener : listeners) {
      if (table == null) {
        table=getMS().getTable(db_name,tbl_name);
      }
      AlterPartitionEvent alterPartitionEvent=new AlterPartitionEvent(oldPart,new_part,table,true,this);
      alterPartitionEvent.setEnvironmentContext(envContext);
      listener.onAlterPartition(alterPartitionEvent);
    }
  }
 catch (  InvalidObjectException e) {
    ex=e;
    throw new InvalidOperationException(e.getMessage());
  }
catch (  AlreadyExistsException e) {
    ex=e;
    throw new InvalidOperationException(e.getMessage());
  }
catch (  Exception e) {
    ex=e;
    if (e instanceof MetaException) {
      throw (MetaException)e;
    }
 else     if (e instanceof InvalidOperationException) {
      throw (InvalidOperationException)e;
    }
 else     if (e instanceof TException) {
      throw (TException)e;
    }
 else {
      throw newMetaException(e);
    }
  }
 finally {
    endFunction("alter_partition",oldPart != null,ex,tbl_name);
  }
  return;
}
