{
  RawStore ms=getMS();
  String dbName=request.getDbName(), tblName=request.getTblName();
  boolean ifExists=request.isSetIfExists() && request.isIfExists();
  boolean deleteData=request.isSetDeleteData() && request.isDeleteData();
  boolean ignoreProtection=request.isSetIgnoreProtection() && request.isIgnoreProtection();
  boolean needResult=!request.isSetNeedResult() || request.isNeedResult();
  List<PathAndPartValSize> dirsToDelete=new ArrayList<PathAndPartValSize>();
  List<Path> archToDelete=new ArrayList<Path>();
  EnvironmentContext envContext=request.isSetEnvironmentContext() ? request.getEnvironmentContext() : null;
  boolean success=false;
  ms.openTransaction();
  Table tbl=null;
  List<Partition> parts=null;
  try {
    tbl=get_table_core(dbName,tblName);
    int minCount=0;
    RequestPartsSpec spec=request.getParts();
    List<String> partNames=null;
    if (spec.isSetExprs()) {
      parts=new ArrayList<Partition>(spec.getExprs().size());
      for (      DropPartitionsExpr expr : spec.getExprs()) {
        ++minCount;
        List<Partition> result=new ArrayList<Partition>();
        boolean hasUnknown=ms.getPartitionsByExpr(dbName,tblName,expr.getExpr(),null,(short)-1,result);
        if (hasUnknown) {
          throw new MetaException("Unexpected unknown partitions to drop");
        }
        if (!ignoreProtection && expr.isSetPartArchiveLevel()) {
          for (          Partition part : parts) {
            if (MetaStoreUtils.isArchived(part) && MetaStoreUtils.getArchivingLevel(part) < expr.getPartArchiveLevel()) {
              throw new MetaException("Cannot drop a subset of partitions " + " in an archive, partition " + part);
            }
          }
        }
        parts.addAll(result);
      }
    }
 else     if (spec.isSetNames()) {
      partNames=spec.getNames();
      minCount=partNames.size();
      parts=ms.getPartitionsByNames(dbName,tblName,partNames);
    }
 else {
      throw new MetaException("Partition spec is not set");
    }
    if ((parts.size() < minCount) && !ifExists) {
      throw new NoSuchObjectException("Some partitions to drop are missing");
    }
    List<String> colNames=null;
    if (partNames == null) {
      partNames=new ArrayList<String>(parts.size());
      colNames=new ArrayList<String>(tbl.getPartitionKeys().size());
      for (      FieldSchema col : tbl.getPartitionKeys()) {
        colNames.add(col.getName());
      }
    }
    for (    Partition part : parts) {
      if (!ignoreProtection && !MetaStoreUtils.canDropPartition(tbl,part)) {
        throw new MetaException("Table " + tbl.getTableName() + " Partition "+ part+ " is protected from being dropped");
      }
      firePreEvent(new PreDropPartitionEvent(tbl,part,deleteData,this));
      if (colNames != null) {
        partNames.add(FileUtils.makePartName(colNames,part.getValues()));
      }
      if (MetaStoreUtils.isArchived(part)) {
        Path archiveParentDir=MetaStoreUtils.getOriginalLocation(part);
        verifyIsWritablePath(archiveParentDir);
        archToDelete.add(archiveParentDir);
      }
      if ((part.getSd() != null) && (part.getSd().getLocation() != null)) {
        Path partPath=new Path(part.getSd().getLocation());
        verifyIsWritablePath(partPath);
        dirsToDelete.add(new PathAndPartValSize(partPath,part.getValues().size()));
      }
    }
    ms.dropPartitions(dbName,tblName,partNames);
    success=ms.commitTransaction();
    DropPartitionsResult result=new DropPartitionsResult();
    if (needResult) {
      result.setPartitions(parts);
    }
    return result;
  }
  finally {
    if (!success) {
      ms.rollbackTransaction();
    }
 else     if (deleteData && !isExternal(tbl)) {
      boolean mustPurge=(envContext != null) && Boolean.parseBoolean(envContext.getProperties().get("ifPurge"));
      LOG.info(mustPurge ? "dropPartition() will purge partition-directories directly, skipping trash." : "dropPartition() will move partition-directories to trash-directory.");
      for (      Path path : archToDelete) {
        wh.deleteDir(path,true,mustPurge);
      }
      for (      PathAndPartValSize p : dirsToDelete) {
        wh.deleteDir(p.path,true,mustPurge);
        try {
          deleteParentRecursive(p.path.getParent(),p.partValSize - 1,mustPurge);
        }
 catch (        IOException ex) {
          LOG.warn("Error from deleteParentRecursive",ex);
          throw new MetaException("Failed to delete parent: " + ex.getMessage());
        }
      }
    }
    if (parts != null) {
      for (      Partition part : parts) {
        for (        MetaStoreEventListener listener : listeners) {
          DropPartitionEvent dropPartitionEvent=new DropPartitionEvent(tbl,part,success,deleteData,this);
          dropPartitionEvent.setEnvironmentContext(envContext);
          listener.onDropPartition(dropPartitionEvent);
        }
      }
    }
  }
}
