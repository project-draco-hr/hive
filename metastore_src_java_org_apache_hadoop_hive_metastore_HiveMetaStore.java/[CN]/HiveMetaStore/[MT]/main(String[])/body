{
  HiveConf.setLoadMetastoreConfig(true);
  HiveConf conf=new HiveConf(HMSHandler.class);
  HiveMetastoreCli cli=new HiveMetastoreCli(conf);
  cli.parse(args);
  final boolean isCliVerbose=cli.isVerbose();
  Properties hiveconf=cli.addHiveconfToSystemProperties();
  if (System.getProperty("log4j.configuration") == null) {
    try {
      LogUtils.initHiveLog4j();
    }
 catch (    LogInitializationException e) {
      HMSHandler.LOG.warn(e.getMessage());
    }
  }
  try {
    String msg="Starting hive metastore on port " + cli.port;
    HMSHandler.LOG.info(msg);
    if (cli.isVerbose()) {
      System.err.println(msg);
    }
    for (    Map.Entry<Object,Object> item : hiveconf.entrySet()) {
      conf.set((String)item.getKey(),(String)item.getValue());
    }
    Runtime.getRuntime().addShutdownHook(new Thread(){
      @Override public void run(){
        String shutdownMsg="Shutting down hive metastore.";
        HMSHandler.LOG.info(shutdownMsg);
        if (isCliVerbose) {
          System.err.println(shutdownMsg);
        }
      }
    }
);
    Lock startLock=new ReentrantLock();
    Condition startCondition=startLock.newCondition();
    AtomicBoolean startedServing=new AtomicBoolean();
    startMetaStoreThreads(conf,startLock,startCondition,startedServing);
    startMetaStore(cli.getPort(),ShimLoader.getHadoopThriftAuthBridge(),conf,startLock,startCondition,startedServing);
  }
 catch (  Throwable t) {
    HMSHandler.LOG.error("Metastore Thrift Server threw an exception...",t);
    throw t;
  }
}
