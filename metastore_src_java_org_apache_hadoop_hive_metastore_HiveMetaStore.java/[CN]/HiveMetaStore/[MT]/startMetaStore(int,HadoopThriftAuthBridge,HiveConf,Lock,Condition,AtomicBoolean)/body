{
  try {
    isMetaStoreRemote=true;
    long maxMessageSize=conf.getIntVar(HiveConf.ConfVars.METASTORESERVERMAXMESSAGESIZE);
    int minWorkerThreads=conf.getIntVar(HiveConf.ConfVars.METASTORESERVERMINTHREADS);
    int maxWorkerThreads=conf.getIntVar(HiveConf.ConfVars.METASTORESERVERMAXTHREADS);
    boolean tcpKeepAlive=conf.getBoolVar(HiveConf.ConfVars.METASTORE_TCP_KEEP_ALIVE);
    boolean useFramedTransport=conf.getBoolVar(ConfVars.METASTORE_USE_THRIFT_FRAMED_TRANSPORT);
    boolean useCompactProtocol=conf.getBoolVar(ConfVars.METASTORE_USE_THRIFT_COMPACT_PROTOCOL);
    useSasl=conf.getBoolVar(HiveConf.ConfVars.METASTORE_USE_THRIFT_SASL);
    TProcessor processor;
    TTransportFactory transFactory;
    final TProtocolFactory protocolFactory;
    final TProtocolFactory inputProtoFactory;
    if (useCompactProtocol) {
      protocolFactory=new TCompactProtocol.Factory();
      inputProtoFactory=new TCompactProtocol.Factory(maxMessageSize,maxMessageSize);
    }
 else {
      protocolFactory=new TBinaryProtocol.Factory();
      inputProtoFactory=new TBinaryProtocol.Factory(true,true,maxMessageSize,maxMessageSize);
    }
    HMSHandler baseHandler=new HiveMetaStore.HMSHandler("new db based metaserver",conf,false);
    IHMSHandler handler=newRetryingHMSHandler(baseHandler,conf);
    if (useSasl) {
      if (useFramedTransport) {
        throw new HiveMetaException("Framed transport is not supported with SASL enabled.");
      }
      saslServer=bridge.createServer(conf.getVar(HiveConf.ConfVars.METASTORE_KERBEROS_KEYTAB_FILE),conf.getVar(HiveConf.ConfVars.METASTORE_KERBEROS_PRINCIPAL));
      delegationTokenManager=new HiveDelegationTokenManager();
      delegationTokenManager.startDelegationTokenSecretManager(conf,baseHandler,ServerMode.METASTORE);
      saslServer.setSecretManager(delegationTokenManager.getSecretManager());
      transFactory=saslServer.createTransportFactory(MetaStoreUtils.getMetaStoreSaslProperties(conf));
      processor=saslServer.wrapProcessor(new ThriftHiveMetastore.Processor<IHMSHandler>(handler));
      LOG.info("Starting DB backed MetaStore Server in Secure Mode");
    }
 else {
      if (conf.getBoolVar(ConfVars.METASTORE_EXECUTE_SET_UGI)) {
        transFactory=useFramedTransport ? new ChainedTTransportFactory(new TFramedTransport.Factory(),new TUGIContainingTransport.Factory()) : new TUGIContainingTransport.Factory();
        processor=new TUGIBasedProcessor<IHMSHandler>(handler);
        LOG.info("Starting DB backed MetaStore Server with SetUGI enabled");
      }
 else {
        transFactory=useFramedTransport ? new TFramedTransport.Factory() : new TTransportFactory();
        processor=new TSetIpAddressProcessor<IHMSHandler>(handler);
        LOG.info("Starting DB backed MetaStore Server");
      }
    }
    TServerTransport serverTransport=tcpKeepAlive ? new TServerSocketKeepAlive(port) : new TServerSocket(port);
    TThreadPoolServer.Args args=new TThreadPoolServer.Args(serverTransport).processor(processor).transportFactory(transFactory).protocolFactory(protocolFactory).inputProtocolFactory(inputProtoFactory).minWorkerThreads(minWorkerThreads).maxWorkerThreads(maxWorkerThreads);
    TServer tServer=new TThreadPoolServer(args);
    TServerEventHandler tServerEventHandler=new TServerEventHandler(){
      @Override public void preServe(){
      }
      @Override public ServerContext createContext(      TProtocol tProtocol,      TProtocol tProtocol1){
        try {
          Metrics metrics=MetricsFactory.getInstance();
          if (metrics != null) {
            metrics.incrementCounter(MetricsConstant.OPEN_CONNECTIONS);
          }
        }
 catch (        Exception e) {
          LOG.warn("Error Reporting Metastore open connection to Metrics system",e);
        }
        return null;
      }
      @Override public void deleteContext(      ServerContext serverContext,      TProtocol tProtocol,      TProtocol tProtocol1){
        try {
          Metrics metrics=MetricsFactory.getInstance();
          if (metrics != null) {
            metrics.decrementCounter(MetricsConstant.OPEN_CONNECTIONS);
          }
        }
 catch (        Exception e) {
          LOG.warn("Error Reporting Metastore close connection to Metrics system",e);
        }
        cleanupRawStore();
      }
      @Override public void processContext(      ServerContext serverContext,      TTransport tTransport,      TTransport tTransport1){
      }
    }
;
    tServer.setServerEventHandler(tServerEventHandler);
    HMSHandler.LOG.info("Started the new metaserver on port [" + port + "]...");
    HMSHandler.LOG.info("Options.minWorkerThreads = " + minWorkerThreads);
    HMSHandler.LOG.info("Options.maxWorkerThreads = " + maxWorkerThreads);
    HMSHandler.LOG.info("TCP keepalive = " + tcpKeepAlive);
    if (startLock != null) {
      signalOtherThreadsToStart(tServer,startLock,startCondition,startedServing);
    }
    tServer.serve();
  }
 catch (  Throwable x) {
    x.printStackTrace();
    HMSHandler.LOG.error(StringUtils.stringifyException(x));
    throw x;
  }
}
