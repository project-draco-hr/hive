{
  boolean isStatsReliable=conf.isStatsReliable();
  StatsPublisher statsPublisher=Utilities.getStatsPublisher(jc);
  if (!statsPublisher.connect(jc)) {
    LOG.info("StatsPublishing error: cannot connect to database.");
    if (isStatsReliable) {
      throw new HiveException(ErrorMsg.STATSPUBLISHER_CONNECTION_ERROR.getErrorCodedMsg());
    }
    return;
  }
  String taskID=Utilities.getTaskIdFromFilename(Utilities.getTaskId(hconf));
  Map<String,String> statsToPublish=new HashMap<String,String>();
  for (  String pspecs : stats.keySet()) {
    statsToPublish.clear();
    String prefix=Utilities.join(conf.getStatsAggPrefix(),pspecs);
    int maxKeyLength=conf.getMaxStatsKeyPrefixLength();
    String key=Utilities.getHashedStatsPrefix(prefix,maxKeyLength);
    if (!(statsPublisher instanceof CounterStatsPublisher)) {
      key=Utilities.join(prefix,taskID);
    }
    for (    String statType : stats.get(pspecs).getStoredStats()) {
      statsToPublish.put(statType,Long.toString(stats.get(pspecs).getStat(statType)));
    }
    if (!statsPublisher.publishStat(key,statsToPublish)) {
      if (isStatsReliable) {
        throw new HiveException(ErrorMsg.STATSPUBLISHER_PUBLISHING_ERROR.getErrorCodedMsg());
      }
    }
    LOG.info("publishing : " + key + " : "+ statsToPublish.toString());
  }
  if (!statsPublisher.closeConnection()) {
    if (isStatsReliable) {
      throw new HiveException(ErrorMsg.STATSPUBLISHER_CLOSING_ERROR.getErrorCodedMsg());
    }
  }
}
