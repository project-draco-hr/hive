{
  TreeSet<String> names=new TreeSet<String>();
  if (beeLine.getDrivers() == null) {
    beeLine.setDrivers(Arrays.asList(beeLine.scanDrivers(line)));
  }
  beeLine.info(beeLine.loc("drivers-found-count",beeLine.getDrivers().size()));
  for (Iterator<Driver> i=beeLine.getDrivers().iterator(); i.hasNext(); ) {
    names.add(i.next().getClass().getName());
  }
  beeLine.output(beeLine.getColorBuffer().bold(beeLine.getColorBuffer().pad(beeLine.loc("compliant"),10).getMono()).bold(beeLine.getColorBuffer().pad(beeLine.loc("jdbc-version"),8).getMono()).bold(beeLine.getColorBuffer(beeLine.loc("driver-class")).getMono()));
  for (Iterator<String> i=names.iterator(); i.hasNext(); ) {
    String name=i.next().toString();
    try {
      Driver driver=(Driver)Class.forName(name).newInstance();
      ColorBuffer msg=beeLine.getColorBuffer().pad(driver.jdbcCompliant() ? "yes" : "no",10).pad(driver.getMajorVersion() + "." + driver.getMinorVersion(),8).append(name);
      if (driver.jdbcCompliant()) {
        beeLine.output(msg);
      }
 else {
        beeLine.output(beeLine.getColorBuffer().red(msg.getMono()));
      }
    }
 catch (    Throwable t) {
      beeLine.output(beeLine.getColorBuffer().red(name));
    }
  }
  return true;
}
