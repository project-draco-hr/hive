{
  MockRequest r1=createMockRequest(1,1,100,true,20000l);
  MockRequest r2=createMockRequest(2,1,200,false,20000l);
  MockRequest r3=createMockRequest(3,1,300,false,20000l);
  MockRequest r4=createMockRequest(4,1,400,false,20000l);
  MockRequest r5=createMockRequest(5,1,500,true,20000l);
  TaskExecutorServiceForTest taskExecutorService=new TaskExecutorServiceForTest(1,2,false,true);
  taskExecutorService.init(conf);
  taskExecutorService.start();
  try {
    taskExecutorService.schedule(r1);
    r1.awaitStart();
    try {
      taskExecutorService.schedule(r2);
    }
 catch (    RejectedExecutionException e) {
      fail("Unexpected rejection with space available in queue");
    }
    try {
      taskExecutorService.schedule(r3);
    }
 catch (    RejectedExecutionException e) {
      fail("Unexpected rejection with space available in queue");
    }
    try {
      taskExecutorService.schedule(r4);
      fail("Expecting a Rejection for non finishable task with a full queue");
    }
 catch (    RejectedExecutionException e) {
    }
    try {
      taskExecutorService.schedule(r5);
    }
 catch (    RejectedExecutionException e) {
      fail("Unexpected rejection for a finishable task");
    }
    assertEquals(true,r3.wasPreempted());
    TaskExecutorServiceForTest.InternalCompletionListenerForTest icl1=taskExecutorService.getInternalCompletionListenerForTest(r1.getRequestId());
    assertEquals(3,taskExecutorService.knownTasks.size());
    assertTrue(taskExecutorService.knownTasks.containsKey(r1.getRequestId()));
    assertTrue(taskExecutorService.knownTasks.containsKey(r2.getRequestId()));
    assertTrue(taskExecutorService.knownTasks.containsKey(r5.getRequestId()));
    r1.complete();
    icl1.awaitCompletion();
    assertEquals(2,taskExecutorService.knownTasks.size());
    assertTrue(taskExecutorService.knownTasks.containsKey(r2.getRequestId()));
    assertTrue(taskExecutorService.knownTasks.containsKey(r5.getRequestId()));
    r5.awaitStart();
    TaskExecutorServiceForTest.InternalCompletionListenerForTest icl5=taskExecutorService.getInternalCompletionListenerForTest(r5.getRequestId());
    r5.complete();
    icl5.awaitCompletion();
    assertEquals(1,taskExecutorService.knownTasks.size());
    assertTrue(taskExecutorService.knownTasks.containsKey(r2.getRequestId()));
    r2.awaitStart();
    TaskExecutorServiceForTest.InternalCompletionListenerForTest icl2=taskExecutorService.getInternalCompletionListenerForTest(r2.getRequestId());
    r2.complete();
    icl2.awaitCompletion();
    assertEquals(0,taskExecutorService.knownTasks.size());
  }
  finally {
    taskExecutorService.shutDown(false);
  }
}
