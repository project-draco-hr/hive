{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == TType.LIST) {
{
          TList _list75=iprot.readListBegin();
          this.values=new ArrayList<String>(_list75.size);
          for (int _i76=0; _i76 < _list75.size; ++_i76) {
            String _elem77;
            _elem77=iprot.readString();
            this.values.add(_elem77);
          }
          iprot.readListEnd();
        }
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == TType.STRING) {
    this.dbName=iprot.readString();
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == TType.STRING) {
this.tableName=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 4:
if (field.type == TType.I32) {
this.createTime=iprot.readI32();
setCreateTimeIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 5:
if (field.type == TType.I32) {
this.lastAccessTime=iprot.readI32();
setLastAccessTimeIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 6:
if (field.type == TType.STRUCT) {
this.sd=new StorageDescriptor();
this.sd.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 7:
if (field.type == TType.MAP) {
{
TMap _map78=iprot.readMapBegin();
this.parameters=new HashMap<String,String>(2 * _map78.size);
for (int _i79=0; _i79 < _map78.size; ++_i79) {
String _key80;
String _val81;
_key80=iprot.readString();
_val81=iprot.readString();
this.parameters.put(_key80,_val81);
}
iprot.readMapEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 8:
if (field.type == TType.STRUCT) {
this.privileges=new PrincipalPrivilegeSet();
this.privileges.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
