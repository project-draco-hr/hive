{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
          org.apache.thrift.protocol.TList _list200=iprot.readListBegin();
          struct.values=new ArrayList<String>(_list200.size);
          for (int _i201=0; _i201 < _list200.size; ++_i201) {
            String _elem202;
            _elem202=iprot.readString();
            struct.values.add(_elem202);
          }
          iprot.readListEnd();
        }
        struct.setValuesIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
    struct.dbName=iprot.readString();
    struct.setDbNameIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.tableName=iprot.readString();
struct.setTableNameIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.createTime=iprot.readI32();
struct.setCreateTimeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.lastAccessTime=iprot.readI32();
struct.setLastAccessTimeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.sd=new StorageDescriptor();
struct.sd.read(iprot);
struct.setSdIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 7:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map203=iprot.readMapBegin();
struct.parameters=new HashMap<String,String>(2 * _map203.size);
for (int _i204=0; _i204 < _map203.size; ++_i204) {
String _key205;
String _val206;
_key205=iprot.readString();
_val206=iprot.readString();
struct.parameters.put(_key205,_val206);
}
iprot.readMapEnd();
}
struct.setParametersIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 8:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.privileges=new PrincipalPrivilegeSet();
struct.privileges.read(iprot);
struct.setPrivilegesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
