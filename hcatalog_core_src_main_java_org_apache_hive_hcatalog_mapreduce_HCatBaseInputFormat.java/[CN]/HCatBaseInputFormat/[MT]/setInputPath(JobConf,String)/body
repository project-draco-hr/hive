{
  int length=location.length();
  int curlyOpen=0;
  int pathStart=0;
  boolean globPattern=false;
  List<String> pathStrings=new ArrayList<String>();
  for (int i=0; i < length; i++) {
    char ch=location.charAt(i);
switch (ch) {
case '{':
{
        curlyOpen++;
        if (!globPattern) {
          globPattern=true;
        }
        break;
      }
case '}':
{
      curlyOpen--;
      if (curlyOpen == 0 && globPattern) {
        globPattern=false;
      }
      break;
    }
case ',':
{
    if (!globPattern) {
      pathStrings.add(location.substring(pathStart,i));
      pathStart=i + 1;
    }
    break;
  }
}
}
pathStrings.add(location.substring(pathStart,length));
String separator="";
StringBuilder str=new StringBuilder();
boolean ignoreInvalidPath=jobConf.getBoolean(HCatConstants.HCAT_INPUT_IGNORE_INVALID_PATH_KEY,HCatConstants.HCAT_INPUT_IGNORE_INVALID_PATH_DEFAULT);
Iterator<String> pathIterator=pathStrings.iterator();
while (pathIterator.hasNext()) {
String pathString=pathIterator.next();
if (ignoreInvalidPath && org.apache.commons.lang.StringUtils.isBlank(pathString)) {
continue;
}
Path path=new Path(pathString);
FileSystem fs=path.getFileSystem(jobConf);
if (ignoreInvalidPath && !fs.exists(path)) {
pathIterator.remove();
continue;
}
final String qualifiedPath=fs.makeQualified(path).toString();
str.append(separator).append(StringUtils.escapeString(qualifiedPath));
separator=StringUtils.COMMA_STR;
}
if (!ignoreInvalidPath || !pathStrings.isEmpty()) {
jobConf.set("mapred.input.dir",str.toString());
}
return pathStrings;
}
