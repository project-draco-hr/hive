{
  if (mShutdown) {
    mLogger.warn("Shutting down host " + mHost.getName());
    return;
  }
  mLogger.info("Starting parallel execution on " + mHost.getName());
  List<ListenableFuture<Void>> droneResults=Lists.newArrayList();
  for (  final Drone drone : ImmutableList.copyOf(mDrones)) {
    droneResults.add(mExecutor.submit(new Callable<Void>(){
      @Override public Void call() throws Exception {
        TestBatch batch=null;
        Stopwatch sw=Stopwatch.createUnstarted();
        try {
          do {
            batch=parallelWorkQueue.poll(mNumPollSeconds,TimeUnit.SECONDS);
            if (mShutdown) {
              mLogger.warn("Shutting down host " + mHost.getName());
              return null;
            }
            if (batch != null) {
              numParallelBatchesProcessed++;
              sw.reset().start();
              try {
                if (!executeTestBatch(drone,batch,failedTestResults)) {
                  failedTestResults.add(batch);
                }
              }
  finally {
                sw.stop();
                mLogger.info("Finished processing parallel batch [{}] on host {}. ElapsedTime(ms)={}",new Object[]{batch.getName(),getHost().toShortString(),sw.elapsed(TimeUnit.MILLISECONDS)});
              }
            }
          }
 while (!mShutdown && !parallelWorkQueue.isEmpty());
        }
 catch (        AbortDroneException ex) {
          mDrones.remove(drone);
          mLogger.error("Aborting drone during parallel execution",ex);
          if (batch != null) {
            Preconditions.checkState(parallelWorkQueue.add(batch),"Could not add batch to parallel queue " + batch);
          }
        }
        return null;
      }
    }
));
  }
  if (mShutdown) {
    mLogger.warn("Shutting down host " + mHost.getName());
    return;
  }
  Futures.allAsList(droneResults).get();
  mLogger.info("Starting isolated execution on " + mHost.getName());
  for (  Drone drone : ImmutableList.copyOf(mDrones)) {
    TestBatch batch=null;
    Stopwatch sw=Stopwatch.createUnstarted();
    try {
      do {
        batch=isolatedWorkQueue.poll(mNumPollSeconds,TimeUnit.SECONDS);
        if (batch != null) {
          numIsolatedBatchesProcessed++;
          sw.reset().start();
          try {
            if (!executeTestBatch(drone,batch,failedTestResults)) {
              failedTestResults.add(batch);
            }
          }
  finally {
            sw.stop();
            mLogger.info("Finished processing isolated batch [{}] on host {}. ElapsedTime(ms)={}",new Object[]{batch.getName(),getHost().toShortString(),sw.elapsed(TimeUnit.MILLISECONDS)});
          }
        }
      }
 while (!mShutdown && !isolatedWorkQueue.isEmpty());
    }
 catch (    AbortDroneException ex) {
      mDrones.remove(drone);
      mLogger.error("Aborting drone during isolated execution",ex);
      if (batch != null) {
        Preconditions.checkState(isolatedWorkQueue.add(batch),"Could not add batch to isolated queue " + batch);
      }
    }
  }
}
