{
  try {
    System.out.println("Testing Script Operator");
    ExprNodeDesc exprDesc1=TestExecDriver.getStringColumn("col1");
    ExprNodeDesc expr1=TestExecDriver.getStringColumn("col0");
    ExprNodeDesc expr2=new ExprNodeConstantDesc("1");
    ExprNodeDesc exprDesc2=TypeCheckProcFactory.DefaultExprProcessor.getFuncExprNodeDesc("concat",expr1,expr2);
    ArrayList<ExprNodeDesc> earr=new ArrayList<ExprNodeDesc>();
    earr.add(exprDesc1);
    earr.add(exprDesc2);
    ArrayList<String> outputCols=new ArrayList<String>();
    for (int i=0; i < earr.size(); i++) {
      outputCols.add("_col" + i);
    }
    SelectDesc selectCtx=new SelectDesc(earr,outputCols);
    Operator<SelectDesc> op=OperatorFactory.get(new CompilationOpContext(),SelectDesc.class);
    op.setConf(selectCtx);
    TableDesc scriptOutput=PlanUtils.getDefaultTableDesc("" + Utilities.tabCode,"a,b");
    TableDesc scriptInput=PlanUtils.getDefaultTableDesc("" + Utilities.tabCode,"a,b");
    ScriptDesc sd=new ScriptDesc("cat",scriptOutput,TextRecordWriter.class,scriptInput,TextRecordReader.class,TextRecordReader.class,PlanUtils.getDefaultTableDesc("" + Utilities.tabCode,"key"));
    Operator<ScriptDesc> sop=OperatorFactory.getAndMakeChild(sd,op);
    CollectDesc cd=new CollectDesc(Integer.valueOf(10));
    CollectOperator cdop=(CollectOperator)OperatorFactory.getAndMakeChild(cd,sop);
    op.initialize(new JobConf(TestOperators.class),new ObjectInspector[]{r[0].oi});
    for (int i=0; i < 5; i++) {
      op.process(r[i].o,0);
    }
    op.close(false);
    InspectableObject io=new InspectableObject();
    for (int i=0; i < 5; i++) {
      cdop.retrieve(io);
      System.out.println("[" + i + "] io.o="+ io.o);
      System.out.println("[" + i + "] io.oi="+ io.oi);
      StructObjectInspector soi=(StructObjectInspector)io.oi;
      assert(soi != null);
      StructField a=soi.getStructFieldRef("a");
      StructField b=soi.getStructFieldRef("b");
      assertEquals("" + (i + 1),((PrimitiveObjectInspector)a.getFieldObjectInspector()).getPrimitiveJavaObject(soi.getStructFieldData(io.o,a)));
      assertEquals((i) + "1",((PrimitiveObjectInspector)b.getFieldObjectInspector()).getPrimitiveJavaObject(soi.getStructFieldData(io.o,b)));
    }
    System.out.println("Script Operator ok");
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw e;
  }
}
