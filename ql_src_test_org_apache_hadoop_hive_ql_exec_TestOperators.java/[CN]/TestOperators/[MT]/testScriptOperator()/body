{
  try {
    System.out.println("Testing Script Operator");
    exprNodeDesc exprDesc1=new exprNodeColumnDesc(String.class,"col1");
    exprNodeDesc expr1=new exprNodeColumnDesc(String.class,"col0");
    exprNodeDesc expr2=new exprNodeConstantDesc("1");
    exprNodeDesc exprDesc2=SemanticAnalyzer.getFuncExprNodeDesc("concat",expr1,expr2);
    ArrayList<exprNodeDesc> earr=new ArrayList<exprNodeDesc>();
    earr.add(exprDesc1);
    earr.add(exprDesc2);
    selectDesc selectCtx=new selectDesc(earr);
    Operator<selectDesc> op=OperatorFactory.get(selectDesc.class);
    op.setConf(selectCtx);
    tableDesc scriptOutput=PlanUtils.getDefaultTableDesc("" + Utilities.tabCode,"a,b");
    tableDesc scriptInput=PlanUtils.getDefaultTableDesc("" + Utilities.tabCode,"a,b");
    scriptDesc sd=new scriptDesc("cat",scriptOutput,scriptInput);
    Operator<scriptDesc> sop=OperatorFactory.get(scriptDesc.class);
    sop.setConf(sd);
    ArrayList<Operator<? extends Serializable>> nextScriptOp=new ArrayList<Operator<? extends Serializable>>();
    nextScriptOp.add(sop);
    collectDesc cd=new collectDesc(Integer.valueOf(10));
    CollectOperator cdop=(CollectOperator)OperatorFactory.get(collectDesc.class);
    cdop.setConf(cd);
    ArrayList<Operator<? extends Serializable>> nextCollectOp=new ArrayList<Operator<? extends Serializable>>();
    nextCollectOp.add(cdop);
    op.setChildOperators(nextScriptOp);
    sop.setChildOperators(nextCollectOp);
    op.initialize(new JobConf(TestOperators.class));
    for (int i=0; i < 5; i++) {
      op.process(r[i].o,r[i].oi);
    }
    op.close(false);
    InspectableObject io=new InspectableObject();
    for (int i=0; i < 5; i++) {
      cdop.retrieve(io);
      System.out.println("[" + i + "] io.o="+ io.o);
      System.out.println("[" + i + "] io.oi="+ io.oi);
      StructObjectInspector soi=(StructObjectInspector)io.oi;
      assert(soi != null);
      StructField a=soi.getStructFieldRef("a");
      StructField b=soi.getStructFieldRef("b");
      assertEquals("" + (i + 1),soi.getStructFieldData(io.o,a));
      assertEquals((i) + "1",soi.getStructFieldData(io.o,b));
    }
    System.out.println("Script Operator ok");
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw e;
  }
}
