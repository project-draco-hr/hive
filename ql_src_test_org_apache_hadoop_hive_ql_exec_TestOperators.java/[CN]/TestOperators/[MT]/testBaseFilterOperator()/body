{
  try {
    exprNodeDesc col0=new exprNodeColumnDesc(String.class,"col[0]");
    exprNodeDesc col1=new exprNodeColumnDesc(String.class,"col[1]");
    exprNodeDesc col2=new exprNodeColumnDesc(String.class,"col[2]");
    exprNodeDesc zero=new exprNodeConstantDesc(Number.class,Long.valueOf(0));
    exprNodeDesc func1=SemanticAnalyzer.getFuncExprNodeDesc(">",col2,col1);
    System.out.println("func1 = " + func1);
    exprNodeDesc func2=SemanticAnalyzer.getFuncExprNodeDesc("==",col0,zero);
    System.out.println("func2 = " + func2);
    exprNodeDesc func3=SemanticAnalyzer.getFuncExprNodeDesc("&&",func1,func2);
    assert(func3 != null);
    filterDesc filterCtx=new filterDesc(func3);
    Operator<filterDesc> op=OperatorFactory.get(filterDesc.class);
    op.setConf(filterCtx);
    op.initialize(null);
    for (    HiveObject oner : r) {
      op.process(oner);
    }
    Map<Enum,Long> results=op.getStats();
    assertEquals(results.get(FilterOperator.Counter.FILTERED),Long.valueOf(4));
    assertEquals(results.get(FilterOperator.Counter.PASSED),Long.valueOf(1));
    System.out.println("Filter Operator ok");
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw e;
  }
}
