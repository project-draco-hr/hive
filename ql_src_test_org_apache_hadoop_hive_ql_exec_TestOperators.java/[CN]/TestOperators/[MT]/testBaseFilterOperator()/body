{
  try {
    System.out.println("Testing Filter Operator");
    exprNodeDesc col0=TestExecDriver.getStringColumn("col0");
    exprNodeDesc col1=TestExecDriver.getStringColumn("col1");
    exprNodeDesc col2=TestExecDriver.getStringColumn("col2");
    exprNodeDesc zero=new exprNodeConstantDesc("0");
    exprNodeDesc func1=TypeCheckProcFactory.DefaultExprProcessor.getFuncExprNodeDesc(">",col2,col1);
    exprNodeDesc func2=TypeCheckProcFactory.DefaultExprProcessor.getFuncExprNodeDesc("==",col0,zero);
    exprNodeDesc func3=TypeCheckProcFactory.DefaultExprProcessor.getFuncExprNodeDesc("&&",func1,func2);
    assert(func3 != null);
    filterDesc filterCtx=new filterDesc(func3,false);
    Operator<filterDesc> op=OperatorFactory.get(filterDesc.class);
    op.setConf(filterCtx);
    op.initialize(new JobConf(TestOperators.class),new ObjectInspector[]{r[0].oi});
    for (    InspectableObject oner : r) {
      op.process(oner.o,0);
    }
    Map<Enum<?>,Long> results=op.getStats();
    System.out.println("filtered = " + results.get(FilterOperator.Counter.FILTERED));
    assertEquals(Long.valueOf(4),results.get(FilterOperator.Counter.FILTERED));
    System.out.println("passed = " + results.get(FilterOperator.Counter.PASSED));
    assertEquals(Long.valueOf(1),results.get(FilterOperator.Counter.PASSED));
    System.out.println("Filter Operator ok");
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw e;
  }
}
