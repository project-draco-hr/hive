{
  try {
    ScriptOperator scriptOperator=new ScriptOperator();
    assertEquals("a_b_c",scriptOperator.safeEnvVarName("a.b.c"));
    assertEquals("a_b_c",scriptOperator.safeEnvVarName("a-b-c"));
    assertEquals("value",scriptOperator.safeEnvVarValue("value","name",false));
    assertEquals("value",scriptOperator.safeEnvVarValue("value","name",true));
    char[] array=new char[20 * 1024 + 1];
    Arrays.fill(array,'a');
    String hugeEnvVar=new String(array);
    assertEquals(20 * 1024 + 1,hugeEnvVar.length());
    assertEquals(20 * 1024 + 1,scriptOperator.safeEnvVarValue(hugeEnvVar,"name",false).length());
    assertEquals(20 * 1024,scriptOperator.safeEnvVarValue(hugeEnvVar,"name",true).length());
    Configuration hconf=new JobConf(ScriptOperator.class);
    hconf.set("name",hugeEnvVar);
    Map<String,String> env=new HashMap<String,String>();
    HiveConf.setBoolVar(hconf,HiveConf.ConfVars.HIVESCRIPTTRUNCATEENV,false);
    scriptOperator.addJobConfToEnvironment(hconf,env);
    assertEquals(20 * 1024 + 1,env.get("name").length());
    HiveConf.setBoolVar(hconf,HiveConf.ConfVars.HIVESCRIPTTRUNCATEENV,true);
    scriptOperator.addJobConfToEnvironment(hconf,env);
    assertEquals(20 * 1024,env.get("name").length());
    System.out.println("Script Operator Environment Variables processing ok");
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw e;
  }
}
