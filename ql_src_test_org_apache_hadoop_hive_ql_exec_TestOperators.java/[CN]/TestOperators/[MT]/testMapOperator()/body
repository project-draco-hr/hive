{
  try {
    System.out.println("Testing Map Operator");
    Configuration hconf=new JobConf(TestOperators.class);
    HiveConf.setVar(hconf,HiveConf.ConfVars.HADOOPMAPFILENAME,"hdfs:///testDir/testFile");
    ArrayList<String> aliases=new ArrayList<String>();
    aliases.add("a");
    aliases.add("b");
    LinkedHashMap<String,ArrayList<String>> pathToAliases=new LinkedHashMap<String,ArrayList<String>>();
    pathToAliases.put("/testDir",aliases);
    tableDesc td=Utilities.defaultTd;
    partitionDesc pd=new partitionDesc(td,null);
    LinkedHashMap<String,org.apache.hadoop.hive.ql.plan.partitionDesc> pathToPartitionInfo=new LinkedHashMap<String,org.apache.hadoop.hive.ql.plan.partitionDesc>();
    pathToPartitionInfo.put("/testDir",pd);
    collectDesc cd=new collectDesc(Integer.valueOf(1));
    CollectOperator cdop1=(CollectOperator)OperatorFactory.get(collectDesc.class);
    cdop1.setConf(cd);
    CollectOperator cdop2=(CollectOperator)OperatorFactory.get(collectDesc.class);
    cdop2.setConf(cd);
    LinkedHashMap<String,Operator<? extends Serializable>> aliasToWork=new LinkedHashMap<String,Operator<? extends Serializable>>();
    aliasToWork.put("a",cdop1);
    aliasToWork.put("b",cdop2);
    mapredWork mrwork=new mapredWork();
    mrwork.setPathToAliases(pathToAliases);
    mrwork.setPathToPartitionInfo(pathToPartitionInfo);
    mrwork.setAliasToWork(aliasToWork);
    MapOperator mo=new MapOperator();
    mo.initializeAsRoot(hconf,mrwork);
    Text tw=new Text();
    InspectableObject io1=new InspectableObject();
    InspectableObject io2=new InspectableObject();
    for (int i=0; i < 5; i++) {
      String answer="[[" + i + ", "+ (i + 1)+ ", "+ (i + 2)+ "]]";
      tw.set("" + i + "\u0001"+ (i + 1)+ "\u0001"+ (i + 2));
      mo.process((Writable)tw);
      cdop1.retrieve(io1);
      cdop2.retrieve(io2);
      System.out.println("io1.o.toString() = " + io1.o.toString());
      System.out.println("io2.o.toString() = " + io2.o.toString());
      System.out.println("answer.toString() = " + answer.toString());
      assertEquals(answer.toString(),io1.o.toString());
      assertEquals(answer.toString(),io2.o.toString());
    }
    System.out.println("Map Operator ok");
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw (e);
  }
}
