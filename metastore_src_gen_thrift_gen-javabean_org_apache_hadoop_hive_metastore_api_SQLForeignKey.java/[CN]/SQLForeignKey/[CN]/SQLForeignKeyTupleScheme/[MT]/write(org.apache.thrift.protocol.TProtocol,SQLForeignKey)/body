{
  TTupleProtocol oprot=(TTupleProtocol)prot;
  BitSet optionals=new BitSet();
  if (struct.isSetPktable_db()) {
    optionals.set(0);
  }
  if (struct.isSetPktable_name()) {
    optionals.set(1);
  }
  if (struct.isSetPkcolumn_name()) {
    optionals.set(2);
  }
  if (struct.isSetFktable_db()) {
    optionals.set(3);
  }
  if (struct.isSetFktable_name()) {
    optionals.set(4);
  }
  if (struct.isSetFkcolumn_name()) {
    optionals.set(5);
  }
  if (struct.isSetKey_seq()) {
    optionals.set(6);
  }
  if (struct.isSetUpdate_rule()) {
    optionals.set(7);
  }
  if (struct.isSetDelete_rule()) {
    optionals.set(8);
  }
  if (struct.isSetFk_name()) {
    optionals.set(9);
  }
  if (struct.isSetPk_name()) {
    optionals.set(10);
  }
  if (struct.isSetEnable_cstr()) {
    optionals.set(11);
  }
  if (struct.isSetValidate_cstr()) {
    optionals.set(12);
  }
  if (struct.isSetRely_cstr()) {
    optionals.set(13);
  }
  oprot.writeBitSet(optionals,14);
  if (struct.isSetPktable_db()) {
    oprot.writeString(struct.pktable_db);
  }
  if (struct.isSetPktable_name()) {
    oprot.writeString(struct.pktable_name);
  }
  if (struct.isSetPkcolumn_name()) {
    oprot.writeString(struct.pkcolumn_name);
  }
  if (struct.isSetFktable_db()) {
    oprot.writeString(struct.fktable_db);
  }
  if (struct.isSetFktable_name()) {
    oprot.writeString(struct.fktable_name);
  }
  if (struct.isSetFkcolumn_name()) {
    oprot.writeString(struct.fkcolumn_name);
  }
  if (struct.isSetKey_seq()) {
    oprot.writeI32(struct.key_seq);
  }
  if (struct.isSetUpdate_rule()) {
    oprot.writeI32(struct.update_rule);
  }
  if (struct.isSetDelete_rule()) {
    oprot.writeI32(struct.delete_rule);
  }
  if (struct.isSetFk_name()) {
    oprot.writeString(struct.fk_name);
  }
  if (struct.isSetPk_name()) {
    oprot.writeString(struct.pk_name);
  }
  if (struct.isSetEnable_cstr()) {
    oprot.writeBool(struct.enable_cstr);
  }
  if (struct.isSetValidate_cstr()) {
    oprot.writeBool(struct.validate_cstr);
  }
  if (struct.isSetRely_cstr()) {
    oprot.writeBool(struct.rely_cstr);
  }
}
