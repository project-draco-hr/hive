{
  this.pGraphContext=pactx;
  this.opToParseCtxMap=pGraphContext.getOpParseCtx();
  boolean done=true;
  ColumnPrunerProcCtx cppCtx=new ColumnPrunerProcCtx(opToParseCtxMap);
  Map<Rule,NodeProcessor> opRules=new LinkedHashMap<Rule,NodeProcessor>();
  opRules.put(new RuleRegExp("R1","FIL%"),ColumnPrunerProcFactory.getFilterProc());
  opRules.put(new RuleRegExp("R2","GBY%"),ColumnPrunerProcFactory.getGroupByProc());
  opRules.put(new RuleRegExp("R3","RS%"),ColumnPrunerProcFactory.getReduceSinkProc());
  opRules.put(new RuleRegExp("R4","SEL%"),ColumnPrunerProcFactory.getSelectProc());
  Dispatcher disp=new DefaultRuleDispatcher(ColumnPrunerProcFactory.getDefaultProc(),opRules,cppCtx);
  GraphWalker ogw=new ColumnPrunerWalker(disp);
  ArrayList<Node> topNodes=new ArrayList<Node>();
  topNodes.addAll(pGraphContext.getTopOps().values());
  ogw.startWalking(topNodes,null);
  for (  String alias_id : pGraphContext.getTopOps().keySet()) {
    Operator<? extends Serializable> topOp=pGraphContext.getTopOps().get(alias_id);
    List<String> colNames=cppCtx.getPrunedColList(topOp);
    if (pushSelect(topOp,colNames)) {
      topOp.setChildOperators(null);
      Operator select=genSelectPlan(topOp,colNames);
      pGraphContext.getTopSelOps().put(alias_id,select);
      done=false;
    }
  }
  if (!done) {
    SemanticAnalyzer sem=(SemanticAnalyzer)SemanticAnalyzerFactory.get(pGraphContext.getConf(),pGraphContext.getParseTree());
    resetParseContext(pGraphContext);
    QB qb=new QB(null,null,false);
    pGraphContext.setQB(qb);
    sem.init(pGraphContext);
    sem.doPhase1(pGraphContext.getParseTree(),qb,sem.initPhase1Ctx());
    sem.getMetaData(qb);
    sem.genPlan(qb);
    pGraphContext=sem.getParseContext();
  }
  return pGraphContext;
}
