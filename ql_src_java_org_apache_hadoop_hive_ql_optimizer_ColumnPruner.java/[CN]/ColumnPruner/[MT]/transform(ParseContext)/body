{
  pGraphContext=pactx;
  ColumnPrunerProcCtx cppCtx=new ColumnPrunerProcCtx(pactx);
  Map<Rule,NodeProcessor> opRules=new LinkedHashMap<Rule,NodeProcessor>();
  opRules.put(new RuleRegExp("R1",FilterOperator.getOperatorName() + "%"),ColumnPrunerProcFactory.getFilterProc());
  opRules.put(new RuleRegExp("R2",GroupByOperator.getOperatorName() + "%"),ColumnPrunerProcFactory.getGroupByProc());
  opRules.put(new RuleRegExp("R3",ReduceSinkOperator.getOperatorName() + "%"),ColumnPrunerProcFactory.getReduceSinkProc());
  opRules.put(new RuleRegExp("R4",SelectOperator.getOperatorName() + "%"),ColumnPrunerProcFactory.getSelectProc());
  opRules.put(new RuleRegExp("R5",CommonJoinOperator.getOperatorName() + "%"),ColumnPrunerProcFactory.getJoinProc());
  opRules.put(new RuleRegExp("R6",MapJoinOperator.getOperatorName() + "%"),ColumnPrunerProcFactory.getMapJoinProc());
  opRules.put(new RuleRegExp("R7",TableScanOperator.getOperatorName() + "%"),ColumnPrunerProcFactory.getTableScanProc());
  opRules.put(new RuleRegExp("R8",LateralViewJoinOperator.getOperatorName() + "%"),ColumnPrunerProcFactory.getLateralViewJoinProc());
  opRules.put(new RuleRegExp("R9",LateralViewForwardOperator.getOperatorName() + "%"),ColumnPrunerProcFactory.getLateralViewForwardProc());
  opRules.put(new RuleRegExp("R10",PTFOperator.getOperatorName() + "%"),ColumnPrunerProcFactory.getPTFProc());
  opRules.put(new RuleRegExp("R11",ScriptOperator.getOperatorName() + "%"),ColumnPrunerProcFactory.getScriptProc());
  opRules.put(new RuleRegExp("R12",LimitOperator.getOperatorName() + "%"),ColumnPrunerProcFactory.getLimitProc());
  opRules.put(new RuleRegExp("R13",UnionOperator.getOperatorName() + "%"),ColumnPrunerProcFactory.getUnionProc());
  Dispatcher disp=new DefaultRuleDispatcher(ColumnPrunerProcFactory.getDefaultProc(),opRules,cppCtx);
  GraphWalker ogw=new ColumnPrunerWalker(disp);
  ArrayList<Node> topNodes=new ArrayList<Node>();
  topNodes.addAll(pGraphContext.getTopOps().values());
  ogw.startWalking(topNodes,null);
  return pGraphContext;
}
