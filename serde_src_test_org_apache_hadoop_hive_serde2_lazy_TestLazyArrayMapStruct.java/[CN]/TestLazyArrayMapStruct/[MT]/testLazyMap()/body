{
  try {
{
      Text nullSequence=new Text("\\N");
      LazyMap b=(LazyMap)LazyFactory.createLazyObject(TypeInfoUtils.getTypeInfoFromTypeString("map<int,string>"));
      byte[] data=new byte[]{'2',2,'d','e','f',1,'-','1',2,'\\','N',1,'0',2,'0',1,'8',2,'a','b','c'};
      TestLazyPrimitive.initLazyObject(b,data,0,data.length);
      assertEquals(new Text("def"),b.getMapValueElement((byte)1,(byte)2,nullSequence,new IntWritable(2)));
      assertNull(b.getMapValueElement((byte)1,(byte)2,nullSequence,Integer.valueOf(-1)));
      assertEquals(new Text("0"),b.getMapValueElement((byte)1,(byte)2,nullSequence,new IntWritable(0)));
      assertEquals(new Text("abc"),b.getMapValueElement((byte)1,(byte)2,nullSequence,new IntWritable(8)));
      assertNull(b.getMapValueElement((byte)1,(byte)2,nullSequence,new IntWritable(12345)));
      HashMap<IntWritable,Text> r=new HashMap<IntWritable,Text>();
      r.put(new IntWritable(2),new Text("def"));
      r.put(new IntWritable(-1),null);
      r.put(new IntWritable(0),new Text("0"));
      r.put(new IntWritable(8),new Text("abc"));
      assertEquals(r,b.getMap((byte)1,(byte)2,nullSequence));
    }
{
      Text nullSequence=new Text("\\N");
      LazyMap b=(LazyMap)LazyFactory.createLazyObject(TypeInfoUtils.getTypeInfoFromTypeString("map<string,string>"));
      byte[] data=new byte[]{'2','\t','d','\t','f','#','2','\t','d','#','-','1','#','0','\t','0','#','8','\t','a','b','c'};
      TestLazyPrimitive.initLazyObject(b,data,0,data.length);
      assertEquals(new Text("d\tf"),b.getMapValueElement((byte)'#',(byte)'\t',nullSequence,new Text("2")));
      assertNull(b.getMapValueElement((byte)'#',(byte)'\t',nullSequence,new Text("-1")));
      assertEquals(new Text("0"),b.getMapValueElement((byte)'#',(byte)'\t',nullSequence,new Text("0")));
      assertEquals(new Text("abc"),b.getMapValueElement((byte)'#',(byte)'\t',nullSequence,new Text("8")));
      assertNull(b.getMapValueElement((byte)'#',(byte)'\t',nullSequence,new Text("-")));
      HashMap<Text,Text> r=new HashMap<Text,Text>();
      r.put(new Text("2"),new Text("d\tf"));
      r.put(new Text("-1"),null);
      r.put(new Text("0"),new Text("0"));
      r.put(new Text("8"),new Text("abc"));
      assertEquals(r,b.getMap((byte)1,(byte)2,nullSequence));
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw e;
  }
}
