{
  try {
{
      Text nullSequence=new Text("\\N");
      LazyMap b=(LazyMap)LazyFactory.createLazyObject(TypeInfoUtils.getTypeInfoFromTypeString("map<int,string>"));
      byte[] data=new byte[]{'2',2,'d','e','f',1,'-','1',2,'\\','N',1,'0',2,'0',1,'8',2,'a','b','c'};
      TestLazyPrimitive.initLazyObject(b,data,0,data.length);
      assertEquals("def",b.getMapValueElement((byte)1,(byte)2,nullSequence,Integer.valueOf(2)));
      assertNull(b.getMapValueElement((byte)1,(byte)2,nullSequence,Integer.valueOf(-1)));
      assertEquals("0",b.getMapValueElement((byte)1,(byte)2,nullSequence,Integer.valueOf(0)));
      assertEquals("abc",b.getMapValueElement((byte)1,(byte)2,nullSequence,Integer.valueOf(8)));
      assertNull(b.getMapValueElement((byte)1,(byte)2,nullSequence,Integer.valueOf(12345)));
      HashMap<Integer,String> r=new HashMap<Integer,String>();
      r.put(2,"def");
      r.put(-1,null);
      r.put(0,"0");
      r.put(8,"abc");
      assertEquals(r,b.getMap((byte)1,(byte)2,nullSequence));
    }
{
      Text nullSequence=new Text("\\N");
      LazyMap b=(LazyMap)LazyFactory.createLazyObject(TypeInfoUtils.getTypeInfoFromTypeString("map<string,string>"));
      byte[] data=new byte[]{'2','\t','d','\t','f','#','2','\t','d','#','-','1','#','0','\t','0','#','8','\t','a','b','c'};
      TestLazyPrimitive.initLazyObject(b,data,0,data.length);
      assertEquals("d\tf",b.getMapValueElement((byte)'#',(byte)'\t',nullSequence,"2"));
      assertNull(b.getMapValueElement((byte)'#',(byte)'\t',nullSequence,Integer.valueOf(-1)));
      assertEquals("0",b.getMapValueElement((byte)'#',(byte)'\t',nullSequence,"0"));
      assertEquals("abc",b.getMapValueElement((byte)'#',(byte)'\t',nullSequence,"8"));
      assertNull(b.getMapValueElement((byte)'#',(byte)'\t',nullSequence,"-"));
      HashMap<String,String> r=new HashMap<String,String>();
      r.put("2","d\tf");
      r.put("-1",null);
      r.put("0","0");
      r.put("8","abc");
      assertEquals(r,b.getMap((byte)1,(byte)2,nullSequence));
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw e;
  }
}
