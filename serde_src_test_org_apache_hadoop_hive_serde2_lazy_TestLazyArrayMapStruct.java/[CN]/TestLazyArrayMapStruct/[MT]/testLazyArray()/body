{
  try {
    Text nullSequence=new Text("\\N");
    ObjectInspector oi=LazyFactory.createLazyObjectInspector(TypeInfoUtils.getTypeInfosFromTypeString("array<tinyint>").get(0),new byte[]{(byte)1},0,nullSequence,false,(byte)0);
    LazyArray b=(LazyArray)LazyFactory.createLazyObject(oi);
    byte[] data=new byte[]{'-','1',1,'\\','N',1,'8'};
    TestLazyPrimitive.initLazyObject(b,data,0,data.length);
    assertNull(b.getListElementObject(-1));
    assertEquals(new ByteWritable((byte)-1),((LazyByte)b.getListElementObject(0)).getWritableObject());
    assertEquals(new ByteWritable((byte)-1),((LazyByte)b.getList().get(0)).getWritableObject());
    assertNull(b.getListElementObject(1));
    assertNull(b.getList().get(1));
    assertEquals(new ByteWritable((byte)8),((LazyByte)b.getListElementObject(2)).getWritableObject());
    assertEquals(new ByteWritable((byte)8),((LazyByte)b.getList().get(2)).getWritableObject());
    assertNull(b.getListElementObject(3));
    assertEquals(3,b.getList().size());
    oi=LazyFactory.createLazyObjectInspector(TypeInfoUtils.getTypeInfosFromTypeString("array<string>").get(0),new byte[]{(byte)'\t'},0,nullSequence,false,(byte)0);
    b=(LazyArray)LazyFactory.createLazyObject(oi);
    data=new byte[]{'a','b','\t','c','\t','\\','N','\t','\t','d'};
    TestLazyPrimitive.initLazyObject(b,data,1,data.length - 2);
    assertNull(b.getListElementObject(-1));
    assertEquals(new Text("b"),((LazyString)b.getListElementObject(0)).getWritableObject());
    assertEquals(new Text("b"),((LazyString)b.getList().get(0)).getWritableObject());
    assertEquals(new Text("c"),((LazyString)b.getListElementObject(1)).getWritableObject());
    assertEquals(new Text("c"),((LazyString)b.getList().get(1)).getWritableObject());
    assertNull((b.getListElementObject(2)));
    assertNull((b.getList().get(2)));
    assertEquals(new Text(""),((LazyString)b.getListElementObject(3)).getWritableObject());
    assertEquals(new Text(""),((LazyString)b.getList().get(3)).getWritableObject());
    assertEquals(new Text(""),((LazyString)b.getListElementObject(4)).getWritableObject());
    assertEquals(new Text(""),((LazyString)b.getList().get(4)).getWritableObject());
    assertNull((b.getListElementObject(5)));
    assertEquals(5,b.getList().size());
    b=(LazyArray)LazyFactory.createLazyObject(oi);
    data=new byte[]{'a','\t','\\','N'};
    TestLazyPrimitive.initLazyObject(b,data,0,data.length);
    assertEquals(new Text("a"),((LazyString)b.getListElementObject(0)).getWritableObject());
    assertNull(b.getListElementObject(1));
    data=new byte[]{'\\','N','\t','a'};
    TestLazyPrimitive.initLazyObject(b,data,0,data.length);
    assertNull(b.getListElementObject(0));
    assertNull(b.getListElementObject(0));
    assertEquals(new Text("a"),((LazyString)b.getListElementObject(1)).getWritableObject());
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw e;
  }
}
