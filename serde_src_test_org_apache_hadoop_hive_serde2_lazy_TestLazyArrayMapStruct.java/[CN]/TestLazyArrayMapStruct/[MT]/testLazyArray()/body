{
  try {
    Text nullSequence=new Text("\\N");
    LazyArray b=(LazyArray)LazyFactory.createLazyObject(TypeInfoUtils.getTypeInfoFromTypeString("array<tinyint>"));
    byte[] data=new byte[]{'-','1',1,'\\','N',1,'8'};
    TestLazyPrimitive.initLazyObject(b,data,0,data.length);
    assertNull(b.getListElementObject(-1,(byte)1,nullSequence));
    assertEquals(new ByteWritable((byte)-1),b.getListElementObject(0,(byte)1,nullSequence));
    assertNull(b.getListElementObject(1,(byte)1,nullSequence));
    assertEquals(new ByteWritable((byte)8),b.getListElementObject(2,(byte)1,nullSequence));
    assertNull(b.getListElementObject(3,(byte)1,nullSequence));
    assertEquals(Arrays.asList(new ByteWritable[]{new ByteWritable((byte)-1),null,new ByteWritable((byte)8)}),b.getList((byte)1,nullSequence));
    b=(LazyArray)LazyFactory.createLazyObject(TypeInfoUtils.getTypeInfoFromTypeString("array<string>"));
    data=new byte[]{'a','b','\t','c','\t','\\','N','\t','\t','d'};
    TestLazyPrimitive.initLazyObject(b,data,1,data.length - 2);
    assertNull(b.getListElementObject(-1,(byte)'\t',nullSequence));
    assertEquals(new Text("b"),b.getListElementObject(0,(byte)'\t',nullSequence));
    assertEquals(new Text("c"),b.getListElementObject(1,(byte)'\t',nullSequence));
    assertNull(b.getListElementObject(2,(byte)'\t',nullSequence));
    assertEquals(new Text(""),b.getListElementObject(3,(byte)'\t',nullSequence));
    assertEquals(new Text(""),b.getListElementObject(4,(byte)'\t',nullSequence));
    assertNull(b.getListElementObject(5,(byte)'\t',nullSequence));
    assertEquals(Arrays.asList(new Text[]{new Text("b"),new Text("c"),null,new Text(""),new Text("")}),b.getList((byte)'\t',nullSequence));
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw e;
  }
}
