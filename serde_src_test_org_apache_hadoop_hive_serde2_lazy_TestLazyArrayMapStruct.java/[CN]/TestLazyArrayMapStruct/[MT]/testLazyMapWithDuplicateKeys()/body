{
  try {
{
      Text nullSequence=new Text("\\N");
      ObjectInspector oi=LazyFactory.createLazyObjectInspector(TypeInfoUtils.getTypeInfosFromTypeString("map<int,string>").get(0),new byte[]{(byte)1,(byte)2},0,nullSequence,false,(byte)0);
      LazyMap b=(LazyMap)LazyFactory.createLazyObject(oi);
      byte[] data=new byte[]{'2',2,'d','e','f',1,'-','1',2,'\\','N',1,'0',2,'0',1,'2',2,'a','b','c'};
      TestLazyPrimitive.initLazyObject(b,data,0,data.length);
      assertEquals(new Text("def"),((LazyString)b.getMapValueElement(new IntWritable(2))).getWritableObject());
      assertNull(b.getMapValueElement(new IntWritable(-1)));
      assertEquals(new Text("0"),((LazyString)b.getMapValueElement(new IntWritable(0))).getWritableObject());
      assertNull(b.getMapValueElement(new IntWritable(12345)));
      assertEquals("{2:'def',-1:null,0:'0'}".replace('\'','\"'),SerDeUtils.getJSONString(b,oi));
      assertEquals(3,b.getMapSize());
      assertEquals(3,b.getMap().size());
    }
{
      Text nullSequence=new Text("\\N");
      ObjectInspector oi=LazyFactory.createLazyObjectInspector(TypeInfoUtils.getTypeInfosFromTypeString("map<string,string>").get(0),new byte[]{(byte)'#',(byte)'\t'},0,nullSequence,false,(byte)0);
      LazyMap b=(LazyMap)LazyFactory.createLazyObject(oi);
      byte[] data=new byte[]{'2','\t','d','\t','f','#','2','\t','d','#','-','1','#','0','\t','0','#','2','\t','a','b','c'};
      TestLazyPrimitive.initLazyObject(b,data,0,data.length);
      assertEquals(new Text("d\tf"),((LazyString)b.getMapValueElement(new Text("2"))).getWritableObject());
      assertNull(b.getMapValueElement(new Text("-1")));
      assertEquals(new Text("0"),((LazyString)b.getMapValueElement(new Text("0"))).getWritableObject());
      assertEquals("{'2':'d\\tf','-1':null,'0':'0'}".replace('\'','\"'),SerDeUtils.getJSONString(b,oi));
      assertEquals(3,b.getMapSize());
      assertEquals(3,b.getMap().size());
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw e;
  }
}
