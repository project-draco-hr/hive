{
  try {
{
      ArrayList<TypeInfo> fieldTypeInfos=TypeInfoUtils.getTypeInfosFromTypeString("int,array<string>,map<string,string>,string");
      List<String> fieldNames=Arrays.asList(new String[]{"a","b","c","d"});
      TypeInfo rowTypeInfo=TypeInfoFactory.getStructTypeInfo(fieldNames,fieldTypeInfos);
      Text nullSequence=new Text("\\N");
      LazyStruct o=(LazyStruct)LazyFactory.createLazyObject(rowTypeInfo);
      ObjectInspector oi=LazyFactory.createLazyStructInspector(Arrays.asList(new String[]{"a","b","c","d"}),fieldTypeInfos,new byte[]{' ',':','='},nullSequence,false);
      Text data;
      data=new Text("123 a:b:c d=e:f=g hi");
      TestLazyPrimitive.initLazyObject(o,data.getBytes(),0,data.getLength());
      assertEquals("{'a':123,'b':['a','b','c'],'c':{'d':'e','f':'g'},'d':'hi'}".replace("'","\""),SerDeUtils.getJSONString(o,oi));
      data=new Text("123 \\N d=e:f=g \\N");
      TestLazyPrimitive.initLazyObject(o,data.getBytes(),0,data.getLength());
      assertEquals("{'a':123,'b':null,'c':{'d':'e','f':'g'},'d':null}".replace("'","\""),SerDeUtils.getJSONString(o,oi));
      data=new Text("\\N a d=\\N:f=g:h no tail");
      TestLazyPrimitive.initLazyObject(o,data.getBytes(),0,data.getLength());
      assertEquals("{'a':null,'b':['a'],'c':{'d':null,'f':'g','h':null},'d':'no'}".replace("'","\""),SerDeUtils.getJSONString(o,oi));
      data=new Text("\\N :a:: \\N no tail");
      TestLazyPrimitive.initLazyObject(o,data.getBytes(),0,data.getLength());
      assertEquals("{'a':null,'b':['','a','',''],'c':null,'d':'no'}".replace("'","\""),SerDeUtils.getJSONString(o,oi));
      data=new Text("123   ");
      TestLazyPrimitive.initLazyObject(o,data.getBytes(),0,data.getLength());
      assertEquals("{'a':123,'b':[],'c':{},'d':''}".replace("'","\""),SerDeUtils.getJSONString(o,oi));
      data=new Text(": : : :");
      TestLazyPrimitive.initLazyObject(o,data.getBytes(),0,data.getLength());
      assertEquals("{'a':null,'b':['',''],'c':{'':null},'d':':'}".replace("'","\""),SerDeUtils.getJSONString(o,oi));
      data=new Text("= = = =");
      TestLazyPrimitive.initLazyObject(o,data.getBytes(),0,data.getLength());
      assertEquals("{'a':null,'b':['='],'c':{'':''},'d':'='}".replace("'","\""),SerDeUtils.getJSONString(o,oi));
      oi=LazyFactory.createLazyStructInspector(Arrays.asList(new String[]{"a","b","c","d"}),fieldTypeInfos,new byte[]{' ',':','='},nullSequence,true);
      data=new Text("\\N a d=\\N:f=g:h has tail");
      TestLazyPrimitive.initLazyObject(o,data.getBytes(),0,data.getLength());
      assertEquals("{'a':null,'b':['a'],'c':{'d':null,'f':'g','h':null},'d':'has tail'}".replace("'","\""),SerDeUtils.getJSONString(o,oi));
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw e;
  }
}
