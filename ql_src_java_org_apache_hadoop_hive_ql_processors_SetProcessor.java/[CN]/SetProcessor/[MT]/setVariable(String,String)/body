{
  SessionState ss=SessionState.get();
  if (varvalue.contains("\n")) {
    ss.err.println("Warning: Value had a \\n character in it.");
  }
  varname=varname.trim();
  String nonErrorMessage=null;
  if (varname.startsWith(ENV_PREFIX)) {
    ss.err.println("env:* variables can not be set.");
    return new CommandProcessorResponse(1);
  }
 else   if (varname.startsWith(SYSTEM_PREFIX)) {
    String propName=varname.substring(SYSTEM_PREFIX.length());
    System.getProperties().setProperty(propName,new VariableSubstitution(new HiveVariableSource(){
      @Override public Map<String,String> getHiveVariable(){
        return SessionState.get().getHiveVariables();
      }
    }
).substitute(ss.getConf(),varvalue));
  }
 else   if (varname.startsWith(HIVECONF_PREFIX)) {
    String propName=varname.substring(HIVECONF_PREFIX.length());
    nonErrorMessage=setConf(varname,propName,varvalue,false);
  }
 else   if (varname.startsWith(HIVEVAR_PREFIX)) {
    String propName=varname.substring(HIVEVAR_PREFIX.length());
    ss.getHiveVariables().put(propName,new VariableSubstitution(new HiveVariableSource(){
      @Override public Map<String,String> getHiveVariable(){
        return SessionState.get().getHiveVariables();
      }
    }
).substitute(ss.getConf(),varvalue));
  }
 else   if (varname.startsWith(METACONF_PREFIX)) {
    String propName=varname.substring(METACONF_PREFIX.length());
    Hive hive=Hive.get(ss.getConf());
    hive.setMetaConf(propName,new VariableSubstitution(new HiveVariableSource(){
      @Override public Map<String,String> getHiveVariable(){
        return SessionState.get().getHiveVariables();
      }
    }
).substitute(ss.getConf(),varvalue));
  }
 else {
    nonErrorMessage=setConf(varname,varname,varvalue,true);
    if (varname.equals(HiveConf.ConfVars.HIVE_SESSION_HISTORY_ENABLED.toString())) {
      SessionState.get().updateHistory(Boolean.parseBoolean(varvalue),ss);
    }
  }
  return nonErrorMessage == null ? new CommandProcessorResponse(0) : new CommandProcessorResponse(0,Lists.newArrayList(nonErrorMessage));
}
