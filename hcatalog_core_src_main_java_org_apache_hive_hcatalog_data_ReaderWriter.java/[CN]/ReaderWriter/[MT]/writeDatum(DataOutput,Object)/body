{
  byte type=DataType.findType(val);
  out.write(type);
switch (type) {
case DataType.LIST:
    List<?> list=(List<?>)val;
  int sz=list.size();
out.writeInt(sz);
for (int i=0; i < sz; i++) {
writeDatum(out,list.get(i));
}
return;
case DataType.MAP:
Map<?,?> m=(Map<?,?>)val;
out.writeInt(m.size());
Iterator<?> i=m.entrySet().iterator();
while (i.hasNext()) {
Entry<?,?> entry=(Entry<?,?>)i.next();
writeDatum(out,entry.getKey());
writeDatum(out,entry.getValue());
}
return;
case DataType.INTEGER:
new VIntWritable((Integer)val).write(out);
return;
case DataType.LONG:
new VLongWritable((Long)val).write(out);
return;
case DataType.FLOAT:
out.writeFloat((Float)val);
return;
case DataType.DOUBLE:
out.writeDouble((Double)val);
return;
case DataType.BOOLEAN:
out.writeBoolean((Boolean)val);
return;
case DataType.BYTE:
out.writeByte((Byte)val);
return;
case DataType.SHORT:
out.writeShort((Short)val);
return;
case DataType.STRING:
String s=(String)val;
byte[] utfBytes=s.getBytes(ReaderWriter.UTF8);
out.writeInt(utfBytes.length);
out.write(utfBytes);
return;
case DataType.BINARY:
byte[] ba=(byte[])val;
out.writeInt(ba.length);
out.write(ba);
return;
case DataType.NULL:
return;
case DataType.CHAR:
new HiveCharWritable((HiveChar)val).write(out);
return;
case DataType.VARCHAR:
new HiveVarcharWritable((HiveVarchar)val).write(out);
return;
case DataType.DECIMAL:
new HiveDecimalWritable((HiveDecimal)val).write(out);
return;
case DataType.DATE:
new DateWritable((Date)val).write(out);
return;
case DataType.TIMESTAMP:
new TimestampWritable((java.sql.Timestamp)val).write(out);
return;
default :
throw new IOException("Unexpected data type " + type + " found in stream.");
}
}
