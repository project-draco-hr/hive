{
  byte type=in.readByte();
switch (type) {
case DataType.STRING:
    byte[] buffer=new byte[in.readInt()];
  in.readFully(buffer);
return new String(buffer,UTF8);
case DataType.INTEGER:
VIntWritable vint=new VIntWritable();
vint.readFields(in);
return vint.get();
case DataType.LONG:
VLongWritable vlong=new VLongWritable();
vlong.readFields(in);
return vlong.get();
case DataType.FLOAT:
return in.readFloat();
case DataType.DOUBLE:
return in.readDouble();
case DataType.BOOLEAN:
return in.readBoolean();
case DataType.BYTE:
return in.readByte();
case DataType.SHORT:
return in.readShort();
case DataType.NULL:
return null;
case DataType.BINARY:
int len=in.readInt();
byte[] ba=new byte[len];
in.readFully(ba);
return ba;
case DataType.MAP:
int size=in.readInt();
Map<Object,Object> m=new HashMap<Object,Object>(size);
for (int i=0; i < size; i++) {
m.put(readDatum(in),readDatum(in));
}
return m;
case DataType.LIST:
int sz=in.readInt();
List<Object> list=new ArrayList<Object>(sz);
for (int i=0; i < sz; i++) {
list.add(readDatum(in));
}
return list;
default :
throw new IOException("Unexpected data type " + type + " found in stream.");
}
}
