{
  if (childExpressions != null) {
    super.evaluateChildren(batch);
  }
  BytesColumnVector inputColVector=(BytesColumnVector)batch.cols[colNum];
  BytesColumnVector outV=(BytesColumnVector)batch.cols[outputColumn];
  int[] sel=batch.selected;
  int n=batch.size;
  byte[][] vector=inputColVector.vector;
  int[] start=inputColVector.start;
  int[] length=inputColVector.length;
  if (n == 0) {
    return;
  }
  outV.initBuffer();
  if (inputColVector.noNulls) {
    outV.noNulls=true;
    if (inputColVector.isRepeating) {
      outV.isRepeating=true;
      outV.setConcat(0,vector[0],start[0],length[0],value,0,value.length);
    }
 else     if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        outV.setConcat(i,vector[i],start[i],length[i],value,0,value.length);
      }
      outV.isRepeating=false;
    }
 else {
      for (int i=0; i != n; i++) {
        outV.setConcat(i,vector[i],start[i],length[i],value,0,value.length);
      }
      outV.isRepeating=false;
    }
  }
 else {
    outV.noNulls=false;
    if (inputColVector.isRepeating) {
      outV.isRepeating=true;
      outV.isNull[0]=inputColVector.isNull[0];
      if (!inputColVector.isNull[0]) {
        outV.setConcat(0,vector[0],start[0],length[0],value,0,value.length);
      }
    }
 else     if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        if (!inputColVector.isNull[i]) {
          outV.setConcat(i,vector[i],start[i],length[i],value,0,value.length);
        }
        outV.isNull[i]=inputColVector.isNull[i];
      }
      outV.isRepeating=false;
    }
 else {
      for (int i=0; i != n; i++) {
        if (!inputColVector.isNull[i]) {
          outV.setConcat(i,vector[i],start[i],length[i],value,0,value.length);
        }
        outV.isNull[i]=inputColVector.isNull[i];
      }
      outV.isRepeating=false;
    }
  }
}
