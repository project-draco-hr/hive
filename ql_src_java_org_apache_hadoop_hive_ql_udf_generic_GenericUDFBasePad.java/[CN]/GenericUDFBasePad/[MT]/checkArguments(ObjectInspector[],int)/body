{
  if (arguments[i].getCategory() != ObjectInspector.Category.PRIMITIVE) {
    throw new UDFArgumentTypeException(i + 1,"Only primitive type arguments are accepted but " + arguments[i].getTypeName() + " is passed. as  arguments");
  }
  PrimitiveCategory inputType=((PrimitiveObjectInspector)arguments[i]).getPrimitiveCategory();
  Converter converter;
switch (inputType) {
case STRING:
case CHAR:
case VARCHAR:
    converter=ObjectInspectorConverters.getConverter((PrimitiveObjectInspector)arguments[i],PrimitiveObjectInspectorFactory.writableStringObjectInspector);
  break;
case INT:
case SHORT:
case BYTE:
converter=ObjectInspectorConverters.getConverter((PrimitiveObjectInspector)arguments[i],PrimitiveObjectInspectorFactory.writableIntObjectInspector);
break;
default :
throw new UDFArgumentTypeException(i + 1,udfName + " only takes STRING/CHAR/INT/SHORT/BYTE/VARCHAR types as " + (i + 1)+ "-ths argument, got "+ inputType);
}
return converter;
}
