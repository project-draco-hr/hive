{
  int batchSize=batch.size;
  if (batchSize == 0) {
    return;
  }
  inputExpression.evaluate(batch);
  TimestampColumnVector inputColVector=(TimestampColumnVector)batch.cols[this.inputExpression.getOutputColumn()];
  if (inputColVector.noNulls) {
    if (inputColVector.isRepeating) {
      iterateNoNullsRepeatingWithAggregationSelection(aggregationBufferSets,bufferIndex,inputColVector.getDouble(0),batchSize);
    }
 else {
      if (batch.selectedInUse) {
        iterateNoNullsSelectionWithAggregationSelection(aggregationBufferSets,bufferIndex,inputColVector,batch.selected,batchSize);
      }
 else {
        iterateNoNullsWithAggregationSelection(aggregationBufferSets,bufferIndex,inputColVector,batchSize);
      }
    }
  }
 else {
    if (inputColVector.isRepeating) {
      if (batch.selectedInUse) {
        iterateHasNullsRepeatingSelectionWithAggregationSelection(aggregationBufferSets,bufferIndex,inputColVector.getDouble(0),batchSize,batch.selected,inputColVector.isNull);
      }
 else {
        iterateHasNullsRepeatingWithAggregationSelection(aggregationBufferSets,bufferIndex,inputColVector.getDouble(0),batchSize,inputColVector.isNull);
      }
    }
 else {
      if (batch.selectedInUse) {
        iterateHasNullsSelectionWithAggregationSelection(aggregationBufferSets,bufferIndex,inputColVector,batchSize,batch.selected,inputColVector.isNull);
      }
 else {
        iterateHasNullsWithAggregationSelection(aggregationBufferSets,bufferIndex,inputColVector,batchSize,inputColVector.isNull);
      }
    }
  }
}
