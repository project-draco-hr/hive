{
  dropDB(msClient,dbName3);
  dropDB(msClient,dbName4);
  String dbLocation=dbFolder.newFolder(dbName3).getCanonicalPath() + ".db";
  dbLocation=dbLocation.replaceAll("\\\\","/");
  String[] colNames="key1,key2,data".split(",");
  String[] colTypes="string,int,string".split(",");
  String[] bucketNames="key1,key2".split(",");
  int bucketCount=4;
  createDbAndTable(driver,dbName3,tblName3,null,colNames,colTypes,bucketNames,null,dbLocation,bucketCount);
  String dbLocation2=dbFolder.newFolder(dbName4).getCanonicalPath() + ".db";
  dbLocation2=dbLocation2.replaceAll("\\\\","/");
  String[] colNames2="key3,key4,data2".split(",");
  String[] colTypes2="string,int,string".split(",");
  String[] bucketNames2="key3,key4".split(",");
  createDbAndTable(driver,dbName4,tblName4,null,colNames2,colTypes2,bucketNames2,null,dbLocation2,bucketCount);
  HiveEndPoint endPt=new HiveEndPoint(metaStoreURI,dbName3,tblName3,null);
  DelimitedInputWriter writer=new DelimitedInputWriter(colNames,",",endPt);
  StreamingConnection connection=endPt.newConnection(false);
  TransactionBatch txnBatch=connection.fetchTransactionBatch(2,writer);
  txnBatch.beginNextTransaction();
  txnBatch.write("name0,1,Hello streaming".getBytes());
  txnBatch.write("name2,2,Welcome to streaming".getBytes());
  txnBatch.write("name4,2,more Streaming unlimited".getBytes());
  txnBatch.write("name5,2,even more Streaming unlimited".getBytes());
  txnBatch.commit();
  PrintStream origErr=System.err;
  ByteArrayOutputStream myErr=new ByteArrayOutputStream();
  System.setErr(new PrintStream(myErr));
  FileDump.main(new String[]{dbLocation});
  System.err.flush();
  System.setErr(origErr);
  String errDump=new String(myErr.toByteArray());
  Assert.assertEquals(false,errDump.contains("file(s) are corrupted"));
  Assert.assertEquals(false,errDump.contains("is still open for writes."));
  HiveEndPoint endPt2=new HiveEndPoint(metaStoreURI,dbName4,tblName4,null);
  DelimitedInputWriter writer2=new DelimitedInputWriter(colNames2,",",endPt2);
  StreamingConnection connection2=endPt2.newConnection(false);
  TransactionBatch txnBatch2=connection2.fetchTransactionBatch(2,writer2);
  txnBatch2.beginNextTransaction();
  txnBatch2.write("name5,2,fact3".getBytes());
  txnBatch2.write("name8,2,fact3".getBytes());
  txnBatch2.write("name0,1,fact1".getBytes());
  txnBatch2.commit();
  origErr=System.err;
  myErr=new ByteArrayOutputStream();
  System.setErr(new PrintStream(myErr));
  FileDump.main(new String[]{dbLocation});
  System.out.flush();
  System.err.flush();
  System.setErr(origErr);
  errDump=new String(myErr.toByteArray());
  Assert.assertEquals(false,errDump.contains("Exception"));
  Assert.assertEquals(false,errDump.contains("file(s) are corrupted"));
  Assert.assertEquals(false,errDump.contains("is still open for writes."));
}
