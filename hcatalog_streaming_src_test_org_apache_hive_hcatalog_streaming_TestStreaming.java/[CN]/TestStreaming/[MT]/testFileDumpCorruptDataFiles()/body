{
  dropDB(msClient,dbName3);
  String dbLocation=dbFolder.newFolder(dbName3).getCanonicalPath() + ".db";
  dbLocation=dbLocation.replaceAll("\\\\","/");
  String[] colNames="key1,key2,data".split(",");
  String[] colTypes="string,int,string".split(",");
  String[] bucketNames="key1,key2".split(",");
  int bucketCount=4;
  createDbAndTable(driver,dbName3,tblName3,null,colNames,colTypes,bucketNames,null,dbLocation,bucketCount);
  HiveEndPoint endPt=new HiveEndPoint(metaStoreURI,dbName3,tblName3,null);
  StreamingConnection connection=endPt.newConnection(false,"UT_" + Thread.currentThread().getName());
  DelimitedInputWriter writer=new DelimitedInputWriter(colNames,",",endPt,connection);
  TransactionBatch txnBatch=connection.fetchTransactionBatch(2,writer);
  txnBatch.beginNextTransaction();
  txnBatch.write("name0,1,Hello streaming".getBytes());
  txnBatch.write("name2,2,Welcome to streaming".getBytes());
  txnBatch.write("name4,2,more Streaming unlimited".getBytes());
  txnBatch.write("name5,2,even more Streaming unlimited".getBytes());
  txnBatch.commit();
  Path path=new Path(dbLocation);
  Collection<String> files=FileDump.getAllFilesInPath(path,conf);
  int readableFooter=-1;
  for (  String file : files) {
    if (file.contains("bucket_00000")) {
      corruptDataFile(file,conf,Integer.MIN_VALUE);
    }
 else     if (file.contains("bucket_00001")) {
      corruptDataFile(file,conf,-1);
    }
 else     if (file.contains("bucket_00002")) {
      Path bPath=new Path(file);
      FileSystem fs=bPath.getFileSystem(conf);
      FileStatus fileStatus=fs.getFileStatus(bPath);
      readableFooter=(int)fileStatus.getLen();
      corruptDataFile(file,conf,2);
    }
 else     if (file.contains("bucket_00003")) {
      corruptDataFile(file,conf,100);
    }
  }
  PrintStream origErr=System.err;
  ByteArrayOutputStream myErr=new ByteArrayOutputStream();
  System.setErr(new PrintStream(myErr));
  FileDump.main(new String[]{dbLocation});
  System.err.flush();
  System.setErr(origErr);
  String errDump=new String(myErr.toByteArray());
  Assert.assertEquals(false,errDump.contains("Exception"));
  Assert.assertEquals(true,errDump.contains("4 file(s) are corrupted"));
  Assert.assertEquals(false,errDump.contains("is still open for writes."));
  origErr=System.err;
  myErr=new ByteArrayOutputStream();
  System.setErr(new PrintStream(myErr));
  FileDump.main(new String[]{dbLocation,"--recover","--skip-dump"});
  System.err.flush();
  System.setErr(origErr);
  errDump=new String(myErr.toByteArray());
  Assert.assertEquals(true,errDump.contains("bucket_00000 recovered successfully!"));
  Assert.assertEquals(true,errDump.contains("No readable footers found. Creating empty orc file."));
  Assert.assertEquals(true,errDump.contains("bucket_00001 recovered successfully!"));
  Assert.assertEquals(true,errDump.contains("bucket_00002 recovered successfully!"));
  Assert.assertEquals(true,errDump.contains("Readable footerOffsets: [" + readableFooter + "]"));
  Assert.assertEquals(true,errDump.contains("bucket_00003 recovered successfully!"));
  Assert.assertEquals(false,errDump.contains("Exception"));
  Assert.assertEquals(false,errDump.contains("is still open for writes."));
  origErr=System.err;
  myErr=new ByteArrayOutputStream();
  System.setErr(new PrintStream(myErr));
  FileDump.main(new String[]{dbLocation});
  System.err.flush();
  System.setErr(origErr);
  errDump=new String(myErr.toByteArray());
  Assert.assertEquals(false,errDump.contains("Exception"));
  Assert.assertEquals(false,errDump.contains("file(s) are corrupted"));
  Assert.assertEquals(false,errDump.contains("is still open for writes."));
  files=FileDump.getAllFilesInPath(path,conf);
  for (  String file : files) {
    Assert.assertEquals(false,file.contains("_flush_length"));
  }
  txnBatch.close();
}
