{
  int bucketCount=100;
  String dbUri="raw://" + new Path(dbFolder.newFolder().toString()).toUri().toString();
  String tbl1="validation1";
  String tbl2="validation2";
  String tableLoc="'" + dbUri + Path.SEPARATOR+ tbl1+ "'";
  String tableLoc2="'" + dbUri + Path.SEPARATOR+ tbl2+ "'";
  runDDL(driver,"create database testBucketing3");
  runDDL(driver,"use testBucketing3");
  runDDL(driver,"create table " + tbl1 + " ( key1 string, data string ) clustered by ( key1 ) into "+ bucketCount+ " buckets  stored as orc  location "+ tableLoc);
  runDDL(driver,"create table " + tbl2 + " ( key1 string, data string ) clustered by ( key1 ) into "+ bucketCount+ " buckets  stored as orc  location "+ tableLoc2+ " TBLPROPERTIES ('transactional'='false')");
  try {
    HiveEndPoint endPt=new HiveEndPoint(metaStoreURI,"testBucketing3","validation1",null);
    endPt.newConnection(false);
    Assert.assertTrue("InvalidTable exception was not thrown",false);
  }
 catch (  InvalidTable e) {
  }
  try {
    HiveEndPoint endPt=new HiveEndPoint(metaStoreURI,"testBucketing3","validation2",null);
    endPt.newConnection(false);
    Assert.assertTrue("InvalidTable exception was not thrown",false);
  }
 catch (  InvalidTable e) {
  }
}
