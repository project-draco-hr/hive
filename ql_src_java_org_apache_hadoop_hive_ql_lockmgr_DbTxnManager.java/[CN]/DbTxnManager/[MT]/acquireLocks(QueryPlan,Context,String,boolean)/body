{
  init();
  getLockManager();
  boolean atLeastOneLock=false;
  LockRequestBuilder rqstBuilder=new LockRequestBuilder();
  LOG.info("Setting lock request transaction to " + txnId + " for queryId="+ plan.getQueryId());
  rqstBuilder.setTransactionId(txnId).setUser(username);
  for (  ReadEntity input : plan.getInputs()) {
    if (!input.needsLock() || input.isUpdateOrDelete()) {
      continue;
    }
    LockComponentBuilder compBuilder=new LockComponentBuilder();
    compBuilder.setShared();
    Table t=null;
switch (input.getType()) {
case DATABASE:
      compBuilder.setDbName(input.getDatabase().getName());
    break;
case TABLE:
  t=input.getTable();
compBuilder.setDbName(t.getDbName());
compBuilder.setTableName(t.getTableName());
break;
case PARTITION:
case DUMMYPARTITION:
compBuilder.setPartitionName(input.getPartition().getName());
t=input.getPartition().getTable();
compBuilder.setDbName(t.getDbName());
compBuilder.setTableName(t.getTableName());
break;
default :
continue;
}
LockComponent comp=compBuilder.build();
LOG.debug("Adding lock component to lock request " + comp.toString());
rqstBuilder.addLockComponent(comp);
atLeastOneLock=true;
}
for (WriteEntity output : plan.getOutputs()) {
if (output.getType() == Entity.Type.DFS_DIR || output.getType() == Entity.Type.LOCAL_DIR) {
continue;
}
LockComponentBuilder compBuilder=new LockComponentBuilder();
Table t=null;
LOG.debug("output is null " + (output == null));
switch (output.getWriteType()) {
case DDL_EXCLUSIVE:
case INSERT_OVERWRITE:
compBuilder.setExclusive();
break;
case INSERT:
case DDL_SHARED:
compBuilder.setShared();
break;
case UPDATE:
case DELETE:
compBuilder.setSemiShared();
break;
case DDL_NO_LOCK:
continue;
default :
throw new RuntimeException("Unknown write type " + output.getWriteType().toString());
}
switch (output.getType()) {
case DATABASE:
compBuilder.setDbName(output.getDatabase().getName());
break;
case TABLE:
case DUMMYPARTITION:
t=output.getTable();
compBuilder.setDbName(t.getDbName());
compBuilder.setTableName(t.getTableName());
break;
case PARTITION:
compBuilder.setPartitionName(output.getPartition().getName());
t=output.getPartition().getTable();
compBuilder.setDbName(t.getDbName());
compBuilder.setTableName(t.getTableName());
break;
default :
continue;
}
LockComponent comp=compBuilder.build();
LOG.debug("Adding lock component to lock request " + comp.toString());
rqstBuilder.addLockComponent(comp);
atLeastOneLock=true;
}
if (!atLeastOneLock) {
LOG.debug("No locks needed for queryId" + plan.getQueryId());
return null;
}
List<HiveLock> locks=new ArrayList<HiveLock>(1);
LockState lockState=lockMgr.lock(rqstBuilder.build(),plan.getQueryId(),isBlocking,locks);
ctx.setHiveLocks(locks);
return lockState;
}
