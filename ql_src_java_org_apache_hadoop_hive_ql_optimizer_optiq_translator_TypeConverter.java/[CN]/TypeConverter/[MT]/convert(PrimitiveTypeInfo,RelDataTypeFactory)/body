{
  RelDataType convertedType=null;
switch (type.getPrimitiveCategory()) {
case VOID:
    convertedType=dtFactory.createSqlType(SqlTypeName.NULL);
  break;
case BOOLEAN:
convertedType=dtFactory.createSqlType(SqlTypeName.BOOLEAN);
break;
case BYTE:
convertedType=dtFactory.createSqlType(SqlTypeName.TINYINT);
break;
case SHORT:
convertedType=dtFactory.createSqlType(SqlTypeName.SMALLINT);
break;
case INT:
convertedType=dtFactory.createSqlType(SqlTypeName.INTEGER);
break;
case LONG:
convertedType=dtFactory.createSqlType(SqlTypeName.BIGINT);
break;
case FLOAT:
convertedType=dtFactory.createSqlType(SqlTypeName.FLOAT);
break;
case DOUBLE:
convertedType=dtFactory.createSqlType(SqlTypeName.DOUBLE);
break;
case STRING:
convertedType=dtFactory.createSqlType(SqlTypeName.VARCHAR,RelDataType.PRECISION_NOT_SPECIFIED);
break;
case DATE:
convertedType=dtFactory.createSqlType(SqlTypeName.DATE);
break;
case TIMESTAMP:
convertedType=dtFactory.createSqlType(SqlTypeName.TIMESTAMP);
break;
case BINARY:
convertedType=dtFactory.createSqlType(SqlTypeName.BINARY);
break;
case DECIMAL:
DecimalTypeInfo dtInf=(DecimalTypeInfo)type;
convertedType=dtFactory.createSqlType(SqlTypeName.DECIMAL,dtInf.precision(),dtInf.scale());
break;
case VARCHAR:
convertedType=dtFactory.createSqlType(SqlTypeName.VARCHAR,((BaseCharTypeInfo)type).getLength());
break;
case CHAR:
convertedType=dtFactory.createSqlType(SqlTypeName.CHAR,((BaseCharTypeInfo)type).getLength());
break;
case UNKNOWN:
convertedType=dtFactory.createSqlType(SqlTypeName.OTHER);
break;
}
if (null == convertedType) {
throw new RuntimeException("Unsupported Type : " + type.getTypeName());
}
return convertedType;
}
