{
  Map<String,String> tableJobProperties=tableDesc.getJobProperties();
  String jobString=tableJobProperties.get(HCatConstants.HCAT_KEY_OUTPUT_INFO);
  try {
    OutputJobInfo outputJobInfo=(OutputJobInfo)HCatUtil.deserialize(jobString);
    HCatTableInfo tableInfo=outputJobInfo.getTableInfo();
    String qualifiedTableName=HBaseHCatStorageHandler.getFullyQualifiedName(tableInfo);
    jobProperties.put(HBaseConstants.PROPERTY_OUTPUT_TABLE_NAME_KEY,qualifiedTableName);
    Configuration jobConf=getConf();
    String txnString=outputJobInfo.getProperties().getProperty(HBaseConstants.PROPERTY_WRITE_TXN_KEY);
    if (txnString == null) {
      Configuration conf=addHbaseResources(jobConf);
      Transaction txn=HBaseRevisionManagerUtil.beginWriteTransaction(qualifiedTableName,tableInfo,conf);
      outputJobInfo.getProperties().setProperty(HBaseConstants.PROPERTY_WRITE_TXN_KEY,HCatUtil.serialize(txn));
      if (isBulkMode(outputJobInfo) && !(outputJobInfo.getProperties().containsKey(PROPERTY_INT_OUTPUT_LOCATION))) {
        String tableLocation=tableInfo.getTableLocation();
        String location=new Path(tableLocation,"REVISION_" + txn.getRevisionNumber()).toString();
        outputJobInfo.getProperties().setProperty(PROPERTY_INT_OUTPUT_LOCATION,location);
        jobProperties.put("mapred.output.dir",location);
      }
    }
    jobProperties.put(HCatConstants.HCAT_KEY_OUTPUT_INFO,HCatUtil.serialize(outputJobInfo));
    addHbaseResources(jobConf,jobProperties);
    addOutputDependencyJars(jobConf);
    jobProperties.put("tmpjars",jobConf.get("tmpjars"));
  }
 catch (  IOException e) {
    throw new IllegalStateException("Error while configuring job properties",e);
  }
}
