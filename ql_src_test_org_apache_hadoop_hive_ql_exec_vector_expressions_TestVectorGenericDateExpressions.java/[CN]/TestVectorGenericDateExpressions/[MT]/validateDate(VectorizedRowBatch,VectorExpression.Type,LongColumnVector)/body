{
  VectorExpression udf;
  if (colType == VectorExpression.Type.STRING) {
    udf=new VectorUDFDateString(0,1);
  }
 else   if (colType == VectorExpression.Type.TIMESTAMP) {
    udf=new VectorUDFDateTimestamp(0,1);
  }
 else {
    udf=new VectorUDFDateLong(0,1);
  }
  udf.setInputTypes(colType);
  udf.evaluate(batch);
  BytesColumnVector output=(BytesColumnVector)batch.cols[1];
  for (int i=0; i < size; i++) {
    String actual;
    if (output.isNull[i]) {
      actual=null;
    }
 else {
      try {
        actual=new String(output.vector[i],output.start[i],output.length[i],"UTF-8");
      }
 catch (      UnsupportedEncodingException e) {
        throw new RuntimeException(e);
      }
    }
    if (date.isNull[i]) {
      Assert.assertTrue(output.isNull[i]);
    }
 else {
      String expected=formatter.format(new Date(DateWritable.daysToMillis((int)date.vector[i])));
      Assert.assertEquals(expected,actual);
    }
  }
}
