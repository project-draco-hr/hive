{
  for (  VectorExpression.Type colType1 : dateTimestampStringTypes) {
    for (    VectorExpression.Type colType2 : dateTimestampStringTypes) {
      LongColumnVector date1=newRandomLongColumnVector(10000,size);
      LongColumnVector date2=newRandomLongColumnVector(10000,size);
      LongColumnVector output=new LongColumnVector(size);
      VectorizedRowBatch batch=new VectorizedRowBatch(3,size);
      batch.cols[0]=castTo(date1,colType1);
      batch.cols[1]=castTo(date2,colType2);
      batch.cols[2]=output;
      validateDateDiff(batch,date1,date2,colType1,colType2);
      TestVectorizedRowBatch.addRandomNulls(date1);
      batch.cols[0]=castTo(date1,colType1);
      validateDateDiff(batch,date1,date2,colType1,colType2);
      TestVectorizedRowBatch.addRandomNulls(date2);
      batch.cols[1]=castTo(date2,colType2);
      validateDateDiff(batch,date1,date2,colType1,colType2);
    }
  }
  VectorExpression udf=new VectorUDFDateDiffColCol(0,1,2);
  VectorizedRowBatch batch=new VectorizedRowBatch(3,1);
  BytesColumnVector bcv;
  byte[] bytes="error".getBytes(utf8);
  udf.setInputTypes(VectorExpression.Type.STRING,VectorExpression.Type.TIMESTAMP);
  batch.cols[0]=new BytesColumnVector(1);
  batch.cols[1]=new TimestampColumnVector(1);
  batch.cols[2]=new LongColumnVector(1);
  bcv=(BytesColumnVector)batch.cols[0];
  bcv.vector[0]=bytes;
  bcv.start[0]=0;
  bcv.length[0]=bytes.length;
  udf.evaluate(batch);
  Assert.assertEquals(batch.cols[2].isNull[0],true);
  udf.setInputTypes(VectorExpression.Type.TIMESTAMP,VectorExpression.Type.STRING);
  batch.cols[0]=new TimestampColumnVector(1);
  batch.cols[1]=new BytesColumnVector(1);
  batch.cols[2]=new LongColumnVector(1);
  bcv=(BytesColumnVector)batch.cols[1];
  bcv.vector[0]=bytes;
  bcv.start[0]=0;
  bcv.length[0]=bytes.length;
  udf.evaluate(batch);
  Assert.assertEquals(batch.cols[2].isNull[0],true);
}
