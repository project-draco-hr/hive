{
  MatchStats matchStats;
  Map<AggrColStats,MatchStats> candidateMatchStats=new HashMap<AggrColStats,MatchStats>();
  AggrColStats bestMatch=null;
  int bestMatchHits=0;
  int numPartsRequested=partNames.size();
  for (  AggrColStats candidate : candidates) {
    if ((float)Math.abs((candidate.getNumPartsCached() - numPartsRequested) / numPartsRequested) > maxVariance) {
      continue;
    }
    if (isExpired(candidate)) {
      continue;
    }
 else {
      candidateMatchStats.put(candidate,new MatchStats(0,0));
    }
  }
  int maxMisses=(int)maxVariance * numPartsRequested;
  for (  String partName : partNames) {
    for (Iterator<Map.Entry<AggrColStats,MatchStats>> iterator=candidateMatchStats.entrySet().iterator(); iterator.hasNext(); ) {
      Map.Entry<AggrColStats,MatchStats> entry=iterator.next();
      AggrColStats candidate=entry.getKey();
      matchStats=entry.getValue();
      if (candidate.getBloomFilter().test(partName.getBytes())) {
        ++matchStats.hits;
      }
 else {
        ++matchStats.misses;
      }
      if (matchStats.misses > maxMisses) {
        iterator.remove();
        continue;
      }
      if (matchStats.hits > bestMatchHits) {
        bestMatch=candidate;
      }
    }
  }
  if (bestMatch != null) {
    bestMatch.updateLastAccessTime();
  }
  return bestMatch;
}
