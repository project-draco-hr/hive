{
  Configuration conf=new Configuration();
  MockFileSystem fs=new MockFileSystem(conf,new MockFile("mock:/tbl/part1/base_5/bucket_0",500,new byte[0]),new MockFile("mock:/tbl/part1/base_10/bucket_0",500,new byte[0]),new MockFile("mock:/tbl/part1/base_25/bucket_0",500,new byte[0]),new MockFile("mock:/tbl/part1/delta_98_100/bucket_0",500,new byte[0]),new MockFile("mock:/tbl/part1/base_100/bucket_0",500,new byte[0]),new MockFile("mock:/tbl/part1/delta_120_130/bucket_0",500,new byte[0]),new MockFile("mock:/tbl/part1/base_200/bucket_0",500,new byte[0]));
  Path part=new MockPath(fs,"/tbl/part1");
  AcidUtils.Directory dir=AcidUtils.getAcidState(part,conf,new ValidReadTxnList("150:" + Long.MAX_VALUE + ":"));
  assertEquals("mock:/tbl/part1/base_100",dir.getBaseDirectory().toString());
  assertEquals(1,dir.getCurrentDirectories().size());
  assertEquals("mock:/tbl/part1/delta_120_130",dir.getCurrentDirectories().get(0).getPath().toString());
  List<FileStatus> obsoletes=dir.getObsolete();
  assertEquals(4,obsoletes.size());
  assertEquals("mock:/tbl/part1/base_10",obsoletes.get(0).getPath().toString());
  assertEquals("mock:/tbl/part1/base_25",obsoletes.get(1).getPath().toString());
  assertEquals("mock:/tbl/part1/base_5",obsoletes.get(2).getPath().toString());
  assertEquals("mock:/tbl/part1/delta_98_100",obsoletes.get(3).getPath().toString());
  assertEquals(0,dir.getOriginalFiles().size());
  dir=AcidUtils.getAcidState(part,conf,new ValidReadTxnList("10:" + Long.MAX_VALUE + ":"));
  assertEquals("mock:/tbl/part1/base_10",dir.getBaseDirectory().toString());
  assertEquals(0,dir.getCurrentDirectories().size());
  obsoletes=dir.getObsolete();
  assertEquals(1,obsoletes.size());
  assertEquals("mock:/tbl/part1/base_5",obsoletes.get(0).getPath().toString());
  assertEquals(0,dir.getOriginalFiles().size());
  dir=AcidUtils.getAcidState(part,conf,new ValidReadTxnList("150:121:99:121"));
  assertEquals("mock:/tbl/part1/base_100",dir.getBaseDirectory().toString());
  assertEquals(1,dir.getCurrentDirectories().size());
  assertEquals("mock:/tbl/part1/delta_120_130",dir.getCurrentDirectories().get(0).getPath().toString());
  obsoletes=dir.getObsolete();
  assertEquals(4,obsoletes.size());
  assertEquals("mock:/tbl/part1/base_10",obsoletes.get(0).getPath().toString());
  assertEquals("mock:/tbl/part1/base_25",obsoletes.get(1).getPath().toString());
  assertEquals("mock:/tbl/part1/base_5",obsoletes.get(2).getPath().toString());
  assertEquals("mock:/tbl/part1/delta_98_100",obsoletes.get(3).getPath().toString());
  boolean gotException=false;
  try {
    dir=AcidUtils.getAcidState(part,conf,new ValidReadTxnList("125:5:5"));
  }
 catch (  IOException e) {
    gotException=true;
    Assert.assertEquals("Not enough history available for (125,5).  Oldest available base: " + "mock:/tbl/part1/base_5",e.getMessage());
  }
  Assert.assertTrue("Expected exception",gotException);
  fs=new MockFileSystem(conf,new MockFile("mock:/tbl/part1/delta_1_10/bucket_0",500,new byte[0]),new MockFile("mock:/tbl/part1/delta_12_25/bucket_0",500,new byte[0]),new MockFile("mock:/tbl/part1/base_25/bucket_0",500,new byte[0]),new MockFile("mock:/tbl/part1/base_100/bucket_0",500,new byte[0]));
  part=new MockPath(fs,"/tbl/part1");
  try {
    gotException=false;
    dir=AcidUtils.getAcidState(part,conf,new ValidReadTxnList("150:7:7"));
  }
 catch (  IOException e) {
    gotException=true;
    Assert.assertEquals("Not enough history available for (150,7).  Oldest available base: " + "mock:/tbl/part1/base_25",e.getMessage());
  }
  Assert.assertTrue("Expected exception",gotException);
  fs=new MockFileSystem(conf,new MockFile("mock:/tbl/part1/delta_2_10/bucket_0",500,new byte[0]),new MockFile("mock:/tbl/part1/base_25/bucket_0",500,new byte[0]),new MockFile("mock:/tbl/part1/base_100/bucket_0",500,new byte[0]));
  part=new MockPath(fs,"/tbl/part1");
  try {
    gotException=false;
    dir=AcidUtils.getAcidState(part,conf,new ValidReadTxnList("150:7:7"));
  }
 catch (  IOException e) {
    gotException=true;
    Assert.assertEquals("Not enough history available for (150,7).  Oldest available base: " + "mock:/tbl/part1/base_25",e.getMessage());
  }
  Assert.assertTrue("Expected exception",gotException);
  fs=new MockFileSystem(conf,new MockFile("mock:/tbl/part1/base_" + Long.MIN_VALUE + "/bucket_0",500,new byte[0]),new MockFile("mock:/tbl/part1/delta_1_1/bucket_0",500,new byte[0]),new MockFile("mock:/tbl/part1/base_100/bucket_0",500,new byte[0]));
  part=new MockPath(fs,"/tbl/part1");
  dir=AcidUtils.getAcidState(part,conf,new ValidReadTxnList("1:" + Long.MAX_VALUE + ":"));
  assertEquals("mock:/tbl/part1/base_" + Long.MIN_VALUE,dir.getBaseDirectory().toString());
  assertEquals(1,dir.getCurrentDirectories().size());
  assertEquals("mock:/tbl/part1/delta_1_1",dir.getCurrentDirectories().get(0).getPath().toString());
  assertEquals(0,dir.getObsolete().size());
}
