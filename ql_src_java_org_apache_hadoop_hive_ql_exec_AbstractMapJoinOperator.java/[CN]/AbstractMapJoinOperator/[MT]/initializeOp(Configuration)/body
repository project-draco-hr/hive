{
  super.initializeOp(hconf);
  numMapRowsRead=0;
  firstRow=true;
  int tagLen=conf.getTagLength();
  joinKeys=new List[tagLen];
  JoinUtil.populateJoinKeyValue(joinKeys,conf.getKeys(),NOTSKIPBIGTABLE);
  joinKeysObjectInspectors=JoinUtil.getObjectInspectorsFromEvaluators(joinKeys,inputObjInspectors,NOTSKIPBIGTABLE,tagLen);
  joinKeysStandardObjectInspectors=JoinUtil.getStandardObjectInspectors(joinKeysObjectInspectors,NOTSKIPBIGTABLE,tagLen);
  posBigTable=(byte)conf.getPosBigTable();
  emptyList=new RowContainer<ArrayList<Object>>(1,hconf,reporter);
  RowContainer bigPosRC=JoinUtil.getRowContainer(hconf,rowContainerStandardObjectInspectors[posBigTable],posBigTable,joinCacheSize,spillTableDesc,conf,!hasFilter(posBigTable),reporter);
  storage[posBigTable]=bigPosRC;
  List<? extends StructField> structFields=((StructObjectInspector)outputObjInspector).getAllStructFieldRefs();
  if (conf.getOutputColumnNames().size() < structFields.size()) {
    List<ObjectInspector> structFieldObjectInspectors=new ArrayList<ObjectInspector>();
    for (    Byte alias : order) {
      int sz=conf.getExprs().get(alias).size();
      List<Integer> retained=conf.getRetainList().get(alias);
      for (int i=0; i < sz; i++) {
        int pos=retained.get(i);
        structFieldObjectInspectors.add(structFields.get(pos).getFieldObjectInspector());
      }
    }
    outputObjInspector=ObjectInspectorFactory.getStandardStructObjectInspector(conf.getOutputColumnNames(),structFieldObjectInspectors);
  }
  initializeChildren(hconf);
}
