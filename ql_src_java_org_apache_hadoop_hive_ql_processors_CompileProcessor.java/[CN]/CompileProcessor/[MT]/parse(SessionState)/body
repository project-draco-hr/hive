{
  if (ss != null) {
    command=new VariableSubstitution(new HiveVariableSource(){
      @Override public Map<String,String> getHiveVariable(){
        return SessionState.get().getHiveVariables();
      }
    }
).substitute(ss.getConf(),command);
  }
  if (command == null || command.length() == 0) {
    throw new CompileProcessorException("Command was empty");
  }
  StringBuilder toCompile=new StringBuilder();
  int startPosition=0;
  int endPosition=-1;
  while (command.charAt(startPosition++) != '`' && startPosition < command.length()) {
  }
  if (startPosition == command.length()) {
    throw new CompileProcessorException(SYNTAX);
  }
  for (int i=startPosition; i < command.length(); i++) {
    if (command.charAt(i) == '\\') {
      toCompile.append(command.charAt(i + 1));
      i=i + 1;
      continue;
    }
 else     if (command.charAt(i) == '`') {
      endPosition=i;
      break;
    }
 else {
      toCompile.append(command.charAt(i));
    }
  }
  if (endPosition == -1) {
    throw new CompileProcessorException(SYNTAX);
  }
  StringTokenizer st=new StringTokenizer(command.substring(endPosition + 1)," ");
  if (st.countTokens() != 4) {
    throw new CompileProcessorException(SYNTAX);
  }
  String shouldBeAs=st.nextToken();
  if (!shouldBeAs.equalsIgnoreCase(AS)) {
    throw new CompileProcessorException(SYNTAX);
  }
  setLang(st.nextToken());
  if (!lang.equalsIgnoreCase(GROOVY)) {
    throw new CompileProcessorException("Can not compile " + lang + ". Hive can only compile "+ GROOVY);
  }
  String shouldBeNamed=st.nextToken();
  if (!shouldBeNamed.equalsIgnoreCase(NAMED)) {
    throw new CompileProcessorException(SYNTAX);
  }
  setNamed(st.nextToken());
  setCode(toCompile.toString());
}
