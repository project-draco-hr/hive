{
  if (childOperatorsArray.length == 0) {
    throw new HiveException("Expected number of children is at least 1. Found : " + childOperatorsArray.length);
  }
  newTagToOldTag=toArray(conf.getNewTagToOldTag());
  newTagToChildIndex=toArray(conf.getNewTagToChildIndex());
  childInputObjInspectors=new ObjectInspector[childOperators.size()][];
  cntrs=new long[newTagToOldTag.length];
  nextCntrs=new long[newTagToOldTag.length];
  try {
    for (int i=0; i < newTagToOldTag.length; i++) {
      int newTag=i;
      int oldTag=newTagToOldTag[i];
      int childIndex=newTagToChildIndex[newTag];
      cntrs[newTag]=0;
      nextCntrs[newTag]=0;
      TableDesc keyTableDesc=conf.getKeysSerializeInfos().get(newTag);
      Deserializer inputKeyDeserializer=ReflectionUtils.newInstance(keyTableDesc.getDeserializerClass(),null);
      SerDeUtils.initializeSerDe(inputKeyDeserializer,null,keyTableDesc.getProperties(),null);
      TableDesc valueTableDesc=conf.getValuesSerializeInfos().get(newTag);
      Deserializer inputValueDeserializer=ReflectionUtils.newInstance(valueTableDesc.getDeserializerClass(),null);
      SerDeUtils.initializeSerDe(inputValueDeserializer,null,valueTableDesc.getProperties(),null);
      List<ObjectInspector> oi=new ArrayList<ObjectInspector>();
      oi.add(inputKeyDeserializer.getObjectInspector());
      oi.add(inputValueDeserializer.getObjectInspector());
      int childParentsCount=conf.getChildIndexToOriginalNumParents().get(childIndex);
      if (childInputObjInspectors[childIndex] == null) {
        childInputObjInspectors[childIndex]=new ObjectInspector[childParentsCount];
      }
      ObjectInspector[] ois=childInputObjInspectors[childIndex];
      ois[oldTag]=ObjectInspectorFactory.getStandardStructObjectInspector(Utilities.reduceFieldNameList,oi);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  childrenDone=0;
  newChildOperatorsTag=new int[childOperators.size()][];
  for (int i=0; i < childOperators.size(); i++) {
    Operator<? extends OperatorDesc> child=childOperators.get(i);
    List<Integer> childOperatorTags=new ArrayList<Integer>();
    if (child instanceof MuxOperator) {
      int index=0;
      for (      Operator<? extends OperatorDesc> parent : child.getParentOperators()) {
        if (this == parent) {
          childOperatorTags.add(index);
        }
        index++;
      }
    }
 else {
      childOperatorTags.add(child.getParentOperators().indexOf(this));
    }
    newChildOperatorsTag[i]=toArray(childOperatorTags);
  }
  LOG.info("newChildOperatorsTag " + newChildOperatorsTag);
  initializeChildren(hconf);
}
