{
  runStatementOnDriver("set autocommit false");
  runStatementOnDriver("start transaction");
  runStatementOnDriver("delete from " + Table.ACIDTBL + " where a = 5");
  hiveConf.setTimeVar(HiveConf.ConfVars.HIVE_TIMEDOUT_TXN_REAPER_START,0,TimeUnit.SECONDS);
  hiveConf.setTimeVar(HiveConf.ConfVars.HIVE_TXN_TIMEOUT,2,TimeUnit.MILLISECONDS);
  AcidHouseKeeperService houseKeeperService=new AcidHouseKeeperService();
  TestTxnCommands2.runHouseKeeperService(houseKeeperService,hiveConf);
  CommandProcessorResponse cpr=runStatementOnDriverNegative("delete from " + Table.ACIDTBL + " where a = 5");
  Assert.assertTrue("Actual: " + cpr.getErrorMessage(),cpr.getErrorMessage().contains("Transaction manager has aborted the transaction txnid:1"));
  hiveConf.setTimeVar(HiveConf.ConfVars.HIVE_TXN_TIMEOUT,1,TimeUnit.SECONDS);
  runStatementOnDriver("start transaction");
  runStatementOnDriver("select count(*) from " + Table.ACIDTBL + " where a = 17");
  pause(750);
  TxnStore txnHandler=TxnUtils.getTxnStore(hiveConf);
  GetOpenTxnsInfoResponse txnsInfoResponse=txnHandler.getOpenTxnsInfo();
  Assert.assertEquals(2,txnsInfoResponse.getOpen_txns().size());
  TxnInfo txnInfo=null;
  for (  TxnInfo ti : txnsInfoResponse.getOpen_txns()) {
    if (ti.getState() == TxnState.OPEN) {
      txnInfo=ti;
      break;
    }
  }
  Assert.assertNotNull(txnInfo);
  Assert.assertEquals(2,txnInfo.getId());
  Assert.assertEquals(TxnState.OPEN,txnInfo.getState());
  String s=TxnDbUtil.queryToString("select TXN_STARTED, TXN_LAST_HEARTBEAT from TXNS where TXN_ID = " + txnInfo.getId(),false);
  String[] vals=s.split("\\s+");
  Assert.assertEquals("Didn't get expected timestamps",2,vals.length);
  long lastHeartbeat=Long.parseLong(vals[1]);
  Assert.assertNotEquals("Didn't see heartbeat happen",Long.parseLong(vals[0]),lastHeartbeat);
  ShowLocksResponse slr=txnHandler.showLocks(new ShowLocksRequest());
  TestDbTxnManager2.checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default",Table.ACIDTBL.name,null,slr.getLocks().get(0));
  pause(750);
  TestTxnCommands2.runHouseKeeperService(houseKeeperService,hiveConf);
  pause(750);
  slr=txnHandler.showLocks(new ShowLocksRequest());
  Assert.assertEquals("Unexpected lock count: " + slr,1,slr.getLocks().size());
  TestDbTxnManager2.checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default",Table.ACIDTBL.name,null,slr.getLocks().get(0));
  pause(750);
  TestTxnCommands2.runHouseKeeperService(houseKeeperService,hiveConf);
  slr=txnHandler.showLocks(new ShowLocksRequest());
  Assert.assertEquals("Unexpected lock count: " + slr,1,slr.getLocks().size());
  TestDbTxnManager2.checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default",Table.ACIDTBL.name,null,slr.getLocks().get(0));
  s=TxnDbUtil.queryToString("select TXN_STARTED, TXN_LAST_HEARTBEAT from TXNS where TXN_ID = " + txnInfo.getId(),false);
  vals=s.split("\\s+");
  Assert.assertEquals("Didn't get expected timestamps",2,vals.length);
  Assert.assertTrue("Heartbeat didn't progress: (old,new) (" + lastHeartbeat + ","+ vals[1]+ ")",lastHeartbeat < Long.parseLong(vals[1]));
  runStatementOnDriver("rollback");
  slr=txnHandler.showLocks(new ShowLocksRequest());
  Assert.assertEquals("Unexpected lock count",0,slr.getLocks().size());
}
