{
  int count=columnMapping.getCount();
  subRowToBatchCopiersByValue=new CopyRow[count];
  subRowToBatchCopiersByReference=new CopyRow[count];
  for (int i=0; i < count; i++) {
    int inputColumn=columnMapping.getInputColumns()[i];
    int outputColumn=columnMapping.getOutputColumns()[i];
    String typeName=columnMapping.getTypeNames()[i].toLowerCase();
    TypeInfo typeInfo=TypeInfoUtils.getTypeInfoFromTypeString(typeName);
    Type columnVectorType=VectorizationContext.getColumnVectorTypeFromTypeInfo(typeInfo);
    CopyRow copyRowByValue=null;
    CopyRow copyRowByReference=null;
switch (columnVectorType) {
case LONG:
      copyRowByValue=new LongCopyRow(inputColumn,outputColumn);
    break;
case DOUBLE:
  copyRowByValue=new DoubleCopyRow(inputColumn,outputColumn);
break;
case BYTES:
copyRowByValue=new BytesCopyRowByValue(inputColumn,outputColumn);
copyRowByReference=new BytesCopyRowByReference(inputColumn,outputColumn);
break;
case DECIMAL:
copyRowByValue=new DecimalCopyRow(inputColumn,outputColumn);
break;
default :
throw new HiveException("Unexpected column vector type " + columnVectorType);
}
subRowToBatchCopiersByValue[i]=copyRowByValue;
if (copyRowByReference == null) {
subRowToBatchCopiersByReference[i]=copyRowByValue;
}
 else {
subRowToBatchCopiersByReference[i]=copyRowByReference;
}
}
}
