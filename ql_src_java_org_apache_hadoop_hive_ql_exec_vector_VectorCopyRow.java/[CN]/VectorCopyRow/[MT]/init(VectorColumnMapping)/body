{
  int count=columnMapping.getCount();
  subRowToBatchCopiersByValue=new CopyRow[count];
  subRowToBatchCopiersByReference=new CopyRow[count];
  for (int i=0; i < count; i++) {
    int inputColumn=columnMapping.getInputColumns()[i];
    int outputColumn=columnMapping.getOutputColumns()[i];
    String typeName=columnMapping.getTypeNames()[i];
    CopyRow copyRowByValue=null;
    CopyRow copyRowByReference=null;
    if (VectorizationContext.isIntFamily(typeName) || VectorizationContext.isDatetimeFamily(typeName)) {
      copyRowByValue=new LongCopyRow(inputColumn,outputColumn);
    }
 else     if (VectorizationContext.isFloatFamily(typeName)) {
      copyRowByValue=new DoubleCopyRow(inputColumn,outputColumn);
    }
 else     if (VectorizationContext.isStringFamily(typeName)) {
      copyRowByValue=new BytesCopyRowByValue(inputColumn,outputColumn);
      copyRowByReference=new BytesCopyRowByReference(inputColumn,outputColumn);
    }
 else     if (VectorizationContext.decimalTypePattern.matcher(typeName).matches()) {
      copyRowByValue=new DecimalCopyRow(inputColumn,outputColumn);
    }
 else {
      throw new RuntimeException("Cannot allocate vector copy row for " + typeName);
    }
    subRowToBatchCopiersByValue[i]=copyRowByValue;
    if (copyRowByReference == null) {
      subRowToBatchCopiersByReference[i]=copyRowByValue;
    }
 else {
      subRowToBatchCopiersByReference[i]=copyRowByReference;
    }
  }
}
