{
  String testName="directModeAbortTest";
  Path methodTestDir=new Path(getTestDir(),testName);
  String databaseName=testName.toLowerCase();
  String dbDir=new Path(methodTestDir,"DB_" + testName).toString();
  String tableName=newTableName(testName).toLowerCase();
  String familyName="my_family";
  byte[] familyNameBytes=Bytes.toBytes(familyName);
  Configuration conf=new Configuration(allConf);
  conf.set(HCatConstants.HCAT_KEY_HIVE_CONF,HCatUtil.serialize(allConf.getAllProperties()));
  String dbquery="CREATE DATABASE IF NOT EXISTS " + databaseName + " LOCATION '"+ dbDir+ "'";
  String tableQuery="CREATE TABLE " + databaseName + "."+ tableName+ "(key int, english string, spanish string) STORED BY "+ "'org.apache.hcatalog.hbase.HBaseHCatStorageHandler'"+ "TBLPROPERTIES ("+ "'hbase.columns.mapping'=':key,"+ familyName+ ":english,"+ familyName+ ":spanish')";
  assertEquals(0,hcatDriver.run(dbquery).getResponseCode());
  assertEquals(0,hcatDriver.run(tableQuery).getResponseCode());
  String data[]={"1,english:ONE,spanish:UNO","2,english:TWO,spanish:DOS","3,english:THREE,spanish:TRES"};
  Path inputPath=new Path(methodTestDir,"mr_input");
  getFileSystem().mkdirs(inputPath);
  for (int i=0; i < data.length; i++) {
    FSDataOutputStream os=getFileSystem().create(new Path(inputPath,"inputFile" + i + ".txt"));
    os.write(Bytes.toBytes(data[i] + "\n"));
    os.close();
  }
  Path workingDir=new Path(methodTestDir,"mr_abort");
  OutputJobInfo outputJobInfo=OutputJobInfo.create(databaseName,tableName,null);
  Job job=configureJob(testName,conf,workingDir,MapWriteAbortTransaction.class,outputJobInfo,inputPath);
  job.waitForCompletion(true);
  assertFalse(job.waitForCompletion(true));
  RevisionManager rm=HBaseRevisionManagerUtil.getOpenedRevisionManager(conf);
  try {
    TableSnapshot snapshot=rm.createSnapshot(databaseName + "." + tableName);
    for (    String family : snapshot.getColumnFamilies()) {
      assertEquals(1,snapshot.getRevision(family));
      List<FamilyRevision> abortedWriteTransactions=rm.getAbortedWriteTransactions(databaseName + "." + tableName,family);
      assertEquals(1,abortedWriteTransactions.size());
      assertEquals(1,abortedWriteTransactions.get(0).getRevision());
    }
  }
  finally {
    rm.close();
  }
  HTable table=new HTable(conf,databaseName + "." + tableName);
  Scan scan=new Scan();
  scan.addFamily(familyNameBytes);
  ResultScanner scanner=table.getScanner(scan);
  int index=0;
  for (  Result result : scanner) {
    String vals[]=data[index].toString().split(",");
    for (int i=1; i < vals.length; i++) {
      String pair[]=vals[i].split(":");
      assertTrue(result.containsColumn(familyNameBytes,Bytes.toBytes(pair[0])));
      assertEquals(pair[1],Bytes.toString(result.getValue(familyNameBytes,Bytes.toBytes(pair[0]))));
      assertEquals(1l,result.getColumn(familyNameBytes,Bytes.toBytes(pair[0])).get(0).getTimestamp());
    }
    index++;
  }
  assertEquals(data.length - 1,index);
  Path outputDir=new Path(getTestDir(),"mapred/testHBaseTableIgnoreAbortedTransactions");
  FileSystem fs=getFileSystem();
  if (fs.exists(outputDir)) {
    fs.delete(outputDir,true);
  }
  job=new Job(conf,"hbase-aborted-transaction");
  job.setJarByClass(this.getClass());
  job.setMapperClass(MapReadAbortedTransaction.class);
  job.setInputFormatClass(HCatInputFormat.class);
  InputJobInfo inputJobInfo=InputJobInfo.create(databaseName,tableName,null);
  HCatInputFormat.setInput(job,inputJobInfo);
  job.setOutputFormatClass(TextOutputFormat.class);
  TextOutputFormat.setOutputPath(job,outputDir);
  job.setMapOutputKeyClass(BytesWritable.class);
  job.setMapOutputValueClass(Text.class);
  job.setOutputKeyClass(BytesWritable.class);
  job.setOutputValueClass(Text.class);
  job.setNumReduceTasks(0);
  assertTrue(job.waitForCompletion(true));
}
