{
  assert(hookContext.getHookType() == HookType.POST_EXEC_HOOK);
  QueryPlan plan=hookContext.getQueryPlan();
  Index index=hookContext.getIndex();
  SessionState ss=SessionState.get();
  if (ss != null && index != null && OPERATION_NAMES.contains(plan.getOperationName()) && !plan.isExplain()) {
    try {
      StringBuilderWriter out=new StringBuilderWriter(1024);
      JsonWriter writer=new JsonWriter(out);
      String queryStr=plan.getQueryStr().trim();
      writer.beginObject();
      writer.name("version").value(FORMAT_VERSION);
      HiveConf conf=ss.getConf();
      boolean testMode=conf.getBoolVar(HiveConf.ConfVars.HIVE_IN_TEST);
      if (!testMode) {
        long queryTime=plan.getQueryStartTime().longValue();
        if (queryTime == 0)         queryTime=System.currentTimeMillis();
        long duration=System.currentTimeMillis() - queryTime;
        writer.name("user").value(hookContext.getUgi().getUserName());
        writer.name("timestamp").value(queryTime / 1000);
        writer.name("duration").value(duration);
        writer.name("jobIds");
        writer.beginArray();
        List<TaskRunner> tasks=hookContext.getCompleteTaskList();
        if (tasks != null && !tasks.isEmpty()) {
          for (          TaskRunner task : tasks) {
            String jobId=task.getTask().getJobID();
            if (jobId != null) {
              writer.value(jobId);
            }
          }
        }
        writer.endArray();
      }
      writer.name("engine").value(HiveConf.getVar(conf,HiveConf.ConfVars.HIVE_EXECUTION_ENGINE));
      writer.name("hash").value(getQueryHash(queryStr));
      writer.name("queryText").value(queryStr);
      List<Edge> edges=getEdges(plan,index);
      Set<Vertex> vertices=getVertices(edges);
      writeEdges(writer,edges);
      writeVertices(writer,vertices);
      writer.endObject();
      writer.close();
      String lineage=out.toString();
      if (testMode) {
        log(lineage);
      }
 else {
        LOG.info(lineage);
      }
    }
 catch (    Throwable t) {
      log("Failed to log lineage graph, query is not affected\n" + org.apache.hadoop.util.StringUtils.stringifyException(t));
    }
  }
}
