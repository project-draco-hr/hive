{
  LinkedHashMap<String,ObjectPair<SelectOperator,org.apache.hadoop.hive.ql.metadata.Table>> finalSelOps=index.getFinalSelectOps();
  Set<Vertex> allTargets=new LinkedHashSet<Vertex>();
  Map<String,Vertex> allSources=new LinkedHashMap<String,Vertex>();
  List<Edge> edges=new ArrayList<Edge>();
  for (  ObjectPair<SelectOperator,org.apache.hadoop.hive.ql.metadata.Table> pair : finalSelOps.values()) {
    List<FieldSchema> fieldSchemas=plan.getResultSchema().getFieldSchemas();
    SelectOperator finalSelOp=pair.getFirst();
    org.apache.hadoop.hive.ql.metadata.Table t=pair.getSecond();
    String destTableName=null;
    List<String> colNames=null;
    if (t != null) {
      destTableName=t.getDbName() + "." + t.getTableName();
      fieldSchemas=t.getCols();
    }
 else {
      for (      WriteEntity output : plan.getOutputs()) {
        Entity.Type entityType=output.getType();
        if (entityType == Entity.Type.TABLE || entityType == Entity.Type.PARTITION) {
          t=output.getTable();
          destTableName=t.getDbName() + "." + t.getTableName();
          List<FieldSchema> cols=t.getCols();
          if (cols != null && !cols.isEmpty()) {
            colNames=Utilities.getColumnNamesFromFieldSchema(cols);
          }
          break;
        }
      }
    }
    int fields=fieldSchemas.size();
    Map<ColumnInfo,Dependency> colMap=index.getDependencies(finalSelOp);
    List<Dependency> dependencies=colMap != null ? Lists.newArrayList(colMap.values()) : null;
    if (dependencies == null || dependencies.size() != fields) {
      log("Result schema has " + fields + " fields, but we don't get as many dependencies");
    }
 else {
      for (int i=0; i < fields; i++) {
        Vertex target=new Vertex(getTargetFieldName(i,destTableName,colNames,fieldSchemas));
        allTargets.add(target);
        Dependency dep=dependencies.get(i);
        String expr=dep.getExpr();
        Set<Vertex> sources=createSourceVertices(allSources,dep.getBaseCols());
        Edge edge=findSimilarEdgeBySources(edges,sources,expr,Edge.Type.PROJECTION);
        if (edge == null) {
          Set<Vertex> targets=new LinkedHashSet<Vertex>();
          targets.add(target);
          edges.add(new Edge(sources,targets,expr,Edge.Type.PROJECTION));
        }
 else {
          edge.targets.add(target);
        }
      }
      Set<Predicate> conds=index.getPredicates(finalSelOp);
      if (conds != null && !conds.isEmpty()) {
        for (        Predicate cond : conds) {
          String expr=cond.getExpr();
          Set<Vertex> sources=createSourceVertices(allSources,cond.getBaseCols());
          Edge edge=findSimilarEdgeByTargets(edges,allTargets,expr,Edge.Type.PREDICATE);
          if (edge == null) {
            edges.add(new Edge(sources,allTargets,expr,Edge.Type.PREDICATE));
          }
 else {
            edge.sources.addAll(sources);
          }
        }
      }
    }
  }
  return edges;
}
