{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
          org.apache.thrift.protocol.TList _list140=iprot.readListBegin();
          struct.cols=new ArrayList<FieldSchema>(_list140.size);
          for (int _i141=0; _i141 < _list140.size; ++_i141) {
            FieldSchema _elem142;
            _elem142=new FieldSchema();
            _elem142.read(iprot);
            struct.cols.add(_elem142);
          }
          iprot.readListEnd();
        }
        struct.setColsIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
    struct.location=iprot.readString();
    struct.setLocationIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.inputFormat=iprot.readString();
struct.setInputFormatIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.outputFormat=iprot.readString();
struct.setOutputFormatIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
struct.compressed=iprot.readBool();
struct.setCompressedIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.numBuckets=iprot.readI32();
struct.setNumBucketsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 7:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.serdeInfo=new SerDeInfo();
struct.serdeInfo.read(iprot);
struct.setSerdeInfoIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 8:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list143=iprot.readListBegin();
struct.bucketCols=new ArrayList<String>(_list143.size);
for (int _i144=0; _i144 < _list143.size; ++_i144) {
String _elem145;
_elem145=iprot.readString();
struct.bucketCols.add(_elem145);
}
iprot.readListEnd();
}
struct.setBucketColsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 9:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list146=iprot.readListBegin();
struct.sortCols=new ArrayList<Order>(_list146.size);
for (int _i147=0; _i147 < _list146.size; ++_i147) {
Order _elem148;
_elem148=new Order();
_elem148.read(iprot);
struct.sortCols.add(_elem148);
}
iprot.readListEnd();
}
struct.setSortColsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 10:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map149=iprot.readMapBegin();
struct.parameters=new HashMap<String,String>(2 * _map149.size);
for (int _i150=0; _i150 < _map149.size; ++_i150) {
String _key151;
String _val152;
_key151=iprot.readString();
_val152=iprot.readString();
struct.parameters.put(_key151,_val152);
}
iprot.readMapEnd();
}
struct.setParametersIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 11:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.skewedInfo=new SkewedInfo();
struct.skewedInfo.read(iprot);
struct.setSkewedInfoIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 12:
if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
struct.storedAsSubDirectories=iprot.readBool();
struct.setStoredAsSubDirectoriesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
