{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
          org.apache.thrift.protocol.TList _list148=iprot.readListBegin();
          struct.cols=new ArrayList<FieldSchema>(_list148.size);
          for (int _i149=0; _i149 < _list148.size; ++_i149) {
            FieldSchema _elem150;
            _elem150=new FieldSchema();
            _elem150.read(iprot);
            struct.cols.add(_elem150);
          }
          iprot.readListEnd();
        }
        struct.setColsIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
    struct.location=iprot.readString();
    struct.setLocationIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.inputFormat=iprot.readString();
struct.setInputFormatIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.outputFormat=iprot.readString();
struct.setOutputFormatIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
struct.compressed=iprot.readBool();
struct.setCompressedIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.numBuckets=iprot.readI32();
struct.setNumBucketsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 7:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.serdeInfo=new SerDeInfo();
struct.serdeInfo.read(iprot);
struct.setSerdeInfoIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 8:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list151=iprot.readListBegin();
struct.bucketCols=new ArrayList<String>(_list151.size);
for (int _i152=0; _i152 < _list151.size; ++_i152) {
String _elem153;
_elem153=iprot.readString();
struct.bucketCols.add(_elem153);
}
iprot.readListEnd();
}
struct.setBucketColsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 9:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list154=iprot.readListBegin();
struct.sortCols=new ArrayList<Order>(_list154.size);
for (int _i155=0; _i155 < _list154.size; ++_i155) {
Order _elem156;
_elem156=new Order();
_elem156.read(iprot);
struct.sortCols.add(_elem156);
}
iprot.readListEnd();
}
struct.setSortColsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 10:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map157=iprot.readMapBegin();
struct.parameters=new HashMap<String,String>(2 * _map157.size);
for (int _i158=0; _i158 < _map157.size; ++_i158) {
String _key159;
String _val160;
_key159=iprot.readString();
_val160=iprot.readString();
struct.parameters.put(_key159,_val160);
}
iprot.readMapEnd();
}
struct.setParametersIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 11:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.skewedInfo=new SkewedInfo();
struct.skewedInfo.read(iprot);
struct.setSkewedInfoIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 12:
if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
struct.storedAsSubDirectories=iprot.readBool();
struct.setStoredAsSubDirectoriesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
