{
  if (!getClass().equals(other.getClass())) {
    return getClass().getName().compareTo(other.getClass().getName());
  }
  int lastComparison=0;
  StorageDescriptor typedOther=(StorageDescriptor)other;
  lastComparison=Boolean.valueOf(isSetCols()).compareTo(typedOther.isSetCols());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetCols()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.cols,typedOther.cols);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetLocation()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.location,typedOther.location);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetInputFormat()).compareTo(typedOther.isSetInputFormat());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetInputFormat()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.inputFormat,typedOther.inputFormat);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetOutputFormat()).compareTo(typedOther.isSetOutputFormat());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetOutputFormat()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.outputFormat,typedOther.outputFormat);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetCompressed()).compareTo(typedOther.isSetCompressed());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetCompressed()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.compressed,typedOther.compressed);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetNumBuckets()).compareTo(typedOther.isSetNumBuckets());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetNumBuckets()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.numBuckets,typedOther.numBuckets);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetSerdeInfo()).compareTo(typedOther.isSetSerdeInfo());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetSerdeInfo()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.serdeInfo,typedOther.serdeInfo);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetBucketCols()).compareTo(typedOther.isSetBucketCols());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetBucketCols()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.bucketCols,typedOther.bucketCols);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetSortCols()).compareTo(typedOther.isSetSortCols());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetSortCols()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.sortCols,typedOther.sortCols);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetParameters()).compareTo(typedOther.isSetParameters());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetParameters()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.parameters,typedOther.parameters);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetSkewedInfo()).compareTo(typedOther.isSetSkewedInfo());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetSkewedInfo()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.skewedInfo,typedOther.skewedInfo);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetStoredAsSubDirectories()).compareTo(typedOther.isSetStoredAsSubDirectories());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetStoredAsSubDirectories()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.storedAsSubDirectories,typedOther.storedAsSubDirectories);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  return 0;
}
