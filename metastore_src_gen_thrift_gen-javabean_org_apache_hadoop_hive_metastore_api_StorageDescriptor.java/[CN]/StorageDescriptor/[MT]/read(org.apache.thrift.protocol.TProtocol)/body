{
  org.apache.thrift.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == org.apache.thrift.protocol.TType.LIST) {
{
          org.apache.thrift.protocol.TList _list49=iprot.readListBegin();
          this.cols=new ArrayList<FieldSchema>(_list49.size);
          for (int _i50=0; _i50 < _list49.size; ++_i50) {
            FieldSchema _elem51;
            _elem51=new FieldSchema();
            _elem51.read(iprot);
            this.cols.add(_elem51);
          }
          iprot.readListEnd();
        }
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == org.apache.thrift.protocol.TType.STRING) {
    this.location=iprot.readString();
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.inputFormat=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 4:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.outputFormat=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 5:
if (field.type == org.apache.thrift.protocol.TType.BOOL) {
this.compressed=iprot.readBool();
setCompressedIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 6:
if (field.type == org.apache.thrift.protocol.TType.I32) {
this.numBuckets=iprot.readI32();
setNumBucketsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 7:
if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
this.serdeInfo=new SerDeInfo();
this.serdeInfo.read(iprot);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 8:
if (field.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list52=iprot.readListBegin();
this.bucketCols=new ArrayList<String>(_list52.size);
for (int _i53=0; _i53 < _list52.size; ++_i53) {
String _elem54;
_elem54=iprot.readString();
this.bucketCols.add(_elem54);
}
iprot.readListEnd();
}
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 9:
if (field.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list55=iprot.readListBegin();
this.sortCols=new ArrayList<Order>(_list55.size);
for (int _i56=0; _i56 < _list55.size; ++_i56) {
Order _elem57;
_elem57=new Order();
_elem57.read(iprot);
this.sortCols.add(_elem57);
}
iprot.readListEnd();
}
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 10:
if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map58=iprot.readMapBegin();
this.parameters=new HashMap<String,String>(2 * _map58.size);
for (int _i59=0; _i59 < _map58.size; ++_i59) {
String _key60;
String _val61;
_key60=iprot.readString();
_val61=iprot.readString();
this.parameters.put(_key60,_val61);
}
iprot.readMapEnd();
}
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 11:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.primaryRegionName=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 12:
if (field.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list62=iprot.readListBegin();
this.secondaryRegions=new ArrayList<RegionStorageDescriptor>(_list62.size);
for (int _i63=0; _i63 < _list62.size; ++_i63) {
RegionStorageDescriptor _elem64;
_elem64=new RegionStorageDescriptor();
_elem64.read(iprot);
this.secondaryRegions.add(_elem64);
}
iprot.readListEnd();
}
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
