{
  org.apache.thrift.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == org.apache.thrift.protocol.TType.LIST) {
{
          org.apache.thrift.protocol.TList _list70=iprot.readListBegin();
          this.cols=new ArrayList<FieldSchema>(_list70.size);
          for (int _i71=0; _i71 < _list70.size; ++_i71) {
            FieldSchema _elem72;
            _elem72=new FieldSchema();
            _elem72.read(iprot);
            this.cols.add(_elem72);
          }
          iprot.readListEnd();
        }
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == org.apache.thrift.protocol.TType.STRING) {
    this.location=iprot.readString();
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.inputFormat=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 4:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.outputFormat=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 5:
if (field.type == org.apache.thrift.protocol.TType.BOOL) {
this.compressed=iprot.readBool();
setCompressedIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 6:
if (field.type == org.apache.thrift.protocol.TType.I32) {
this.numBuckets=iprot.readI32();
setNumBucketsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 7:
if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
this.serdeInfo=new SerDeInfo();
this.serdeInfo.read(iprot);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 8:
if (field.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list73=iprot.readListBegin();
this.bucketCols=new ArrayList<String>(_list73.size);
for (int _i74=0; _i74 < _list73.size; ++_i74) {
String _elem75;
_elem75=iprot.readString();
this.bucketCols.add(_elem75);
}
iprot.readListEnd();
}
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 9:
if (field.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list76=iprot.readListBegin();
this.sortCols=new ArrayList<Order>(_list76.size);
for (int _i77=0; _i77 < _list76.size; ++_i77) {
Order _elem78;
_elem78=new Order();
_elem78.read(iprot);
this.sortCols.add(_elem78);
}
iprot.readListEnd();
}
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 10:
if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map79=iprot.readMapBegin();
this.parameters=new HashMap<String,String>(2 * _map79.size);
for (int _i80=0; _i80 < _map79.size; ++_i80) {
String _key81;
String _val82;
_key81=iprot.readString();
_val82=iprot.readString();
this.parameters.put(_key81,_val82);
}
iprot.readMapEnd();
}
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 11:
if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
this.skewedInfo=new SkewedInfo();
this.skewedInfo.read(iprot);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
