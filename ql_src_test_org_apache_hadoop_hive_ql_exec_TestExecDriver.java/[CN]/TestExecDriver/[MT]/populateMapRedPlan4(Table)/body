{
  mr.setNumReduceTasks(Integer.valueOf(1));
  ArrayList<String> outputColumns=new ArrayList<String>();
  for (int i=0; i < 2; i++) {
    outputColumns.add("_col" + i);
  }
  Operator<ReduceSinkDesc> op1=OperatorFactory.get(PlanUtils.getReduceSinkDesc(Utilities.makeList(getStringColumn("tkey")),Utilities.makeList(getStringColumn("tkey"),getStringColumn("tvalue")),outputColumns,false,-1,1,-1));
  Operator<ScriptDesc> op0=OperatorFactory.get(new ScriptDesc("cat",PlanUtils.getDefaultTableDesc("" + Utilities.tabCode,"key,value"),TextRecordWriter.class,PlanUtils.getDefaultTableDesc("" + Utilities.tabCode,"tkey,tvalue"),TextRecordReader.class,TextRecordReader.class,PlanUtils.getDefaultTableDesc("" + Utilities.tabCode,"key")),op1);
  Operator<SelectDesc> op4=OperatorFactory.get(new SelectDesc(Utilities.makeList(getStringColumn("key"),getStringColumn("value")),outputColumns),op0);
  Utilities.addMapWork(mr,src,"a",op4);
  mr.setKeyDesc(op1.getConf().getKeySerializeInfo());
  mr.getTagToValueDesc().add(op1.getConf().getValueSerializeInfo());
  Operator<FileSinkDesc> op3=OperatorFactory.get(new FileSinkDesc(tmpdir + "mapredplan4.out",Utilities.defaultTd,false));
  Operator<ExtractDesc> op2=OperatorFactory.get(new ExtractDesc(getStringColumn(Utilities.ReduceField.VALUE.toString())),op3);
  mr.setReducer(op2);
}
