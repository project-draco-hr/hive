{
  ArrayList<exprNodeDesc> children1=new ArrayList<exprNodeDesc>();
  children1.add(new exprNodeColumnDesc(TypeInfoFactory.stringTypeInfo,column));
  exprNodeDesc lhs=new exprNodeFuncDesc(Constants.DOUBLE_TYPE_NAME,TypeInfoFactory.doubleTypeInfo,FunctionRegistry.getUDFClass(Constants.DOUBLE_TYPE_NAME),FunctionRegistry.getUDFMethod(Constants.DOUBLE_TYPE_NAME,TypeInfoFactory.stringTypeInfo),children1);
  ArrayList<exprNodeDesc> children2=new ArrayList<exprNodeDesc>();
  children2.add(new exprNodeConstantDesc(TypeInfoFactory.longTypeInfo,Long.valueOf(100)));
  exprNodeDesc rhs=new exprNodeFuncDesc(Constants.DOUBLE_TYPE_NAME,TypeInfoFactory.doubleTypeInfo,FunctionRegistry.getUDFClass(Constants.DOUBLE_TYPE_NAME),FunctionRegistry.getUDFMethod(Constants.DOUBLE_TYPE_NAME,TypeInfoFactory.longTypeInfo),children2);
  ArrayList<exprNodeDesc> children3=new ArrayList<exprNodeDesc>();
  children3.add(lhs);
  children3.add(rhs);
  exprNodeDesc desc=new exprNodeFuncDesc("<",TypeInfoFactory.booleanTypeInfo,FunctionRegistry.getUDFClass("<"),FunctionRegistry.getUDFMethod("<",TypeInfoFactory.doubleTypeInfo,TypeInfoFactory.doubleTypeInfo),children3);
  return new filterDesc(desc);
}
