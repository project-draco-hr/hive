{
  List<String> outputColumns=new ArrayList<String>();
  for (int i=0; i < 2; i++) {
    outputColumns.add("_col" + i);
  }
  Operator<ReduceSinkDesc> op1=OperatorFactory.get(PlanUtils.getReduceSinkDesc(Utilities.makeList(getStringColumn("key")),Utilities.makeList(getStringColumn("value")),outputColumns,true,Byte.valueOf((byte)0),1,-1));
  addMapWork(mr,src,"a",op1);
  Operator<ReduceSinkDesc> op2=OperatorFactory.get(PlanUtils.getReduceSinkDesc(Utilities.makeList(getStringColumn("key")),Utilities.makeList(getStringColumn("key")),outputColumns,true,Byte.valueOf((byte)1),Integer.MAX_VALUE,-1));
  addMapWork(mr,src2,"b",op2);
  ReduceWork rWork=new ReduceWork();
  rWork.setNumReduceTasks(Integer.valueOf(5));
  rWork.setNeedsTagging(true);
  rWork.setKeyDesc(op1.getConf().getKeySerializeInfo());
  rWork.getTagToValueDesc().add(op1.getConf().getValueSerializeInfo());
  mr.setReduceWork(rWork);
  rWork.getTagToValueDesc().add(op2.getConf().getValueSerializeInfo());
  Operator<FileSinkDesc> op4=OperatorFactory.get(new FileSinkDesc(new Path(tmpdir + File.separator + "mapredplan3.out"),Utilities.defaultTd,false));
  Operator<SelectDesc> op5=OperatorFactory.get(new SelectDesc(Utilities.makeList(new ExprNodeFieldDesc(TypeInfoFactory.stringTypeInfo,new ExprNodeColumnDesc(TypeInfoFactory.getListTypeInfo(TypeInfoFactory.stringTypeInfo),Utilities.ReduceField.VALUE.toString(),"",false),"0",false)),Utilities.makeList(outputColumns.get(0))),op4);
  rWork.setReducer(op5);
}
