{
  mr.setNumReduceTasks(Integer.valueOf(5));
  mr.setNeedsTagging(true);
  Operator<reduceSinkDesc> op1=OperatorFactory.get(PlanUtils.getReduceSinkDesc(Utilities.makeList(new exprNodeColumnDesc(String.class,"key")),Utilities.makeList(new exprNodeColumnDesc(String.class,"value")),Byte.valueOf((byte)0),1,-1,false));
  Utilities.addMapWork(mr,src,"a",op1);
  mr.setKeyDesc(op1.getConf().getKeySerializeInfo());
  mr.getTagToValueDesc().add(op1.getConf().getValueSerializeInfo());
  Operator<reduceSinkDesc> op2=OperatorFactory.get(PlanUtils.getReduceSinkDesc(Utilities.makeList(new exprNodeColumnDesc(String.class,"key")),Utilities.makeList(new exprNodeColumnDesc(String.class,"key")),Byte.valueOf((byte)1),Integer.MAX_VALUE,-1,false));
  Utilities.addMapWork(mr,src2,"b",op2);
  mr.getTagToValueDesc().add(op2.getConf().getValueSerializeInfo());
  Operator<fileSinkDesc> op4=OperatorFactory.get(new fileSinkDesc(tmpdir + "mapredplan3.out",Utilities.defaultTd,false));
  Operator<selectDesc> op5=OperatorFactory.get(new selectDesc(Utilities.makeList(new exprNodeColumnDesc(String.class,Utilities.ReduceField.ALIAS.toString()),new exprNodeFieldDesc(TypeInfoFactory.getPrimitiveTypeInfo(String.class),new exprNodeColumnDesc(TypeInfoFactory.getListTypeInfo(TypeInfoFactory.getPrimitiveTypeInfo(String.class)),Utilities.ReduceField.VALUE.toString()),"0",false))),op4);
  mr.setReducer(op5);
}
