{
  mr.setNumReduceTasks(Integer.valueOf(5));
  mr.setNeedsTagging(true);
  ArrayList<String> outputColumns=new ArrayList<String>();
  for (int i=0; i < 2; i++) {
    outputColumns.add("_col" + i);
  }
  Operator<ReduceSinkDesc> op1=OperatorFactory.get(PlanUtils.getReduceSinkDesc(Utilities.makeList(getStringColumn("key")),Utilities.makeList(getStringColumn("value")),outputColumns,true,Byte.valueOf((byte)0),1,-1));
  Utilities.addMapWork(mr,src,"a",op1);
  mr.setKeyDesc(op1.getConf().getKeySerializeInfo());
  mr.getTagToValueDesc().add(op1.getConf().getValueSerializeInfo());
  Operator<ReduceSinkDesc> op2=OperatorFactory.get(PlanUtils.getReduceSinkDesc(Utilities.makeList(getStringColumn("key")),Utilities.makeList(getStringColumn("key")),outputColumns,true,Byte.valueOf((byte)1),Integer.MAX_VALUE,-1));
  Utilities.addMapWork(mr,src2,"b",op2);
  mr.getTagToValueDesc().add(op2.getConf().getValueSerializeInfo());
  Operator<FileSinkDesc> op4=OperatorFactory.get(new FileSinkDesc(tmpdir + "mapredplan3.out",Utilities.defaultTd,false));
  Operator<SelectDesc> op5=OperatorFactory.get(new SelectDesc(Utilities.makeList(getStringColumn(Utilities.ReduceField.ALIAS.toString()),new ExprNodeFieldDesc(TypeInfoFactory.stringTypeInfo,new ExprNodeColumnDesc(TypeInfoFactory.getListTypeInfo(TypeInfoFactory.stringTypeInfo),Utilities.ReduceField.VALUE.toString(),"",false),"0",false)),outputColumns),op4);
  mr.setReducer(op5);
}
