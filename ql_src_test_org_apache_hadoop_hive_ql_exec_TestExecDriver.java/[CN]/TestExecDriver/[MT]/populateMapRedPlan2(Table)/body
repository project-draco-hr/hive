{
  ArrayList<String> outputColumns=new ArrayList<String>();
  for (int i=0; i < 2; i++) {
    outputColumns.add("_col" + i);
  }
  Operator<ReduceSinkDesc> op1=OperatorFactory.get(PlanUtils.getReduceSinkDesc(Utilities.makeList(getStringColumn("key")),Utilities.makeList(getStringColumn("key"),getStringColumn("value")),outputColumns,false,-1,1,-1,AcidUtils.Operation.NOT_ACID));
  addMapWork(mr,src,"a",op1);
  ReduceWork rWork=new ReduceWork();
  rWork.setNumReduceTasks(Integer.valueOf(1));
  rWork.setKeyDesc(op1.getConf().getKeySerializeInfo());
  rWork.getTagToValueDesc().add(op1.getConf().getValueSerializeInfo());
  mr.setReduceWork(rWork);
  Operator<FileSinkDesc> op4=OperatorFactory.get(new FileSinkDesc(new Path(tmpdir + File.separator + "mapredplan2.out"),Utilities.defaultTd,false));
  Operator<FilterDesc> op3=OperatorFactory.get(getTestFilterDesc("0"),op4);
  List<ExprNodeDesc> cols=new ArrayList<ExprNodeDesc>();
  cols.add(getStringColumn(Utilities.ReduceField.KEY + ".reducesinkkey" + 0));
  cols.add(getStringColumn(Utilities.ReduceField.VALUE.toString() + "." + outputColumns.get(1)));
  Operator<SelectDesc> op2=OperatorFactory.get(new SelectDesc(cols,outputColumns),op3);
  rWork.setReducer(op2);
}
