{
  Initialize();
  String tableName=newTableName("MyTable");
  String databaseName=newTableName("MyDatabase");
  String hbaseTableName=(databaseName + "." + tableName).toLowerCase();
  String db_dir=getTestDir() + "/hbasedb";
  String dbQuery="CREATE DATABASE IF NOT EXISTS " + databaseName + " LOCATION '"+ db_dir+ "'";
  String deleteQuery="DROP TABLE " + databaseName + "."+ tableName;
  String tableQuery="CREATE TABLE " + databaseName + "."+ tableName+ "(key int, testqualifier1 string, testqualifier2 string) STORED BY "+ "'org.apache.hadoop.hive.hbase.HBaseStorageHandler'"+ " WITH SERDEPROPERTIES ('hbase.columns.mapping'=':key,testFamily:testQualifier1,testFamily:testQualifier2')"+ " TBLPROPERTIES ('hbase.table.default.storage.type'='binary')";
  CommandProcessorResponse responseOne=driver.run(deleteQuery);
  assertEquals(0,responseOne.getResponseCode());
  CommandProcessorResponse responseTwo=driver.run(dbQuery);
  assertEquals(0,responseTwo.getResponseCode());
  CommandProcessorResponse responseThree=driver.run(tableQuery);
  HBaseAdmin hAdmin=new HBaseAdmin(getHbaseConf());
  boolean doesTableExist=hAdmin.tableExists(hbaseTableName);
  assertTrue(doesTableExist);
  populateHBaseTable(hbaseTableName);
  Configuration conf=new Configuration(getHbaseConf());
  HTable table=new HTable(conf,hbaseTableName);
  Scan scan=new Scan();
  scan.addFamily(Bytes.toBytes("testFamily"));
  ResultScanner scanner=table.getScanner(scan);
  int index=1;
  PigServer server=new PigServer(ExecType.LOCAL,hcatConf.getAllProperties());
  server.registerQuery("A = load '" + databaseName + "."+ tableName+ "' using org.apache.hive.hcatalog.pig.HCatLoader();");
  server.registerQuery("B = filter A by key < 5;");
  server.registerQuery("C = foreach B generate key,testqualifier2;");
  Iterator<Tuple> itr=server.openIterator("C");
  while (itr.hasNext()) {
    Tuple t=itr.next();
    assertTrue(t.size() == 2);
    assertTrue(t.get(0).getClass() == Integer.class);
    assertEquals(index,t.get(0));
    assertTrue(t.get(1).getClass() == String.class);
    assertEquals("textB-" + index,t.get(1));
    index++;
  }
  assertEquals(index - 1,4);
}
