{
  Initialize();
  String tableName=newTableName("MyTable");
  String databaseName=newTableName("MyDatabase");
  String hbaseTableName=(databaseName + "." + tableName).toLowerCase();
  String db_dir=HCatUtil.makePathASafeFileName(getTestDir() + "/hbasedb");
  String POPTXT_FILE_NAME=db_dir + "testfile.txt";
  float f=-100.1f;
  String dbQuery="CREATE DATABASE IF NOT EXISTS " + databaseName + " LOCATION '"+ db_dir+ "'";
  String deleteQuery="DROP TABLE " + databaseName + "."+ tableName;
  String tableQuery="CREATE TABLE " + databaseName + "."+ tableName+ "(key int, testqualifier1 float, testqualifier2 string) STORED BY "+ "'org.apache.hadoop.hive.hbase.HBaseStorageHandler'"+ " WITH SERDEPROPERTIES ('hbase.columns.mapping'=':key,testFamily:testQualifier1,testFamily:testQualifier2')"+ " TBLPROPERTIES ('hbase.table.default.storage.type'='binary')";
  String selectQuery="SELECT * from " + databaseName.toLowerCase() + "."+ tableName.toLowerCase();
  CommandProcessorResponse responseOne=driver.run(deleteQuery);
  assertEquals(0,responseOne.getResponseCode());
  CommandProcessorResponse responseTwo=driver.run(dbQuery);
  assertEquals(0,responseTwo.getResponseCode());
  CommandProcessorResponse responseThree=driver.run(tableQuery);
  HBaseAdmin hAdmin=new HBaseAdmin(getHbaseConf());
  boolean doesTableExist=hAdmin.tableExists(hbaseTableName);
  assertTrue(doesTableExist);
  createTestDataFile(POPTXT_FILE_NAME);
  PigServer server=new PigServer(ExecType.LOCAL,hcatConf.getAllProperties());
  server.registerQuery("A = load '" + POPTXT_FILE_NAME + "' using PigStorage() as (key:int, testqualifier1:float, testqualifier2:chararray);");
  server.registerQuery("B = filter A by (key > 2) AND (key < 8) ;");
  server.registerQuery("store B into '" + databaseName.toLowerCase() + "."+ tableName.toLowerCase()+ "' using  org.apache.hive.hcatalog.pig.HCatStorer();");
  server.registerQuery("C = load '" + databaseName.toLowerCase() + "."+ tableName.toLowerCase()+ "' using org.apache.hive.hcatalog.pig.HCatLoader();");
  Schema dumpedBSchema=server.dumpSchema("C");
  List<FieldSchema> fields=dumpedBSchema.getFields();
  assertEquals(3,fields.size());
  assertEquals(DataType.INTEGER,fields.get(0).type);
  assertEquals("key",fields.get(0).alias.toLowerCase());
  assertEquals(DataType.FLOAT,fields.get(1).type);
  assertEquals("testQualifier1".toLowerCase(),fields.get(1).alias.toLowerCase());
  assertEquals(DataType.CHARARRAY,fields.get(2).type);
  assertEquals("testQualifier2".toLowerCase(),fields.get(2).alias.toLowerCase());
  Configuration conf=new Configuration(getHbaseConf());
  HTable table=new HTable(conf,hbaseTableName);
  Scan scan=new Scan();
  scan.addFamily(Bytes.toBytes("testFamily"));
  byte[] familyNameBytes=Bytes.toBytes("testFamily");
  ResultScanner scanner=table.getScanner(scan);
  int index=3;
  int count=0;
  for (  Result result : scanner) {
    assertEquals(index,Bytes.toInt(result.getRow()));
    assertTrue(result.containsColumn(familyNameBytes,Bytes.toBytes("testQualifier1")));
    assertEquals((index + f),Bytes.toFloat(result.getValue(familyNameBytes,Bytes.toBytes("testQualifier1"))),0);
    assertTrue(result.containsColumn(familyNameBytes,Bytes.toBytes("testQualifier2")));
    assertEquals(("textB-" + index).toString(),Bytes.toString(result.getValue(familyNameBytes,Bytes.toBytes("testQualifier2"))));
    index++;
    count++;
  }
  assertEquals(count,5);
  driver.run(selectQuery);
  ArrayList<String> result=new ArrayList<String>();
  driver.getResults(result);
  assertEquals(5,result.size());
  Iterator<String> itr=result.iterator();
  for (int i=3; i <= 7; i++) {
    String tokens[]=itr.next().split("\\s+");
    assertEquals(i,Integer.parseInt(tokens[0]));
    assertEquals(i + f,Float.parseFloat(tokens[1]),0);
    assertEquals(("textB-" + i).toString(),tokens[2]);
  }
  CommandProcessorResponse responseFour=driver.run(deleteQuery);
  assertEquals(0,responseFour.getResponseCode());
}
