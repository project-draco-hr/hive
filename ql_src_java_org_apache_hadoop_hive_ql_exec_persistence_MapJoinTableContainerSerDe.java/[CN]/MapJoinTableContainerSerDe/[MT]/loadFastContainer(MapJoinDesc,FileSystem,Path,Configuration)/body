{
  try {
    if (!fs.isDirectory(folder)) {
      throw new HiveException("Error, not a directory: " + folder);
    }
    FileStatus[] fileStatuses=fs.listStatus(folder);
    if (fileStatuses == null || fileStatuses.length == 0) {
      return null;
    }
    SerDe keySerDe=keyContext.getSerDe();
    SerDe valueSerDe=valueContext.getSerDe();
    Writable key=keySerDe.getSerializedClass().newInstance();
    Writable value=valueSerDe.getSerializedClass().newInstance();
    VectorMapJoinFastTableContainer tableContainer=new VectorMapJoinFastTableContainer(mapJoinDesc,hconf,-1);
    for (    FileStatus fileStatus : fileStatuses) {
      Path filePath=fileStatus.getPath();
      if (ShimLoader.getHadoopShims().isDirectory(fileStatus)) {
        throw new HiveException("Error, not a file: " + filePath);
      }
      InputStream is=null;
      ObjectInputStream in=null;
      try {
        is=fs.open(filePath,4096);
        in=new ObjectInputStream(is);
        in.readUTF();
        in.readObject();
        int numKeys=in.readInt();
        for (int keyIndex=0; keyIndex < numKeys; keyIndex++) {
          key.readFields(in);
          long numRows=in.readLong();
          for (long rowIndex=0L; rowIndex < numRows; rowIndex++) {
            value.readFields(in);
            tableContainer.putRow(null,key,null,value);
          }
        }
      }
  finally {
        if (in != null) {
          in.close();
        }
 else         if (is != null) {
          is.close();
        }
      }
    }
    tableContainer.seal();
    return tableContainer;
  }
 catch (  IOException e) {
    throw new HiveException("IO error while trying to create table container",e);
  }
catch (  Exception e) {
    throw new HiveException("Error while trying to create table container",e);
  }
}
