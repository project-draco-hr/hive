{
  while (memoryToReserve > 0) {
    long usedMem=usedMemory.get(), newUsedMem=usedMem + memoryToReserve;
    if (newUsedMem <= maxSize) {
      if (usedMemory.compareAndSet(usedMem,newUsedMem))       break;
      continue;
    }
    long evicted=evictSomeBlocks(memoryToReserve,evictionListener);
    while (true) {
      long reserveWithEviction=Math.min(memoryToReserve,maxSize - usedMem + evicted);
      if (usedMemory.compareAndSet(usedMem,usedMem + reserveWithEviction)) {
        memoryToReserve-=reserveWithEviction;
        break;
      }
      usedMem=usedMemory.get();
    }
  }
}
