{
  if (partial == null) {
    return;
  }
  NGramAggBuf myagg=(NGramAggBuf)agg;
  ArrayList partialNGrams=(ArrayList)loi.getList(partial);
  int k=Integer.parseInt(((Text)partialNGrams.get(0)).toString());
  int n=Integer.parseInt(((Text)partialNGrams.get(1)).toString());
  int pf=Integer.parseInt(((Text)partialNGrams.get(2)).toString());
  if (myagg.k > 0 && myagg.k != k) {
    throw new HiveException(getClass().getSimpleName() + ": mismatch in value for 'k'" + ", which usually is caused by a non-constant expression. Found '"+ k+ "' and '"+ myagg.k+ "'.");
  }
  if (myagg.n > 0 && myagg.n != n) {
    throw new HiveException(getClass().getSimpleName() + ": mismatch in value for 'n'" + ", which usually is caused by a non-constant expression. Found '"+ n+ "' and '"+ myagg.n+ "'.");
  }
  if (myagg.pf > 0 && myagg.pf != pf) {
    throw new HiveException(getClass().getSimpleName() + ": mismatch in value for 'pf'" + ", which usually is caused by a non-constant expression. Found '"+ pf+ "' and '"+ myagg.pf+ "'.");
  }
  myagg.k=k;
  myagg.n=n;
  myagg.pf=pf;
  for (int i=3; i < partialNGrams.size(); i++) {
    ArrayList<String> key=new ArrayList<String>();
    for (int j=0; j < n; j++) {
      key.add(((Text)partialNGrams.get(i + j)).toString());
    }
    i+=n;
    double val=Double.parseDouble(((Text)partialNGrams.get(i)).toString());
    Double myval=(Double)myagg.ngrams.get(key);
    if (myval == null) {
      myval=new Double(val);
    }
 else {
      myval+=val;
    }
    myagg.ngrams.put(key,myval);
  }
  trim(myagg,myagg.k * myagg.pf);
}
