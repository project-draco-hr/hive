{
  driver.run("drop table junit_parted");
  String createTable="create table junit_parted(a int, b string) partitioned by (ds string) stored as RCFILE " + "tblproperties('" + HCatConstants.HCAT_ISD_CLASS + "'='"+ RCFileInputDriver.class.getName()+ "',"+ "'"+ HCatConstants.HCAT_OSD_CLASS+ "'='"+ RCFileOutputDriver.class.getName()+ "') ";
  int retCode=driver.run(createTable).getResponseCode();
  if (retCode != 0) {
    throw new IOException("Failed to create table.");
  }
  PigServer server=new PigServer(ExecType.LOCAL,props);
  UDFContext.getUDFContext().setClientSystemProps();
  boolean errCaught=false;
  try {
    server.setBatchOn();
    server.registerQuery("A = load '" + fullFileName + "' as (a:int, b:chararray);");
    server.registerQuery("B = foreach A generate a+10, b;");
    server.registerQuery("store B into 'junit_parted' using " + HCatStorer.class.getName() + "('ds=20100101');");
    server.executeBatch();
  }
 catch (  PigException fe) {
    PigException pe=LogUtils.getPigException(fe);
    assertTrue(pe instanceof FrontendException);
    assertEquals(PigHCatUtil.PIG_EXCEPTION_CODE,pe.getErrorCode());
    assertTrue(pe.getMessage().contains("Column name for a field is not specified. Please provide the full schema as an argument to HCatStorer."));
    errCaught=true;
  }
  assertTrue(errCaught);
  errCaught=false;
  try {
    server.setBatchOn();
    server.registerQuery("A = load '" + fullFileName + "' as (a:int, B:chararray);");
    server.registerQuery("B = foreach A generate a, B;");
    server.registerQuery("store B into 'junit_parted' using " + HCatStorer.class.getName() + "('ds=20100101');");
    server.executeBatch();
  }
 catch (  PigException fe) {
    PigException pe=LogUtils.getPigException(fe);
    assertTrue(pe instanceof FrontendException);
    assertEquals(PigHCatUtil.PIG_EXCEPTION_CODE,pe.getErrorCode());
    assertTrue(pe.getMessage().contains("Column names should all be in lowercase. Invalid name found: B"));
    errCaught=true;
  }
  driver.run("drop table junit_parted");
  assertTrue(errCaught);
}
