{
  Map<String,String> partitionMap=new HashMap<String,String>();
  partitionMap.put("part1","p1value1");
  partitionMap.put("part0","p0value1");
  runMRCreate(partitionMap,partitionColumns,writeRecords,10,true);
  partitionMap.clear();
  partitionMap.put("PART1","p1value2");
  partitionMap.put("PART0","p0value2");
  runMRCreate(partitionMap,partitionColumns,writeRecords,20,true);
  IOException exc=null;
  try {
    runMRCreate(partitionMap,partitionColumns,writeRecords,20,true);
  }
 catch (  IOException e) {
    exc=e;
  }
  assertTrue(exc != null);
  assertTrue(exc instanceof HCatException);
  assertEquals(ErrorType.ERROR_DUPLICATE_PARTITION,((HCatException)exc).getErrorType());
  exc=null;
  partitionMap.clear();
  partitionMap.put("px1","p1value2");
  partitionMap.put("px0","p0value2");
  try {
    runMRCreate(partitionMap,partitionColumns,writeRecords,20,true);
  }
 catch (  IOException e) {
    exc=e;
  }
  assertTrue(exc != null);
  assertTrue(exc instanceof HCatException);
  assertEquals(ErrorType.ERROR_MISSING_PARTITION_KEY,((HCatException)exc).getErrorType());
  exc=null;
  partitionMap.clear();
  partitionMap.put("px","p1value2");
  try {
    runMRCreate(partitionMap,partitionColumns,writeRecords,20,true);
  }
 catch (  IOException e) {
    exc=e;
  }
  assertTrue(exc != null);
  assertTrue(exc instanceof HCatException);
  assertEquals(ErrorType.ERROR_INVALID_PARTITION_VALUES,((HCatException)exc).getErrorType());
  exc=null;
  try {
    runMRCreate(null,partitionColumns,writeRecords,20,false);
  }
 catch (  IOException e) {
    exc=e;
  }
  assertTrue(exc == null);
  runMRRead(30);
  runMRRead(10,"part1 = \"p1value1\"");
  runMRRead(20,"part1 = \"p1value2\"");
  runMRRead(30,"part1 = \"p1value1\" or part1 = \"p1value2\"");
  runMRRead(10,"part0 = \"p0value1\"");
  runMRRead(20,"part0 = \"p0value2\"");
  runMRRead(30,"part0 = \"p0value1\" or part0 = \"p0value2\"");
  tableSchemaTest();
  columnOrderChangeTest();
  hiveReadTest();
}
