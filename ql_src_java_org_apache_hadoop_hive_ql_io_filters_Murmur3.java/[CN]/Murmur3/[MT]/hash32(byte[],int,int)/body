{
  int hash=seed;
  final int nblocks=length >> 2;
  for (int i=0; i < nblocks; i++) {
    int i_4=i << 2;
    int k=(data[i_4] & 0xff) | ((data[i_4 + 1] & 0xff) << 8) | ((data[i_4 + 2] & 0xff) << 16)| ((data[i_4 + 3] & 0xff) << 24);
    k*=C1_32;
    k=Integer.rotateLeft(k,R1_32);
    k*=C2_32;
    hash^=k;
    hash=Integer.rotateLeft(hash,R2_32) * M_32 + N_32;
  }
  int idx=nblocks << 2;
  int k1=0;
switch (length - idx) {
case 3:
    k1^=data[idx + 2] << 16;
case 2:
  k1^=data[idx + 1] << 8;
case 1:
k1^=data[idx];
k1*=C1_32;
k1=Integer.rotateLeft(k1,R1_32);
k1*=C2_32;
hash^=k1;
}
hash^=length;
hash^=(hash >>> 16);
hash*=0x85ebca6b;
hash^=(hash >>> 13);
hash*=0xc2b2ae35;
hash^=(hash >>> 16);
return hash;
}
