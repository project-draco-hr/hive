{
  ByteBuffer slice=null;
  ByteBuffer compressed=current.chunk;
  long cbStartOffset=current.offset + compressed.position();
  int b0=compressed.get() & 0xff;
  int b1=compressed.get() & 0xff;
  int b2=compressed.get() & 0xff;
  int chunkLength=(b2 << 15) | (b1 << 7) | (b0 >> 1);
  if (chunkLength > bufferSize) {
    throw new IllegalArgumentException("Buffer size too small. size = " + bufferSize + " needed = "+ chunkLength);
  }
  boolean isUncompressed=((b0 & 0x01) == 1);
  if (compressed.remaining() >= chunkLength) {
    slice=compressed.slice();
    slice.limit(chunkLength);
    addOneCompressionBlockByteBuffer(slice,isUncompressed,cbStartOffset,chunkLength,cache,compressed,ranges,toDecompress,cacheBuffers);
    current.offset+=chunkLength;
    if (compressed.remaining() <= 0 && zcr != null) {
      toRelease.add(compressed);
    }
    return chunkLength;
  }
  ByteBuffer copy=allocateBuffer(chunkLength,compressed.isDirect());
  int remaining=chunkLength - compressed.remaining();
  copy.put(compressed);
  ranges.remove();
  if (zcr != null) {
    if (compressed.position() == 0) {
      zcr.releaseBuffer(compressed);
    }
 else {
      toRelease.add(compressed);
    }
  }
  while (ranges.hasNext()) {
    DiskRange range=ranges.next();
    if (!(range instanceof BufferChunk)) {
      throw new IOException("Trying to extend compressed block into uncompressed block");
    }
    compressed=range.getData();
    if (compressed.remaining() >= remaining) {
      slice=compressed.slice();
      slice.limit(remaining);
      copy.put(slice);
      addOneCompressionBlockByteBuffer(copy,isUncompressed,cbStartOffset,chunkLength,cache,compressed,ranges,toDecompress,cacheBuffers);
      range.offset+=chunkLength;
      if (compressed.remaining() <= 0 && zcr != null) {
        zcr.releaseBuffer(compressed);
      }
      return chunkLength;
    }
    remaining-=compressed.remaining();
    copy.put(compressed);
    if (zcr != null) {
      zcr.releaseBuffer(compressed);
    }
    ranges.remove();
  }
  throw new IOException("EOF in while trying to read " + chunkLength + " bytes at "+ cbStartOffset);
}
