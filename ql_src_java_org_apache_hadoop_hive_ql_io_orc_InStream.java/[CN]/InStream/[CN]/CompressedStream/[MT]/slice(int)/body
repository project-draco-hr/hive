{
  int len=chunkLength;
  final long oldOffset=currentOffset;
  ByteBuffer slice;
  if (compressed.remaining() >= len) {
    slice=compressed.slice();
    slice.limit(len);
    currentOffset+=len;
    compressed.position(compressed.position() + len);
    return slice;
  }
 else   if (currentRange >= (bytes.size() - 1)) {
    throw new IOException("EOF in " + this + " while trying to read "+ chunkLength+ " bytes");
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format("Crossing into next BufferChunk because compressed only has %d bytes (needs %d)",compressed.remaining(),len));
  }
  ByteBuffer copy=allocateBuffer(chunkLength,compressed.isDirect());
  currentOffset+=compressed.remaining();
  len-=compressed.remaining();
  copy.put(compressed);
  ListIterator<DiskRange> iter=bytes.listIterator(currentRange);
  while (len > 0 && iter.hasNext()) {
    ++currentRange;
    if (LOG.isDebugEnabled()) {
      LOG.debug(String.format("Read slow-path, >1 cross block reads with %s",this.toString()));
    }
    DiskRange range=iter.next();
    compressed=range.getData().duplicate();
    if (compressed.remaining() >= len) {
      slice=compressed.slice();
      slice.limit(len);
      copy.put(slice);
      currentOffset+=len;
      compressed.position(compressed.position() + len);
      return copy;
    }
    currentOffset+=compressed.remaining();
    len-=compressed.remaining();
    copy.put(compressed);
  }
  seek(oldOffset);
  throw new IOException("EOF in " + this + " while trying to read "+ chunkLength+ " bytes");
}
