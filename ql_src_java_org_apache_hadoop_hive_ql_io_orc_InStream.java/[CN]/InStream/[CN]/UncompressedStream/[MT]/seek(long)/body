{
  if (desired == 0 && bytes.isEmpty()) {
    logEmptySeek(name);
    return;
  }
  int i=0;
  for (  DiskRange curRange : bytes) {
    if (desired == 0 && curRange.getData().remaining() == 0) {
      logEmptySeek(name);
      return;
    }
    if (curRange.offset <= desired && (desired - curRange.offset) < curRange.getLength()) {
      currentOffset=desired;
      currentRange=i;
      this.range=curRange.getData().duplicate();
      int pos=range.position();
      pos+=(int)(desired - curRange.offset);
      this.range.position(pos);
      return;
    }
    ++i;
  }
  int segments=bytes.size();
  if (segments != 0 && desired == bytes.get(segments - 1).end) {
    currentOffset=desired;
    currentRange=segments - 1;
    DiskRange curRange=bytes.get(currentRange);
    this.range=curRange.getData().duplicate();
    int pos=range.position();
    pos+=(int)(desired - curRange.offset);
    this.range.position(pos);
    return;
  }
  throw new IllegalArgumentException("Seek in " + name + " to "+ desired+ " is outside of the data");
}
