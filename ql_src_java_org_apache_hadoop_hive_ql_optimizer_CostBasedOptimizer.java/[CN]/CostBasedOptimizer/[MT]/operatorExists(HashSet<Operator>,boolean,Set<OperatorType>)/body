{
  @SuppressWarnings("rawtypes") HashSet<Operator> nextSetOfOperators=new HashSet<Operator>();
  for (  @SuppressWarnings("rawtypes") Operator op : start) {
    if (targetOPTypes.contains(op.getType())) {
      return true;
    }
    if (backward) {
      if (op.getParentOperators() != null) {
        nextSetOfOperators.addAll(op.getParentOperators());
      }
    }
 else {
      if (op.getChildOperators() != null) {
        nextSetOfOperators.addAll(op.getChildOperators());
      }
    }
  }
  if (!nextSetOfOperators.isEmpty()) {
    return operatorExists(nextSetOfOperators,backward,targetOPTypes);
  }
  return false;
}
