{
  LOG.debug("initializing GenericUDFGetSplits");
  try {
    if (SessionState.get() != null && SessionState.get().getConf() != null) {
      HiveConf conf=SessionState.get().getConf();
      jc=DagUtils.getInstance().createConfiguration(conf);
      db=Hive.get(conf);
    }
 else {
      jc=MapredContext.get().getJobConf();
      db=Hive.get();
    }
  }
 catch (  Exception e) {
    LOG.error("Failed to initialize: ",e);
    throw new UDFArgumentException(e);
  }
  LOG.debug("Initialized conf, jc and metastore connection");
  if (arguments.length != 2) {
    throw new UDFArgumentLengthException("The function GET_SPLITS accepts 2 arguments.");
  }
 else   if (!(arguments[0] instanceof StringObjectInspector)) {
    LOG.error("Got " + arguments[0].getTypeName() + " instead of string.");
    throw new UDFArgumentTypeException(0,"\"" + "string\" is expected at function GET_SPLITS, " + "but \"" + arguments[0].getTypeName() + "\" is found");
  }
 else   if (!(arguments[1] instanceof IntObjectInspector)) {
    LOG.error("Got " + arguments[1].getTypeName() + " instead of int.");
    throw new UDFArgumentTypeException(1,"\"" + "int\" is expected at function GET_SPLITS, " + "but \"" + arguments[1].getTypeName() + "\" is found");
  }
  stringOI=(StringObjectInspector)arguments[0];
  intOI=(IntObjectInspector)arguments[1];
  List<String> names=Arrays.asList("if_class","split_class","split");
  List<ObjectInspector> fieldOIs=Arrays.<ObjectInspector>asList(PrimitiveObjectInspectorFactory.javaStringObjectInspector,PrimitiveObjectInspectorFactory.javaStringObjectInspector,PrimitiveObjectInspectorFactory.javaByteArrayObjectInspector);
  ObjectInspector outputOI=ObjectInspectorFactory.getStandardStructObjectInspector(names,fieldOIs);
  ObjectInspector listOI=ObjectInspectorFactory.getStandardListObjectInspector(outputOI);
  bos=new ByteArrayOutputStream(1024);
  dos=new DataOutputStream(bos);
  LOG.debug("done initializing GenericUDFGetSplits");
  return listOI;
}
