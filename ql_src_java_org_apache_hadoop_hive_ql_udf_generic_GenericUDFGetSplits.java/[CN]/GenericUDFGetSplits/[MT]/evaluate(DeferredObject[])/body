{
  retArray.clear();
  String query=stringOI.getPrimitiveJavaObject(arguments[0].get());
  int num=intOI.get(arguments[1].get());
  Driver driver=new Driver();
  CommandProcessorResponse cpr;
  HiveConf conf=SessionState.get().getConf();
  if (conf == null) {
    throw new HiveException("Need configuration");
  }
  String fetchTaskConversion=HiveConf.getVar(conf,ConfVars.HIVEFETCHTASKCONVERSION);
  String queryResultFormat=HiveConf.getVar(conf,HiveConf.ConfVars.HIVEQUERYRESULTFILEFORMAT);
  try {
    LOG.info("setting fetch.task.conversion to none and query file format to \"" + LlapOutputFormat.class.getName() + "\"");
    HiveConf.setVar(conf,ConfVars.HIVEFETCHTASKCONVERSION,"none");
    HiveConf.setVar(conf,HiveConf.ConfVars.HIVEQUERYRESULTFILEFORMAT,LlapOutputFormat.class.getName());
    cpr=driver.compileAndRespond(query);
    if (cpr.getResponseCode() != 0) {
      throw new HiveException("Failed to compile query: " + cpr.getException());
    }
    QueryPlan plan=driver.getPlan();
    List<Task<?>> roots=plan.getRootTasks();
    Schema schema=plan.getResultSchema();
    if (roots == null || roots.size() != 1 || !(roots.get(0) instanceof TezTask)) {
      throw new HiveException("Was expecting a single TezTask.");
    }
    Path data=null;
    TezWork tezWork=((TezTask)roots.get(0)).getWork();
    if (tezWork.getAllWork().size() != 1) {
      String tableName="table_" + UUID.randomUUID().toString().replaceAll("[^A-Za-z0-9 ]","");
      String ctas="create temporary table " + tableName + " as "+ query;
      LOG.info("CTAS: " + ctas);
      try {
        cpr=driver.run(ctas,false);
      }
 catch (      CommandNeedRetryException e) {
        throw new HiveException(e);
      }
      if (cpr.getResponseCode() != 0) {
        throw new HiveException("Failed to create temp table: " + cpr.getException());
      }
      query="select * from " + tableName;
      cpr=driver.compileAndRespond(query);
      if (cpr.getResponseCode() != 0) {
        throw new HiveException("Failed to create temp table: " + cpr.getException());
      }
      plan=driver.getPlan();
      roots=plan.getRootTasks();
      schema=plan.getResultSchema();
      if (roots == null || roots.size() != 1 || !(roots.get(0) instanceof TezTask)) {
        throw new HiveException("Was expecting a single TezTask.");
      }
      tezWork=((TezTask)roots.get(0)).getWork();
    }
    MapWork w=(MapWork)tezWork.getAllWork().get(0);
    try {
      for (      InputSplit s : getSplits(jc,num,tezWork,schema)) {
        Object[] os=new Object[3];
        os[0]=LLAP_INTERNAL_INPUT_FORMAT_NAME;
        os[1]=s.getClass().getName();
        bos.reset();
        s.write(dos);
        byte[] frozen=bos.toByteArray();
        os[2]=frozen;
        retArray.add(os);
      }
    }
 catch (    Exception e) {
      throw new HiveException(e);
    }
  }
  finally {
    HiveConf.setVar(conf,ConfVars.HIVEFETCHTASKCONVERSION,fetchTaskConversion);
    HiveConf.setVar(conf,HiveConf.ConfVars.HIVEQUERYRESULTFILEFORMAT,queryResultFormat);
  }
  return retArray;
}
