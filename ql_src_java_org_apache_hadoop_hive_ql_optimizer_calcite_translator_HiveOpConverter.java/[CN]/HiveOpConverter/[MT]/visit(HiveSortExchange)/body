{
  OpAttr inputOpAf=dispatch(exchangeRel.getInput());
  String tabAlias=inputOpAf.tabAlias;
  if (tabAlias == null || tabAlias.length() == 0) {
    tabAlias=getHiveDerivedTableAlias();
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Translating operator rel#" + exchangeRel.getId() + ":"+ exchangeRel.getRelTypeName()+ " with row type: ["+ exchangeRel.getRowType()+ "]");
  }
  RelDistribution distribution=exchangeRel.getDistribution();
  if (distribution.getType() != Type.HASH_DISTRIBUTED) {
    throw new SemanticException("Only hash distribution supported for LogicalExchange");
  }
  ExprNodeDesc[] expressions=new ExprNodeDesc[exchangeRel.getJoinKeys().size()];
  for (int index=0; index < exchangeRel.getJoinKeys().size(); index++) {
    expressions[index]=convertToExprNode(exchangeRel.getJoinKeys().get(index),exchangeRel.getInput(),inputOpAf.tabAlias,inputOpAf);
  }
  exchangeRel.setJoinExpressions(expressions);
  ReduceSinkOperator rsOp=genReduceSink(inputOpAf.inputs.get(0),tabAlias,expressions,-1,-1,Operation.NOT_ACID,hiveConf);
  return new OpAttr(tabAlias,inputOpAf.vcolsInCalcite,rsOp);
}
