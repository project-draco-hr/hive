{
  OpAttr inputOpAf=dispatch(projectRel.getInput());
  if (LOG.isDebugEnabled()) {
    LOG.debug("Translating operator rel#" + projectRel.getId() + ":"+ projectRel.getRelTypeName()+ " with row type: ["+ projectRel.getRowType()+ "]");
  }
  List<ExprNodeDesc> exprCols=convertToExprNodes(projectRel.getChildExps(),projectRel.getInput(),inputOpAf.tabAlias);
  List<String> exprNames=new ArrayList<String>(projectRel.getRowType().getFieldNames());
  SelectDesc sd=new SelectDesc(exprCols,exprNames);
  Pair<ArrayList<ColumnInfo>,Map<Integer,VirtualColumn>> colInfoVColPair=createColInfos(projectRel.getChildExps(),exprCols,exprNames,inputOpAf);
  SelectOperator selOp=(SelectOperator)OperatorFactory.getAndMakeChild(sd,new RowSchema(colInfoVColPair.getKey()),inputOpAf.inputs.get(0));
  if (LOG.isDebugEnabled()) {
    LOG.debug("Generated " + selOp + " with row schema: ["+ selOp.getSchema()+ "]");
  }
  return new OpAttr(inputOpAf.tabAlias,colInfoVColPair.getValue(),selOp);
}
