{
  String[] baseSrc=new String[joinRel.getInputs().size()];
  String tabAlias=getHiveDerivedTableAlias();
  OpAttr[] inputs=new OpAttr[joinRel.getInputs().size()];
  List<Operator<?>> children=new ArrayList<Operator<?>>(joinRel.getInputs().size());
  for (int i=0; i < inputs.length; i++) {
    inputs[i]=dispatch(joinRel.getInput(i));
    children.add(inputs[i].inputs.get(0));
    baseSrc[i]=inputs[i].tabAlias;
  }
  for (int tag=0; tag < children.size(); tag++) {
    ReduceSinkOperator reduceSinkOp=(ReduceSinkOperator)children.get(tag);
    reduceSinkOp.getConf().setTag(tag);
  }
  Set<Integer> newVcolsInCalcite=new HashSet<Integer>();
  newVcolsInCalcite.addAll(inputs[0].vcolsInCalcite);
  if (joinRel instanceof HiveMultiJoin || extractJoinType((HiveJoin)joinRel) != JoinType.LEFTSEMI) {
    int shift=inputs[0].inputs.get(0).getSchema().getSignature().size();
    for (int i=1; i < inputs.length; i++) {
      newVcolsInCalcite.addAll(HiveCalciteUtil.shiftVColsSet(inputs[i].vcolsInCalcite,shift));
      shift+=inputs[i].inputs.get(0).getSchema().getSignature().size();
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Translating operator rel#" + joinRel.getId() + ":"+ joinRel.getRelTypeName()+ " with row type: ["+ joinRel.getRowType()+ "]");
  }
  ExprNodeDesc[][] joinExpressions=new ExprNodeDesc[inputs.length][];
  for (int i=0; i < inputs.length; i++) {
    joinExpressions[i]=((HiveSortExchange)joinRel.getInput(i)).getJoinExpressions();
  }
  List<RexNode> joinFilters;
  if (joinRel instanceof HiveJoin) {
    joinFilters=ImmutableList.of(((HiveJoin)joinRel).getJoinFilter());
  }
 else {
    joinFilters=((HiveMultiJoin)joinRel).getJoinFilters();
  }
  List<List<ExprNodeDesc>> filterExpressions=Lists.newArrayList();
  for (int i=0; i < joinFilters.size(); i++) {
    List<ExprNodeDesc> filterExpressionsForInput=new ArrayList<ExprNodeDesc>();
    if (joinFilters.get(i) != null) {
      for (      RexNode conj : RelOptUtil.conjunctions(joinFilters.get(i))) {
        ExprNodeDesc expr=convertToExprNode(conj,joinRel,null,newVcolsInCalcite);
        filterExpressionsForInput.add(expr);
      }
    }
    filterExpressions.add(filterExpressionsForInput);
  }
  JoinOperator joinOp=genJoin(joinRel,joinExpressions,filterExpressions,children,baseSrc,tabAlias);
  return new OpAttr(tabAlias,newVcolsInCalcite,joinOp);
}
