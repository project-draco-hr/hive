{
  OpAttr inputOpAf=dispatch(exchangeRel.getInput());
  if (LOG.isDebugEnabled()) {
    LOG.debug("Translating operator rel#" + exchangeRel.getId() + ":"+ exchangeRel.getRelTypeName()+ " with row type: ["+ exchangeRel.getRowType()+ "]");
  }
  RelDistribution distribution=exchangeRel.getDistribution();
  if (distribution.getType() != Type.HASH_DISTRIBUTED) {
    throw new SemanticException("Only hash distribution supported for LogicalExchange");
  }
  ExprNodeDesc[] expressions=new ExprNodeDesc[distribution.getKeys().size()];
  for (int i=0; i < distribution.getKeys().size(); i++) {
    int key=distribution.getKeys().get(i);
    ColumnInfo colInfo=inputOpAf.inputs.get(0).getSchema().getSignature().get(key);
    ExprNodeDesc column=new ExprNodeColumnDesc(colInfo);
    expressions[i]=column;
  }
  ReduceSinkOperator rsOp=genReduceSink(inputOpAf.inputs.get(0),expressions,reduceSinkTagGenerator++,-1,Operation.NOT_ACID,strictMode);
  return inputOpAf.clone(rsOp);
}
