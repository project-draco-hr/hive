{
  int inputPos=-1;
  if (expr instanceof ExprNodeGenericFuncDesc) {
    ExprNodeGenericFuncDesc func=(ExprNodeGenericFuncDesc)expr;
    List<ExprNodeDesc> newChildren=new ArrayList<ExprNodeDesc>();
    for (    ExprNodeDesc functionChild : func.getChildren()) {
      if (functionChild instanceof ExprNodeColumnDesc) {
        String colRef=functionChild.getExprString();
        int pos=reversedExprs.get(colRef);
        if (pos != -1) {
          if (inputPos == -1) {
            inputPos=pos;
          }
 else           if (inputPos != pos) {
            throw new SemanticException("UpdateExprNode is expecting only one position for join operator convert. But there are more than one.");
          }
        }
        newChildren.add(colExprMap.get(colRef));
      }
 else {
        int pos=updateExprNode(functionChild,reversedExprs,colExprMap);
        if (pos != -1) {
          if (inputPos == -1) {
            inputPos=pos;
          }
 else           if (inputPos != pos) {
            throw new SemanticException("UpdateExprNode is expecting only one position for join operator convert. But there are more than one.");
          }
        }
        newChildren.add(functionChild);
      }
    }
    func.setChildren(newChildren);
  }
  return inputPos;
}
