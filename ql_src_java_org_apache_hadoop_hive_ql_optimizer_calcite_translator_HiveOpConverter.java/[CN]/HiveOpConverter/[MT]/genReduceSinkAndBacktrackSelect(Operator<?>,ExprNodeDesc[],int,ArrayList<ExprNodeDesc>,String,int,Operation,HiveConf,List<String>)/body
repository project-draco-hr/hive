{
  String tableAlias=null;
  Set<String> tableNames=input.getSchema().getTableNames();
  for (  String tableName : tableNames) {
    if (tableName != null) {
      if (tableName.length() == 0) {
        if (tableAlias == null) {
          tableAlias=tableName;
        }
      }
 else {
        if (tableAlias == null || tableAlias.length() == 0) {
          tableAlias=tableName;
        }
 else {
          if (!tableName.equals(tableAlias)) {
            throw new SemanticException("In CBO return path, genReduceSinkAndBacktrackSelect is expecting only one tableAlias but there is more than one");
          }
        }
      }
    }
  }
  if (tableAlias == null) {
    throw new SemanticException("In CBO return path, genReduceSinkAndBacktrackSelect is expecting only one tableAlias but there is none");
  }
  ReduceSinkOperator rsOp=genReduceSink(input,tableAlias,keys,tag,partitionCols,order,numReducers,acidOperation,hiveConf);
  Map<String,ExprNodeDesc> descriptors=buildBacktrackFromReduceSink(keepColNames,rsOp.getConf().getOutputKeyColumnNames(),rsOp.getConf().getOutputValueColumnNames(),rsOp.getValueIndex(),input);
  SelectDesc selectDesc=new SelectDesc(new ArrayList<ExprNodeDesc>(descriptors.values()),new ArrayList<String>(descriptors.keySet()));
  ArrayList<ColumnInfo> cinfoLst=createColInfosSubset(input,keepColNames);
  SelectOperator selectOp=(SelectOperator)OperatorFactory.getAndMakeChild(selectDesc,new RowSchema(cinfoLst),rsOp);
  selectOp.setColumnExprMap(descriptors);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Generated " + selectOp + " with row schema: ["+ selectOp.getSchema()+ "]");
  }
  return selectOp;
}
