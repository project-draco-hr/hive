{
  OpAttr inputOpAf=dispatch(filterRel.getInput());
  if (LOG.isDebugEnabled()) {
    LOG.debug("Translating operator rel#" + filterRel.getId() + ":"+ filterRel.getRelTypeName()+ " with row type: ["+ filterRel.getRowType()+ "]");
  }
  ExprNodeDesc filCondExpr=filterRel.getCondition().accept(new ExprNodeConverter(inputOpAf.tabAlias,filterRel.getInput().getRowType(),inputOpAf.vcolsInCalcite,filterRel.getCluster().getTypeFactory(),true));
  FilterDesc filDesc=new FilterDesc(filCondExpr,false);
  ArrayList<ColumnInfo> cinfoLst=createColInfos(inputOpAf.inputs.get(0));
  FilterOperator filOp=(FilterOperator)OperatorFactory.getAndMakeChild(filDesc,new RowSchema(cinfoLst),inputOpAf.inputs.get(0));
  if (LOG.isDebugEnabled()) {
    LOG.debug("Generated " + filOp + " with row schema: ["+ filOp.getSchema()+ "]");
  }
  return inputOpAf.clone(filOp);
}
