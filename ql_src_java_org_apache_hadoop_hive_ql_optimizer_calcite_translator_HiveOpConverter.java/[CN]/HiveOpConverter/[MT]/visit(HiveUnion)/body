{
  OpAttr[] inputs=new OpAttr[unionRel.getInputs().size()];
  for (int i=0; i < inputs.length; i++) {
    inputs[i]=dispatch(unionRel.getInput(i));
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Translating operator rel#" + unionRel.getId() + ":"+ unionRel.getRelTypeName()+ " with row type: ["+ unionRel.getRowType()+ "]");
  }
  UnionDesc unionDesc=new UnionDesc();
  unionDesc.setNumInputs(inputs.length);
  ArrayList<ColumnInfo> cinfoLst=createColInfos(inputs[0].inputs.get(0));
  Operator<?>[] children=new Operator<?>[inputs.length];
  for (int i=0; i < children.length; i++) {
    children[i]=inputs[i].inputs.get(0);
  }
  Operator<? extends OperatorDesc> unionOp=OperatorFactory.getAndMakeChild(unionDesc,new RowSchema(cinfoLst),children);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Generated " + unionOp + " with row schema: ["+ unionOp.getSchema()+ "]");
  }
  return inputs[0].clone(unionOp);
}
