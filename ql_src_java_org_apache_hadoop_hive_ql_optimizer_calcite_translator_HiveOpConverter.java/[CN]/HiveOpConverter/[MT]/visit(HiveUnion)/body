{
  List<RelNode> inputsList=extractRelNodeFromUnion(unionRel);
  OpAttr[] inputs=new OpAttr[inputsList.size()];
  for (int i=0; i < inputs.length; i++) {
    inputs[i]=dispatch(inputsList.get(i));
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Translating operator rel#" + unionRel.getId() + ":"+ unionRel.getRelTypeName()+ " with row type: ["+ unionRel.getRowType()+ "]");
  }
  UnionDesc unionDesc=new UnionDesc();
  unionDesc.setNumInputs(inputs.length);
  String tableAlias=getHiveDerivedTableAlias();
  ArrayList<ColumnInfo> cinfoLst=createColInfos(inputs[0].inputs.get(0),tableAlias);
  Operator<?>[] children=new Operator<?>[inputs.length];
  for (int i=0; i < children.length; i++) {
    if (i == 0) {
      children[i]=inputs[i].inputs.get(0);
    }
 else {
      Operator<?> op=inputs[i].inputs.get(0);
      children[i]=genInputSelectForUnion(op,cinfoLst);
    }
  }
  Operator<? extends OperatorDesc> unionOp=OperatorFactory.getAndMakeChild(unionDesc,new RowSchema(cinfoLst),children);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Generated " + unionOp + " with row schema: ["+ unionOp.getSchema()+ "]");
  }
  return new OpAttr(tableAlias,inputs[0].vcolsInCalcite,unionOp);
}
