{
  if (rel instanceof EmptyRel) {
    throw new RuntimeException("Found Empty Rel");
  }
 else   if (rel instanceof HepRelVertex) {
    throw new RuntimeException("Found HepRelVertex");
  }
 else   if (rel instanceof JoinRelBase) {
    if (!validJoinParent(rel,parent)) {
      introduceDerivedTable(rel,parent);
    }
  }
 else   if (rel instanceof MultiJoinRel) {
    throw new RuntimeException("Found MultiJoinRel");
  }
 else   if (rel instanceof OneRowRelBase) {
    throw new RuntimeException("Found OneRowRelBase");
  }
 else   if (rel instanceof RelSubset) {
    throw new RuntimeException("Found RelSubset");
  }
 else   if (rel instanceof SetOpRel) {
    if (!validSetopParent(rel,parent))     introduceDerivedTable(rel,parent);
    SetOpRel setopRel=(SetOpRel)rel;
    for (    RelNode inputRel : setopRel.getInputs()) {
      if (!validSetopChild(inputRel)) {
        introduceDerivedTable(inputRel,setopRel);
      }
    }
  }
 else   if (rel instanceof SingleRel) {
    if (rel instanceof FilterRelBase) {
      if (!validFilterParent(rel,parent)) {
        introduceDerivedTable(rel,parent);
      }
    }
 else     if (rel instanceof HiveSortRel) {
      if (!validSortParent(rel,parent)) {
        introduceDerivedTable(rel,parent);
      }
      if (!validSortChild((HiveSortRel)rel)) {
        introduceDerivedTable(((HiveSortRel)rel).getChild(),rel);
      }
    }
 else     if (rel instanceof HiveAggregateRel) {
      if (!validGBParent(rel,parent)) {
        introduceDerivedTable(rel,parent);
      }
    }
  }
 else   if (rel instanceof TableAccessRelBase) {
  }
 else   if (rel instanceof TableFunctionRelBase) {
  }
 else   if (rel instanceof ValuesRelBase) {
  }
  List<RelNode> childNodes=rel.getInputs();
  if (childNodes != null) {
    for (    RelNode r : childNodes) {
      convertOpTree(r,rel);
    }
  }
}
