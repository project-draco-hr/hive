{
  String columnName=getColumnName(expression,variable);
  if (columnName == null) {
    return new ExpressionTree(TruthValue.YES_NO_NULL);
  }
  PredicateLeaf.Type type=getType(expression.getChildren().get(variable));
  if (type == null) {
    return new ExpressionTree(TruthValue.YES_NO_NULL);
  }
  Object literal=null;
  List<Object> literalList=null;
switch (operator) {
case IS_NULL:
    break;
case IN:
case BETWEEN:
  literalList=getLiteralList(expression,variable + 1);
if (literalList == null) {
  return new ExpressionTree(TruthValue.YES_NO_NULL);
}
break;
default :
literal=getLiteral(expression);
if (literal == null) {
return new ExpressionTree(TruthValue.YES_NO_NULL);
}
break;
}
boolean needSwap=false;
if (variable != 0) {
if (operator == PredicateLeaf.Operator.LESS_THAN) {
needSwap=true;
operator=PredicateLeaf.Operator.LESS_THAN_EQUALS;
}
 else if (operator == PredicateLeaf.Operator.LESS_THAN_EQUALS) {
needSwap=true;
operator=PredicateLeaf.Operator.LESS_THAN;
}
}
leafCache.add(new PredicateLeafImpl(operator,type,columnName,literal,literalList));
ExpressionTree result=new ExpressionTree(leafCache.size() - 1);
if (needSwap) {
result=negate(result);
}
return result;
}
