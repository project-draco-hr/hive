{
  if (root.operator == ExpressionTree.Operator.NOT) {
    ExpressionTree child=root.children.get(0);
switch (child.operator) {
case NOT:
      return pushDownNot(child.children.get(0));
case CONSTANT:
    return new ExpressionTree(child.constant.not());
case AND:
  root=new ExpressionTree(ExpressionTree.Operator.OR);
for (ExpressionTree kid : child.children) {
  root.children.add(pushDownNot(new ExpressionTree(ExpressionTree.Operator.NOT,kid)));
}
break;
case OR:
root=new ExpressionTree(ExpressionTree.Operator.AND);
for (ExpressionTree kid : child.children) {
root.children.add(pushDownNot(new ExpressionTree(ExpressionTree.Operator.NOT,kid)));
}
break;
default :
break;
}
}
 else if (root.children != null) {
for (int i=0; i < root.children.size(); ++i) {
root.children.set(i,pushDownNot(root.children.get(i)));
}
}
return root;
}
