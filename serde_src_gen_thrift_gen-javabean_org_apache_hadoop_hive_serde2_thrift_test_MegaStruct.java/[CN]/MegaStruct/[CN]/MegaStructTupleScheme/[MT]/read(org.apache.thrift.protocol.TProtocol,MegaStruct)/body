{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  BitSet incoming=iprot.readBitSet(20);
  if (incoming.get(0)) {
    struct.my_bool=iprot.readBool();
    struct.setMy_boolIsSet(true);
  }
  if (incoming.get(1)) {
    struct.my_byte=iprot.readByte();
    struct.setMy_byteIsSet(true);
  }
  if (incoming.get(2)) {
    struct.my_16bit_int=iprot.readI16();
    struct.setMy_16bit_intIsSet(true);
  }
  if (incoming.get(3)) {
    struct.my_32bit_int=iprot.readI32();
    struct.setMy_32bit_intIsSet(true);
  }
  if (incoming.get(4)) {
    struct.my_64bit_int=iprot.readI64();
    struct.setMy_64bit_intIsSet(true);
  }
  if (incoming.get(5)) {
    struct.my_double=iprot.readDouble();
    struct.setMy_doubleIsSet(true);
  }
  if (incoming.get(6)) {
    struct.my_string=iprot.readString();
    struct.setMy_stringIsSet(true);
  }
  if (incoming.get(7)) {
    struct.my_binary=iprot.readBinary();
    struct.setMy_binaryIsSet(true);
  }
  if (incoming.get(8)) {
{
      org.apache.thrift.protocol.TMap _map76=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.my_string_string_map=new HashMap<String,String>(2 * _map76.size);
      for (int _i77=0; _i77 < _map76.size; ++_i77) {
        String _key78;
        String _val79;
        _key78=iprot.readString();
        _val79=iprot.readString();
        struct.my_string_string_map.put(_key78,_val79);
      }
    }
    struct.setMy_string_string_mapIsSet(true);
  }
  if (incoming.get(9)) {
{
      org.apache.thrift.protocol.TMap _map80=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.I32,iprot.readI32());
      struct.my_string_enum_map=new HashMap<String,MyEnum>(2 * _map80.size);
      for (int _i81=0; _i81 < _map80.size; ++_i81) {
        String _key82;
        MyEnum _val83;
        _key82=iprot.readString();
        _val83=MyEnum.findByValue(iprot.readI32());
        struct.my_string_enum_map.put(_key82,_val83);
      }
    }
    struct.setMy_string_enum_mapIsSet(true);
  }
  if (incoming.get(10)) {
{
      org.apache.thrift.protocol.TMap _map84=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.my_enum_string_map=new HashMap<MyEnum,String>(2 * _map84.size);
      for (int _i85=0; _i85 < _map84.size; ++_i85) {
        MyEnum _key86;
        String _val87;
        _key86=MyEnum.findByValue(iprot.readI32());
        _val87=iprot.readString();
        struct.my_enum_string_map.put(_key86,_val87);
      }
    }
    struct.setMy_enum_string_mapIsSet(true);
  }
  if (incoming.get(11)) {
{
      org.apache.thrift.protocol.TMap _map88=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32,org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.my_enum_struct_map=new HashMap<MyEnum,MiniStruct>(2 * _map88.size);
      for (int _i89=0; _i89 < _map88.size; ++_i89) {
        MyEnum _key90;
        MiniStruct _val91;
        _key90=MyEnum.findByValue(iprot.readI32());
        _val91=new MiniStruct();
        _val91.read(iprot);
        struct.my_enum_struct_map.put(_key90,_val91);
      }
    }
    struct.setMy_enum_struct_mapIsSet(true);
  }
  if (incoming.get(12)) {
{
      org.apache.thrift.protocol.TMap _map92=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32,org.apache.thrift.protocol.TType.LIST,iprot.readI32());
      struct.my_enum_stringlist_map=new HashMap<MyEnum,List<String>>(2 * _map92.size);
      for (int _i93=0; _i93 < _map92.size; ++_i93) {
        MyEnum _key94;
        List<String> _val95;
        _key94=MyEnum.findByValue(iprot.readI32());
{
          org.apache.thrift.protocol.TList _list96=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,iprot.readI32());
          _val95=new ArrayList<String>(_list96.size);
          for (int _i97=0; _i97 < _list96.size; ++_i97) {
            String _elem98;
            _elem98=iprot.readString();
            _val95.add(_elem98);
          }
        }
        struct.my_enum_stringlist_map.put(_key94,_val95);
      }
    }
    struct.setMy_enum_stringlist_mapIsSet(true);
  }
  if (incoming.get(13)) {
{
      org.apache.thrift.protocol.TMap _map99=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32,org.apache.thrift.protocol.TType.LIST,iprot.readI32());
      struct.my_enum_structlist_map=new HashMap<MyEnum,List<MiniStruct>>(2 * _map99.size);
      for (int _i100=0; _i100 < _map99.size; ++_i100) {
        MyEnum _key101;
        List<MiniStruct> _val102;
        _key101=MyEnum.findByValue(iprot.readI32());
{
          org.apache.thrift.protocol.TList _list103=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
          _val102=new ArrayList<MiniStruct>(_list103.size);
          for (int _i104=0; _i104 < _list103.size; ++_i104) {
            MiniStruct _elem105;
            _elem105=new MiniStruct();
            _elem105.read(iprot);
            _val102.add(_elem105);
          }
        }
        struct.my_enum_structlist_map.put(_key101,_val102);
      }
    }
    struct.setMy_enum_structlist_mapIsSet(true);
  }
  if (incoming.get(14)) {
{
      org.apache.thrift.protocol.TList _list106=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.my_stringlist=new ArrayList<String>(_list106.size);
      for (int _i107=0; _i107 < _list106.size; ++_i107) {
        String _elem108;
        _elem108=iprot.readString();
        struct.my_stringlist.add(_elem108);
      }
    }
    struct.setMy_stringlistIsSet(true);
  }
  if (incoming.get(15)) {
{
      org.apache.thrift.protocol.TList _list109=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.my_structlist=new ArrayList<MiniStruct>(_list109.size);
      for (int _i110=0; _i110 < _list109.size; ++_i110) {
        MiniStruct _elem111;
        _elem111=new MiniStruct();
        _elem111.read(iprot);
        struct.my_structlist.add(_elem111);
      }
    }
    struct.setMy_structlistIsSet(true);
  }
  if (incoming.get(16)) {
{
      org.apache.thrift.protocol.TList _list112=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32,iprot.readI32());
      struct.my_enumlist=new ArrayList<MyEnum>(_list112.size);
      for (int _i113=0; _i113 < _list112.size; ++_i113) {
        MyEnum _elem114;
        _elem114=MyEnum.findByValue(iprot.readI32());
        struct.my_enumlist.add(_elem114);
      }
    }
    struct.setMy_enumlistIsSet(true);
  }
  if (incoming.get(17)) {
{
      org.apache.thrift.protocol.TSet _set115=new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.my_stringset=new HashSet<String>(2 * _set115.size);
      for (int _i116=0; _i116 < _set115.size; ++_i116) {
        String _elem117;
        _elem117=iprot.readString();
        struct.my_stringset.add(_elem117);
      }
    }
    struct.setMy_stringsetIsSet(true);
  }
  if (incoming.get(18)) {
{
      org.apache.thrift.protocol.TSet _set118=new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32,iprot.readI32());
      struct.my_enumset=new HashSet<MyEnum>(2 * _set118.size);
      for (int _i119=0; _i119 < _set118.size; ++_i119) {
        MyEnum _elem120;
        _elem120=MyEnum.findByValue(iprot.readI32());
        struct.my_enumset.add(_elem120);
      }
    }
    struct.setMy_enumsetIsSet(true);
  }
  if (incoming.get(19)) {
{
      org.apache.thrift.protocol.TSet _set121=new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.my_structset=new HashSet<MiniStruct>(2 * _set121.size);
      for (int _i122=0; _i122 < _set121.size; ++_i122) {
        MiniStruct _elem123;
        _elem123=new MiniStruct();
        _elem123.read(iprot);
        struct.my_structset.add(_elem123);
      }
    }
    struct.setMy_structsetIsSet(true);
  }
}
