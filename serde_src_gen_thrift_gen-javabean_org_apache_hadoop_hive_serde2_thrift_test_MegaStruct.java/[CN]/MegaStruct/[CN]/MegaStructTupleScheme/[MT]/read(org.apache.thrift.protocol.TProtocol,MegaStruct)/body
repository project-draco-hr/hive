{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  BitSet incoming=iprot.readBitSet(20);
  if (incoming.get(0)) {
    struct.my_bool=iprot.readBool();
    struct.setMy_boolIsSet(true);
  }
  if (incoming.get(1)) {
    struct.my_byte=iprot.readByte();
    struct.setMy_byteIsSet(true);
  }
  if (incoming.get(2)) {
    struct.my_16bit_int=iprot.readI16();
    struct.setMy_16bit_intIsSet(true);
  }
  if (incoming.get(3)) {
    struct.my_32bit_int=iprot.readI32();
    struct.setMy_32bit_intIsSet(true);
  }
  if (incoming.get(4)) {
    struct.my_64bit_int=iprot.readI64();
    struct.setMy_64bit_intIsSet(true);
  }
  if (incoming.get(5)) {
    struct.my_double=iprot.readDouble();
    struct.setMy_doubleIsSet(true);
  }
  if (incoming.get(6)) {
    struct.my_string=iprot.readString();
    struct.setMy_stringIsSet(true);
  }
  if (incoming.get(7)) {
    struct.my_binary=iprot.readBinary();
    struct.setMy_binaryIsSet(true);
  }
  if (incoming.get(8)) {
{
      org.apache.thrift.protocol.TMap _map76=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.my_string_string_map=new HashMap<String,String>(2 * _map76.size);
      String _key77;
      String _val78;
      for (int _i79=0; _i79 < _map76.size; ++_i79) {
        _key77=iprot.readString();
        _val78=iprot.readString();
        struct.my_string_string_map.put(_key77,_val78);
      }
    }
    struct.setMy_string_string_mapIsSet(true);
  }
  if (incoming.get(9)) {
{
      org.apache.thrift.protocol.TMap _map80=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.I32,iprot.readI32());
      struct.my_string_enum_map=new HashMap<String,MyEnum>(2 * _map80.size);
      String _key81;
      MyEnum _val82;
      for (int _i83=0; _i83 < _map80.size; ++_i83) {
        _key81=iprot.readString();
        _val82=org.apache.hadoop.hive.serde2.thrift.test.MyEnum.findByValue(iprot.readI32());
        struct.my_string_enum_map.put(_key81,_val82);
      }
    }
    struct.setMy_string_enum_mapIsSet(true);
  }
  if (incoming.get(10)) {
{
      org.apache.thrift.protocol.TMap _map84=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.my_enum_string_map=new HashMap<MyEnum,String>(2 * _map84.size);
      MyEnum _key85;
      String _val86;
      for (int _i87=0; _i87 < _map84.size; ++_i87) {
        _key85=org.apache.hadoop.hive.serde2.thrift.test.MyEnum.findByValue(iprot.readI32());
        _val86=iprot.readString();
        struct.my_enum_string_map.put(_key85,_val86);
      }
    }
    struct.setMy_enum_string_mapIsSet(true);
  }
  if (incoming.get(11)) {
{
      org.apache.thrift.protocol.TMap _map88=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32,org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.my_enum_struct_map=new HashMap<MyEnum,MiniStruct>(2 * _map88.size);
      MyEnum _key89;
      MiniStruct _val90;
      for (int _i91=0; _i91 < _map88.size; ++_i91) {
        _key89=org.apache.hadoop.hive.serde2.thrift.test.MyEnum.findByValue(iprot.readI32());
        _val90=new MiniStruct();
        _val90.read(iprot);
        struct.my_enum_struct_map.put(_key89,_val90);
      }
    }
    struct.setMy_enum_struct_mapIsSet(true);
  }
  if (incoming.get(12)) {
{
      org.apache.thrift.protocol.TMap _map92=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32,org.apache.thrift.protocol.TType.LIST,iprot.readI32());
      struct.my_enum_stringlist_map=new HashMap<MyEnum,List<String>>(2 * _map92.size);
      MyEnum _key93;
      List<String> _val94;
      for (int _i95=0; _i95 < _map92.size; ++_i95) {
        _key93=org.apache.hadoop.hive.serde2.thrift.test.MyEnum.findByValue(iprot.readI32());
{
          org.apache.thrift.protocol.TList _list96=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,iprot.readI32());
          _val94=new ArrayList<String>(_list96.size);
          String _elem97;
          for (int _i98=0; _i98 < _list96.size; ++_i98) {
            _elem97=iprot.readString();
            _val94.add(_elem97);
          }
        }
        struct.my_enum_stringlist_map.put(_key93,_val94);
      }
    }
    struct.setMy_enum_stringlist_mapIsSet(true);
  }
  if (incoming.get(13)) {
{
      org.apache.thrift.protocol.TMap _map99=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32,org.apache.thrift.protocol.TType.LIST,iprot.readI32());
      struct.my_enum_structlist_map=new HashMap<MyEnum,List<MiniStruct>>(2 * _map99.size);
      MyEnum _key100;
      List<MiniStruct> _val101;
      for (int _i102=0; _i102 < _map99.size; ++_i102) {
        _key100=org.apache.hadoop.hive.serde2.thrift.test.MyEnum.findByValue(iprot.readI32());
{
          org.apache.thrift.protocol.TList _list103=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
          _val101=new ArrayList<MiniStruct>(_list103.size);
          MiniStruct _elem104;
          for (int _i105=0; _i105 < _list103.size; ++_i105) {
            _elem104=new MiniStruct();
            _elem104.read(iprot);
            _val101.add(_elem104);
          }
        }
        struct.my_enum_structlist_map.put(_key100,_val101);
      }
    }
    struct.setMy_enum_structlist_mapIsSet(true);
  }
  if (incoming.get(14)) {
{
      org.apache.thrift.protocol.TList _list106=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.my_stringlist=new ArrayList<String>(_list106.size);
      String _elem107;
      for (int _i108=0; _i108 < _list106.size; ++_i108) {
        _elem107=iprot.readString();
        struct.my_stringlist.add(_elem107);
      }
    }
    struct.setMy_stringlistIsSet(true);
  }
  if (incoming.get(15)) {
{
      org.apache.thrift.protocol.TList _list109=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.my_structlist=new ArrayList<MiniStruct>(_list109.size);
      MiniStruct _elem110;
      for (int _i111=0; _i111 < _list109.size; ++_i111) {
        _elem110=new MiniStruct();
        _elem110.read(iprot);
        struct.my_structlist.add(_elem110);
      }
    }
    struct.setMy_structlistIsSet(true);
  }
  if (incoming.get(16)) {
{
      org.apache.thrift.protocol.TList _list112=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32,iprot.readI32());
      struct.my_enumlist=new ArrayList<MyEnum>(_list112.size);
      MyEnum _elem113;
      for (int _i114=0; _i114 < _list112.size; ++_i114) {
        _elem113=org.apache.hadoop.hive.serde2.thrift.test.MyEnum.findByValue(iprot.readI32());
        struct.my_enumlist.add(_elem113);
      }
    }
    struct.setMy_enumlistIsSet(true);
  }
  if (incoming.get(17)) {
{
      org.apache.thrift.protocol.TSet _set115=new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.my_stringset=new HashSet<String>(2 * _set115.size);
      String _elem116;
      for (int _i117=0; _i117 < _set115.size; ++_i117) {
        _elem116=iprot.readString();
        struct.my_stringset.add(_elem116);
      }
    }
    struct.setMy_stringsetIsSet(true);
  }
  if (incoming.get(18)) {
{
      org.apache.thrift.protocol.TSet _set118=new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32,iprot.readI32());
      struct.my_enumset=new HashSet<MyEnum>(2 * _set118.size);
      MyEnum _elem119;
      for (int _i120=0; _i120 < _set118.size; ++_i120) {
        _elem119=org.apache.hadoop.hive.serde2.thrift.test.MyEnum.findByValue(iprot.readI32());
        struct.my_enumset.add(_elem119);
      }
    }
    struct.setMy_enumsetIsSet(true);
  }
  if (incoming.get(19)) {
{
      org.apache.thrift.protocol.TSet _set121=new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.my_structset=new HashSet<MiniStruct>(2 * _set121.size);
      MiniStruct _elem122;
      for (int _i123=0; _i123 < _set121.size; ++_i123) {
        _elem122=new MiniStruct();
        _elem122.read(iprot);
        struct.my_structset.add(_elem122);
      }
    }
    struct.setMy_structsetIsSet(true);
  }
}
