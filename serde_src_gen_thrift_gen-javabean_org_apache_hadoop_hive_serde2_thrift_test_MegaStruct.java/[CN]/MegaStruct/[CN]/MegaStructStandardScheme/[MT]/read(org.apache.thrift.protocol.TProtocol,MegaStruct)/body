{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
        struct.my_bool=iprot.readBool();
        struct.setMy_boolIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
    struct.my_byte=iprot.readByte();
    struct.setMy_byteIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
struct.my_16bit_int=iprot.readI16();
struct.setMy_16bit_intIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.my_32bit_int=iprot.readI32();
struct.setMy_32bit_intIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.my_64bit_int=iprot.readI64();
struct.setMy_64bit_intIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
struct.my_double=iprot.readDouble();
struct.setMy_doubleIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 7:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.my_string=iprot.readString();
struct.setMy_stringIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 8:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.my_binary=iprot.readBinary();
struct.setMy_binaryIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 9:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map0=iprot.readMapBegin();
struct.my_string_string_map=new HashMap<String,String>(2 * _map0.size);
for (int _i1=0; _i1 < _map0.size; ++_i1) {
String _key2;
String _val3;
_key2=iprot.readString();
_val3=iprot.readString();
struct.my_string_string_map.put(_key2,_val3);
}
iprot.readMapEnd();
}
struct.setMy_string_string_mapIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 10:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map4=iprot.readMapBegin();
struct.my_string_enum_map=new HashMap<String,MyEnum>(2 * _map4.size);
for (int _i5=0; _i5 < _map4.size; ++_i5) {
String _key6;
MyEnum _val7;
_key6=iprot.readString();
_val7=MyEnum.findByValue(iprot.readI32());
struct.my_string_enum_map.put(_key6,_val7);
}
iprot.readMapEnd();
}
struct.setMy_string_enum_mapIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 11:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map8=iprot.readMapBegin();
struct.my_enum_string_map=new HashMap<MyEnum,String>(2 * _map8.size);
for (int _i9=0; _i9 < _map8.size; ++_i9) {
MyEnum _key10;
String _val11;
_key10=MyEnum.findByValue(iprot.readI32());
_val11=iprot.readString();
struct.my_enum_string_map.put(_key10,_val11);
}
iprot.readMapEnd();
}
struct.setMy_enum_string_mapIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 12:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map12=iprot.readMapBegin();
struct.my_enum_struct_map=new HashMap<MyEnum,MiniStruct>(2 * _map12.size);
for (int _i13=0; _i13 < _map12.size; ++_i13) {
MyEnum _key14;
MiniStruct _val15;
_key14=MyEnum.findByValue(iprot.readI32());
_val15=new MiniStruct();
_val15.read(iprot);
struct.my_enum_struct_map.put(_key14,_val15);
}
iprot.readMapEnd();
}
struct.setMy_enum_struct_mapIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 13:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map16=iprot.readMapBegin();
struct.my_enum_stringlist_map=new HashMap<MyEnum,List<String>>(2 * _map16.size);
for (int _i17=0; _i17 < _map16.size; ++_i17) {
MyEnum _key18;
List<String> _val19;
_key18=MyEnum.findByValue(iprot.readI32());
{
org.apache.thrift.protocol.TList _list20=iprot.readListBegin();
_val19=new ArrayList<String>(_list20.size);
for (int _i21=0; _i21 < _list20.size; ++_i21) {
String _elem22;
_elem22=iprot.readString();
_val19.add(_elem22);
}
iprot.readListEnd();
}
struct.my_enum_stringlist_map.put(_key18,_val19);
}
iprot.readMapEnd();
}
struct.setMy_enum_stringlist_mapIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 14:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map23=iprot.readMapBegin();
struct.my_enum_structlist_map=new HashMap<MyEnum,List<MiniStruct>>(2 * _map23.size);
for (int _i24=0; _i24 < _map23.size; ++_i24) {
MyEnum _key25;
List<MiniStruct> _val26;
_key25=MyEnum.findByValue(iprot.readI32());
{
org.apache.thrift.protocol.TList _list27=iprot.readListBegin();
_val26=new ArrayList<MiniStruct>(_list27.size);
for (int _i28=0; _i28 < _list27.size; ++_i28) {
MiniStruct _elem29;
_elem29=new MiniStruct();
_elem29.read(iprot);
_val26.add(_elem29);
}
iprot.readListEnd();
}
struct.my_enum_structlist_map.put(_key25,_val26);
}
iprot.readMapEnd();
}
struct.setMy_enum_structlist_mapIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 15:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list30=iprot.readListBegin();
struct.my_stringlist=new ArrayList<String>(_list30.size);
for (int _i31=0; _i31 < _list30.size; ++_i31) {
String _elem32;
_elem32=iprot.readString();
struct.my_stringlist.add(_elem32);
}
iprot.readListEnd();
}
struct.setMy_stringlistIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 16:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list33=iprot.readListBegin();
struct.my_structlist=new ArrayList<MiniStruct>(_list33.size);
for (int _i34=0; _i34 < _list33.size; ++_i34) {
MiniStruct _elem35;
_elem35=new MiniStruct();
_elem35.read(iprot);
struct.my_structlist.add(_elem35);
}
iprot.readListEnd();
}
struct.setMy_structlistIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 17:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list36=iprot.readListBegin();
struct.my_enumlist=new ArrayList<MyEnum>(_list36.size);
for (int _i37=0; _i37 < _list36.size; ++_i37) {
MyEnum _elem38;
_elem38=MyEnum.findByValue(iprot.readI32());
struct.my_enumlist.add(_elem38);
}
iprot.readListEnd();
}
struct.setMy_enumlistIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 18:
if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
{
org.apache.thrift.protocol.TSet _set39=iprot.readSetBegin();
struct.my_stringset=new HashSet<String>(2 * _set39.size);
for (int _i40=0; _i40 < _set39.size; ++_i40) {
String _elem41;
_elem41=iprot.readString();
struct.my_stringset.add(_elem41);
}
iprot.readSetEnd();
}
struct.setMy_stringsetIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 19:
if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
{
org.apache.thrift.protocol.TSet _set42=iprot.readSetBegin();
struct.my_enumset=new HashSet<MyEnum>(2 * _set42.size);
for (int _i43=0; _i43 < _set42.size; ++_i43) {
MyEnum _elem44;
_elem44=MyEnum.findByValue(iprot.readI32());
struct.my_enumset.add(_elem44);
}
iprot.readSetEnd();
}
struct.setMy_enumsetIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 20:
if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
{
org.apache.thrift.protocol.TSet _set45=iprot.readSetBegin();
struct.my_structset=new HashSet<MiniStruct>(2 * _set45.size);
for (int _i46=0; _i46 < _set45.size; ++_i46) {
MiniStruct _elem47;
_elem47=new MiniStruct();
_elem47.read(iprot);
struct.my_structset.add(_elem47);
}
iprot.readSetEnd();
}
struct.setMy_structsetIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
