{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
        struct.my_bool=iprot.readBool();
        struct.setMy_boolIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
    struct.my_byte=iprot.readByte();
    struct.setMy_byteIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
struct.my_16bit_int=iprot.readI16();
struct.setMy_16bit_intIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.my_32bit_int=iprot.readI32();
struct.setMy_32bit_intIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.my_64bit_int=iprot.readI64();
struct.setMy_64bit_intIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
struct.my_double=iprot.readDouble();
struct.setMy_doubleIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 7:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.my_string=iprot.readString();
struct.setMy_stringIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 8:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.my_binary=iprot.readBinary();
struct.setMy_binaryIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 9:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map0=iprot.readMapBegin();
struct.my_string_string_map=new HashMap<String,String>(2 * _map0.size);
String _key1;
String _val2;
for (int _i3=0; _i3 < _map0.size; ++_i3) {
_key1=iprot.readString();
_val2=iprot.readString();
struct.my_string_string_map.put(_key1,_val2);
}
iprot.readMapEnd();
}
struct.setMy_string_string_mapIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 10:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map4=iprot.readMapBegin();
struct.my_string_enum_map=new HashMap<String,MyEnum>(2 * _map4.size);
String _key5;
MyEnum _val6;
for (int _i7=0; _i7 < _map4.size; ++_i7) {
_key5=iprot.readString();
_val6=org.apache.hadoop.hive.serde2.thrift.test.MyEnum.findByValue(iprot.readI32());
struct.my_string_enum_map.put(_key5,_val6);
}
iprot.readMapEnd();
}
struct.setMy_string_enum_mapIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 11:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map8=iprot.readMapBegin();
struct.my_enum_string_map=new HashMap<MyEnum,String>(2 * _map8.size);
MyEnum _key9;
String _val10;
for (int _i11=0; _i11 < _map8.size; ++_i11) {
_key9=org.apache.hadoop.hive.serde2.thrift.test.MyEnum.findByValue(iprot.readI32());
_val10=iprot.readString();
struct.my_enum_string_map.put(_key9,_val10);
}
iprot.readMapEnd();
}
struct.setMy_enum_string_mapIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 12:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map12=iprot.readMapBegin();
struct.my_enum_struct_map=new HashMap<MyEnum,MiniStruct>(2 * _map12.size);
MyEnum _key13;
MiniStruct _val14;
for (int _i15=0; _i15 < _map12.size; ++_i15) {
_key13=org.apache.hadoop.hive.serde2.thrift.test.MyEnum.findByValue(iprot.readI32());
_val14=new MiniStruct();
_val14.read(iprot);
struct.my_enum_struct_map.put(_key13,_val14);
}
iprot.readMapEnd();
}
struct.setMy_enum_struct_mapIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 13:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map16=iprot.readMapBegin();
struct.my_enum_stringlist_map=new HashMap<MyEnum,List<String>>(2 * _map16.size);
MyEnum _key17;
List<String> _val18;
for (int _i19=0; _i19 < _map16.size; ++_i19) {
_key17=org.apache.hadoop.hive.serde2.thrift.test.MyEnum.findByValue(iprot.readI32());
{
org.apache.thrift.protocol.TList _list20=iprot.readListBegin();
_val18=new ArrayList<String>(_list20.size);
String _elem21;
for (int _i22=0; _i22 < _list20.size; ++_i22) {
_elem21=iprot.readString();
_val18.add(_elem21);
}
iprot.readListEnd();
}
struct.my_enum_stringlist_map.put(_key17,_val18);
}
iprot.readMapEnd();
}
struct.setMy_enum_stringlist_mapIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 14:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map23=iprot.readMapBegin();
struct.my_enum_structlist_map=new HashMap<MyEnum,List<MiniStruct>>(2 * _map23.size);
MyEnum _key24;
List<MiniStruct> _val25;
for (int _i26=0; _i26 < _map23.size; ++_i26) {
_key24=org.apache.hadoop.hive.serde2.thrift.test.MyEnum.findByValue(iprot.readI32());
{
org.apache.thrift.protocol.TList _list27=iprot.readListBegin();
_val25=new ArrayList<MiniStruct>(_list27.size);
MiniStruct _elem28;
for (int _i29=0; _i29 < _list27.size; ++_i29) {
_elem28=new MiniStruct();
_elem28.read(iprot);
_val25.add(_elem28);
}
iprot.readListEnd();
}
struct.my_enum_structlist_map.put(_key24,_val25);
}
iprot.readMapEnd();
}
struct.setMy_enum_structlist_mapIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 15:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list30=iprot.readListBegin();
struct.my_stringlist=new ArrayList<String>(_list30.size);
String _elem31;
for (int _i32=0; _i32 < _list30.size; ++_i32) {
_elem31=iprot.readString();
struct.my_stringlist.add(_elem31);
}
iprot.readListEnd();
}
struct.setMy_stringlistIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 16:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list33=iprot.readListBegin();
struct.my_structlist=new ArrayList<MiniStruct>(_list33.size);
MiniStruct _elem34;
for (int _i35=0; _i35 < _list33.size; ++_i35) {
_elem34=new MiniStruct();
_elem34.read(iprot);
struct.my_structlist.add(_elem34);
}
iprot.readListEnd();
}
struct.setMy_structlistIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 17:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list36=iprot.readListBegin();
struct.my_enumlist=new ArrayList<MyEnum>(_list36.size);
MyEnum _elem37;
for (int _i38=0; _i38 < _list36.size; ++_i38) {
_elem37=org.apache.hadoop.hive.serde2.thrift.test.MyEnum.findByValue(iprot.readI32());
struct.my_enumlist.add(_elem37);
}
iprot.readListEnd();
}
struct.setMy_enumlistIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 18:
if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
{
org.apache.thrift.protocol.TSet _set39=iprot.readSetBegin();
struct.my_stringset=new HashSet<String>(2 * _set39.size);
String _elem40;
for (int _i41=0; _i41 < _set39.size; ++_i41) {
_elem40=iprot.readString();
struct.my_stringset.add(_elem40);
}
iprot.readSetEnd();
}
struct.setMy_stringsetIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 19:
if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
{
org.apache.thrift.protocol.TSet _set42=iprot.readSetBegin();
struct.my_enumset=new HashSet<MyEnum>(2 * _set42.size);
MyEnum _elem43;
for (int _i44=0; _i44 < _set42.size; ++_i44) {
_elem43=org.apache.hadoop.hive.serde2.thrift.test.MyEnum.findByValue(iprot.readI32());
struct.my_enumset.add(_elem43);
}
iprot.readSetEnd();
}
struct.setMy_enumsetIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 20:
if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
{
org.apache.thrift.protocol.TSet _set45=iprot.readSetBegin();
struct.my_structset=new HashSet<MiniStruct>(2 * _set45.size);
MiniStruct _elem46;
for (int _i47=0; _i47 < _set45.size; ++_i47) {
_elem46=new MiniStruct();
_elem46.read(iprot);
struct.my_structset.add(_elem46);
}
iprot.readSetEnd();
}
struct.setMy_structsetIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
