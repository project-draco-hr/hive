{
  StringBuilder sb=new StringBuilder("MegaStruct(");
  boolean first=true;
  if (isSetMy_bool()) {
    sb.append("my_bool:");
    sb.append(this.my_bool);
    first=false;
  }
  if (isSetMy_byte()) {
    if (!first)     sb.append(", ");
    sb.append("my_byte:");
    sb.append(this.my_byte);
    first=false;
  }
  if (isSetMy_16bit_int()) {
    if (!first)     sb.append(", ");
    sb.append("my_16bit_int:");
    sb.append(this.my_16bit_int);
    first=false;
  }
  if (isSetMy_32bit_int()) {
    if (!first)     sb.append(", ");
    sb.append("my_32bit_int:");
    sb.append(this.my_32bit_int);
    first=false;
  }
  if (isSetMy_64bit_int()) {
    if (!first)     sb.append(", ");
    sb.append("my_64bit_int:");
    sb.append(this.my_64bit_int);
    first=false;
  }
  if (isSetMy_double()) {
    if (!first)     sb.append(", ");
    sb.append("my_double:");
    sb.append(this.my_double);
    first=false;
  }
  if (isSetMy_string()) {
    if (!first)     sb.append(", ");
    sb.append("my_string:");
    if (this.my_string == null) {
      sb.append("null");
    }
 else {
      sb.append(this.my_string);
    }
    first=false;
  }
  if (isSetMy_binary()) {
    if (!first)     sb.append(", ");
    sb.append("my_binary:");
    if (this.my_binary == null) {
      sb.append("null");
    }
 else {
      org.apache.thrift.TBaseHelper.toString(this.my_binary,sb);
    }
    first=false;
  }
  if (isSetMy_string_string_map()) {
    if (!first)     sb.append(", ");
    sb.append("my_string_string_map:");
    if (this.my_string_string_map == null) {
      sb.append("null");
    }
 else {
      sb.append(this.my_string_string_map);
    }
    first=false;
  }
  if (isSetMy_string_enum_map()) {
    if (!first)     sb.append(", ");
    sb.append("my_string_enum_map:");
    if (this.my_string_enum_map == null) {
      sb.append("null");
    }
 else {
      sb.append(this.my_string_enum_map);
    }
    first=false;
  }
  if (isSetMy_enum_string_map()) {
    if (!first)     sb.append(", ");
    sb.append("my_enum_string_map:");
    if (this.my_enum_string_map == null) {
      sb.append("null");
    }
 else {
      sb.append(this.my_enum_string_map);
    }
    first=false;
  }
  if (isSetMy_enum_struct_map()) {
    if (!first)     sb.append(", ");
    sb.append("my_enum_struct_map:");
    if (this.my_enum_struct_map == null) {
      sb.append("null");
    }
 else {
      sb.append(this.my_enum_struct_map);
    }
    first=false;
  }
  if (isSetMy_enum_stringlist_map()) {
    if (!first)     sb.append(", ");
    sb.append("my_enum_stringlist_map:");
    if (this.my_enum_stringlist_map == null) {
      sb.append("null");
    }
 else {
      sb.append(this.my_enum_stringlist_map);
    }
    first=false;
  }
  if (isSetMy_enum_structlist_map()) {
    if (!first)     sb.append(", ");
    sb.append("my_enum_structlist_map:");
    if (this.my_enum_structlist_map == null) {
      sb.append("null");
    }
 else {
      sb.append(this.my_enum_structlist_map);
    }
    first=false;
  }
  if (isSetMy_stringlist()) {
    if (!first)     sb.append(", ");
    sb.append("my_stringlist:");
    if (this.my_stringlist == null) {
      sb.append("null");
    }
 else {
      sb.append(this.my_stringlist);
    }
    first=false;
  }
  if (isSetMy_structlist()) {
    if (!first)     sb.append(", ");
    sb.append("my_structlist:");
    if (this.my_structlist == null) {
      sb.append("null");
    }
 else {
      sb.append(this.my_structlist);
    }
    first=false;
  }
  if (isSetMy_enumlist()) {
    if (!first)     sb.append(", ");
    sb.append("my_enumlist:");
    if (this.my_enumlist == null) {
      sb.append("null");
    }
 else {
      sb.append(this.my_enumlist);
    }
    first=false;
  }
  if (isSetMy_stringset()) {
    if (!first)     sb.append(", ");
    sb.append("my_stringset:");
    if (this.my_stringset == null) {
      sb.append("null");
    }
 else {
      sb.append(this.my_stringset);
    }
    first=false;
  }
  if (isSetMy_enumset()) {
    if (!first)     sb.append(", ");
    sb.append("my_enumset:");
    if (this.my_enumset == null) {
      sb.append("null");
    }
 else {
      sb.append(this.my_enumset);
    }
    first=false;
  }
  if (isSetMy_structset()) {
    if (!first)     sb.append(", ");
    sb.append("my_structset:");
    if (this.my_structset == null) {
      sb.append("null");
    }
 else {
      sb.append(this.my_structset);
    }
    first=false;
  }
  sb.append(")");
  return sb.toString();
}
