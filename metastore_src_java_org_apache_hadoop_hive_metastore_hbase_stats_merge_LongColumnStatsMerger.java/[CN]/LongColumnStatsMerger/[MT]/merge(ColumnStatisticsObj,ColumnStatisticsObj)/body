{
  LongColumnStatsData aggregateData=aggregateColStats.getStatsData().getLongStats();
  LongColumnStatsData newData=newColStats.getStatsData().getLongStats();
  aggregateData.setLowValue(Math.min(aggregateData.getLowValue(),newData.getLowValue()));
  aggregateData.setHighValue(Math.max(aggregateData.getHighValue(),newData.getHighValue()));
  aggregateData.setNumNulls(aggregateData.getNumNulls() + newData.getNumNulls());
  if (ndvEstimator == null || !newData.isSetBitVectors() || newData.getBitVectors().length() == 0) {
    aggregateData.setNumDVs(Math.max(aggregateData.getNumDVs(),newData.getNumDVs()));
  }
 else {
    ndvEstimator.mergeEstimators(new NumDistinctValueEstimator(aggregateData.getBitVectors(),ndvEstimator.getnumBitVectors()));
    ndvEstimator.mergeEstimators(new NumDistinctValueEstimator(newData.getBitVectors(),ndvEstimator.getnumBitVectors()));
    long ndv=ndvEstimator.estimateNumDistinctValues();
    LOG.debug("Use bitvector to merge column " + aggregateColStats.getColName() + "'s ndvs of "+ aggregateData.getNumDVs()+ " and "+ newData.getNumDVs()+ " to be "+ ndv);
    aggregateData.setNumDVs(ndv);
    aggregateData.setBitVectors(ndvEstimator.serialize().toString());
  }
}
