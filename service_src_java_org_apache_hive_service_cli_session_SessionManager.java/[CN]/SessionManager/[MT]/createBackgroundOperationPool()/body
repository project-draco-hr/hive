{
  int poolSize=hiveConf.getIntVar(ConfVars.HIVE_SERVER2_ASYNC_EXEC_THREADS);
  LOG.info("HiveServer2: Background operation thread pool size: " + poolSize);
  int poolQueueSize=hiveConf.getIntVar(ConfVars.HIVE_SERVER2_ASYNC_EXEC_WAIT_QUEUE_SIZE);
  LOG.info("HiveServer2: Background operation thread wait queue size: " + poolQueueSize);
  long keepAliveTime=HiveConf.getTimeVar(hiveConf,ConfVars.HIVE_SERVER2_ASYNC_EXEC_KEEPALIVE_TIME,TimeUnit.SECONDS);
  LOG.info("HiveServer2: Background operation thread keepalive time: " + keepAliveTime + " seconds");
  String threadPoolName="HiveServer2-Background-Pool";
  final BlockingQueue queue=new LinkedBlockingQueue<Runnable>(poolQueueSize);
  backgroundOperationPool=new ThreadPoolExecutor(poolSize,poolSize,keepAliveTime,TimeUnit.SECONDS,queue,new ThreadFactoryWithGarbageCleanup(threadPoolName));
  backgroundOperationPool.allowCoreThreadTimeOut(true);
  checkInterval=HiveConf.getTimeVar(hiveConf,ConfVars.HIVE_SERVER2_SESSION_CHECK_INTERVAL,TimeUnit.MILLISECONDS);
  sessionTimeout=HiveConf.getTimeVar(hiveConf,ConfVars.HIVE_SERVER2_IDLE_SESSION_TIMEOUT,TimeUnit.MILLISECONDS);
  checkOperation=HiveConf.getBoolVar(hiveConf,ConfVars.HIVE_SERVER2_IDLE_SESSION_CHECK_OPERATION);
  Metrics m=MetricsFactory.getInstance();
  if (m != null) {
    m.addGauge(MetricsConstant.EXEC_ASYNC_QUEUE_SIZE,new MetricsVariable(){
      @Override public Object getValue(){
        return queue.size();
      }
    }
);
    m.addGauge(MetricsConstant.EXEC_ASYNC_POOL_SIZE,new MetricsVariable(){
      @Override public Object getValue(){
        return backgroundOperationPool.getPoolSize();
      }
    }
);
  }
}
