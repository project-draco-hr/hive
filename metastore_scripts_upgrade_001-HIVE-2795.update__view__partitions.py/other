from optparse import OptionGroup
from optparse import OptionParser
from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from hive_metastore import ThriftHiveMetastore
parser = OptionParser()
mandatory_options = OptionGroup(parser, 'Mandatory Settings', 'These must be set, they have no defaults')
mandatory_options.add_option('--file', action='store', type='string', dest='file', help=('file containing the list of view partitions ' + 'stored as db_name<sep>table_name<sep>part_name'))
parser.add_option_group(mandatory_options)
other_options = OptionGroup(parser, 'Other Options', 'These options all have default values')
other_options.add_option('--host', action='store', type='string', dest='host', default='localhost', help=('hostname of metastore server, ' + 'the default is localhost'))
other_options.add_option('--port', action='store', type='string', dest='port', default='9083', help='port for metastore server, the default is 9083')
other_options.add_option('--timeout', action='store', type='string', dest='timeout', default=None, help=('timeout for connection to metastore server, ' + "uses Thrift's default"))
other_options.add_option('--separator', action='store', type='string', dest='separator', default='\t', help=(('the separator between db_name, table_name, and ' + 'part_name in the file passed in, the default ') + 'is tab'))
parser.add_option_group(other_options)
(options, args) = parser.parse_args()
host = options.host
port = options.port
timeout = options.timeout
file = options.file
separator = options.separator
_socket = TSocket.TSocket(host, port)
_socket.setTimeout(timeout)
_transport = TTransport.TBufferedTransport(_socket)
_protocol = TBinaryProtocol.TBinaryProtocol(_transport)
client = ThriftHiveMetastore.Client(_protocol)
_transport.open()
partition_file = open(file, 'r')
db_name = ''
table_name = ''
part_name = ''
for line in partition_file:
    line = line.rstrip('\n\r')
    (db_name, table_name, part_name) = line.split(separator)
    print line
    partition = client.get_partition_by_name(db_name, table_name, part_name)
    client.drop_partition_by_name(db_name, table_name, part_name, 0)
    client.add_partition(partition)
