{
  Map<ColumnInfo,ExprNodeDesc> constants=new HashMap<ColumnInfo,ExprNodeDesc>();
  if (op.getSchema() == null) {
    return constants;
  }
  RowSchema rs=op.getSchema();
  LOG.debug("Getting constants of op:" + op + " with rs:"+ rs);
  if (op.getParentOperators() == null) {
    return constants;
  }
  if (op instanceof UnionOperator) {
    String alias=rs.getSignature().get(0).getTabAlias();
    Map<ColumnInfo,ExprNodeDesc> intersection=null;
    for (    Operator<?> parent : op.getParentOperators()) {
      Map<ColumnInfo,ExprNodeDesc> unionConst=opToConstantExprs.get(parent);
      LOG.debug("Constant of op " + parent.getOperatorId() + " "+ unionConst);
      if (intersection == null) {
        intersection=new HashMap<ColumnInfo,ExprNodeDesc>();
        for (        Entry<ColumnInfo,ExprNodeDesc> e : unionConst.entrySet()) {
          ColumnInfo ci=new ColumnInfo(e.getKey());
          ci.setTabAlias(alias);
          intersection.put(ci,e.getValue());
        }
      }
 else {
        Iterator<Entry<ColumnInfo,ExprNodeDesc>> itr=intersection.entrySet().iterator();
        while (itr.hasNext()) {
          Entry<ColumnInfo,ExprNodeDesc> e=itr.next();
          boolean found=false;
          for (          Entry<ColumnInfo,ExprNodeDesc> f : opToConstantExprs.get(parent).entrySet()) {
            if (e.getKey().getInternalName().equals(f.getKey().getInternalName())) {
              if (e.getValue().isSame(f.getValue())) {
                found=true;
              }
              break;
            }
          }
          if (!found) {
            itr.remove();
          }
        }
      }
      if (intersection.isEmpty()) {
        return intersection;
      }
    }
    LOG.debug("Propagated union constants:" + intersection);
    return intersection;
  }
  for (  Operator<? extends Serializable> parent : op.getParentOperators()) {
    Map<ColumnInfo,ExprNodeDesc> c=opToConstantExprs.get(parent);
    for (    Entry<ColumnInfo,ExprNodeDesc> e : c.entrySet()) {
      ColumnInfo ci=e.getKey();
      ColumnInfo rci=null;
      ExprNodeDesc constant=e.getValue();
      rci=resolve(ci,rs,parent.getSchema());
      if (rci != null) {
        constants.put(rci,constant);
      }
 else {
        LOG.debug("Can't resolve " + ci.getTabAlias() + "."+ ci.getAlias()+ "("+ ci.getInternalName()+ ") from rs:"+ rs);
      }
    }
  }
  LOG.debug("Offerring constants " + constants.keySet() + " to operator "+ op.toString());
  return constants;
}
