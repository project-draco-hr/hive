{
  Map<ColumnInfo,ExprNodeDesc> constants=new HashMap<ColumnInfo,ExprNodeDesc>();
  if (op.getSchema() == null) {
    return constants;
  }
  RowSchema rs=op.getSchema();
  LOG.debug("Getting constants of op:" + op + " with rs:"+ rs);
  if (op.getParentOperators() == null) {
    return constants;
  }
  List<Map<Integer,ExprNodeDesc>> parentsToConstant=new ArrayList<>();
  boolean areAllParentsContainConstant=true;
  boolean noParentsContainConstant=true;
  for (  Operator<?> parent : op.getParentOperators()) {
    Map<ColumnInfo,ExprNodeDesc> constMap=opToConstantExprs.get(parent);
    if (constMap == null) {
      LOG.debug("Constant of Op " + parent.getOperatorId() + " is not found");
      areAllParentsContainConstant=false;
    }
 else {
      noParentsContainConstant=false;
      Map<Integer,ExprNodeDesc> map=new HashMap<>();
      for (      Entry<ColumnInfo,ExprNodeDesc> entry : constMap.entrySet()) {
        map.put(parent.getSchema().getPosition(entry.getKey().getInternalName()),entry.getValue());
      }
      parentsToConstant.add(map);
      LOG.debug("Constant of Op " + parent.getOperatorId() + " "+ constMap);
    }
  }
  if (noParentsContainConstant) {
    return constants;
  }
  ArrayList<ColumnInfo> signature=op.getSchema().getSignature();
  if (op instanceof LimitOperator || op instanceof FilterOperator) {
    if (op.getParentOperators().size() == 1) {
      Map<Integer,ExprNodeDesc> parentToConstant=parentsToConstant.get(0);
      for (int index=0; index < signature.size(); index++) {
        if (parentToConstant.containsKey(index)) {
          constants.put(signature.get(index),parentToConstant.get(index));
        }
      }
    }
  }
 else   if (op instanceof UnionOperator && areAllParentsContainConstant) {
    for (int index=0; index < signature.size(); index++) {
      ExprNodeDesc constant=null;
      for (      Map<Integer,ExprNodeDesc> parentToConstant : parentsToConstant) {
        if (!parentToConstant.containsKey(index)) {
          constant=null;
          break;
        }
 else {
          if (constant == null) {
            constant=parentToConstant.get(index);
          }
 else {
            ExprNodeDesc nextConstant=parentToConstant.get(index);
            if (!nextConstant.isSame(constant)) {
              constant=null;
              break;
            }
          }
        }
      }
      if (constant != null) {
        constants.put(signature.get(index),constant);
      }
    }
  }
 else   if (op instanceof JoinOperator) {
    JoinOperator joinOp=(JoinOperator)op;
    Iterator<Entry<Byte,List<ExprNodeDesc>>> itr=joinOp.getConf().getExprs().entrySet().iterator();
    while (itr.hasNext()) {
      Entry<Byte,List<ExprNodeDesc>> e=itr.next();
      int tag=e.getKey();
      Operator<?> parent=op.getParentOperators().get(tag);
      List<ExprNodeDesc> exprs=e.getValue();
      if (exprs == null) {
        continue;
      }
      for (      ExprNodeDesc expr : exprs) {
        if (expr instanceof ExprNodeColumnDesc) {
          String parentColName=((ExprNodeColumnDesc)expr).getColumn();
          int parentPos=parent.getSchema().getPosition(parentColName);
          if (parentsToConstant.get(tag).containsKey(parentPos)) {
            if (op.getColumnExprMap() != null && op.getColumnExprMap().entrySet() != null) {
              for (              Entry<String,ExprNodeDesc> entry : op.getColumnExprMap().entrySet()) {
                if (entry.getValue().isSame(expr)) {
                  constants.put(signature.get(op.getSchema().getPosition(entry.getKey())),parentsToConstant.get(tag).get(parentPos));
                }
              }
            }
          }
        }
      }
    }
  }
 else {
    if (op.getParentOperators().size() == 1) {
      Operator<?> parent=op.getParentOperators().get(0);
      if (op.getColumnExprMap() != null && op.getColumnExprMap().entrySet() != null) {
        for (        Entry<String,ExprNodeDesc> entry : op.getColumnExprMap().entrySet()) {
          if (op.getSchema().getPosition(entry.getKey()) == -1) {
            continue;
          }
          ExprNodeDesc expr=entry.getValue();
          if (expr instanceof ExprNodeColumnDesc) {
            String parentColName=((ExprNodeColumnDesc)expr).getColumn();
            int parentPos=parent.getSchema().getPosition(parentColName);
            if (parentsToConstant.get(0).containsKey(parentPos)) {
              constants.put(signature.get(op.getSchema().getPosition(entry.getKey())),parentsToConstant.get(0).get(parentPos));
            }
          }
        }
      }
    }
  }
  LOG.debug("Offerring constants " + constants.keySet() + " to operator "+ op.toString());
  return constants;
}
