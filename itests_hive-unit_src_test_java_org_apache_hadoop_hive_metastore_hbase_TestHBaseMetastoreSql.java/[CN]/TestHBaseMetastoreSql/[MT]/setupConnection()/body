{
  MockitoAnnotations.initMocks(this);
  Mockito.when(hconn.getHBaseTable(HBaseReadWrite.SD_TABLE)).thenReturn(sdTable);
  Mockito.when(hconn.getHBaseTable(HBaseReadWrite.TABLE_TABLE)).thenReturn(tblTable);
  Mockito.when(hconn.getHBaseTable(HBaseReadWrite.PART_TABLE)).thenReturn(partTable);
  Mockito.when(hconn.getHBaseTable(HBaseReadWrite.DB_TABLE)).thenReturn(dbTable);
  Mockito.when(hconn.getHBaseTable(HBaseReadWrite.ROLE_TABLE)).thenReturn(roleTable);
  Mockito.when(hconn.getHBaseTable(HBaseReadWrite.GLOBAL_PRIVS_TABLE)).thenReturn(globalPrivsTable);
  Mockito.when(hconn.getHBaseTable(HBaseReadWrite.USER_TO_ROLE_TABLE)).thenReturn(principalRoleMapTable);
  conf=new HiveConf();
  conf.setVar(HiveConf.ConfVars.METASTORE_HBASE_CONNECTION_CLASS,HBaseReadWrite.TEST_CONN);
  conf.setVar(HiveConf.ConfVars.DYNAMICPARTITIONINGMODE,"nonstrict");
  conf.setVar(HiveConf.ConfVars.METASTORE_RAW_STORE_IMPL,"org.apache.hadoop.hive.metastore.hbase.HBaseStore");
  conf.setBoolVar(HiveConf.ConfVars.METASTORE_FASTPATH,true);
  conf.setBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY,false);
  HBaseReadWrite.setTestConnection(hconn);
  SessionState.start(new CliSessionState(conf));
  driver=new Driver(conf);
}
