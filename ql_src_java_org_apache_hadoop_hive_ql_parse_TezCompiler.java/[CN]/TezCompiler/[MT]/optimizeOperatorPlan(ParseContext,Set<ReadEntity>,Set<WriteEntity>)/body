{
  Deque<Operator<?>> deque=new LinkedList<Operator<?>>();
  deque.addAll(pCtx.getTopOps().values());
  OptimizeTezProcContext procCtx=new OptimizeTezProcContext(conf,pCtx,inputs,outputs,deque);
  Map<Rule,NodeProcessor> opRules=new LinkedHashMap<Rule,NodeProcessor>();
  opRules.put(new RuleRegExp(new String("Set parallelism - ReduceSink"),ReduceSinkOperator.getOperatorName() + "%"),new SetReducerParallelism());
  opRules.put(new RuleRegExp(new String("Convert Join to Map-join"),JoinOperator.getOperatorName() + "%"),new ConvertJoinMapJoin());
  if (pCtx.getContext().getExplain()) {
    opRules.put(new RuleRegExp(new String("Set statistics - FileSink"),FileSinkOperator.getOperatorName() + "%"),new SetStatistics());
  }
  Dispatcher disp=new DefaultRuleDispatcher(null,opRules,procCtx);
  List<Node> topNodes=new ArrayList<Node>();
  topNodes.addAll(pCtx.getTopOps().values());
  GraphWalker ogw=new TezWalker(disp);
  ogw.startWalking(topNodes,null);
}
