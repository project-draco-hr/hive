{
  Deque<Operator<?>> deque=new LinkedList<Operator<?>>();
  deque.addAll(procCtx.parseContext.getTopOps().values());
  Map<Rule,NodeProcessor> opRules=new LinkedHashMap<Rule,NodeProcessor>();
  opRules.put(new RuleRegExp("Set parallelism - ReduceSink",ReduceSinkOperator.getOperatorName() + "%"),new SetReducerParallelism());
  opRules.put(new RuleRegExp("Convert Join to Map-join",JoinOperator.getOperatorName() + "%"),new ConvertJoinMapJoin());
  opRules.put(new RuleRegExp("Remove dynamic pruning by size",AppMasterEventOperator.getOperatorName() + "%"),new RemoveDynamicPruningBySize());
  Dispatcher disp=new DefaultRuleDispatcher(null,opRules,procCtx);
  List<Node> topNodes=new ArrayList<Node>();
  topNodes.addAll(procCtx.parseContext.getTopOps().values());
  GraphWalker ogw=new ForwardWalker(disp);
  ogw.startWalking(topNodes,null);
}
