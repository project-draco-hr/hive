{
  if (!procCtx.conf.getBoolVar(ConfVars.TEZ_DYNAMIC_PARTITION_PRUNING)) {
    return;
  }
  Deque<Operator<?>> deque=new LinkedList<Operator<?>>();
  deque.addAll(procCtx.parseContext.getTopOps().values());
  Map<Rule,NodeProcessor> opRules=new LinkedHashMap<Rule,NodeProcessor>();
  opRules.put(new RuleRegExp(new String("Dynamic Partition Pruning"),FilterOperator.getOperatorName() + "%"),new DynamicPartitionPruningOptimization());
  Dispatcher disp=new DefaultRuleDispatcher(null,opRules,procCtx);
  List<Node> topNodes=new ArrayList<Node>();
  topNodes.addAll(procCtx.parseContext.getTopOps().values());
  GraphWalker ogw=new ForwardWalker(disp);
  ogw.startWalking(topNodes,null);
  if (procCtx.conf.getBoolVar(ConfVars.HIVEOPTCONSTANTPROPAGATION)) {
    new ConstantPropagate(ConstantPropagateOption.SHORTCUT).transform(procCtx.parseContext);
  }
}
