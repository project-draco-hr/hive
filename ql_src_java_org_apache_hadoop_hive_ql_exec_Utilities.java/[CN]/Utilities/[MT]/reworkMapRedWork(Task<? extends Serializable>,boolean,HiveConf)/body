{
  if (reworkMapredWork && (task instanceof MapRedTask)) {
    try {
      MapredWork mapredWork=((MapRedTask)task).getWork();
      Set<Class<? extends InputFormat>> reworkInputFormats=new HashSet<Class<? extends InputFormat>>();
      for (      PartitionDesc part : mapredWork.getPathToPartitionInfo().values()) {
        Class<? extends InputFormat> inputFormatCls=part.getInputFileFormatClass();
        if (ReworkMapredInputFormat.class.isAssignableFrom(inputFormatCls)) {
          reworkInputFormats.add(inputFormatCls);
        }
      }
      if (reworkInputFormats.size() > 0) {
        for (        Class<? extends InputFormat> inputFormatCls : reworkInputFormats) {
          ReworkMapredInputFormat inst=(ReworkMapredInputFormat)ReflectionUtils.newInstance(inputFormatCls,null);
          inst.rework(conf,mapredWork);
        }
      }
    }
 catch (    IOException e) {
      throw new SemanticException(e);
    }
  }
}
