{
  if (oi.getCategory() != ObjectInspector.Category.STRUCT) {
    throw new HiveException("Unexpected object type encountered while unpacking row");
  }
  String dbName=SessionState.get().getCurrentDatabase();
  String tableName=work.getColStats().getTableName();
  String partName=null;
  List<String> colName=work.getColStats().getColName();
  List<String> colType=work.getColStats().getColType();
  boolean isTblLevel=work.getColStats().isTblLevel();
  if (!isTblLevel) {
    partName=work.getColStats().getPartName();
  }
  ColumnStatisticsDesc statsDesc=getColumnStatsDesc(dbName,tableName,partName,isTblLevel);
  List<ColumnStatisticsObj> statsObjs=new ArrayList<ColumnStatisticsObj>();
  StructObjectInspector soi=(StructObjectInspector)oi;
  List<? extends StructField> fields=soi.getAllStructFieldRefs();
  List<Object> list=soi.getStructFieldsDataAsList(o);
  for (int i=0; i < fields.size(); i++) {
    ObjectInspector foi=fields.get(i).getFieldObjectInspector();
    Object f=(list == null ? null : list.get(i));
    String fieldName=fields.get(i).getFieldName();
    ColumnStatisticsObj statsObj=new ColumnStatisticsObj();
    statsObj.setColName(colName.get(i));
    statsObj.setColType(colType.get(i));
    unpackStructObject(foi,f,fieldName,statsObj);
    statsObjs.add(statsObj);
  }
  ColumnStatistics colStats=new ColumnStatistics();
  colStats.setStatsDesc(statsDesc);
  colStats.setStatsObj(statsObjs);
  return colStats;
}
