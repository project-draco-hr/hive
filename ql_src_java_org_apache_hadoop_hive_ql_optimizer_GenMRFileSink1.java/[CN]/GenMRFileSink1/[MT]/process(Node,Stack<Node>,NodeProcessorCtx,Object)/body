{
  GenMRProcContext ctx=(GenMRProcContext)opProcCtx;
  ParseContext parseCtx=ctx.getParseCtx();
  boolean chDir=false;
  Task<? extends Serializable> currTask=ctx.getCurrTask();
  ctx.addRootIfPossible(currTask);
  FileSinkOperator fsOp=(FileSinkOperator)nd;
  boolean isInsertTable=fsOp.getConf().getTableInfo().getTableName() != null && parseCtx.getQB().getParseInfo().isInsertToTable();
  HiveConf hconf=parseCtx.getConf();
  ((MapredWork)currTask.getWork()).setFinalMapRed(true);
  Map<FileSinkDesc,Task<? extends Serializable>> fileSinkDescs=ctx.getLinkedFileDescTasks();
  if (fileSinkDescs != null) {
    Task<? extends Serializable> childTask=fileSinkDescs.get(fsOp.getConf());
    processLinkedFileDesc(ctx,childTask);
    return true;
  }
  if ((ctx.getMvTask() != null) && (!ctx.getMvTask().isEmpty())) {
    List<Task<MoveWork>> mvTasks=ctx.getMvTask();
    if ((ctx.getSeenFileSinkOps() == null) || (!ctx.getSeenFileSinkOps().contains(nd))) {
      MoveTask mvTask=(MoveTask)findMoveTask(mvTasks,fsOp);
      if (isInsertTable && hconf.getBoolVar(ConfVars.HIVESTATSAUTOGATHER)) {
        addStatsTask(fsOp,mvTask,currTask,parseCtx.getConf());
      }
      if ((mvTask != null) && !mvTask.isLocal() && fsOp.getConf().canBeMerged()) {
        if (fsOp.getConf().isLinkedFileSink()) {
          if (hconf.getBoolVar(ConfVars.HIVEMERGEMAPFILES) || hconf.getBoolVar(ConfVars.HIVEMERGEMAPREDFILES)) {
            chDir=true;
          }
        }
 else {
          MapredWork currWork=(MapredWork)currTask.getWork();
          boolean mergeMapOnly=hconf.getBoolVar(ConfVars.HIVEMERGEMAPFILES) && currWork.getReducer() == null;
          boolean mergeMapRed=hconf.getBoolVar(ConfVars.HIVEMERGEMAPREDFILES) && currWork.getReducer() != null;
          if (mergeMapOnly || mergeMapRed) {
            chDir=true;
          }
        }
      }
    }
  }
  String finalName=processFS(fsOp,stack,opProcCtx,chDir);
  if (chDir) {
    LOG.info("using CombineHiveInputformat for the merge job");
    createMRWorkForMergingFiles(fsOp,ctx,finalName);
  }
  FileSinkDesc fileSinkDesc=fsOp.getConf();
  if (fileSinkDesc.isLinkedFileSink()) {
    Map<FileSinkDesc,Task<? extends Serializable>> linkedFileDescTasks=ctx.getLinkedFileDescTasks();
    if (linkedFileDescTasks == null) {
      linkedFileDescTasks=new HashMap<FileSinkDesc,Task<? extends Serializable>>();
      ctx.setLinkedFileDescTasks(linkedFileDescTasks);
    }
    if ((currTask.getChildTasks() != null) && (currTask.getChildTasks().size() == 1)) {
      for (      FileSinkDesc fileDesc : fileSinkDesc.getLinkedFileSinkDesc()) {
        linkedFileDescTasks.put(fileDesc,currTask.getChildTasks().get(0));
      }
    }
  }
  return true;
}
