{
  GenMRProcContext ctx=(GenMRProcContext)opProcCtx;
  boolean ret=false;
  Task<? extends Serializable> mvTask=ctx.getMvTask();
  Task<? extends Serializable> currTask=ctx.getCurrTask();
  Operator<? extends Serializable> currTopOp=ctx.getCurrTopOp();
  String currAliasId=ctx.getCurrAliasId();
  HashMap<Operator<? extends Serializable>,Task<? extends Serializable>> opTaskMap=ctx.getOpTaskMap();
  List<Operator<? extends Serializable>> seenOps=ctx.getSeenOps();
  List<Task<? extends Serializable>> rootTasks=ctx.getRootTasks();
  if (mvTask != null)   ret=currTask.addDependentTask(mvTask);
  if (currTopOp != null) {
    Task<? extends Serializable> mapTask=opTaskMap.get(null);
    if (mapTask == null) {
      assert(!seenOps.contains(currTopOp));
      seenOps.add(currTopOp);
      GenMapRedUtils.setTaskPlan(currAliasId,currTopOp,(mapredWork)currTask.getWork(),false,ctx);
      opTaskMap.put(null,currTask);
      rootTasks.add(currTask);
    }
 else {
      if (!seenOps.contains(currTopOp)) {
        seenOps.add(currTopOp);
        GenMapRedUtils.setTaskPlan(currAliasId,currTopOp,(mapredWork)mapTask.getWork(),false,ctx);
      }
      if (ret)       currTask.removeDependentTask(mvTask);
    }
  }
  return null;
}
