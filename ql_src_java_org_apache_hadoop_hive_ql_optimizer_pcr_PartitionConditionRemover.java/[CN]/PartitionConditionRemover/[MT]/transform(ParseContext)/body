{
  List<PcrOpWalkerCtx.OpToDeleteInfo> opToRemove=new ArrayList<PcrOpWalkerCtx.OpToDeleteInfo>();
  PcrOpWalkerCtx opWalkerCtx=new PcrOpWalkerCtx(pctx,opToRemove);
  Map<Rule,NodeProcessor> opRules=new LinkedHashMap<Rule,NodeProcessor>();
  opRules.put(new RuleRegExp("R1","(TS%FIL%)|(TS%FIL%FIL%)"),PcrOpProcFactory.getFilterProc());
  Dispatcher disp=new DefaultRuleDispatcher(PcrOpProcFactory.getDefaultProc(),opRules,opWalkerCtx);
  GraphWalker ogw=new DefaultGraphWalker(disp);
  ArrayList<Node> topNodes=new ArrayList<Node>();
  topNodes.addAll(pctx.getTopOps().values());
  ogw.startWalking(topNodes,null);
  for (  PcrOpWalkerCtx.OpToDeleteInfo entry : opToRemove) {
    entry.getParent().removeChildAndAdoptItsChildren(entry.getOperator());
  }
  return pctx;
}
