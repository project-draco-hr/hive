{
  FileSinkOperator fsOp=(FileSinkOperator)nd;
  ExtractOperator exOp=(ExtractOperator)fsOp.getParentOperators().get(0);
  ReduceSinkOperator rsOp=(ReduceSinkOperator)exOp.getParentOperators().get(0);
  List<ReduceSinkOperator> rsOps=pGraphContext.getReduceSinkOperatorsAddedByEnforceBucketingSorting();
  if ((rsOps != null) && (!rsOps.contains(rsOp))) {
    return null;
  }
  if (fsOp.getConf().getDynPartCtx() != null) {
    return null;
  }
  for (  ExprNodeDesc keyCol : rsOp.getConf().getKeyCols()) {
    if (!(keyCol instanceof ExprNodeColumnDesc)) {
      return null;
    }
  }
  Table destTable=pGraphContext.getFsopToTable().get(fsOp);
  if (destTable == null) {
    return null;
  }
  List<Integer> bucketPositions=getBucketPositions(destTable.getBucketCols(),destTable.getCols());
  List<ObjectPair<Integer,Integer>> sortPositions=getSortPositions(destTable.getSortCols(),destTable.getCols());
  Operator<? extends OperatorDesc> op=rsOp;
  List<ExprNodeColumnDesc> sourceTableBucketCols=new ArrayList<ExprNodeColumnDesc>();
  List<ExprNodeColumnDesc> sourceTableSortCols=new ArrayList<ExprNodeColumnDesc>();
  while (true) {
    if (op.getParentOperators().size() > 1) {
      return null;
    }
    op=op.getParentOperators().get(0);
    if (!(op instanceof TableScanOperator) && !(op instanceof FilterOperator) && !(op instanceof SelectOperator)) {
      return null;
    }
    if (op instanceof TableScanOperator) {
      Table srcTable=pGraphContext.getTopToTable().get(op);
      List<Integer> newBucketPositions=new ArrayList<Integer>();
      for (int pos=0; pos < bucketPositions.size(); pos++) {
        ExprNodeColumnDesc col=sourceTableBucketCols.get(pos);
        String colName=col.getColumn();
        int bucketPos=findColumnPosition(srcTable.getCols(),colName);
        if (bucketPos < 0) {
          return null;
        }
        newBucketPositions.add(bucketPos);
      }
      List<ObjectPair<Integer,Integer>> newSortPositions=new ArrayList<ObjectPair<Integer,Integer>>();
      for (int pos=0; pos < sortPositions.size(); pos++) {
        ExprNodeColumnDesc col=sourceTableSortCols.get(pos);
        String colName=col.getColumn();
        int sortPos=findColumnPosition(srcTable.getCols(),colName);
        if (sortPos < 0) {
          return null;
        }
        newSortPositions.add(new ObjectPair<Integer,Integer>(sortPos,sortPositions.get(pos).getSecond()));
      }
      if (srcTable.isPartitioned()) {
        PrunedPartitionList prunedParts=pGraphContext.getOpToPartList().get(op);
        List<Partition> partitions=prunedParts.getNotDeniedPartns();
        if ((partitions == null) || (partitions.isEmpty()) || (partitions.size() > 1)) {
          return null;
        }
        for (        Partition partition : partitions) {
          if (!checkPartition(partition,newBucketPositions,newSortPositions,pGraphContext.getFsopToTable().get(fsOp).getNumBuckets())) {
            return null;
          }
        }
        removeReduceSink(rsOp,(TableScanOperator)op,fsOp,partitions.get(0).getSortedPaths());
        return null;
      }
 else {
        if (!checkTable(srcTable,newBucketPositions,newSortPositions,pGraphContext.getFsopToTable().get(fsOp).getNumBuckets())) {
          return null;
        }
        removeReduceSink(rsOp,(TableScanOperator)op,fsOp,srcTable.getSortedPaths());
        return null;
      }
    }
 else     if (op instanceof SelectOperator) {
      SelectOperator selectOp=(SelectOperator)op;
      SelectDesc selectDesc=selectOp.getConf();
      sourceTableBucketCols.clear();
      sourceTableSortCols.clear();
      for (      int pos : bucketPositions) {
        ExprNodeDesc selectColList=selectDesc.getColList().get(pos);
        if (!(selectColList instanceof ExprNodeColumnDesc)) {
          return null;
        }
        sourceTableBucketCols.add((ExprNodeColumnDesc)selectColList);
      }
      for (      ObjectPair<Integer,Integer> pos : sortPositions) {
        ExprNodeDesc selectColList=selectDesc.getColList().get(pos.getFirst());
        if (!(selectColList instanceof ExprNodeColumnDesc)) {
          return null;
        }
        sourceTableSortCols.add((ExprNodeColumnDesc)selectColList);
      }
    }
  }
}
