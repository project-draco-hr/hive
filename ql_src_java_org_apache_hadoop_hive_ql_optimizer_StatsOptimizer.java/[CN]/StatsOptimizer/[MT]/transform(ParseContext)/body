{
  if (pctx.getFetchTask() != null || !pctx.getQueryProperties().isQuery() || pctx.getQueryProperties().isAnalyzeRewrite() || pctx.getQueryProperties().isCTAS() || pctx.getLoadFileWork().size() > 1 || !pctx.getLoadTableWork().isEmpty() || !pctx.getNameToSplitSample().isEmpty()) {
    return pctx;
  }
  String TS=TableScanOperator.getOperatorName() + "%";
  String GBY=GroupByOperator.getOperatorName() + "%";
  String RS=ReduceSinkOperator.getOperatorName() + "%";
  String SEL=SelectOperator.getOperatorName() + "%";
  String FS=FileSinkOperator.getOperatorName() + "%";
  Map<Rule,NodeProcessor> opRules=new LinkedHashMap<Rule,NodeProcessor>();
  opRules.put(new RuleRegExp("R1",TS + SEL + GBY+ RS+ GBY+ SEL+ FS),new MetaDataProcessor(pctx));
  opRules.put(new RuleRegExp("R2",TS + SEL + GBY+ RS+ GBY+ FS),new MetaDataProcessor(pctx));
  NodeProcessorCtx soProcCtx=new StatsOptimizerProcContext();
  Dispatcher disp=new DefaultRuleDispatcher(null,opRules,soProcCtx);
  GraphWalker ogw=new DefaultGraphWalker(disp);
  ArrayList<Node> topNodes=new ArrayList<Node>();
  topNodes.addAll(pctx.getTopOps().values());
  ogw.startWalking(topNodes,null);
  return pctx;
}
