{
  StatsOptimizerProcContext soProcCtx=(StatsOptimizerProcContext)procCtx;
  if (soProcCtx.stopProcess) {
    return null;
  }
  boolean isOptimized=false;
  try {
    TableScanOperator tsOp=(TableScanOperator)stack.get(0);
    if (tsOp.getNumParent() > 0) {
      return null;
    }
    if (tsOp.getConf().getRowLimit() != -1) {
      return null;
    }
    SelectOperator pselOp=(SelectOperator)stack.get(1);
    for (    ExprNodeDesc desc : pselOp.getConf().getColList()) {
      if (!((desc instanceof ExprNodeColumnDesc) || (desc instanceof ExprNodeConstantDesc))) {
        return null;
      }
    }
    Map<String,ExprNodeDesc> exprMap=pselOp.getColumnExprMap();
    GroupByOperator pgbyOp=(GroupByOperator)stack.get(2);
    if (!hasNullOrConstantGbyKey(pgbyOp)) {
      return null;
    }
    ReduceSinkOperator rsOp=(ReduceSinkOperator)stack.get(3);
    if (rsOp.getConf().getDistinctColumnIndices().size() > 0) {
      return null;
    }
    GroupByOperator cgbyOp=(GroupByOperator)stack.get(4);
    if (!hasNullOrConstantGbyKey(cgbyOp)) {
      return null;
    }
    Operator<?> last=(Operator<?>)stack.get(5);
    SelectOperator cselOp=null;
    Map<Integer,Object> posToConstant=new HashMap<>();
    if (last instanceof SelectOperator) {
      cselOp=(SelectOperator)last;
      if (!cselOp.isIdentitySelect()) {
        for (int pos=0; pos < cselOp.getConf().getColList().size(); pos++) {
          ExprNodeDesc desc=cselOp.getConf().getColList().get(pos);
          if (desc instanceof ExprNodeConstantDesc) {
            posToConstant.put(pos,((ExprNodeConstantDesc)desc).getValue());
          }
 else {
            if (!(desc instanceof ExprNodeColumnDesc)) {
              return null;
            }
          }
        }
      }
      last=(Operator<?>)stack.get(6);
    }
    FileSinkOperator fsOp=(FileSinkOperator)last;
    if (fsOp.getNumChild() > 0) {
      return null;
    }
    Table tbl=tsOp.getConf().getTableMetadata();
    List<Object> oneRow=new ArrayList<Object>();
    Hive hive=Hive.get(pctx.getConf());
    for (    AggregationDesc aggr : pgbyOp.getConf().getAggregators()) {
      if (aggr.getDistinct()) {
        return null;
      }
      GenericUDAFResolver udaf=FunctionRegistry.getGenericUDAFResolver(aggr.getGenericUDAFName());
      if (udaf instanceof GenericUDAFSum) {
        ExprNodeDesc desc=aggr.getParameters().get(0);
        PrimitiveCategory category=GenericUDAFSum.getReturnType(desc.getTypeInfo());
        if (category == null) {
          return null;
        }
        String constant;
        if (desc instanceof ExprNodeConstantDesc) {
          constant=((ExprNodeConstantDesc)desc).getValue().toString();
        }
 else         if (desc instanceof ExprNodeColumnDesc && exprMap.get(((ExprNodeColumnDesc)desc).getColumn()) instanceof ExprNodeConstantDesc) {
          constant=((ExprNodeConstantDesc)exprMap.get(((ExprNodeColumnDesc)desc).getColumn())).getValue().toString();
        }
 else {
          return null;
        }
        Long rowCnt=getRowCnt(pctx,tsOp,tbl);
        if (rowCnt == null) {
          return null;
        }
switch (category) {
case LONG:
          oneRow.add(Long.valueOf(constant) * rowCnt);
        break;
case DOUBLE:
      oneRow.add(Double.valueOf(constant) * rowCnt);
    break;
case DECIMAL:
  oneRow.add(HiveDecimal.create(constant).multiply(HiveDecimal.create(rowCnt)));
break;
default :
throw new IllegalStateException("never");
}
}
 else if (udaf instanceof GenericUDAFCount) {
Long rowCnt=0L;
if (aggr.getParameters().isEmpty() || aggr.getParameters().get(0) instanceof ExprNodeConstantDesc || ((aggr.getParameters().get(0) instanceof ExprNodeColumnDesc) && exprMap.get(((ExprNodeColumnDesc)aggr.getParameters().get(0)).getColumn()) instanceof ExprNodeConstantDesc)) {
rowCnt=getRowCnt(pctx,tsOp,tbl);
if (rowCnt == null) {
return null;
}
}
 else {
ExprNodeColumnDesc desc=(ExprNodeColumnDesc)exprMap.get(((ExprNodeColumnDesc)aggr.getParameters().get(0)).getColumn());
String colName=desc.getColumn();
StatType type=getType(desc.getTypeString());
if (!tbl.isPartitioned()) {
if (!StatsSetupConst.areBasicStatsUptoDate(tbl.getParameters())) {
Logger.debug("Stats for table : " + tbl.getTableName() + " are not up to date.");
return null;
}
rowCnt=Long.parseLong(tbl.getProperty(StatsSetupConst.ROW_COUNT));
if (rowCnt == null) {
Logger.debug("Table doesn't have up to date stats " + tbl.getTableName());
return null;
}
if (!StatsSetupConst.areColumnStatsUptoDate(tbl.getParameters(),colName)) {
Logger.debug("Stats for table : " + tbl.getTableName() + " column "+ colName+ " are not up to date.");
return null;
}
List<ColumnStatisticsObj> stats=hive.getMSC().getTableColumnStatistics(tbl.getDbName(),tbl.getTableName(),Lists.newArrayList(colName));
if (stats.isEmpty()) {
Logger.debug("No stats for " + tbl.getTableName() + " column "+ colName);
return null;
}
Long nullCnt=getNullcountFor(type,stats.get(0).getStatsData());
if (null == nullCnt) {
Logger.debug("Unsupported type: " + desc.getTypeString() + " encountered in "+ "metadata optimizer for column : "+ colName);
return null;
}
 else {
rowCnt-=nullCnt;
}
}
 else {
Set<Partition> parts=pctx.getPrunedPartitions(tsOp.getConf().getAlias(),tsOp).getPartitions();
for (Partition part : parts) {
if (!StatsSetupConst.areBasicStatsUptoDate(part.getParameters())) {
  Logger.debug("Stats for part : " + part.getSpec() + " are not up to date.");
  return null;
}
Long partRowCnt=Long.parseLong(part.getParameters().get(StatsSetupConst.ROW_COUNT));
if (partRowCnt == null) {
  Logger.debug("Partition doesn't have up to date stats " + part.getSpec());
  return null;
}
rowCnt+=partRowCnt;
}
Collection<List<ColumnStatisticsObj>> result=verifyAndGetPartColumnStats(hive,tbl,colName,parts);
if (result == null) {
return null;
}
for (List<ColumnStatisticsObj> statObj : result) {
ColumnStatisticsData statData=validateSingleColStat(statObj);
if (statData == null) return null;
Long nullCnt=getNullcountFor(type,statData);
if (nullCnt == null) {
  Logger.debug("Unsupported type: " + desc.getTypeString() + " encountered in "+ "metadata optimizer for column : "+ colName);
  return null;
}
 else {
  rowCnt-=nullCnt;
}
}
}
}
oneRow.add(rowCnt);
}
 else if (udaf instanceof GenericUDAFMax) {
ExprNodeColumnDesc colDesc=(ExprNodeColumnDesc)exprMap.get(((ExprNodeColumnDesc)aggr.getParameters().get(0)).getColumn());
String colName=colDesc.getColumn();
StatType type=getType(colDesc.getTypeString());
if (!tbl.isPartitioned()) {
if (!StatsSetupConst.areColumnStatsUptoDate(tbl.getParameters(),colName)) {
Logger.debug("Stats for table : " + tbl.getTableName() + " column "+ colName+ " are not up to date.");
return null;
}
List<ColumnStatisticsObj> stats=hive.getMSC().getTableColumnStatistics(tbl.getDbName(),tbl.getTableName(),Lists.newArrayList(colName));
if (stats.isEmpty()) {
Logger.debug("No stats for " + tbl.getTableName() + " column "+ colName);
return null;
}
ColumnStatisticsData statData=stats.get(0).getStatsData();
String name=colDesc.getTypeString().toUpperCase();
switch (type) {
case Integeral:
{
LongSubType subType=LongSubType.valueOf(name);
LongColumnStatsData lstats=statData.getLongStats();
if (lstats.isSetHighValue()) {
  oneRow.add(subType.cast(lstats.getHighValue()));
}
 else {
  oneRow.add(null);
}
break;
}
case Double:
{
DoubleSubType subType=DoubleSubType.valueOf(name);
DoubleColumnStatsData dstats=statData.getDoubleStats();
if (dstats.isSetHighValue()) {
oneRow.add(subType.cast(dstats.getHighValue()));
}
 else {
oneRow.add(null);
}
break;
}
default :
Logger.debug("Unsupported type: " + colDesc.getTypeString() + " encountered in "+ "metadata optimizer for column : "+ colName);
return null;
}
}
 else {
Set<Partition> parts=pctx.getPrunedPartitions(tsOp.getConf().getAlias(),tsOp).getPartitions();
String name=colDesc.getTypeString().toUpperCase();
switch (type) {
case Integeral:
{
LongSubType subType=LongSubType.valueOf(name);
Long maxVal=null;
Collection<List<ColumnStatisticsObj>> result=verifyAndGetPartColumnStats(hive,tbl,colName,parts);
if (result == null) {
return null;
}
for (List<ColumnStatisticsObj> statObj : result) {
ColumnStatisticsData statData=validateSingleColStat(statObj);
if (statData == null) return null;
LongColumnStatsData lstats=statData.getLongStats();
if (!lstats.isSetHighValue()) {
continue;
}
long curVal=lstats.getHighValue();
maxVal=maxVal == null ? curVal : Math.max(maxVal,curVal);
}
if (maxVal != null) {
oneRow.add(subType.cast(maxVal));
}
 else {
oneRow.add(maxVal);
}
break;
}
case Double:
{
DoubleSubType subType=DoubleSubType.valueOf(name);
Double maxVal=null;
Collection<List<ColumnStatisticsObj>> result=verifyAndGetPartColumnStats(hive,tbl,colName,parts);
if (result == null) {
return null;
}
for (List<ColumnStatisticsObj> statObj : result) {
ColumnStatisticsData statData=validateSingleColStat(statObj);
if (statData == null) return null;
DoubleColumnStatsData dstats=statData.getDoubleStats();
if (!dstats.isSetHighValue()) {
continue;
}
double curVal=statData.getDoubleStats().getHighValue();
maxVal=maxVal == null ? curVal : Math.max(maxVal,curVal);
}
if (maxVal != null) {
oneRow.add(subType.cast(maxVal));
}
 else {
oneRow.add(null);
}
break;
}
default :
Logger.debug("Unsupported type: " + colDesc.getTypeString() + " encountered in "+ "metadata optimizer for column : "+ colName);
return null;
}
}
}
 else if (udaf instanceof GenericUDAFMin) {
ExprNodeColumnDesc colDesc=(ExprNodeColumnDesc)exprMap.get(((ExprNodeColumnDesc)aggr.getParameters().get(0)).getColumn());
String colName=colDesc.getColumn();
StatType type=getType(colDesc.getTypeString());
if (!tbl.isPartitioned()) {
if (!StatsSetupConst.areColumnStatsUptoDate(tbl.getParameters(),colName)) {
Logger.debug("Stats for table : " + tbl.getTableName() + " column "+ colName+ " are not up to date.");
return null;
}
ColumnStatisticsData statData=hive.getMSC().getTableColumnStatistics(tbl.getDbName(),tbl.getTableName(),Lists.newArrayList(colName)).get(0).getStatsData();
String name=colDesc.getTypeString().toUpperCase();
switch (type) {
case Integeral:
{
LongSubType subType=LongSubType.valueOf(name);
LongColumnStatsData lstats=statData.getLongStats();
if (lstats.isSetLowValue()) {
oneRow.add(subType.cast(lstats.getLowValue()));
}
 else {
oneRow.add(null);
}
break;
}
case Double:
{
DoubleSubType subType=DoubleSubType.valueOf(name);
DoubleColumnStatsData dstats=statData.getDoubleStats();
if (dstats.isSetLowValue()) {
oneRow.add(subType.cast(dstats.getLowValue()));
}
 else {
oneRow.add(null);
}
break;
}
default :
Logger.debug("Unsupported type: " + colDesc.getTypeString() + " encountered in "+ "metadata optimizer for column : "+ colName);
return null;
}
}
 else {
Set<Partition> parts=pctx.getPrunedPartitions(tsOp.getConf().getAlias(),tsOp).getPartitions();
String name=colDesc.getTypeString().toUpperCase();
switch (type) {
case Integeral:
{
LongSubType subType=LongSubType.valueOf(name);
Long minVal=null;
Collection<List<ColumnStatisticsObj>> result=verifyAndGetPartColumnStats(hive,tbl,colName,parts);
if (result == null) {
return null;
}
for (List<ColumnStatisticsObj> statObj : result) {
ColumnStatisticsData statData=validateSingleColStat(statObj);
if (statData == null) return null;
LongColumnStatsData lstats=statData.getLongStats();
if (!lstats.isSetLowValue()) {
continue;
}
long curVal=lstats.getLowValue();
minVal=minVal == null ? curVal : Math.min(minVal,curVal);
}
if (minVal != null) {
oneRow.add(subType.cast(minVal));
}
 else {
oneRow.add(minVal);
}
break;
}
case Double:
{
DoubleSubType subType=DoubleSubType.valueOf(name);
Double minVal=null;
Collection<List<ColumnStatisticsObj>> result=verifyAndGetPartColumnStats(hive,tbl,colName,parts);
if (result == null) {
return null;
}
for (List<ColumnStatisticsObj> statObj : result) {
ColumnStatisticsData statData=validateSingleColStat(statObj);
if (statData == null) return null;
DoubleColumnStatsData dstats=statData.getDoubleStats();
if (!dstats.isSetLowValue()) {
continue;
}
double curVal=statData.getDoubleStats().getLowValue();
minVal=minVal == null ? curVal : Math.min(minVal,curVal);
}
if (minVal != null) {
oneRow.add(subType.cast(minVal));
}
 else {
oneRow.add(minVal);
}
break;
}
default :
Logger.debug("Unsupported type: " + colDesc.getTypeString() + " encountered in "+ "metadata optimizer for column : "+ colName);
return null;
}
}
}
 else {
Logger.debug("Unsupported aggregation for metadata optimizer: " + aggr.getGenericUDAFName());
return null;
}
}
List<List<Object>> allRows=new ArrayList<List<Object>>();
List<String> colNames=new ArrayList<String>();
List<ObjectInspector> ois=new ArrayList<ObjectInspector>();
if (cselOp == null) {
allRows.add(oneRow);
for (ColumnInfo colInfo : cgbyOp.getSchema().getSignature()) {
colNames.add(colInfo.getInternalName());
ois.add(TypeInfoUtils.getStandardJavaObjectInspectorFromTypeInfo(colInfo.getType()));
}
}
 else {
int aggrPos=0;
List<Object> oneRowWithConstant=new ArrayList<>();
for (int pos=0; pos < cselOp.getSchema().getSignature().size(); pos++) {
if (posToConstant.containsKey(pos)) {
oneRowWithConstant.add(posToConstant.get(pos));
}
 else {
oneRowWithConstant.add(oneRow.get(aggrPos++));
}
ColumnInfo colInfo=cselOp.getSchema().getSignature().get(pos);
colNames.add(colInfo.getInternalName());
ois.add(TypeInfoUtils.getStandardJavaObjectInspectorFromTypeInfo(colInfo.getType()));
}
allRows.add(oneRowWithConstant);
}
FetchWork fWork=null;
FetchTask fTask=pctx.getFetchTask();
if (fTask != null) {
fWork=fTask.getWork();
fWork.getRowsComputedUsingStats().addAll(allRows);
}
 else {
StandardStructObjectInspector sOI=ObjectInspectorFactory.getStandardStructObjectInspector(colNames,ois);
fWork=new FetchWork(allRows,sOI);
fTask=(FetchTask)TaskFactory.get(fWork,pctx.getConf());
pctx.setFetchTask(fTask);
}
fWork.setLimit(fWork.getRowsComputedUsingStats().size());
isOptimized=true;
return null;
}
 catch (Exception e) {
Logger.debug("Failed to optimize using metadata optimizer",e);
return null;
}
 finally {
if (!isOptimized) {
soProcCtx.stopProcess=true;
pctx.setFetchTask(null);
}
}
}
