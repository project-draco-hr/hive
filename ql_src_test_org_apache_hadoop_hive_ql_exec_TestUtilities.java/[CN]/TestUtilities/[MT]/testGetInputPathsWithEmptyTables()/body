{
  String alias1Name="alias1";
  String alias2Name="alias2";
  MapWork mapWork1=new MapWork();
  MapWork mapWork2=new MapWork();
  JobConf jobConf=new JobConf();
  String nonExistentPath1=UUID.randomUUID().toString();
  String nonExistentPath2=UUID.randomUUID().toString();
  PartitionDesc mockPartitionDesc=mock(PartitionDesc.class);
  TableDesc mockTableDesc=mock(TableDesc.class);
  when(mockTableDesc.isNonNative()).thenReturn(false);
  when(mockTableDesc.getProperties()).thenReturn(new Properties());
  when(mockPartitionDesc.getProperties()).thenReturn(new Properties());
  when(mockPartitionDesc.getTableDesc()).thenReturn(mockTableDesc);
  doReturn(HiveSequenceFileOutputFormat.class).when(mockPartitionDesc).getOutputFileFormatClass();
  mapWork1.setPathToAliases(new LinkedHashMap<>(ImmutableMap.of(nonExistentPath1,Lists.newArrayList(alias1Name))));
  mapWork1.setAliasToWork(new LinkedHashMap<String,Operator<? extends OperatorDesc>>(ImmutableMap.of(alias1Name,(Operator<?>)mock(Operator.class))));
  mapWork1.setPathToPartitionInfo(new LinkedHashMap<>(ImmutableMap.of(nonExistentPath1,mockPartitionDesc)));
  mapWork2.setPathToAliases(new LinkedHashMap<>(ImmutableMap.of(nonExistentPath2,Lists.newArrayList(alias2Name))));
  mapWork2.setAliasToWork(new LinkedHashMap<String,Operator<? extends OperatorDesc>>(ImmutableMap.of(alias2Name,(Operator<?>)mock(Operator.class))));
  mapWork2.setPathToPartitionInfo(new LinkedHashMap<>(ImmutableMap.of(nonExistentPath2,mockPartitionDesc)));
  List<Path> inputPaths=new ArrayList<>();
  try {
    Path scratchDir=new Path(HiveConf.getVar(jobConf,HiveConf.ConfVars.LOCALSCRATCHDIR));
    inputPaths.addAll(Utilities.getInputPaths(jobConf,mapWork1,scratchDir,mock(Context.class),false));
    inputPaths.addAll(Utilities.getInputPaths(jobConf,mapWork2,scratchDir,mock(Context.class),false));
    assertEquals(inputPaths.size(),2);
  }
  finally {
    File file;
    for (    Path path : inputPaths) {
      file=new File(path.toString());
      if (file.exists()) {
        file.delete();
      }
    }
  }
}
