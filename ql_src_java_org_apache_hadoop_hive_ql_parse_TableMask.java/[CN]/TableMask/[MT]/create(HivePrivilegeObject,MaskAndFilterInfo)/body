{
  boolean doColumnMasking=false;
  boolean doRowFiltering=false;
  StringBuilder sb=new StringBuilder();
  sb.append("(SELECT ");
  boolean firstOne=true;
  List<String> exprs=privObject.getCellValueTransformers();
  if (exprs != null) {
    if (exprs.size() != privObject.getColumns().size()) {
      throw new SemanticException("Expect " + privObject.getColumns().size() + " columns in "+ privObject.getObjectName()+ ", but only find "+ exprs.size());
    }
    List<String> colTypes=maskAndFilterInfo.colTypes;
    for (int index=0; index < exprs.size(); index++) {
      String expr=exprs.get(index);
      if (expr == null) {
        throw new SemanticException("Expect string type CellValueTransformer in " + privObject.getObjectName() + ", but only find null");
      }
      if (!firstOne) {
        sb.append(", ");
      }
 else {
        firstOne=false;
      }
      String colName=privObject.getColumns().get(index);
      if (!expr.equals(colName)) {
        sb.append("CAST(" + expr + " AS "+ colTypes.get(index)+ ") AS "+ HiveUtils.unparseIdentifier(colName,conf));
        doColumnMasking=true;
      }
 else {
        sb.append(HiveUtils.unparseIdentifier(colName,conf));
      }
    }
  }
  if (!doColumnMasking) {
    sb=new StringBuilder();
    sb.append("(SELECT *");
  }
  if (!maskAndFilterInfo.isView) {
    Iterator<VirtualColumn> vcs=VirtualColumn.getRegistry(conf).iterator();
    while (vcs.hasNext()) {
      VirtualColumn vc=vcs.next();
      sb.append(", " + vc.getName());
    }
  }
  sb.append(" FROM ");
  sb.append(HiveUtils.unparseIdentifier(privObject.getDbname(),conf));
  sb.append(".");
  sb.append(HiveUtils.unparseIdentifier(privObject.getObjectName(),conf));
  sb.append(" " + maskAndFilterInfo.additionalTabInfo);
  String filter=privObject.getRowFilterExpression();
  if (filter != null) {
    sb.append(" WHERE " + filter);
    doRowFiltering=true;
  }
  sb.append(")" + HiveUtils.unparseIdentifier(maskAndFilterInfo.alias,conf));
  if (!doColumnMasking && !doRowFiltering) {
    return null;
  }
 else {
    LOG.debug("TableMask creates `" + sb.toString() + "`");
    return sb.toString();
  }
}
