{
  GenericUDFAbs udf=new GenericUDFAbs();
  int prec=12;
  int scale=9;
  ObjectInspector valueOI=PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(TypeInfoFactory.getDecimalTypeInfo(prec,scale));
  ObjectInspector[] arguments={valueOI};
  PrimitiveObjectInspector outputOI=(PrimitiveObjectInspector)udf.initialize(arguments);
  assertEquals("result precision for abs()",prec,outputOI.precision());
  assertEquals("result scale for abs()",scale,outputOI.scale());
  DeferredObject valueObj=new DeferredJavaObject(new HiveDecimalWritable(HiveDecimal.create("107.123456789")));
  DeferredObject[] args={valueObj};
  HiveDecimalWritable output=(HiveDecimalWritable)udf.evaluate(args);
  assertEquals("abs() test for HiveDecimal failed ",107.123456789,output.getHiveDecimal().doubleValue());
  valueObj=new DeferredJavaObject(new HiveDecimalWritable(HiveDecimal.create("-107.123456789")));
  args[0]=valueObj;
  output=(HiveDecimalWritable)udf.evaluate(args);
  assertEquals("abs() test for HiveDecimal failed ",107.123456789,output.getHiveDecimal().doubleValue());
  args[0]=new DeferredJavaObject(null);
  output=(HiveDecimalWritable)udf.evaluate(args);
  assertEquals("abs(null)",null,output);
  args[0]=new DeferredJavaObject(new HiveDecimalWritable(HiveDecimal.create("-1000.123456")));
  output=(HiveDecimalWritable)udf.evaluate(args);
  assertEquals("abs() of too large decimal value",null,output);
}
