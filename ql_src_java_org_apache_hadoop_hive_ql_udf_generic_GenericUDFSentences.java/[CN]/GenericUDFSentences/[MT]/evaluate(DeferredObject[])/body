{
  assert(arguments.length >= 1 && arguments.length <= 3);
  if (arguments[0].get() == null) {
    return null;
  }
  Locale locale=null;
  if (arguments.length > 1 && arguments[1].get() != null) {
    Text language=(Text)converters[1].convert(arguments[1].get());
    Text country=null;
    if (arguments.length > 2 && arguments[2].get() != null) {
      country=(Text)converters[2].convert(arguments[2].get());
    }
    if (country != null) {
      locale=new Locale(language.toString().toLowerCase(),country.toString().toUpperCase());
    }
 else {
      locale=new Locale(language.toString().toLowerCase());
    }
  }
 else {
    locale=Locale.getDefault();
  }
  Text chunk=(Text)converters[0].convert(arguments[0].get());
  String text=chunk.toString();
  ArrayList<ArrayList<Text>> result=new ArrayList<ArrayList<Text>>();
  BreakIterator bi=BreakIterator.getSentenceInstance(locale);
  bi.setText(text);
  int idx=0;
  while (bi.next() != BreakIterator.DONE) {
    String sentence=text.substring(idx,bi.current());
    idx=bi.current();
    result.add(new ArrayList<Text>());
    BreakIterator wi=BreakIterator.getWordInstance(locale);
    wi.setText(sentence);
    int widx=0;
    ArrayList<Text> sent_array=result.get(result.size() - 1);
    while (wi.next() != BreakIterator.DONE) {
      String word=sentence.substring(widx,wi.current());
      widx=wi.current();
      if (Character.isLetterOrDigit(word.charAt(0))) {
        sent_array.add(new Text(word));
      }
    }
  }
  return result;
}
