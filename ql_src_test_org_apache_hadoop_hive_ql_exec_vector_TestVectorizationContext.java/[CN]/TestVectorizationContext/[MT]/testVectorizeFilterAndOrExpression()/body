{
  ExprNodeColumnDesc col1Expr=new ExprNodeColumnDesc(Integer.class,"col1","table",false);
  ExprNodeConstantDesc constDesc=new ExprNodeConstantDesc(new Integer(10));
  GenericUDFOPGreaterThan udf=new GenericUDFOPGreaterThan();
  ExprNodeGenericFuncDesc greaterExprDesc=new ExprNodeGenericFuncDesc();
  greaterExprDesc.setTypeInfo(TypeInfoFactory.booleanTypeInfo);
  greaterExprDesc.setGenericUDF(udf);
  List<ExprNodeDesc> children1=new ArrayList<ExprNodeDesc>(2);
  children1.add(col1Expr);
  children1.add(constDesc);
  greaterExprDesc.setChildren(children1);
  ExprNodeColumnDesc col2Expr=new ExprNodeColumnDesc(Float.class,"col2","table",false);
  ExprNodeConstantDesc const2Desc=new ExprNodeConstantDesc(new Float(1.0));
  GenericUDFOPLessThan udf2=new GenericUDFOPLessThan();
  ExprNodeGenericFuncDesc lessExprDesc=new ExprNodeGenericFuncDesc();
  lessExprDesc.setTypeInfo(TypeInfoFactory.booleanTypeInfo);
  lessExprDesc.setGenericUDF(udf2);
  List<ExprNodeDesc> children2=new ArrayList<ExprNodeDesc>(2);
  children2.add(col2Expr);
  children2.add(const2Desc);
  lessExprDesc.setChildren(children2);
  GenericUDFOPAnd andUdf=new GenericUDFOPAnd();
  ExprNodeGenericFuncDesc andExprDesc=new ExprNodeGenericFuncDesc();
  andExprDesc.setTypeInfo(TypeInfoFactory.booleanTypeInfo);
  andExprDesc.setGenericUDF(andUdf);
  List<ExprNodeDesc> children3=new ArrayList<ExprNodeDesc>(2);
  children3.add(greaterExprDesc);
  children3.add(lessExprDesc);
  andExprDesc.setChildren(children3);
  List<String> columns=new ArrayList<String>();
  columns.add("col0");
  columns.add("col1");
  columns.add("col2");
  VectorizationContext vc=new VectorizationContext(columns);
  VectorExpression ve=vc.getVectorExpression(andExprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertEquals(ve.getClass(),FilterExprAndExpr.class);
  assertEquals(ve.getChildExpressions()[0].getClass(),FilterLongColGreaterLongScalar.class);
  assertEquals(ve.getChildExpressions()[1].getClass(),FilterDoubleColLessDoubleScalar.class);
  GenericUDFOPOr orUdf=new GenericUDFOPOr();
  ExprNodeGenericFuncDesc orExprDesc=new ExprNodeGenericFuncDesc();
  orExprDesc.setTypeInfo(TypeInfoFactory.booleanTypeInfo);
  orExprDesc.setGenericUDF(orUdf);
  List<ExprNodeDesc> children4=new ArrayList<ExprNodeDesc>(2);
  children4.add(greaterExprDesc);
  children4.add(lessExprDesc);
  orExprDesc.setChildren(children4);
  VectorExpression veOr=vc.getVectorExpression(orExprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertEquals(veOr.getClass(),FilterExprOrExpr.class);
  assertEquals(veOr.getChildExpressions()[0].getClass(),FilterLongColGreaterLongScalar.class);
  assertEquals(veOr.getChildExpressions()[1].getClass(),FilterDoubleColLessDoubleScalar.class);
}
