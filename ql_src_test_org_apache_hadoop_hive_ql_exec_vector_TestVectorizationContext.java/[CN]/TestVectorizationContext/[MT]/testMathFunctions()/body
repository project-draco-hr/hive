{
  ExprNodeGenericFuncDesc mathFuncExpr=new ExprNodeGenericFuncDesc();
  mathFuncExpr.setTypeInfo(TypeInfoFactory.doubleTypeInfo);
  ExprNodeColumnDesc colDesc1=new ExprNodeColumnDesc(Integer.class,"a","table",false);
  ExprNodeColumnDesc colDesc2=new ExprNodeColumnDesc(Double.class,"b","table",false);
  List<ExprNodeDesc> children1=new ArrayList<ExprNodeDesc>();
  List<ExprNodeDesc> children2=new ArrayList<ExprNodeDesc>();
  children1.add(colDesc1);
  children2.add(colDesc2);
  List<String> columns=new ArrayList<String>();
  columns.add("b");
  columns.add("a");
  VectorizationContext vc=new VectorizationContext("name",columns);
  GenericUDFBridge gudfBridge=new GenericUDFBridge("sin",false,UDFSin.class.getName());
  mathFuncExpr.setGenericUDF(gudfBridge);
  mathFuncExpr.setChildren(children2);
  VectorExpression ve=vc.getVectorExpression(mathFuncExpr,VectorExpressionDescriptor.Mode.PROJECTION);
  Assert.assertEquals(FuncSinDoubleToDouble.class,ve.getClass());
  GenericUDFRound udfRound=new GenericUDFRound();
  mathFuncExpr.setGenericUDF(udfRound);
  mathFuncExpr.setChildren(children2);
  ve=vc.getVectorExpression(mathFuncExpr);
  Assert.assertEquals(FuncRoundDoubleToDouble.class,ve.getClass());
  mathFuncExpr.setGenericUDF(udfRound);
  children2.add(new ExprNodeConstantDesc(4));
  mathFuncExpr.setChildren(children2);
  ve=vc.getVectorExpression(mathFuncExpr);
  Assert.assertEquals(RoundWithNumDigitsDoubleToDouble.class,ve.getClass());
  Assert.assertEquals(4,((RoundWithNumDigitsDoubleToDouble)ve).getDecimalPlaces().get());
  gudfBridge=new GenericUDFBridge("log",false,UDFLog.class.getName());
  mathFuncExpr.setGenericUDF(gudfBridge);
  children2.clear();
  children2.add(new ExprNodeConstantDesc(4.0));
  children2.add(colDesc2);
  mathFuncExpr.setChildren(children2);
  ve=vc.getVectorExpression(mathFuncExpr);
  Assert.assertEquals(FuncLogWithBaseDoubleToDouble.class,ve.getClass());
  Assert.assertTrue(4 == ((FuncLogWithBaseDoubleToDouble)ve).getBase());
  children2.clear();
  children2.add(colDesc2);
  mathFuncExpr.setChildren(children2);
  ve=vc.getVectorExpression(mathFuncExpr);
  Assert.assertEquals(FuncLnDoubleToDouble.class,ve.getClass());
  children2.clear();
  children2.add(new ExprNodeConstantDesc(4.5));
  children2.add(colDesc2);
  mathFuncExpr.setChildren(children2);
  ve=vc.getVectorExpression(mathFuncExpr);
  Assert.assertEquals(FuncLogWithBaseDoubleToDouble.class,ve.getClass());
  Assert.assertTrue(4.5 == ((FuncLogWithBaseDoubleToDouble)ve).getBase());
  children2.clear();
  children2.add(new ExprNodeConstantDesc(4.5));
  children2.add(colDesc1);
  mathFuncExpr.setChildren(children2);
  ve=vc.getVectorExpression(mathFuncExpr);
  Assert.assertEquals(FuncLogWithBaseLongToDouble.class,ve.getClass());
  Assert.assertTrue(4.5 == ((FuncLogWithBaseLongToDouble)ve).getBase());
  children2.clear();
  children2.add(colDesc2);
  children2.add(new ExprNodeConstantDesc(4.5));
  mathFuncExpr.setGenericUDF(new GenericUDFPower());
  mathFuncExpr.setChildren(children2);
  ve=vc.getVectorExpression(mathFuncExpr);
  Assert.assertEquals(FuncPowerDoubleToDouble.class,ve.getClass());
  Assert.assertTrue(4.5 == ((FuncPowerDoubleToDouble)ve).getPower());
  mathFuncExpr.setGenericUDF(udfRound);
  children2.clear();
  children2.add(colDesc2);
  mathFuncExpr.setChildren(children2);
  ve=vc.getVectorExpression(mathFuncExpr);
  Assert.assertEquals(FuncRoundDoubleToDouble.class,ve.getClass());
}
