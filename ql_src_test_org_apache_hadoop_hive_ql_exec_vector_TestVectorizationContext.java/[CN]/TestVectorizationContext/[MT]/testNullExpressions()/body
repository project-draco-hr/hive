{
  ExprNodeColumnDesc col1Expr=new ExprNodeColumnDesc(Integer.class,"col1","table",false);
  ExprNodeConstantDesc constDesc=new ExprNodeConstantDesc(new Integer(10));
  GenericUDFOPGreaterThan udf=new GenericUDFOPGreaterThan();
  ExprNodeGenericFuncDesc greaterExprDesc=new ExprNodeGenericFuncDesc();
  greaterExprDesc.setTypeInfo(TypeInfoFactory.booleanTypeInfo);
  greaterExprDesc.setGenericUDF(udf);
  List<ExprNodeDesc> children1=new ArrayList<ExprNodeDesc>(2);
  children1.add(col1Expr);
  children1.add(constDesc);
  greaterExprDesc.setChildren(children1);
  ExprNodeGenericFuncDesc isNullExpr=new ExprNodeGenericFuncDesc();
  isNullExpr.setTypeInfo(TypeInfoFactory.booleanTypeInfo);
  GenericUDFOPNull isNullUdf=new GenericUDFOPNull();
  isNullExpr.setGenericUDF(isNullUdf);
  List<ExprNodeDesc> childOfIsNull=new ArrayList<ExprNodeDesc>();
  childOfIsNull.add(greaterExprDesc);
  isNullExpr.setChildren(childOfIsNull);
  Map<String,Integer> columnMap=new HashMap<String,Integer>();
  columnMap.put("col1",0);
  columnMap.put("col2",1);
  VectorizationContext vc=new VectorizationContext(columnMap,2);
  VectorExpression ve=vc.getVectorExpression(isNullExpr,VectorExpressionDescriptor.Mode.FILTER);
  assertEquals(ve.getClass(),SelectColumnIsNull.class);
  assertEquals(ve.getChildExpressions()[0].getClass(),LongColGreaterLongScalar.class);
  assertEquals(2,ve.getChildExpressions()[0].getOutputColumn());
  assertEquals(2,((SelectColumnIsNull)ve).getColNum());
  ve=vc.getVectorExpression(isNullExpr,VectorExpressionDescriptor.Mode.PROJECTION);
  assertEquals(ve.getClass(),IsNull.class);
  assertEquals(2,((IsNull)ve).getColNum());
  assertEquals(3,ve.getOutputColumn());
  assertEquals(ve.getChildExpressions()[0].getClass(),LongColGreaterLongScalar.class);
}
