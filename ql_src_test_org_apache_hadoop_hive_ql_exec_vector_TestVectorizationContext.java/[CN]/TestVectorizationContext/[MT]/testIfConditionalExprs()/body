{
  ExprNodeColumnDesc col1Expr=new ExprNodeColumnDesc(Long.class,"col1","table",false);
  ExprNodeColumnDesc col2Expr=new ExprNodeColumnDesc(Long.class,"col2","table",false);
  ExprNodeColumnDesc col3Expr=new ExprNodeColumnDesc(Long.class,"col3","table",false);
  ExprNodeConstantDesc constDesc2=new ExprNodeConstantDesc(new Integer(1));
  ExprNodeConstantDesc constDesc3=new ExprNodeConstantDesc(new Integer(2));
  GenericUDFIf udf=new GenericUDFIf();
  List<ExprNodeDesc> children1=new ArrayList<ExprNodeDesc>();
  children1.add(col1Expr);
  children1.add(col2Expr);
  children1.add(col3Expr);
  ExprNodeGenericFuncDesc exprDesc=new ExprNodeGenericFuncDesc(TypeInfoFactory.booleanTypeInfo,udf,children1);
  List<String> columns=new ArrayList<String>();
  columns.add("col0");
  columns.add("col1");
  columns.add("col2");
  columns.add("col3");
  VectorizationContext vc=new VectorizationContext("name",columns);
  VectorExpression ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprLongColumnLongColumn);
  children1.set(2,new ExprNodeConstantDesc(1L));
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprLongColumnLongScalar);
  children1.set(1,new ExprNodeConstantDesc(1L));
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprLongScalarLongScalar);
  children1.set(2,col3Expr);
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprLongScalarLongColumn);
  col2Expr=new ExprNodeColumnDesc(Double.class,"col2","table",false);
  col3Expr=new ExprNodeColumnDesc(Double.class,"col3","table",false);
  children1.set(1,col2Expr);
  children1.set(2,col3Expr);
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprDoubleColumnDoubleColumn);
  children1.set(2,new ExprNodeConstantDesc(1D));
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprDoubleColumnDoubleScalar);
  children1.set(1,new ExprNodeConstantDesc(1D));
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprDoubleScalarDoubleScalar);
  children1.set(2,col3Expr);
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprDoubleScalarDoubleColumn);
  children1.set(2,new ExprNodeColumnDesc(Long.class,"col3","table",false));
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprDoubleScalarLongColumn);
  col2Expr=new ExprNodeColumnDesc(Timestamp.class,"col2","table",false);
  col3Expr=new ExprNodeColumnDesc(Timestamp.class,"col3","table",false);
  children1.set(1,col2Expr);
  children1.set(2,col3Expr);
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprTimestampColumnColumn);
  ExprNodeGenericFuncDesc f=new ExprNodeGenericFuncDesc();
  f.setGenericUDF(new GenericUDFTimestamp());
  f.setTypeInfo(TypeInfoFactory.timestampTypeInfo);
  List<ExprNodeDesc> children2=new ArrayList<ExprNodeDesc>();
  f.setChildren(children2);
  children2.add(new ExprNodeConstantDesc("2013-11-05 00:00:00.000"));
  children1.set(2,f);
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(IfExprTimestampColumnColumn.class == ve.getClass() || IfExprTimestampColumnScalar.class == ve.getClass());
  children1.set(1,f);
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(IfExprTimestampColumnColumn.class == ve.getClass() || IfExprTimestampScalarScalar.class == ve.getClass());
  children1.set(2,col3Expr);
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(IfExprTimestampColumnColumn.class == ve.getClass() || IfExprTimestampScalarColumn.class == ve.getClass());
  col2Expr=new ExprNodeColumnDesc(Boolean.class,"col2","table",false);
  col3Expr=new ExprNodeColumnDesc(Boolean.class,"col3","table",false);
  children1.set(1,col2Expr);
  children1.set(2,col3Expr);
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprLongColumnLongColumn);
  children1.set(2,new ExprNodeConstantDesc(true));
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprLongColumnLongScalar);
  children1.set(1,new ExprNodeConstantDesc(true));
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprLongScalarLongScalar);
  children1.set(2,col3Expr);
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprLongScalarLongColumn);
  constDesc2=new ExprNodeConstantDesc("Alpha");
  constDesc3=new ExprNodeConstantDesc("Bravo");
  col2Expr=new ExprNodeColumnDesc(String.class,"col2","table",false);
  col3Expr=new ExprNodeColumnDesc(String.class,"col3","table",false);
  children1.set(1,col2Expr);
  children1.set(2,col3Expr);
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprStringGroupColumnStringGroupColumn);
  children1.set(2,constDesc3);
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprStringGroupColumnStringScalar);
  children1.set(1,constDesc2);
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprStringScalarStringScalar);
  children1.set(2,col3Expr);
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprStringScalarStringGroupColumn);
  CharTypeInfo charTypeInfo=new CharTypeInfo(10);
  constDesc2=new ExprNodeConstantDesc(charTypeInfo,new HiveChar("Alpha",10));
  constDesc3=new ExprNodeConstantDesc(charTypeInfo,new HiveChar("Bravo",10));
  col2Expr=new ExprNodeColumnDesc(charTypeInfo,"col2","table",false);
  col3Expr=new ExprNodeColumnDesc(charTypeInfo,"col3","table",false);
  children1.set(1,col2Expr);
  children1.set(2,col3Expr);
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprStringGroupColumnStringGroupColumn);
  children1.set(2,constDesc3);
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprStringGroupColumnCharScalar);
  children1.set(1,constDesc2);
  children1.set(2,col3Expr);
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprCharScalarStringGroupColumn);
  VarcharTypeInfo varcharTypeInfo=new VarcharTypeInfo(10);
  constDesc2=new ExprNodeConstantDesc(varcharTypeInfo,new HiveVarchar("Alpha",10));
  constDesc3=new ExprNodeConstantDesc(varcharTypeInfo,new HiveVarchar("Bravo",10));
  col2Expr=new ExprNodeColumnDesc(varcharTypeInfo,"col2","table",false);
  col3Expr=new ExprNodeColumnDesc(varcharTypeInfo,"col3","table",false);
  children1.set(1,col2Expr);
  children1.set(2,col3Expr);
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprStringGroupColumnStringGroupColumn);
  children1.set(2,constDesc3);
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprStringGroupColumnVarCharScalar);
  children1.set(1,constDesc2);
  children1.set(2,col3Expr);
  ve=vc.getVectorExpression(exprDesc);
  assertTrue(ve instanceof IfExprVarCharScalarStringGroupColumn);
}
