{
  ExprNodeColumnDesc col1Expr=new ExprNodeColumnDesc(String.class,"col1","table",false);
  ExprNodeColumnDesc col2Expr=new ExprNodeColumnDesc(String.class,"col2","table",false);
  GenericUDFOPGreaterThan udf=new GenericUDFOPGreaterThan();
  ExprNodeGenericFuncDesc exprDesc=new ExprNodeGenericFuncDesc();
  exprDesc.setGenericUDF(udf);
  List<ExprNodeDesc> children1=new ArrayList<ExprNodeDesc>(2);
  children1.add(col1Expr);
  children1.add(col2Expr);
  exprDesc.setChildren(children1);
  List<String> columns=new ArrayList<String>();
  columns.add("col0");
  columns.add("col1");
  columns.add("col2");
  VectorizationContext vc=new VectorizationContext("name",columns);
  VectorExpression ve=vc.getVectorExpression(exprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertTrue(ve instanceof FilterStringGroupColGreaterStringGroupColumn);
  CharTypeInfo charTypeInfo=new CharTypeInfo(10);
  col1Expr=new ExprNodeColumnDesc(charTypeInfo,"col1","table",false);
  col2Expr=new ExprNodeColumnDesc(charTypeInfo,"col2","table",false);
  udf=new GenericUDFOPGreaterThan();
  exprDesc=new ExprNodeGenericFuncDesc();
  exprDesc.setGenericUDF(udf);
  children1=new ArrayList<ExprNodeDesc>(2);
  children1.add(col1Expr);
  children1.add(col2Expr);
  exprDesc.setChildren(children1);
  vc=new VectorizationContext("name",columns);
  ve=vc.getVectorExpression(exprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertTrue(ve instanceof FilterStringGroupColGreaterStringGroupColumn);
  VarcharTypeInfo varcharTypeInfo=new VarcharTypeInfo(10);
  col1Expr=new ExprNodeColumnDesc(varcharTypeInfo,"col1","table",false);
  col2Expr=new ExprNodeColumnDesc(varcharTypeInfo,"col2","table",false);
  udf=new GenericUDFOPGreaterThan();
  exprDesc=new ExprNodeGenericFuncDesc();
  exprDesc.setGenericUDF(udf);
  children1=new ArrayList<ExprNodeDesc>(2);
  children1.add(col1Expr);
  children1.add(col2Expr);
  exprDesc.setChildren(children1);
  vc=new VectorizationContext("name",columns);
  ve=vc.getVectorExpression(exprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertTrue(ve instanceof FilterStringGroupColGreaterStringGroupColumn);
  col1Expr=new ExprNodeColumnDesc(String.class,"col1","table",false);
  col2Expr=new ExprNodeColumnDesc(charTypeInfo,"col2","table",false);
  udf=new GenericUDFOPGreaterThan();
  exprDesc=new ExprNodeGenericFuncDesc();
  exprDesc.setGenericUDF(udf);
  children1=new ArrayList<ExprNodeDesc>(2);
  children1.add(col1Expr);
  children1.add(col2Expr);
  exprDesc.setChildren(children1);
  vc=new VectorizationContext("name",columns);
  ve=vc.getVectorExpression(exprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertTrue(ve instanceof FilterStringGroupColGreaterStringGroupColumn);
  col1Expr=new ExprNodeColumnDesc(varcharTypeInfo,"col1","table",false);
  col2Expr=new ExprNodeColumnDesc(charTypeInfo,"col2","table",false);
  udf=new GenericUDFOPGreaterThan();
  exprDesc=new ExprNodeGenericFuncDesc();
  exprDesc.setGenericUDF(udf);
  children1=new ArrayList<ExprNodeDesc>(2);
  children1.add(col1Expr);
  children1.add(col2Expr);
  exprDesc.setChildren(children1);
  vc=new VectorizationContext("name",columns);
  ve=vc.getVectorExpression(exprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertTrue(ve instanceof FilterStringGroupColGreaterStringGroupColumn);
  col1Expr=new ExprNodeColumnDesc(varcharTypeInfo,"col1","table",false);
  col2Expr=new ExprNodeColumnDesc(String.class,"col2","table",false);
  udf=new GenericUDFOPGreaterThan();
  exprDesc=new ExprNodeGenericFuncDesc();
  exprDesc.setGenericUDF(udf);
  children1=new ArrayList<ExprNodeDesc>(2);
  children1.add(col1Expr);
  children1.add(col2Expr);
  exprDesc.setChildren(children1);
  vc=new VectorizationContext("name",columns);
  ve=vc.getVectorExpression(exprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertTrue(ve instanceof FilterStringGroupColGreaterStringGroupColumn);
}
