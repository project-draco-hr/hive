{
  ExprNodeColumnDesc col1Expr=new ExprNodeColumnDesc(String.class,"col1","table",false);
  ExprNodeConstantDesc constDesc=new ExprNodeConstantDesc("Alpha");
  ExprNodeConstantDesc constDesc2=new ExprNodeConstantDesc("Bravo");
  GenericUDFIn udf=new GenericUDFIn();
  ExprNodeGenericFuncDesc exprDesc=new ExprNodeGenericFuncDesc();
  exprDesc.setGenericUDF(udf);
  List<ExprNodeDesc> children1=new ArrayList<ExprNodeDesc>();
  children1.add(col1Expr);
  children1.add(constDesc);
  children1.add(constDesc2);
  exprDesc.setChildren(children1);
  Map<String,Integer> columnMap=new HashMap<String,Integer>();
  columnMap.put("col1",1);
  columnMap.put("col2",2);
  VectorizationContext vc=new VectorizationContext(columnMap,2);
  VectorExpression ve=vc.getVectorExpression(exprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertTrue(ve instanceof FilterStringColumnInList);
  children1.set(0,new ExprNodeColumnDesc(Long.class,"col1","table",false));
  children1.set(1,new ExprNodeConstantDesc(10));
  children1.set(2,new ExprNodeConstantDesc(20));
  ve=vc.getVectorExpression(exprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertTrue(ve instanceof FilterLongColumnInList);
  children1.set(0,new ExprNodeColumnDesc(Double.class,"col1","table",false));
  children1.set(1,new ExprNodeConstantDesc(10d));
  children1.set(2,new ExprNodeConstantDesc(20d));
  ve=vc.getVectorExpression(exprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertTrue(ve instanceof FilterDoubleColumnInList);
}
