{
  GenericUDFOPPlus udf1=new GenericUDFOPPlus();
  GenericUDFOPMinus udf2=new GenericUDFOPMinus();
  GenericUDFOPMultiply udf3=new GenericUDFOPMultiply();
  GenericUDFOPPlus udf4=new GenericUDFOPPlus();
  GenericUDFOPMod udf5=new GenericUDFOPMod();
  ExprNodeGenericFuncDesc sumExpr=new ExprNodeGenericFuncDesc();
  sumExpr.setTypeInfo(TypeInfoFactory.intTypeInfo);
  sumExpr.setGenericUDF(udf1);
  ExprNodeGenericFuncDesc minusExpr=new ExprNodeGenericFuncDesc();
  minusExpr.setTypeInfo(TypeInfoFactory.intTypeInfo);
  minusExpr.setGenericUDF(udf2);
  ExprNodeGenericFuncDesc multiplyExpr=new ExprNodeGenericFuncDesc();
  multiplyExpr.setTypeInfo(TypeInfoFactory.intTypeInfo);
  multiplyExpr.setGenericUDF(udf3);
  ExprNodeGenericFuncDesc sum2Expr=new ExprNodeGenericFuncDesc();
  sum2Expr.setTypeInfo(TypeInfoFactory.intTypeInfo);
  sum2Expr.setGenericUDF(udf4);
  ExprNodeGenericFuncDesc modExpr=new ExprNodeGenericFuncDesc();
  modExpr.setTypeInfo(TypeInfoFactory.intTypeInfo);
  modExpr.setGenericUDF(udf5);
  ExprNodeColumnDesc col1Expr=new ExprNodeColumnDesc(Long.class,"col1","table",false);
  ExprNodeColumnDesc col2Expr=new ExprNodeColumnDesc(Long.class,"col2","table",false);
  ExprNodeColumnDesc col3Expr=new ExprNodeColumnDesc(Long.class,"col3","table",false);
  ExprNodeColumnDesc col4Expr=new ExprNodeColumnDesc(Long.class,"col4","table",false);
  ExprNodeColumnDesc col5Expr=new ExprNodeColumnDesc(Long.class,"col5","table",false);
  ExprNodeColumnDesc col6Expr=new ExprNodeColumnDesc(Long.class,"col6","table",false);
  List<ExprNodeDesc> children1=new ArrayList<ExprNodeDesc>(2);
  List<ExprNodeDesc> children2=new ArrayList<ExprNodeDesc>(2);
  List<ExprNodeDesc> children3=new ArrayList<ExprNodeDesc>(2);
  List<ExprNodeDesc> children4=new ArrayList<ExprNodeDesc>(2);
  List<ExprNodeDesc> children5=new ArrayList<ExprNodeDesc>(2);
  children1.add(minusExpr);
  children1.add(multiplyExpr);
  sumExpr.setChildren(children1);
  children2.add(sum2Expr);
  children2.add(col3Expr);
  minusExpr.setChildren(children2);
  children3.add(col1Expr);
  children3.add(col2Expr);
  sum2Expr.setChildren(children3);
  children4.add(col4Expr);
  children4.add(modExpr);
  multiplyExpr.setChildren(children4);
  children5.add(col5Expr);
  children5.add(col6Expr);
  modExpr.setChildren(children5);
  VectorizationContext vc=new VectorizationContext("name");
  vc.addInitialColumn("col1");
  vc.addInitialColumn("col2");
  vc.addInitialColumn("col3");
  vc.addInitialColumn("col4");
  vc.addInitialColumn("col5");
  vc.addInitialColumn("col6");
  vc.finishedAddingInitialColumns();
  VectorExpression ve=vc.getVectorExpression(sumExpr,VectorExpressionDescriptor.Mode.PROJECTION);
  assertTrue(ve instanceof LongColAddLongColumn);
  assertEquals(2,ve.getChildExpressions().length);
  VectorExpression childExpr1=ve.getChildExpressions()[0];
  VectorExpression childExpr2=ve.getChildExpressions()[1];
  System.out.println(ve.toString());
  assertEquals(6,ve.getOutputColumn());
  assertTrue(childExpr1 instanceof LongColSubtractLongColumn);
  assertEquals(1,childExpr1.getChildExpressions().length);
  assertTrue(childExpr1.getChildExpressions()[0] instanceof LongColAddLongColumn);
  assertEquals(7,childExpr1.getOutputColumn());
  assertEquals(6,childExpr1.getChildExpressions()[0].getOutputColumn());
  assertTrue(childExpr2 instanceof LongColMultiplyLongColumn);
  assertEquals(1,childExpr2.getChildExpressions().length);
  assertTrue(childExpr2.getChildExpressions()[0] instanceof LongColModuloLongColumn);
  assertEquals(8,childExpr2.getOutputColumn());
  assertEquals(6,childExpr2.getChildExpressions()[0].getOutputColumn());
}
