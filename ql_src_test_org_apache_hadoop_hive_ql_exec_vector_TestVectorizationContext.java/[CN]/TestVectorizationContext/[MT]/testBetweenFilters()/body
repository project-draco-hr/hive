{
  ExprNodeColumnDesc col1Expr=new ExprNodeColumnDesc(String.class,"col1","table",false);
  ExprNodeConstantDesc constDesc=new ExprNodeConstantDesc("Alpha");
  ExprNodeConstantDesc constDesc2=new ExprNodeConstantDesc("Bravo");
  GenericUDFBetween udf=new GenericUDFBetween();
  List<ExprNodeDesc> children1=new ArrayList<ExprNodeDesc>();
  children1.add(new ExprNodeConstantDesc(new Boolean(false)));
  children1.add(col1Expr);
  children1.add(constDesc);
  children1.add(constDesc2);
  ExprNodeGenericFuncDesc exprDesc=new ExprNodeGenericFuncDesc(TypeInfoFactory.booleanTypeInfo,udf,children1);
  List<String> columns=new ArrayList<String>();
  columns.add("col0");
  columns.add("col1");
  columns.add("col2");
  VectorizationContext vc=new VectorizationContext(columns);
  VectorExpression ve=vc.getVectorExpression(exprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertTrue(ve instanceof FilterStringColumnBetween);
  children1.set(0,new ExprNodeConstantDesc(new Boolean(true)));
  ve=vc.getVectorExpression(exprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertTrue(ve instanceof FilterStringColumnNotBetween);
  CharTypeInfo charTypeInfo=new CharTypeInfo(10);
  col1Expr=new ExprNodeColumnDesc(charTypeInfo,"col1","table",false);
  constDesc=new ExprNodeConstantDesc(charTypeInfo,new HiveChar("Alpha",10));
  constDesc2=new ExprNodeConstantDesc(charTypeInfo,new HiveChar("Bravo",10));
  udf=new GenericUDFBetween();
  children1=new ArrayList<ExprNodeDesc>();
  children1.add(new ExprNodeConstantDesc(new Boolean(false)));
  children1.add(col1Expr);
  children1.add(constDesc);
  children1.add(constDesc2);
  exprDesc=new ExprNodeGenericFuncDesc(TypeInfoFactory.booleanTypeInfo,udf,children1);
  vc=new VectorizationContext(columns);
  ve=vc.getVectorExpression(exprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertTrue(ve instanceof FilterCharColumnBetween);
  children1.set(0,new ExprNodeConstantDesc(new Boolean(true)));
  ve=vc.getVectorExpression(exprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertTrue(ve instanceof FilterCharColumnNotBetween);
  VarcharTypeInfo varcharTypeInfo=new VarcharTypeInfo(10);
  col1Expr=new ExprNodeColumnDesc(varcharTypeInfo,"col1","table",false);
  constDesc=new ExprNodeConstantDesc(varcharTypeInfo,new HiveVarchar("Alpha",10));
  constDesc2=new ExprNodeConstantDesc(varcharTypeInfo,new HiveVarchar("Bravo",10));
  udf=new GenericUDFBetween();
  children1=new ArrayList<ExprNodeDesc>();
  children1.add(new ExprNodeConstantDesc(new Boolean(false)));
  children1.add(col1Expr);
  children1.add(constDesc);
  children1.add(constDesc2);
  exprDesc=new ExprNodeGenericFuncDesc(TypeInfoFactory.booleanTypeInfo,udf,children1);
  vc=new VectorizationContext(columns);
  ve=vc.getVectorExpression(exprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertTrue(ve instanceof FilterVarCharColumnBetween);
  children1.set(0,new ExprNodeConstantDesc(new Boolean(true)));
  ve=vc.getVectorExpression(exprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertTrue(ve instanceof FilterVarCharColumnNotBetween);
  children1.set(0,new ExprNodeConstantDesc(new Boolean(false)));
  children1.set(1,new ExprNodeColumnDesc(Long.class,"col1","table",false));
  children1.set(2,new ExprNodeConstantDesc(10));
  children1.set(3,new ExprNodeConstantDesc(20));
  ve=vc.getVectorExpression(exprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertTrue(ve instanceof FilterLongColumnBetween);
  children1.set(0,new ExprNodeConstantDesc(new Boolean(true)));
  ve=vc.getVectorExpression(exprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertTrue(ve instanceof FilterLongColumnNotBetween);
  children1.set(0,new ExprNodeConstantDesc(new Boolean(false)));
  children1.set(1,new ExprNodeColumnDesc(Double.class,"col1","table",false));
  children1.set(2,new ExprNodeConstantDesc(10.0d));
  children1.set(3,new ExprNodeConstantDesc(20.0d));
  ve=vc.getVectorExpression(exprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertTrue(ve instanceof FilterDoubleColumnBetween);
  children1.set(0,new ExprNodeConstantDesc(new Boolean(true)));
  ve=vc.getVectorExpression(exprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertTrue(ve instanceof FilterDoubleColumnNotBetween);
  children1.set(0,new ExprNodeConstantDesc(new Boolean(false)));
  children1.set(1,new ExprNodeColumnDesc(Timestamp.class,"col1","table",false));
  children1.set(2,new ExprNodeConstantDesc("2013-11-05 00:00:00.000"));
  children1.set(3,new ExprNodeConstantDesc("2013-11-06 00:00:00.000"));
  ve=vc.getVectorExpression(exprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertEquals(FilterStringColumnBetween.class,ve.getClass());
  children1.set(0,new ExprNodeConstantDesc(new Boolean(true)));
  ve=vc.getVectorExpression(exprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertEquals(FilterStringColumnNotBetween.class,ve.getClass());
}
