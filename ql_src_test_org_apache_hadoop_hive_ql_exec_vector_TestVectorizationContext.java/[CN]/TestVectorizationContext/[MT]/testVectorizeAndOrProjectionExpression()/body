{
  ExprNodeColumnDesc col1Expr=new ExprNodeColumnDesc(Integer.class,"col1","table",false);
  ExprNodeConstantDesc constDesc=new ExprNodeConstantDesc(new Integer(10));
  GenericUDFOPGreaterThan udf=new GenericUDFOPGreaterThan();
  ExprNodeGenericFuncDesc greaterExprDesc=new ExprNodeGenericFuncDesc();
  greaterExprDesc.setTypeInfo(TypeInfoFactory.booleanTypeInfo);
  greaterExprDesc.setGenericUDF(udf);
  List<ExprNodeDesc> children1=new ArrayList<ExprNodeDesc>(2);
  children1.add(col1Expr);
  children1.add(constDesc);
  greaterExprDesc.setChildren(children1);
  ExprNodeColumnDesc col2Expr=new ExprNodeColumnDesc(Boolean.class,"col2","table",false);
  GenericUDFOPAnd andUdf=new GenericUDFOPAnd();
  ExprNodeGenericFuncDesc andExprDesc=new ExprNodeGenericFuncDesc();
  andExprDesc.setTypeInfo(TypeInfoFactory.booleanTypeInfo);
  andExprDesc.setGenericUDF(andUdf);
  List<ExprNodeDesc> children3=new ArrayList<ExprNodeDesc>(2);
  children3.add(greaterExprDesc);
  children3.add(col2Expr);
  andExprDesc.setChildren(children3);
  List<String> columns=new ArrayList<String>();
  columns.add("col1");
  columns.add("col2");
  VectorizationContext vc=new VectorizationContext("name",columns);
  VectorExpression veAnd=vc.getVectorExpression(andExprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertEquals(veAnd.getClass(),FilterExprAndExpr.class);
  assertEquals(veAnd.getChildExpressions()[0].getClass(),FilterLongColGreaterLongScalar.class);
  assertEquals(veAnd.getChildExpressions()[1].getClass(),SelectColumnIsTrue.class);
  veAnd=vc.getVectorExpression(andExprDesc,VectorExpressionDescriptor.Mode.PROJECTION);
  assertEquals(veAnd.getClass(),ColAndCol.class);
  assertEquals(1,veAnd.getChildExpressions().length);
  assertEquals(veAnd.getChildExpressions()[0].getClass(),LongColGreaterLongScalar.class);
  assertEquals(2,((ColAndCol)veAnd).getColNum1());
  assertEquals(1,((ColAndCol)veAnd).getColNum2());
  assertEquals(3,((ColAndCol)veAnd).getOutputColumn());
  GenericUDFOPOr orUdf=new GenericUDFOPOr();
  ExprNodeGenericFuncDesc orExprDesc=new ExprNodeGenericFuncDesc();
  orExprDesc.setTypeInfo(TypeInfoFactory.booleanTypeInfo);
  orExprDesc.setGenericUDF(orUdf);
  List<ExprNodeDesc> children4=new ArrayList<ExprNodeDesc>(2);
  children4.add(greaterExprDesc);
  children4.add(col2Expr);
  orExprDesc.setChildren(children4);
  vc=new VectorizationContext("name",columns);
  VectorExpression veOr=vc.getVectorExpression(orExprDesc,VectorExpressionDescriptor.Mode.FILTER);
  assertEquals(veOr.getClass(),FilterExprOrExpr.class);
  assertEquals(veOr.getChildExpressions()[0].getClass(),FilterLongColGreaterLongScalar.class);
  assertEquals(veOr.getChildExpressions()[1].getClass(),SelectColumnIsTrue.class);
  veOr=vc.getVectorExpression(orExprDesc,VectorExpressionDescriptor.Mode.PROJECTION);
  assertEquals(veOr.getClass(),ColOrCol.class);
  assertEquals(1,veAnd.getChildExpressions().length);
  assertEquals(veAnd.getChildExpressions()[0].getClass(),LongColGreaterLongScalar.class);
  assertEquals(2,((ColOrCol)veOr).getColNum1());
  assertEquals(1,((ColOrCol)veOr).getColNum2());
  assertEquals(3,((ColOrCol)veOr).getOutputColumn());
}
