{
  Text rowText=(Text)blob;
  Matcher m=inputPattern.matcher(rowText.toString());
  if (m.groupCount() != numColumns) {
    throw new SerDeException("Number of matching groups doesn't match the number of columns");
  }
  if (!m.matches()) {
    unmatchedRowsCount++;
    if (!alreadyLoggedNoMatch) {
      LOG.warn("" + unmatchedRowsCount + " unmatched rows are found: "+ rowText);
      alreadyLoggedNoMatch=true;
    }
    return null;
  }
  for (int c=0; c < numColumns; c++) {
    try {
      String t=m.group(c + 1);
      String typeName=columnTypes.get(c).getTypeName();
      if (typeName.equals(serdeConstants.STRING_TYPE_NAME)) {
        row.set(c,t);
      }
 else       if (typeName.equals(serdeConstants.TINYINT_TYPE_NAME)) {
        Byte b;
        b=Byte.valueOf(t);
        row.set(c,b);
      }
 else       if (typeName.equals(serdeConstants.SMALLINT_TYPE_NAME)) {
        Short s;
        s=Short.valueOf(t);
        row.set(c,s);
      }
 else       if (typeName.equals(serdeConstants.INT_TYPE_NAME)) {
        Integer i;
        i=Integer.valueOf(t);
        row.set(c,i);
      }
 else       if (typeName.equals(serdeConstants.BIGINT_TYPE_NAME)) {
        Long l;
        l=Long.valueOf(t);
        row.set(c,l);
      }
 else       if (typeName.equals(serdeConstants.FLOAT_TYPE_NAME)) {
        Float f;
        f=Float.valueOf(t);
        row.set(c,f);
      }
 else       if (typeName.equals(serdeConstants.DOUBLE_TYPE_NAME)) {
        Double d;
        d=Double.valueOf(t);
        row.set(c,d);
      }
 else       if (typeName.equals(serdeConstants.BOOLEAN_TYPE_NAME)) {
        Boolean b;
        b=Boolean.valueOf(t);
        row.set(c,b);
      }
 else       if (typeName.equals(serdeConstants.DECIMAL_TYPE_NAME)) {
        BigDecimal bd;
        bd=new BigDecimal(t);
        row.set(c,bd);
      }
    }
 catch (    RuntimeException e) {
      partialMatchedRowsCount++;
      if (!alreadyLoggedPartialMatch) {
        LOG.warn("" + partialMatchedRowsCount + " partially unmatched rows are found, "+ " cannot find group "+ c+ ": "+ rowText);
        alreadyLoggedPartialMatch=true;
      }
      row.set(c,null);
    }
  }
  return row;
}
