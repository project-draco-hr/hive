{
  ExprNodeColumnDesc col1Expr=new ExprNodeColumnDesc(Integer.class,"col1","table",false);
  ExprNodeConstantDesc constDesc=new ExprNodeConstantDesc(new Integer(10));
  GenericUDFOPGreaterThan udf=new GenericUDFOPGreaterThan();
  ExprNodeGenericFuncDesc greaterExprDesc=new ExprNodeGenericFuncDesc();
  greaterExprDesc.setTypeInfo(TypeInfoFactory.booleanTypeInfo);
  greaterExprDesc.setGenericUDF(udf);
  List<ExprNodeDesc> children1=new ArrayList<ExprNodeDesc>(2);
  children1.add(col1Expr);
  children1.add(constDesc);
  greaterExprDesc.setChildren(children1);
  FakeGenericUDF udf2=new FakeGenericUDF();
  ExprNodeGenericFuncDesc nonSupportedExpr=new ExprNodeGenericFuncDesc();
  nonSupportedExpr.setTypeInfo(TypeInfoFactory.booleanTypeInfo);
  nonSupportedExpr.setGenericUDF(udf2);
  GenericUDFOPAnd andUdf=new GenericUDFOPAnd();
  ExprNodeGenericFuncDesc andExprDesc=new ExprNodeGenericFuncDesc();
  andExprDesc.setTypeInfo(TypeInfoFactory.booleanTypeInfo);
  andExprDesc.setGenericUDF(andUdf);
  List<ExprNodeDesc> children3=new ArrayList<ExprNodeDesc>(2);
  children3.add(greaterExprDesc);
  children3.add(nonSupportedExpr);
  andExprDesc.setChildren(children3);
  Vectorizer v=new Vectorizer();
  Assert.assertFalse(v.validateExprNodeDesc(andExprDesc,VectorExpressionDescriptor.Mode.FILTER));
  Assert.assertFalse(v.validateExprNodeDesc(andExprDesc,VectorExpressionDescriptor.Mode.PROJECTION));
}
