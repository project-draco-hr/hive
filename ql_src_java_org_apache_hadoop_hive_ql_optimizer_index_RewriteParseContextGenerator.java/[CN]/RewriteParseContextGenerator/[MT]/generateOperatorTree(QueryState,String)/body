{
  Operator<? extends OperatorDesc> operatorTree;
  try {
    Context ctx=new Context(queryState.getConf());
    ParseDriver pd=new ParseDriver();
    ASTNode tree=pd.parse(command,ctx);
    tree=ParseUtils.findRootNonNullToken(tree);
    BaseSemanticAnalyzer sem=SemanticAnalyzerFactory.get(queryState,tree);
    assert(sem instanceof SemanticAnalyzer);
    operatorTree=doSemanticAnalysis((SemanticAnalyzer)sem,tree,ctx);
    LOG.info("Sub-query Semantic Analysis Completed");
  }
 catch (  IOException e) {
    LOG.error("IOException in generating the operator " + "tree for input command - " + command + " ",e);
    LOG.error(org.apache.hadoop.util.StringUtils.stringifyException(e));
    throw new SemanticException(e.getMessage(),e);
  }
catch (  ParseException e) {
    LOG.error("ParseException in generating the operator " + "tree for input command - " + command + " ",e);
    LOG.error(org.apache.hadoop.util.StringUtils.stringifyException(e));
    throw new SemanticException(e.getMessage(),e);
  }
catch (  SemanticException e) {
    LOG.error("SemanticException in generating the operator " + "tree for input command - " + command + " ",e);
    LOG.error(org.apache.hadoop.util.StringUtils.stringifyException(e));
    throw new SemanticException(e.getMessage(),e);
  }
  return operatorTree;
}
