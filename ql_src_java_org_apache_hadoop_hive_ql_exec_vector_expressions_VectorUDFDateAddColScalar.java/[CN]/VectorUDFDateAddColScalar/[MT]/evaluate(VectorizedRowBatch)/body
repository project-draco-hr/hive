{
  if (childExpressions != null) {
    super.evaluateChildren(batch);
  }
  LongColumnVector outV=(LongColumnVector)batch.cols[outputColumn];
  ColumnVector inputCol=batch.cols[this.colNum];
  final int n=inputCol.isRepeating ? 1 : batch.size;
  int[] sel=batch.selected;
  final boolean selectedInUse=(inputCol.isRepeating == false) && batch.selectedInUse;
  if (batch.size == 0) {
    return;
  }
  outV.isRepeating=inputCol.isRepeating;
switch (inputTypes[0]) {
case DATE:
    if (inputCol.noNulls) {
      outV.noNulls=true;
      if (selectedInUse) {
        for (int j=0; j < n; j++) {
          int i=sel[j];
          outV.vector[i]=evaluateDate(inputCol,i);
        }
      }
 else {
        for (int i=0; i < n; i++) {
          outV.vector[i]=evaluateDate(inputCol,i);
        }
      }
    }
 else {
      outV.noNulls=false;
      if (selectedInUse) {
        for (int j=0; j < n; j++) {
          int i=sel[j];
          outV.isNull[i]=inputCol.isNull[i];
          if (!inputCol.isNull[i]) {
            outV.vector[i]=evaluateDate(inputCol,i);
          }
        }
      }
 else {
        for (int i=0; i < n; i++) {
          outV.isNull[i]=inputCol.isNull[i];
          if (!inputCol.isNull[i]) {
            outV.vector[i]=evaluateDate(inputCol,i);
          }
        }
      }
    }
  break;
case TIMESTAMP:
if (inputCol.noNulls) {
  outV.noNulls=true;
  if (batch.selectedInUse) {
    for (int j=0; j < n; j++) {
      int i=sel[j];
      outV.vector[i]=evaluateTimestamp(inputCol,i);
    }
  }
 else {
    for (int i=0; i < n; i++) {
      outV.vector[i]=evaluateTimestamp(inputCol,i);
    }
  }
}
 else {
  outV.noNulls=false;
  if (batch.selectedInUse) {
    for (int j=0; j < n; j++) {
      int i=sel[j];
      outV.isNull[i]=inputCol.isNull[i];
      if (!inputCol.isNull[i]) {
        outV.vector[i]=evaluateTimestamp(inputCol,i);
      }
    }
  }
 else {
    for (int i=0; i < n; i++) {
      outV.isNull[i]=inputCol.isNull[i];
      if (!inputCol.isNull[i]) {
        outV.vector[i]=evaluateTimestamp(inputCol,i);
      }
    }
  }
}
break;
case STRING:
case CHAR:
case VARCHAR:
if (inputCol.noNulls) {
outV.noNulls=true;
if (batch.selectedInUse) {
for (int j=0; j < n; j++) {
  int i=sel[j];
  evaluateString(inputCol,outV,i);
}
}
 else {
for (int i=0; i < n; i++) {
  evaluateString(inputCol,outV,i);
}
}
}
 else {
outV.noNulls=false;
if (batch.selectedInUse) {
for (int j=0; j < n; j++) {
  int i=sel[j];
  outV.isNull[i]=inputCol.isNull[i];
  if (!inputCol.isNull[i]) {
    evaluateString(inputCol,outV,i);
  }
}
}
 else {
for (int i=0; i < n; i++) {
  outV.isNull[i]=inputCol.isNull[i];
  if (!inputCol.isNull[i]) {
    evaluateString(inputCol,outV,i);
  }
}
}
}
break;
default :
throw new Error("Unsupported input type " + inputTypes[0].name());
}
}
