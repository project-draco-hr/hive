def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.STRUCT):
                self.tbl = Table()
                self.tbl.read(iprot)
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.LIST):
                self.primaryKeys = []
                (_etype590, _size587) = iprot.readListBegin()
                for _i591 in xrange(_size587):
                    _elem592 = SQLPrimaryKey()
                    _elem592.read(iprot)
                    self.primaryKeys.append(_elem592)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 3):
            if (ftype == TType.LIST):
                self.foreignKeys = []
                (_etype596, _size593) = iprot.readListBegin()
                for _i597 in xrange(_size593):
                    _elem598 = SQLForeignKey()
                    _elem598.read(iprot)
                    self.foreignKeys.append(_elem598)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
