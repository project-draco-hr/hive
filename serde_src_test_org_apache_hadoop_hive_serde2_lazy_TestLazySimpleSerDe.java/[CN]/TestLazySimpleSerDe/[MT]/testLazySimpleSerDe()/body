{
  try {
    LazySimpleSerDe serDe=new LazySimpleSerDe();
    Configuration conf=new Configuration();
    Properties tbl=new Properties();
    tbl.setProperty(Constants.SERIALIZATION_FORMAT,"9");
    tbl.setProperty("columns","abyte,ashort,aint,along,adouble,astring,anullint,anullstring,aba");
    tbl.setProperty("columns.types","tinyint:smallint:int:bigint:double:string:int:string:binary");
    tbl.setProperty(Constants.SERIALIZATION_NULL_FORMAT,"NULL");
    serDe.initialize(conf,tbl);
    Text t=new Text("123\t456\t789\t1000\t5.3\thive and hadoop\t1.\tNULL\t");
    t.append(new byte[]{(byte)Integer.parseInt("10111111",2)},0,1);
    StringBuffer sb=new StringBuffer("123\t456\t789\t1000\t5.3\thive and hadoop\tNULL\tNULL\t");
    String s=sb.append(new String(Base64.encodeBase64(new byte[]{(byte)Integer.parseInt("10111111",2)}))).toString();
    Object[] expectedFieldsData={new ByteWritable((byte)123),new ShortWritable((short)456),new IntWritable(789),new LongWritable(1000),new DoubleWritable(5.3),new Text("hive and hadoop"),null,null,new BytesWritable(new byte[]{(byte)Integer.parseInt("10111111",2)})};
    deserializeAndSerialize(serDe,t,s,expectedFieldsData);
  }
 catch (  Throwable e) {
    e.printStackTrace();
    throw e;
  }
}
