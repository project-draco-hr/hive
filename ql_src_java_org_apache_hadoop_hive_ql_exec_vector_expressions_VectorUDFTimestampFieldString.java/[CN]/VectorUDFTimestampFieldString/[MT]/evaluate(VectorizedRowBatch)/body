{
  if (childExpressions != null) {
    super.evaluateChildren(batch);
  }
  LongColumnVector outV=(LongColumnVector)batch.cols[outputColumn];
  BytesColumnVector inputCol=(BytesColumnVector)batch.cols[this.colNum];
  final int n=inputCol.isRepeating ? 1 : batch.size;
  int[] sel=batch.selected;
  final boolean selectedInUse=(inputCol.isRepeating == false) && batch.selectedInUse;
  if (batch.size == 0) {
    return;
  }
  outV.isRepeating=inputCol.isRepeating;
  if (inputCol.noNulls) {
    outV.noNulls=true;
    if (selectedInUse) {
      for (int j=0; j < n; j++) {
        int i=sel[j];
        try {
          outV.vector[i]=getField(inputCol.vector[i],inputCol.start[i],inputCol.length[i]);
          outV.isNull[i]=false;
        }
 catch (        ParseException e) {
          outV.noNulls=false;
          outV.isNull[i]=true;
        }
      }
    }
 else {
      for (int i=0; i < n; i++) {
        try {
          outV.vector[i]=getField(inputCol.vector[i],inputCol.start[i],inputCol.length[i]);
          outV.isNull[i]=false;
        }
 catch (        ParseException e) {
          outV.noNulls=false;
          outV.isNull[i]=true;
        }
      }
    }
  }
 else {
    outV.noNulls=false;
    if (selectedInUse) {
      for (int j=0; j < n; j++) {
        int i=sel[j];
        outV.isNull[i]=inputCol.isNull[i];
        if (!inputCol.isNull[i]) {
          try {
            outV.vector[i]=getField(inputCol.vector[i],inputCol.start[i],inputCol.length[i]);
          }
 catch (          ParseException e) {
            outV.isNull[i]=true;
          }
        }
      }
    }
 else {
      for (int i=0; i < n; i++) {
        outV.isNull[i]=inputCol.isNull[i];
        if (!inputCol.isNull[i]) {
          try {
            outV.vector[i]=getField(inputCol.vector[i],inputCol.start[i],inputCol.length[i]);
          }
 catch (          ParseException e) {
            outV.isNull[i]=true;
          }
        }
      }
    }
  }
}
