{
  if (curOp.getChildOperators() == null || !(curOp instanceof FilterOperator)) {
    return;
  }
  List<String> parentPrunList=prunedColLists.get(curOp);
  if (parentPrunList == null || parentPrunList.size() == 0) {
    return;
  }
  FilterOperator filOp=(FilterOperator)curOp;
  List<String> prunList=null;
  List<Integer>[] childToParentIndex=null;
  for (  Operator<? extends OperatorDesc> child : curOp.getChildOperators()) {
    if (child instanceof UnionOperator) {
      prunList=genColLists(child);
      if (prunList == null || prunList.size() == 0 || parentPrunList.size() == prunList.size()) {
        continue;
      }
      ArrayList<ExprNodeDesc> exprs=new ArrayList<ExprNodeDesc>();
      ArrayList<String> outputColNames=new ArrayList<String>();
      Map<String,ExprNodeDesc> colExprMap=new HashMap<String,ExprNodeDesc>();
      ArrayList<ColumnInfo> outputRS=new ArrayList<ColumnInfo>();
      for (      ColumnInfo colInfo : child.getSchema().getSignature()) {
        if (!prunList.contains(colInfo.getInternalName())) {
          continue;
        }
        ExprNodeDesc colDesc=new ExprNodeColumnDesc(colInfo.getType(),colInfo.getInternalName(),colInfo.getTabAlias(),colInfo.getIsVirtualCol());
        exprs.add(colDesc);
        outputColNames.add(colInfo.getInternalName());
        ColumnInfo newCol=new ColumnInfo(colInfo.getInternalName(),colInfo.getType(),colInfo.getTabAlias(),colInfo.getIsVirtualCol(),colInfo.isHiddenVirtualCol());
        newCol.setAlias(colInfo.getAlias());
        outputRS.add(newCol);
        colExprMap.put(colInfo.getInternalName(),colDesc);
      }
      SelectDesc select=new SelectDesc(exprs,outputColNames,false);
      curOp.removeChild(child);
      SelectOperator sel=(SelectOperator)OperatorFactory.getAndMakeChild(select,new RowSchema(outputRS),curOp);
      OperatorFactory.makeChild(sel,child);
      sel.setColumnExprMap(colExprMap);
    }
  }
}
