{
  Configuration conf=getConf();
  args=new GenericOptionsParser(conf,args).getRemainingArgs();
  String serverUri=args[0];
  String inputDir=args[1];
  String tableName=args[2];
  String outputDir=args[3];
  String dbName=null;
  String principalID=System.getProperty(HCatConstants.HCAT_METASTORE_PRINCIPAL);
  if (principalID != null)   conf.set(HCatConstants.HCAT_METASTORE_PRINCIPAL,principalID);
  conf.set("hcat.hbase.output.bulkMode","false");
  Job job=new Job(conf,"HBaseWrite");
  FileInputFormat.setInputPaths(job,inputDir);
  job.setInputFormatClass(TextInputFormat.class);
  job.setOutputFormatClass(HCatOutputFormat.class);
  job.setJarByClass(HBaseReadWrite.class);
  job.setMapperClass(HBaseWriteMap.class);
  job.setMapOutputKeyClass(Text.class);
  job.setMapOutputValueClass(Text.class);
  job.setReducerClass(HBaseWriteReduce.class);
  job.setOutputKeyClass(WritableComparable.class);
  job.setOutputValueClass(DefaultHCatRecord.class);
  HCatOutputFormat.setOutput(job,OutputJobInfo.create(dbName,tableName,null));
  boolean succ=job.waitForCompletion(true);
  if (!succ)   return 1;
  job=new Job(conf,"HBaseRead");
  HCatInputFormat.setInput(job,dbName,tableName);
  job.setInputFormatClass(HCatInputFormat.class);
  job.setOutputFormatClass(TextOutputFormat.class);
  job.setJarByClass(HBaseReadWrite.class);
  job.setMapperClass(HBaseReadMap.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  job.setNumReduceTasks(0);
  TextOutputFormat.setOutputPath(job,new Path(outputDir));
  succ=job.waitForCompletion(true);
  if (!succ)   return 2;
  return 0;
}
