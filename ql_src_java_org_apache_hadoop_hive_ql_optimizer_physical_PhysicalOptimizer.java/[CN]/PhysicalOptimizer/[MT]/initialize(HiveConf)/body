{
  resolvers=new ArrayList<PhysicalPlanResolver>();
  if (hiveConf.getBoolVar(HiveConf.ConfVars.HIVESKEWJOIN)) {
    resolvers.add(new SkewJoinResolver());
  }
  if (hiveConf.getBoolVar(HiveConf.ConfVars.HIVECONVERTJOIN)) {
    resolvers.add(new CommonJoinResolver());
    if (hiveConf.getBoolVar(HiveConf.ConfVars.HIVE_AUTO_SORTMERGE_JOIN_TOMAPJOIN)) {
      resolvers.add(new SortMergeJoinResolver());
    }
  }
  if (hiveConf.getBoolVar(HiveConf.ConfVars.HIVEOPTINDEXFILTER)) {
    resolvers.add(new IndexWhereResolver());
  }
  resolvers.add(new MapJoinResolver());
  if (hiveConf.getBoolVar(HiveConf.ConfVars.HIVEMETADATAONLYQUERIES)) {
    resolvers.add(new MetadataOnlyOptimizer());
  }
  if (hiveConf.getBoolVar(HiveConf.ConfVars.HIVENULLSCANOPTIMIZE)) {
    resolvers.add(new NullScanOptimizer());
  }
  if (hiveConf.getBoolVar(HiveConf.ConfVars.HIVESAMPLINGFORORDERBY)) {
    resolvers.add(new SamplingOptimizer());
  }
  if (hiveConf.getBoolVar(HiveConf.ConfVars.HIVE_INFER_BUCKET_SORT)) {
    resolvers.add(new BucketingSortingInferenceOptimizer());
  }
  if (hiveConf.getBoolVar(HiveConf.ConfVars.HIVE_CHECK_CROSS_PRODUCT)) {
    resolvers.add(new CrossProductCheck());
  }
  if (hiveConf.getBoolVar(HiveConf.ConfVars.HIVE_VECTORIZATION_ENABLED)) {
    resolvers.add(new Vectorizer());
  }
  if (!"none".equalsIgnoreCase(hiveConf.getVar(HiveConf.ConfVars.HIVESTAGEIDREARRANGE))) {
    resolvers.add(new StageIDsRearranger());
  }
}
