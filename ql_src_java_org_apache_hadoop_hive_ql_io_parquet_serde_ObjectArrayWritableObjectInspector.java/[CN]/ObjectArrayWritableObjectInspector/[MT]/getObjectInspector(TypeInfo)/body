{
  if (typeInfo.equals(TypeInfoFactory.doubleTypeInfo)) {
    return PrimitiveObjectInspectorFactory.javaDoubleObjectInspector;
  }
 else   if (typeInfo.equals(TypeInfoFactory.booleanTypeInfo)) {
    return PrimitiveObjectInspectorFactory.javaBooleanObjectInspector;
  }
 else   if (typeInfo.equals(TypeInfoFactory.floatTypeInfo)) {
    return PrimitiveObjectInspectorFactory.javaFloatObjectInspector;
  }
 else   if (typeInfo.equals(TypeInfoFactory.intTypeInfo)) {
    return PrimitiveObjectInspectorFactory.javaIntObjectInspector;
  }
 else   if (typeInfo.equals(TypeInfoFactory.longTypeInfo)) {
    return PrimitiveObjectInspectorFactory.javaLongObjectInspector;
  }
 else   if (typeInfo.equals(TypeInfoFactory.stringTypeInfo)) {
    return ParquetPrimitiveInspectorFactory.parquetStringInspector;
  }
 else   if (typeInfo instanceof DecimalTypeInfo) {
    return PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector((DecimalTypeInfo)typeInfo);
  }
 else   if (typeInfo.getCategory().equals(Category.STRUCT)) {
    return new ObjectArrayWritableObjectInspector((StructTypeInfo)typeInfo);
  }
 else   if (typeInfo.getCategory().equals(Category.LIST)) {
    final TypeInfo subTypeInfo=((ListTypeInfo)typeInfo).getListElementTypeInfo();
    return new ParquetHiveArrayInspector(getObjectInspector(subTypeInfo));
  }
 else   if (typeInfo.getCategory().equals(Category.MAP)) {
    final TypeInfo keyTypeInfo=((MapTypeInfo)typeInfo).getMapKeyTypeInfo();
    final TypeInfo valueTypeInfo=((MapTypeInfo)typeInfo).getMapValueTypeInfo();
    if (keyTypeInfo.equals(TypeInfoFactory.stringTypeInfo) || keyTypeInfo.equals(TypeInfoFactory.byteTypeInfo) || keyTypeInfo.equals(TypeInfoFactory.shortTypeInfo)) {
      return new DeepParquetHiveMapInspector(getObjectInspector(keyTypeInfo),getObjectInspector(valueTypeInfo));
    }
 else {
      return new StandardParquetHiveMapInspector(getObjectInspector(keyTypeInfo),getObjectInspector(valueTypeInfo));
    }
  }
 else   if (typeInfo.equals(TypeInfoFactory.byteTypeInfo)) {
    return ParquetPrimitiveInspectorFactory.parquetByteInspector;
  }
 else   if (typeInfo.equals(TypeInfoFactory.shortTypeInfo)) {
    return ParquetPrimitiveInspectorFactory.parquetShortInspector;
  }
 else   if (typeInfo.equals(TypeInfoFactory.timestampTypeInfo)) {
    return PrimitiveObjectInspectorFactory.writableTimestampObjectInspector;
  }
 else   if (typeInfo.equals(TypeInfoFactory.binaryTypeInfo)) {
    return PrimitiveObjectInspectorFactory.writableBinaryObjectInspector;
  }
 else   if (typeInfo.equals(TypeInfoFactory.dateTypeInfo)) {
    return PrimitiveObjectInspectorFactory.writableDateObjectInspector;
  }
 else   if (typeInfo.getTypeName().toLowerCase().startsWith(serdeConstants.CHAR_TYPE_NAME)) {
    return PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector((CharTypeInfo)typeInfo);
  }
 else   if (typeInfo.getTypeName().toLowerCase().startsWith(serdeConstants.VARCHAR_TYPE_NAME)) {
    return PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector((VarcharTypeInfo)typeInfo);
  }
 else {
    throw new UnsupportedOperationException("Unknown field type: " + typeInfo);
  }
}
