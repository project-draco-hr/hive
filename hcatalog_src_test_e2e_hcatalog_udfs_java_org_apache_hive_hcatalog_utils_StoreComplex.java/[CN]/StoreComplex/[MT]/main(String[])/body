{
  Configuration conf=new Configuration();
  args=new GenericOptionsParser(conf,args).getRemainingArgs();
  String[] otherArgs=new String[1];
  int j=0;
  for (int i=0; i < args.length; i++) {
    if (args[i].equals("-libjars")) {
      conf.set("tmpjars",args[i + 1]);
      i=i + 1;
    }
 else {
      otherArgs[j++]=args[i];
    }
  }
  if (otherArgs.length != 1) {
    usage();
  }
  String serverUri=otherArgs[0];
  String tableName=COMPLEX_TABLE_NAME;
  String dbName="default";
  Map<String,String> outputPartitionKvps=new HashMap<String,String>();
  String outputTableName=null;
  outputTableName=COMPLEX_NOPART_EMPTY_INITIALLY_TABLE_NAME;
  if (new Random().nextInt(2) == 0) {
    System.err.println("INFO: output partition keys set to null for writing");
    outputPartitionKvps=null;
  }
  String principalID=System.getProperty(HCatConstants.HCAT_METASTORE_PRINCIPAL);
  if (principalID != null)   conf.set(HCatConstants.HCAT_METASTORE_PRINCIPAL,principalID);
  Job job=new Job(conf,"storecomplex");
  HCatInputFormat.setInput(job,dbName,tableName);
  HCatOutputFormat.setOutput(job,OutputJobInfo.create(dbName,outputTableName,outputPartitionKvps));
  HCatSchema s=HCatInputFormat.getTableSchema(job);
  HCatOutputFormat.setSchema(job,s);
  job.setInputFormatClass(HCatInputFormat.class);
  job.setOutputFormatClass(HCatOutputFormat.class);
  job.setJarByClass(StoreComplex.class);
  job.setMapperClass(ComplexMapper.class);
  job.setOutputKeyClass(IntWritable.class);
  job.setOutputValueClass(DefaultHCatRecord.class);
  System.exit(job.waitForCompletion(true) ? 0 : 1);
}
