{
  if (arguments.length == 2 && (arguments[1] == null || arguments[1].get() == null)) {
    return null;
  }
  if (arguments[0] == null) {
    return null;
  }
  Object input=arguments[0].get();
  if (input == null) {
    return null;
  }
switch (inputType) {
case VOID:
    return null;
case DECIMAL:
  HiveDecimalWritable decimalWritable=(HiveDecimalWritable)inputOI.getPrimitiveWritableObject(input);
HiveDecimal dec=RoundUtils.round(decimalWritable.getHiveDecimal(),scale);
if (dec == null) {
return null;
}
return new HiveDecimalWritable(dec);
case BYTE:
ByteWritable byteWritable=(ByteWritable)inputOI.getPrimitiveWritableObject(input);
if (scale >= 0) {
return byteWritable;
}
 else {
return new ByteWritable((byte)RoundUtils.round(byteWritable.get(),scale));
}
case SHORT:
ShortWritable shortWritable=(ShortWritable)inputOI.getPrimitiveWritableObject(input);
if (scale >= 0) {
return shortWritable;
}
 else {
return new ShortWritable((short)RoundUtils.round(shortWritable.get(),scale));
}
case INT:
IntWritable intWritable=(IntWritable)inputOI.getPrimitiveWritableObject(input);
if (scale >= 0) {
return intWritable;
}
 else {
return new IntWritable((int)RoundUtils.round(intWritable.get(),scale));
}
case LONG:
LongWritable longWritable=(LongWritable)inputOI.getPrimitiveWritableObject(input);
if (scale >= 0) {
return longWritable;
}
 else {
return new LongWritable(RoundUtils.round(longWritable.get(),scale));
}
case FLOAT:
float f=((FloatWritable)inputOI.getPrimitiveWritableObject(input)).get();
return new FloatWritable((float)RoundUtils.round(f,scale));
case DOUBLE:
return round(((DoubleWritable)inputOI.getPrimitiveWritableObject(input)),scale);
case STRING:
case VARCHAR:
DoubleWritable doubleValue=(DoubleWritable)converterFromString.convert(input);
if (doubleValue == null) {
return null;
}
return round(doubleValue,scale);
default :
throw new UDFArgumentException("Only numeric data types are allowed for ROUND function. Got " + inputType.name());
}
}
