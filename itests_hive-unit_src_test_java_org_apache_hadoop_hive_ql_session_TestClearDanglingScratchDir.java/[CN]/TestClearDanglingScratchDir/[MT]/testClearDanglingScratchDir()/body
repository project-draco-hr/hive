{
  redirectOutput();
  ClearDanglingScratchDir.main(new String[]{"-s",m_dfs.getFileSystem().getUri().toString() + scratchDir.toUri().toString()});
  rollbackOutput();
  Assert.assertTrue(FileUtils.readFileToString(logFile).contains("Cannot find any scratch directory to clear"));
  m_dfs.getFileSystem().mkdirs(new Path(new Path(scratchDir,"dummy"),UUID.randomUUID().toString()));
  redirectOutput();
  ClearDanglingScratchDir.main(new String[]{"-s",m_dfs.getFileSystem().getUri().toString() + scratchDir.toUri().toString()});
  rollbackOutput();
  Assert.assertEquals(StringUtils.countMatches(FileUtils.readFileToString(logFile),"since it does not contain " + SessionState.LOCK_FILE_NAME),1);
  Assert.assertTrue(FileUtils.readFileToString(logFile).contains("Cannot find any scratch directory to clear"));
  SessionState ss=SessionState.start(conf);
  redirectOutput();
  ClearDanglingScratchDir.main(new String[]{"-s",m_dfs.getFileSystem().getUri().toString() + scratchDir.toUri().toString()});
  rollbackOutput();
  Assert.assertEquals(StringUtils.countMatches(FileUtils.readFileToString(logFile),"is being used by live process"),1);
  ss.releaseSessionLockFile();
  redirectOutput();
  ClearDanglingScratchDir.main(new String[]{"-r","-s",m_dfs.getFileSystem().getUri().toString() + scratchDir.toUri().toString()});
  rollbackOutput();
  Assert.assertFalse(stdout.toString().isEmpty());
  redirectOutput();
  ClearDanglingScratchDir.main(new String[]{"-s",m_dfs.getFileSystem().getUri().toString() + scratchDir.toUri().toString()});
  rollbackOutput();
  Assert.assertTrue(FileUtils.readFileToString(logFile).contains("Removing 1 scratch directories"));
  Assert.assertEquals(StringUtils.countMatches(FileUtils.readFileToString(logFile),"removed"),1);
  ss.close();
}
