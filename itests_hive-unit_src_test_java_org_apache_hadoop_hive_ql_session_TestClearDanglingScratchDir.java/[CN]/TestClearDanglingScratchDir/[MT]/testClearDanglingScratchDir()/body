{
  redirectStdOutErr();
  ClearDanglingScratchDir.main(new String[]{"-v","-s",m_dfs.getFileSystem().getUri().toString() + scratchDir.toUri().toString()});
  rollbackStdOutErr();
  Assert.assertTrue(stderr.toString().contains("Cannot find any scratch directory to clear"));
  m_dfs.getFileSystem().mkdirs(new Path(new Path(scratchDir,"dummy"),UUID.randomUUID().toString()));
  redirectStdOutErr();
  ClearDanglingScratchDir.main(new String[]{"-v","-s",m_dfs.getFileSystem().getUri().toString() + scratchDir.toUri().toString()});
  rollbackStdOutErr();
  Assert.assertEquals(StringUtils.countMatches(stderr.toString(),"since it does not contain " + SessionState.LOCK_FILE_NAME),1);
  Assert.assertTrue(stderr.toString().contains("Cannot find any scratch directory to clear"));
  SessionState ss=SessionState.start(conf);
  redirectStdOutErr();
  ClearDanglingScratchDir.main(new String[]{"-v","-s",m_dfs.getFileSystem().getUri().toString() + scratchDir.toUri().toString()});
  rollbackStdOutErr();
  Assert.assertEquals(StringUtils.countMatches(stderr.toString(),"is being used by live process"),1);
  ss.releaseSessionLockFile();
  redirectStdOutErr();
  ClearDanglingScratchDir.main(new String[]{"-r","-v","-s",m_dfs.getFileSystem().getUri().toString() + scratchDir.toUri().toString()});
  rollbackStdOutErr();
  Assert.assertFalse(stdout.toString().isEmpty());
  redirectStdOutErr();
  ClearDanglingScratchDir.main(new String[]{"-v","-s",m_dfs.getFileSystem().getUri().toString() + scratchDir.toUri().toString()});
  rollbackStdOutErr();
  Assert.assertTrue(stderr.toString().contains("Removing 1 scratch directories"));
  Assert.assertEquals(StringUtils.countMatches(stderr.toString(),"removed"),1);
  ss.close();
}
