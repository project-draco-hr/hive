{
  logFile=File.createTempFile("log","");
  File log4jConfig=File.createTempFile("config",".properties");
  log4jConfig.deleteOnExit();
  PrintWriter pw=new PrintWriter(log4jConfig);
  pw.println("appenders = console, file");
  pw.println("appender.console.type = Console");
  pw.println("appender.console.name = STDOUT");
  pw.println("appender.console.layout.type = PatternLayout");
  pw.println("appender.console.layout.pattern = %t %-5p %c{2} - %m%n");
  pw.println("appender.file.type = File");
  pw.println("appender.file.name = LOGFILE");
  pw.println("appender.file.fileName = " + logFile.getAbsolutePath());
  pw.println("appender.file.layout.type = PatternLayout");
  pw.println("appender.file.layout.pattern = %t %-5p %c{2} - %m%n");
  pw.println("rootLogger.level = debug");
  pw.println("rootLogger.appenderRefs = stdout");
  pw.println("rootLogger.appenderRef.stdout.ref = STDOUT");
  pw.println("loggers = file");
  pw.println("logger.file.name = SessionState");
  pw.println("logger.file.level = debug");
  pw.println("logger.file.appenderRefs = file");
  pw.println("logger.file.appenderRef.file.ref = LOGFILE");
  pw.close();
  System.setProperty("log4j.configurationFile",log4jConfig.getAbsolutePath());
  m_dfs=new MiniDFSCluster.Builder(new Configuration()).numDataNodes(1).format(true).build();
  conf=new HiveConf();
  conf.set(HiveConf.ConfVars.HIVE_SCRATCH_DIR_LOCK.toString(),"true");
  conf.set(HiveConf.ConfVars.METASTORE_AUTO_CREATE_ALL.toString(),"true");
  LoggerFactory.getLogger("SessionState");
  conf.setVar(HiveConf.ConfVars.METASTOREWAREHOUSE,new Path(System.getProperty("test.tmp.dir"),"warehouse").toString());
  conf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY,m_dfs.getFileSystem().getUri().toString());
  scratchDir=new Path(HiveConf.getVar(conf,HiveConf.ConfVars.SCRATCHDIR));
  m_dfs.getFileSystem().mkdirs(scratchDir);
  m_dfs.getFileSystem().setPermission(scratchDir,new FsPermission("777"));
}
