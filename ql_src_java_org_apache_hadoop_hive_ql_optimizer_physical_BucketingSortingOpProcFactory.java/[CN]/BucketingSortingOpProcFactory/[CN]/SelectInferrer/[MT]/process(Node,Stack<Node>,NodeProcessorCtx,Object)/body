{
  BucketingSortingCtx bctx=(BucketingSortingCtx)procCtx;
  SelectOperator sop=(SelectOperator)nd;
  if (sop.getNumParent() == 1 && sop.getParentOperators().get(0) instanceof ReduceSinkOperator) {
    ReduceSinkOperator rs=(ReduceSinkOperator)sop.getParentOperators().get(0);
    extractTraits(bctx,rs,sop);
    return null;
  }
  Operator<? extends OperatorDesc> parent=getParent(stack);
  if (sop.getConf().isSelStarNoCompute()) {
    processForward(sop,bctx,parent);
    return null;
  }
  List<BucketCol> bucketCols=bctx.getBucketedCols(parent);
  List<SortCol> sortCols=bctx.getSortedCols(parent);
  List<ColumnInfo> colInfos=sop.getSchema().getSignature();
  if (bucketCols == null && sortCols == null) {
    return null;
  }
  BucketCol[] newBucketCols=null;
  SortCol[] newSortCols=null;
  if (bucketCols != null) {
    newBucketCols=new BucketCol[bucketCols.size()];
  }
  if (sortCols != null) {
    newSortCols=new SortCol[sortCols.size()];
  }
  findBucketingSortingColumns(sop.getConf().getColList(),colInfos,bucketCols,sortCols,newBucketCols,newSortCols);
  setBucketingColsIfComplete(bctx,sop,newBucketCols);
  setSortingColsIfComplete(bctx,sop,newSortCols);
  return null;
}
