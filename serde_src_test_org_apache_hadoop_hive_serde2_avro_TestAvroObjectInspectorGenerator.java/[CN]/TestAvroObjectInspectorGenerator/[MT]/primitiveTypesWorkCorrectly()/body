{
  final String bunchOfPrimitives="{\n" + "  \"namespace\": \"testing\",\n" + "  \"name\": \"PrimitiveTypes\",\n"+ "  \"type\": \"record\",\n"+ "  \"fields\": [\n"+ "    {\n"+ "      \"name\":\"aString\",\n"+ "      \"type\":\"string\"\n"+ "    },\n"+ "    {\n"+ "      \"name\":\"anInt\",\n"+ "      \"type\":\"int\"\n"+ "    },\n"+ "    {\n"+ "      \"name\":\"aBoolean\",\n"+ "      \"type\":\"boolean\"\n"+ "    },\n"+ "    {\n"+ "      \"name\":\"aLong\",\n"+ "      \"type\":\"long\"\n"+ "    },\n"+ "    {\n"+ "      \"name\":\"aFloat\",\n"+ "      \"type\":\"float\"\n"+ "    },\n"+ "    {\n"+ "      \"name\":\"aDouble\",\n"+ "      \"type\":\"double\"\n"+ "    },\n"+ "    {\n"+ "      \"name\":\"aNull\",\n"+ "      \"type\":\"null\"\n"+ "    }\n"+ "  ]\n"+ "}";
  AvroObjectInspectorGenerator aoig=new AvroObjectInspectorGenerator(Schema.parse(bunchOfPrimitives));
  String[] expectedColumnNames={"aString","anInt","aBoolean","aLong","aFloat","aDouble","aNull"};
  verifyColumnNames(expectedColumnNames,aoig.getColumnNames());
  TypeInfo[] expectedColumnTypes={STRING,INT,BOOLEAN,LONG,FLOAT,DOUBLE,VOID};
  verifyColumnTypes(expectedColumnTypes,aoig.getColumnTypes());
  final ObjectInspector oi=aoig.getObjectInspector();
  assertTrue(oi instanceof StandardStructObjectInspector);
  final StandardStructObjectInspector ssoi=(StandardStructObjectInspector)oi;
  List<? extends StructField> structFields=ssoi.getAllStructFieldRefs();
  assertEquals(expectedColumnNames.length,structFields.size());
  for (int i=0; i < expectedColumnNames.length; i++) {
    assertEquals("Column names don't match",expectedColumnNames[i].toLowerCase(),structFields.get(i).getFieldName());
    assertEquals("Column types don't match",expectedColumnTypes[i].getTypeName(),structFields.get(i).getFieldObjectInspector().getTypeName());
  }
}
