{
  Schema s=AvroSerdeUtils.getSchemaFor(RECORD_SCHEMA);
  AvroObjectInspectorGenerator aoig=new AvroObjectInspectorGenerator(s);
  assertEquals(1,aoig.getColumnNames().size());
  assertEquals("aRecord",aoig.getColumnNames().get(0));
  assertEquals(1,aoig.getColumnTypes().size());
  TypeInfo typeInfo=aoig.getColumnTypes().get(0);
  assertEquals(ObjectInspector.Category.STRUCT,typeInfo.getCategory());
  assertTrue(typeInfo instanceof StructTypeInfo);
  StructTypeInfo structTypeInfo=(StructTypeInfo)typeInfo;
  ArrayList<String> allStructFieldNames=structTypeInfo.getAllStructFieldNames();
  ArrayList<TypeInfo> allStructFieldTypeInfos=structTypeInfo.getAllStructFieldTypeInfos();
  assertEquals(allStructFieldNames.size(),3);
  String[] names=new String[]{"int1","boolean1","long1"};
  String[] typeInfoStrings=new String[]{"int","boolean","bigint"};
  for (int i=0; i < allStructFieldNames.size(); i++) {
    assertEquals("Fieldname " + allStructFieldNames.get(i) + " doesn't match expected "+ names[i],names[i],allStructFieldNames.get(i));
    assertEquals("Typeinfo " + allStructFieldTypeInfos.get(i) + " doesn't match expected "+ typeInfoStrings[i],typeInfoStrings[i],allStructFieldTypeInfos.get(i).getTypeName());
  }
}
