{
  Preconditions.checkState(colNums.length >= 2);
  if (childExpressions != null && mapToChildExpression == null) {
    mapToChildExpression=new int[colNums.length];
    Arrays.fill(mapToChildExpression,-1);
    for (int c=0; c < childExpressions.length; c++) {
      VectorExpression ve=childExpressions[c];
      int outputColumn=ve.getOutputColumn();
      int i=0;
      while (true) {
        if (i >= colNums.length) {
          throw new RuntimeException("Vectorized child expression output not found");
        }
        if (colNums[i] == outputColumn) {
          mapToChildExpression[i]=c;
          break;
        }
        i++;
      }
    }
  }
  final int n=batch.size;
  if (n <= 0) {
    return;
  }
  if (childExpressions != null) {
    int childExpressionIndex=mapToChildExpression[0];
    if (childExpressionIndex != -1) {
      VectorExpression ve=childExpressions[childExpressionIndex];
      Preconditions.checkState(ve.getOutputColumn() == colNums[0]);
      ve.evaluate(batch);
    }
  }
  int[] sel=batch.selected;
  LongColumnVector outV=(LongColumnVector)batch.cols[outputColumn];
  long[] outputVector=outV.vector;
  boolean andRepeating=false;
  boolean andRepeatingIsNull=false;
  int andSel=0;
  Arrays.fill(intermediateNulls,0,VectorizedRowBatch.DEFAULT_SIZE,false);
  outV.reset();
  LongColumnVector firstColVector=(LongColumnVector)batch.cols[colNums[0]];
  long[] firstVector=firstColVector.vector;
  if (firstColVector.isRepeating) {
    if (firstColVector.noNulls || !firstColVector.isNull[0]) {
      if (firstVector[0] == 0) {
        outV.isRepeating=true;
        outputVector[0]=0;
        return;
      }
 else {
      }
    }
 else {
      Preconditions.checkState(firstColVector.isNull[0]);
      andRepeatingIsNull=true;
    }
    andRepeating=true;
  }
 else   if (firstColVector.noNulls) {
    if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        if (firstVector[i] == 1) {
          andSelected[andSel++]=i;
        }
      }
    }
 else {
      for (int i=0; i != n; i++) {
        if (firstVector[i] == 1) {
          andSelected[andSel++]=i;
        }
      }
    }
  }
 else {
    if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        if (firstColVector.isNull[i]) {
          intermediateNulls[i]=true;
          andSelected[andSel++]=i;
        }
 else         if (firstVector[i] == 1) {
          andSelected[andSel++]=i;
        }
      }
    }
 else {
      for (int i=0; i != n; i++) {
        if (firstColVector.isNull[i]) {
          intermediateNulls[i]=true;
          andSelected[andSel++]=i;
        }
 else         if (firstVector[i] == 1) {
          andSelected[andSel++]=i;
        }
      }
    }
  }
  int colNum=1;
  do {
    if (!andRepeating && andSel == 0) {
      break;
    }
    if (childExpressions != null) {
      int childExpressionIndex=mapToChildExpression[colNum];
      if (childExpressionIndex != -1) {
        if (andRepeating) {
          VectorExpression ve=childExpressions[childExpressionIndex];
          Preconditions.checkState(ve.getOutputColumn() == colNums[colNum]);
          ve.evaluate(batch);
        }
 else {
          boolean saveSelectedInUse=batch.selectedInUse;
          int[] saveSelected=sel;
          batch.selectedInUse=true;
          batch.selected=andSelected;
          VectorExpression ve=childExpressions[childExpressionIndex];
          Preconditions.checkState(ve.getOutputColumn() == colNums[colNum]);
          ve.evaluate(batch);
          batch.selectedInUse=saveSelectedInUse;
          batch.selected=saveSelected;
        }
      }
    }
    LongColumnVector nextColVector=(LongColumnVector)batch.cols[colNums[colNum]];
    long[] nextVector=nextColVector.vector;
    if (andRepeating) {
      if (nextColVector.isRepeating) {
        if (nextColVector.noNulls || !nextColVector.isNull[0]) {
          if (nextVector[0] == 0) {
            outV.isRepeating=true;
            outputVector[0]=0;
            return;
          }
 else {
          }
        }
 else {
          Preconditions.checkState(nextColVector.isNull[0]);
          andRepeatingIsNull=true;
        }
      }
 else {
        if (nextColVector.noNulls) {
          Preconditions.checkState(andSel == 0);
          andRepeating=false;
          if (andRepeatingIsNull) {
            if (batch.selectedInUse) {
              for (int j=0; j != n; j++) {
                int i=sel[j];
                if (nextVector[i] == 1) {
                  intermediateNulls[i]=true;
                  andSelected[andSel++]=i;
                }
              }
            }
 else {
              for (int i=0; i != n; i++) {
                if (nextVector[i] == 1) {
                  intermediateNulls[i]=true;
                  andSelected[andSel++]=i;
                }
              }
            }
            andRepeatingIsNull=false;
          }
 else {
            if (batch.selectedInUse) {
              for (int j=0; j != n; j++) {
                int i=sel[j];
                if (nextVector[i] == 1) {
                  andSelected[andSel++]=i;
                }
              }
            }
 else {
              for (int i=0; i != n; i++) {
                if (nextVector[i] == 1) {
                  andSelected[andSel++]=i;
                }
              }
            }
          }
        }
 else {
          Preconditions.checkState(andSel == 0);
          andRepeating=false;
          if (andRepeatingIsNull) {
            if (batch.selectedInUse) {
              for (int j=0; j != n; j++) {
                int i=sel[j];
                if (nextColVector.isNull[i] || nextVector[i] == 1) {
                  intermediateNulls[i]=true;
                  andSelected[andSel++]=i;
                }
              }
            }
 else {
              for (int i=0; i != n; i++) {
                if (nextColVector.isNull[i] || nextVector[i] == 1) {
                  intermediateNulls[i]=true;
                  andSelected[andSel++]=i;
                }
              }
            }
            andRepeatingIsNull=false;
          }
 else {
            if (batch.selectedInUse) {
              for (int j=0; j != n; j++) {
                int i=sel[j];
                if (nextColVector.isNull[i]) {
                  intermediateNulls[i]=true;
                  andSelected[andSel++]=i;
                }
 else                 if (nextVector[i] == 1) {
                  andSelected[andSel++]=i;
                }
              }
            }
 else {
              for (int i=0; i != n; i++) {
                if (nextColVector.isNull[i]) {
                  intermediateNulls[i]=true;
                  andSelected[andSel++]=i;
                }
 else                 if (nextVector[i] == 1) {
                  andSelected[andSel++]=i;
                }
              }
            }
          }
        }
      }
    }
 else {
      if (nextColVector.isRepeating) {
        if (nextColVector.noNulls || !nextColVector.isNull[0]) {
          if (nextVector[0] == 0) {
            outV.isRepeating=true;
            outputVector[0]=0;
            return;
          }
 else {
          }
        }
 else {
          Preconditions.checkState(nextColVector.isNull[0]);
          for (int j=0; j < andSel; j++) {
            int i=andSelected[j];
            intermediateNulls[i]=true;
          }
        }
      }
 else       if (nextColVector.noNulls) {
        int newSel=0;
        for (int j=0; j < andSel; j++) {
          int i=andSelected[j];
          if (nextVector[i] == 1) {
            andSelected[newSel++]=i;
          }
        }
        andSel=newSel;
      }
 else {
        int newSel=0;
        for (int j=0; j < andSel; j++) {
          int i=andSelected[j];
          if (nextColVector.isNull[i]) {
            intermediateNulls[i]=true;
            andSelected[newSel++]=i;
          }
 else           if (nextVector[i] == 1) {
            andSelected[newSel++]=i;
          }
        }
        andSel=newSel;
      }
    }
  }
 while (++colNum < colNums.length);
  if (andRepeating) {
    outV.isRepeating=true;
    if (andRepeatingIsNull) {
      outV.noNulls=false;
      outV.isNull[0]=true;
    }
 else {
      outputVector[0]=1;
    }
  }
 else   if (andSel == 0) {
    outV.isRepeating=true;
    outputVector[0]=0;
  }
 else {
    int andIndex=0;
    if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        if (andIndex < andSel && andSelected[andIndex] == i) {
          if (intermediateNulls[i]) {
            outV.noNulls=false;
            outV.isNull[i]=true;
          }
 else {
            outputVector[i]=1;
          }
          andIndex++;
        }
 else {
          outputVector[i]=0;
        }
      }
      Preconditions.checkState(andIndex == andSel);
    }
 else {
      Arrays.fill(outputVector,0,n,0);
      for (int j=0; j < andSel; j++) {
        int i=andSelected[j];
        if (intermediateNulls[i]) {
          outV.noNulls=false;
          outV.isNull[i]=true;
        }
 else {
          outputVector[i]=1;
        }
      }
    }
  }
}
