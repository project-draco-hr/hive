{
  Text escape=new Text(text);
  text.clear();
  int length=escape.getLength();
  byte[] textBytes=escape.getBytes();
  boolean hadSlash=false;
  for (int i=0; i < length; ++i) {
    int c=escape.charAt(i);
switch (c) {
case '\\':
      if (hadSlash) {
        text.append(textBytes,i,1);
        hadSlash=false;
      }
 else {
        hadSlash=true;
      }
    break;
case 'n':
  if (hadSlash) {
    byte[] newLine=newLineUnescapeBytes;
    text.append(newLine,0,newLine.length);
  }
 else {
    text.append(textBytes,i,1);
  }
hadSlash=false;
break;
case 'r':
if (hadSlash) {
byte[] carriageReturn=carriageReturnUnescapeBytes;
text.append(carriageReturn,0,carriageReturn.length);
}
 else {
text.append(textBytes,i,1);
}
hadSlash=false;
break;
case 't':
if (hadSlash) {
byte[] tab=tabUnescapeBytes;
text.append(tab,0,tab.length);
}
 else {
text.append(textBytes,i,1);
}
hadSlash=false;
break;
default :
if (hadSlash) {
text.append(textBytes,i - 1,1);
hadSlash=false;
}
text.append(textBytes,i,1);
break;
}
}
return text.getLength();
}
