{
  if (hf.isList()) {
    Class type=hf.getListElementType();
    boolean is_string=(type == String.class);
    boolean is_boolean=(type == Boolean.class);
    boolean is_primitive=ReflectionSerDeField.isClassPrimitive(type);
    Iterator iter=((List)obj).iterator();
    StringBuilder sb=new StringBuilder(LBRACKET);
    String toPrefix="";
    boolean first=true;
    while (iter.hasNext()) {
      Object lobj=iter.next();
      if (is_primitive) {
        if (is_string) {
          sb.append(toPrefix);
          sb.append(QUOTE);
          sb.append(escapeString((String)lobj));
          sb.append(QUOTE);
        }
 else         if (is_boolean) {
          sb.append(toPrefix + (((Boolean)lobj).booleanValue() ? "True" : "False"));
        }
 else {
          sb.append(toPrefix + lobj.toString());
        }
      }
 else {
        try {
          sb.append(toPrefix + sd.toJSONString(lobj,null));
        }
 catch (        SerDeException e) {
          throw new HiveException(e);
        }
      }
      if (first) {
        toPrefix=",";
        first=false;
      }
    }
    sb.append(RBRACKET);
    return (sb.toString());
  }
 else   if (hf.isMap()) {
    Class keyType=hf.getMapKeyType();
    Class valType=hf.getMapValueType();
    boolean key_is_string=(keyType == String.class);
    boolean key_is_boolean=(keyType == Boolean.class);
    boolean key_is_primitive=ReflectionSerDeField.isClassPrimitive(keyType);
    boolean val_is_string=(valType == String.class);
    boolean val_is_boolean=(valType == Boolean.class);
    boolean val_is_primitive=ReflectionSerDeField.isClassPrimitive(valType);
    Iterator iter=((Map)obj).keySet().iterator();
    StringBuilder sb=new StringBuilder(LBRACE);
    String toPrefix="";
    boolean first=true;
    while (iter.hasNext()) {
      Object lobj=iter.next();
      Object robj=((Map)obj).get(lobj);
      if (key_is_primitive) {
        if (key_is_string) {
          sb.append(toPrefix);
          sb.append(QUOTE);
          sb.append(escapeString((String)lobj));
          sb.append(QUOTE);
        }
 else         if (key_is_boolean) {
          sb.append(toPrefix + (((Boolean)lobj).booleanValue() ? "True" : "False"));
        }
 else {
          sb.append(toPrefix + lobj.toString());
        }
      }
 else {
        try {
          sb.append(toPrefix + sd.toJSONString(lobj,null));
        }
 catch (        SerDeException e) {
          throw new HiveException(e);
        }
      }
      sb.append(COLON);
      if (val_is_primitive) {
        if (val_is_string) {
          sb.append(toPrefix);
          sb.append(QUOTE);
          sb.append(escapeString((String)robj));
          sb.append(QUOTE);
        }
 else         if (val_is_boolean) {
          sb.append(toPrefix + (((Boolean)robj).booleanValue() ? "True" : "False"));
        }
 else {
          sb.append(toPrefix + robj.toString());
        }
      }
 else {
        try {
          sb.append(toPrefix + sd.toJSONString(robj,null));
        }
 catch (        SerDeException e) {
          throw new HiveException(e);
        }
      }
      if (first) {
        toPrefix=",";
        first=false;
      }
    }
    sb.append(RBRACE);
    return (sb.toString());
  }
 else {
    throw new HiveException("HiveUtils.toJSONString only does lists");
  }
}
