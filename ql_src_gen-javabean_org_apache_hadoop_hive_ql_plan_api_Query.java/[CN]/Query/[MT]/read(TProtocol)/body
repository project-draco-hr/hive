{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case QUERYID:
      if (field.type == TType.STRING) {
        this.queryId=iprot.readString();
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case QUERYTYPE:
  if (field.type == TType.STRING) {
    this.queryType=iprot.readString();
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case QUERYATTRIBUTES:
if (field.type == TType.MAP) {
{
  TMap _map50=iprot.readMapBegin();
  this.queryAttributes=new HashMap<String,String>(2 * _map50.size);
  for (int _i51=0; _i51 < _map50.size; ++_i51) {
    String _key52;
    String _val53;
    _key52=iprot.readString();
    _val53=iprot.readString();
    this.queryAttributes.put(_key52,_val53);
  }
  iprot.readMapEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case QUERYCOUNTERS:
if (field.type == TType.MAP) {
{
TMap _map54=iprot.readMapBegin();
this.queryCounters=new HashMap<String,Long>(2 * _map54.size);
for (int _i55=0; _i55 < _map54.size; ++_i55) {
String _key56;
long _val57;
_key56=iprot.readString();
_val57=iprot.readI64();
this.queryCounters.put(_key56,_val57);
}
iprot.readMapEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case STAGEGRAPH:
if (field.type == TType.STRUCT) {
this.stageGraph=new Graph();
this.stageGraph.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case STAGELIST:
if (field.type == TType.LIST) {
{
TList _list58=iprot.readListBegin();
this.stageList=new ArrayList<Stage>(_list58.size);
for (int _i59=0; _i59 < _list58.size; ++_i59) {
Stage _elem60;
_elem60=new Stage();
_elem60.read(iprot);
this.stageList.add(_elem60);
}
iprot.readListEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case DONE:
if (field.type == TType.BOOL) {
this.done=iprot.readBool();
this.__isset.done=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case STARTED:
if (field.type == TType.BOOL) {
this.started=iprot.readBool();
this.__isset.started=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
