{
  LOG.info("JsonParser is parsing\n" + inputObject.toString());
  this.inputObject=inputObject;
  this.outputStream=outputStream;
  this.extractStagesAndPlans();
  if (inputObject.has("cboInfo")) {
    outputStream.println(inputObject.getString("cboInfo"));
    outputStream.println();
  }
  for (  Stage candidate : this.stages.values()) {
    if (candidate.tezStageDependency != null && candidate.tezStageDependency.size() > 0) {
      outputStream.println("Vertex dependency in root stage");
      for (      Entry<Vertex,List<Connection>> entry : candidate.tezStageDependency.entrySet()) {
        StringBuffer sb=new StringBuffer();
        sb.append(entry.getKey().name);
        sb.append(" <- ");
        boolean printcomma=false;
        for (        Connection connection : entry.getValue()) {
          if (printcomma) {
            sb.append(", ");
          }
 else {
            printcomma=true;
          }
          sb.append(connection.from.name + " (" + connection.type+ ")");
        }
        outputStream.println(sb.toString());
      }
      outputStream.println();
    }
  }
  List<Boolean> indentFlag=new ArrayList<>();
  for (  Stage candidate : this.stages.values()) {
    if (candidate.childStages.isEmpty()) {
      candidate.print(outputStream,indentFlag);
    }
  }
}
