{
  long seconds=readSevenByteLong(bytes,binSortOffset) ^ SEVEN_BYTE_LONG_SIGN_FLIP;
  int nanos=bytesToInt(bytes,binSortOffset + 7);
  int firstInt=(int)seconds;
  boolean hasSecondVInt=seconds < 0 || seconds > Integer.MAX_VALUE;
  if (nanos != 0 || hasSecondVInt) {
    firstInt|=DECIMAL_OR_SECOND_VINT_FLAG;
  }
 else {
    firstInt&=LOWEST_31_BITS_OF_SEC_MASK;
  }
  intToBytes(firstInt,internalBytes,0);
  setNanosBytes(nanos,internalBytes,4,hasSecondVInt);
  if (hasSecondVInt) {
    LazyBinaryUtils.writeVLongToByteArray(internalBytes,4 + WritableUtils.decodeVIntSize(internalBytes[4]),seconds >> 31);
  }
  currentBytes=internalBytes;
  this.offset=0;
}
