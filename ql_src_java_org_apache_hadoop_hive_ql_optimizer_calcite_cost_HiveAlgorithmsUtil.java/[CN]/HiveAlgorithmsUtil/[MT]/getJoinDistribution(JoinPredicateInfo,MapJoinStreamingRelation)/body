{
  ImmutableList.Builder<Integer> leftKeysListBuilder=new ImmutableList.Builder<Integer>();
  ImmutableList.Builder<Integer> rightKeysListBuilder=new ImmutableList.Builder<Integer>();
  for (int i=0; i < joinPredInfo.getEquiJoinPredicateElements().size(); i++) {
    JoinLeafPredicateInfo joinLeafPredInfo=joinPredInfo.getEquiJoinPredicateElements().get(i);
    for (    int leftPos : joinLeafPredInfo.getProjsFromLeftPartOfJoinKeysInJoinSchema()) {
      leftKeysListBuilder.add(leftPos);
    }
    for (    int rightPos : joinLeafPredInfo.getProjsFromRightPartOfJoinKeysInJoinSchema()) {
      rightKeysListBuilder.add(rightPos);
    }
  }
  RelDistribution distribution=null;
  if (streamingRelation == MapJoinStreamingRelation.LEFT_RELATION) {
    distribution=new HiveRelDistribution(RelDistribution.Type.HASH_DISTRIBUTED,leftKeysListBuilder.build());
  }
 else   if (streamingRelation == MapJoinStreamingRelation.RIGHT_RELATION) {
    distribution=new HiveRelDistribution(RelDistribution.Type.HASH_DISTRIBUTED,rightKeysListBuilder.build());
  }
  return distribution;
}
