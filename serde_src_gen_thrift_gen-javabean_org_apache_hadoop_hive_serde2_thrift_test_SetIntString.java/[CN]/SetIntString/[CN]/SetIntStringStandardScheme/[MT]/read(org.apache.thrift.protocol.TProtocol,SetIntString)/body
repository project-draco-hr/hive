{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
{
          org.apache.thrift.protocol.TSet _set82=iprot.readSetBegin();
          struct.sIntString=new HashSet<IntString>(2 * _set82.size);
          IntString _elem83;
          for (int _i84=0; _i84 < _set82.size; ++_i84) {
            _elem83=new IntString();
            _elem83.read(iprot);
            struct.sIntString.add(_elem83);
          }
          iprot.readSetEnd();
        }
        struct.setSIntStringIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
    struct.aString=iprot.readString();
    struct.setAStringIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
