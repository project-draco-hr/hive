{
  int length=arguments.length - start;
  parameterOIs=new PrimitiveObjectInspector[length];
  parameterTypes=new PrimitiveTypeEntry[length];
  parameterClasses=new Class[length];
  parameterJavaValues=new Object[length];
  for (int i=0; i < length; i++) {
    if (arguments[i + start].getCategory() != ObjectInspector.Category.PRIMITIVE) {
      throw new UDFArgumentTypeException(i,"The parameters of GenericUDFReflect(class,method[,arg1[,arg2]...])" + " must be primitive (int, double, string, etc).");
    }
    parameterOIs[i]=(PrimitiveObjectInspector)arguments[i + start];
    parameterTypes[i]=PrimitiveObjectInspectorUtils.getTypeEntryFromPrimitiveCategory(parameterOIs[i].getPrimitiveCategory());
    parameterClasses[i]=parameterTypes[i].primitiveJavaType == null ? parameterTypes[i].primitiveJavaClass : parameterTypes[i].primitiveJavaType;
  }
}
