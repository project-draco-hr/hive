{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
          org.apache.thrift.protocol.TList _list600=iprot.readListBegin();
          struct.fileIds=new ArrayList<Long>(_list600.size);
          long _elem601;
          for (int _i602=0; _i602 < _list600.size; ++_i602) {
            _elem601=iprot.readI64();
            struct.fileIds.add(_elem601);
          }
          iprot.readListEnd();
        }
        struct.setFileIdsIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
      org.apache.thrift.protocol.TList _list603=iprot.readListBegin();
      struct.metadata=new ArrayList<ByteBuffer>(_list603.size);
      ByteBuffer _elem604;
      for (int _i605=0; _i605 < _list603.size; ++_i605) {
        _elem604=iprot.readBinary();
        struct.metadata.add(_elem604);
      }
      iprot.readListEnd();
    }
    struct.setMetadataIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.type=org.apache.hadoop.hive.metastore.api.FileMetadataExprType.findByValue(iprot.readI32());
struct.setTypeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
