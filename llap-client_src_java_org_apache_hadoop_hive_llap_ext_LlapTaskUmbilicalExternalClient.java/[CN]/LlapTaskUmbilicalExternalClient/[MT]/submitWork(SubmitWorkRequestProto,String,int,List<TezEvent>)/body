{
  SignableVertexSpec vertex=submitWorkRequestProto.getWorkSpec().getVertex();
  VertexIdentifier vId=vertex.getVertexIdentifier();
  TezTaskAttemptID attemptId=Converters.createTaskAttemptId(vId,submitWorkRequestProto.getFragmentNumber(),submitWorkRequestProto.getAttemptNumber());
  final String fragmentId=attemptId.toString();
  PendingEventData pendingEventData=new PendingEventData(new TaskHeartbeatInfo(fragmentId,llapHost,llapPort),tezEvents);
  pendingEvents.putIfAbsent(fragmentId,pendingEventData);
  timer.scheduleAtFixedRate(new HeartbeatCheckTask(),connectionTimeout,connectionTimeout,TimeUnit.MILLISECONDS);
  communicator.sendSubmitWork(submitWorkRequestProto,llapHost,llapPort,new LlapProtocolClientProxy.ExecuteRequestCallback<LlapDaemonProtocolProtos.SubmitWorkResponseProto>(){
    @Override public void setResponse(    LlapDaemonProtocolProtos.SubmitWorkResponseProto response){
      if (response.hasSubmissionState()) {
        if (response.getSubmissionState().equals(LlapDaemonProtocolProtos.SubmissionStateProto.REJECTED)) {
          String msg="Fragment: " + fragmentId + " rejected. Server Busy.";
          LOG.info(msg);
          if (responder != null) {
            Throwable err=new RuntimeException(msg);
            responder.submissionFailed(fragmentId,err);
          }
          return;
        }
      }
    }
    @Override public void indicateError(    Throwable t){
      String msg="Failed to submit: " + fragmentId;
      LOG.error(msg,t);
      Throwable err=new RuntimeException(msg,t);
      responder.submissionFailed(fragmentId,err);
    }
  }
);
}
