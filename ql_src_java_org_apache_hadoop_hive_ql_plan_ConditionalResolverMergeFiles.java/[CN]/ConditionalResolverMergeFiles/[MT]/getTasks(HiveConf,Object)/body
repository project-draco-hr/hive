{
  ConditionalResolverMergeFilesCtx ctx=(ConditionalResolverMergeFilesCtx)objCtx;
  String dirName=ctx.getDir();
  List<Task<? extends Serializable>> resTsks=new ArrayList<Task<? extends Serializable>>();
  long trgtSize=conf.getLongVar(HiveConf.ConfVars.HIVEMERGEMAPFILESSIZE);
  long avgConditionSize=conf.getLongVar(HiveConf.ConfVars.HIVEMERGEMAPFILESAVGSIZE);
  trgtSize=trgtSize > avgConditionSize ? trgtSize : avgConditionSize;
  try {
    Path dirPath=new Path(dirName);
    FileSystem inpFs=dirPath.getFileSystem(conf);
    if (inpFs.exists(dirPath)) {
      FileStatus[] fStats=inpFs.listStatus(dirPath);
      long totalSz=0;
      for (      FileStatus fStat : fStats) {
        totalSz+=fStat.getLen();
      }
      long currAvgSz=totalSz / fStats.length;
      if ((currAvgSz < avgConditionSize) && (fStats.length > 1)) {
        Task<? extends Serializable> tsk=ctx.getListTasks().get(1);
        MapredWork work=(MapredWork)tsk.getWork();
        int maxReducers=conf.getIntVar(HiveConf.ConfVars.MAXREDUCERS);
        int reducers=(int)((totalSz + trgtSize - 1) / trgtSize);
        reducers=Math.max(1,reducers);
        reducers=Math.min(maxReducers,reducers);
        work.setNumReduceTasks(reducers);
        resTsks.add(tsk);
        return resTsks;
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  resTsks.add(ctx.getListTasks().get(0));
  return resTsks;
}
