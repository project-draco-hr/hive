{
  keyEval=new ExprNodeEvaluator[keyCols.size()];
  int i=0;
  for (  ExprNodeDesc e : keyCols) {
    keyEval[i++]=ExprNodeEvaluatorFactory.get(e);
  }
  outputKey=new Object[keyEval.length];
  valueEval=new ExprNodeEvaluator[valueCols.size()];
  i=0;
  for (  ExprNodeDesc e : valueCols) {
    valueEval[i++]=ExprNodeEvaluatorFactory.get(e);
  }
  outputValue=new Object[valueEval.length];
  this.tag=tag;
  this.tagByteWritable=new ByteWritable((byte)tag.intValue());
  ObjectInspector keyObjectInspector=initEvaluatorsAndReturnStruct(keyEval,outputKeyColumnNames,inputObjInspector);
  ObjectInspector valueObjectInspector=initEvaluatorsAndReturnStruct(valueEval,outputValueColumnNames,inputObjInspector);
  List<ObjectInspector> ois=new ArrayList<ObjectInspector>();
  ois.add(keyObjectInspector);
  ois.add(valueObjectInspector);
  ois.add(PrimitiveObjectInspectorFactory.writableByteObjectInspector);
  this.outputObjInspector=ObjectInspectorFactory.getStandardStructObjectInspector(Utilities.fieldNameList,ois);
  this.forwardedRow=new ArrayList<Object>(3);
}
