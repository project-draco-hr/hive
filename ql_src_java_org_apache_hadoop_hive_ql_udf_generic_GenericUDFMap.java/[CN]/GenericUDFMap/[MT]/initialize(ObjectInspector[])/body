{
  if (arguments.length % 2 != 0) {
    throw new UDFArgumentLengthException("Arguments must be in key/value pairs");
  }
  GenericUDFUtils.ReturnObjectInspectorResolver keyOIResolver=new GenericUDFUtils.ReturnObjectInspectorResolver(true);
  GenericUDFUtils.ReturnObjectInspectorResolver valueOIResolver=new GenericUDFUtils.ReturnObjectInspectorResolver(true);
  for (int i=0; i < arguments.length; i++) {
    if (i % 2 == 0) {
      if (!(arguments[i] instanceof PrimitiveObjectInspector)) {
        throw new UDFArgumentTypeException(1,"Primitive Type is expected but " + arguments[i].getTypeName() + "\" is found");
      }
      if (!keyOIResolver.update(arguments[i])) {
        throw new UDFArgumentTypeException(i,"Key type \"" + arguments[i].getTypeName() + "\" is different from preceding key types. "+ "Previous key type was \""+ arguments[i - 2].getTypeName()+ "\"");
      }
    }
 else {
      if (!valueOIResolver.update(arguments[i]) && !compatibleTypes(arguments[i],arguments[i - 2])) {
        throw new UDFArgumentTypeException(i,"Value type \"" + arguments[i].getTypeName() + "\" is different from preceding value types. "+ "Previous value type was \""+ arguments[i - 2].getTypeName()+ "\"");
      }
    }
  }
  ObjectInspector keyOI=keyOIResolver.get(PrimitiveObjectInspectorFactory.javaStringObjectInspector);
  ObjectInspector valueOI=valueOIResolver.get(PrimitiveObjectInspectorFactory.javaStringObjectInspector);
  converters=new Converter[arguments.length];
  for (int i=0; i < arguments.length; i++) {
    converters[i]=ObjectInspectorConverters.getConverter(arguments[i],i % 2 == 0 ? keyOI : valueOI);
  }
  return ObjectInspectorFactory.getStandardMapObjectInspector(keyOI,valueOI);
}
