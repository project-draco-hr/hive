{
  HashMap<String,String> mem_map=new HashMap<String,String>();
  mem_map.put("k1","v1");
  mem_map.put("k2","v2");
  mem_map.put("k3","v3");
  mem_map.put("k4","v4");
  try {
    HashMapWrapper<String,String> wrapper=new HashMapWrapper<String,String>(0);
    insertAll(wrapper,mem_map);
    checkAll(wrapper,mem_map);
    wrapper.close();
    wrapper=new HashMapWrapper<String,String>(1);
    insertAll(wrapper,mem_map);
    checkAll(wrapper,mem_map);
    wrapper.close();
    wrapper=new HashMapWrapper<String,String>(2);
    insertAll(wrapper,mem_map);
    checkAll(wrapper,mem_map);
    wrapper.close();
    wrapper=new HashMapWrapper<String,String>(4);
    insertAll(wrapper,mem_map);
    checkAll(wrapper,mem_map);
    wrapper.close();
    wrapper=new HashMapWrapper<String,String>();
    insertAll(wrapper,mem_map);
    checkAll(wrapper,mem_map);
    wrapper.close();
    wrapper=new HashMapWrapper<String,String>(2);
    insertAll(wrapper,mem_map);
    wrapper.remove("k3");
    mem_map.remove("k3");
    assertTrue(mem_map.size() == 3);
    checkAll(wrapper,mem_map);
    wrapper.remove("k1");
    mem_map.remove("k1");
    checkAll(wrapper,mem_map);
    String v4=wrapper.get("k4");
    assertTrue(v4 != null);
    assert(v4.equals("v4"));
    wrapper.remove("k4");
    mem_map.remove("k4");
    checkAll(wrapper,mem_map);
    wrapper.put("k5","v5");
    mem_map.put("k5","v5");
    checkAll(wrapper,mem_map);
    wrapper.put("k6","v6");
    mem_map.put("k6","v6");
    checkAll(wrapper,mem_map);
    wrapper.put("k6","v61");
    mem_map.put("k6","v61");
    checkAll(wrapper,mem_map);
    wrapper.remove("k6");
    mem_map.remove("k6");
    checkAll(wrapper,mem_map);
    wrapper.get("k1");
    wrapper.get("k2");
    wrapper.remove("k1");
    mem_map.remove("k1");
    wrapper.put("k6","v7");
    mem_map.put("k6","v7");
    checkAll(wrapper,mem_map);
    wrapper.clear();
    mem_map.clear();
    checkAll(wrapper,mem_map);
    wrapper.close();
    wrapper=new HashMapWrapper<String,String>(1000);
    for (int i=0; i < 3000; ++i) {
      String k="k" + i;
      String v="v" + i;
      wrapper.put(k,v);
      mem_map.put(k,v);
    }
    checkAll(wrapper,mem_map);
    System.out.println("Finished inserting 3000 pairs.");
    Random rand=new Random(12345678);
    for (int i=0; i < 10000; ++i) {
      int j=rand.nextInt(3000);
      String k="k" + j;
      String v;
      int command=rand.nextInt(3);
switch (command) {
case 0:
        wrapper.remove(k);
      mem_map.remove(k);
    break;
case 1:
  v=wrapper.get(k);
String v2=mem_map.get(k);
assertTrue("one of them doesn't exists or different values from two hash tables",v == null && v2 == null || v.equals(v2));
break;
case 2:
v="v" + rand.nextInt(3000);
wrapper.put(k,v);
mem_map.put(k,v);
break;
}
}
checkAll(wrapper,mem_map);
wrapper.close();
}
 catch (Exception e) {
e.printStackTrace();
System.out.println(e.toString());
assertTrue("Exception should not be thrown.",false);
}
System.out.println("TestHashMapWrapper successful");
}
