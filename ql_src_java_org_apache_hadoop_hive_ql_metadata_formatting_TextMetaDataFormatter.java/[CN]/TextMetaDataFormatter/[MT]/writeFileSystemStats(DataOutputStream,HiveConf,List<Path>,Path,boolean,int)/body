{
  long totalFileSize=0;
  long maxFileSize=0;
  long minFileSize=Long.MAX_VALUE;
  long lastAccessTime=0;
  long lastUpdateTime=0;
  int numOfFiles=0;
  boolean unknown=false;
  FileSystem fs=tblPath.getFileSystem(conf);
  try {
    FileStatus tmpStatus=fs.getFileStatus(tblPath);
    lastAccessTime=ShimLoader.getHadoopShims().getAccessTime(tmpStatus);
    lastUpdateTime=tmpStatus.getModificationTime();
    if (partSpecified) {
      tmpStatus=fs.getFileStatus(locations.get(0));
    }
  }
 catch (  IOException e) {
    LOG.warn("Cannot access File System. File System status will be unknown: ",e);
    unknown=true;
  }
  if (!unknown) {
    for (    Path loc : locations) {
      try {
        FileStatus status=fs.getFileStatus(tblPath);
        FileStatus[] files=fs.listStatus(loc);
        long accessTime=ShimLoader.getHadoopShims().getAccessTime(status);
        long updateTime=status.getModificationTime();
        if (!status.isDir()) {
          continue;
        }
        if (accessTime > lastAccessTime) {
          lastAccessTime=accessTime;
        }
        if (updateTime > lastUpdateTime) {
          lastUpdateTime=updateTime;
        }
        for (        FileStatus currentStatus : files) {
          if (currentStatus.isDir()) {
            continue;
          }
          numOfFiles++;
          long fileLen=currentStatus.getLen();
          totalFileSize+=fileLen;
          if (fileLen > maxFileSize) {
            maxFileSize=fileLen;
          }
          if (fileLen < minFileSize) {
            minFileSize=fileLen;
          }
          accessTime=ShimLoader.getHadoopShims().getAccessTime(currentStatus);
          updateTime=currentStatus.getModificationTime();
          if (accessTime > lastAccessTime) {
            lastAccessTime=accessTime;
          }
          if (updateTime > lastUpdateTime) {
            lastUpdateTime=updateTime;
          }
        }
      }
 catch (      IOException e) {
      }
    }
  }
  String unknownString="unknown";
  for (int k=0; k < indent; k++) {
    outStream.writeBytes(Utilities.INDENT);
  }
  outStream.writeBytes("totalNumberFiles:");
  outStream.writeBytes(unknown ? unknownString : "" + numOfFiles);
  outStream.write(terminator);
  for (int k=0; k < indent; k++) {
    outStream.writeBytes(Utilities.INDENT);
  }
  outStream.writeBytes("totalFileSize:");
  outStream.writeBytes(unknown ? unknownString : "" + totalFileSize);
  outStream.write(terminator);
  for (int k=0; k < indent; k++) {
    outStream.writeBytes(Utilities.INDENT);
  }
  outStream.writeBytes("maxFileSize:");
  outStream.writeBytes(unknown ? unknownString : "" + maxFileSize);
  outStream.write(terminator);
  for (int k=0; k < indent; k++) {
    outStream.writeBytes(Utilities.INDENT);
  }
  outStream.writeBytes("minFileSize:");
  if (numOfFiles > 0) {
    outStream.writeBytes(unknown ? unknownString : "" + minFileSize);
  }
 else {
    outStream.writeBytes(unknown ? unknownString : "" + 0);
  }
  outStream.write(terminator);
  for (int k=0; k < indent; k++) {
    outStream.writeBytes(Utilities.INDENT);
  }
  outStream.writeBytes("lastAccessTime:");
  outStream.writeBytes((unknown || lastAccessTime < 0) ? unknownString : "" + lastAccessTime);
  outStream.write(terminator);
  for (int k=0; k < indent; k++) {
    outStream.writeBytes(Utilities.INDENT);
  }
  outStream.writeBytes("lastUpdateTime:");
  outStream.writeBytes(unknown ? unknownString : "" + lastUpdateTime);
  outStream.write(terminator);
}
