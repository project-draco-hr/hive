{
  Configuration conf=new Configuration();
  Properties props=new Properties();
  props.put(AvroTableProperties.SCHEMA_URL.getPropName(),SCHEMA_NONE);
  props.put(AvroTableProperties.SCHEMA_LITERAL.getPropName(),SCHEMA_NONE);
  try {
    determineSchemaOrThrowException(conf,props);
    fail("Should have thrown exception with none set for both url and literal");
  }
 catch (  AvroSerdeException he) {
    assertEquals(EXCEPTION_MESSAGE,he.getMessage());
  }
  props.put(AvroTableProperties.SCHEMA_LITERAL.getPropName(),TestAvroObjectInspectorGenerator.RECORD_SCHEMA);
  Schema s;
  try {
    s=determineSchemaOrThrowException(conf,props);
    assertNotNull(s);
    assertEquals(AvroSerdeUtils.getSchemaFor(TestAvroObjectInspectorGenerator.RECORD_SCHEMA),s);
  }
 catch (  AvroSerdeException he) {
    fail("Should have parsed schema literal, not thrown exception.");
  }
  props.put(AvroTableProperties.SCHEMA_LITERAL.getPropName(),SCHEMA_NONE);
  props.put(AvroTableProperties.SCHEMA_URL.getPropName(),"not:///a.real.url");
  try {
    determineSchemaOrThrowException(conf,props);
    fail("Should have tried to open that bogus URL");
  }
 catch (  AvroSerdeException e) {
    assertEquals("Unable to read schema from given path: not:///a.real.url",e.getMessage());
  }
}
