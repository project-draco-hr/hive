{
  Properties props=new Properties();
  props.put(SCHEMA_URL,SCHEMA_NONE);
  props.put(SCHEMA_LITERAL,SCHEMA_NONE);
  try {
    determineSchemaOrThrowException(props);
    fail("Should have thrown exception with none set for both url and literal");
  }
 catch (  AvroSerdeException he) {
    assertEquals(EXCEPTION_MESSAGE,he.getMessage());
  }
  props.put(SCHEMA_LITERAL,TestAvroObjectInspectorGenerator.RECORD_SCHEMA);
  Schema s;
  try {
    s=determineSchemaOrThrowException(props);
    assertNotNull(s);
    assertEquals(Schema.parse(TestAvroObjectInspectorGenerator.RECORD_SCHEMA),s);
  }
 catch (  AvroSerdeException he) {
    fail("Should have parsed schema literal, not thrown exception.");
  }
  props.put(SCHEMA_LITERAL,SCHEMA_NONE);
  props.put(SCHEMA_URL,"not:///a.real.url");
  try {
    determineSchemaOrThrowException(props);
    fail("Should have tried to open that bogus URL");
  }
 catch (  MalformedURLException e) {
    assertEquals("unknown protocol: not",e.getMessage());
  }
}
