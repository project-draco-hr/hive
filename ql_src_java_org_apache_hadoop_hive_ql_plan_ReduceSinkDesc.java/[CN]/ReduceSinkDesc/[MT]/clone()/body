{
  ReduceSinkDesc desc=new ReduceSinkDesc();
  desc.setKeyCols((ArrayList<ExprNodeDesc>)getKeyCols().clone());
  desc.setValueCols((ArrayList<ExprNodeDesc>)getValueCols().clone());
  desc.setOutputKeyColumnNames((ArrayList<String>)getOutputKeyColumnNames().clone());
  List<List<Integer>> distinctColumnIndicesClone=new ArrayList<List<Integer>>();
  for (  List<Integer> distinctColumnIndex : getDistinctColumnIndices()) {
    List<Integer> tmp=new ArrayList<Integer>();
    tmp.addAll(distinctColumnIndex);
    distinctColumnIndicesClone.add(tmp);
  }
  desc.setDistinctColumnIndices(distinctColumnIndicesClone);
  desc.setOutputValueColumnNames((ArrayList<String>)getOutputValueColumnNames().clone());
  desc.setNumDistributionKeys(getNumDistributionKeys());
  desc.setTag(getTag());
  desc.setNumReducers(getNumReducers());
  desc.setPartitionCols((ArrayList<ExprNodeDesc>)getPartitionCols().clone());
  desc.setKeySerializeInfo((TableDesc)getKeySerializeInfo().clone());
  desc.setValueSerializeInfo((TableDesc)getValueSerializeInfo().clone());
  desc.setNumBuckets(numBuckets);
  desc.setBucketCols(bucketCols);
  desc.setStatistics(this.getStatistics());
  desc.setSkipTag(skipTag);
  desc.autoParallel=autoParallel;
  return desc;
}
