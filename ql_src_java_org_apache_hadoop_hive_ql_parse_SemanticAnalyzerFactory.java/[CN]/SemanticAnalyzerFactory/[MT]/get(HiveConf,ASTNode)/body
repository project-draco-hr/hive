{
  if (tree.getToken() == null) {
    throw new RuntimeException("Empty Syntax Tree");
  }
 else {
    if (SessionState.get() != null)     SessionState.get().setCommandType(commandType.get(tree.getToken().getType()));
switch (tree.getToken().getType()) {
case HiveParser.TOK_EXPLAIN:
      return new ExplainSemanticAnalyzer(conf);
case HiveParser.TOK_LOAD:
    return new LoadSemanticAnalyzer(conf);
case HiveParser.TOK_DROPTABLE:
case HiveParser.TOK_DESCTABLE:
case HiveParser.TOK_DESCFUNCTION:
case HiveParser.TOK_MSCK:
case HiveParser.TOK_ALTERTABLE_ADDCOLS:
case HiveParser.TOK_ALTERTABLE_RENAMECOL:
case HiveParser.TOK_ALTERTABLE_REPLACECOLS:
case HiveParser.TOK_ALTERTABLE_RENAME:
case HiveParser.TOK_ALTERTABLE_DROPPARTS:
case HiveParser.TOK_ALTERTABLE_ADDPARTS:
case HiveParser.TOK_ALTERTABLE_PROPERTIES:
case HiveParser.TOK_ALTERTABLE_SERIALIZER:
case HiveParser.TOK_ALTERTABLE_SERDEPROPERTIES:
case HiveParser.TOK_SHOWTABLES:
case HiveParser.TOK_SHOW_TABLESTATUS:
case HiveParser.TOK_SHOWFUNCTIONS:
case HiveParser.TOK_SHOWPARTITIONS:
case HiveParser.TOK_ALTERTABLE_FILEFORMAT:
case HiveParser.TOK_ALTERTABLE_CLUSTER_SORT:
  return new DDLSemanticAnalyzer(conf);
case HiveParser.TOK_CREATEFUNCTION:
case HiveParser.TOK_DROPFUNCTION:
return new FunctionSemanticAnalyzer(conf);
default :
return new SemanticAnalyzer(conf);
}
}
}
