{
  if (childExpressions != null) {
    super.evaluateChildren(batch);
  }
  LongColumnVector arg1ColVector=(LongColumnVector)batch.cols[arg1Column];
  IntervalDayTimeColumnVector outputColVector=(IntervalDayTimeColumnVector)batch.cols[outputColumn];
  int[] sel=batch.selected;
  boolean[] outputIsNull=outputColVector.isNull;
  outputColVector.noNulls=false;
  outputColVector.isRepeating=false;
  int n=batch.size;
  long[] vector1=arg1ColVector.vector;
  if (n == 0) {
    return;
  }
  if (arg1ColVector.isRepeating) {
    if (vector1[0] == 1) {
      outputColVector.fill(arg2Scalar);
    }
 else {
      outputColVector.fill(arg3Scalar);
    }
  }
 else   if (arg1ColVector.noNulls) {
    if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        outputColVector.set(i,vector1[i] == 1 ? arg2Scalar : arg3Scalar);
      }
    }
 else {
      for (int i=0; i != n; i++) {
        outputColVector.set(i,vector1[i] == 1 ? arg2Scalar : arg3Scalar);
      }
    }
  }
 else {
    if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        outputColVector.set(i,!arg1ColVector.isNull[i] && vector1[i] == 1 ? arg2Scalar : arg3Scalar);
        outputIsNull[i]=false;
      }
    }
 else {
      for (int i=0; i != n; i++) {
        outputColVector.set(i,!arg1ColVector.isNull[i] && vector1[i] == 1 ? arg2Scalar : arg3Scalar);
      }
      Arrays.fill(outputIsNull,0,n,false);
    }
  }
}
