{
  if (node.operator == Operator.LIKE) {
    filterBuffer.setError("LIKE is not supported for SQL filter pushdown");
    return;
  }
  int partColCount=table.getPartitionKeys().size();
  int partColIndex=node.getPartColIndexForFilter(table,filterBuffer);
  if (filterBuffer.hasError())   return;
  String colTypeStr=table.getPartitionKeys().get(partColIndex).getType();
  FilterType colType=FilterType.fromType(colTypeStr);
  if (colType == FilterType.Invalid) {
    filterBuffer.setError("Filter pushdown not supported for type " + colTypeStr);
    return;
  }
  FilterType valType=FilterType.fromClass(node.value);
  Object nodeValue=node.value;
  if (valType == FilterType.Invalid) {
    filterBuffer.setError("Filter pushdown not supported for value " + node.value.getClass());
    return;
  }
  if (colType == FilterType.Date && valType == FilterType.String) {
    try {
      nodeValue=new java.sql.Date(HiveMetaStore.PARTITION_DATE_FORMAT.get().parse((String)nodeValue).getTime());
      valType=FilterType.Date;
    }
 catch (    ParseException pe) {
    }
  }
  if (colType != valType) {
    filterBuffer.setError("Cannot push down filter for " + colTypeStr + " column and value "+ nodeValue.getClass());
    return;
  }
  if (joins.isEmpty()) {
    for (int i=0; i < partColCount; ++i) {
      joins.add(null);
    }
  }
  if (joins.get(partColIndex) == null) {
    joins.set(partColIndex,"inner join \"PARTITION_KEY_VALS\" \"FILTER" + partColIndex + "\" on \"FILTER"+ partColIndex+ "\".\"PART_ID\" = \"PARTITIONS\".\"PART_ID\""+ " and \"FILTER"+ partColIndex+ "\".\"INTEGER_IDX\" = "+ partColIndex);
  }
  String tableValue="\"FILTER" + partColIndex + "\".\"PART_KEY_VAL\"";
  if (node.isReverseOrder) {
    params.add(nodeValue);
  }
  String tableColumn=tableValue;
  if (colType != FilterType.String) {
    if (colType == FilterType.Integral) {
      tableValue="cast(" + tableValue + " as decimal(21,0))";
    }
 else     if (colType == FilterType.Date) {
      if (dbType == DatabaseProduct.ORACLE) {
        tableValue="TO_DATE(" + tableValue + ", 'YYYY-MM-DD')";
      }
 else {
        tableValue="cast(" + tableValue + " as date)";
      }
    }
    String tableValue0=tableValue;
    tableValue="(case when " + tableColumn + " <> ?";
    params.add(defaultPartName);
    if (dbHasJoinCastBug) {
      tableValue+=(" and \"TBLS\".\"TBL_NAME\" = ? and \"DBS\".\"NAME\" = ? and " + "\"FILTER" + partColIndex + "\".\"PART_ID\" = \"PARTITIONS\".\"PART_ID\" and "+ "\"FILTER"+ partColIndex+ "\".\"INTEGER_IDX\" = "+ partColIndex);
      params.add(table.getTableName().toLowerCase());
      params.add(table.getDbName().toLowerCase());
    }
    tableValue+=" then " + tableValue0 + " else null end)";
  }
  if (!node.isReverseOrder) {
    params.add(nodeValue);
  }
  filterBuffer.append(node.isReverseOrder ? "(? " + node.operator.getSqlOp() + " "+ tableValue+ ")" : "(" + tableValue + " "+ node.operator.getSqlOp()+ " ?)");
}
