{
  String commonPrefix="select \"COLUMN_NAME\", \"COLUMN_TYPE\", " + "min(\"LONG_LOW_VALUE\"), max(\"LONG_HIGH_VALUE\"), min(\"DOUBLE_LOW_VALUE\"), max(\"DOUBLE_HIGH_VALUE\"), " + "min(\"BIG_DECIMAL_LOW_VALUE\"), max(\"BIG_DECIMAL_HIGH_VALUE\"), sum(\"NUM_NULLS\"), max(\"NUM_DISTINCTS\"), "+ "max(\"AVG_COL_LEN\"), max(\"MAX_COL_LEN\"), sum(\"NUM_TRUES\"), sum(\"NUM_FALSES\") from \"PART_COL_STATS\""+ " where \"DB_NAME\" = ? and \"TABLE_NAME\" = ? ";
  String qText=null;
  long start=0;
  long end=0;
  Query query=null;
  boolean doTrace=LOG.isDebugEnabled();
  Object qResult=null;
  ForwardQueryResult fqr=null;
  if (partsFound == partNames.size()) {
    qText=commonPrefix + " and \"COLUMN_NAME\" in (" + makeParams(colNames.size())+ ")"+ " and \"PARTITION_NAME\" in ("+ makeParams(partNames.size())+ ")"+ " group by \"COLUMN_NAME\", \"COLUMN_TYPE\"";
    start=doTrace ? System.nanoTime() : 0;
    query=pm.newQuery("javax.jdo.query.SQL",qText);
    qResult=query.executeWithArray(prepareParams(dbName,tableName,partNames,colNames));
    if (qResult == null) {
      query.closeAll();
      return Lists.newArrayList();
    }
    end=doTrace ? System.nanoTime() : 0;
    timingTrace(doTrace,qText,start,end);
    List<Object[]> list=ensureList(qResult);
    List<ColumnStatisticsObj> colStats=new ArrayList<ColumnStatisticsObj>(list.size());
    for (    Object[] row : list) {
      colStats.add(prepareCSObj(row,0));
    }
    query.closeAll();
    return colStats;
  }
 else {
    List<ColumnStatisticsObj> colStats=new ArrayList<ColumnStatisticsObj>(colNames.size());
    qText="select \"COLUMN_NAME\", \"COLUMN_TYPE\", count(\"PARTITION_NAME\") " + " from \"PART_COL_STATS\"" + " where \"DB_NAME\" = ? and \"TABLE_NAME\" = ? "+ " and \"COLUMN_NAME\" in (" + makeParams(colNames.size()) + ")"+ " and \"PARTITION_NAME\" in ("+ makeParams(partNames.size())+ ")"+ " group by \"COLUMN_NAME\", \"COLUMN_TYPE\"";
    start=doTrace ? System.nanoTime() : 0;
    query=pm.newQuery("javax.jdo.query.SQL",qText);
    qResult=query.executeWithArray(prepareParams(dbName,tableName,partNames,colNames));
    end=doTrace ? System.nanoTime() : 0;
    timingTrace(doTrace,qText,start,end);
    if (qResult == null) {
      query.closeAll();
      return Lists.newArrayList();
    }
    List<String> noExtraColumnNames=new ArrayList<String>();
    Map<String,String[]> extraColumnNameTypeParts=new HashMap<String,String[]>();
    List<Object[]> list=ensureList(qResult);
    for (    Object[] row : list) {
      String colName=(String)row[0];
      String colType=(String)row[1];
      Long count=StatObjectConverter.extractSqlLong(row[2]);
      if (count == partNames.size() || count < 2) {
        noExtraColumnNames.add(colName);
      }
 else {
        extraColumnNameTypeParts.put(colName,new String[]{colType,String.valueOf(count)});
      }
    }
    query.closeAll();
    if (noExtraColumnNames.size() != 0) {
      qText=commonPrefix + " and \"COLUMN_NAME\" in (" + makeParams(noExtraColumnNames.size())+ ")"+ " and \"PARTITION_NAME\" in ("+ makeParams(partNames.size())+ ")"+ " group by \"COLUMN_NAME\", \"COLUMN_TYPE\"";
      start=doTrace ? System.nanoTime() : 0;
      query=pm.newQuery("javax.jdo.query.SQL",qText);
      qResult=query.executeWithArray(prepareParams(dbName,tableName,partNames,noExtraColumnNames));
      if (qResult == null) {
        query.closeAll();
        return Lists.newArrayList();
      }
      list=ensureList(qResult);
      for (      Object[] row : list) {
        colStats.add(prepareCSObj(row,0));
      }
      end=doTrace ? System.nanoTime() : 0;
      timingTrace(doTrace,qText,start,end);
      query.closeAll();
    }
    if (extraColumnNameTypeParts.size() != 0) {
      Map<String,Integer> indexMap=new HashMap<String,Integer>();
      for (int index=0; index < partNames.size(); index++) {
        indexMap.put(partNames.get(index),index);
      }
      Map<String,Map<Integer,Object>> sumMap=new HashMap<String,Map<Integer,Object>>();
      qText="select \"COLUMN_NAME\", sum(\"NUM_NULLS\"), sum(\"NUM_TRUES\"), sum(\"NUM_FALSES\")" + " from \"PART_COL_STATS\"" + " where \"DB_NAME\" = ? and \"TABLE_NAME\" = ? "+ " and \"COLUMN_NAME\" in (" + makeParams(extraColumnNameTypeParts.size()) + ")"+ " and \"PARTITION_NAME\" in ("+ makeParams(partNames.size())+ ")"+ " group by \"COLUMN_NAME\"";
      start=doTrace ? System.nanoTime() : 0;
      query=pm.newQuery("javax.jdo.query.SQL",qText);
      List<String> extraColumnNames=new ArrayList<String>();
      extraColumnNames.addAll(extraColumnNameTypeParts.keySet());
      qResult=query.executeWithArray(prepareParams(dbName,tableName,partNames,extraColumnNames));
      if (qResult == null) {
        query.closeAll();
        return Lists.newArrayList();
      }
      list=ensureList(qResult);
      Integer[] sumIndex=new Integer[]{6,10,11};
      for (      Object[] row : list) {
        Map<Integer,Object> indexToObject=new HashMap<Integer,Object>();
        for (int ind=1; ind < row.length; ind++) {
          indexToObject.put(sumIndex[ind - 1],row[ind]);
        }
        sumMap.put((String)row[0],indexToObject);
      }
      end=doTrace ? System.nanoTime() : 0;
      timingTrace(doTrace,qText,start,end);
      query.closeAll();
      for (      Map.Entry<String,String[]> entry : extraColumnNameTypeParts.entrySet()) {
        Object[] row=new Object[IExtrapolatePartStatus.colStatNames.length + 2];
        String colName=entry.getKey();
        String colType=entry.getValue()[0];
        Long sumVal=Long.parseLong(entry.getValue()[1]);
        row[0]=colName;
        row[1]=colType;
        IExtrapolatePartStatus extrapolateMethod=new LinearExtrapolatePartStatus();
        Integer[] index=IExtrapolatePartStatus.indexMaps.get(colType.toLowerCase());
        if (index == null) {
          index=IExtrapolatePartStatus.indexMaps.get("default");
        }
        for (        int colStatIndex : index) {
          String colStatName=IExtrapolatePartStatus.colStatNames[colStatIndex];
          if (IExtrapolatePartStatus.aggrTypes[colStatIndex] == IExtrapolatePartStatus.AggrType.Sum) {
            Object o=sumMap.get(colName).get(colStatIndex);
            if (o == null) {
              row[2 + colStatIndex]=null;
            }
 else {
              Long val=StatObjectConverter.extractSqlLong(o);
              row[2 + colStatIndex]=(Long)(val / sumVal * (partNames.size()));
            }
          }
 else {
            qText="select \"" + colStatName + "\",\"PARTITION_NAME\" from \"PART_COL_STATS\""+ " where \"DB_NAME\" = ? and \"TABLE_NAME\" = ?"+ " and \"COLUMN_NAME\" in ("+ makeParams(1)+ ")"+ " and \"PARTITION_NAME\" in ("+ makeParams(partNames.size())+ ")"+ " order by \'"+ colStatName+ "\'";
            start=doTrace ? System.nanoTime() : 0;
            query=pm.newQuery("javax.jdo.query.SQL",qText);
            qResult=query.executeWithArray(prepareParams(dbName,tableName,partNames,Arrays.asList(colName)));
            if (qResult == null) {
              query.closeAll();
              return Lists.newArrayList();
            }
            fqr=(ForwardQueryResult)qResult;
            Object[] min=(Object[])(fqr.get(0));
            Object[] max=(Object[])(fqr.get(fqr.size() - 1));
            end=doTrace ? System.nanoTime() : 0;
            timingTrace(doTrace,qText,start,end);
            query.closeAll();
            if (min[0] == null || max[0] == null) {
              row[2 + colStatIndex]=null;
            }
 else {
              row[2 + colStatIndex]=extrapolateMethod.extrapolate(min,max,colStatIndex,indexMap);
            }
          }
        }
        colStats.add(prepareCSObj(row,0));
      }
    }
    return colStats;
  }
}
