{
  List<SQLForeignKey> ret=new ArrayList<SQLForeignKey>();
  String queryText="SELECT  \"D2\".\"NAME\", \"T2\".\"TBL_NAME\", \"C2\".\"COLUMN_NAME\"," + "\"DBS\".\"NAME\", \"TBLS\".\"TBL_NAME\", \"COLUMNS_V2\".\"COLUMN_NAME\", " + "\"KEY_CONSTRAINTS\".\"POSITION\", \"KEY_CONSTRAINTS\".\"UPDATE_RULE\", \"KEY_CONSTRAINTS\".\"DELETE_RULE\", "+ "\"KEY_CONSTRAINTS\".\"CONSTRAINT_NAME\" , \"KEY_CONSTRAINTS2\".\"CONSTRAINT_NAME\", \"KEY_CONSTRAINTS\".\"ENABLE_VALIDATE_RELY\" "+ " FROM \"TBLS\" "+ " INNER JOIN \"KEY_CONSTRAINTS\" ON \"TBLS\".\"TBL_ID\" = \"KEY_CONSTRAINTS\".\"CHILD_TBL_ID\" "+ " INNER JOIN \"KEY_CONSTRAINTS\" \"KEY_CONSTRAINTS2\" ON \"KEY_CONSTRAINTS2\".\"PARENT_TBL_ID\"  = \"KEY_CONSTRAINTS\".\"PARENT_TBL_ID\" "+ " AND \"KEY_CONSTRAINTS2\".\"PARENT_CD_ID\"  = \"KEY_CONSTRAINTS\".\"PARENT_CD_ID\" AND "+ " \"KEY_CONSTRAINTS2\".\"PARENT_INTEGER_IDX\"  = \"KEY_CONSTRAINTS\".\"PARENT_INTEGER_IDX\" "+ " INNER JOIN \"DBS\" ON \"TBLS\".\"DB_ID\" = \"DBS\".\"DB_ID\" "+ " INNER JOIN \"TBLS\" \"T2\" ON  \"KEY_CONSTRAINTS\".\"PARENT_TBL_ID\" = \"T2\".\"TBL_ID\" "+ " INNER JOIN \"DBS\" \"D2\" ON \"T2\".\"DB_ID\" = \"D2\".\"DB_ID\" "+ " INNER JOIN \"COLUMNS_V2\"  ON \"COLUMNS_V2\".\"CD_ID\" = \"KEY_CONSTRAINTS\".\"CHILD_CD_ID\" AND "+ " \"COLUMNS_V2\".\"INTEGER_IDX\" = \"KEY_CONSTRAINTS\".\"CHILD_INTEGER_IDX\" "+ " INNER JOIN \"COLUMNS_V2\" \"C2\" ON \"C2\".\"CD_ID\" = \"KEY_CONSTRAINTS\".\"PARENT_CD_ID\" AND "+ " \"C2\".\"INTEGER_IDX\" = \"KEY_CONSTRAINTS\".\"PARENT_INTEGER_IDX\" "+ " WHERE \"KEY_CONSTRAINTS\".\"CONSTRAINT_TYPE\" = " + MConstraint.FOREIGN_KEY_CONSTRAINT + " AND \"KEY_CONSTRAINTS2\".\"CONSTRAINT_TYPE\" = "+ MConstraint.PRIMARY_KEY_CONSTRAINT+ " AND"+ (foreign_db_name == null ? "" : " \"DBS\".\"NAME\" = ? AND")+ (foreign_tbl_name == null ? "" : " \"TBLS\".\"TBL_NAME\" = ? AND")+ (parent_tbl_name == null ? "" : " \"T2\".\"TBL_NAME\" = ? AND")+ (parent_db_name == null ? "" : " \"D2\".\"NAME\" = ?");
  queryText=queryText.trim();
  if (queryText.endsWith("WHERE")) {
    queryText=queryText.substring(0,queryText.length() - 5);
  }
  if (queryText.endsWith("AND")) {
    queryText=queryText.substring(0,queryText.length() - 3);
  }
  List<String> pms=new ArrayList<String>();
  if (foreign_db_name != null) {
    pms.add(foreign_db_name);
  }
  if (foreign_tbl_name != null) {
    pms.add(foreign_tbl_name);
  }
  if (parent_tbl_name != null) {
    pms.add(parent_tbl_name);
  }
  if (parent_db_name != null) {
    pms.add(parent_db_name);
  }
  Query queryParams=pm.newQuery("javax.jdo.query.SQL",queryText);
  List<Object[]> sqlResult=ensureList(executeWithArray(queryParams,pms.toArray(),queryText));
  if (!sqlResult.isEmpty()) {
    for (    Object[] line : sqlResult) {
      int enableValidateRely=extractSqlInt(line[11]);
      boolean enable=(enableValidateRely & 4) != 0;
      boolean validate=(enableValidateRely & 2) != 0;
      boolean rely=(enableValidateRely & 1) != 0;
      SQLForeignKey currKey=new SQLForeignKey(extractSqlString(line[0]),extractSqlString(line[1]),extractSqlString(line[2]),extractSqlString(line[3]),extractSqlString(line[4]),extractSqlString(line[5]),extractSqlInt(line[6]),extractSqlInt(line[7]),extractSqlInt(line[8]),extractSqlString(line[9]),extractSqlString(line[10]),enable,validate,rely);
      ret.add(currKey);
    }
  }
  return ret;
}
