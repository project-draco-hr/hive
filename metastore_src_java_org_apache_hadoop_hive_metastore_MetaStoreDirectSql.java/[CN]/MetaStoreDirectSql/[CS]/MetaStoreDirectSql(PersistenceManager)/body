{
  this.pm=pm;
  Transaction tx=pm.currentTransaction();
  tx.begin();
  boolean isMySql=false;
  try {
    trySetAnsiQuotesForMysql();
    isMySql=true;
  }
 catch (  SQLException sqlEx) {
    LOG.info("MySQL check failed, assuming we are not on mysql: " + sqlEx.getMessage());
    tx.rollback();
    tx=pm.currentTransaction();
    tx.begin();
  }
  boolean isCompatibleDatastore=true;
  try {
    pm.newQuery(MDatabase.class,"name == ''").execute();
    pm.newQuery(MTableColumnStatistics.class,"dbName == ''").execute();
    pm.newQuery(MPartitionColumnStatistics.class,"dbName == ''").execute();
  }
 catch (  Exception ex) {
    isCompatibleDatastore=false;
    LOG.error("Database initialization failed; direct SQL is disabled",ex);
    tx.rollback();
  }
  if (isCompatibleDatastore) {
    String selfTestQuery="select \"DB_ID\" from \"DBS\"";
    try {
      pm.newQuery("javax.jdo.query.SQL",selfTestQuery).execute();
      tx.commit();
    }
 catch (    Exception ex) {
      isCompatibleDatastore=false;
      LOG.error("Self-test query [" + selfTestQuery + "] failed; direct SQL is disabled",ex);
      tx.rollback();
    }
  }
  this.isCompatibleDatastore=isCompatibleDatastore;
  this.isMySql=isMySql;
}
