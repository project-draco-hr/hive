{
  if (childExpressions != null) {
    super.evaluateChildren(batch);
  }
  LongColumnVector inputCol=(LongColumnVector)batch.cols[this.colNum];
  final int n=inputCol.isRepeating ? 1 : batch.size;
  int[] sel=batch.selected;
  final boolean selectedInUse=(inputCol.isRepeating == false) && batch.selectedInUse;
  LongColumnVector outV=(LongColumnVector)batch.cols[outputColumn];
switch (inputTypes[0]) {
case DATE:
    baseDate.setTime(DateWritable.daysToMillis((int)longValue));
  break;
case TIMESTAMP:
baseDate.setTime(timestampValue.getTime());
break;
case STRING:
case CHAR:
case VARCHAR:
boolean parsed=dateParser.parseDate(new String(stringValue,StandardCharsets.UTF_8),baseDate);
if (!parsed) {
outV.noNulls=false;
if (selectedInUse) {
for (int j=0; j < n; j++) {
int i=sel[j];
outV.isNull[i]=true;
}
}
 else {
for (int i=0; i < n; i++) {
outV.isNull[i]=true;
}
}
return;
}
break;
default :
throw new Error("Unsupported input type " + inputTypes[0].name());
}
if (batch.size == 0) {
return;
}
outV.isRepeating=inputCol.isRepeating;
long baseDateDays=DateWritable.millisToDays(baseDate.getTime());
if (inputCol.noNulls) {
outV.noNulls=true;
if (selectedInUse) {
for (int j=0; j < n; j++) {
int i=sel[j];
evaluate(baseDateDays,inputCol.vector[i],outV,i);
}
}
 else {
for (int i=0; i < n; i++) {
evaluate(baseDateDays,inputCol.vector[i],outV,i);
}
}
}
 else {
outV.noNulls=false;
if (selectedInUse) {
for (int j=0; j < n; j++) {
int i=sel[j];
outV.isNull[i]=inputCol.isNull[i];
if (!inputCol.isNull[i]) {
evaluate(baseDateDays,inputCol.vector[i],outV,i);
}
}
}
 else {
for (int i=0; i < n; i++) {
outV.isNull[i]=inputCol.isNull[i];
if (!inputCol.isNull[i]) {
evaluate(baseDateDays,inputCol.vector[i],outV,i);
}
}
}
}
}
