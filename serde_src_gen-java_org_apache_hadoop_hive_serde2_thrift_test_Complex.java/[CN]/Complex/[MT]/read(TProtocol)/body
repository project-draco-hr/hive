{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case AINT:
      if (field.type == TType.I32) {
        this.aint=iprot.readI32();
        this.__isset.aint=true;
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case ASTRING:
  if (field.type == TType.STRING) {
    this.aString=iprot.readString();
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case LINT:
if (field.type == TType.LIST) {
{
  TList _list0=iprot.readListBegin();
  this.lint=new ArrayList<Integer>(_list0.size);
  for (int _i1=0; _i1 < _list0.size; ++_i1) {
    int _elem2;
    _elem2=iprot.readI32();
    this.lint.add(_elem2);
  }
  iprot.readListEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case LSTRING:
if (field.type == TType.LIST) {
{
TList _list3=iprot.readListBegin();
this.lString=new ArrayList<String>(_list3.size);
for (int _i4=0; _i4 < _list3.size; ++_i4) {
String _elem5;
_elem5=iprot.readString();
this.lString.add(_elem5);
}
iprot.readListEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case LINTSTRING:
if (field.type == TType.LIST) {
{
TList _list6=iprot.readListBegin();
this.lintString=new ArrayList<IntString>(_list6.size);
for (int _i7=0; _i7 < _list6.size; ++_i7) {
IntString _elem8;
_elem8=new IntString();
_elem8.read(iprot);
this.lintString.add(_elem8);
}
iprot.readListEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case MSTRINGSTRING:
if (field.type == TType.MAP) {
{
TMap _map9=iprot.readMapBegin();
this.mStringString=new HashMap<String,String>(2 * _map9.size);
for (int _i10=0; _i10 < _map9.size; ++_i10) {
String _key11;
String _val12;
_key11=iprot.readString();
_val12=iprot.readString();
this.mStringString.put(_key11,_val12);
}
iprot.readMapEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
