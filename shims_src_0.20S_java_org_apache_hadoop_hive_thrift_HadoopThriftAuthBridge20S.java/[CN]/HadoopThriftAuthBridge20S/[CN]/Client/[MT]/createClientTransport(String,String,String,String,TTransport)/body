{
  AuthMethod method=AuthMethod.valueOf(AuthMethod.class,methodStr);
  TTransport saslTransport=null;
switch (method) {
case DIGEST:
    Token<DelegationTokenIdentifier> t=new Token<DelegationTokenIdentifier>();
  t.decodeFromUrlString(tokenStrForm);
saslTransport=new TSaslClientTransport(method.getMechanismName(),null,null,SaslRpcServer.SASL_DEFAULT_REALM,SaslRpcServer.SASL_PROPS,new SaslClientCallbackHandler(t),underlyingTransport);
return new TUGIAssumingTransport(saslTransport,UserGroupInformation.getCurrentUser());
case KERBEROS:
String serverPrincipal=SecurityUtil.getServerPrincipal(principalConfig,host);
String names[]=SaslRpcServer.splitKerberosName(serverPrincipal);
if (names.length != 3) {
throw new IOException("Kerberos principal name does NOT have the expected hostname part: " + serverPrincipal);
}
try {
saslTransport=new TSaslClientTransport(method.getMechanismName(),null,names[0],names[1],SaslRpcServer.SASL_PROPS,null,underlyingTransport);
return new TUGIAssumingTransport(saslTransport,UserGroupInformation.getCurrentUser());
}
 catch (SaslException se) {
throw new IOException("Could not instantiate SASL transport",se);
}
default :
throw new IOException("Unsupported authentication method: " + method);
}
}
