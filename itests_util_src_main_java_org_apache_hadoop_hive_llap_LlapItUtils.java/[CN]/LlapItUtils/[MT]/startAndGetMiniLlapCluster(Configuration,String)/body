{
  MiniLlapCluster llapCluster;
  LOG.info("Using conf dir: {}",confDir);
  if (confDir != null && !confDir.isEmpty()) {
    conf.addResource(new URL("file://" + new File(confDir).toURI().getPath() + "/tez-site.xml"));
  }
  Configuration daemonConf=new LlapDaemonConfiguration(conf);
  final String clusterName="llap";
  final long maxMemory=LlapDaemon.getTotalHeapSize();
  final long memoryForCache=(long)(0.15f * maxMemory);
  final long totalExecutorMemory=(long)(0.75f * maxMemory);
  final int numExecutors=HiveConf.getIntVar(conf,HiveConf.ConfVars.LLAP_DAEMON_NUM_EXECUTORS);
  final boolean asyncIOEnabled=true;
  final boolean directMemoryEnabled=false;
  final int numLocalDirs=1;
  LOG.info("MiniLlap Configs - maxMemory: " + maxMemory + " memoryForCache: "+ memoryForCache+ " totalExecutorMemory: "+ totalExecutorMemory+ " numExecutors: "+ numExecutors+ " asyncIOEnabled: "+ asyncIOEnabled+ " directMemoryEnabled: "+ directMemoryEnabled+ " numLocalDirs: "+ numLocalDirs);
  llapCluster=MiniLlapCluster.create(clusterName,numExecutors,totalExecutorMemory,asyncIOEnabled,directMemoryEnabled,memoryForCache,numLocalDirs);
  llapCluster.init(daemonConf);
  llapCluster.start();
  Configuration llapConf=llapCluster.getClusterSpecificConfiguration();
  Iterator<Map.Entry<String,String>> confIter=llapConf.iterator();
  while (confIter.hasNext()) {
    Map.Entry<String,String> entry=confIter.next();
    conf.set(entry.getKey(),entry.getValue());
  }
  return llapCluster;
}
