{
  AnnotateStatsProcCtx aspCtx=new AnnotateStatsProcCtx(pctx);
  Map<Rule,NodeProcessor> opRules=new LinkedHashMap<Rule,NodeProcessor>();
  opRules.put(new RuleRegExp("TS",TableScanOperator.getOperatorName() + "%"),StatsRulesProcFactory.getTableScanRule());
  opRules.put(new RuleRegExp("SEL",SelectOperator.getOperatorName() + "%"),StatsRulesProcFactory.getSelectRule());
  opRules.put(new RuleRegExp("FIL",FilterOperator.getOperatorName() + "%"),StatsRulesProcFactory.getFilterRule());
  opRules.put(new RuleRegExp("GBY",GroupByOperator.getOperatorName() + "%"),StatsRulesProcFactory.getGroupByRule());
  opRules.put(new RuleRegExp("JOIN",CommonJoinOperator.getOperatorName() + "%|" + MapJoinOperator.getOperatorName()+ "%"),StatsRulesProcFactory.getJoinRule());
  opRules.put(new RuleRegExp("LIM",LimitOperator.getOperatorName() + "%"),StatsRulesProcFactory.getLimitRule());
  Dispatcher disp=new DefaultRuleDispatcher(StatsRulesProcFactory.getDefaultRule(),opRules,aspCtx);
  GraphWalker ogw=new PreOrderWalker(disp);
  ArrayList<Node> topNodes=new ArrayList<Node>();
  topNodes.addAll(pctx.getTopOps().values());
  ogw.startWalking(topNodes,null);
  return pctx;
}
