{
  if (mapWork == null) {
    return;
  }
 else   if (mapWork.getPathToAliases() == null) {
    return;
  }
  final ArrayList<String> aliases=new ArrayList<String>();
  final Iterator<Entry<String,ArrayList<String>>> iterator=mapWork.getPathToAliases().entrySet().iterator();
  while (iterator.hasNext()) {
    final Entry<String,ArrayList<String>> entry=iterator.next();
    final String key=new Path(entry.getKey()).toUri().getPath();
    if (splitPath.equals(key) || splitPathWithNoSchema.equals(key)) {
      final ArrayList<String> list=entry.getValue();
      for (      final String val : list) {
        aliases.add(val);
      }
    }
  }
  for (  final String alias : aliases) {
    final Operator<? extends Serializable> op=mapWork.getAliasToWork().get(alias);
    if (op != null && op instanceof TableScanOperator) {
      final TableScanOperator tableScan=(TableScanOperator)op;
      final List<Integer> list=tableScan.getNeededColumnIDs();
      if (list != null) {
        ColumnProjectionUtils.appendReadColumnIDs(jobConf,list);
      }
 else {
        ColumnProjectionUtils.setFullyReadColumns(jobConf);
      }
      pushFilters(jobConf,tableScan);
    }
  }
}
