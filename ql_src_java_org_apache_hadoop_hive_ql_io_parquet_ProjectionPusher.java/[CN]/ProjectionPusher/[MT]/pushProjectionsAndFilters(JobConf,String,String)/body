{
  if (mapWork == null) {
    return;
  }
 else   if (mapWork.getPathToAliases() == null) {
    return;
  }
  final Set<String> aliases=new HashSet<String>();
  final Iterator<Entry<Path,ArrayList<String>>> iterator=mapWork.getPathToAliases().entrySet().iterator();
  while (iterator.hasNext()) {
    final Entry<Path,ArrayList<String>> entry=iterator.next();
    final String key=entry.getKey().toUri().getPath();
    if (splitPath.equals(key) || splitPathWithNoSchema.equals(key)) {
      aliases.addAll(entry.getValue());
    }
  }
  boolean allColumnsNeeded=false;
  boolean noFilters=false;
  Set<Integer> neededColumnIDs=new HashSet<Integer>();
  List<ExprNodeGenericFuncDesc> filterExprs=new ArrayList<ExprNodeGenericFuncDesc>();
  RowSchema rowSchema=null;
  for (  String alias : aliases) {
    final Operator<? extends Serializable> op=mapWork.getAliasToWork().get(alias);
    if (op != null && op instanceof TableScanOperator) {
      final TableScanOperator ts=(TableScanOperator)op;
      if (ts.getNeededColumnIDs() == null) {
        allColumnsNeeded=true;
      }
 else {
        neededColumnIDs.addAll(ts.getNeededColumnIDs());
      }
      rowSchema=ts.getSchema();
      ExprNodeGenericFuncDesc filterExpr=ts.getConf() == null ? null : ts.getConf().getFilterExpr();
      noFilters=filterExpr == null;
      filterExprs.add(filterExpr);
    }
  }
  ExprNodeGenericFuncDesc tableFilterExpr=null;
  if (!noFilters) {
    try {
      for (      ExprNodeGenericFuncDesc filterExpr : filterExprs) {
        if (tableFilterExpr == null) {
          tableFilterExpr=filterExpr;
        }
 else {
          tableFilterExpr=ExprNodeGenericFuncDesc.newInstance(new GenericUDFOPOr(),Arrays.<ExprNodeDesc>asList(tableFilterExpr,filterExpr));
        }
      }
    }
 catch (    UDFArgumentException ex) {
      LOG.debug("Turn off filtering due to " + ex);
      tableFilterExpr=null;
    }
  }
  if (!allColumnsNeeded) {
    if (!neededColumnIDs.isEmpty()) {
      ColumnProjectionUtils.appendReadColumns(jobConf,new ArrayList<Integer>(neededColumnIDs));
    }
  }
 else {
    ColumnProjectionUtils.setReadAllColumns(jobConf);
  }
  pushFilters(jobConf,rowSchema,tableFilterExpr);
}
