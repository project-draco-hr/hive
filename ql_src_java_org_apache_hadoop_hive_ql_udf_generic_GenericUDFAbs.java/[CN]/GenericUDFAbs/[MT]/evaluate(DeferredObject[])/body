{
  Object valObject=arguments[0].get();
  if (valObject == null) {
    return null;
  }
switch (inputType) {
case SHORT:
case BYTE:
case INT:
    valObject=inputConverter.convert(valObject);
  resultInt.set(Math.abs(((IntWritable)valObject).get()));
return resultInt;
case LONG:
valObject=inputConverter.convert(valObject);
resultLong.set(Math.abs(((LongWritable)valObject).get()));
return resultLong;
case FLOAT:
case STRING:
case DOUBLE:
valObject=inputConverter.convert(valObject);
resultDouble.set(Math.abs(((DoubleWritable)valObject).get()));
return resultDouble;
case DECIMAL:
return PrimitiveObjectInspectorFactory.writableHiveDecimalObjectInspector.set(PrimitiveObjectInspectorFactory.writableHiveDecimalObjectInspector.create(HiveDecimal.ZERO),PrimitiveObjectInspectorUtils.getHiveDecimal(valObject,argumentOI).abs());
default :
throw new UDFArgumentException("ABS only takes SHORT/BYTE/INT/LONG/DOUBLE/FLOAT/STRING/DECIMAL types, got " + inputType);
}
}
