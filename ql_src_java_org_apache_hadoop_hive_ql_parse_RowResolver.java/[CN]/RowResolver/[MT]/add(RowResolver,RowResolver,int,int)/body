{
  String tabAlias;
  String colAlias;
  String[] qualifiedColName;
  int i=0;
  for (  ColumnInfo cInfoFrmInput : rrToAddFrom.getRowSchema().getSignature()) {
    if (numColumns >= 0 && i == numColumns) {
      break;
    }
    ColumnInfo newCI=null;
    qualifiedColName=rrToAddFrom.getInvRslvMap().get(cInfoFrmInput.getInternalName());
    tabAlias=qualifiedColName[0];
    colAlias=qualifiedColName[1];
    newCI=new ColumnInfo(cInfoFrmInput);
    newCI.setInternalName(SemanticAnalyzer.getColumnInternalName(outputColPos));
    outputColPos++;
    if (rrToAddTo.get(tabAlias,colAlias) != null) {
      LOG.debug("Found duplicate column alias in RR: " + rrToAddTo.get(tabAlias,colAlias));
    }
 else {
      rrToAddTo.put(tabAlias,colAlias,newCI);
    }
    qualifiedColName=rrToAddFrom.getAlternateMappings(cInfoFrmInput.getInternalName());
    if (qualifiedColName != null) {
      tabAlias=qualifiedColName[0];
      colAlias=qualifiedColName[1];
      rrToAddTo.put(tabAlias,colAlias,newCI);
    }
    i++;
  }
  return outputColPos;
}
