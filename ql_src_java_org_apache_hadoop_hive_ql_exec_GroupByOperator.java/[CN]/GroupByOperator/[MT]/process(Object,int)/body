{
  firstRow=false;
  ObjectInspector rowInspector=inputObjInspectors[tag];
  if (hashAggr && !groupKeyIsNotReduceKey) {
    numRowsInput++;
    if (numRowsInput == numRowsCompareHashAggr) {
      numRowsCompareHashAggr+=groupbyMapAggrInterval;
      if (numRowsHashTbl > numRowsInput * minReductionHashAggr) {
        LOG.warn("Disable Hash Aggr: #hash table = " + numRowsHashTbl + " #total = "+ numRowsInput+ " reduction = "+ 1.0 * (numRowsHashTbl / numRowsInput) + " minReduction = " + minReductionHashAggr);
        flush(true);
        hashAggr=false;
      }
 else {
        LOG.trace("Hash Aggr Enabled: #hash table = " + numRowsHashTbl + " #total = "+ numRowsInput+ " reduction = "+ 1.0 * (numRowsHashTbl / numRowsInput) + " minReduction = " + minReductionHashAggr);
      }
    }
  }
  try {
    newKeys.clear();
    for (int i=0; i < keyFields.length; i++) {
      if (keyObjectInspectors[i] == null) {
        keyObjectInspectors[i]=keyFields[i].initialize(rowInspector);
      }
      keyObjects[i]=keyFields[i].evaluate(row);
      newKeys.add(keyObjects[i]);
    }
    if (hashAggr)     processHashAggr(row,rowInspector,newKeys);
 else     processAggr(row,rowInspector,newKeys);
    firstRowInGroup=false;
  }
 catch (  HiveException e) {
    throw e;
  }
catch (  Exception e) {
    throw new HiveException(e);
  }
}
