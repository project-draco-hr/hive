{
  firstRow=false;
  ObjectInspector rowInspector=inputObjInspectors[tag];
  if (hashAggr && !groupKeyIsNotReduceKey) {
    numRowsInput++;
    if (numRowsInput == numRowsCompareHashAggr) {
      numRowsCompareHashAggr+=groupbyMapAggrInterval;
      if (numRowsHashTbl > numRowsInput * minReductionHashAggr) {
        LOG.warn("Disable Hash Aggr: #hash table = " + numRowsHashTbl + " #total = "+ numRowsInput+ " reduction = "+ 1.0 * (numRowsHashTbl / numRowsInput) + " minReduction = " + minReductionHashAggr);
        flush(true);
        hashAggr=false;
      }
 else {
        LOG.trace("Hash Aggr Enabled: #hash table = " + numRowsHashTbl + " #total = "+ numRowsInput+ " reduction = "+ 1.0 * (numRowsHashTbl / numRowsInput) + " minReduction = " + minReductionHashAggr);
      }
    }
  }
  try {
    countAfterReport++;
    newKeys.getNewKey(row,rowInspector);
    if (hashAggr) {
      newKeys.setHashKey();
      processHashAggr(row,rowInspector,newKeys);
    }
 else {
      processAggr(row,rowInspector,newKeys);
    }
    firstRowInGroup=false;
    if (countAfterReport != 0 && (countAfterReport % heartbeatInterval) == 0 && (reporter != null)) {
      reporter.progress();
      countAfterReport=0;
    }
  }
 catch (  HiveException e) {
    throw e;
  }
catch (  Exception e) {
    throw new HiveException(e);
  }
}
