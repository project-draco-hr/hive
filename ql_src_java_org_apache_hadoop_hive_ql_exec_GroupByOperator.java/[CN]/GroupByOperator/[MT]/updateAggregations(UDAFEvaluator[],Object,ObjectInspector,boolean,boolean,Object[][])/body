{
  for (int ai=0; ai < aggs.length; ai++) {
    Object[] o=new Object[aggregationParameterFields[ai].length];
    for (int pi=0; pi < aggregationParameterFields[ai].length; pi++) {
      ObjectInspector oi=aggregationParameterObjectInspectors[ai][pi];
      if (oi == null) {
        oi=aggregationParameterFields[ai][pi].initialize(rowInspector);
        aggregationParameterObjectInspectors[ai][pi]=oi;
        aggregationParameterStandardObjectInspectors[ai][pi]=ObjectInspectorUtils.getStandardObjectInspector(oi,ObjectInspectorCopyOption.WRITABLE);
      }
      PrimitiveObjectInspector poi=(PrimitiveObjectInspector)oi;
      o[pi]=poi.getPrimitiveWritableObject(aggregationParameterFields[ai][pi].evaluate(row));
    }
    if (aggregationIsDistinct[ai]) {
      if (hashAggr) {
        if (newEntry) {
          FunctionRegistry.invoke(aggregationsAggregateMethods[ai],aggs[ai],o);
        }
      }
 else {
        boolean differentParameters=false;
        if ((lastInvoke == null) || (lastInvoke[ai] == null))         differentParameters=true;
 else {
          for (int pi=0; pi < o.length; pi++) {
            if (o[pi] == null) {
              if (lastInvoke[ai][pi] != null) {
                differentParameters=true;
                break;
              }
            }
 else             if (!o[pi].equals(lastInvoke[ai][pi])) {
              differentParameters=true;
              break;
            }
          }
        }
        if (differentParameters) {
          FunctionRegistry.invoke(aggregationsAggregateMethods[ai],aggs[ai],o);
          if (lastInvoke[ai] == null) {
            lastInvoke[ai]=new Object[o.length];
          }
          for (int pi=0; pi < o.length; pi++) {
            lastInvoke[ai][pi]=ObjectInspectorUtils.copyToStandardObject(o[pi],aggregationParameterStandardObjectInspectors[ai][pi],ObjectInspectorCopyOption.WRITABLE);
          }
        }
      }
    }
 else {
      FunctionRegistry.invoke(aggregationsAggregateMethods[ai],aggs[ai],o);
    }
  }
}
