{
  try {
    Connection dbConn=null;
    Statement stmt=null;
    long extLockId=rqst.getLockid();
    try {
      dbConn=getDbConn(Connection.TRANSACTION_READ_COMMITTED);
      stmt=dbConn.createStatement();
      String s="delete from HIVE_LOCKS where hl_lock_ext_id = " + extLockId + " AND (hl_txnid = 0 OR"+ " (hl_txnid <> 0 AND hl_lock_state = '"+ LOCK_WAITING+ "'))";
      LOG.debug("Going to execute update <" + s + ">");
      int rc=stmt.executeUpdate(s);
      if (rc < 1) {
        LOG.debug("Going to rollback");
        dbConn.rollback();
        LockInfo info=getTxnIdFromLockId(dbConn,extLockId);
        if (info == null) {
          LOG.error("No lock in " + LOCK_WAITING + " mode found for unlock("+ rqst+ ")");
          throw new NoSuchLockException("No such lock " + JavaUtils.lockIdToString(extLockId));
        }
        if (info.txnId != 0) {
          String msg="Unlocking locks associated with transaction not permitted.  " + info;
          LOG.error(msg);
          throw new TxnOpenException(msg);
        }
        if (info.txnId == 0) {
          String msg="Found lock in unexpected state " + info;
          LOG.error(msg);
          throw new MetaException(msg);
        }
      }
      LOG.debug("Going to commit");
      dbConn.commit();
    }
 catch (    SQLException e) {
      LOG.debug("Going to rollback");
      rollbackDBConn(dbConn);
      checkRetryable(dbConn,e,"unlock(" + rqst + ")");
      throw new MetaException("Unable to update transaction database " + JavaUtils.lockIdToString(extLockId) + " "+ StringUtils.stringifyException(e));
    }
 finally {
      closeStmt(stmt);
      closeDbConn(dbConn);
    }
  }
 catch (  RetryException e) {
    unlock(rqst);
  }
}
