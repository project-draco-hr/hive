{
  Connection dbConn=null;
  Statement stmt=null;
  ResultSet rs=null;
  try {
    try {
      String sqlStmt=sqlGenerator.addForUpdateClause("select MT_COMMENT from AUX_TABLE where MT_KEY1=" + quoteString(key) + " and MT_KEY2=0");
      lockInternal();
      dbConn=getDbConn(Connection.TRANSACTION_READ_COMMITTED);
      stmt=dbConn.createStatement();
      if (LOG.isDebugEnabled()) {
        LOG.debug("About to execute SQL: " + sqlStmt);
      }
      rs=stmt.executeQuery(sqlStmt);
      if (!rs.next()) {
        close(rs);
        try {
          stmt.executeUpdate("insert into AUX_TABLE(MT_KEY1,MT_KEY2) values(" + quoteString(key) + ", 0)");
          dbConn.commit();
        }
 catch (        SQLException ex) {
          if (!isDuplicateKeyError(ex)) {
            throw new RuntimeException("Unable to lock " + quoteString(key) + " due to: "+ getMessage(ex),ex);
          }
        }
        rs=stmt.executeQuery(sqlStmt);
        if (!rs.next()) {
          throw new IllegalStateException("Unable to lock " + quoteString(key) + ".  Expected row in AUX_TABLE is missing.");
        }
      }
      Semaphore derbySemaphore=null;
      if (dbProduct == DatabaseProduct.DERBY) {
        derbyKey2Lock.putIfAbsent(key,new Semaphore(1));
        derbySemaphore=derbyKey2Lock.get(key);
        derbySemaphore.acquire();
      }
      LOG.info(quoteString(key) + " locked by " + quoteString(TxnHandler.hostname));
      return new LockHandleImpl(dbConn,stmt,rs,key,derbySemaphore);
    }
 catch (    SQLException ex) {
      rollbackDBConn(dbConn);
      close(rs,stmt,dbConn);
      checkRetryable(dbConn,ex,"acquireLock(" + key + ")");
      throw new MetaException("Unable to lock " + quoteString(key) + " due to: "+ getMessage(ex)+ "; "+ StringUtils.stringifyException(ex));
    }
catch (    InterruptedException ex) {
      rollbackDBConn(dbConn);
      close(rs,stmt,dbConn);
      throw new MetaException("Unable to lock " + quoteString(key) + " due to: "+ ex.getMessage()+ StringUtils.stringifyException(ex));
    }
 finally {
      unlockInternal();
    }
  }
 catch (  RetryException ex) {
    acquireLock(key);
  }
  throw new MetaException("This can't happen because checkRetryable() has a retry limit");
}
