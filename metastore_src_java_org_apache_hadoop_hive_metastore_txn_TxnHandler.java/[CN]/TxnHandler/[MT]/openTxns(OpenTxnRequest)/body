{
  int numTxns=rqst.getNum_txns();
  try {
    Connection dbConn=null;
    Statement stmt=null;
    ResultSet rs=null;
    try {
      lockInternal();
      dbConn=getDbConn(Connection.TRANSACTION_READ_COMMITTED);
      int maxTxns=HiveConf.getIntVar(conf,HiveConf.ConfVars.HIVE_TXN_MAX_OPEN_BATCH);
      if (numTxns > maxTxns)       numTxns=maxTxns;
      stmt=dbConn.createStatement();
      String s=addForUpdateClause("select ntxn_next from NEXT_TXN_ID");
      LOG.debug("Going to execute query <" + s + ">");
      rs=stmt.executeQuery(s);
      if (!rs.next()) {
        throw new MetaException("Transaction database not properly " + "configured, can't find next transaction id.");
      }
      long first=rs.getLong(1);
      s="update NEXT_TXN_ID set ntxn_next = " + (first + numTxns);
      LOG.debug("Going to execute update <" + s + ">");
      stmt.executeUpdate(s);
      long now=getDbTime(dbConn);
      s="insert into TXNS (txn_id, txn_state, txn_started, " + "txn_last_heartbeat, txn_user, txn_host) values (?, 'o', " + now + ", "+ now+ ", '"+ rqst.getUser()+ "', '"+ rqst.getHostname()+ "')";
      LOG.debug("Going to prepare statement <" + s + ">");
      PreparedStatement ps=dbConn.prepareStatement(s);
      List<Long> txnIds=new ArrayList<Long>(numTxns);
      for (long i=first; i < first + numTxns; i++) {
        ps.setLong(1,i);
        ps.executeUpdate();
        txnIds.add(i);
      }
      LOG.debug("Going to commit");
      dbConn.commit();
      return new OpenTxnsResponse(txnIds);
    }
 catch (    SQLException e) {
      LOG.debug("Going to rollback");
      rollbackDBConn(dbConn);
      checkRetryable(dbConn,e,"openTxns(" + rqst + ")");
      throw new MetaException("Unable to select from transaction database " + StringUtils.stringifyException(e));
    }
 finally {
      close(rs,stmt,dbConn);
      unlockInternal();
    }
  }
 catch (  RetryException e) {
    return openTxns(rqst);
  }
}
