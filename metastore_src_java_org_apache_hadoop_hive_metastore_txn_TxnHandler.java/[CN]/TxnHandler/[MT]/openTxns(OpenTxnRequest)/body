{
  if (openTxnsCounter == null) {
synchronized (TxnHandler.class) {
      try {
        if (openTxnsCounter == null) {
          startHouseKeeperService(conf,Class.forName("org.apache.hadoop.hive.ql.txn.AcidOpenTxnsCounterService"));
        }
      }
 catch (      ClassNotFoundException e) {
        throw new MetaException(e.getMessage());
      }
    }
  }
  if (!tooManyOpenTxns && numOpenTxns >= maxOpenTxns) {
    tooManyOpenTxns=true;
  }
  if (tooManyOpenTxns) {
    if (numOpenTxns < maxOpenTxns * 0.9) {
      tooManyOpenTxns=false;
    }
 else {
      LOG.warn("Maximum allowed number of open transactions (" + maxOpenTxns + ") has been "+ "reached. Current number of open transactions: "+ numOpenTxns);
      throw new MetaException("Maximum allowed number of open transactions has been reached. " + "See hive.max.open.txns.");
    }
  }
  int numTxns=rqst.getNum_txns();
  try {
    Connection dbConn=null;
    Statement stmt=null;
    ResultSet rs=null;
    try {
      lockInternal();
      dbConn=getDbConn(Connection.TRANSACTION_READ_COMMITTED);
      int maxTxns=HiveConf.getIntVar(conf,HiveConf.ConfVars.HIVE_TXN_MAX_OPEN_BATCH);
      if (numTxns > maxTxns)       numTxns=maxTxns;
      stmt=dbConn.createStatement();
      String s=addForUpdateClause("select ntxn_next from NEXT_TXN_ID");
      LOG.debug("Going to execute query <" + s + ">");
      rs=stmt.executeQuery(s);
      if (!rs.next()) {
        throw new MetaException("Transaction database not properly " + "configured, can't find next transaction id.");
      }
      long first=rs.getLong(1);
      s="update NEXT_TXN_ID set ntxn_next = " + (first + numTxns);
      LOG.debug("Going to execute update <" + s + ">");
      stmt.executeUpdate(s);
      long now=getDbTime(dbConn);
      List<Long> txnIds=new ArrayList<Long>(numTxns);
      ArrayList<String> queries=new ArrayList<String>();
      String query;
      String insertClause="insert into TXNS (txn_id, txn_state, txn_started, txn_last_heartbeat, txn_user, txn_host) values ";
      StringBuilder valuesClause=new StringBuilder();
      for (long i=first; i < first + numTxns; i++) {
        txnIds.add(i);
        if (i > first && (i - first) % conf.getIntVar(HiveConf.ConfVars.METASTORE_DIRECT_SQL_MAX_ELEMENTS_VALUES_CLAUSE) == 0) {
          query=insertClause + valuesClause.toString();
          queries.add(query);
          valuesClause.setLength(0);
          valuesClause.append("(").append(i).append(", 'o', ").append(now).append(", ").append(now).append(", '").append(rqst.getUser()).append("', '").append(rqst.getHostname()).append("')");
          continue;
        }
        if (i > first) {
          valuesClause.append(", ");
        }
        valuesClause.append("(").append(i).append(", 'o', ").append(now).append(", ").append(now).append(", '").append(rqst.getUser()).append("', '").append(rqst.getHostname()).append("')");
      }
      query=insertClause + valuesClause.toString();
      queries.add(query);
      for (      String q : queries) {
        LOG.debug("Going to execute update <" + q + ">");
        stmt.execute(q);
      }
      LOG.debug("Going to commit");
      dbConn.commit();
      return new OpenTxnsResponse(txnIds);
    }
 catch (    SQLException e) {
      LOG.debug("Going to rollback");
      rollbackDBConn(dbConn);
      checkRetryable(dbConn,e,"openTxns(" + rqst + ")");
      throw new MetaException("Unable to select from transaction database " + StringUtils.stringifyException(e));
    }
 finally {
      close(rs,stmt,dbConn);
      unlockInternal();
    }
  }
 catch (  RetryException e) {
    return openTxns(rqst);
  }
}
