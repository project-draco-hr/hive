{
  if (jumpTable != null)   return;
  jumpTable=new HashMap<LockType,Map<LockType,Map<LockState,LockAction>>>(3);
  Map<LockType,Map<LockState,LockAction>> m=new HashMap<LockType,Map<LockState,LockAction>>(3);
  jumpTable.put(LockType.SHARED_READ,m);
  Map<LockState,LockAction> m2=new HashMap<LockState,LockAction>(2);
  m.put(LockType.SHARED_READ,m2);
  m2.put(LockState.ACQUIRED,LockAction.ACQUIRE);
  m2.put(LockState.WAITING,LockAction.KEEP_LOOKING);
  m2=new HashMap<LockState,LockAction>(2);
  m.put(LockType.SHARED_WRITE,m2);
  m2.put(LockState.ACQUIRED,LockAction.ACQUIRE);
  m2.put(LockState.WAITING,LockAction.KEEP_LOOKING);
  m2=new HashMap<LockState,LockAction>(2);
  m.put(LockType.EXCLUSIVE,m2);
  m2.put(LockState.ACQUIRED,LockAction.WAIT);
  m2.put(LockState.WAITING,LockAction.WAIT);
  m=new HashMap<LockType,Map<LockState,LockAction>>(3);
  jumpTable.put(LockType.SHARED_WRITE,m);
  m2=new HashMap<LockState,LockAction>(2);
  m.put(LockType.SHARED_READ,m2);
  m2.put(LockState.ACQUIRED,LockAction.KEEP_LOOKING);
  m2.put(LockState.WAITING,LockAction.KEEP_LOOKING);
  m2=new HashMap<LockState,LockAction>(2);
  m.put(LockType.SHARED_WRITE,m2);
  m2.put(LockState.ACQUIRED,LockAction.WAIT);
  m2.put(LockState.WAITING,LockAction.WAIT);
  m2=new HashMap<LockState,LockAction>(2);
  m.put(LockType.EXCLUSIVE,m2);
  m2.put(LockState.ACQUIRED,LockAction.WAIT);
  m2.put(LockState.WAITING,LockAction.WAIT);
  m=new HashMap<LockType,Map<LockState,LockAction>>(3);
  jumpTable.put(LockType.EXCLUSIVE,m);
  m2=new HashMap<LockState,LockAction>(2);
  m.put(LockType.SHARED_READ,m2);
  m2.put(LockState.ACQUIRED,LockAction.WAIT);
  m2.put(LockState.WAITING,LockAction.WAIT);
  m2=new HashMap<LockState,LockAction>(2);
  m.put(LockType.SHARED_WRITE,m2);
  m2.put(LockState.ACQUIRED,LockAction.WAIT);
  m2.put(LockState.WAITING,LockAction.WAIT);
  m2=new HashMap<LockState,LockAction>(2);
  m.put(LockType.EXCLUSIVE,m2);
  m2.put(LockState.ACQUIRED,LockAction.WAIT);
  m2.put(LockState.WAITING,LockAction.WAIT);
}
