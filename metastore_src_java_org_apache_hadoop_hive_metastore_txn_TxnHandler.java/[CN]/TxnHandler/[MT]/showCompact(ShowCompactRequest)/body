{
  ShowCompactResponse response=new ShowCompactResponse(new ArrayList<ShowCompactResponseElement>());
  Connection dbConn=null;
  Statement stmt=null;
  try {
    try {
      dbConn=getDbConn(Connection.TRANSACTION_READ_COMMITTED);
      stmt=dbConn.createStatement();
      String s="select cq_database, cq_table, cq_partition, cq_state, cq_type, cq_worker_id, " + "cq_start, -1 cc_end, cq_run_as, cq_hadoop_job_id, cq_id from COMPACTION_QUEUE union all " + "select cc_database, cc_table, cc_partition, cc_state, cc_type, cc_worker_id, "+ "cc_start, cc_end, cc_run_as, cc_hadoop_job_id, cc_id from COMPLETED_COMPACTIONS";
      LOG.debug("Going to execute query <" + s + ">");
      ResultSet rs=stmt.executeQuery(s);
      while (rs.next()) {
        ShowCompactResponseElement e=new ShowCompactResponseElement();
        e.setDbname(rs.getString(1));
        e.setTablename(rs.getString(2));
        e.setPartitionname(rs.getString(3));
switch (rs.getString(4).charAt(0)) {
case INITIATED_STATE:
          e.setState(INITIATED_RESPONSE);
        break;
case WORKING_STATE:
      e.setState(WORKING_RESPONSE);
    break;
case READY_FOR_CLEANING:
  e.setState(CLEANING_RESPONSE);
break;
case FAILED_STATE:
e.setState(FAILED_RESPONSE);
break;
case SUCCEEDED_STATE:
e.setState(SUCCEEDED_RESPONSE);
break;
case ATTEMPTED_STATE:
e.setState(ATTEMPTED_RESPONSE);
break;
default :
}
switch (rs.getString(5).charAt(0)) {
case MAJOR_TYPE:
e.setType(CompactionType.MAJOR);
break;
case MINOR_TYPE:
e.setType(CompactionType.MINOR);
break;
default :
}
e.setWorkerid(rs.getString(6));
e.setStart(rs.getLong(7));
long endTime=rs.getLong(8);
if (endTime != -1) {
e.setEndTime(endTime);
}
e.setRunAs(rs.getString(9));
e.setHadoopJobId(rs.getString(10));
long id=rs.getLong(11);
response.addToCompacts(e);
}
LOG.debug("Going to rollback");
dbConn.rollback();
}
 catch (SQLException e) {
LOG.debug("Going to rollback");
rollbackDBConn(dbConn);
checkRetryable(dbConn,e,"showCompact(" + rqst + ")");
throw new MetaException("Unable to select from transaction database " + StringUtils.stringifyException(e));
}
 finally {
closeStmt(stmt);
closeDbConn(dbConn);
}
return response;
}
 catch (RetryException e) {
return showCompact(rqst);
}
}
