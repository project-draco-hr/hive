{
  try {
    Connection dbConn=null;
    ShowLocksResponse rsp=new ShowLocksResponse();
    List<ShowLocksResponseElement> elems=new ArrayList<ShowLocksResponseElement>();
    List<LockInfoExt> sortedList=new ArrayList<LockInfoExt>();
    Statement stmt=null;
    try {
      dbConn=getDbConn(Connection.TRANSACTION_READ_COMMITTED);
      stmt=dbConn.createStatement();
      String s="select hl_lock_ext_id, hl_txnid, hl_db, hl_table, hl_partition, hl_lock_state, " + "hl_lock_type, hl_last_heartbeat, hl_acquired_at, hl_user, hl_host, hl_lock_int_id," + "hl_blockedby_ext_id, hl_blockedby_int_id from HIVE_LOCKS";
      LOG.debug("Doing to execute query <" + s + ">");
      ResultSet rs=stmt.executeQuery(s);
      while (rs.next()) {
        ShowLocksResponseElement e=new ShowLocksResponseElement();
        e.setLockid(rs.getLong(1));
        long txnid=rs.getLong(2);
        if (!rs.wasNull())         e.setTxnid(txnid);
        e.setDbname(rs.getString(3));
        e.setTablename(rs.getString(4));
        String partition=rs.getString(5);
        if (partition != null)         e.setPartname(partition);
switch (rs.getString(6).charAt(0)) {
case LOCK_ACQUIRED:
          e.setState(LockState.ACQUIRED);
        break;
case LOCK_WAITING:
      e.setState(LockState.WAITING);
    break;
default :
  throw new MetaException("Unknown lock state " + rs.getString(6).charAt(0));
}
switch (rs.getString(7).charAt(0)) {
case LOCK_SEMI_SHARED:
e.setType(LockType.SHARED_WRITE);
break;
case LOCK_EXCLUSIVE:
e.setType(LockType.EXCLUSIVE);
break;
case LOCK_SHARED:
e.setType(LockType.SHARED_READ);
break;
default :
throw new MetaException("Unknown lock type " + rs.getString(6).charAt(0));
}
e.setLastheartbeat(rs.getLong(8));
long acquiredAt=rs.getLong(9);
if (!rs.wasNull()) e.setAcquiredat(acquiredAt);
e.setUser(rs.getString(10));
e.setHostname(rs.getString(11));
e.setLockIdInternal(rs.getLong(12));
long id=rs.getLong(13);
if (!rs.wasNull()) {
e.setBlockedByExtId(id);
}
id=rs.getLong(14);
if (!rs.wasNull()) {
e.setBlockedByIntId(id);
}
sortedList.add(new LockInfoExt(e));
}
LOG.debug("Going to rollback");
dbConn.rollback();
}
 catch (SQLException e) {
checkRetryable(dbConn,e,"showLocks(" + rqst + ")");
throw new MetaException("Unable to select from transaction database " + StringUtils.stringifyException(e));
}
 finally {
closeStmt(stmt);
closeDbConn(dbConn);
}
Collections.sort(sortedList,new LockInfoComparator());
for (LockInfoExt lockInfoExt : sortedList) {
elems.add(lockInfoExt.e);
}
rsp.setLocks(elems);
return rsp;
}
 catch (RetryException e) {
return showLocks(rqst);
}
}
