{
  Connection dbConn=null;
  Statement stmt=null;
  ResultSet lockHandle=null;
  ResultSet rs=null;
  try {
    try {
      lockInternal();
      dbConn=getDbConn(Connection.TRANSACTION_READ_COMMITTED);
      stmt=dbConn.createStatement();
      lockHandle=lockTransactionRecord(stmt,rqst.getTxnid(),TXN_OPEN);
      if (lockHandle == null) {
        ensureValidTxn(dbConn,rqst.getTxnid(),stmt);
        shouldNeverHappen(rqst.getTxnid());
      }
      String findOperationType=" tc_operation_type from TXN_COMPONENTS where tc_txnid=" + rqst.getTxnid() + " and tc_database="+ quoteString(rqst.getDbname())+ " and tc_table="+ quoteString(rqst.getTablename());
      rs=stmt.executeQuery(addLimitClause(1,findOperationType));
      if (!rs.next()) {
        throw new IllegalStateException("Unable to determine tc_operation_type for " + JavaUtils.txnIdToString(rqst.getTxnid()));
      }
      OpertaionType ot=OpertaionType.fromString(rs.getString(1).charAt(0));
      String deleteSql="delete from TXN_COMPONENTS where tc_txnid=" + rqst.getTxnid() + " and tc_database="+ quoteString(rqst.getDbname())+ " and tc_table="+ quoteString(rqst.getTablename());
      stmt.executeUpdate(deleteSql);
      for (      String partName : rqst.getPartitionnames()) {
        String s="insert into TXN_COMPONENTS (tc_txnid, tc_database, tc_table, tc_partition, tc_operation_type) values (" + rqst.getTxnid() + ","+ quoteString(rqst.getDbname())+ ","+ quoteString(rqst.getTablename())+ ","+ quoteString(partName)+ ","+ quoteChar(ot.sqlConst)+ ")";
        LOG.debug("Going to execute update <" + s + ">");
        stmt.executeUpdate(s);
      }
      LOG.debug("Going to commit");
      dbConn.commit();
    }
 catch (    SQLException e) {
      LOG.debug("Going to rollback");
      rollbackDBConn(dbConn);
      checkRetryable(dbConn,e,"addDynamicPartitions(" + rqst + ")");
      throw new MetaException("Unable to insert into from transaction database " + StringUtils.stringifyException(e));
    }
 finally {
      close(lockHandle,stmt,dbConn);
      unlockInternal();
    }
  }
 catch (  RetryException e) {
    addDynamicPartitions(rqst);
  }
}
