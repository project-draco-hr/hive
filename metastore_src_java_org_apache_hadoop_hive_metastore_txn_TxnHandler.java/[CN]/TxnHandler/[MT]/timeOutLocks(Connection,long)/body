{
  Statement stmt=null;
  ResultSet rs=null;
  try {
    stmt=dbConn.createStatement();
    long maxHeartbeatTime=now - timeout;
    String s="select distinct hl_lock_ext_id from HIVE_LOCKS where hl_last_heartbeat < " + maxHeartbeatTime + " and hl_txnid = 0";
    List<Long> extLockIDs=new ArrayList<>();
    rs=stmt.executeQuery(s);
    while (rs.next()) {
      extLockIDs.add(rs.getLong(1));
    }
    rs.close();
    dbConn.commit();
    if (extLockIDs.size() <= 0) {
      return;
    }
    int deletedLocks=0;
    s="delete from HIVE_LOCKS where hl_last_heartbeat < " + maxHeartbeatTime + " and hl_txnid = 0"+ " and hl_lock_ext_id IN (";
    int numWholeBatches=extLockIDs.size() / TIMED_OUT_TXN_ABORT_BATCH_SIZE;
    for (int i=0; i < numWholeBatches; i++) {
      StringBuilder sb=new StringBuilder(s);
      for (int j=i * TIMED_OUT_TXN_ABORT_BATCH_SIZE; j < (i + 1) * TIMED_OUT_TXN_ABORT_BATCH_SIZE; j++) {
        sb.append(extLockIDs.get(j)).append(",");
      }
      sb.setCharAt(sb.length() - 1,')');
      LOG.debug("Removing expired locks via: " + sb.toString());
      deletedLocks+=stmt.executeUpdate(sb.toString());
      dbConn.commit();
    }
    StringBuilder sb=new StringBuilder(s);
    for (int i=numWholeBatches * TIMED_OUT_TXN_ABORT_BATCH_SIZE; i < extLockIDs.size(); i++) {
      sb.append(extLockIDs.get(i)).append(",");
    }
    sb.setCharAt(sb.length() - 1,')');
    LOG.debug("Removing expired locks via: " + sb.toString());
    deletedLocks+=stmt.executeUpdate(sb.toString());
    if (deletedLocks > 0) {
      LOG.info("Deleted " + deletedLocks + " ext locks from HIVE_LOCKS due to timeout (vs. "+ extLockIDs.size()+ " found. List: "+ extLockIDs+ ") maxHeartbeatTime="+ maxHeartbeatTime);
    }
    LOG.debug("Going to commit");
    dbConn.commit();
  }
 catch (  SQLException ex) {
    LOG.error("Failed to purge timedout locks due to: " + getMessage(ex),ex);
  }
catch (  Exception ex) {
    LOG.error("Failed to purge timedout locks due to: " + ex.getMessage(),ex);
  }
 finally {
    close(rs);
    closeStmt(stmt);
  }
}
