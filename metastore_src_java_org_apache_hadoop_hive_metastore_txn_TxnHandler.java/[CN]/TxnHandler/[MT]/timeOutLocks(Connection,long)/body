{
  Statement stmt=null;
  ResultSet rs=null;
  try {
    stmt=dbConn.createStatement();
    long maxHeartbeatTime=now - timeout;
    String s="select distinct hl_lock_ext_id from HIVE_LOCKS where hl_last_heartbeat < " + maxHeartbeatTime + " and hl_txnid = 0";
    List<Long> extLockIDs=new ArrayList<>();
    rs=stmt.executeQuery(s);
    while (rs.next()) {
      extLockIDs.add(rs.getLong(1));
    }
    rs.close();
    dbConn.commit();
    if (extLockIDs.size() <= 0) {
      return;
    }
    List<String> queries=new ArrayList<String>();
    StringBuilder prefix=new StringBuilder();
    StringBuilder suffix=new StringBuilder();
    prefix.append("delete from HIVE_LOCKS where hl_last_heartbeat < ");
    prefix.append(maxHeartbeatTime);
    prefix.append(" and hl_txnid = 0 and ");
    suffix.append("");
    TxnUtils.buildQueryWithINClause(conf,queries,prefix,suffix,extLockIDs,"hl_lock_ext_id",true,false);
    int deletedLocks=0;
    for (    String query : queries) {
      LOG.debug("Removing expired locks via: " + query);
      deletedLocks+=stmt.executeUpdate(query);
    }
    if (deletedLocks > 0) {
      LOG.info("Deleted " + deletedLocks + " ext locks from HIVE_LOCKS due to timeout (vs. "+ extLockIDs.size()+ " found. List: "+ extLockIDs+ ") maxHeartbeatTime="+ maxHeartbeatTime);
    }
    LOG.debug("Going to commit");
    dbConn.commit();
  }
 catch (  SQLException ex) {
    LOG.error("Failed to purge timedout locks due to: " + getMessage(ex),ex);
  }
catch (  Exception ex) {
    LOG.error("Failed to purge timedout locks due to: " + ex.getMessage(),ex);
  }
 finally {
    close(rs);
    closeStmt(stmt);
  }
}
