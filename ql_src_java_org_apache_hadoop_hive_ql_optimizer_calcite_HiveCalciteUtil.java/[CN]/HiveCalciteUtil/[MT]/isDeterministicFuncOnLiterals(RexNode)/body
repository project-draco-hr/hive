{
  boolean deterministicFuncOnLiterals=true;
  RexVisitor<Void> visitor=new RexVisitorImpl<Void>(true){
    @Override public Void visitCall(    org.apache.calcite.rex.RexCall call){
      if (!call.getOperator().isDeterministic()) {
        throw new Util.FoundOne(call);
      }
      return super.visitCall(call);
    }
    @Override public Void visitInputRef(    RexInputRef inputRef){
      throw new Util.FoundOne(inputRef);
    }
    @Override public Void visitLocalRef(    RexLocalRef localRef){
      throw new Util.FoundOne(localRef);
    }
    @Override public Void visitOver(    RexOver over){
      throw new Util.FoundOne(over);
    }
    @Override public Void visitDynamicParam(    RexDynamicParam dynamicParam){
      throw new Util.FoundOne(dynamicParam);
    }
    @Override public Void visitRangeRef(    RexRangeRef rangeRef){
      throw new Util.FoundOne(rangeRef);
    }
    @Override public Void visitFieldAccess(    RexFieldAccess fieldAccess){
      throw new Util.FoundOne(fieldAccess);
    }
  }
;
  try {
    expr.accept(visitor);
  }
 catch (  Util.FoundOne e) {
    deterministicFuncOnLiterals=false;
  }
  return deterministicFuncOnLiterals;
}
