{
  JoinLeafPredicateInfo jlpi=null;
  List<Integer> filterNulls=new ArrayList<Integer>();
  List<RexNode> joinKeyExprsFromLeft=new ArrayList<RexNode>();
  List<RexNode> joinKeyExprsFromRight=new ArrayList<RexNode>();
  Set<Integer> projsFromLeftPartOfJoinKeysInChildSchema=new HashSet<Integer>();
  Set<Integer> projsFromRightPartOfJoinKeysInChildSchema=new HashSet<Integer>();
  Set<Integer> projsFromRightPartOfJoinKeysInJoinSchema=new HashSet<Integer>();
  int rightOffSet=j.getLeft().getRowType().getFieldCount();
  RelOptUtil.splitJoinCondition(j.getSystemFieldList(),j.getLeft(),j.getRight(),pe,joinKeyExprsFromLeft,joinKeyExprsFromRight,filterNulls,null);
  InputReferencedVisitor irvLeft=new InputReferencedVisitor();
  irvLeft.apply(joinKeyExprsFromLeft);
  projsFromLeftPartOfJoinKeysInChildSchema.addAll(irvLeft.inputPosReferenced);
  InputReferencedVisitor irvRight=new InputReferencedVisitor();
  irvRight.apply(joinKeyExprsFromRight);
  projsFromRightPartOfJoinKeysInChildSchema.addAll(irvRight.inputPosReferenced);
  for (  Integer indx : projsFromRightPartOfJoinKeysInChildSchema) {
    projsFromRightPartOfJoinKeysInJoinSchema.add(indx + rightOffSet);
  }
  jlpi=new JoinLeafPredicateInfo(pe.getKind(),joinKeyExprsFromLeft,joinKeyExprsFromRight,projsFromLeftPartOfJoinKeysInChildSchema,projsFromRightPartOfJoinKeysInChildSchema,projsFromRightPartOfJoinKeysInJoinSchema);
  return jlpi;
}
