{
  Map<Byte,List<ExprNodeDesc>> exprs=conf.getExprs();
  Map<Byte,TableDesc> spillTableDesc=new HashMap<Byte,TableDesc>(exprs.size());
  for (int tag=0; tag < exprs.size(); tag++) {
    List<ExprNodeDesc> valueCols=exprs.get((byte)tag);
    int columnSize=valueCols.size();
    StringBuilder colNames=new StringBuilder();
    StringBuilder colTypes=new StringBuilder();
    if (columnSize <= 0) {
      continue;
    }
    for (int k=0; k < columnSize; k++) {
      String newColName=tag + "_VALUE_" + k;
      colNames.append(newColName);
      colNames.append(',');
      colTypes.append(valueCols.get(k).getTypeString());
      colTypes.append(',');
    }
    if (!noFilter) {
      colNames.append("filtered");
      colNames.append(',');
      colTypes.append(TypeInfoFactory.byteTypeInfo.getTypeName());
      colTypes.append(',');
    }
    colNames.setLength(colNames.length() - 1);
    colTypes.setLength(colTypes.length() - 1);
    TableDesc tblDesc=new TableDesc(LazyBinarySerDe.class,SequenceFileInputFormat.class,HiveSequenceFileOutputFormat.class,Utilities.makeProperties(org.apache.hadoop.hive.serde.serdeConstants.SERIALIZATION_FORMAT,"" + Utilities.ctrlaCode,org.apache.hadoop.hive.serde.serdeConstants.LIST_COLUMNS,colNames.toString(),org.apache.hadoop.hive.serde.serdeConstants.LIST_COLUMN_TYPES,colTypes.toString()));
    spillTableDesc.put((byte)tag,tblDesc);
  }
  return spillTableDesc;
}
