{
  int size=keyFields.size();
  if (size == 1) {
    Object obj=(ObjectInspectorUtils.copyToStandardObject(keyFields.get(0).evaluate(row),keyFieldsOI.get(0),ObjectInspectorCopyOption.WRITABLE));
    MapJoinSingleKey key=new MapJoinSingleKey(obj);
    return key;
  }
 else   if (size == 2) {
    Object obj1=(ObjectInspectorUtils.copyToStandardObject(keyFields.get(0).evaluate(row),keyFieldsOI.get(0),ObjectInspectorCopyOption.WRITABLE));
    Object obj2=(ObjectInspectorUtils.copyToStandardObject(keyFields.get(1).evaluate(row),keyFieldsOI.get(1),ObjectInspectorCopyOption.WRITABLE));
    MapJoinDoubleKeys key=new MapJoinDoubleKeys(obj1,obj2);
    return key;
  }
 else {
    Object[] nr=new Object[keyFields.size()];
    for (int i=0; i < keyFields.size(); i++) {
      nr[i]=(ObjectInspectorUtils.copyToStandardObject(keyFields.get(i).evaluate(row),keyFieldsOI.get(i),ObjectInspectorCopyOption.WRITABLE));
    }
    MapJoinObjectKey key=new MapJoinObjectKey(nr);
    return key;
  }
}
