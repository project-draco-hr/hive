{
  HCatContext.INSTANCE.setConf(job.getConfiguration()).getConf().get().setBoolean(HCatConstants.HCAT_DATA_TINY_SMALL_INT_PROMOTION,true);
  UDFContext udfContext=UDFContext.getUDFContext();
  Properties udfProps=udfContext.getUDFProperties(this.getClass(),new String[]{signature});
  job.getConfiguration().set(INNER_SIGNATURE,INNER_SIGNATURE_PREFIX + "_" + signature);
  Pair<String,String> dbTablePair=PigHCatUtil.getDBTableNames(location);
  dbName=dbTablePair.first;
  tableName=dbTablePair.second;
  RequiredFieldList requiredFieldsInfo=(RequiredFieldList)udfProps.get(PRUNE_PROJECTION_INFO);
  if (udfProps.containsKey(HCatConstants.HCAT_PIG_LOADER_LOCATION_SET)) {
    for (Enumeration<Object> emr=udfProps.keys(); emr.hasMoreElements(); ) {
      PigHCatUtil.getConfigFromUDFProperties(udfProps,job.getConfiguration(),emr.nextElement().toString());
    }
    if (!HCatUtil.checkJobContextIfRunningFromBackend(job)) {
      Credentials crd=jobCredentials.get(INNER_SIGNATURE_PREFIX + "_" + signature);
      job.getCredentials().addAll(crd);
    }
  }
 else {
    Job clone=new Job(job.getConfiguration());
    HCatInputFormat.setInput(job,dbName,tableName,getPartitionFilterString());
    InputJobInfo inputJobInfo=(InputJobInfo)HCatUtil.deserialize(job.getConfiguration().get(HCatConstants.HCAT_KEY_JOB_INFO));
    SpecialCases.addSpecialCasesParametersForHCatLoader(job.getConfiguration(),inputJobInfo.getTableInfo());
    for (    Entry<String,String> keyValue : job.getConfiguration()) {
      String oldValue=clone.getConfiguration().getRaw(keyValue.getKey());
      if ((oldValue == null) || (keyValue.getValue().equals(oldValue) == false)) {
        udfProps.put(keyValue.getKey(),keyValue.getValue());
      }
    }
    udfProps.put(HCatConstants.HCAT_PIG_LOADER_LOCATION_SET,true);
    Credentials crd=new Credentials();
    crd.addAll(job.getCredentials());
    jobCredentials.put(INNER_SIGNATURE_PREFIX + "_" + signature,crd);
  }
  if (requiredFieldsInfo != null) {
    try {
      ArrayList<Integer> list=new ArrayList<Integer>(requiredFieldsInfo.getFields().size());
      for (      RequiredField rf : requiredFieldsInfo.getFields()) {
        list.add(rf.getIndex());
      }
      ColumnProjectionUtils.setReadColumns(job.getConfiguration(),list);
      outputSchema=phutil.getHCatSchema(requiredFieldsInfo.getFields(),signature,this.getClass());
      HCatInputFormat.setOutputSchema(job,outputSchema);
    }
 catch (    Exception e) {
      throw new IOException(e);
    }
  }
 else {
    ColumnProjectionUtils.setReadAllColumns(job.getConfiguration());
    if (HCatUtil.checkJobContextIfRunningFromBackend(job)) {
      try {
        HCatSchema hcatTableSchema=(HCatSchema)udfProps.get(HCatConstants.HCAT_TABLE_SCHEMA);
        outputSchema=hcatTableSchema;
        HCatInputFormat.setOutputSchema(job,outputSchema);
      }
 catch (      Exception e) {
        throw new IOException(e);
      }
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("outputSchema=" + outputSchema);
  }
}
