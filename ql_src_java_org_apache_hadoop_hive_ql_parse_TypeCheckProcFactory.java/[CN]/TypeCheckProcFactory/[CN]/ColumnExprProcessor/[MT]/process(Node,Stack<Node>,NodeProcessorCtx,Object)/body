{
  TypeCheckCtx ctx=(TypeCheckCtx)procCtx;
  if (ctx.getError() != null) {
    return null;
  }
  ExprNodeDesc desc=TypeCheckProcFactory.processGByExpr(nd,procCtx);
  if (desc != null) {
    return desc;
  }
  ASTNode expr=(ASTNode)nd;
  ASTNode parent=stack.size() > 1 ? (ASTNode)stack.get(stack.size() - 2) : null;
  RowResolver input=ctx.getInputRR();
  if (expr.getType() != HiveParser.TOK_TABLE_OR_COL) {
    ctx.setError(ErrorMsg.INVALID_COLUMN.getMsg(expr),expr);
    return null;
  }
  assert(expr.getChildCount() == 1);
  String tableOrCol=BaseSemanticAnalyzer.unescapeIdentifier(expr.getChild(0).getText());
  boolean isTableAlias=input.hasTableAlias(tableOrCol);
  ColumnInfo colInfo=input.get(null,tableOrCol);
  if (isTableAlias) {
    if (colInfo != null) {
      if (parent != null && parent.getType() == HiveParser.DOT) {
        return null;
      }
      return new ExprNodeColumnDesc(colInfo.getType(),colInfo.getInternalName(),colInfo.getTabAlias(),colInfo.getIsVirtualCol());
    }
 else {
      return null;
    }
  }
 else {
    if (colInfo == null) {
      if (input.getIsExprResolver()) {
        ASTNode exprNode=expr;
        if (!stack.empty()) {
          ASTNode tmp=(ASTNode)stack.pop();
          if (!stack.empty()) {
            exprNode=(ASTNode)stack.peek();
          }
          stack.push(tmp);
        }
        ctx.setError(ErrorMsg.NON_KEY_EXPR_IN_GROUPBY.getMsg(exprNode),expr);
        return null;
      }
 else {
        List<String> possibleColumnNames=input.getReferenceableColumnAliases(tableOrCol,-1);
        String reason=String.format("(possible column names are: %s)",StringUtils.join(possibleColumnNames,", "));
        ctx.setError(ErrorMsg.INVALID_TABLE_OR_COLUMN.getMsg(expr.getChild(0),reason),expr);
        LOG.debug(ErrorMsg.INVALID_TABLE_OR_COLUMN.toString() + ":" + input.toString());
        return null;
      }
    }
 else {
      return new ExprNodeColumnDesc(colInfo.getType(),colInfo.getInternalName(),colInfo.getTabAlias(),colInfo.getIsVirtualCol());
    }
  }
}
