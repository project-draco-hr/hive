{
  TypeCheckCtx ctx=(TypeCheckCtx)procCtx;
  if (ctx.getError() != null) {
    return null;
  }
  ExprNodeDesc desc=TypeCheckProcFactory.processGByExpr(nd,procCtx);
  if (desc != null) {
    return desc;
  }
  Number v=null;
  ASTNode expr=(ASTNode)nd;
  try {
    if (expr.getText().endsWith("L")) {
      v=Long.valueOf(expr.getText().substring(0,expr.getText().length() - 1));
    }
 else     if (expr.getText().endsWith("S")) {
      v=Short.valueOf(expr.getText().substring(0,expr.getText().length() - 1));
    }
 else     if (expr.getText().endsWith("Y")) {
      v=Byte.valueOf(expr.getText().substring(0,expr.getText().length() - 1));
    }
 else     if (expr.getText().endsWith("BD")) {
      return new ExprNodeConstantDesc(TypeInfoFactory.decimalTypeInfo,expr.getText().substring(0,expr.getText().length() - 2));
    }
 else {
      v=Double.valueOf(expr.getText());
      v=Long.valueOf(expr.getText());
      v=Integer.valueOf(expr.getText());
    }
  }
 catch (  NumberFormatException e) {
  }
  if (v == null) {
    throw new SemanticException(ErrorMsg.INVALID_NUMERICAL_CONSTANT.getMsg(expr));
  }
  return new ExprNodeConstantDesc(v);
}
