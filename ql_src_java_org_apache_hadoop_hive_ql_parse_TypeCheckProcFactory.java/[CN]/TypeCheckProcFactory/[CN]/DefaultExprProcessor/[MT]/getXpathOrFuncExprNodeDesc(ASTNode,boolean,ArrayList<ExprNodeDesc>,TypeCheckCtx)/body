{
  if (isRedundantConversionFunction(expr,isFunction,children)) {
    assert(children.size() == 1);
    assert(children.get(0) != null);
    return children.get(0);
  }
  String funcText=getFunctionText(expr,isFunction);
  ExprNodeDesc desc;
  if (funcText.equals(".")) {
    assert(children.size() == 2);
    assert(children.get(1) instanceof ExprNodeConstantDesc);
    ExprNodeDesc object=children.get(0);
    ExprNodeConstantDesc fieldName=(ExprNodeConstantDesc)children.get(1);
    assert(fieldName.getValue() instanceof String);
    String fieldNameString=(String)fieldName.getValue();
    TypeInfo objectTypeInfo=object.getTypeInfo();
    boolean isList=(object.getTypeInfo().getCategory() == ObjectInspector.Category.LIST);
    if (isList) {
      objectTypeInfo=((ListTypeInfo)objectTypeInfo).getListElementTypeInfo();
    }
    if (objectTypeInfo.getCategory() != Category.STRUCT) {
      throw new SemanticException(ErrorMsg.INVALID_DOT.getMsg(expr));
    }
    TypeInfo t=((StructTypeInfo)objectTypeInfo).getStructFieldTypeInfo(fieldNameString);
    if (isList) {
      t=TypeInfoFactory.getListTypeInfo(t);
    }
    desc=new ExprNodeFieldDesc(t,children.get(0),fieldNameString,isList);
  }
 else   if (funcText.equals("[")) {
    if (!ctx.getallowIndexExpr())     throw new SemanticException(ErrorMsg.INVALID_FUNCTION.getMsg(expr));
    assert(children.size() == 2);
    TypeInfo myt=children.get(0).getTypeInfo();
    if (myt.getCategory() == Category.LIST) {
      if (!TypeInfoUtils.implicitConvertible(children.get(1).getTypeInfo(),TypeInfoFactory.intTypeInfo)) {
        throw new SemanticException(SemanticAnalyzer.generateErrorMessage(expr,ErrorMsg.INVALID_ARRAYINDEX_TYPE.getMsg()));
      }
      TypeInfo t=((ListTypeInfo)myt).getListElementTypeInfo();
      desc=new ExprNodeGenericFuncDesc(t,FunctionRegistry.getGenericUDFForIndex(),children);
    }
 else     if (myt.getCategory() == Category.MAP) {
      if (!TypeInfoUtils.implicitConvertible(children.get(1).getTypeInfo(),((MapTypeInfo)myt).getMapKeyTypeInfo())) {
        throw new SemanticException(ErrorMsg.INVALID_MAPINDEX_TYPE.getMsg(expr));
      }
      TypeInfo t=((MapTypeInfo)myt).getMapValueTypeInfo();
      desc=new ExprNodeGenericFuncDesc(t,FunctionRegistry.getGenericUDFForIndex(),children);
    }
 else {
      throw new SemanticException(ErrorMsg.NON_COLLECTION_TYPE.getMsg(expr,myt.getTypeName()));
    }
  }
 else {
    FunctionInfo fi=FunctionRegistry.getFunctionInfo(funcText);
    if (fi == null) {
      if (isFunction) {
        throw new SemanticException(ErrorMsg.INVALID_FUNCTION.getMsg((ASTNode)expr.getChild(0)));
      }
 else {
        throw new SemanticException(ErrorMsg.INVALID_FUNCTION.getMsg(expr));
      }
    }
    GenericUDF genericUDF=fi.getGenericUDF();
    if (!fi.isNative()) {
      ctx.getUnparseTranslator().addIdentifierTranslation((ASTNode)expr.getChild(0));
    }
    if (isFunction) {
      ASTNode funcNameNode=(ASTNode)expr.getChild(0);
switch (funcNameNode.getType()) {
case HiveParser.TOK_CHAR:
        CharTypeInfo charTypeInfo=ParseUtils.getCharTypeInfo(funcNameNode);
      if (genericUDF != null) {
        ((SettableUDF)genericUDF).setTypeInfo(charTypeInfo);
      }
    break;
case HiveParser.TOK_VARCHAR:
  VarcharTypeInfo varcharTypeInfo=ParseUtils.getVarcharTypeInfo(funcNameNode);
if (genericUDF != null) {
  ((SettableUDF)genericUDF).setTypeInfo(varcharTypeInfo);
}
break;
case HiveParser.TOK_DECIMAL:
DecimalTypeInfo decTypeInfo=ParseUtils.getDecimalTypeTypeInfo(funcNameNode);
if (genericUDF != null) {
((SettableUDF)genericUDF).setTypeInfo(decTypeInfo);
}
break;
default :
break;
}
}
validateUDF(expr,isFunction,ctx,fi,children,genericUDF);
if (genericUDF instanceof GenericUDFBaseCompare && children.size() == 2 && ((children.get(0) instanceof ExprNodeConstantDesc && children.get(1) instanceof ExprNodeColumnDesc) || (children.get(0) instanceof ExprNodeColumnDesc && children.get(1) instanceof ExprNodeConstantDesc))) {
int constIdx=children.get(0) instanceof ExprNodeConstantDesc ? 0 : 1;
Set<String> inferTypes=new HashSet<String>(Arrays.asList(serdeConstants.TINYINT_TYPE_NAME.toLowerCase(),serdeConstants.SMALLINT_TYPE_NAME.toLowerCase(),serdeConstants.INT_TYPE_NAME.toLowerCase(),serdeConstants.BIGINT_TYPE_NAME.toLowerCase(),serdeConstants.FLOAT_TYPE_NAME.toLowerCase(),serdeConstants.DOUBLE_TYPE_NAME.toLowerCase(),serdeConstants.STRING_TYPE_NAME.toLowerCase()));
String constType=children.get(constIdx).getTypeString().toLowerCase();
String columnType=children.get(1 - constIdx).getTypeString().toLowerCase();
if (inferTypes.contains(constType) && inferTypes.contains(columnType) && !columnType.equalsIgnoreCase(constType)) {
Object originalValue=((ExprNodeConstantDesc)children.get(constIdx)).getValue();
String constValue=originalValue.toString();
boolean triedDouble=false;
Number value=null;
try {
if (columnType.equalsIgnoreCase(serdeConstants.TINYINT_TYPE_NAME)) {
value=new Byte(constValue);
}
 else if (columnType.equalsIgnoreCase(serdeConstants.SMALLINT_TYPE_NAME)) {
value=new Short(constValue);
}
 else if (columnType.equalsIgnoreCase(serdeConstants.INT_TYPE_NAME)) {
value=new Integer(constValue);
}
 else if (columnType.equalsIgnoreCase(serdeConstants.BIGINT_TYPE_NAME)) {
value=new Long(constValue);
}
 else if (columnType.equalsIgnoreCase(serdeConstants.FLOAT_TYPE_NAME)) {
value=new Float(constValue);
}
 else if (columnType.equalsIgnoreCase(serdeConstants.DOUBLE_TYPE_NAME)) {
triedDouble=true;
value=new Double(constValue);
}
 else if (columnType.equalsIgnoreCase(serdeConstants.STRING_TYPE_NAME)) {
boolean isNumber=(originalValue instanceof Number);
triedDouble=!isNumber;
value=isNumber ? (Number)originalValue : new Double(constValue);
}
}
 catch (NumberFormatException nfe) {
if (triedDouble && (genericUDF instanceof GenericUDFOPEqual && !columnType.equals(serdeConstants.STRING_TYPE_NAME))) {
return new ExprNodeConstantDesc(false);
}
try {
value=new Double(constValue);
}
 catch (NumberFormatException ex) {
return new ExprNodeConstantDesc(false);
}
}
if (value != null) {
children.set(constIdx,new ExprNodeConstantDesc(value));
}
}
final PrimitiveTypeInfo colTypeInfo=TypeInfoFactory.getPrimitiveTypeInfo(columnType);
if (constType.equalsIgnoreCase(serdeConstants.STRING_TYPE_NAME) && colTypeInfo instanceof CharTypeInfo) {
final Object originalValue=((ExprNodeConstantDesc)children.get(constIdx)).getValue();
final String constValue=originalValue.toString();
final int length=TypeInfoUtils.getCharacterLengthForType(colTypeInfo);
final HiveChar newValue=new HiveChar(constValue,length);
children.set(constIdx,new ExprNodeConstantDesc(colTypeInfo,newValue));
}
}
if (genericUDF instanceof GenericUDFOPOr) {
List<ExprNodeDesc> childrenList=new ArrayList<ExprNodeDesc>(children.size());
for (ExprNodeDesc child : children) {
if (FunctionRegistry.isOpOr(child)) {
childrenList.addAll(child.getChildren());
}
 else {
childrenList.add(child);
}
}
desc=ExprNodeGenericFuncDesc.newInstance(genericUDF,funcText,childrenList);
}
 else if (genericUDF instanceof GenericUDFOPAnd) {
List<ExprNodeDesc> childrenList=new ArrayList<ExprNodeDesc>(children.size());
for (ExprNodeDesc child : children) {
if (FunctionRegistry.isOpAnd(child)) {
childrenList.addAll(child.getChildren());
}
 else {
childrenList.add(child);
}
}
desc=ExprNodeGenericFuncDesc.newInstance(genericUDF,funcText,childrenList);
}
 else {
desc=ExprNodeGenericFuncDesc.newInstance(genericUDF,funcText,children);
}
}
if (FunctionRegistry.isOpPositive(desc)) {
assert(desc.getChildren().size() == 1);
desc=desc.getChildren().get(0);
}
assert(desc != null);
return desc;
}
