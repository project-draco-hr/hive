{
  if (isRedundantConversionFunction(expr,isFunction,children)) {
    assert(children.size() == 1);
    assert(children.get(0) != null);
    return children.get(0);
  }
  String funcText=getFunctionText(expr,isFunction);
  ExprNodeDesc desc;
  if (funcText.equals(".")) {
    assert(children.size() == 2);
    assert(children.get(1) instanceof ExprNodeConstantDesc);
    ExprNodeDesc object=children.get(0);
    ExprNodeConstantDesc fieldName=(ExprNodeConstantDesc)children.get(1);
    assert(fieldName.getValue() instanceof String);
    String fieldNameString=(String)fieldName.getValue();
    TypeInfo objectTypeInfo=object.getTypeInfo();
    boolean isList=(object.getTypeInfo().getCategory() == ObjectInspector.Category.LIST);
    if (isList) {
      objectTypeInfo=((ListTypeInfo)objectTypeInfo).getListElementTypeInfo();
    }
    if (objectTypeInfo.getCategory() != Category.STRUCT) {
      throw new SemanticException(ErrorMsg.INVALID_DOT.getMsg(expr));
    }
    TypeInfo t=((StructTypeInfo)objectTypeInfo).getStructFieldTypeInfo(fieldNameString);
    if (isList) {
      t=TypeInfoFactory.getListTypeInfo(t);
    }
    desc=new ExprNodeFieldDesc(t,children.get(0),fieldNameString,isList);
  }
 else   if (funcText.equals("[")) {
    assert(children.size() == 2);
    TypeInfo myt=children.get(0).getTypeInfo();
    if (myt.getCategory() == Category.LIST) {
      if (!(children.get(1) instanceof ExprNodeConstantDesc) || !(((ExprNodeConstantDesc)children.get(1)).getTypeInfo().equals(TypeInfoFactory.intTypeInfo))) {
        throw new SemanticException(SemanticAnalyzer.generateErrorMessage(expr,ErrorMsg.INVALID_ARRAYINDEX_CONSTANT.getMsg()));
      }
      TypeInfo t=((ListTypeInfo)myt).getListElementTypeInfo();
      desc=new ExprNodeGenericFuncDesc(t,FunctionRegistry.getGenericUDFForIndex(),funcText,children);
    }
 else     if (myt.getCategory() == Category.MAP) {
      if (!(children.get(1) instanceof ExprNodeConstantDesc)) {
        throw new SemanticException(SemanticAnalyzer.generateErrorMessage(expr,ErrorMsg.INVALID_MAPINDEX_CONSTANT.getMsg()));
      }
      if (!(((ExprNodeConstantDesc)children.get(1)).getTypeInfo().equals(((MapTypeInfo)myt).getMapKeyTypeInfo()))) {
        throw new SemanticException(ErrorMsg.INVALID_MAPINDEX_TYPE.getMsg(expr));
      }
      TypeInfo t=((MapTypeInfo)myt).getMapValueTypeInfo();
      desc=new ExprNodeGenericFuncDesc(t,FunctionRegistry.getGenericUDFForIndex(),funcText,children);
    }
 else {
      throw new SemanticException(ErrorMsg.NON_COLLECTION_TYPE.getMsg(expr,myt.getTypeName()));
    }
  }
 else {
    FunctionInfo fi=FunctionRegistry.getFunctionInfo(funcText);
    if (fi == null) {
      if (isFunction) {
        throw new SemanticException(ErrorMsg.INVALID_FUNCTION.getMsg((ASTNode)expr.getChild(0)));
      }
 else {
        throw new SemanticException(ErrorMsg.INVALID_FUNCTION.getMsg(expr));
      }
    }
    if (!fi.isNative()) {
      ctx.getUnparseTranslator().addIdentifierTranslation((ASTNode)expr.getChild(0));
    }
    if (fi.getGenericUDTF() != null) {
      throw new SemanticException(ErrorMsg.UDTF_INVALID_LOCATION.getMsg());
    }
    if (fi.getGenericUDAFResolver() != null) {
      if (isFunction) {
        throw new SemanticException(ErrorMsg.UDAF_INVALID_LOCATION.getMsg((ASTNode)expr.getChild(0)));
      }
 else {
        throw new SemanticException(ErrorMsg.UDAF_INVALID_LOCATION.getMsg(expr));
      }
    }
    if (!ctx.getAllowStatefulFunctions() && (fi.getGenericUDF() != null)) {
      if (FunctionRegistry.isStateful(fi.getGenericUDF())) {
        throw new SemanticException(ErrorMsg.UDF_STATEFUL_INVALID_LOCATION.getMsg());
      }
    }
    if (fi.getGenericUDF() instanceof GenericUDFBaseCompare && children.size() == 2 && ((children.get(0) instanceof ExprNodeConstantDesc && children.get(1) instanceof ExprNodeColumnDesc) || (children.get(0) instanceof ExprNodeColumnDesc && children.get(1) instanceof ExprNodeConstantDesc))) {
      int constIdx=children.get(0) instanceof ExprNodeConstantDesc ? 0 : 1;
      Set<String> inferTypes=new HashSet<String>(Arrays.asList(serdeConstants.TINYINT_TYPE_NAME.toLowerCase(),serdeConstants.SMALLINT_TYPE_NAME.toLowerCase(),serdeConstants.INT_TYPE_NAME.toLowerCase(),serdeConstants.BIGINT_TYPE_NAME.toLowerCase(),serdeConstants.FLOAT_TYPE_NAME.toLowerCase(),serdeConstants.DOUBLE_TYPE_NAME.toLowerCase(),serdeConstants.STRING_TYPE_NAME.toLowerCase()));
      String constType=children.get(constIdx).getTypeString().toLowerCase();
      String columnType=children.get(1 - constIdx).getTypeString().toLowerCase();
      if (inferTypes.contains(constType) && inferTypes.contains(columnType) && !columnType.equalsIgnoreCase(constType)) {
        Object originalValue=((ExprNodeConstantDesc)children.get(constIdx)).getValue();
        String constValue=originalValue.toString();
        boolean triedDouble=false;
        Number value=null;
        try {
          if (columnType.equalsIgnoreCase(serdeConstants.TINYINT_TYPE_NAME)) {
            value=new Byte(constValue);
          }
 else           if (columnType.equalsIgnoreCase(serdeConstants.SMALLINT_TYPE_NAME)) {
            value=new Short(constValue);
          }
 else           if (columnType.equalsIgnoreCase(serdeConstants.INT_TYPE_NAME)) {
            value=new Integer(constValue);
          }
 else           if (columnType.equalsIgnoreCase(serdeConstants.BIGINT_TYPE_NAME)) {
            value=new Long(constValue);
          }
 else           if (columnType.equalsIgnoreCase(serdeConstants.FLOAT_TYPE_NAME)) {
            value=new Float(constValue);
          }
 else           if (columnType.equalsIgnoreCase(serdeConstants.DOUBLE_TYPE_NAME)) {
            triedDouble=true;
            value=new Double(constValue);
          }
 else           if (columnType.equalsIgnoreCase(serdeConstants.STRING_TYPE_NAME)) {
            boolean isNumber=(originalValue instanceof Number);
            triedDouble=!isNumber;
            value=isNumber ? (Number)originalValue : new Double(constValue);
          }
        }
 catch (        NumberFormatException nfe) {
          if (triedDouble || (fi.getGenericUDF() instanceof GenericUDFOPEqual && !columnType.equals(serdeConstants.STRING_TYPE_NAME))) {
            return new ExprNodeConstantDesc(false);
          }
          try {
            value=new Double(constValue);
          }
 catch (          NumberFormatException ex) {
            return new ExprNodeConstantDesc(false);
          }
        }
        if (value != null) {
          children.set(constIdx,new ExprNodeConstantDesc(value));
        }
      }
    }
    desc=ExprNodeGenericFuncDesc.newInstance(fi.getGenericUDF(),funcText,children);
  }
  if (FunctionRegistry.isOpPositive(desc)) {
    assert(desc.getChildren().size() == 1);
    desc=desc.getChildren().get(0);
  }
  assert(desc != null);
  return desc;
}
