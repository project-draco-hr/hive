{
  if (isRedundantConversionFunction(expr,isFunction,children)) {
    assert(children.size() == 1);
    assert(children.get(0) != null);
    return children.get(0);
  }
  String funcText=getFunctionText(expr,isFunction);
  ExprNodeDesc desc;
  if (funcText.equals(".")) {
    assert(children.size() == 2);
    assert(children.get(1) instanceof ExprNodeConstantDesc);
    ExprNodeDesc object=children.get(0);
    ExprNodeConstantDesc fieldName=(ExprNodeConstantDesc)children.get(1);
    assert(fieldName.getValue() instanceof String);
    String fieldNameString=(String)fieldName.getValue();
    TypeInfo objectTypeInfo=object.getTypeInfo();
    boolean isList=(object.getTypeInfo().getCategory() == ObjectInspector.Category.LIST);
    if (isList) {
      objectTypeInfo=((ListTypeInfo)objectTypeInfo).getListElementTypeInfo();
    }
    if (objectTypeInfo.getCategory() != Category.STRUCT) {
      throw new SemanticException(ErrorMsg.INVALID_DOT.getMsg(expr));
    }
    TypeInfo t=((StructTypeInfo)objectTypeInfo).getStructFieldTypeInfo(fieldNameString);
    if (isList) {
      t=TypeInfoFactory.getListTypeInfo(t);
    }
    desc=new ExprNodeFieldDesc(t,children.get(0),fieldNameString,isList);
  }
 else   if (funcText.equals("[")) {
    assert(children.size() == 2);
    TypeInfo myt=children.get(0).getTypeInfo();
    if (myt.getCategory() == Category.LIST) {
      if (!(children.get(1) instanceof ExprNodeConstantDesc) || !(((ExprNodeConstantDesc)children.get(1)).getTypeInfo().equals(TypeInfoFactory.intTypeInfo))) {
        throw new SemanticException(ErrorMsg.INVALID_ARRAYINDEX_CONSTANT.getMsg(expr));
      }
      TypeInfo t=((ListTypeInfo)myt).getListElementTypeInfo();
      desc=new ExprNodeGenericFuncDesc(t,FunctionRegistry.getGenericUDFForIndex(),children);
    }
 else     if (myt.getCategory() == Category.MAP) {
      if (!(children.get(1) instanceof ExprNodeConstantDesc)) {
        throw new SemanticException(ErrorMsg.INVALID_MAPINDEX_CONSTANT.getMsg(expr));
      }
      if (!(((ExprNodeConstantDesc)children.get(1)).getTypeInfo().equals(((MapTypeInfo)myt).getMapKeyTypeInfo()))) {
        throw new SemanticException(ErrorMsg.INVALID_MAPINDEX_TYPE.getMsg(expr));
      }
      TypeInfo t=((MapTypeInfo)myt).getMapValueTypeInfo();
      desc=new ExprNodeGenericFuncDesc(t,FunctionRegistry.getGenericUDFForIndex(),children);
    }
 else {
      throw new SemanticException(ErrorMsg.NON_COLLECTION_TYPE.getMsg(expr,myt.getTypeName()));
    }
  }
 else {
    FunctionInfo fi=FunctionRegistry.getFunctionInfo(funcText);
    if (fi == null) {
      if (isFunction) {
        throw new SemanticException(ErrorMsg.INVALID_FUNCTION.getMsg((ASTNode)expr.getChild(0)));
      }
 else {
        throw new SemanticException(ErrorMsg.INVALID_FUNCTION.getMsg(expr));
      }
    }
    if (!fi.isNative()) {
      ctx.getUnparseTranslator().addIdentifierTranslation((ASTNode)expr.getChild(0));
    }
    if (fi.getGenericUDTF() != null) {
      throw new SemanticException(ErrorMsg.UDTF_INVALID_LOCATION.getMsg());
    }
    desc=ExprNodeGenericFuncDesc.newInstance(fi.getGenericUDF(),children);
  }
  if (FunctionRegistry.isOpPositive(desc)) {
    assert(desc.getChildren().size() == 1);
    desc=desc.getChildren().get(0);
  }
  assert(desc != null);
  return desc;
}
