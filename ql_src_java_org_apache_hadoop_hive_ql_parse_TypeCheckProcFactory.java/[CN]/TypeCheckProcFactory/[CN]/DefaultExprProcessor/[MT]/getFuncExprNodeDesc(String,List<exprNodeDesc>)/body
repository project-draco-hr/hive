{
  ArrayList<TypeInfo> argumentTypeInfos=new ArrayList<TypeInfo>(children.size());
  for (int i=0; i < children.size(); i++) {
    exprNodeDesc child=children.get(i);
    argumentTypeInfos.add(child.getTypeInfo());
  }
  Method udfMethod=FunctionRegistry.getUDFMethod(udfName,argumentTypeInfos);
  if (udfMethod == null)   return null;
  ArrayList<exprNodeDesc> ch=SemanticAnalyzer.convertParameters(udfMethod,children);
  TypeInfo resultTypeInfo=null;
  if (PrimitiveObjectInspectorUtils.isPrimitiveWritableClass(udfMethod.getReturnType())) {
    resultTypeInfo=TypeInfoFactory.getPrimitiveTypeInfoFromPrimitiveWritable(udfMethod.getReturnType());
  }
 else {
    resultTypeInfo=TypeInfoFactory.getPrimitiveTypeInfoFromJavaPrimitive(udfMethod.getReturnType());
  }
  exprNodeFuncDesc desc=new exprNodeFuncDesc(resultTypeInfo,FunctionRegistry.getUDFClass(udfName),udfMethod,ch);
  return desc;
}
