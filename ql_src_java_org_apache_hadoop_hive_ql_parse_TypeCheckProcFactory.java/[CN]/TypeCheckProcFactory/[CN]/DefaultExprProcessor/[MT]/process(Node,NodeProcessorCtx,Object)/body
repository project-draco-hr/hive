{
  ASTNode expr=(ASTNode)nd;
  if (conversionFunctionTextHashMap.keySet().contains(expr.getType()) || specialFunctionTextHashMap.keySet().contains(expr.getType()) || expr.getToken().getType() == HiveParser.CharSetName || expr.getToken().getType() == HiveParser.CharSetLiteral) {
    return null;
  }
  exprNodeDesc desc=TypeCheckProcFactory.processGByExpr(nd,procCtx);
  if (desc != null) {
    return desc;
  }
  boolean isFunction=(expr.getType() == HiveParser.TOK_FUNCTION);
  int childrenBegin=(isFunction ? 1 : 0);
  ArrayList<exprNodeDesc> children=new ArrayList<exprNodeDesc>(expr.getChildCount() - childrenBegin);
  for (int ci=childrenBegin; ci < expr.getChildCount(); ci++) {
    children.add((exprNodeDesc)nodeOutputs[ci]);
  }
  if (children.contains(null)) {
    return null;
  }
  return getXpathOrFuncExprNodeDesc(expr,isFunction,children);
}
