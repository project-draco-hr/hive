{
  TypeCheckCtx ctx=(TypeCheckCtx)procCtx;
  if (ctx.getError() != null) {
    return null;
  }
  ExprNodeDesc desc=TypeCheckProcFactory.processGByExpr(nd,procCtx);
  if (desc != null) {
    return desc;
  }
  ASTNode expr=(ASTNode)nd;
  String intervalString=BaseSemanticAnalyzer.stripQuotes(expr.getText());
  try {
switch (expr.getType()) {
case HiveParser.TOK_INTERVAL_YEAR_MONTH_LITERAL:
      return new ExprNodeConstantDesc(TypeInfoFactory.intervalYearMonthTypeInfo,HiveIntervalYearMonth.valueOf(intervalString));
case HiveParser.TOK_INTERVAL_DAY_TIME_LITERAL:
    return new ExprNodeConstantDesc(TypeInfoFactory.intervalDayTimeTypeInfo,HiveIntervalDayTime.valueOf(intervalString));
case HiveParser.TOK_INTERVAL_YEAR_LITERAL:
  return new ExprNodeConstantDesc(TypeInfoFactory.intervalYearMonthTypeInfo,new HiveIntervalYearMonth(Integer.parseInt(intervalString),0));
case HiveParser.TOK_INTERVAL_MONTH_LITERAL:
return new ExprNodeConstantDesc(TypeInfoFactory.intervalYearMonthTypeInfo,new HiveIntervalYearMonth(0,Integer.parseInt(intervalString)));
case HiveParser.TOK_INTERVAL_DAY_LITERAL:
return new ExprNodeConstantDesc(TypeInfoFactory.intervalDayTimeTypeInfo,new HiveIntervalDayTime(Integer.parseInt(intervalString),0,0,0,0));
case HiveParser.TOK_INTERVAL_HOUR_LITERAL:
return new ExprNodeConstantDesc(TypeInfoFactory.intervalDayTimeTypeInfo,new HiveIntervalDayTime(0,Integer.parseInt(intervalString),0,0,0));
case HiveParser.TOK_INTERVAL_MINUTE_LITERAL:
return new ExprNodeConstantDesc(TypeInfoFactory.intervalDayTimeTypeInfo,new HiveIntervalDayTime(0,0,Integer.parseInt(intervalString),0,0));
case HiveParser.TOK_INTERVAL_SECOND_LITERAL:
BigDecimal bd=new BigDecimal(intervalString);
BigDecimal bdSeconds=new BigDecimal(bd.toBigInteger());
BigDecimal bdNanos=bd.subtract(bdSeconds);
return new ExprNodeConstantDesc(TypeInfoFactory.intervalDayTimeTypeInfo,new HiveIntervalDayTime(0,0,0,bdSeconds.intValueExact(),bdNanos.multiply(NANOS_PER_SEC_BD).intValue()));
default :
throw new IllegalArgumentException("Invalid time literal type " + expr.getType());
}
}
 catch (Exception err) {
throw new SemanticException("Unable to convert interval literal '" + intervalString + "' to interval value.",err);
}
}
