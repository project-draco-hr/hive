{
  TypeCheckCtx ctx=(TypeCheckCtx)procCtx;
  if (ctx.getError() != null) {
    return null;
  }
  ExprNodeDesc desc=TypeCheckProcFactory.processGByExpr(nd,procCtx);
  if (desc != null) {
    return desc;
  }
  ASTNode expr=(ASTNode)nd;
  String str=null;
switch (expr.getToken().getType()) {
case HiveParser.StringLiteral:
    str=BaseSemanticAnalyzer.unescapeSQLString(expr.getText());
  break;
case HiveParser.TOK_STRINGLITERALSEQUENCE:
StringBuilder sb=new StringBuilder();
for (Node n : expr.getChildren()) {
sb.append(BaseSemanticAnalyzer.unescapeSQLString(((ASTNode)n).getText()));
}
str=sb.toString();
break;
case HiveParser.TOK_CHARSETLITERAL:
str=BaseSemanticAnalyzer.charSetString(expr.getChild(0).getText(),expr.getChild(1).getText());
break;
default :
str=BaseSemanticAnalyzer.unescapeIdentifier(expr.getText().toLowerCase());
break;
}
return new ExprNodeConstantDesc(TypeInfoFactory.stringTypeInfo,str);
}
