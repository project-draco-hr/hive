{
  Map<Rule,NodeProcessor> opRules=new LinkedHashMap<Rule,NodeProcessor>();
  opRules.put(new RuleRegExp("R1",HiveParser.TOK_NULL + "%"),getNullExprProcessor());
  opRules.put(new RuleRegExp("R2",HiveParser.Number + "%|" + HiveParser.TinyintLiteral+ "%|"+ HiveParser.SmallintLiteral+ "%|"+ HiveParser.BigintLiteral+ "%|"+ HiveParser.DecimalLiteral+ "%"),getNumExprProcessor());
  opRules.put(new RuleRegExp("R3",HiveParser.Identifier + "%|" + HiveParser.StringLiteral+ "%|"+ HiveParser.TOK_CHARSETLITERAL+ "%|"+ HiveParser.TOK_STRINGLITERALSEQUENCE+ "%|"+ "%|"+ HiveParser.KW_IF+ "%|"+ HiveParser.KW_CASE+ "%|"+ HiveParser.KW_WHEN+ "%|"+ HiveParser.KW_IN+ "%|"+ HiveParser.KW_ARRAY+ "%|"+ HiveParser.KW_MAP+ "%|"+ HiveParser.KW_STRUCT+ "%|"+ HiveParser.KW_EXISTS+ "%|"+ HiveParser.TOK_SUBQUERY_OP_NOTIN+ "%"),getStrExprProcessor());
  opRules.put(new RuleRegExp("R4",HiveParser.KW_TRUE + "%|" + HiveParser.KW_FALSE+ "%"),getBoolExprProcessor());
  opRules.put(new RuleRegExp("R5",HiveParser.TOK_DATELITERAL + "%"),getDateExprProcessor());
  opRules.put(new RuleRegExp("R6",HiveParser.TOK_TABLE_OR_COL + "%"),getColumnExprProcessor());
  opRules.put(new RuleRegExp("R7",HiveParser.TOK_SUBQUERY_OP + "%"),getSubQueryExprProcessor());
  Dispatcher disp=new DefaultRuleDispatcher(getDefaultExprProcessor(),opRules,tcCtx);
  GraphWalker ogw=new DefaultGraphWalker(disp);
  ArrayList<Node> topNodes=new ArrayList<Node>();
  topNodes.add(expr);
  HashMap<Node,Object> nodeOutputs=new LinkedHashMap<Node,Object>();
  ogw.startWalking(topNodes,nodeOutputs);
  return convert(nodeOutputs);
}
