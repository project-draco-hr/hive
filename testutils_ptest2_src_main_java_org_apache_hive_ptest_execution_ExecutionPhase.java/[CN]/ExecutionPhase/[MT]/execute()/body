{
  long start=System.currentTimeMillis();
  List<TestBatch> testBatches=Lists.newArrayList();
  for (  TestBatch batch : testBatchSupplier.get()) {
    testBatches.add(batch);
    if (batch.isParallel()) {
      parallelWorkQueue.add(batch);
    }
 else {
      isolatedWorkQueue.add(batch);
    }
  }
  try {
    do {
      float numberBadHosts=0f;
      for (      HostExecutor hostExecutor : hostExecutors) {
        if (hostExecutor.remainingDrones() == 0) {
          numberBadHosts++;
        }
      }
      Preconditions.checkState(hostExecutors.size() > 0,"Host executors cannot be empty");
      float percentBadHosts=numberBadHosts / (float)hostExecutors.size();
      if (percentBadHosts > 0.50f) {
        throw new IllegalStateException("Too many bad hosts: " + percentBadHosts + "% ("+ (int)numberBadHosts+ " / "+ hostExecutors.size()+ ") is greater than threshold of 50%");
      }
      List<ListenableFuture<Void>> results=Lists.newArrayList();
      for (      HostExecutor hostExecutor : getHostExecutors()) {
        results.add(hostExecutor.submitTests(parallelWorkQueue,isolatedWorkQueue,failedTestResults));
      }
      Futures.allAsList(results).get();
    }
 while (!(parallelWorkQueue.isEmpty() && isolatedWorkQueue.isEmpty()));
    Preconditions.checkState(parallelWorkQueue.isEmpty(),"Parallel work queue is not empty. All drones must have aborted.");
    Preconditions.checkState(isolatedWorkQueue.isEmpty(),"Isolated work queue is not empty. All drones must have aborted.");
    for (    TestBatch batch : testBatches) {
      File batchLogDir;
      if (failedTestResults.contains(batch)) {
        batchLogDir=new File(failedLogDir,batch.getName());
      }
 else {
        batchLogDir=new File(succeededLogDir,batch.getName());
      }
      JUnitReportParser parser=new JUnitReportParser(logger,batchLogDir);
      executedTests.addAll(parser.getExecutedTests());
      failedTests.addAll(parser.getFailedTests());
    }
  }
  finally {
    long elapsed=System.currentTimeMillis() - start;
    logger.info("PERF: exec phase " + TimeUnit.MINUTES.convert(elapsed,TimeUnit.MILLISECONDS) + " minutes");
  }
}
