{
  TestInStream.OutputCollector collect=new TestInStream.OutputCollector();
  RunLengthIntegerWriter out=new RunLengthIntegerWriter(new OutStream("test",1000,codec,collect),true);
  TestInStream.PositionCollector[] positions=new TestInStream.PositionCollector[4096];
  Random random=new Random(99);
  int[] junk=new int[2048];
  for (int i=0; i < junk.length; ++i) {
    junk[i]=random.nextInt();
  }
  for (int i=0; i < 4096; ++i) {
    positions[i]=new TestInStream.PositionCollector();
    out.getPosition(positions[i]);
    if (i < 1024) {
      out.write(i / 4);
    }
 else     if (i < 2048) {
      out.write(2 * i);
    }
 else {
      out.write(junk[i - 2048]);
    }
  }
  out.flush();
  ByteBuffer inBuf=ByteBuffer.allocate(collect.buffer.size());
  collect.buffer.setByteBuffer(inBuf,0,collect.buffer.size());
  inBuf.flip();
  RunLengthIntegerReader in=new RunLengthIntegerReader(InStream.create("test",new ByteBuffer[]{inBuf},new long[]{0},inBuf.remaining(),codec,1000),true);
  for (int i=0; i < 2048; ++i) {
    int x=(int)in.next();
    if (i < 1024) {
      assertEquals(i / 4,x);
    }
 else     if (i < 2048) {
      assertEquals(2 * i,x);
    }
 else {
      assertEquals(junk[i - 2048],x);
    }
  }
  for (int i=2047; i >= 0; --i) {
    in.seek(positions[i]);
    int x=(int)in.next();
    if (i < 1024) {
      assertEquals(i / 4,x);
    }
 else     if (i < 2048) {
      assertEquals(2 * i,x);
    }
 else {
      assertEquals(junk[i - 2048],x);
    }
  }
}
