{
  try {
    TGetResultSetMetadataReq metadataReq=new TGetResultSetMetadataReq(stmtHandle);
    TGetResultSetMetadataResp metadataResp;
    if (transportLock == null) {
      metadataResp=client.GetResultSetMetadata(metadataReq);
    }
 else {
      transportLock.lock();
      try {
        metadataResp=client.GetResultSetMetadata(metadataReq);
      }
  finally {
        transportLock.unlock();
      }
    }
    Utils.verifySuccess(metadataResp.getStatus());
    StringBuilder namesSb=new StringBuilder();
    StringBuilder typesSb=new StringBuilder();
    TTableSchema schema=metadataResp.getSchema();
    if (schema == null || !schema.isSetColumns()) {
      return;
    }
    setSchema(new TableSchema(schema));
    List<TColumnDesc> columns=schema.getColumns();
    for (int pos=0; pos < schema.getColumnsSize(); pos++) {
      if (pos != 0) {
        namesSb.append(",");
        typesSb.append(",");
      }
      String columnName=columns.get(pos).getColumnName();
      columnNames.add(columnName);
      TPrimitiveTypeEntry primitiveTypeEntry=columns.get(pos).getTypeDesc().getTypes().get(0).getPrimitiveEntry();
      String columnTypeName=TYPE_NAMES.get(primitiveTypeEntry.getType());
      columnTypes.add(columnTypeName);
      columnAttributes.add(getColumnAttributes(primitiveTypeEntry));
    }
  }
 catch (  SQLException eS) {
    throw eS;
  }
catch (  Exception ex) {
    ex.printStackTrace();
    throw new SQLException("Could not create ResultSet: " + ex.getMessage(),ex);
  }
}
