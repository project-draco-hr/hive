{
  if (isClosed) {
    throw new SQLException("Resultset is closed");
  }
  if (emptyResultSet || (maxRows > 0 && rowsFetched >= maxRows)) {
    return false;
  }
  try {
    TFetchOrientation orientation=TFetchOrientation.FETCH_NEXT;
    if (fetchFirst) {
      orientation=TFetchOrientation.FETCH_FIRST;
      fetchedRows=null;
      fetchedRowsItr=null;
      fetchFirst=false;
    }
    if (fetchedRows == null || !fetchedRowsItr.hasNext()) {
      TFetchResultsReq fetchReq=new TFetchResultsReq(stmtHandle,orientation,fetchSize);
      TFetchResultsResp fetchResp;
      if (transportLock == null) {
        fetchResp=client.FetchResults(fetchReq);
      }
 else {
        transportLock.lock();
        try {
          fetchResp=client.FetchResults(fetchReq);
        }
  finally {
          transportLock.unlock();
        }
      }
      Utils.verifySuccessWithInfo(fetchResp.getStatus());
      TRowSet results=fetchResp.getResults();
      fetchedRows=RowSetFactory.create(results,protocol);
      fetchedRowsItr=fetchedRows.iterator();
    }
    String rowStr="";
    if (fetchedRowsItr.hasNext()) {
      row=fetchedRowsItr.next();
    }
 else {
      return false;
    }
    rowsFetched++;
    if (LOG.isDebugEnabled()) {
      LOG.debug("Fetched row string: " + rowStr);
    }
  }
 catch (  SQLException eS) {
    throw eS;
  }
catch (  Exception ex) {
    ex.printStackTrace();
    throw new SQLException("Error retrieving next row",ex);
  }
  return true;
}
