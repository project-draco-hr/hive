{
  if (null == obj) {
    return;
  }
switch (objInspector.getCategory()) {
case PRIMITIVE:
{
      PrimitiveObjectInspector poi=(PrimitiveObjectInspector)objInspector;
switch (poi.getPrimitiveCategory()) {
case VOID:
{
          return;
        }
case BOOLEAN:
{
        boolean v=((BooleanObjectInspector)poi).get(obj);
        byteStream.write((byte)(v ? 1 : 0));
        return;
      }
case BYTE:
{
      ByteObjectInspector boi=(ByteObjectInspector)poi;
      byte v=boi.get(obj);
      byteStream.write(v);
      return;
    }
case SHORT:
{
    ShortObjectInspector spoi=(ShortObjectInspector)poi;
    short v=spoi.get(obj);
    byteStream.write((byte)(v >> 8));
    byteStream.write((byte)(v));
    return;
  }
case INT:
{
  IntObjectInspector ioi=(IntObjectInspector)poi;
  int v=ioi.get(obj);
  LazyBinaryUtils.writeVInt(byteStream,v);
  return;
}
case LONG:
{
LongObjectInspector loi=(LongObjectInspector)poi;
long v=loi.get(obj);
LazyBinaryUtils.writeVLong(byteStream,v);
return;
}
case FLOAT:
{
FloatObjectInspector foi=(FloatObjectInspector)poi;
int v=Float.floatToIntBits(foi.get(obj));
byteStream.write((byte)(v >> 24));
byteStream.write((byte)(v >> 16));
byteStream.write((byte)(v >> 8));
byteStream.write((byte)(v));
return;
}
case DOUBLE:
{
DoubleObjectInspector doi=(DoubleObjectInspector)poi;
LazyBinaryUtils.writeDouble(byteStream,doi.get(obj));
return;
}
case STRING:
{
StringObjectInspector soi=(StringObjectInspector)poi;
Text t=soi.getPrimitiveWritableObject(obj);
serializeText(byteStream,t,skipLengthPrefix);
return;
}
case CHAR:
{
HiveCharObjectInspector hcoi=(HiveCharObjectInspector)poi;
Text t=hcoi.getPrimitiveWritableObject(obj).getTextValue();
serializeText(byteStream,t,skipLengthPrefix);
return;
}
case VARCHAR:
{
HiveVarcharObjectInspector hcoi=(HiveVarcharObjectInspector)poi;
Text t=hcoi.getPrimitiveWritableObject(obj).getTextValue();
serializeText(byteStream,t,skipLengthPrefix);
return;
}
case BINARY:
{
BinaryObjectInspector baoi=(BinaryObjectInspector)poi;
BytesWritable bw=baoi.getPrimitiveWritableObject(obj);
int length=bw.getLength();
if (!skipLengthPrefix) {
LazyBinaryUtils.writeVInt(byteStream,length);
}
 else {
if (length == 0) {
throw new RuntimeException("LazyBinaryColumnarSerde cannot serialize a non-null zero " + "length binary field. Consider using either LazyBinarySerde or ColumnarSerde.");
}
}
byteStream.write(bw.getBytes(),0,length);
return;
}
case DATE:
{
DateWritable d=((DateObjectInspector)poi).getPrimitiveWritableObject(obj);
d.writeToByteStream(byteStream);
return;
}
case TIMESTAMP:
{
TimestampObjectInspector toi=(TimestampObjectInspector)poi;
TimestampWritable t=toi.getPrimitiveWritableObject(obj);
t.writeToByteStream(byteStream);
return;
}
case INTERVAL_YEAR_MONTH:
{
HiveIntervalYearMonthWritable intervalYearMonth=((HiveIntervalYearMonthObjectInspector)poi).getPrimitiveWritableObject(obj);
intervalYearMonth.writeToByteStream(byteStream);
return;
}
case INTERVAL_DAY_TIME:
{
HiveIntervalDayTimeWritable intervalDayTime=((HiveIntervalDayTimeObjectInspector)poi).getPrimitiveWritableObject(obj);
intervalDayTime.writeToByteStream(byteStream);
return;
}
case DECIMAL:
{
HiveDecimalObjectInspector bdoi=(HiveDecimalObjectInspector)poi;
HiveDecimalWritable t=bdoi.getPrimitiveWritableObject(obj);
if (t == null) {
return;
}
t.writeToByteStream(byteStream);
return;
}
default :
{
throw new RuntimeException("Unrecognized type: " + poi.getPrimitiveCategory());
}
}
}
case LIST:
{
ListObjectInspector loi=(ListObjectInspector)objInspector;
ObjectInspector eoi=loi.getListElementObjectInspector();
int byteSizeStart=0;
int listStart=0;
if (!skipLengthPrefix) {
byteSizeStart=byteStream.getLength();
byteStream.reserve(4);
listStart=byteStream.getLength();
}
int size=loi.getListLength(obj);
LazyBinaryUtils.writeVInt(byteStream,size);
byte nullByte=0;
for (int eid=0; eid < size; eid++) {
if (null != loi.getListElement(obj,eid)) {
nullByte|=1 << (eid % 8);
}
if (7 == eid % 8 || eid == size - 1) {
byteStream.write(nullByte);
nullByte=0;
}
}
for (int eid=0; eid < size; eid++) {
serialize(byteStream,loi.getListElement(obj,eid),eoi,false,warnedOnceNullMapKey);
}
if (!skipLengthPrefix) {
int listEnd=byteStream.getLength();
int listSize=listEnd - listStart;
writeSizeAtOffset(byteStream,byteSizeStart,listSize);
}
return;
}
case MAP:
{
MapObjectInspector moi=(MapObjectInspector)objInspector;
ObjectInspector koi=moi.getMapKeyObjectInspector();
ObjectInspector voi=moi.getMapValueObjectInspector();
Map<?,?> map=moi.getMap(obj);
int byteSizeStart=0;
int mapStart=0;
if (!skipLengthPrefix) {
byteSizeStart=byteStream.getLength();
byteStream.reserve(4);
mapStart=byteStream.getLength();
}
int size=map.size();
LazyBinaryUtils.writeVInt(byteStream,size);
int b=0;
byte nullByte=0;
for (Map.Entry<?,?> entry : map.entrySet()) {
if (null != entry.getKey()) {
nullByte|=1 << (b % 8);
}
 else if (warnedOnceNullMapKey != null) {
if (!warnedOnceNullMapKey.value) {
LOG.warn("Null map key encountered! Ignoring similar problems.");
}
warnedOnceNullMapKey.value=true;
}
b++;
if (null != entry.getValue()) {
nullByte|=1 << (b % 8);
}
b++;
if (0 == b % 8 || b == size * 2) {
byteStream.write(nullByte);
nullByte=0;
}
}
for (Map.Entry<?,?> entry : map.entrySet()) {
serialize(byteStream,entry.getKey(),koi,false,warnedOnceNullMapKey);
serialize(byteStream,entry.getValue(),voi,false,warnedOnceNullMapKey);
}
if (!skipLengthPrefix) {
int mapEnd=byteStream.getLength();
int mapSize=mapEnd - mapStart;
writeSizeAtOffset(byteStream,byteSizeStart,mapSize);
}
return;
}
case STRUCT:
case UNION:
{
int byteSizeStart=0;
int typeStart=0;
if (!skipLengthPrefix) {
byteSizeStart=byteStream.getLength();
byteStream.reserve(4);
typeStart=byteStream.getLength();
}
if (ObjectInspector.Category.STRUCT.equals(objInspector.getCategory())) {
serializeStruct(byteStream,obj,(StructObjectInspector)objInspector,warnedOnceNullMapKey);
}
 else {
serializeUnion(byteStream,obj,(UnionObjectInspector)objInspector,warnedOnceNullMapKey);
}
if (!skipLengthPrefix) {
int typeEnd=byteStream.getLength();
int typeSize=typeEnd - typeStart;
writeSizeAtOffset(byteStream,byteSizeStart,typeSize);
}
return;
}
default :
{
throw new RuntimeException("Unrecognized type: " + objInspector.getCategory());
}
}
}
