{
  Object o0, o1;
  o0=arguments[0].get();
  if (o0 == null) {
    return null;
  }
  o1=arguments[1].get();
  if (o1 == null) {
    return null;
  }
switch (compareType) {
case COMPARE_TEXT:
    Text t0, t1;
  t0=soi0.getPrimitiveWritableObject(o0);
t1=soi1.getPrimitiveWritableObject(o1);
result.set(ShimLoader.getHadoopShims().compareText(t0,t1) <= 0);
break;
case COMPARE_INT:
result.set(ioi0.get(o0) <= ioi1.get(o1));
break;
case COMPARE_LONG:
result.set(loi0.get(o0) <= loi1.get(o1));
break;
case COMPARE_BYTE:
result.set(byoi0.get(o0) <= byoi1.get(o1));
break;
case COMPARE_BOOL:
boolean b0=boi0.get(o0);
boolean b1=boi1.get(o1);
result.set(!b0 || b1);
break;
case COMPARE_STRING:
String s0, s1;
s0=soi0.getPrimitiveJavaObject(o0);
s1=soi1.getPrimitiveJavaObject(o1);
result.set(s0.compareTo(s1) <= 0);
break;
case SAME_TYPE:
result.set(ObjectInspectorUtils.compare(o0,argumentOIs[0],o1,argumentOIs[1]) <= 0);
break;
default :
Object converted_o0=converter0.convert(o0);
if (converted_o0 == null) {
return null;
}
Object converted_o1=converter1.convert(o1);
if (converted_o1 == null) {
return null;
}
result.set(ObjectInspectorUtils.compare(converted_o0,compareOI,converted_o1,compareOI) <= 0);
}
return result;
}
