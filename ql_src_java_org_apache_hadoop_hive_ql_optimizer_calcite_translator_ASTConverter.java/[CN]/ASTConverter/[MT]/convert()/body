{
  new QBVisitor().go(root);
  QueryBlockInfo qb=convertSource(from);
  schema=qb.schema;
  hiveAST.from=ASTBuilder.construct(HiveParser.TOK_FROM,"TOK_FROM").add(qb.ast).node();
  if (where != null) {
    ASTNode cond=where.getCondition().accept(new RexVisitor(schema));
    hiveAST.where=ASTBuilder.where(cond);
  }
  if (groupBy != null) {
    ASTBuilder b;
    boolean groupingSetsExpression=false;
    if (groupBy.indicator) {
      Group aggregateType=Aggregate.Group.induce(groupBy.getGroupSet(),groupBy.getGroupSets());
      if (aggregateType == Group.ROLLUP) {
        b=ASTBuilder.construct(HiveParser.TOK_ROLLUP_GROUPBY,"TOK_ROLLUP_GROUPBY");
      }
 else       if (aggregateType == Group.CUBE) {
        b=ASTBuilder.construct(HiveParser.TOK_CUBE_GROUPBY,"TOK_CUBE_GROUPBY");
      }
 else {
        b=ASTBuilder.construct(HiveParser.TOK_GROUPING_SETS,"TOK_GROUPING_SETS");
        groupingSetsExpression=true;
      }
    }
 else {
      b=ASTBuilder.construct(HiveParser.TOK_GROUPBY,"TOK_GROUPBY");
    }
    HiveAggregate hiveAgg=(HiveAggregate)groupBy;
    for (    int pos : hiveAgg.getAggregateColumnsOrder()) {
      RexInputRef iRef=new RexInputRef(groupBy.getGroupSet().nth(pos),groupBy.getCluster().getTypeFactory().createSqlType(SqlTypeName.ANY));
      b.add(iRef.accept(new RexVisitor(schema)));
    }
    for (int pos=0; pos < groupBy.getGroupCount(); pos++) {
      if (!hiveAgg.getAggregateColumnsOrder().contains(pos)) {
        RexInputRef iRef=new RexInputRef(groupBy.getGroupSet().nth(pos),groupBy.getCluster().getTypeFactory().createSqlType(SqlTypeName.ANY));
        b.add(iRef.accept(new RexVisitor(schema)));
      }
    }
    if (groupingSetsExpression) {
      for (      ImmutableBitSet groupSet : groupBy.getGroupSets()) {
        ASTBuilder expression=ASTBuilder.construct(HiveParser.TOK_GROUPING_SETS_EXPRESSION,"TOK_GROUPING_SETS_EXPRESSION");
        for (        int i : groupSet) {
          RexInputRef iRef=new RexInputRef(i,groupBy.getCluster().getTypeFactory().createSqlType(SqlTypeName.ANY));
          expression.add(iRef.accept(new RexVisitor(schema)));
        }
        b.add(expression);
      }
    }
    if (!groupBy.getGroupSet().isEmpty()) {
      hiveAST.groupBy=b.node();
    }
    schema=new Schema(schema,groupBy);
  }
  if (having != null) {
    ASTNode cond=having.getCondition().accept(new RexVisitor(schema));
    hiveAST.having=ASTBuilder.having(cond);
  }
  ASTBuilder b=ASTBuilder.construct(HiveParser.TOK_SELECT,"TOK_SELECT");
  if (select instanceof Project) {
    if (select.getChildExps().isEmpty()) {
      RexLiteral r=select.getCluster().getRexBuilder().makeExactLiteral(new BigDecimal(1));
      ASTNode selectExpr=ASTBuilder.selectExpr(ASTBuilder.literal(r),"1");
      b.add(selectExpr);
    }
 else {
      int i=0;
      for (      RexNode r : select.getChildExps()) {
        if (RexUtil.isNull(r) && r.getType().getSqlTypeName() != SqlTypeName.NULL) {
          r=select.getCluster().getRexBuilder().makeAbstractCast(r.getType(),r);
        }
        ASTNode expr=r.accept(new RexVisitor(schema,r instanceof RexLiteral));
        String alias=select.getRowType().getFieldNames().get(i++);
        ASTNode selectExpr=ASTBuilder.selectExpr(expr,alias);
        b.add(selectExpr);
      }
    }
    hiveAST.select=b.node();
  }
 else {
    HiveTableFunctionScan udtf=(HiveTableFunctionScan)select;
    List<ASTNode> children=new ArrayList<>();
    RexCall call=(RexCall)udtf.getCall();
    for (    RexNode r : call.getOperands()) {
      if (RexUtil.isNull(r) && r.getType().getSqlTypeName() != SqlTypeName.NULL) {
        r=select.getCluster().getRexBuilder().makeAbstractCast(r.getType(),r);
      }
      ASTNode expr=r.accept(new RexVisitor(schema,r instanceof RexLiteral));
      children.add(expr);
    }
    ASTBuilder sel=ASTBuilder.construct(HiveParser.TOK_SELEXPR,"TOK_SELEXPR");
    ASTNode function=buildUDTFAST(call.getOperator().getName(),children);
    sel.add(function);
    for (    String alias : udtf.getRowType().getFieldNames()) {
      sel.add(HiveParser.Identifier,alias);
    }
    b.add(sel);
    hiveAST.select=b.node();
  }
  convertOrderLimitToASTNode((HiveSortLimit)orderLimit);
  return hiveAST.getAST();
}
