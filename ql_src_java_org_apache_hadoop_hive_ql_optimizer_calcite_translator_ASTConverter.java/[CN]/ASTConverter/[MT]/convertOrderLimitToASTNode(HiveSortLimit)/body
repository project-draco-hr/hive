{
  if (order != null) {
    HiveSortLimit hiveSortLimit=order;
    if (!hiveSortLimit.getCollation().getFieldCollations().isEmpty()) {
      ASTNode orderAst=ASTBuilder.createAST(HiveParser.TOK_ORDERBY,"TOK_ORDERBY");
      schema=new Schema(hiveSortLimit);
      Map<Integer,RexNode> obRefToCallMap=hiveSortLimit.getInputRefToCallMap();
      RexNode obExpr;
      ASTNode astCol;
      for (      RelFieldCollation c : hiveSortLimit.getCollation().getFieldCollations()) {
        ASTNode directionAST=c.getDirection() == RelFieldCollation.Direction.ASCENDING ? ASTBuilder.createAST(HiveParser.TOK_TABSORTCOLNAMEASC,"TOK_TABSORTCOLNAMEASC") : ASTBuilder.createAST(HiveParser.TOK_TABSORTCOLNAMEDESC,"TOK_TABSORTCOLNAMEDESC");
        ASTNode nullDirectionAST;
        if (c.nullDirection == RelFieldCollation.NullDirection.FIRST) {
          nullDirectionAST=ASTBuilder.createAST(HiveParser.TOK_NULLS_FIRST,"TOK_NULLS_FIRST");
          directionAST.addChild(nullDirectionAST);
        }
 else         if (c.nullDirection == RelFieldCollation.NullDirection.LAST) {
          nullDirectionAST=ASTBuilder.createAST(HiveParser.TOK_NULLS_LAST,"TOK_NULLS_LAST");
          directionAST.addChild(nullDirectionAST);
        }
 else {
          if (c.getDirection() == RelFieldCollation.Direction.ASCENDING) {
            nullDirectionAST=ASTBuilder.createAST(HiveParser.TOK_NULLS_FIRST,"TOK_NULLS_FIRST");
            directionAST.addChild(nullDirectionAST);
          }
 else {
            nullDirectionAST=ASTBuilder.createAST(HiveParser.TOK_NULLS_LAST,"TOK_NULLS_LAST");
            directionAST.addChild(nullDirectionAST);
          }
        }
        obExpr=null;
        if (obRefToCallMap != null)         obExpr=obRefToCallMap.get(c.getFieldIndex());
        if (obExpr != null) {
          astCol=obExpr.accept(new RexVisitor(schema));
        }
 else {
          ColumnInfo cI=schema.get(c.getFieldIndex());
          astCol=ASTBuilder.unqualifiedName(cI.column);
        }
        nullDirectionAST.addChild(astCol);
        orderAst.addChild(directionAST);
      }
      hiveAST.order=orderAst;
    }
    RexNode offsetExpr=hiveSortLimit.getOffsetExpr();
    RexNode fetchExpr=hiveSortLimit.getFetchExpr();
    if (fetchExpr != null) {
      Object offset=(offsetExpr == null) ? new Integer(0) : ((RexLiteral)offsetExpr).getValue2();
      Object fetch=((RexLiteral)fetchExpr).getValue2();
      hiveAST.limit=ASTBuilder.limit(offset,fetch);
    }
  }
}
