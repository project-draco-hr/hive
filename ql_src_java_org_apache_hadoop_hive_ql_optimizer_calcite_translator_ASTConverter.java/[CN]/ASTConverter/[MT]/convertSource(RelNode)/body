{
  Schema s;
  ASTNode ast;
  if (r instanceof TableScan) {
    TableScan f=(TableScan)r;
    s=new Schema(f);
    ast=ASTBuilder.table(f);
  }
 else   if (r instanceof Join) {
    Join join=(Join)r;
    QueryBlockInfo left=convertSource(join.getLeft());
    QueryBlockInfo right=convertSource(join.getRight());
    s=new Schema(left.schema,right.schema);
    ASTNode cond=join.getCondition().accept(new RexVisitor(s));
    boolean semiJoin=join instanceof SemiJoin;
    if (join.getRight() instanceof Join) {
      JoinRelType type;
      if (join.getJoinType() == JoinRelType.LEFT) {
        type=JoinRelType.RIGHT;
      }
 else       if (join.getJoinType() == JoinRelType.RIGHT) {
        type=JoinRelType.LEFT;
      }
 else {
        type=join.getJoinType();
      }
      ast=ASTBuilder.join(right.ast,left.ast,type,cond,semiJoin);
    }
 else {
      ast=ASTBuilder.join(left.ast,right.ast,join.getJoinType(),cond,semiJoin);
    }
    if (semiJoin) {
      s=left.schema;
    }
  }
 else   if (r instanceof Union) {
    RelNode leftInput=((Union)r).getInput(0);
    RelNode rightInput=((Union)r).getInput(1);
    ASTConverter leftConv=new ASTConverter(leftInput,this.derivedTableCount);
    ASTConverter rightConv=new ASTConverter(rightInput,this.derivedTableCount);
    ASTNode leftAST=leftConv.convert();
    ASTNode rightAST=rightConv.convert();
    ASTNode unionAST=getUnionAllAST(leftAST,rightAST);
    String sqAlias=nextAlias();
    ast=ASTBuilder.subQuery(unionAST,sqAlias);
    s=new Schema((Union)r,sqAlias);
  }
 else {
    ASTConverter src=new ASTConverter(r,this.derivedTableCount);
    ASTNode srcAST=src.convert();
    String sqAlias=nextAlias();
    s=src.getRowSchema(sqAlias);
    ast=ASTBuilder.subQuery(srcAST,sqAlias);
  }
  return new QueryBlockInfo(s,ast);
}
