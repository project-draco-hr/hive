{
  Output output=new Output();
  serializeWrite.set(output);
  PrimitiveCategory[] primitiveCategories=source.primitiveCategories();
  for (int i=0; i < primitiveCategories.length; i++) {
    Object object=row[i];
    PrimitiveCategory primitiveCategory=primitiveCategories[i];
switch (primitiveCategory) {
case BOOLEAN:
{
        BooleanWritable expectedWritable=(BooleanWritable)object;
        boolean value=expectedWritable.get();
        serializeWrite.writeBoolean(value);
      }
    break;
case BYTE:
{
    ByteWritable expectedWritable=(ByteWritable)object;
    byte value=expectedWritable.get();
    serializeWrite.writeByte(value);
  }
break;
case SHORT:
{
ShortWritable expectedWritable=(ShortWritable)object;
short value=expectedWritable.get();
serializeWrite.writeShort(value);
}
break;
case INT:
{
IntWritable expectedWritable=(IntWritable)object;
int value=expectedWritable.get();
serializeWrite.writeInt(value);
}
break;
case LONG:
{
LongWritable expectedWritable=(LongWritable)object;
long value=expectedWritable.get();
serializeWrite.writeLong(value);
}
break;
case DATE:
{
DateWritable expectedWritable=(DateWritable)object;
Date value=expectedWritable.get();
serializeWrite.writeDate(value);
}
break;
case FLOAT:
{
FloatWritable expectedWritable=(FloatWritable)object;
float value=expectedWritable.get();
serializeWrite.writeFloat(value);
}
break;
case DOUBLE:
{
DoubleWritable expectedWritable=(DoubleWritable)object;
double value=expectedWritable.get();
serializeWrite.writeDouble(value);
}
break;
case STRING:
{
Text text=(Text)object;
serializeWrite.writeString(text.getBytes(),0,text.getLength());
}
break;
case CHAR:
{
HiveCharWritable expectedWritable=(HiveCharWritable)object;
HiveChar value=expectedWritable.getHiveChar();
serializeWrite.writeHiveChar(value);
}
break;
case VARCHAR:
{
HiveVarcharWritable expectedWritable=(HiveVarcharWritable)object;
HiveVarchar value=expectedWritable.getHiveVarchar();
serializeWrite.writeHiveVarchar(value);
}
break;
case BINARY:
{
BytesWritable expectedWritable=(BytesWritable)object;
byte[] bytes=expectedWritable.getBytes();
int length=expectedWritable.getLength();
serializeWrite.writeBinary(bytes,0,length);
}
break;
case TIMESTAMP:
{
TimestampWritable expectedWritable=(TimestampWritable)object;
Timestamp value=expectedWritable.getTimestamp();
serializeWrite.writeTimestamp(value);
}
break;
case INTERVAL_YEAR_MONTH:
{
HiveIntervalYearMonthWritable expectedWritable=(HiveIntervalYearMonthWritable)object;
HiveIntervalYearMonth value=expectedWritable.getHiveIntervalYearMonth();
serializeWrite.writeHiveIntervalYearMonth(value);
}
break;
case INTERVAL_DAY_TIME:
{
HiveIntervalDayTimeWritable expectedWritable=(HiveIntervalDayTimeWritable)object;
HiveIntervalDayTime value=expectedWritable.getHiveIntervalDayTime();
serializeWrite.writeHiveIntervalDayTime(value);
}
break;
case DECIMAL:
{
HiveDecimalWritable expectedWritable=(HiveDecimalWritable)object;
HiveDecimal value=expectedWritable.getHiveDecimal();
serializeWrite.writeHiveDecimal(value);
}
break;
default :
throw new HiveException("Unexpected primitive category " + primitiveCategory);
}
}
return output;
}
