{
  deserializeRead.set(output.getData(),0,output.getLength());
  PrimitiveCategory[] primitiveCategories=source.primitiveCategories();
  for (int i=0; i < primitiveCategories.length; i++) {
    Object expected=expectedRow[i];
    PrimitiveCategory primitiveCategory=primitiveCategories[i];
    PrimitiveTypeInfo primitiveTypeInfo=source.primitiveTypeInfos()[i];
    if (deserializeRead.readCheckNull()) {
      throw new HiveException("Unexpected NULL");
    }
switch (primitiveCategory) {
case BOOLEAN:
{
        Boolean value=deserializeRead.readBoolean();
        BooleanWritable expectedWritable=(BooleanWritable)expected;
        if (!value.equals(expectedWritable.get())) {
          TestCase.fail("Boolean field mismatch (expected " + expected + " found "+ value+ ")");
        }
      }
    break;
case BYTE:
{
    Byte value=deserializeRead.readByte();
    ByteWritable expectedWritable=(ByteWritable)expected;
    if (!value.equals(expectedWritable.get())) {
      TestCase.fail("Byte field mismatch (expected " + (int)expected + " found "+ (int)value+ ")");
    }
  }
break;
case SHORT:
{
Short value=deserializeRead.readShort();
ShortWritable expectedWritable=(ShortWritable)expected;
if (!value.equals(expectedWritable.get())) {
  TestCase.fail("Short field mismatch (expected " + expected + " found "+ value+ ")");
}
}
break;
case INT:
{
Integer value=deserializeRead.readInt();
IntWritable expectedWritable=(IntWritable)expected;
if (!value.equals(expectedWritable.get())) {
TestCase.fail("Int field mismatch (expected " + expected + " found "+ value+ ")");
}
}
break;
case LONG:
{
Long value=deserializeRead.readLong();
LongWritable expectedWritable=(LongWritable)expected;
if (!value.equals(expectedWritable.get())) {
TestCase.fail("Long field mismatch (expected " + expected + " found "+ value+ ")");
}
}
break;
case DATE:
{
DeserializeRead.ReadDateResults readDateResults=deserializeRead.createReadDateResults();
deserializeRead.readDate(readDateResults);
Date value=readDateResults.getDate();
DateWritable expectedWritable=(DateWritable)expected;
if (!value.equals(expectedWritable.get())) {
TestCase.fail("Date field mismatch (expected " + expected.toString() + " found "+ value.toString()+ ")");
}
}
break;
case FLOAT:
{
Float value=deserializeRead.readFloat();
FloatWritable expectedWritable=(FloatWritable)expected;
if (!value.equals(expectedWritable.get())) {
TestCase.fail("Float field mismatch (expected " + expected + " found "+ value+ ")");
}
}
break;
case DOUBLE:
{
Double value=deserializeRead.readDouble();
DoubleWritable expectedWritable=(DoubleWritable)expected;
if (!value.equals(expectedWritable.get())) {
TestCase.fail("Double field mismatch (expected " + expected + " found "+ value+ ")");
}
}
break;
case STRING:
{
DeserializeRead.ReadStringResults readStringResults=deserializeRead.createReadStringResults();
deserializeRead.readString(readStringResults);
char[] charsBuffer=new char[readStringResults.bytes.length];
for (int c=0; c < charsBuffer.length; c++) {
charsBuffer[c]=(char)(readStringResults.bytes[c] & 0xFF);
}
byte[] stringBytes=Arrays.copyOfRange(readStringResults.bytes,readStringResults.start,readStringResults.start + readStringResults.length);
char[] charsRange=new char[stringBytes.length];
for (int c=0; c < charsRange.length; c++) {
charsRange[c]=(char)(stringBytes[c] & 0xFF);
}
Text text=new Text(stringBytes);
String value=text.toString();
Text expectedWritable=(Text)expected;
if (!value.equals(expectedWritable.toString())) {
TestCase.fail("String field mismatch (expected '" + expectedWritable.toString() + "' found '"+ value+ "')");
}
}
break;
case CHAR:
{
DeserializeRead.ReadHiveCharResults readHiveCharResults=deserializeRead.createReadHiveCharResults();
deserializeRead.readHiveChar(readHiveCharResults);
HiveChar hiveChar=readHiveCharResults.getHiveChar();
HiveCharWritable expectedWritable=(HiveCharWritable)expected;
if (!hiveChar.equals(expectedWritable.getHiveChar())) {
TestCase.fail("Char field mismatch (expected '" + expectedWritable.getHiveChar() + "' found '"+ hiveChar+ "')");
}
}
break;
case VARCHAR:
{
DeserializeRead.ReadHiveVarcharResults readHiveVarcharResults=deserializeRead.createReadHiveVarcharResults();
deserializeRead.readHiveVarchar(readHiveVarcharResults);
HiveVarchar hiveVarchar=readHiveVarcharResults.getHiveVarchar();
HiveVarcharWritable expectedWritable=(HiveVarcharWritable)expected;
if (!hiveVarchar.equals(expectedWritable.getHiveVarchar())) {
TestCase.fail("Varchar field mismatch (expected '" + expectedWritable.getHiveVarchar() + "' found '"+ hiveVarchar+ "')");
}
}
break;
case DECIMAL:
{
DeserializeRead.ReadDecimalResults readDecimalResults=deserializeRead.createReadDecimalResults();
deserializeRead.readHiveDecimal(readDecimalResults);
HiveDecimal value=readDecimalResults.getHiveDecimal();
if (value == null) {
TestCase.fail("Decimal field evaluated to NULL");
}
HiveDecimalWritable expectedWritable=(HiveDecimalWritable)expected;
if (!value.equals(expectedWritable.getHiveDecimal())) {
DecimalTypeInfo decimalTypeInfo=(DecimalTypeInfo)primitiveTypeInfo;
int precision=decimalTypeInfo.getPrecision();
int scale=decimalTypeInfo.getScale();
TestCase.fail("Decimal field mismatch (expected " + expectedWritable.getHiveDecimal() + " found "+ value.toString()+ ") precision "+ precision+ ", scale "+ scale);
}
}
break;
case TIMESTAMP:
{
DeserializeRead.ReadTimestampResults readTimestampResults=deserializeRead.createReadTimestampResults();
deserializeRead.readTimestamp(readTimestampResults);
Timestamp value=readTimestampResults.getTimestamp();
TimestampWritable expectedWritable=(TimestampWritable)expected;
if (!value.equals(expectedWritable.getTimestamp())) {
TestCase.fail("Timestamp field mismatch (expected " + expectedWritable.getTimestamp() + " found "+ value.toString()+ ")");
}
}
break;
case INTERVAL_YEAR_MONTH:
{
DeserializeRead.ReadIntervalYearMonthResults readIntervalYearMonthResults=deserializeRead.createReadIntervalYearMonthResults();
deserializeRead.readIntervalYearMonth(readIntervalYearMonthResults);
HiveIntervalYearMonth value=readIntervalYearMonthResults.getHiveIntervalYearMonth();
HiveIntervalYearMonthWritable expectedWritable=(HiveIntervalYearMonthWritable)expected;
HiveIntervalYearMonth expectedValue=expectedWritable.getHiveIntervalYearMonth();
if (!value.equals(expectedValue)) {
TestCase.fail("HiveIntervalYearMonth field mismatch (expected " + expectedValue + " found "+ value.toString()+ ")");
}
}
break;
case INTERVAL_DAY_TIME:
{
DeserializeRead.ReadIntervalDayTimeResults readIntervalDayTimeResults=deserializeRead.createReadIntervalDayTimeResults();
deserializeRead.readIntervalDayTime(readIntervalDayTimeResults);
HiveIntervalDayTime value=readIntervalDayTimeResults.getHiveIntervalDayTime();
HiveIntervalDayTimeWritable expectedWritable=(HiveIntervalDayTimeWritable)expected;
HiveIntervalDayTime expectedValue=expectedWritable.getHiveIntervalDayTime();
if (!value.equals(expectedValue)) {
TestCase.fail("HiveIntervalDayTime field mismatch (expected " + expectedValue + " found "+ value.toString()+ ")");
}
}
break;
case BINARY:
{
DeserializeRead.ReadBinaryResults readBinaryResults=deserializeRead.createReadBinaryResults();
deserializeRead.readBinary(readBinaryResults);
byte[] byteArray=Arrays.copyOfRange(readBinaryResults.bytes,readBinaryResults.start,readBinaryResults.start + readBinaryResults.length);
BytesWritable expectedWritable=(BytesWritable)expected;
if (byteArray.length != expectedWritable.getLength()) {
TestCase.fail("Byte Array field mismatch (expected " + expected + " found "+ byteArray+ ")");
}
byte[] expectedBytes=expectedWritable.getBytes();
for (int b=0; b < byteArray.length; b++) {
if (byteArray[b] != expectedBytes[b]) {
TestCase.fail("Byte Array field mismatch (expected " + expected + " found "+ byteArray+ ")");
}
}
}
break;
default :
throw new HiveException("Unexpected primitive category " + primitiveCategory);
}
}
deserializeRead.extraFieldsCheck();
TestCase.assertTrue(!deserializeRead.readBeyondConfiguredFieldsWarned());
TestCase.assertTrue(!deserializeRead.readBeyondBufferRangeWarned());
TestCase.assertTrue(!deserializeRead.bufferRangeHasExtraDataWarned());
}
