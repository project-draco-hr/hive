{
  LinkedList<DtMismatch> bad=new LinkedList<>();
  for (  String timeZone : TimeZone.getAvailableIDs()) {
    TimeZone previousDefault=TimeZone.getDefault();
    TimeZone.setDefault(TimeZone.getTimeZone(timeZone));
    assertEquals("Default timezone should now be " + timeZone,timeZone,TimeZone.getDefault().getID());
    ExecutorService threadPool=Executors.newFixedThreadPool(1);
    try {
      threadPool.submit(new DateTestCallable(bad,timeZone)).get();
    }
  finally {
      threadPool.shutdown();
      TimeZone.setDefault(previousDefault);
    }
  }
  StringBuilder errors=new StringBuilder("\nDATE MISMATCH:\n");
  for (  DtMismatch dm : bad) {
    errors.append("E ").append(dm.tz).append(": ").append(dm.expected).append(" != ").append(dm.found).append("\n");
  }
  LOG.error(errors.toString());
  if (!bad.isEmpty())   throw new Exception(bad.size() + " mismatches, see logs");
}
