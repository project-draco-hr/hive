{
  if (closeCalled) {
    return;
  }
  closeCalled=true;
  if (inputFileChanged || !firstFetchHappened) {
    for (    Map.Entry<String,MergeQueue> entry : aliasToMergeQueue.entrySet()) {
      String alias=entry.getKey();
      MergeQueue mergeQueue=entry.getValue();
      setUpFetchContexts(alias,mergeQueue);
    }
    firstFetchHappened=true;
    for (    Byte t : order) {
      if (t != (byte)posBigTable) {
        fetchNextGroup(t);
      }
    }
    inputFileChanged=false;
  }
  joinFinalLeftData();
  for (  Byte alias : order) {
    if (alias != (byte)posBigTable) {
      fetchDone[alias]=false;
    }
    foundNextKeyGroup[alias]=false;
  }
  localWorkInited=false;
  super.closeOp(abort);
  for (  Map.Entry<String,MergeQueue> entry : aliasToMergeQueue.entrySet()) {
    String alias=entry.getKey();
    MergeQueue mergeQueue=entry.getValue();
    Operator forwardOp=localWork.getAliasToWork().get(alias);
    forwardOp.close(abort);
    mergeQueue.clearFetchContext();
  }
}
