{
  if (localWork == null || localWorkInited) {
    return;
  }
  localWorkInited=true;
  this.localWork=localWork;
  fetchOperators=new HashMap<String,FetchOperator>();
  Map<FetchOperator,JobConf> fetchOpJobConfMap=new HashMap<FetchOperator,JobConf>();
  for (  Map.Entry<String,FetchWork> entry : localWork.getAliasToFetchWork().entrySet()) {
    JobConf jobClone=new JobConf(hconf);
    Operator<? extends Serializable> tableScan=localWork.getAliasToWork().get(entry.getKey());
    if (tableScan instanceof TableScanOperator) {
      ArrayList<Integer> list=((TableScanOperator)tableScan).getNeededColumnIDs();
      if (list != null) {
        ColumnProjectionUtils.appendReadColumnIDs(jobClone,list);
      }
    }
 else {
      ColumnProjectionUtils.setFullyReadColumns(jobClone);
    }
    FetchOperator fetchOp=new FetchOperator(entry.getValue(),jobClone);
    fetchOpJobConfMap.put(fetchOp,jobClone);
    fetchOperators.put(entry.getKey(),fetchOp);
    if (l4j != null) {
      l4j.info("fetchoperator for " + entry.getKey() + " created");
    }
  }
  for (  Map.Entry<String,FetchOperator> entry : fetchOperators.entrySet()) {
    Operator<? extends Serializable> forwardOp=localWork.getAliasToWork().get(entry.getKey());
    forwardOp.setExecContext(this.getExecContext());
    FetchOperator fetchOp=entry.getValue();
    JobConf jobConf=fetchOpJobConfMap.get(fetchOp);
    if (jobConf == null) {
      jobConf=this.getExecContext().getJc();
    }
    forwardOp.initialize(jobConf,new ObjectInspector[]{fetchOp.getOutputObjectInspector()});
    l4j.info("fetchoperator for " + entry.getKey() + " initialized");
  }
}
