{
  if (o[0] == null) {
    forward(nullCols);
    return;
  }
  if (!pathParsed) {
    for (int i=0; i < numCols; ++i) {
      paths[i]=((StringObjectInspector)inputOIs[i + 1]).getPrimitiveJavaObject(o[i + 1]);
    }
    pathParsed=true;
  }
  String jsonStr=((StringObjectInspector)inputOIs[0]).getPrimitiveJavaObject(o[0]);
  if (jsonStr == null) {
    forward(nullCols);
    return;
  }
  try {
    Object jsonObj=jsonObjectCache.get(jsonStr);
    if (jsonObj == null) {
      try {
        jsonObj=MAPPER.readValue(jsonStr,MAP_TYPE);
      }
 catch (      Exception e) {
        reportInvalidJson(jsonStr);
        forward(nullCols);
        return;
      }
      jsonObjectCache.put(jsonStr,jsonObj);
    }
    if (!(jsonObj instanceof Map)) {
      reportInvalidJson(jsonStr);
      forward(nullCols);
      return;
    }
    for (int i=0; i < numCols; ++i) {
      if (retCols[i] == null) {
        retCols[i]=cols[i];
      }
      Object extractObject=((Map<String,Object>)jsonObj).get(paths[i]);
      if (extractObject instanceof Map || extractObject instanceof List) {
        retCols[i].set(MAPPER.writeValueAsString(extractObject));
      }
 else       if (extractObject != null) {
        retCols[i].set(extractObject.toString());
      }
 else {
        retCols[i]=null;
      }
    }
    forward(retCols);
    return;
  }
 catch (  Throwable e) {
    LOG.error("JSON parsing/evaluation exception" + e);
    forward(nullCols);
  }
}
