{
  TezRootInputInitializerContext rootInputContext=getContext();
  MRInputUserPayloadProto userPayloadProto=MRHelpers.parseMRInputPayload(rootInputContext.getUserPayload());
  Configuration conf=MRHelpers.createConfFromByteString(userPayloadProto.getConfigurationBytes());
  boolean sendSerializedEvents=conf.getBoolean("mapreduce.tez.input.initializer.serialize.event.payload",true);
  JobConf jobConf=new JobConf(conf);
  ShimLoader.getHadoopShims().getMergedCredentials(jobConf);
  InputSplitInfoMem inputSplitInfo=null;
  String realInputFormatName=userPayloadProto.getInputFormatName();
  if (realInputFormatName != null && !realInputFormatName.isEmpty()) {
    InputFormat<?,?> inputFormat=(InputFormat<?,?>)ReflectionUtils.newInstance(Class.forName(realInputFormatName),jobConf);
    int totalResource=rootInputContext.getTotalAvailableResource().getMemory();
    int taskResource=rootInputContext.getVertexTaskResource().getMemory();
    int availableSlots=totalResource / taskResource;
    float waves=conf.getFloat(TezConfiguration.TEZ_AM_GROUPING_SPLIT_WAVES,TezConfiguration.TEZ_AM_GROUPING_SPLIT_WAVES_DEFAULT);
    InputSplit[] splits=inputFormat.getSplits(jobConf,(int)(availableSlots * waves));
    LOG.info("Number of input splits: " + splits.length + ". "+ availableSlots+ " available slots, "+ waves+ " waves. Input format is: "+ realInputFormatName);
    Multimap<Integer,InputSplit> groupedSplits=generateGroupedSplits(jobConf,conf,splits,waves,availableSlots);
    InputSplit[] flatSplits=groupedSplits.values().toArray(new InputSplit[0]);
    LOG.info("Number of grouped splits: " + flatSplits.length);
    List<TaskLocationHint> locationHints=grouper.createTaskLocationHints(flatSplits);
    Utilities.clearWork(jobConf);
    inputSplitInfo=new InputSplitInfoMem(flatSplits,locationHints,flatSplits.length,null,jobConf);
  }
 else {
    inputSplitInfo=MRHelpers.generateInputSplitsToMem(jobConf);
  }
  return createEventList(sendSerializedEvents,inputSplitInfo);
}
