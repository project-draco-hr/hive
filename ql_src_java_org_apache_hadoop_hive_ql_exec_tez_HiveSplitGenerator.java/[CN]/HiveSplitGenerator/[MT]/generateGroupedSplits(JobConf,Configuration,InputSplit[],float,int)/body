{
  MapWork work=Utilities.getMapWork(jobConf);
  Multimap<Integer,InputSplit> bucketSplitMultiMap=ArrayListMultimap.<Integer,InputSplit>create();
  Class<?> previousInputFormatClass=null;
  String previousDeserializerClass=null;
  Map<Map<String,PartitionDesc>,Map<String,PartitionDesc>> cache=new HashMap<Map<String,PartitionDesc>,Map<String,PartitionDesc>>();
  int i=0;
  for (  InputSplit s : splits) {
    Path path=((FileSplit)s).getPath();
    PartitionDesc pd=HiveFileFormatUtils.getPartitionDescFromPathRecursively(work.getPathToPartitionInfo(),path,cache);
    String currentDeserializerClass=pd.getDeserializerClassName();
    Class<?> currentInputFormatClass=pd.getInputFileFormatClass();
    if ((currentInputFormatClass != previousInputFormatClass) || (!currentDeserializerClass.equals(previousDeserializerClass))) {
      ++i;
    }
    previousInputFormatClass=currentInputFormatClass;
    previousDeserializerClass=currentDeserializerClass;
    if (LOG.isDebugEnabled()) {
      LOG.debug("Adding split " + path + " to src group "+ i);
    }
    bucketSplitMultiMap.put(i,s);
  }
  LOG.info("# Src groups for split generation: " + (i + 1));
  Multimap<Integer,InputSplit> groupedSplits=grouper.group(jobConf,bucketSplitMultiMap,availableSlots,waves);
  return groupedSplits;
}
