{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case COLS:
      if (field.type == TType.LIST) {
{
          TList _list9=iprot.readListBegin();
          this.cols=new ArrayList<FieldSchema>(_list9.size);
          for (int _i10=0; _i10 < _list9.size; ++_i10) {
            FieldSchema _elem11;
            _elem11=new FieldSchema();
            _elem11.read(iprot);
            this.cols.add(_elem11);
          }
          iprot.readListEnd();
        }
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case LOCATION:
  if (field.type == TType.STRING) {
    this.location=iprot.readString();
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case INPUTFORMAT:
if (field.type == TType.STRING) {
this.inputFormat=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case OUTPUTFORMAT:
if (field.type == TType.STRING) {
this.outputFormat=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case COMPRESSED:
if (field.type == TType.BOOL) {
this.compressed=iprot.readBool();
this.__isset.compressed=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case NUMBUCKETS:
if (field.type == TType.I32) {
this.numBuckets=iprot.readI32();
this.__isset.numBuckets=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case SERDEINFO:
if (field.type == TType.STRUCT) {
this.serdeInfo=new SerDeInfo();
this.serdeInfo.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case BUCKETCOLS:
if (field.type == TType.LIST) {
{
TList _list12=iprot.readListBegin();
this.bucketCols=new ArrayList<String>(_list12.size);
for (int _i13=0; _i13 < _list12.size; ++_i13) {
String _elem14;
_elem14=iprot.readString();
this.bucketCols.add(_elem14);
}
iprot.readListEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case SORTCOLS:
if (field.type == TType.LIST) {
{
TList _list15=iprot.readListBegin();
this.sortCols=new ArrayList<Order>(_list15.size);
for (int _i16=0; _i16 < _list15.size; ++_i16) {
Order _elem17;
_elem17=new Order();
_elem17.read(iprot);
this.sortCols.add(_elem17);
}
iprot.readListEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case PARAMETERS:
if (field.type == TType.MAP) {
{
TMap _map18=iprot.readMapBegin();
this.parameters=new HashMap<String,String>(2 * _map18.size);
for (int _i19=0; _i19 < _map18.size; ++_i19) {
String _key20;
String _val21;
_key20=iprot.readString();
_val21=iprot.readString();
this.parameters.put(_key20,_val21);
}
iprot.readMapEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
