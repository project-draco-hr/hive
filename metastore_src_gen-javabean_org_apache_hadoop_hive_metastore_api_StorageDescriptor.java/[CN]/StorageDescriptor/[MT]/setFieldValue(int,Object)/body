{
switch (fieldID) {
case COLS:
    if (value == null) {
      unsetCols();
    }
 else {
      setCols((List<FieldSchema>)value);
    }
  break;
case LOCATION:
if (value == null) {
  unsetLocation();
}
 else {
  setLocation((String)value);
}
break;
case INPUTFORMAT:
if (value == null) {
unsetInputFormat();
}
 else {
setInputFormat((String)value);
}
break;
case OUTPUTFORMAT:
if (value == null) {
unsetOutputFormat();
}
 else {
setOutputFormat((String)value);
}
break;
case COMPRESSED:
if (value == null) {
unsetCompressed();
}
 else {
setCompressed((Boolean)value);
}
break;
case NUMBUCKETS:
if (value == null) {
unsetNumBuckets();
}
 else {
setNumBuckets((Integer)value);
}
break;
case SERDEINFO:
if (value == null) {
unsetSerdeInfo();
}
 else {
setSerdeInfo((SerDeInfo)value);
}
break;
case BUCKETCOLS:
if (value == null) {
unsetBucketCols();
}
 else {
setBucketCols((List<String>)value);
}
break;
case SORTCOLS:
if (value == null) {
unsetSortCols();
}
 else {
setSortCols((List<Order>)value);
}
break;
case PARAMETERS:
if (value == null) {
unsetParameters();
}
 else {
setParameters((Map<String,String>)value);
}
break;
default :
throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
}
}
