{
  Map<String,String> partSpec=new TreeMap<String,String>();
  List<HCatFieldSchema> partKeys=null;
  if (partitionSchema != null) {
    partKeys=partitionSchema.getFields();
    if (partKeys.size() != partitionValues.size()) {
      throw new IllegalArgumentException("Partition key size differs from partition value size");
    }
    for (int i=0; i < partKeys.size(); ++i) {
      HCatFieldSchema partKey=partKeys.get(i);
      if (partKey.getType() != HCatFieldSchema.Type.STRING) {
        throw new IllegalArgumentException("Partition key type string is only supported");
      }
      partSpec.put(partKey.getName(),partitionValues.get(i));
    }
  }
  StorerInfo storerInfo=new StorerInfo(isdname,osdname,new Properties());
  OutputJobInfo outputJobInfo=OutputJobInfo.create(dbname,tablename,partSpec,null,null);
  org.apache.hadoop.hive.ql.metadata.Table tbl=new org.apache.hadoop.hive.ql.metadata.Table(dbname,tablename);
  Table table=tbl.getTTable();
  table.getParameters().put(HCatConstants.HCAT_ISD_CLASS,isdname);
  table.getParameters().put(HCatConstants.HCAT_OSD_CLASS,osdname);
  try {
    String partname=null;
    if ((partKeys != null) && !partKeys.isEmpty()) {
      List<FieldSchema> partSchema=HCatSchemaUtils.getFieldSchemas(partKeys);
      table.setPartitionKeys(partSchema);
      partname=Warehouse.makePartName(partSchema,partitionValues);
    }
 else {
      partname="data";
    }
    StorageDescriptor sd=table.getSd();
    sd.setLocation(location);
    String dataLocation=location + "/" + partname;
    outputJobInfo.setTableInfo(new HCatTableInfo(dbname,tablename,columnSchema,null,storerInfo,table));
    outputJobInfo.setOutputSchema(columnSchema);
    outputJobInfo.setLocation(dataLocation);
    setPartDetails(outputJobInfo,columnSchema,partSpec);
    sd.setCols(HCatUtil.getFieldSchemaList(outputJobInfo.getOutputSchema().getFields()));
    sd.setInputFormat(ifname);
    sd.setOutputFormat(ofname);
    SerDeInfo serdeInfo=sd.getSerdeInfo();
    serdeInfo.setSerializationLib(serializationLib);
    Configuration conf=job.getConfiguration();
    conf.set(HCatConstants.HCAT_KEY_OUTPUT_INFO,HCatUtil.serialize(outputJobInfo));
  }
 catch (  IOException e) {
    throw new HCatException(ErrorType.ERROR_SET_OUTPUT,e);
  }
catch (  MetaException e) {
    throw new HCatException(ErrorType.ERROR_SET_OUTPUT,e);
  }
}
