{
  if (ast.getToken() == null) {
    return;
  }
switch (ast.getToken().getType()) {
case HiveParser.TOK_SELECTDI:
case HiveParser.TOK_SELECT:
    dispatcher.dispatch(ASTEvent.SELECT_CLAUSE,ast);
  break;
case HiveParser.TOK_WHERE:
dispatcher.dispatch(ASTEvent.WHERE_CLAUSE,ast);
break;
case HiveParser.TOK_DESTINATION:
dispatcher.dispatch(ASTEvent.DESTINATION,ast);
break;
case HiveParser.TOK_FROM:
CommonTree frm=(CommonTree)ast.getChild(0);
if (frm.getToken().getType() == HiveParser.TOK_TABREF) {
dispatcher.dispatch(ASTEvent.SRC_TABLE,ast);
}
 else if (frm.getToken().getType() == HiveParser.TOK_SUBQUERY) {
dispatcher.dispatch(ASTEvent.SUBQUERY,ast);
}
 else if (ParseUtils.isJoinToken(frm)) {
dispatcher.dispatch(ASTEvent.JOIN_CLAUSE,ast);
}
break;
case HiveParser.TOK_CLUSTERBY:
dispatcher.dispatch(ASTEvent.CLUSTERBY_CLAUSE,ast);
break;
case HiveParser.TOK_GROUPBY:
dispatcher.dispatch(ASTEvent.GROUPBY_CLAUSE,ast);
break;
case HiveParser.TOK_LIMIT:
dispatcher.dispatch(ASTEvent.LIMIT_CLAUSE,ast);
break;
default :
break;
}
int child_count=ast.getChildCount();
for (int child_pos=0; child_pos < child_count; ++child_pos) {
process((CommonTree)ast.getChild(child_pos));
}
}
