{
  Map<Rule,NodeProcessor> opRules=new LinkedHashMap<Rule,NodeProcessor>();
  NodeProcessor nodeProcessor=new NodeProcessor(){
    @Override public Object process(    Node nd,    Stack<Node> stack,    NodeProcessorCtx procCtx,    Object... nodeOutputs) throws SemanticException {
      for (      Node ancestor : stack) {
        if (nd == ancestor) {
          break;
        }
        if (!FunctionRegistry.isOpAnd((ExprNodeDesc)ancestor)) {
          return nd;
        }
      }
      return analyzeExpr((ExprNodeGenericFuncDesc)nd,searchConditions,nodeOutputs);
    }
  }
;
  Dispatcher disp=new DefaultRuleDispatcher(nodeProcessor,opRules,null);
  GraphWalker ogw=new DefaultGraphWalker(disp);
  ArrayList<Node> topNodes=new ArrayList<Node>();
  topNodes.add(predicate);
  HashMap<Node,Object> nodeOutput=new HashMap<Node,Object>();
  try {
    ogw.startWalking(topNodes,nodeOutput);
  }
 catch (  SemanticException ex) {
    throw new RuntimeException(ex);
  }
  ExprNodeDesc residualPredicate=(ExprNodeDesc)nodeOutput.get(predicate);
  return residualPredicate;
}
