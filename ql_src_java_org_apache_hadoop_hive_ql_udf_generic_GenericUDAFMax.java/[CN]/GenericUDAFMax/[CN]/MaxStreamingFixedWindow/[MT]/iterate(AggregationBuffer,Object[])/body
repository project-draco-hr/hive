{
  State s=(State)agg;
  Object o=parameters[0];
  while (!s.maxChain.isEmpty()) {
    if (!removeLast(o,s.maxChain.getLast()[0])) {
      break;
    }
 else {
      s.maxChain.removeLast();
    }
  }
  if (s.numPreceding != BoundarySpec.UNBOUNDED_AMOUNT || s.maxChain.isEmpty()) {
    o=o == null ? null : ObjectInspectorUtils.copyToStandardObject(o,inputOI(),ObjectInspectorCopyOption.JAVA);
    s.maxChain.addLast(new Object[]{o,s.numRows});
  }
  if (s.numRows >= (s.numFollowing)) {
    s.results.add(s.maxChain.getFirst()[0]);
  }
  s.numRows++;
  int fIdx=(Integer)s.maxChain.getFirst()[1];
  if (s.numPreceding != BoundarySpec.UNBOUNDED_AMOUNT && s.numRows > fIdx + s.numPreceding + s.numFollowing) {
    s.maxChain.removeFirst();
  }
}
