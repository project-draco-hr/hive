{
  if (o == null) {
    writeByte(buffer,nullMarker,invert);
    return;
  }
  writeByte(buffer,notNullMarker,invert);
switch (oi.getCategory()) {
case PRIMITIVE:
{
      PrimitiveObjectInspector poi=(PrimitiveObjectInspector)oi;
switch (poi.getPrimitiveCategory()) {
case VOID:
{
          return;
        }
case BOOLEAN:
{
        boolean v=((BooleanObjectInspector)poi).get(o);
        writeByte(buffer,(byte)(v ? 2 : 1),invert);
        return;
      }
case BYTE:
{
      ByteObjectInspector boi=(ByteObjectInspector)poi;
      byte v=boi.get(o);
      writeByte(buffer,(byte)(v ^ 0x80),invert);
      return;
    }
case SHORT:
{
    ShortObjectInspector spoi=(ShortObjectInspector)poi;
    short v=spoi.get(o);
    serializeShort(buffer,v,invert);
    return;
  }
case INT:
{
  IntObjectInspector ioi=(IntObjectInspector)poi;
  int v=ioi.get(o);
  serializeInt(buffer,v,invert);
  return;
}
case LONG:
{
LongObjectInspector loi=(LongObjectInspector)poi;
long v=loi.get(o);
serializeLong(buffer,v,invert);
return;
}
case FLOAT:
{
FloatObjectInspector foi=(FloatObjectInspector)poi;
serializeFloat(buffer,foi.get(o),invert);
return;
}
case DOUBLE:
{
DoubleObjectInspector doi=(DoubleObjectInspector)poi;
serializeDouble(buffer,doi.get(o),invert);
return;
}
case STRING:
{
StringObjectInspector soi=(StringObjectInspector)poi;
Text t=soi.getPrimitiveWritableObject(o);
serializeBytes(buffer,t.getBytes(),t.getLength(),invert);
return;
}
case CHAR:
{
HiveCharObjectInspector hcoi=(HiveCharObjectInspector)poi;
HiveCharWritable hc=hcoi.getPrimitiveWritableObject(o);
Text t=hc.getStrippedValue();
serializeBytes(buffer,t.getBytes(),t.getLength(),invert);
return;
}
case VARCHAR:
{
HiveVarcharObjectInspector hcoi=(HiveVarcharObjectInspector)poi;
HiveVarcharWritable hc=hcoi.getPrimitiveWritableObject(o);
Text t=hc.getTextValue();
serializeBytes(buffer,t.getBytes(),t.getLength(),invert);
return;
}
case BINARY:
{
BinaryObjectInspector baoi=(BinaryObjectInspector)poi;
BytesWritable ba=baoi.getPrimitiveWritableObject(o);
byte[] toSer=new byte[ba.getLength()];
System.arraycopy(ba.getBytes(),0,toSer,0,ba.getLength());
serializeBytes(buffer,toSer,ba.getLength(),invert);
return;
}
case DATE:
{
DateObjectInspector doi=(DateObjectInspector)poi;
int v=doi.getPrimitiveWritableObject(o).getDays();
serializeInt(buffer,v,invert);
return;
}
case TIMESTAMP:
{
TimestampObjectInspector toi=(TimestampObjectInspector)poi;
TimestampWritable t=toi.getPrimitiveWritableObject(o);
serializeTimestampWritable(buffer,t,invert);
return;
}
case INTERVAL_YEAR_MONTH:
{
HiveIntervalYearMonthObjectInspector ioi=(HiveIntervalYearMonthObjectInspector)poi;
HiveIntervalYearMonth intervalYearMonth=ioi.getPrimitiveJavaObject(o);
serializeHiveIntervalYearMonth(buffer,intervalYearMonth,invert);
return;
}
case INTERVAL_DAY_TIME:
{
HiveIntervalDayTimeObjectInspector ioi=(HiveIntervalDayTimeObjectInspector)poi;
HiveIntervalDayTime intervalDayTime=ioi.getPrimitiveJavaObject(o);
serializeHiveIntervalDayTime(buffer,intervalDayTime,invert);
return;
}
case DECIMAL:
{
HiveDecimalObjectInspector boi=(HiveDecimalObjectInspector)poi;
HiveDecimal dec=boi.getPrimitiveJavaObject(o);
serializeHiveDecimal(buffer,dec,invert);
return;
}
default :
{
throw new RuntimeException("Unrecognized type: " + poi.getPrimitiveCategory());
}
}
}
case LIST:
{
ListObjectInspector loi=(ListObjectInspector)oi;
ObjectInspector eoi=loi.getListElementObjectInspector();
int size=loi.getListLength(o);
for (int eid=0; eid < size; eid++) {
writeByte(buffer,(byte)1,invert);
serialize(buffer,loi.getListElement(o,eid),eoi,invert,nullMarker,notNullMarker);
}
writeByte(buffer,(byte)0,invert);
return;
}
case MAP:
{
MapObjectInspector moi=(MapObjectInspector)oi;
ObjectInspector koi=moi.getMapKeyObjectInspector();
ObjectInspector voi=moi.getMapValueObjectInspector();
Map<?,?> map=moi.getMap(o);
for (Map.Entry<?,?> entry : map.entrySet()) {
writeByte(buffer,(byte)1,invert);
serialize(buffer,entry.getKey(),koi,invert,nullMarker,notNullMarker);
serialize(buffer,entry.getValue(),voi,invert,nullMarker,notNullMarker);
}
writeByte(buffer,(byte)0,invert);
return;
}
case STRUCT:
{
StructObjectInspector soi=(StructObjectInspector)oi;
List<? extends StructField> fields=soi.getAllStructFieldRefs();
for (int i=0; i < fields.size(); i++) {
serialize(buffer,soi.getStructFieldData(o,fields.get(i)),fields.get(i).getFieldObjectInspector(),invert,nullMarker,notNullMarker);
}
return;
}
case UNION:
{
UnionObjectInspector uoi=(UnionObjectInspector)oi;
byte tag=uoi.getTag(o);
writeByte(buffer,tag,invert);
serialize(buffer,uoi.getField(o),uoi.getObjectInspectors().get(tag),invert,nullMarker,notNullMarker);
return;
}
default :
{
throw new RuntimeException("Unrecognized type: " + oi.getCategory());
}
}
}
