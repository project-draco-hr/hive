{
  if (o == null) {
    buffer.write((byte)0,invert);
    return;
  }
  buffer.write((byte)1,invert);
switch (oi.getCategory()) {
case PRIMITIVE:
{
      PrimitiveObjectInspector poi=(PrimitiveObjectInspector)oi;
switch (poi.getPrimitiveCategory()) {
case VOID:
{
          return;
        }
case BOOLEAN:
{
        boolean v=((BooleanObjectInspector)poi).get(o);
        buffer.write((byte)(v ? 2 : 1),invert);
        return;
      }
case BYTE:
{
      ByteObjectInspector boi=(ByteObjectInspector)poi;
      byte v=boi.get(o);
      buffer.write((byte)(v ^ 0x80),invert);
      return;
    }
case SHORT:
{
    ShortObjectInspector spoi=(ShortObjectInspector)poi;
    short v=spoi.get(o);
    buffer.write((byte)((v >> 8) ^ 0x80),invert);
    buffer.write((byte)v,invert);
    return;
  }
case INT:
{
  IntObjectInspector ioi=(IntObjectInspector)poi;
  int v=ioi.get(o);
  serializeInt(buffer,v,invert);
  return;
}
case LONG:
{
LongObjectInspector loi=(LongObjectInspector)poi;
long v=loi.get(o);
buffer.write((byte)((v >> 56) ^ 0x80),invert);
buffer.write((byte)(v >> 48),invert);
buffer.write((byte)(v >> 40),invert);
buffer.write((byte)(v >> 32),invert);
buffer.write((byte)(v >> 24),invert);
buffer.write((byte)(v >> 16),invert);
buffer.write((byte)(v >> 8),invert);
buffer.write((byte)v,invert);
return;
}
case FLOAT:
{
FloatObjectInspector foi=(FloatObjectInspector)poi;
int v=Float.floatToIntBits(foi.get(o));
if ((v & (1 << 31)) != 0) {
v=~v;
}
 else {
v=v ^ (1 << 31);
}
buffer.write((byte)(v >> 24),invert);
buffer.write((byte)(v >> 16),invert);
buffer.write((byte)(v >> 8),invert);
buffer.write((byte)v,invert);
return;
}
case DOUBLE:
{
DoubleObjectInspector doi=(DoubleObjectInspector)poi;
long v=Double.doubleToLongBits(doi.get(o));
if ((v & (1L << 63)) != 0) {
v=~v;
}
 else {
v=v ^ (1L << 63);
}
buffer.write((byte)(v >> 56),invert);
buffer.write((byte)(v >> 48),invert);
buffer.write((byte)(v >> 40),invert);
buffer.write((byte)(v >> 32),invert);
buffer.write((byte)(v >> 24),invert);
buffer.write((byte)(v >> 16),invert);
buffer.write((byte)(v >> 8),invert);
buffer.write((byte)v,invert);
return;
}
case STRING:
{
StringObjectInspector soi=(StringObjectInspector)poi;
Text t=soi.getPrimitiveWritableObject(o);
serializeBytes(buffer,t.getBytes(),t.getLength(),invert);
return;
}
case BINARY:
{
BinaryObjectInspector baoi=(BinaryObjectInspector)poi;
BytesWritable ba=baoi.getPrimitiveWritableObject(o);
byte[] toSer=new byte[ba.getLength()];
System.arraycopy(ba.getBytes(),0,toSer,0,ba.getLength());
serializeBytes(buffer,toSer,ba.getLength(),invert);
return;
}
case DATE:
{
DateObjectInspector doi=(DateObjectInspector)poi;
int v=doi.getPrimitiveWritableObject(o).getDays();
serializeInt(buffer,v,invert);
return;
}
case TIMESTAMP:
{
TimestampObjectInspector toi=(TimestampObjectInspector)poi;
TimestampWritable t=toi.getPrimitiveWritableObject(o);
byte[] data=t.getBinarySortable();
for (int i=0; i < data.length; i++) {
buffer.write(data[i],invert);
}
return;
}
case DECIMAL:
{
HiveDecimalObjectInspector boi=(HiveDecimalObjectInspector)poi;
HiveDecimal dec=boi.getPrimitiveJavaObject(o);
int sign=dec.compareTo(HiveDecimal.ZERO);
dec=dec.abs();
int factor=dec.precision() - dec.scale();
factor=sign == 1 ? factor : -factor;
dec.scaleByPowerOfTen(Math.abs(dec.scale()));
String digits=dec.unscaledValue().toString();
buffer.write((byte)(sign + 1),invert);
buffer.write((byte)((factor >> 24) ^ 0x80),invert);
buffer.write((byte)(factor >> 16),invert);
buffer.write((byte)(factor >> 8),invert);
buffer.write((byte)factor,invert);
serializeBytes(buffer,digits.getBytes(decimalCharSet),digits.length(),sign == -1 ? !invert : invert);
return;
}
default :
{
throw new RuntimeException("Unrecognized type: " + poi.getPrimitiveCategory());
}
}
}
case LIST:
{
ListObjectInspector loi=(ListObjectInspector)oi;
ObjectInspector eoi=loi.getListElementObjectInspector();
int size=loi.getListLength(o);
for (int eid=0; eid < size; eid++) {
buffer.write((byte)1,invert);
serialize(buffer,loi.getListElement(o,eid),eoi,invert);
}
buffer.write((byte)0,invert);
return;
}
case MAP:
{
MapObjectInspector moi=(MapObjectInspector)oi;
ObjectInspector koi=moi.getMapKeyObjectInspector();
ObjectInspector voi=moi.getMapValueObjectInspector();
Map<?,?> map=moi.getMap(o);
for (Map.Entry<?,?> entry : map.entrySet()) {
buffer.write((byte)1,invert);
serialize(buffer,entry.getKey(),koi,invert);
serialize(buffer,entry.getValue(),voi,invert);
}
buffer.write((byte)0,invert);
return;
}
case STRUCT:
{
StructObjectInspector soi=(StructObjectInspector)oi;
List<? extends StructField> fields=soi.getAllStructFieldRefs();
for (int i=0; i < fields.size(); i++) {
serialize(buffer,soi.getStructFieldData(o,fields.get(i)),fields.get(i).getFieldObjectInspector(),invert);
}
return;
}
case UNION:
{
UnionObjectInspector uoi=(UnionObjectInspector)oi;
byte tag=uoi.getTag(o);
buffer.write(tag,invert);
serialize(buffer,uoi.getField(o),uoi.getObjectInspectors().get(tag),invert);
return;
}
default :
{
throw new RuntimeException("Unrecognized type: " + oi.getCategory());
}
}
}
