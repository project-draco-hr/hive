{
  SessionState ss=Mockito.spy(SessionState.start(conf).get());
  String query1="testQuery1";
  String query2="testQuery2";
  List<URI> list1=new LinkedList<URI>();
  List<URI> list2=new LinkedList<URI>();
  List<String> addList=new LinkedList<String>();
  list1.add(createURI(TEST_JAR_DIR + "testjar1.jar"));
  list1.add(createURI(TEST_JAR_DIR + "testjar2.jar"));
  list1.add(createURI(TEST_JAR_DIR + "testjar3.jar"));
  list1.add(createURI(TEST_JAR_DIR + "testjar4.jar"));
  list2.add(createURI(TEST_JAR_DIR + "testjar5.jar"));
  list2.add(createURI(TEST_JAR_DIR + "testjar3.jar"));
  list2.add(createURI(TEST_JAR_DIR + "testjar4.jar"));
  Collections.sort(list1);
  Collections.sort(list2);
  Mockito.when(ss.resolveAndDownload(query1,false)).thenReturn(list1);
  Mockito.when(ss.resolveAndDownload(query2,false)).thenReturn(list2);
  addList.add(query1);
  addList.add(query2);
  ss.add_resources(t,addList);
  List<String> deleteList=new LinkedList<String>();
  deleteList.add(list1.get(0).toString());
  ss.delete_resources(t,deleteList);
  Set<String> dependencies=ss.list_resource(t,null);
  LinkedList<URI> actual=new LinkedList<URI>();
  for (  String dependency : dependencies) {
    actual.add(createURI(dependency));
  }
  List<URI> expected=list2;
  Collections.sort(expected);
  Collections.sort(actual);
  assertEquals(expected,actual);
  deleteList.clear();
  deleteList.add(list2.get(0).toString());
  ss.delete_resources(t,deleteList);
  dependencies=ss.list_resource(t,null);
  assertEquals(dependencies.isEmpty(),true);
  ss.close();
}
