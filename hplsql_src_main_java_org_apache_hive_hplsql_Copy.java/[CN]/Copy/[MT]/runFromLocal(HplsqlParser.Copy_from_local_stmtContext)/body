{
  trace(ctx,"COPY FROM LOCAL");
  initFileOptions(ctx.copy_file_option());
  HashMap<String,Pair<String,Long>> src=new HashMap<String,Pair<String,Long>>();
  int cnt=ctx.copy_source().size();
  for (int i=0; i < cnt; i++) {
    createLocalFileList(src,evalPop(ctx.copy_source(i)).toString(),null);
  }
  String dest=evalPop(ctx.copy_target()).toString();
  if (info) {
    info(ctx,"Files to copy: " + src.size() + " ("+ Utils.formatSizeInBytes(srcSizeInBytes)+ ")");
  }
  timer.start();
  File file=new File();
  FileSystem fs=null;
  int succeed=0;
  int failed=0;
  long copiedSize=0;
  try {
    fs=file.createFs();
    boolean multi=false;
    if (src.size() > 1) {
      multi=true;
    }
    for (    Map.Entry<String,Pair<String,Long>> i : src.entrySet()) {
      try {
        Path s=new Path(i.getKey());
        Path d=null;
        if (multi) {
          String relativePath=i.getValue().getLeft();
          if (relativePath == null) {
            d=new Path(dest,s.getName());
          }
 else {
            d=new Path(dest,relativePath + java.io.File.separator + s.getName());
          }
        }
 else {
          d=new Path(dest);
        }
        fs.copyFromLocalFile(delete,overwrite,s,d);
        succeed++;
        long size=i.getValue().getRight();
        copiedSize+=size;
        if (info) {
          info(ctx,"Copied: " + file.resolvePath(d) + " ("+ Utils.formatSizeInBytes(size)+ ")");
        }
      }
 catch (      IOException e) {
        failed++;
        if (!ignore) {
          throw e;
        }
      }
    }
  }
 catch (  IOException e) {
    exec.signal(e);
    exec.setHostCode(1);
    return 1;
  }
 finally {
    long elapsed=timer.stop();
    if (info) {
      info(ctx,"COPY completed: " + succeed + " succeed, "+ failed+ " failed, "+ timer.format()+ ", "+ Utils.formatSizeInBytes(copiedSize)+ ", "+ Utils.formatBytesPerSec(copiedSize,elapsed));
    }
    if (failed == 0) {
      exec.setHostCode(0);
    }
 else {
      exec.setHostCode(1);
    }
    file.close();
  }
  return 0;
}
