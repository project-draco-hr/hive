{
  LlapOptionsProcessor optionsProcessor=new LlapOptionsProcessor();
  LlapOptions options=optionsProcessor.processOptions(args);
  Properties propsDirectOptions=new Properties();
  if (options == null) {
    return;
  }
  Path tmpDir=new Path(options.getDirectory());
  if (conf == null) {
    throw new Exception("Cannot load any configuration to run command");
  }
  FileSystem fs=FileSystem.get(conf);
  FileSystem lfs=FileSystem.getLocal(conf).getRawFileSystem();
  for (  String f : NEEDED_CONFIGS) {
    conf.addResource(f);
    if (conf.getResource(f) == null) {
      throw new Exception("Unable to find required config file: " + f);
    }
  }
  for (  String f : OPTIONAL_CONFIGS) {
    conf.addResource(f);
  }
  conf.reloadConfiguration();
  populateConfWithLlapProperties(conf,options.getConfig());
  if (options.getName() != null) {
    conf.set(ConfVars.LLAP_DAEMON_SERVICE_HOSTS.varname,"@" + options.getName());
    propsDirectOptions.setProperty(ConfVars.LLAP_DAEMON_SERVICE_HOSTS.varname,"@" + options.getName());
  }
  if (options.getSize() != -1) {
    if (options.getCache() != -1) {
      Preconditions.checkArgument(options.getCache() < options.getSize(),"Cache has to be smaller than the container sizing");
    }
    if (options.getXmx() != -1) {
      Preconditions.checkArgument(options.getXmx() < options.getSize(),"Working memory has to be smaller than the container sizing");
    }
    if (HiveConf.getBoolVar(conf,HiveConf.ConfVars.LLAP_ALLOCATOR_DIRECT)) {
      Preconditions.checkArgument(options.getXmx() + options.getCache() < options.getSize(),"Working memory + cache has to be smaller than the containing sizing ");
    }
  }
  final long minAlloc=conf.getInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,-1);
  long containerSize=-1;
  if (options.getSize() != -1) {
    containerSize=options.getSize() / (1024 * 1024);
    Preconditions.checkArgument(containerSize >= minAlloc,"Container size should be greater than minimum allocation(%s)",minAlloc + "m");
    conf.setLong(ConfVars.LLAP_DAEMON_YARN_CONTAINER_MB.varname,containerSize);
    propsDirectOptions.setProperty(ConfVars.LLAP_DAEMON_YARN_CONTAINER_MB.varname,String.valueOf(containerSize));
  }
  if (options.getExecutors() != -1) {
    conf.setLong(ConfVars.LLAP_DAEMON_NUM_EXECUTORS.varname,options.getExecutors());
    propsDirectOptions.setProperty(ConfVars.LLAP_DAEMON_NUM_EXECUTORS.varname,String.valueOf(options.getExecutors()));
  }
  if (options.getIoThreads() != -1) {
    conf.setLong(ConfVars.LLAP_IO_THREADPOOL_SIZE.varname,options.getIoThreads());
    propsDirectOptions.setProperty(ConfVars.LLAP_IO_THREADPOOL_SIZE.varname,String.valueOf(options.getIoThreads()));
  }
  if (options.getCache() != -1) {
    conf.set(HiveConf.ConfVars.LLAP_IO_MEMORY_MAX_SIZE.varname,Long.toString(options.getCache()));
    propsDirectOptions.setProperty(HiveConf.ConfVars.LLAP_IO_MEMORY_MAX_SIZE.varname,Long.toString(options.getCache()));
  }
  if (options.getXmx() != -1) {
    long xmx=(long)(options.getXmx() / (1024 * 1024));
    conf.setLong(ConfVars.LLAP_DAEMON_MEMORY_PER_INSTANCE_MB.varname,xmx);
    propsDirectOptions.setProperty(ConfVars.LLAP_DAEMON_MEMORY_PER_INSTANCE_MB.varname,String.valueOf(xmx));
  }
  if (options.getLlapQueueName() != null && !options.getLlapQueueName().isEmpty()) {
    conf.set(ConfVars.LLAP_DAEMON_QUEUE_NAME.varname,options.getLlapQueueName());
    propsDirectOptions.setProperty(ConfVars.LLAP_DAEMON_QUEUE_NAME.varname,options.getLlapQueueName());
  }
  URL logger=conf.getResource(LlapDaemon.LOG4j2_PROPERTIES_FILE);
  if (null == logger) {
    throw new Exception("Unable to find required config file: llap-daemon-log4j2.properties");
  }
  Path home=new Path(System.getenv("HIVE_HOME"));
  Path scripts=new Path(new Path(new Path(home,"scripts"),"llap"),"bin");
  if (!lfs.exists(home)) {
    throw new Exception("Unable to find HIVE_HOME:" + home);
  }
 else   if (!lfs.exists(scripts)) {
    LOG.warn("Unable to find llap scripts:" + scripts);
  }
  Path libDir=new Path(tmpDir,"lib");
  Path tezDir=new Path(libDir,"tez");
  String tezLibs=conf.get(TezConfiguration.TEZ_LIB_URIS);
  if (tezLibs == null) {
    LOG.warn("Missing tez.lib.uris in tez-site.xml");
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Copying tez libs from " + tezLibs);
  }
  lfs.mkdirs(tezDir);
  fs.copyToLocalFile(new Path(tezLibs),new Path(libDir,"tez.tar.gz"));
  CompressionUtils.unTar(new Path(libDir,"tez.tar.gz").toString(),tezDir.toString(),true);
  lfs.delete(new Path(libDir,"tez.tar.gz"),false);
  Class<?>[] dependencies=new Class<?>[]{LlapDaemonProtocolProtos.class,LlapTezUtils.class,LlapInputFormat.class,HiveInputFormat.class,SslSocketConnector.class,com.lmax.disruptor.RingBuffer.class,org.apache.logging.log4j.Logger.class,org.apache.logging.log4j.core.Appender.class,org.apache.logging.slf4j.Log4jLogger.class,org.apache.log4j.NDC.class};
  for (  Class<?> c : dependencies) {
    Path jarPath=new Path(Utilities.jarFinderGetJar(c));
    lfs.copyFromLocalFile(jarPath,libDir);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Copying " + jarPath + " to "+ libDir);
    }
  }
  for (  String className : DEFAULT_AUX_CLASSES) {
    localizeJarForClass(lfs,libDir,className,false);
  }
  if (options.getIsHBase()) {
    try {
      localizeJarForClass(lfs,libDir,HBASE_SERDE_CLASS,true);
      Job fakeJob=new Job(new JobConf());
      TableMapReduceUtil.addDependencyJars(fakeJob);
      Collection<String> hbaseJars=fakeJob.getConfiguration().getStringCollection("tmpjars");
      for (      String jarPath : hbaseJars) {
        if (!jarPath.isEmpty()) {
          lfs.copyFromLocalFile(new Path(jarPath),libDir);
        }
      }
    }
 catch (    Throwable t) {
      String err="Failed to add HBase jars. Use --auxhbase=false to avoid localizing them";
      LOG.error(err);
      System.err.println(err);
      throw new RuntimeException(t);
    }
  }
  String auxJars=options.getAuxJars();
  if (auxJars != null && !auxJars.isEmpty()) {
    String[] jarPaths=auxJars.split(",");
    for (    String jarPath : jarPaths) {
      if (!jarPath.isEmpty()) {
        lfs.copyFromLocalFile(new Path(jarPath),libDir);
      }
    }
  }
  String java_home;
  if (options.getJavaPath() == null || options.getJavaPath().isEmpty()) {
    java_home=System.getenv("JAVA_HOME");
    String jre_home=System.getProperty("java.home");
    if (java_home == null) {
      java_home=jre_home;
    }
 else     if (!java_home.equals(jre_home)) {
      LOG.warn("Java versions might not match : JAVA_HOME=[{}],process jre=[{}]",java_home,jre_home);
    }
  }
 else {
    java_home=options.getJavaPath();
  }
  if (java_home == null || java_home.isEmpty()) {
    throw new RuntimeException("Could not determine JAVA_HOME from command line parameters, environment or system properties");
  }
  LOG.info("Using [{}] for JAVA_HOME",java_home);
  Path confPath=new Path(tmpDir,"conf");
  lfs.mkdirs(confPath);
  for (  String f : NEEDED_CONFIGS) {
    copyConfig(lfs,confPath,f);
  }
  for (  String f : OPTIONAL_CONFIGS) {
    try {
      copyConfig(lfs,confPath,f);
    }
 catch (    Throwable t) {
      LOG.info("Error getting an optional config " + f + "; ignoring: "+ t.getMessage());
    }
  }
  createLlapDaemonConfig(lfs,confPath,conf,propsDirectOptions,options.getConfig());
  InputStream loggerContent=logger.openStream();
  IOUtils.copyBytes(loggerContent,lfs.create(new Path(confPath,"llap-daemon-log4j2.properties"),true),conf,true);
  JSONObject configs=new JSONObject();
  configs.put("java.home",java_home);
  configs.put(ConfVars.LLAP_DAEMON_YARN_CONTAINER_MB.varname,HiveConf.getIntVar(conf,ConfVars.LLAP_DAEMON_YARN_CONTAINER_MB));
  configs.put(ConfVars.LLAP_DAEMON_YARN_CONTAINER_MB.varname,containerSize);
  configs.put(HiveConf.ConfVars.LLAP_IO_MEMORY_MAX_SIZE.varname,HiveConf.getSizeVar(conf,HiveConf.ConfVars.LLAP_IO_MEMORY_MAX_SIZE));
  configs.put(HiveConf.ConfVars.LLAP_ALLOCATOR_DIRECT.varname,HiveConf.getBoolVar(conf,HiveConf.ConfVars.LLAP_ALLOCATOR_DIRECT));
  configs.put(ConfVars.LLAP_DAEMON_MEMORY_PER_INSTANCE_MB.varname,HiveConf.getIntVar(conf,ConfVars.LLAP_DAEMON_MEMORY_PER_INSTANCE_MB));
  configs.put(ConfVars.LLAP_DAEMON_VCPUS_PER_INSTANCE.varname,HiveConf.getIntVar(conf,ConfVars.LLAP_DAEMON_VCPUS_PER_INSTANCE));
  configs.put(ConfVars.LLAP_DAEMON_NUM_EXECUTORS.varname,HiveConf.getIntVar(conf,ConfVars.LLAP_DAEMON_NUM_EXECUTORS));
  if (HiveConf.getVar(conf,ConfVars.LLAP_DAEMON_QUEUE_NAME) != null) {
    configs.put(ConfVars.LLAP_DAEMON_QUEUE_NAME.varname,HiveConf.getVar(conf,ConfVars.LLAP_DAEMON_QUEUE_NAME));
  }
  configs.put(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,conf.getInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,-1));
  configs.put(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,conf.getInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,-1));
  FSDataOutputStream os=lfs.create(new Path(tmpDir,"config.json"));
  OutputStreamWriter w=new OutputStreamWriter(os);
  configs.write(w);
  w.close();
  os.close();
  lfs.close();
  fs.close();
  if (LOG.isDebugEnabled()) {
    LOG.debug("Exiting successfully");
  }
}
