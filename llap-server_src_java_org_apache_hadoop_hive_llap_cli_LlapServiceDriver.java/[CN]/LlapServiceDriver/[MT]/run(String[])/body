{
  LlapOptionsProcessor optionsProcessor=new LlapOptionsProcessor();
  LlapOptions options=optionsProcessor.processOptions(args);
  Path tmpDir=new Path(options.getDirectory());
  if (conf == null) {
    LOG.warn("Cannot load any configuration to run command");
    return 1;
  }
  FileSystem fs=FileSystem.get(conf);
  FileSystem lfs=FileSystem.getLocal(conf).getRawFileSystem();
  String[] neededConfig={"tez-site.xml","hive-site.xml","llap-daemon-site.xml","core-site.xml"};
  for (  String f : neededConfig) {
    conf.addResource(f);
    if (conf.getResource(f) == null) {
      LOG.warn("Unable to find required config file: " + f);
      return 2;
    }
  }
  conf.reloadConfiguration();
  URL logger=conf.getResource("llap-daemon-log4j.properties");
  if (null == logger) {
    LOG.warn("Unable to find required config file: llap-daemon-log4j.properties");
    return 3;
  }
  Path home=new Path(System.getenv("HIVE_HOME"));
  Path scripts=new Path(new Path(new Path(home,"scripts"),"llap"),"bin");
  if (!lfs.exists(home)) {
    LOG.warn("Unable to find HIVE_HOME:" + home);
    return 3;
  }
 else   if (!lfs.exists(scripts)) {
    LOG.warn("Unable to find llap scripts:" + scripts);
  }
  Path libDir=new Path(tmpDir,"lib");
  String tezLibs=conf.get("tez.lib.uris");
  if (tezLibs == null) {
    LOG.warn("Missing tez.lib.uris in tez-site.xml");
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Copying tez libs from " + tezLibs);
  }
  lfs.mkdirs(libDir);
  fs.copyToLocalFile(new Path(tezLibs),new Path(libDir,"tez.tar.gz"));
  CompressionUtils.unTar(new Path(libDir,"tez.tar.gz").toString(),libDir.toString(),true);
  lfs.delete(new Path(libDir,"tez.tar.gz"),false);
  lfs.copyFromLocalFile(new Path(Utilities.jarFinderGetJar(LlapInputFormat.class)),libDir);
  lfs.copyFromLocalFile(new Path(Utilities.jarFinderGetJar(HiveInputFormat.class)),libDir);
  Path confPath=new Path(tmpDir,"conf");
  lfs.mkdirs(confPath);
  for (  String f : neededConfig) {
    lfs.copyFromLocalFile(new Path(conf.getResource(f).toString()),confPath);
  }
  lfs.copyFromLocalFile(new Path(logger.toString()),confPath);
  JSONObject configs=new JSONObject();
  configs.put(HiveConf.ConfVars.LLAP_ORC_CACHE_MAX_SIZE.varname,HiveConf.getLongVar(conf,HiveConf.ConfVars.LLAP_ORC_CACHE_MAX_SIZE));
  configs.put(HiveConf.ConfVars.LLAP_ORC_CACHE_ALLOCATE_DIRECT.varname,HiveConf.getBoolVar(conf,HiveConf.ConfVars.LLAP_ORC_CACHE_ALLOCATE_DIRECT));
  configs.put(LlapDaemonConfiguration.LLAP_DAEMON_MEMORY_PER_INSTANCE_MB,conf.getInt(LlapDaemonConfiguration.LLAP_DAEMON_MEMORY_PER_INSTANCE_MB,LlapDaemonConfiguration.LLAP_DAEMON_MEMORY_PER_INSTANCE_MB_DEFAULT));
  configs.put(LlapDaemonConfiguration.LLAP_DAEMON_VCPUS_PER_INSTANCE,conf.getInt(LlapDaemonConfiguration.LLAP_DAEMON_VCPUS_PER_INSTANCE,LlapDaemonConfiguration.LLAP_DAEMON_VCPUS_PER_INSTANCE_DEFAULT));
  configs.put(LlapDaemonConfiguration.LLAP_DAEMON_NUM_EXECUTORS,conf.getInt(LlapDaemonConfiguration.LLAP_DAEMON_NUM_EXECUTORS,LlapDaemonConfiguration.LLAP_DAEMON_NUM_EXECUTORS_DEFAULT));
  configs.put(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,conf.getInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,-1));
  configs.put(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,conf.getInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,-1));
  FSDataOutputStream os=lfs.create(new Path(tmpDir,"config.json"));
  OutputStreamWriter w=new OutputStreamWriter(os);
  configs.write(w);
  w.close();
  os.close();
  lfs.close();
  fs.close();
  if (LOG.isDebugEnabled()) {
    LOG.debug("Exiting successfully");
  }
  return 0;
}
