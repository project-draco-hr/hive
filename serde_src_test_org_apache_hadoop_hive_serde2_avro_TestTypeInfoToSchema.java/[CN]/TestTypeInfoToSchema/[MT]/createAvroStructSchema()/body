{
  StructTypeInfo structTypeInfo=new StructTypeInfo();
  ArrayList<String> names=new ArrayList<String>();
  names.add("field1");
  names.add("field2");
  names.add("field3");
  names.add("field4");
  names.add("field5");
  names.add("field6");
  names.add("field7");
  names.add("field8");
  names.add("field9");
  names.add("field10");
  names.add("field11");
  names.add("field12");
  names.add("field13");
  structTypeInfo.setAllStructFieldNames(names);
  ArrayList<TypeInfo> typeInfos=new ArrayList<TypeInfo>();
  typeInfos.add(STRING);
  typeInfos.add(CHAR);
  typeInfos.add(VARCHAR);
  typeInfos.add(BINARY);
  typeInfos.add(BYTE);
  typeInfos.add(SHORT);
  typeInfos.add(INT);
  typeInfos.add(LONG);
  typeInfos.add(FLOAT);
  typeInfos.add(DOUBLE);
  typeInfos.add(BOOLEAN);
  typeInfos.add(DECIMAL);
  typeInfos.add(VOID);
  structTypeInfo.setAllStructFieldTypeInfos(typeInfos);
  LOGGER.info("structTypeInfo is " + structTypeInfo);
  final String specificSchema=IOUtils.toString(Resources.getResource("avro-struct.avsc").openStream()).replace("\n","");
  String expectedSchema=genSchema(specificSchema);
  Assert.assertEquals("Test for struct's avro schema failed",expectedSchema,getAvroSchemaString(structTypeInfo));
}
