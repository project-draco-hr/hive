{
  DynamicSerDeConstValue jjtn000=new DynamicSerDeConstValue(JJTCONSTVALUE);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  try {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case tok_int_constant:
      jj_consume_token(tok_int_constant);
    jjtree.closeNodeScope(jjtn000,true);
  jjtc000=false;
break;
case tok_double_constant:
jj_consume_token(tok_double_constant);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
break;
case tok_literal:
jj_consume_token(tok_literal);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
break;
case IDENTIFIER:
jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
break;
case 63:
ConstList();
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
break;
case 60:
ConstMap();
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
if (true) return jjtn000;
}
break;
default :
jj_la1[13]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
}
}
throw new Error("Missing return statement in function");
}
