{
  DynamicSerDeInclude jjtn000=new DynamicSerDeInclude(JJTINCLUDE);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  String fname;
  boolean found=false;
  try {
    jj_consume_token(tok_include);
    fname=jj_consume_token(tok_literal).image;
    jjtree.closeNodeScope(jjtn000,true);
    jjtc000=false;
    fname=fname.substring(1,fname.length() - 1);
    File f=thrift_grammar.findFile(fname,this.include_path);
    if (f != null) {
      found=true;
      try {
        FileInputStream fis=new FileInputStream(f);
        thrift_grammar t=new thrift_grammar(fis,this.include_path,false);
        t.Start();
        fis.close();
        found=true;
        this.tables.putAll(t.tables);
        this.types.putAll(t.types);
      }
 catch (      Exception e) {
        System.out.println("File: " + fname + " - Oops.");
        System.out.println(e.getMessage());
        e.printStackTrace();
      }
    }
    if (!found) {
{
        if (true)         throw new RuntimeException("include file not found: " + fname);
      }
    }
{
      if (true)       return jjtn000;
    }
  }
  finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,true);
    }
  }
  throw new Error("Missing return statement in function");
}
