{
  MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
  final ObjectName oname=new ObjectName("org.apache.hadoop.hive.common.metrics:type=MetricsMBean");
  MBeanInfo mBeanInfo=mbs.getMBeanInfo(oname);
  assertEquals(MetricsMBeanImpl.class.getName(),mBeanInfo.getClassName());
  MBeanOperationInfo[] oops=mBeanInfo.getOperations();
  boolean resetFound=false;
  for (  MBeanOperationInfo op : oops) {
    if ("reset".equals(op.getName())) {
      resetFound=true;
      break;
    }
  }
  assertTrue(resetFound);
  Attribute attr=new Attribute("fooMetric",Long.valueOf(-77));
  mbs.setAttribute(oname,attr);
  mBeanInfo=mbs.getMBeanInfo(oname);
  MBeanAttributeInfo[] attrinuteInfos=mBeanInfo.getAttributes();
  assertEquals(1,attrinuteInfos.length);
  boolean attrFound=false;
  for (  MBeanAttributeInfo info : attrinuteInfos) {
    if ("fooMetric".equals(info.getName())) {
      assertEquals("java.lang.Long",info.getType());
      assertTrue(info.isReadable());
      assertTrue(info.isWritable());
      assertFalse(info.isIs());
      attrFound=true;
      break;
    }
  }
  assertTrue(attrFound);
  Object v=mbs.getAttribute(oname,"fooMetric");
  assertEquals(Long.valueOf(-77),v);
  Object result=mbs.invoke(oname,"reset",new Object[0],new String[0]);
  assertNull(result);
  v=mbs.getAttribute(oname,"fooMetric");
  assertEquals(Long.valueOf(0),v);
}
