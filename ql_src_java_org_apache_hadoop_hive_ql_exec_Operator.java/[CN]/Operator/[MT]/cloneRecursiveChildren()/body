{
  Operator<? extends OperatorDesc> newOp=this.cloneOp();
  newOp.setParentOperators(this.parentOperators);
  if (this.getChildOperators() == null) {
    newOp.setChildOperators(null);
    return newOp;
  }
  List<Operator<? extends OperatorDesc>> newChildren=new ArrayList<Operator<? extends OperatorDesc>>();
  for (  Operator<? extends OperatorDesc> childOp : this.getChildOperators()) {
    List<Operator<? extends OperatorDesc>> parentList=new ArrayList<Operator<? extends OperatorDesc>>();
    for (    Operator<? extends OperatorDesc> parent : childOp.getParentOperators()) {
      if (parent.equals(this)) {
        parentList.add(newOp);
      }
 else {
        parentList.add(parent);
      }
    }
    Operator<? extends OperatorDesc> clonedChildOp=childOp.cloneRecursiveChildren();
    clonedChildOp.setParentOperators(parentList);
  }
  newOp.setChildOperators(newChildren);
  return newOp;
}
