{
  Object[] os=new Object[fs.size()];
  int i=0;
  Throwable asyncEx=null;
  boolean cancelAll=false;
  for (  Future<?> f : fs) {
    if (cancelAll) {
      break;
    }
    if (abortOp.get()) {
      cancelAll=true;
      break;
    }
 else {
      while (true) {
        if (abortOp.get()) {
          cancelAll=true;
          break;
        }
 else {
          try {
            Object futureResult=f.get(200l,TimeUnit.MILLISECONDS);
            os[i++]=futureResult;
            break;
          }
 catch (          TimeoutException e) {
          }
catch (          InterruptedException|CancellationException e) {
            asyncEx=e;
            cancelAll=true;
            break;
          }
catch (          ExecutionException e) {
            if (e.getCause() == null) {
              asyncEx=e;
            }
 else {
              asyncEx=e.getCause();
            }
            cancelAll=true;
            break;
          }
        }
      }
    }
  }
  if (cancelAll || asyncEx != null) {
    for (    Future<?> f : fs) {
      f.cancel(true);
    }
    throw new HiveException("Async Initialization failed. abortRequested=" + abortOp.get(),asyncEx);
  }
  completeInitializationOp(os);
}
