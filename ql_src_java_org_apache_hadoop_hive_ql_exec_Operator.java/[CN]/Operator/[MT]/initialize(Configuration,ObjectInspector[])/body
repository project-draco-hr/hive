{
  if (state == State.INIT) {
    return;
  }
  this.configuration=hconf;
  if (!areAllParentsInitialized()) {
    return;
  }
  LOG.info("Initializing Self " + this);
  if (inputOIs != null) {
    inputObjInspectors=inputOIs;
  }
  if (childOperators != null && !childOperators.isEmpty()) {
    childOperatorsArray=new Operator[childOperators.size()];
    for (int i=0; i < childOperatorsArray.length; i++) {
      childOperatorsArray[i]=childOperators.get(i);
    }
    childOperatorsTag=new int[childOperatorsArray.length];
    for (int i=0; i < childOperatorsArray.length; i++) {
      List<Operator<? extends OperatorDesc>> parentOperators=childOperatorsArray[i].getParentOperators();
      if (parentOperators == null) {
        throw new HiveException("Hive internal error: parent is null in " + childOperatorsArray[i].getClass() + "!");
      }
      childOperatorsTag[i]=parentOperators.indexOf(this);
      if (childOperatorsTag[i] == -1) {
        throw new HiveException("Hive internal error: cannot find parent in the child operator!");
      }
    }
  }
  if (inputObjInspectors.length == 0) {
    throw new HiveException("Internal Error during operator initialization.");
  }
  outputObjInspector=inputObjInspectors[0];
  passExecContext(this.execContext);
  initializeOp(hconf);
  if (childOperatorsArray == null && !(childOperators == null || childOperators.isEmpty())) {
    throw new HiveException("Internal Hive error during operator initialization.");
  }
  LOG.info("Initialization Done " + id + " "+ getName());
}
