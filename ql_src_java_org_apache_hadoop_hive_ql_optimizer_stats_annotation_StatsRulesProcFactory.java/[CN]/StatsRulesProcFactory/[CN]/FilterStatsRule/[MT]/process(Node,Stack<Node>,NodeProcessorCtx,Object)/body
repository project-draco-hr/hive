{
  AnnotateStatsProcCtx aspCtx=(AnnotateStatsProcCtx)procCtx;
  FilterOperator fop=(FilterOperator)nd;
  Operator<? extends OperatorDesc> parent=fop.getParentOperators().get(0);
  Statistics parentStats=parent.getStatistics();
  List<String> neededCols=null;
  if (parent instanceof TableScanOperator) {
    TableScanOperator tsop=(TableScanOperator)parent;
    neededCols=tsop.getNeededColumns();
  }
  try {
    if (parentStats != null) {
      ExprNodeDesc pred=fop.getConf().getPredicate();
      long newNumRows=evaluateExpression(parentStats,pred,aspCtx,neededCols,fop);
      Statistics st=parentStats.clone();
      if (satisfyPrecondition(parentStats)) {
        if (newNumRows <= parentStats.getNumRows()) {
          updateStats(st,newNumRows,true,fop);
        }
        if (isDebugEnabled) {
          LOG.debug("[0] STATS-" + fop.toString() + ": "+ st.extendedToString());
        }
      }
 else {
        if (newNumRows <= parentStats.getNumRows()) {
          updateStats(st,newNumRows,false,fop);
        }
        if (isDebugEnabled) {
          LOG.debug("[1] STATS-" + fop.toString() + ": "+ st.extendedToString());
        }
      }
      fop.setStatistics(st);
      aspCtx.setAndExprStats(null);
    }
  }
 catch (  CloneNotSupportedException e) {
    throw new SemanticException(ErrorMsg.STATISTICS_CLONING_FAILED.getMsg());
  }
  return null;
}
