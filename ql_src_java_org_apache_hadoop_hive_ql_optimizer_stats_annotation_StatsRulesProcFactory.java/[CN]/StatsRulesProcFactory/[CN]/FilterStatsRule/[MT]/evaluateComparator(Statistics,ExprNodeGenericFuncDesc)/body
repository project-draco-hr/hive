{
  long numRows=stats.getNumRows();
  GenericUDF udf=genFunc.getGenericUDF();
  ExprNodeColumnDesc columnDesc;
  ExprNodeConstantDesc constantDesc;
  boolean upperBound;
  String boundValue=null;
  if (genFunc.getChildren().get(0) instanceof ExprNodeColumnDesc && genFunc.getChildren().get(1) instanceof ExprNodeConstantDesc) {
    columnDesc=(ExprNodeColumnDesc)genFunc.getChildren().get(0);
    constantDesc=(ExprNodeConstantDesc)genFunc.getChildren().get(1);
    if (constantDesc.getValue() == null) {
      return 0;
    }
    if (udf instanceof GenericUDFOPEqualOrGreaterThan || udf instanceof GenericUDFOPGreaterThan) {
      boundValue=constantDesc.getValue().toString();
      upperBound=false;
    }
 else {
      boundValue=constantDesc.getValue().toString();
      upperBound=true;
    }
  }
 else   if (genFunc.getChildren().get(1) instanceof ExprNodeColumnDesc && genFunc.getChildren().get(0) instanceof ExprNodeConstantDesc) {
    columnDesc=(ExprNodeColumnDesc)genFunc.getChildren().get(1);
    constantDesc=(ExprNodeConstantDesc)genFunc.getChildren().get(0);
    if (constantDesc.getValue() == null) {
      return 0;
    }
    if (udf instanceof GenericUDFOPEqualOrGreaterThan || udf instanceof GenericUDFOPGreaterThan) {
      boundValue=constantDesc.getValue().toString();
      upperBound=true;
    }
 else {
      boundValue=constantDesc.getValue().toString();
      upperBound=false;
    }
  }
 else {
    return numRows / 3;
  }
  ColStatistics cs=stats.getColumnStatisticsFromColName(columnDesc.getColumn());
  if (cs != null && cs.getRange() != null && cs.getRange().maxValue != null && cs.getRange().minValue != null) {
    String colTypeLowerCase=columnDesc.getTypeString().toLowerCase();
    try {
      if (colTypeLowerCase.equals(serdeConstants.TINYINT_TYPE_NAME)) {
        byte value=new Byte(boundValue);
        byte maxValue=cs.getRange().maxValue.byteValue();
        byte minValue=cs.getRange().minValue.byteValue();
        if (upperBound) {
          if (maxValue < value) {
            return numRows;
          }
          if (minValue > value) {
            return 0;
          }
        }
 else {
          if (minValue > value) {
            return numRows;
          }
          if (maxValue < value) {
            return 0;
          }
        }
      }
 else       if (colTypeLowerCase.equals(serdeConstants.SMALLINT_TYPE_NAME)) {
        short value=new Short(boundValue);
        short maxValue=cs.getRange().maxValue.shortValue();
        short minValue=cs.getRange().minValue.shortValue();
        if (upperBound) {
          if (maxValue < value) {
            return numRows;
          }
          if (minValue > value) {
            return 0;
          }
        }
 else {
          if (minValue > value) {
            return numRows;
          }
          if (maxValue < value) {
            return 0;
          }
        }
      }
 else       if (colTypeLowerCase.equals(serdeConstants.INT_TYPE_NAME) || colTypeLowerCase.equals(serdeConstants.DATE_TYPE_NAME)) {
        int value=new Integer(boundValue);
        int maxValue=cs.getRange().maxValue.intValue();
        int minValue=cs.getRange().minValue.intValue();
        if (upperBound) {
          if (maxValue < value) {
            return numRows;
          }
          if (minValue > value) {
            return 0;
          }
        }
 else {
          if (minValue > value) {
            return numRows;
          }
          if (maxValue < value) {
            return 0;
          }
        }
      }
 else       if (colTypeLowerCase.equals(serdeConstants.BIGINT_TYPE_NAME)) {
        long value=new Long(boundValue);
        long maxValue=cs.getRange().maxValue.longValue();
        long minValue=cs.getRange().minValue.longValue();
        if (upperBound) {
          if (maxValue < value) {
            return numRows;
          }
          if (minValue > value) {
            return 0;
          }
        }
 else {
          if (minValue > value) {
            return numRows;
          }
          if (maxValue < value) {
            return 0;
          }
        }
      }
 else       if (colTypeLowerCase.equals(serdeConstants.FLOAT_TYPE_NAME)) {
        float value=new Float(boundValue);
        float maxValue=cs.getRange().maxValue.floatValue();
        float minValue=cs.getRange().minValue.floatValue();
        if (upperBound) {
          if (maxValue < value) {
            return numRows;
          }
          if (minValue > value) {
            return 0;
          }
        }
 else {
          if (minValue > value) {
            return numRows;
          }
          if (maxValue < value) {
            return 0;
          }
        }
      }
 else       if (colTypeLowerCase.equals(serdeConstants.DOUBLE_TYPE_NAME)) {
        double value=new Double(boundValue);
        double maxValue=cs.getRange().maxValue.doubleValue();
        double minValue=cs.getRange().minValue.doubleValue();
        if (upperBound) {
          if (maxValue < value) {
            return numRows;
          }
          if (minValue > value) {
            return 0;
          }
        }
 else {
          if (minValue > value) {
            return numRows;
          }
          if (maxValue < value) {
            return 0;
          }
        }
      }
    }
 catch (    NumberFormatException nfe) {
      return numRows / 3;
    }
  }
  return numRows / 3;
}
