{
  long newNumRows=0;
  Statistics andStats=null;
  if (stats.getNumRows() <= 1 || stats.getDataSize() <= 0)   return 1;
  if (pred instanceof ExprNodeGenericFuncDesc) {
    ExprNodeGenericFuncDesc genFunc=(ExprNodeGenericFuncDesc)pred;
    GenericUDF udf=genFunc.getGenericUDF();
    if (udf instanceof GenericUDFOPAnd) {
      andStats=stats.clone();
      aspCtx.setAndExprStats(andStats);
      for (      ExprNodeDesc child : genFunc.getChildren()) {
        newNumRows=evaluateChildExpr(aspCtx.getAndExprStats(),child,aspCtx,neededCols,fop,evaluatedRowCount);
        if (satisfyPrecondition(aspCtx.getAndExprStats())) {
          updateStats(aspCtx.getAndExprStats(),newNumRows,true,fop);
        }
 else {
          updateStats(aspCtx.getAndExprStats(),newNumRows,false,fop);
        }
      }
    }
 else     if (udf instanceof GenericUDFOPOr) {
      for (      ExprNodeDesc child : genFunc.getChildren()) {
        if (evaluatedRowCount >= stats.getNumRows()) {
          evaluatedRowCount=stats.getNumRows();
        }
 else {
          newNumRows=StatsUtils.safeAdd(evaluateChildExpr(stats,child,aspCtx,neededCols,fop,evaluatedRowCount),newNumRows);
          evaluatedRowCount=newNumRows;
        }
      }
    }
 else     if (udf instanceof GenericUDFOPNot) {
      newNumRows=evaluateNotExpr(stats,pred,aspCtx,neededCols,fop);
    }
 else     if (udf instanceof GenericUDFOPNotNull) {
      return evaluateNotNullExpr(stats,genFunc);
    }
 else {
      newNumRows=evaluateChildExpr(stats,pred,aspCtx,neededCols,fop,evaluatedRowCount);
    }
  }
 else   if (pred instanceof ExprNodeColumnDesc) {
    ExprNodeColumnDesc encd=(ExprNodeColumnDesc)pred;
    String colName=encd.getColumn();
    String colType=encd.getTypeString();
    if (colType.equalsIgnoreCase(serdeConstants.BOOLEAN_TYPE_NAME)) {
      ColStatistics cs=stats.getColumnStatisticsFromColName(colName);
      if (cs != null) {
        return cs.getNumTrues();
      }
    }
    return stats.getNumRows() / 2;
  }
 else   if (pred instanceof ExprNodeConstantDesc) {
    ExprNodeConstantDesc encd=(ExprNodeConstantDesc)pred;
    if (Boolean.FALSE.equals(encd.getValue())) {
      return 0;
    }
 else {
      return stats.getNumRows();
    }
  }
  return newNumRows;
}
