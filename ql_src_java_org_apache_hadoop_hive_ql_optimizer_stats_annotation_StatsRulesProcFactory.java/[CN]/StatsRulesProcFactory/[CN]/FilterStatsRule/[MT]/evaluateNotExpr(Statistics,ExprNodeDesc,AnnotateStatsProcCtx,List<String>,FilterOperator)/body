{
  long numRows=stats.getNumRows();
  if (pred instanceof ExprNodeGenericFuncDesc) {
    ExprNodeGenericFuncDesc genFunc=(ExprNodeGenericFuncDesc)pred;
    for (    ExprNodeDesc leaf : genFunc.getChildren()) {
      if (leaf instanceof ExprNodeGenericFuncDesc) {
        long newNumRows=0;
        for (        ExprNodeDesc child : genFunc.getChildren()) {
          newNumRows=evaluateChildExpr(stats,child,aspCtx,neededCols,fop);
        }
        return numRows - newNumRows;
      }
 else       if (leaf instanceof ExprNodeConstantDesc) {
        ExprNodeConstantDesc encd=(ExprNodeConstantDesc)leaf;
        if (encd.getValue().equals(true)) {
          return 0;
        }
 else {
          return numRows;
        }
      }
 else       if (leaf instanceof ExprNodeColumnDesc) {
        ExprNodeColumnDesc encd=(ExprNodeColumnDesc)leaf;
        String colName=encd.getColumn();
        String tabAlias=encd.getTabAlias();
        String colType=encd.getTypeString();
        if (colType.equalsIgnoreCase(serdeConstants.BOOLEAN_TYPE_NAME)) {
          ColStatistics cs=stats.getColumnStatisticsForColumn(tabAlias,colName);
          if (cs != null) {
            return cs.getNumFalses();
          }
        }
        return numRows / 2;
      }
    }
  }
  return numRows / 2;
}
