{
  GroupByOperator gop=(GroupByOperator)nd;
  Operator<? extends OperatorDesc> parent=gop.getParentOperators().get(0);
  Statistics parentStats=parent.getStatistics();
  if (parentStats == null) {
    return null;
  }
  AnnotateStatsProcCtx aspCtx=(AnnotateStatsProcCtx)procCtx;
  HiveConf conf=aspCtx.getConf();
  long maxSplitSize=HiveConf.getLongVar(conf,HiveConf.ConfVars.MAPREDMAXSPLITSIZE);
  List<AggregationDesc> aggDesc=gop.getConf().getAggregators();
  Map<String,ExprNodeDesc> colExprMap=gop.getColumnExprMap();
  RowSchema rs=gop.getSchema();
  Statistics stats=null;
  List<ColStatistics> colStats=StatsUtils.getColStatisticsFromExprMap(conf,parentStats,colExprMap,rs);
  long cardinality;
  long parallelism=1L;
  boolean mapSide=false;
  boolean mapSideHashAgg=false;
  long inputSize=1L;
  boolean containsGroupingSet=gop.getConf().isGroupingSetsPresent();
  long sizeOfGroupingSet=containsGroupingSet ? gop.getConf().getListGroupingSets().size() : 1L;
  if (gop.getChildOperators().get(0) instanceof ReduceSinkOperator || gop.getChildOperators().get(0) instanceof AppMasterEventOperator) {
    mapSide=true;
    TableScanOperator top=OperatorUtils.findSingleOperatorUpstream(gop,TableScanOperator.class);
    if (top == null) {
      inputSize=parentStats.getDataSize();
      maxSplitSize=HiveConf.getLongVar(conf,HiveConf.ConfVars.BYTESPERREDUCER);
    }
 else {
      inputSize=top.getConf().getStatistics().getDataSize();
    }
    parallelism=(int)Math.ceil((double)inputSize / maxSplitSize);
  }
  if (isDebugEnabled) {
    LOG.debug("STATS-" + gop.toString() + ": inputSize: "+ inputSize+ " maxSplitSize: "+ maxSplitSize+ " parallelism: "+ parallelism+ " containsGroupingSet: "+ containsGroupingSet+ " sizeOfGroupingSet: "+ sizeOfGroupingSet);
  }
  try {
    if (satisfyPrecondition(parentStats)) {
      mapSideHashAgg=checkMapSideAggregation(gop,colStats,conf);
      if (isDebugEnabled) {
        LOG.debug("STATS-" + gop.toString() + " mapSideHashAgg: "+ mapSideHashAgg);
      }
      stats=parentStats.clone();
      stats.setColumnStats(colStats);
      long ndvProduct=1;
      final long parentNumRows=stats.getNumRows();
      for (      ColStatistics cs : colStats) {
        if (cs != null) {
          long ndv=cs.getCountDistint();
          if (cs.getNumNulls() > 0) {
            ndv=StatsUtils.safeAdd(ndv,1);
          }
          ndvProduct=StatsUtils.safeMult(ndvProduct,ndv);
        }
 else {
          if (parentStats.getColumnStatsState().equals(Statistics.State.COMPLETE)) {
            continue;
          }
 else {
            ndvProduct=0;
          }
          break;
        }
      }
      if (ndvProduct == 0) {
        ndvProduct=parentNumRows / 2;
        if (isDebugEnabled) {
          LOG.debug("STATS-" + gop.toString() + ": ndvProduct became 0 as some column does not"+ " have stats. ndvProduct changed to: "+ ndvProduct);
        }
      }
      if (mapSide) {
        if (mapSideHashAgg) {
          if (containsGroupingSet) {
            cardinality=Math.min((StatsUtils.safeMult(parentNumRows,sizeOfGroupingSet)) / 2,StatsUtils.safeMult(StatsUtils.safeMult(ndvProduct,parallelism),sizeOfGroupingSet));
            if (isDebugEnabled) {
              LOG.debug("[Case 4] STATS-" + gop.toString() + ": cardinality: "+ cardinality);
            }
          }
 else {
            cardinality=Math.min(parentNumRows / 2,StatsUtils.safeMult(ndvProduct,parallelism));
            if (isDebugEnabled) {
              LOG.debug("[Case 3] STATS-" + gop.toString() + ": cardinality: "+ cardinality);
            }
          }
        }
 else {
          if (containsGroupingSet) {
            cardinality=StatsUtils.safeMult(parentNumRows,sizeOfGroupingSet);
            if (isDebugEnabled) {
              LOG.debug("[Case 6] STATS-" + gop.toString() + ": cardinality: "+ cardinality);
            }
          }
 else {
            cardinality=parentNumRows;
            if (isDebugEnabled) {
              LOG.debug("[Case 5] STATS-" + gop.toString() + ": cardinality: "+ cardinality);
            }
          }
        }
      }
 else {
        GroupByOperator mGop=OperatorUtils.findSingleOperatorUpstream(parent,GroupByOperator.class);
        if (mGop != null) {
          containsGroupingSet=mGop.getConf().isGroupingSetsPresent();
          sizeOfGroupingSet=mGop.getConf().getListGroupingSets().size();
        }
        if (containsGroupingSet) {
          cardinality=Math.min(parentNumRows,StatsUtils.safeMult(ndvProduct,sizeOfGroupingSet));
          if (isDebugEnabled) {
            LOG.debug("[Case 8] STATS-" + gop.toString() + ": cardinality: "+ cardinality);
          }
        }
 else {
          cardinality=Math.min(parentNumRows,ndvProduct);
          if (isDebugEnabled) {
            LOG.debug("[Case 9] STATS-" + gop.toString() + ": cardinality: "+ cardinality);
          }
        }
      }
      updateStats(stats,cardinality,true,gop,false);
    }
 else {
      if (parentStats != null) {
        stats=parentStats.clone();
        final long parentNumRows=stats.getNumRows();
        if (mapSide) {
          if (containsGroupingSet) {
            cardinality=StatsUtils.safeMult(parentNumRows,sizeOfGroupingSet);
            if (isDebugEnabled) {
              LOG.debug("[Case 2] STATS-" + gop.toString() + ": cardinality: "+ cardinality);
            }
          }
 else {
            cardinality=parentNumRows;
            if (isDebugEnabled) {
              LOG.debug("[Case 1] STATS-" + gop.toString() + ": cardinality: "+ cardinality);
            }
          }
        }
 else {
          cardinality=parentNumRows / 2;
          if (isDebugEnabled) {
            LOG.debug("[Case 7] STATS-" + gop.toString() + ": cardinality: "+ cardinality);
          }
        }
        updateStats(stats,cardinality,false,gop);
      }
    }
    if (!aggDesc.isEmpty() && stats != null) {
      List<ColStatistics> aggColStats=Lists.newArrayList();
      for (      ColumnInfo ci : rs.getSignature()) {
        if (!colExprMap.containsKey(ci.getInternalName())) {
          String colName=ci.getInternalName();
          String tabAlias=ci.getTabAlias();
          String colType=ci.getTypeName();
          ColStatistics cs=new ColStatistics(tabAlias,colName,colType);
          cs.setCountDistint(stats.getNumRows());
          cs.setNumNulls(0);
          cs.setAvgColLen(StatsUtils.getAvgColLenOfFixedLengthTypes(colType));
          aggColStats.add(cs);
        }
      }
      if (aggColStats.size() > 0) {
        stats.addToColumnStats(aggColStats);
        if (!stats.getColumnStatsState().equals(Statistics.State.NONE)) {
          updateStats(stats,stats.getNumRows(),true,gop);
        }
      }
      if (colExprMap.isEmpty()) {
        stats.setNumRows(1);
        updateStats(stats,1,true,gop);
      }
    }
    gop.setStatistics(stats);
    if (isDebugEnabled && stats != null) {
      LOG.debug("[0] STATS-" + gop.toString() + ": "+ stats.extendedToString());
    }
  }
 catch (  CloneNotSupportedException e) {
    throw new SemanticException(ErrorMsg.STATISTICS_CLONING_FAILED.getMsg());
  }
  return null;
}
