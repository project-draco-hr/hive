{
  jop=(CommonJoinOperator<? extends JoinDesc>)nd;
  parents=jop.getParentOperators();
  AnnotateStatsProcCtx aspCtx=(AnnotateStatsProcCtx)procCtx;
  HiveConf conf=aspCtx.getConf();
  boolean allStatsAvail=true;
  boolean allSatisfyPreCondition=true;
  for (  Operator<? extends OperatorDesc> op : parents) {
    if (op.getStatistics() == null) {
      allStatsAvail=false;
    }
  }
  if (allStatsAvail) {
    for (    Operator<? extends OperatorDesc> op : parents) {
      if (!satisfyPrecondition(op.getStatistics())) {
        allSatisfyPreCondition=false;
      }
    }
    if (allSatisfyPreCondition) {
      Statistics stats=new Statistics();
      Map<String,Long> rowCountParents=new HashMap<String,Long>();
      List<Long> distinctVals=Lists.newArrayList();
      int numParent=parents.size();
      Map<String,ColStatistics> joinedColStats=Maps.newHashMap();
      Map<Integer,List<String>> joinKeys=Maps.newHashMap();
      List<Long> rowCounts=Lists.newArrayList();
      ReduceSinkOperator rsOp=(ReduceSinkOperator)jop.getParentOperators().get(0);
      List<String> keyExprs=rsOp.getConf().getOutputKeyColumnNames();
      numAttr=keyExprs.size();
      pkfkInferred=false;
      inferPKFKRelationship();
      for (int pos=0; pos < parents.size(); pos++) {
        ReduceSinkOperator parent=(ReduceSinkOperator)jop.getParentOperators().get(pos);
        Statistics parentStats=parent.getStatistics();
        keyExprs=parent.getConf().getOutputKeyColumnNames();
        Set<String> tableAliases=StatsUtils.getAllTableAlias(parent.getColumnExprMap());
        for (        String tabAlias : tableAliases) {
          rowCountParents.put(tabAlias,parentStats.getNumRows());
        }
        rowCounts.add(parentStats.getNumRows());
        List<String> fqCols=StatsUtils.getFullyQualifedReducerKeyNames(keyExprs,parent.getColumnExprMap());
        joinKeys.put(pos,fqCols);
        for (        ColStatistics cs : parentStats.getColumnStats()) {
          joinedColStats.put(cs.getFullyQualifiedColName(),cs);
        }
        stats.updateColumnStatsState(parentStats.getColumnStatsState());
      }
      long denom=1;
      if (numAttr > 1) {
        List<Long> perAttrDVs=Lists.newArrayList();
        for (int idx=0; idx < numAttr; idx++) {
          for (          Integer i : joinKeys.keySet()) {
            String col=joinKeys.get(i).get(idx);
            ColStatistics cs=joinedColStats.get(col);
            if (cs != null) {
              perAttrDVs.add(cs.getCountDistint());
            }
          }
          distinctVals.add(getDenominator(perAttrDVs));
          perAttrDVs.clear();
        }
        if (numAttr > numParent) {
          denom=getEasedOutDenominator(distinctVals);
        }
 else {
          for (          Long l : distinctVals) {
            denom=StatsUtils.safeMult(denom,l);
          }
        }
      }
 else {
        for (        List<String> jkeys : joinKeys.values()) {
          for (          String jk : jkeys) {
            ColStatistics cs=joinedColStats.get(jk);
            if (cs != null) {
              distinctVals.add(cs.getCountDistint());
            }
          }
        }
        denom=getDenominator(distinctVals);
      }
      updateJoinColumnsNDV(joinKeys,joinedColStats,numAttr);
      Map<String,ExprNodeDesc> colExprMap=jop.getColumnExprMap();
      RowSchema rs=jop.getSchema();
      List<ColStatistics> outColStats=Lists.newArrayList();
      Map<String,String> outInTabAlias=new HashMap<String,String>();
      for (      ColumnInfo ci : rs.getSignature()) {
        String key=ci.getInternalName();
        ExprNodeDesc end=colExprMap.get(key);
        if (end instanceof ExprNodeColumnDesc) {
          String colName=((ExprNodeColumnDesc)end).getColumn();
          String tabAlias=((ExprNodeColumnDesc)end).getTabAlias();
          String fqColName=StatsUtils.getFullyQualifiedColumnName(tabAlias,colName);
          ColStatistics cs=joinedColStats.get(fqColName);
          String outColName=key;
          String outTabAlias=ci.getTabAlias();
          outInTabAlias.put(outTabAlias,tabAlias);
          if (cs != null) {
            cs.setColumnName(outColName);
            cs.setTableAlias(outTabAlias);
          }
          outColStats.add(cs);
        }
      }
      stats.setColumnStats(outColStats);
      long newRowCount=pkfkInferred ? newNumRows : computeNewRowCount(rowCounts,denom);
      updateStatsForJoinType(stats,newRowCount,jop,rowCountParents,outInTabAlias);
      jop.setStatistics(stats);
      if (isDebugEnabled) {
        LOG.debug("[0] STATS-" + jop.toString() + ": "+ stats.extendedToString());
      }
    }
 else {
      float joinFactor=HiveConf.getFloatVar(conf,HiveConf.ConfVars.HIVE_STATS_JOIN_FACTOR);
      int numParents=parents.size();
      List<Long> parentRows=Lists.newArrayList();
      List<Long> parentSizes=Lists.newArrayList();
      int maxRowIdx=0;
      long maxRowCount=0;
      int idx=0;
      for (      Operator<? extends OperatorDesc> op : parents) {
        Statistics ps=op.getStatistics();
        long rowCount=ps.getNumRows();
        if (rowCount > maxRowCount) {
          maxRowCount=rowCount;
          maxRowIdx=idx;
        }
        parentRows.add(rowCount);
        parentSizes.add(ps.getDataSize());
        idx++;
      }
      long maxDataSize=parentSizes.get(maxRowIdx);
      long newNumRows=StatsUtils.safeMult(StatsUtils.safeMult(maxRowCount,(numParents - 1)),joinFactor);
      long newDataSize=StatsUtils.safeMult(StatsUtils.safeMult(maxDataSize,(numParents - 1)),joinFactor);
      Statistics wcStats=new Statistics();
      wcStats.setNumRows(newNumRows);
      wcStats.setDataSize(newDataSize);
      jop.setStatistics(wcStats);
      if (isDebugEnabled) {
        LOG.debug("[1] STATS-" + jop.toString() + ": "+ wcStats.extendedToString());
      }
    }
  }
  return null;
}
