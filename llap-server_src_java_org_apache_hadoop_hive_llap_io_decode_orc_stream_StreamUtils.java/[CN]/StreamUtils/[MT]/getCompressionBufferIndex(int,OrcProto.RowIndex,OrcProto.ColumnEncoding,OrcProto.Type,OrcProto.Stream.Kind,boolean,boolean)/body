{
  int[] result=new int[2];
  Arrays.fill(result,-1);
  int numRgs=rowIndex.getEntryCount();
  int nextRgIdx=rgIdx == numRgs - 1 ? rgIdx : rgIdx + 1;
  OrcProto.RowIndexEntry rowIndexEntry=rowIndex.getEntry(rgIdx);
  OrcProto.RowIndexEntry nextRowIndexEntry=rowIndex.getEntry(nextRgIdx);
  int indexIx=RecordReaderUtils.getIndexPosition(columnEncoding.getKind(),colType.getKind(),streamKind,isCompressed,hasNull);
  long cbStartOffset=rowIndexEntry.getPositions(indexIx);
  long nextCbStartOffset=nextRowIndexEntry.getPositions(indexIx);
  long lastCbStartOffset=rowIndex.getEntry(numRgs - 1).getPositions(indexIx);
  boolean lastCompressionBuffer=false;
  int cbIdx=0;
  long previosStartOffset=-1;
  boolean foundCompressionBufferIdx=false;
  for (  OrcProto.RowIndexEntry entry : rowIndex.getEntryList()) {
    if (previosStartOffset == -1) {
      previosStartOffset=entry.getPositions(indexIx);
    }
    long currentStartOffset=entry.getPositions(indexIx);
    if (currentStartOffset != previosStartOffset) {
      cbIdx++;
      previosStartOffset=currentStartOffset;
    }
    if (currentStartOffset == cbStartOffset) {
      result[0]=cbIdx;
      foundCompressionBufferIdx=true;
    }
    if (currentStartOffset == lastCbStartOffset) {
      lastCompressionBuffer=true;
    }
    if ((cbStartOffset != nextCbStartOffset) && !lastCompressionBuffer) {
      result[1]=cbIdx + 1;
    }
    if (foundCompressionBufferIdx) {
      break;
    }
  }
  return result;
}
