{
  assert(left.length == 4);
  assert(right.length == 4);
  long product;
  int[] z=new int[8];
  product=(right[0] & SqlMathUtil.LONG_MASK) * (left[0] & SqlMathUtil.LONG_MASK);
  z[0]=(int)product;
  product=(right[0] & SqlMathUtil.LONG_MASK) * (left[1] & SqlMathUtil.LONG_MASK) + (right[1] & SqlMathUtil.LONG_MASK) * (left[0] & SqlMathUtil.LONG_MASK) + (product >>> 32);
  z[1]=(int)product;
  product=(right[0] & SqlMathUtil.LONG_MASK) * (left[2] & SqlMathUtil.LONG_MASK) + (right[1] & SqlMathUtil.LONG_MASK) * (left[1] & SqlMathUtil.LONG_MASK) + (right[2] & SqlMathUtil.LONG_MASK) * (left[0] & SqlMathUtil.LONG_MASK) + (product >>> 32);
  z[2]=(int)product;
  product=(right[0] & SqlMathUtil.LONG_MASK) * (left[3] & SqlMathUtil.LONG_MASK) + (right[1] & SqlMathUtil.LONG_MASK) * (left[2] & SqlMathUtil.LONG_MASK) + (right[2] & SqlMathUtil.LONG_MASK) * (left[1] & SqlMathUtil.LONG_MASK) + (right[3] & SqlMathUtil.LONG_MASK) * (left[0] & SqlMathUtil.LONG_MASK) + (product >>> 32);
  z[3]=(int)product;
  product=(right[1] & SqlMathUtil.LONG_MASK) * (left[3] & SqlMathUtil.LONG_MASK) + (right[2] & SqlMathUtil.LONG_MASK) * (left[2] & SqlMathUtil.LONG_MASK) + (right[3] & SqlMathUtil.LONG_MASK) * (left[1] & SqlMathUtil.LONG_MASK) + (product >>> 32);
  z[4]=(int)product;
  product=(right[2] & SqlMathUtil.LONG_MASK) * (left[3] & SqlMathUtil.LONG_MASK) + (right[3] & SqlMathUtil.LONG_MASK) * (left[2] & SqlMathUtil.LONG_MASK) + (product >>> 32);
  z[5]=(int)product;
  product=(right[3] & SqlMathUtil.LONG_MASK) * (left[3] & SqlMathUtil.LONG_MASK) + (product >>> 32);
  z[6]=(int)product;
  z[7]=(int)(product >>> 32);
  return z;
}
