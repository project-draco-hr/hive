{
  byte signum=0;
  int skip=0;
  this.count=0;
  byte firstByte=internalStorage[0];
  if (firstByte == 0 || firstByte == -1) {
    while ((skip < internalStorage.length) && (internalStorage[skip] == firstByte)) {
      ++skip;
    }
  }
  if (skip == internalStorage.length) {
    assert(firstByte == 0 || firstByte == -1);
    if (firstByte == -1) {
      signum=-1;
      this.count=1;
      this.v[0]=1;
    }
 else {
      signum=0;
    }
  }
 else {
    signum=(firstByte < 0) ? (byte)-1 : (byte)1;
    int length=internalStorage.length - skip;
    int pos=skip;
    int intLength=0;
switch (length) {
case 16:
      ++intLength;
case 15:
    ++intLength;
case 14:
  ++intLength;
case 13:
++intLength;
v[3]=fastUpdateIntFromInternalStorage(internalStorage,signum,pos,intLength);
++this.count;
pos+=intLength;
intLength=0;
case 12:
++intLength;
case 11:
++intLength;
case 10:
++intLength;
case 9:
++intLength;
v[2]=fastUpdateIntFromInternalStorage(internalStorage,signum,pos,intLength);
++this.count;
pos+=intLength;
intLength=0;
case 8:
++intLength;
case 7:
++intLength;
case 6:
++intLength;
case 5:
++intLength;
v[1]=fastUpdateIntFromInternalStorage(internalStorage,signum,pos,intLength);
++this.count;
pos+=intLength;
intLength=0;
case 4:
++intLength;
case 3:
++intLength;
case 2:
++intLength;
case 1:
++intLength;
v[0]=fastUpdateIntFromInternalStorage(internalStorage,signum,pos,intLength);
++this.count;
break;
default :
throw new RuntimeException("Impossible HiveDecimal internal storage length!");
}
if (signum == -1) {
for (int i=0; i < this.count; ++i) {
if (v[i] != 0) {
v[i]=(int)((v[i] & 0xFFFFFFFFL) + 1);
if (v[i] != 0) {
break;
}
}
}
}
}
return signum;
}
