{
  if (tenScale == 0) {
    return compareTo(o);
  }
  if (o.isZero()) {
    return this.isZero() ? 0 : 1;
  }
 else   if (this.isZero()) {
    if (tenScale > 0) {
      return -1;
    }
    if (tenScale < -SqlMathUtil.MAX_POWER_TEN_INT128) {
      return 0;
    }
 else {
      boolean oZero=o.compareTo(SqlMathUtil.ROUND_POWER_TENS_INT128[-tenScale]) < 0;
      return oZero ? 0 : -1;
    }
  }
  if (this.fitsInt32() && o.fitsInt32() && tenScale <= SqlMathUtil.MAX_POWER_TEN_INT31) {
    long v0Long=this.v[0] & SqlMathUtil.LONG_MASK;
    long o0;
    if (tenScale < 0) {
      if (tenScale < -SqlMathUtil.MAX_POWER_TEN_INT31) {
        o0=0L;
      }
 else {
        o0=(o.v[0] & SqlMathUtil.LONG_MASK) / SqlMathUtil.POWER_TENS_INT31[-tenScale];
        long remainder=(o.v[0] & SqlMathUtil.LONG_MASK) % SqlMathUtil.POWER_TENS_INT31[-tenScale];
        if (remainder >= SqlMathUtil.ROUND_POWER_TENS_INT31[-tenScale]) {
          assert(o0 >= 0);
          ++o0;
        }
      }
    }
 else {
      o0=(o.v[0] & SqlMathUtil.LONG_MASK) * (SqlMathUtil.POWER_TENS_INT31[tenScale] & SqlMathUtil.LONG_MASK);
    }
    return SqlMathUtil.compareUnsignedLong(v0Long,o0);
  }
  int[] ov=o.v.clone();
  if (tenScale < 0) {
    scaleDownTenArray4RoundUp(ov,(short)-tenScale);
  }
 else {
    boolean overflow=scaleUpTenArray(ov,tenScale);
    if (overflow) {
      return -1;
    }
  }
  return compareTo(ov);
}
