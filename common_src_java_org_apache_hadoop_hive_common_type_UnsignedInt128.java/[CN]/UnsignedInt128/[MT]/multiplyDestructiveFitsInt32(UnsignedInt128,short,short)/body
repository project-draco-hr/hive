{
  assert(this.fitsInt32() && right.fitsInt32());
  assert(rightShifts == 0 || tenScaleDown == 0);
  if (this.isZero()) {
    return;
  }
 else   if (right.isZero()) {
    zeroClear();
    return;
  }
 else   if (this.isOne()) {
    this.update(right);
  }
 else {
    this.multiplyDestructive(right.v[0]);
  }
  if (rightShifts > 0) {
    this.shiftRightDestructive(rightShifts,true);
  }
 else   if (tenScaleDown > 0) {
    this.scaleDownTenDestructive(tenScaleDown);
  }
}
