{
  assert(array.length == 8);
  if (tenScale > MAX_DIGITS) {
    Arrays.fill(array,0);
    return;
  }
  if (tenScale <= SqlMathUtil.MAX_POWER_TEN_INT31) {
    int divisor=SqlMathUtil.POWER_TENS_INT31[tenScale];
    assert(divisor > 0);
    boolean round=divideCheckRound(array,divisor);
    if (round) {
      incrementArray(array);
    }
    return;
  }
  final int[] inverse=SqlMathUtil.INVERSE_POWER_TENS_INT128[tenScale].v;
  final int inverseWordShift=SqlMathUtil.INVERSE_POWER_TENS_INT128_WORD_SHIFTS[tenScale];
  assert(inverseWordShift <= 3);
  assert(inverse[3] != 0);
  for (int i=5 + inverseWordShift; i < 8; ++i) {
    if (array[i] != 0) {
      SqlMathUtil.throwOverflowException();
    }
  }
  int z4=0, z5=0, z6=0, z7=0;
  int z8=0, z9=0, z10=0;
  long product=0L;
  product+=(inverse[0] & SqlMathUtil.LONG_MASK) * (array[4] & SqlMathUtil.LONG_MASK) + (inverse[1] & SqlMathUtil.LONG_MASK) * (array[3] & SqlMathUtil.LONG_MASK) + (inverse[2] & SqlMathUtil.LONG_MASK) * (array[2] & SqlMathUtil.LONG_MASK) + (inverse[3] & SqlMathUtil.LONG_MASK) * (array[1] & SqlMathUtil.LONG_MASK);
  z4=(int)product;
  product>>>=32;
  product+=(inverse[0] & SqlMathUtil.LONG_MASK) * (array[5] & SqlMathUtil.LONG_MASK) + (inverse[1] & SqlMathUtil.LONG_MASK) * (array[4] & SqlMathUtil.LONG_MASK) + (inverse[2] & SqlMathUtil.LONG_MASK) * (array[3] & SqlMathUtil.LONG_MASK) + (inverse[3] & SqlMathUtil.LONG_MASK) * (array[2] & SqlMathUtil.LONG_MASK);
  z5=(int)product;
  product>>>=32;
  product+=(inverse[0] & SqlMathUtil.LONG_MASK) * (array[6] & SqlMathUtil.LONG_MASK) + (inverse[1] & SqlMathUtil.LONG_MASK) * (array[5] & SqlMathUtil.LONG_MASK) + (inverse[2] & SqlMathUtil.LONG_MASK) * (array[4] & SqlMathUtil.LONG_MASK) + (inverse[3] & SqlMathUtil.LONG_MASK) * (array[3] & SqlMathUtil.LONG_MASK);
  z6=(int)product;
  product>>>=32;
  product+=(inverse[0] & SqlMathUtil.LONG_MASK) * (array[7] & SqlMathUtil.LONG_MASK) + (inverse[1] & SqlMathUtil.LONG_MASK) * (array[6] & SqlMathUtil.LONG_MASK) + (inverse[2] & SqlMathUtil.LONG_MASK) * (array[5] & SqlMathUtil.LONG_MASK) + (inverse[3] & SqlMathUtil.LONG_MASK) * (array[4] & SqlMathUtil.LONG_MASK);
  z7=(int)product;
  product>>>=32;
  if (inverseWordShift >= 1) {
    product+=(inverse[1] & SqlMathUtil.LONG_MASK) * (array[7] & SqlMathUtil.LONG_MASK) + (inverse[2] & SqlMathUtil.LONG_MASK) * (array[6] & SqlMathUtil.LONG_MASK) + (inverse[3] & SqlMathUtil.LONG_MASK) * (array[5] & SqlMathUtil.LONG_MASK);
    z8=(int)product;
    product>>>=32;
    if (inverseWordShift >= 2) {
      product+=(inverse[2] & SqlMathUtil.LONG_MASK) * (array[7] & SqlMathUtil.LONG_MASK) + (inverse[3] & SqlMathUtil.LONG_MASK) * (array[6] & SqlMathUtil.LONG_MASK);
      z9=(int)product;
      product>>>=32;
      if (inverseWordShift >= 3) {
        product+=(inverse[3] & SqlMathUtil.LONG_MASK) * (array[7] & SqlMathUtil.LONG_MASK);
        z10=(int)product;
        product>>>=32;
      }
    }
  }
  if (product != 0) {
    SqlMathUtil.throwOverflowException();
  }
switch (inverseWordShift) {
case 1:
    z4=z5;
  z5=z6;
z6=z7;
z7=z8;
break;
case 2:
z4=z6;
z5=z7;
z6=z8;
z7=z9;
break;
case 3:
z4=z7;
z5=z8;
z6=z9;
z7=z10;
break;
default :
break;
}
final int[] power=SqlMathUtil.POWER_TENS_INT128[tenScale].v;
final int[] half=SqlMathUtil.ROUND_POWER_TENS_INT128[tenScale].v;
int d0, d1, d2, d3, d4;
product=(array[0] & SqlMathUtil.LONG_MASK) - (power[0] & SqlMathUtil.LONG_MASK) * (z4 & SqlMathUtil.LONG_MASK);
d0=(int)product;
product=(array[1] & SqlMathUtil.LONG_MASK) - (power[0] & SqlMathUtil.LONG_MASK) * (z5 & SqlMathUtil.LONG_MASK) - (power[1] & SqlMathUtil.LONG_MASK) * (z4 & SqlMathUtil.LONG_MASK) - ((int)-(product >> 32));
d1=(int)product;
product=(array[2] & SqlMathUtil.LONG_MASK) - (power[0] & SqlMathUtil.LONG_MASK) * (z6 & SqlMathUtil.LONG_MASK) - (power[1] & SqlMathUtil.LONG_MASK) * (z5 & SqlMathUtil.LONG_MASK) - (power[2] & SqlMathUtil.LONG_MASK) * (z4 & SqlMathUtil.LONG_MASK) - ((int)-(product >> 32));
d2=(int)product;
product=(array[3] & SqlMathUtil.LONG_MASK) - (power[0] & SqlMathUtil.LONG_MASK) * (z7 & SqlMathUtil.LONG_MASK) - (power[1] & SqlMathUtil.LONG_MASK) * (z6 & SqlMathUtil.LONG_MASK) - (power[2] & SqlMathUtil.LONG_MASK) * (z5 & SqlMathUtil.LONG_MASK) - (power[3] & SqlMathUtil.LONG_MASK) * (z4 & SqlMathUtil.LONG_MASK) - ((int)-(product >> 32));
d3=(int)product;
product=(array[4] & SqlMathUtil.LONG_MASK) - (power[1] & SqlMathUtil.LONG_MASK) * (z7 & SqlMathUtil.LONG_MASK) - (power[2] & SqlMathUtil.LONG_MASK) * (z6 & SqlMathUtil.LONG_MASK) - (power[3] & SqlMathUtil.LONG_MASK) * (z5 & SqlMathUtil.LONG_MASK) - ((int)-(product >> 32));
d4=(int)product;
boolean increment=(d4 != 0) || (compareTo(d0,d1,d2,d3,half[0],half[1],half[2],half[3]) >= 0);
array[0]=z4;
array[1]=z5;
array[2]=z6;
array[3]=z7;
if (increment) {
incrementArray(array);
}
}
