{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
        struct.startRowOffset=iprot.readI64();
        struct.setStartRowOffsetIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
      org.apache.thrift.protocol.TList _list110=iprot.readListBegin();
      struct.rows=new ArrayList<TRow>(_list110.size);
      for (int _i111=0; _i111 < _list110.size; ++_i111) {
        TRow _elem112;
        _elem112=new TRow();
        _elem112.read(iprot);
        struct.rows.add(_elem112);
      }
      iprot.readListEnd();
    }
    struct.setRowsIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
  org.apache.thrift.protocol.TList _list113=iprot.readListBegin();
  struct.columns=new ArrayList<TColumn>(_list113.size);
  for (int _i114=0; _i114 < _list113.size; ++_i114) {
    TColumn _elem115;
    _elem115=new TColumn();
    _elem115.read(iprot);
    struct.columns.add(_elem115);
  }
  iprot.readListEnd();
}
struct.setColumnsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
