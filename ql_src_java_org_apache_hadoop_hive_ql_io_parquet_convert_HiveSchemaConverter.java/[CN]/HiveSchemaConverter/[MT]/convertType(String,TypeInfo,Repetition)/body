{
  if (typeInfo.getCategory().equals(Category.PRIMITIVE)) {
    if (typeInfo.equals(TypeInfoFactory.stringTypeInfo)) {
      return Types.primitive(PrimitiveTypeName.BINARY,repetition).as(OriginalType.UTF8).named(name);
    }
 else     if (typeInfo.equals(TypeInfoFactory.intTypeInfo) || typeInfo.equals(TypeInfoFactory.shortTypeInfo) || typeInfo.equals(TypeInfoFactory.byteTypeInfo)) {
      return Types.primitive(PrimitiveTypeName.INT32,repetition).named(name);
    }
 else     if (typeInfo.equals(TypeInfoFactory.longTypeInfo)) {
      return Types.primitive(PrimitiveTypeName.INT64,repetition).named(name);
    }
 else     if (typeInfo.equals(TypeInfoFactory.doubleTypeInfo)) {
      return Types.primitive(PrimitiveTypeName.DOUBLE,repetition).named(name);
    }
 else     if (typeInfo.equals(TypeInfoFactory.floatTypeInfo)) {
      return Types.primitive(PrimitiveTypeName.FLOAT,repetition).named(name);
    }
 else     if (typeInfo.equals(TypeInfoFactory.booleanTypeInfo)) {
      return Types.primitive(PrimitiveTypeName.BOOLEAN,repetition).named(name);
    }
 else     if (typeInfo.equals(TypeInfoFactory.binaryTypeInfo)) {
      return Types.primitive(PrimitiveTypeName.BINARY,repetition).named(name);
    }
 else     if (typeInfo.equals(TypeInfoFactory.timestampTypeInfo)) {
      return Types.primitive(PrimitiveTypeName.INT96,repetition).named(name);
    }
 else     if (typeInfo.equals(TypeInfoFactory.voidTypeInfo)) {
      throw new UnsupportedOperationException("Void type not implemented");
    }
 else     if (typeInfo.getTypeName().toLowerCase().startsWith(serdeConstants.CHAR_TYPE_NAME)) {
      return Types.optional(PrimitiveTypeName.BINARY).as(OriginalType.UTF8).named(name);
    }
 else     if (typeInfo.getTypeName().toLowerCase().startsWith(serdeConstants.VARCHAR_TYPE_NAME)) {
      return Types.optional(PrimitiveTypeName.BINARY).as(OriginalType.UTF8).named(name);
    }
 else     if (typeInfo instanceof DecimalTypeInfo) {
      DecimalTypeInfo decimalTypeInfo=(DecimalTypeInfo)typeInfo;
      int prec=decimalTypeInfo.precision();
      int scale=decimalTypeInfo.scale();
      int bytes=ParquetHiveSerDe.PRECISION_TO_BYTE_COUNT[prec - 1];
      return Types.optional(PrimitiveTypeName.FIXED_LEN_BYTE_ARRAY).length(bytes).as(OriginalType.DECIMAL).scale(scale).precision(prec).named(name);
    }
 else     if (typeInfo.equals(TypeInfoFactory.dateTypeInfo)) {
      return new PrimitiveType(repetition,PrimitiveTypeName.INT32,name,OriginalType.DATE);
    }
 else     if (typeInfo.equals(TypeInfoFactory.unknownTypeInfo)) {
      throw new UnsupportedOperationException("Unknown type not implemented");
    }
 else {
      throw new IllegalArgumentException("Unknown type: " + typeInfo);
    }
  }
 else   if (typeInfo.getCategory().equals(Category.LIST)) {
    return convertArrayType(name,(ListTypeInfo)typeInfo);
  }
 else   if (typeInfo.getCategory().equals(Category.STRUCT)) {
    return convertStructType(name,(StructTypeInfo)typeInfo);
  }
 else   if (typeInfo.getCategory().equals(Category.MAP)) {
    return convertMapType(name,(MapTypeInfo)typeInfo);
  }
 else   if (typeInfo.getCategory().equals(Category.UNION)) {
    throw new UnsupportedOperationException("Union type not implemented");
  }
 else {
    throw new IllegalArgumentException("Unknown type: " + typeInfo);
  }
}
