{
  if (typeInfo.getCategory().equals(Category.PRIMITIVE)) {
    if (typeInfo.equals(TypeInfoFactory.stringTypeInfo)) {
      return new PrimitiveType(repetition,PrimitiveTypeName.BINARY,name,OriginalType.UTF8);
    }
 else     if (typeInfo.equals(TypeInfoFactory.intTypeInfo) || typeInfo.equals(TypeInfoFactory.shortTypeInfo) || typeInfo.equals(TypeInfoFactory.byteTypeInfo)) {
      return new PrimitiveType(repetition,PrimitiveTypeName.INT32,name);
    }
 else     if (typeInfo.equals(TypeInfoFactory.longTypeInfo)) {
      return new PrimitiveType(repetition,PrimitiveTypeName.INT64,name);
    }
 else     if (typeInfo.equals(TypeInfoFactory.doubleTypeInfo)) {
      return new PrimitiveType(repetition,PrimitiveTypeName.DOUBLE,name);
    }
 else     if (typeInfo.equals(TypeInfoFactory.floatTypeInfo)) {
      return new PrimitiveType(repetition,PrimitiveTypeName.FLOAT,name);
    }
 else     if (typeInfo.equals(TypeInfoFactory.booleanTypeInfo)) {
      return new PrimitiveType(repetition,PrimitiveTypeName.BOOLEAN,name);
    }
 else     if (typeInfo.equals(TypeInfoFactory.binaryTypeInfo)) {
      throw new UnsupportedOperationException("Binary type not implemented");
    }
 else     if (typeInfo.equals(TypeInfoFactory.timestampTypeInfo)) {
      throw new UnsupportedOperationException("Timestamp type not implemented");
    }
 else     if (typeInfo.equals(TypeInfoFactory.voidTypeInfo)) {
      throw new UnsupportedOperationException("Void type not implemented");
    }
 else     if (typeInfo instanceof DecimalTypeInfo) {
      DecimalTypeInfo decimalTypeInfo=(DecimalTypeInfo)typeInfo;
      int prec=decimalTypeInfo.precision();
      int scale=decimalTypeInfo.scale();
      int bytes=ParquetHiveSerDe.PRECISION_TO_BYTE_COUNT[prec - 1];
      return Types.optional(PrimitiveTypeName.FIXED_LEN_BYTE_ARRAY).length(bytes).as(OriginalType.DECIMAL).scale(scale).precision(prec).named(name);
    }
 else     if (typeInfo.equals(TypeInfoFactory.unknownTypeInfo)) {
      throw new UnsupportedOperationException("Unknown type not implemented");
    }
 else {
      throw new IllegalArgumentException("Unknown type: " + typeInfo);
    }
  }
 else   if (typeInfo.getCategory().equals(Category.LIST)) {
    return convertArrayType(name,(ListTypeInfo)typeInfo);
  }
 else   if (typeInfo.getCategory().equals(Category.STRUCT)) {
    return convertStructType(name,(StructTypeInfo)typeInfo);
  }
 else   if (typeInfo.getCategory().equals(Category.MAP)) {
    return convertMapType(name,(MapTypeInfo)typeInfo);
  }
 else   if (typeInfo.getCategory().equals(Category.UNION)) {
    throw new UnsupportedOperationException("Union type not implemented");
  }
 else {
    throw new IllegalArgumentException("Unknown type: " + typeInfo);
  }
}
