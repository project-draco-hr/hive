{
  Random r=new Random(1234);
  TimestampColumnVector timestampColVector=new TimestampColumnVector();
  Timestamp[] randTimestamps=new Timestamp[VectorizedRowBatch.DEFAULT_SIZE];
  Timestamp[] candTimestamps=new Timestamp[VectorizedRowBatch.DEFAULT_SIZE];
  int[] compareToLeftRights=new int[VectorizedRowBatch.DEFAULT_SIZE];
  int[] compareToRightLefts=new int[VectorizedRowBatch.DEFAULT_SIZE];
  for (int i=0; i < VectorizedRowBatch.DEFAULT_SIZE; i++) {
    Timestamp randTimestamp=RandomTypeUtil.getRandTimestamp(r);
    randTimestamps[i]=randTimestamp;
    timestampColVector.set(i,randTimestamp);
    Timestamp candTimestamp=RandomTypeUtil.getRandTimestamp(r);
    candTimestamps[i]=candTimestamp;
    compareToLeftRights[i]=candTimestamp.compareTo(randTimestamp);
    compareToRightLefts[i]=randTimestamp.compareTo(candTimestamp);
  }
  for (int i=0; i < VectorizedRowBatch.DEFAULT_SIZE; i++) {
    Timestamp retrievedTimestamp=timestampColVector.asScratchTimestamp(i);
    Timestamp randTimestamp=randTimestamps[i];
    if (!retrievedTimestamp.equals(randTimestamp)) {
      assertTrue(false);
    }
    Timestamp candTimestamp=candTimestamps[i];
    int compareToLeftRight=timestampColVector.compareTo(candTimestamp,i);
    if (compareToLeftRight != compareToLeftRights[i]) {
      assertTrue(false);
    }
    int compareToRightLeft=timestampColVector.compareTo(i,candTimestamp);
    if (compareToRightLeft != compareToRightLefts[i]) {
      assertTrue(false);
    }
  }
}
