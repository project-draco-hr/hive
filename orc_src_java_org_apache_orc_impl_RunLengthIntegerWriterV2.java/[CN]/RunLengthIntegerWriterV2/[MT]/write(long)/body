{
  if (numLiterals == 0) {
    initializeLiterals(val);
  }
 else {
    if (numLiterals == 1) {
      prevDelta=val - literals[0];
      literals[numLiterals++]=val;
      if (val == literals[0]) {
        fixedRunLength=2;
        variableRunLength=0;
      }
 else {
        fixedRunLength=0;
        variableRunLength=2;
      }
    }
 else {
      long currentDelta=val - literals[numLiterals - 1];
      if (prevDelta == 0 && currentDelta == 0) {
        literals[numLiterals++]=val;
        if (variableRunLength > 0) {
          fixedRunLength=2;
        }
        fixedRunLength+=1;
        if (fixedRunLength >= MIN_REPEAT && variableRunLength > 0) {
          numLiterals-=MIN_REPEAT;
          variableRunLength-=MIN_REPEAT - 1;
          long[] tailVals=new long[MIN_REPEAT];
          System.arraycopy(literals,numLiterals,tailVals,0,MIN_REPEAT);
          determineEncoding();
          writeValues();
          for (          long l : tailVals) {
            literals[numLiterals++]=l;
          }
        }
        if (fixedRunLength == MAX_SCOPE) {
          determineEncoding();
          writeValues();
        }
      }
 else {
        if (fixedRunLength >= MIN_REPEAT) {
          if (fixedRunLength <= MAX_SHORT_REPEAT_LENGTH) {
            encoding=EncodingType.SHORT_REPEAT;
            writeValues();
          }
 else {
            encoding=EncodingType.DELTA;
            isFixedDelta=true;
            writeValues();
          }
        }
        if (fixedRunLength > 0 && fixedRunLength < MIN_REPEAT) {
          if (val != literals[numLiterals - 1]) {
            variableRunLength=fixedRunLength;
            fixedRunLength=0;
          }
        }
        if (numLiterals == 0) {
          initializeLiterals(val);
        }
 else {
          prevDelta=val - literals[numLiterals - 1];
          literals[numLiterals++]=val;
          variableRunLength+=1;
          if (variableRunLength == MAX_SCOPE) {
            determineEncoding();
            writeValues();
          }
        }
      }
    }
  }
}
