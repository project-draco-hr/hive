{
  inputExpression.evaluate(batch);
  DecimalColumnVector inputVector=(DecimalColumnVector)batch.cols[this.inputExpression.getOutputColumn()];
  int batchSize=batch.size;
  if (batchSize == 0) {
    return;
  }
  Aggregation myagg=(Aggregation)agg;
  if (myagg.isOutOfRange) {
    return;
  }
  HiveDecimalWritable[] vector=inputVector.vector;
  if (inputVector.isRepeating) {
    if ((inputVector.noNulls) || !inputVector.isNull[0]) {
      if (myagg.isNull) {
        myagg.isNull=false;
        myagg.sum.set(HiveDecimal.ZERO);
      }
      HiveDecimal value=vector[0].getHiveDecimal();
      HiveDecimal multiple;
      try {
        multiple=value.multiply(HiveDecimal.create(batchSize));
      }
 catch (      ArithmeticException e) {
        myagg.isOutOfRange=true;
        return;
      }
      HiveDecimal result;
      try {
        result=myagg.sum.getHiveDecimal().add(multiple);
      }
 catch (      ArithmeticException e) {
        myagg.isOutOfRange=true;
        return;
      }
      myagg.sum.set(result);
    }
    return;
  }
  if (!batch.selectedInUse && inputVector.noNulls) {
    iterateNoSelectionNoNulls(myagg,vector,inputVector.scale,batchSize);
  }
 else   if (!batch.selectedInUse) {
    iterateNoSelectionHasNulls(myagg,vector,inputVector.scale,batchSize,inputVector.isNull);
  }
 else   if (inputVector.noNulls) {
    iterateSelectionNoNulls(myagg,vector,inputVector.scale,batchSize,batch.selected);
  }
 else {
    iterateSelectionHasNulls(myagg,vector,inputVector.scale,batchSize,inputVector.isNull,batch.selected);
  }
}
