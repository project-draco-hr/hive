{
  final Queue<Task<?>> queue=new ConcurrentLinkedQueue<Task<?>>(tasks);
  TaskTraverse traverse=new TaskTraverse(){
    @Override protected void accepted(    Task<?> task){
      List<Task<?>> childTasks=getChildTasks(task);
      if (childTasks != null && !childTasks.isEmpty()) {
        queue.addAll(childTasks);
      }
    }
    @Override protected void rejected(    Task<?> child){
      queue.add(child);
    }
    @Override protected List<Task<?>> next(    Task<?> task){
      return queue.isEmpty() ? null : Arrays.<Task<?>>asList(queue.remove());
    }
  }
;
  if (!queue.isEmpty()) {
    traverse.traverse(queue.remove());
  }
  return new ArrayList<Task>(traverse.traversed);
}
