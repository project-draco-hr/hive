{
  LOG.trace("Started pruning partiton");
  LOG.trace("tabname = " + this.tab.getName());
  LOG.trace("prune Expression = " + this.prunerExpr);
  LinkedHashSet<Partition> true_parts=new LinkedHashSet<Partition>();
  LinkedHashSet<Partition> unkn_parts=new LinkedHashSet<Partition>();
  try {
    StructObjectInspector rowObjectInspector=(StructObjectInspector)this.tab.getDeserializer().getObjectInspector();
    Object[] rowWithPart=new Object[2];
    for (    Partition part : Hive.get().getPartitions(this.tab)) {
      LinkedHashMap<String,String> partSpec=part.getSpec();
      ArrayList<String> partNames=new ArrayList<String>();
      ArrayList<String> partValues=new ArrayList<String>();
      ArrayList<ObjectInspector> partObjectInspectors=new ArrayList<ObjectInspector>();
      for (      Map.Entry<String,String> entry : partSpec.entrySet()) {
        partNames.add(entry.getKey());
        partValues.add(entry.getValue());
        partObjectInspectors.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);
      }
      StructObjectInspector partObjectInspector=ObjectInspectorFactory.getStandardStructObjectInspector(partNames,partObjectInspectors);
      rowWithPart[1]=partValues;
      ArrayList<StructObjectInspector> ois=new ArrayList<StructObjectInspector>(2);
      ois.add(rowObjectInspector);
      ois.add(partObjectInspector);
      StructObjectInspector rowWithPartObjectInspector=ObjectInspectorFactory.getUnionStructObjectInspector(ois);
      if (this.prunerExpr != null) {
        ExprNodeEvaluator evaluator=ExprNodeEvaluatorFactory.get(this.prunerExpr);
        ObjectInspector evaluateResultOI=evaluator.initialize(rowWithPartObjectInspector);
        Object evaluateResultO=evaluator.evaluate(rowWithPart);
        Boolean r=(Boolean)((PrimitiveObjectInspector)evaluateResultOI).getPrimitiveJavaObject(evaluateResultO);
        LOG.trace("prune result for partition " + partSpec + ": "+ r);
        if (Boolean.TRUE.equals(r)) {
          LOG.debug("retained partition: " + partSpec);
          true_parts.add(part);
        }
 else         if (Boolean.FALSE.equals(r)) {
          LOG.trace("pruned partition: " + partSpec);
        }
 else {
          LOG.debug("unknown partition: " + partSpec);
          unkn_parts.add(part);
        }
      }
 else {
        true_parts.add(part);
      }
    }
  }
 catch (  Exception e) {
    throw new HiveException(e);
  }
  return new PrunedPartitionList(true_parts,unkn_parts);
}
