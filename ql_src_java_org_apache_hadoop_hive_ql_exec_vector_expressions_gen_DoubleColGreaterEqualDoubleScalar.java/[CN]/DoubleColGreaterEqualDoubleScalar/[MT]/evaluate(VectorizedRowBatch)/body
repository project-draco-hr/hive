{
  if (childExpressions != null) {
    super.evaluateChildren(batch);
  }
  DoubleColumnVector inputColVector=(DoubleColumnVector)batch.cols[colNum];
  LongColumnVector outputColVector=(LongColumnVector)batch.cols[outputColumn];
  int[] sel=batch.selected;
  boolean[] nullPos=inputColVector.isNull;
  int n=batch.size;
  double[] vector=inputColVector.vector;
  long[] outputVector=outputColVector.vector;
  if (n == 0) {
    return;
  }
  if (inputColVector.noNulls) {
    if (inputColVector.isRepeating) {
      outputVector[0]=vector[0] >= value ? 1 : 0;
      outputColVector.isRepeating=true;
    }
 else     if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        outputVector[i]=vector[i] >= value ? 1 : 0;
      }
    }
 else {
      for (int i=0; i != n; i++) {
        outputVector[i]=vector[i] >= value ? 1 : 0;
      }
    }
  }
 else {
    if (inputColVector.isRepeating) {
      if (!nullPos[0]) {
        outputVector[0]=vector[0] >= value ? 1 : 0;
      }
 else {
        outputVector[0]=0;
      }
      outputColVector.isRepeating=true;
    }
 else     if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        if (!nullPos[i]) {
          outputVector[i]=vector[i] >= value ? 1 : 0;
        }
 else {
          outputVector[i]=0;
        }
      }
    }
 else {
      for (int i=0; i != n; i++) {
        if (!nullPos[i]) {
          outputVector[i]=vector[i] >= value ? 1 : 0;
        }
 else {
          outputVector[i]=0;
        }
      }
    }
  }
}
