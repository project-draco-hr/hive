{
  String dbNames[]=new String[]{"ldbg_db1","ldbg_db2"};
  try {
    Database db=new Database(dbNames[0],"no description","file:///tmp",emptyParameters);
    store.createDatabase(db);
    db=new Database(dbNames[1],"no description","file:///tmp",emptyParameters);
    store.createDatabase(db);
    String[] roleNames=new String[]{"ldbg_role1","ldbg_role2"};
    String[] userNames=new String[]{"frodo","sam"};
    store.addRole(roleNames[0],"me");
    store.addRole(roleNames[1],"me");
    int now=(int)(System.currentTimeMillis() / 1000);
    Role role1=store.getRole(roleNames[0]);
    Role role2=store.getRole(roleNames[1]);
    store.grantRole(role1,userNames[0],PrincipalType.USER,"bob",PrincipalType.USER,false);
    store.grantRole(role1,roleNames[1],PrincipalType.ROLE,"admin",PrincipalType.ROLE,true);
    store.grantRole(role2,userNames[1],PrincipalType.USER,"bob",PrincipalType.USER,false);
    List<HiveObjectPrivilege> privileges=new ArrayList<HiveObjectPrivilege>();
    HiveObjectRef hiveObjRef=new HiveObjectRef(HiveObjectType.DATABASE,dbNames[0],null,null,null);
    PrivilegeGrantInfo grantInfo=new PrivilegeGrantInfo("read",now,"me",PrincipalType.USER,false);
    HiveObjectPrivilege hop=new HiveObjectPrivilege(hiveObjRef,userNames[0],PrincipalType.USER,grantInfo);
    privileges.add(hop);
    grantInfo=new PrivilegeGrantInfo("write",now,"me",PrincipalType.USER,true);
    hop=new HiveObjectPrivilege(hiveObjRef,roleNames[0],PrincipalType.ROLE,grantInfo);
    privileges.add(hop);
    PrivilegeBag pBag=new PrivilegeBag(privileges);
    store.grantPrivileges(pBag);
    List<HiveObjectPrivilege> hops=store.listPrincipalDBGrants(roleNames[0],PrincipalType.ROLE,dbNames[0]);
    Assert.assertEquals(1,hops.size());
    Assert.assertEquals(PrincipalType.ROLE,hops.get(0).getPrincipalType());
    Assert.assertEquals(HiveObjectType.DATABASE,hops.get(0).getHiveObject().getObjectType());
    Assert.assertEquals("write",hops.get(0).getGrantInfo().getPrivilege());
    hops=store.listPrincipalDBGrants(userNames[0],PrincipalType.USER,dbNames[0]);
    Assert.assertEquals(1,hops.size());
    Assert.assertEquals(PrincipalType.USER,hops.get(0).getPrincipalType());
    Assert.assertEquals(HiveObjectType.DATABASE,hops.get(0).getHiveObject().getObjectType());
    Assert.assertEquals("read",hops.get(0).getGrantInfo().getPrivilege());
    hops=store.listPrincipalDBGrants(roleNames[1],PrincipalType.ROLE,dbNames[0]);
    Assert.assertEquals(0,hops.size());
    hops=store.listPrincipalDBGrants(userNames[1],PrincipalType.USER,dbNames[0]);
    Assert.assertEquals(0,hops.size());
    hops=store.listPrincipalDBGrants(roleNames[0],PrincipalType.ROLE,dbNames[1]);
    Assert.assertEquals(0,hops.size());
    hops=store.listPrincipalDBGrants(userNames[0],PrincipalType.USER,dbNames[1]);
    Assert.assertEquals(0,hops.size());
    hops=store.listDBGrantsAll(dbNames[0]);
    Assert.assertEquals(2,hops.size());
    boolean sawUser=false, sawRole=false;
    for (    HiveObjectPrivilege h : hops) {
      if (h.getPrincipalName().equals(userNames[0])) {
        Assert.assertEquals(PrincipalType.USER,h.getPrincipalType());
        Assert.assertEquals(HiveObjectType.DATABASE,h.getHiveObject().getObjectType());
        Assert.assertEquals("read",h.getGrantInfo().getPrivilege());
        sawUser=true;
      }
 else       if (h.getPrincipalName().equals(roleNames[0])) {
        Assert.assertEquals(PrincipalType.ROLE,h.getPrincipalType());
        Assert.assertEquals(HiveObjectType.DATABASE,h.getHiveObject().getObjectType());
        Assert.assertEquals("write",h.getGrantInfo().getPrivilege());
        sawRole=true;
      }
    }
    Assert.assertTrue(sawUser && sawRole);
    hops=store.listPrincipalDBGrantsAll(roleNames[0],PrincipalType.ROLE);
    Assert.assertEquals(1,hops.size());
    Assert.assertEquals(PrincipalType.ROLE,hops.get(0).getPrincipalType());
    Assert.assertEquals(HiveObjectType.DATABASE,hops.get(0).getHiveObject().getObjectType());
    Assert.assertEquals("write",hops.get(0).getGrantInfo().getPrivilege());
    hops=store.listPrincipalDBGrantsAll(userNames[0],PrincipalType.USER);
    Assert.assertEquals(1,hops.size());
    Assert.assertEquals(PrincipalType.USER,hops.get(0).getPrincipalType());
    Assert.assertEquals(HiveObjectType.DATABASE,hops.get(0).getHiveObject().getObjectType());
    Assert.assertEquals("read",hops.get(0).getGrantInfo().getPrivilege());
    hops=store.listPrincipalDBGrantsAll(roleNames[1],PrincipalType.ROLE);
    Assert.assertEquals(0,hops.size());
    hops=store.listPrincipalDBGrantsAll(userNames[1],PrincipalType.USER);
    Assert.assertEquals(0,hops.size());
  }
  finally {
    store.dropDatabase(dbNames[0]);
    store.dropDatabase(dbNames[1]);
  }
}
