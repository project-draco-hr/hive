{
  String dbName="ltg_db";
  String[] tableNames=new String[]{"ltg_t1","ltg_t2"};
  try {
    Database db=new Database(dbName,"no description","file:///tmp",emptyParameters);
    store.createDatabase(db);
    int startTime=(int)(System.currentTimeMillis() / 1000);
    List<FieldSchema> cols=new ArrayList<FieldSchema>();
    cols.add(new FieldSchema("col1","int","nocomment"));
    SerDeInfo serde=new SerDeInfo("serde","seriallib",null);
    StorageDescriptor sd=new StorageDescriptor(cols,"file:/tmp","input","output",false,0,serde,null,null,emptyParameters);
    Table table=new Table(tableNames[0],dbName,"me",startTime,startTime,0,sd,null,emptyParameters,null,null,null);
    store.createTable(table);
    table=new Table(tableNames[1],dbName,"me",startTime,startTime,0,sd,null,emptyParameters,null,null,null);
    store.createTable(table);
    String[] roleNames=new String[]{"ltg_role1","ltg_role2"};
    String[] userNames=new String[]{"gandalf","radagast"};
    store.addRole(roleNames[0],"me");
    store.addRole(roleNames[1],"me");
    int now=(int)(System.currentTimeMillis() / 1000);
    Role role1=store.getRole(roleNames[0]);
    Role role2=store.getRole(roleNames[1]);
    store.grantRole(role1,userNames[0],PrincipalType.USER,"bob",PrincipalType.USER,false);
    store.grantRole(role1,roleNames[1],PrincipalType.ROLE,"admin",PrincipalType.ROLE,true);
    store.grantRole(role2,userNames[1],PrincipalType.USER,"bob",PrincipalType.USER,false);
    List<HiveObjectPrivilege> privileges=new ArrayList<HiveObjectPrivilege>();
    HiveObjectRef hiveObjRef=new HiveObjectRef(HiveObjectType.TABLE,dbName,tableNames[0],null,null);
    PrivilegeGrantInfo grantInfo=new PrivilegeGrantInfo("read",now,"me",PrincipalType.USER,false);
    HiveObjectPrivilege hop=new HiveObjectPrivilege(hiveObjRef,userNames[0],PrincipalType.USER,grantInfo);
    privileges.add(hop);
    grantInfo=new PrivilegeGrantInfo("write",now,"me",PrincipalType.USER,true);
    hop=new HiveObjectPrivilege(hiveObjRef,roleNames[0],PrincipalType.ROLE,grantInfo);
    privileges.add(hop);
    PrivilegeBag pBag=new PrivilegeBag(privileges);
    store.grantPrivileges(pBag);
    List<HiveObjectPrivilege> hops=store.listAllTableGrants(roleNames[0],PrincipalType.ROLE,dbName,tableNames[0]);
    Assert.assertEquals(1,hops.size());
    Assert.assertEquals(PrincipalType.ROLE,hops.get(0).getPrincipalType());
    Assert.assertEquals(HiveObjectType.TABLE,hops.get(0).getHiveObject().getObjectType());
    Assert.assertEquals("write",hops.get(0).getGrantInfo().getPrivilege());
    hops=store.listAllTableGrants(userNames[0],PrincipalType.USER,dbName,tableNames[0]);
    Assert.assertEquals(1,hops.size());
    Assert.assertEquals(PrincipalType.USER,hops.get(0).getPrincipalType());
    Assert.assertEquals(HiveObjectType.TABLE,hops.get(0).getHiveObject().getObjectType());
    Assert.assertEquals("read",hops.get(0).getGrantInfo().getPrivilege());
    hops=store.listAllTableGrants(roleNames[1],PrincipalType.ROLE,dbName,tableNames[0]);
    Assert.assertEquals(0,hops.size());
    hops=store.listAllTableGrants(userNames[1],PrincipalType.USER,dbName,tableNames[0]);
    Assert.assertEquals(0,hops.size());
    hops=store.listAllTableGrants(roleNames[0],PrincipalType.ROLE,dbName,tableNames[1]);
    Assert.assertEquals(0,hops.size());
    hops=store.listAllTableGrants(userNames[0],PrincipalType.USER,dbName,tableNames[1]);
    Assert.assertEquals(0,hops.size());
    hops=store.listTableGrantsAll(dbName,tableNames[0]);
    Assert.assertEquals(2,hops.size());
    boolean sawUser=false, sawRole=false;
    for (    HiveObjectPrivilege h : hops) {
      if (h.getPrincipalName().equals(userNames[0])) {
        Assert.assertEquals(PrincipalType.USER,h.getPrincipalType());
        Assert.assertEquals(HiveObjectType.TABLE,h.getHiveObject().getObjectType());
        Assert.assertEquals("read",h.getGrantInfo().getPrivilege());
        sawUser=true;
      }
 else       if (h.getPrincipalName().equals(roleNames[0])) {
        Assert.assertEquals(PrincipalType.ROLE,h.getPrincipalType());
        Assert.assertEquals(HiveObjectType.TABLE,h.getHiveObject().getObjectType());
        Assert.assertEquals("write",h.getGrantInfo().getPrivilege());
        sawRole=true;
      }
    }
    Assert.assertTrue(sawUser && sawRole);
    hops=store.listPrincipalTableGrantsAll(roleNames[0],PrincipalType.ROLE);
    Assert.assertEquals(1,hops.size());
    Assert.assertEquals(PrincipalType.ROLE,hops.get(0).getPrincipalType());
    Assert.assertEquals(HiveObjectType.TABLE,hops.get(0).getHiveObject().getObjectType());
    Assert.assertEquals("write",hops.get(0).getGrantInfo().getPrivilege());
    hops=store.listPrincipalTableGrantsAll(userNames[0],PrincipalType.USER);
    Assert.assertEquals(1,hops.size());
    Assert.assertEquals(PrincipalType.USER,hops.get(0).getPrincipalType());
    Assert.assertEquals(HiveObjectType.TABLE,hops.get(0).getHiveObject().getObjectType());
    Assert.assertEquals("read",hops.get(0).getGrantInfo().getPrivilege());
    hops=store.listPrincipalDBGrantsAll(roleNames[1],PrincipalType.ROLE);
    Assert.assertEquals(0,hops.size());
    hops=store.listPrincipalDBGrantsAll(userNames[1],PrincipalType.USER);
    Assert.assertEquals(0,hops.size());
  }
  finally {
    store.dropTable(dbName,tableNames[0]);
    store.dropTable(dbName,tableNames[1]);
    store.dropDatabase(dbName);
  }
}
