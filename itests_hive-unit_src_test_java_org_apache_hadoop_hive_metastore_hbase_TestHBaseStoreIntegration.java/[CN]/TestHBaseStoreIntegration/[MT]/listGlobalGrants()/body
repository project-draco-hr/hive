{
  String[] roleNames=new String[]{"lgg_role1","lgg_role2"};
  String[] userNames=new String[]{"merry","pippen"};
  store.addRole(roleNames[0],"me");
  store.addRole(roleNames[1],"me");
  int now=(int)(System.currentTimeMillis() / 1000);
  Role role1=store.getRole(roleNames[0]);
  Role role2=store.getRole(roleNames[1]);
  store.grantRole(role1,userNames[0],PrincipalType.USER,"bob",PrincipalType.USER,false);
  store.grantRole(role1,roleNames[1],PrincipalType.ROLE,"admin",PrincipalType.ROLE,true);
  store.grantRole(role2,userNames[1],PrincipalType.USER,"bob",PrincipalType.USER,false);
  List<HiveObjectPrivilege> privileges=new ArrayList<HiveObjectPrivilege>();
  HiveObjectRef hiveObjRef=new HiveObjectRef(HiveObjectType.GLOBAL,null,null,null,null);
  PrivilegeGrantInfo grantInfo=new PrivilegeGrantInfo("read",now,"me",PrincipalType.USER,false);
  HiveObjectPrivilege hop=new HiveObjectPrivilege(hiveObjRef,userNames[0],PrincipalType.USER,grantInfo);
  privileges.add(hop);
  grantInfo=new PrivilegeGrantInfo("write",now,"me",PrincipalType.USER,true);
  hop=new HiveObjectPrivilege(hiveObjRef,roleNames[0],PrincipalType.ROLE,grantInfo);
  privileges.add(hop);
  PrivilegeBag pBag=new PrivilegeBag(privileges);
  store.grantPrivileges(pBag);
  List<HiveObjectPrivilege> hops=store.listPrincipalGlobalGrants(roleNames[0],PrincipalType.ROLE);
  Assert.assertEquals(1,hops.size());
  Assert.assertEquals(PrincipalType.ROLE,hops.get(0).getPrincipalType());
  Assert.assertEquals(HiveObjectType.GLOBAL,hops.get(0).getHiveObject().getObjectType());
  Assert.assertEquals("write",hops.get(0).getGrantInfo().getPrivilege());
  hops=store.listPrincipalGlobalGrants(userNames[0],PrincipalType.USER);
  Assert.assertEquals(1,hops.size());
  Assert.assertEquals(PrincipalType.USER,hops.get(0).getPrincipalType());
  Assert.assertEquals(HiveObjectType.GLOBAL,hops.get(0).getHiveObject().getObjectType());
  Assert.assertEquals("read",hops.get(0).getGrantInfo().getPrivilege());
  hops=store.listPrincipalGlobalGrants(roleNames[1],PrincipalType.ROLE);
  Assert.assertEquals(0,hops.size());
  hops=store.listPrincipalGlobalGrants(userNames[1],PrincipalType.USER);
  Assert.assertEquals(0,hops.size());
  hops=store.listGlobalGrantsAll();
  Assert.assertEquals(2,hops.size());
  boolean sawUser=false, sawRole=false;
  for (  HiveObjectPrivilege h : hops) {
    if (h.getPrincipalName().equals(userNames[0])) {
      Assert.assertEquals(PrincipalType.USER,h.getPrincipalType());
      Assert.assertEquals(HiveObjectType.GLOBAL,h.getHiveObject().getObjectType());
      Assert.assertEquals("read",h.getGrantInfo().getPrivilege());
      sawUser=true;
    }
 else     if (h.getPrincipalName().equals(roleNames[0])) {
      Assert.assertEquals(PrincipalType.ROLE,h.getPrincipalType());
      Assert.assertEquals(HiveObjectType.GLOBAL,h.getHiveObject().getObjectType());
      Assert.assertEquals("write",h.getGrantInfo().getPrivilege());
      sawRole=true;
    }
  }
  Assert.assertTrue(sawUser && sawRole);
}
