{
  String dbName="default";
  String tableName="addParts";
  int startTime=(int)(System.currentTimeMillis() / 1000);
  List<FieldSchema> cols=new ArrayList<FieldSchema>();
  cols.add(new FieldSchema("col1","int","nocomment"));
  SerDeInfo serde=new SerDeInfo("serde","seriallib",null);
  StorageDescriptor sd=new StorageDescriptor(cols,"file:/tmp","input","output",false,0,serde,null,null,emptyParameters);
  List<FieldSchema> partCols=new ArrayList<FieldSchema>();
  partCols.add(new FieldSchema("pc","string",""));
  Table table=new Table(tableName,dbName,"me",startTime,startTime,0,sd,partCols,emptyParameters,null,null,null);
  store.createTable(table);
  List<String> partVals=Arrays.asList("alan","bob","carl","doug","ethan");
  List<Partition> partitions=new ArrayList<Partition>();
  for (  String val : partVals) {
    List<String> vals=new ArrayList<String>();
    vals.add(val);
    StorageDescriptor psd=new StorageDescriptor(sd);
    psd.setLocation("file:/tmp/pc=" + val);
    Partition part=new Partition(vals,dbName,tableName,startTime,startTime,psd,emptyParameters);
    partitions.add(part);
  }
  store.addPartitions(dbName,tableName,partitions);
  List<String> partNames=store.listPartitionNames(dbName,tableName,(short)-1);
  Assert.assertEquals(5,partNames.size());
  String[] names=partNames.toArray(new String[partNames.size()]);
  Arrays.sort(names);
  String[] canonicalNames=partVals.toArray(new String[partVals.size()]);
  for (int i=0; i < canonicalNames.length; i++)   canonicalNames[i]="pc=" + canonicalNames[i];
  Assert.assertArrayEquals(canonicalNames,names);
}
