{
  store.addRole(roleNames[0],"me");
  store.addRole(roleNames[1],"me");
  int now=(int)(System.currentTimeMillis() / 1000);
  Role role1=store.getRole(roleNames[0]);
  Role role2=store.getRole(roleNames[1]);
  store.grantRole(role1,userNames[0],PrincipalType.USER,"bob",PrincipalType.USER,false);
  store.grantRole(role1,roleNames[1],PrincipalType.ROLE,"admin",PrincipalType.ROLE,true);
  store.grantRole(role2,userNames[1],PrincipalType.USER,"bob",PrincipalType.USER,false);
  List<HiveObjectPrivilege> privileges=new ArrayList<HiveObjectPrivilege>();
  HiveObjectRef hiveObjRef=new HiveObjectRef(objectType,dbName,tableName,null,null);
  PrivilegeGrantInfo grantInfo=new PrivilegeGrantInfo("read",now,"me",PrincipalType.USER,false);
  HiveObjectPrivilege hop=new HiveObjectPrivilege(hiveObjRef,userNames[0],PrincipalType.USER,grantInfo);
  privileges.add(hop);
  hiveObjRef=new HiveObjectRef(objectType,dbName,tableName,null,null);
  grantInfo=new PrivilegeGrantInfo("write",now,"me",PrincipalType.USER,true);
  hop=new HiveObjectPrivilege(hiveObjRef,roleNames[0],PrincipalType.ROLE,grantInfo);
  privileges.add(hop);
  hiveObjRef=new HiveObjectRef(objectType,dbName,tableName,null,null);
  grantInfo=new PrivilegeGrantInfo("exec",now,"me",PrincipalType.USER,false);
  hop=new HiveObjectPrivilege(hiveObjRef,roleNames[1],PrincipalType.ROLE,grantInfo);
  privileges.add(hop);
  hiveObjRef=new HiveObjectRef(objectType,dbName,tableName,null,null);
  grantInfo=new PrivilegeGrantInfo("create",now,"me",PrincipalType.USER,true);
  hop=new HiveObjectPrivilege(hiveObjRef,userNames[2],PrincipalType.USER,grantInfo);
  privileges.add(hop);
  hiveObjRef=new HiveObjectRef(objectType,dbName,tableName,null,null);
  grantInfo=new PrivilegeGrantInfo("create2",now,"me",PrincipalType.USER,true);
  hop=new HiveObjectPrivilege(hiveObjRef,userNames[2],PrincipalType.USER,grantInfo);
  privileges.add(hop);
  PrivilegeBag pBag=new PrivilegeBag(privileges);
  store.grantPrivileges(pBag);
  PrincipalPrivilegeSet pps=getPPS(objectType,dbName,tableName,userNames[0]);
  Assert.assertEquals(1,pps.getUserPrivilegesSize());
  Assert.assertEquals(1,pps.getUserPrivileges().get(userNames[0]).size());
  grantInfo=pps.getUserPrivileges().get(userNames[0]).get(0);
  Assert.assertEquals("read",grantInfo.getPrivilege());
  Assert.assertTrue(now <= grantInfo.getCreateTime());
  Assert.assertEquals("me",grantInfo.getGrantor());
  Assert.assertEquals(PrincipalType.USER,grantInfo.getGrantorType());
  Assert.assertFalse(grantInfo.isGrantOption());
  Assert.assertEquals(2,pps.getRolePrivilegesSize());
  Assert.assertEquals(1,pps.getRolePrivileges().get(roleNames[0]).size());
  grantInfo=pps.getRolePrivileges().get(roleNames[0]).get(0);
  Assert.assertEquals("write",grantInfo.getPrivilege());
  Assert.assertTrue(now <= grantInfo.getCreateTime());
  Assert.assertEquals("me",grantInfo.getGrantor());
  Assert.assertEquals(PrincipalType.USER,grantInfo.getGrantorType());
  Assert.assertTrue(grantInfo.isGrantOption());
  Assert.assertEquals(1,pps.getRolePrivileges().get(roleNames[1]).size());
  grantInfo=pps.getRolePrivileges().get(roleNames[1]).get(0);
  Assert.assertEquals("exec",grantInfo.getPrivilege());
  Assert.assertTrue(now <= grantInfo.getCreateTime());
  Assert.assertEquals("me",grantInfo.getGrantor());
  Assert.assertEquals(PrincipalType.USER,grantInfo.getGrantorType());
  Assert.assertFalse(grantInfo.isGrantOption());
  pps=getPPS(objectType,dbName,tableName,userNames[1]);
  Assert.assertEquals(0,pps.getUserPrivilegesSize());
  Assert.assertEquals(1,pps.getRolePrivilegesSize());
  Assert.assertEquals(1,pps.getRolePrivileges().get(roleNames[1]).size());
  grantInfo=pps.getRolePrivileges().get(roleNames[1]).get(0);
  Assert.assertEquals("exec",grantInfo.getPrivilege());
  Assert.assertTrue(now <= grantInfo.getCreateTime());
  Assert.assertEquals("me",grantInfo.getGrantor());
  Assert.assertEquals(PrincipalType.USER,grantInfo.getGrantorType());
  Assert.assertFalse(grantInfo.isGrantOption());
  pps=getPPS(objectType,dbName,tableName,userNames[2]);
  Assert.assertEquals(1,pps.getUserPrivilegesSize());
  Assert.assertEquals(2,pps.getUserPrivileges().get(userNames[2]).size());
  Assert.assertEquals(0,pps.getRolePrivilegesSize());
  pps=getPPS(objectType,dbName,tableName,userNames[3]);
  Assert.assertEquals(0,pps.getUserPrivilegesSize());
  Assert.assertEquals(0,pps.getRolePrivilegesSize());
  store.removeRole(roleNames[1]);
  checkRoleRemovedFromAllPrivileges(objectType,dbName,tableName,roleNames[1]);
  pps=getPPS(objectType,dbName,tableName,userNames[0]);
  Assert.assertEquals(1,pps.getRolePrivilegesSize());
  Assert.assertEquals(1,pps.getRolePrivileges().get(roleNames[0]).size());
  pps=getPPS(objectType,dbName,tableName,userNames[1]);
  Assert.assertEquals(0,pps.getRolePrivilegesSize());
  privileges.clear();
  hiveObjRef=new HiveObjectRef(objectType,dbName,tableName,null,null);
  grantInfo=new PrivilegeGrantInfo("write",now,"me",PrincipalType.USER,true);
  hop=new HiveObjectPrivilege(hiveObjRef,roleNames[0],PrincipalType.ROLE,grantInfo);
  privileges.add(hop);
  hiveObjRef=new HiveObjectRef(objectType,dbName,tableName,null,null);
  grantInfo=new PrivilegeGrantInfo("create2",now,"me",PrincipalType.USER,true);
  hop=new HiveObjectPrivilege(hiveObjRef,userNames[2],PrincipalType.USER,grantInfo);
  privileges.add(hop);
  pBag=new PrivilegeBag(privileges);
  store.revokePrivileges(pBag,true);
  pps=getPPS(objectType,dbName,tableName,userNames[0]);
  Assert.assertEquals(1,pps.getRolePrivilegesSize());
  Assert.assertEquals(1,pps.getRolePrivileges().get(roleNames[0]).size());
  grantInfo=pps.getRolePrivileges().get(roleNames[0]).get(0);
  Assert.assertEquals("write",grantInfo.getPrivilege());
  Assert.assertTrue(now <= grantInfo.getCreateTime());
  Assert.assertEquals("me",grantInfo.getGrantor());
  Assert.assertEquals(PrincipalType.USER,grantInfo.getGrantorType());
  Assert.assertFalse(grantInfo.isGrantOption());
  pps=getPPS(objectType,dbName,tableName,userNames[2]);
  Assert.assertEquals(1,pps.getUserPrivilegesSize());
  Assert.assertEquals(2,pps.getUserPrivileges().get(userNames[2]).size());
  for (  PrivilegeGrantInfo pgi : pps.getUserPrivileges().get(userNames[2])) {
    if (pgi.getPrivilege().equals("create"))     Assert.assertTrue(pgi.isGrantOption());
 else     if (pgi.getPrivilege().equals("create2"))     Assert.assertFalse(pgi.isGrantOption());
 else     Assert.fail("huh?");
  }
  store.revokePrivileges(pBag,false);
  pps=getPPS(objectType,dbName,tableName,userNames[0]);
  Assert.assertEquals(1,pps.getUserPrivilegesSize());
  Assert.assertEquals(1,pps.getRolePrivilegesSize());
  Assert.assertEquals(0,pps.getRolePrivileges().get(roleNames[0]).size());
  pps=getPPS(objectType,dbName,tableName,userNames[2]);
  Assert.assertEquals(1,pps.getUserPrivilegesSize());
  Assert.assertEquals(1,pps.getUserPrivileges().get(userNames[2]).size());
  Assert.assertEquals("create",pps.getUserPrivileges().get(userNames[2]).get(0).getPrivilege());
  Assert.assertEquals(0,pps.getRolePrivilegesSize());
}
