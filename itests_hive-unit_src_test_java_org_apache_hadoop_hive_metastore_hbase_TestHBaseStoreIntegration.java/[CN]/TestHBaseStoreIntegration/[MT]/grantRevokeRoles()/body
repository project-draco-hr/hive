{
  int now=(int)(System.currentTimeMillis() / 1000);
  String roleName1="role1";
  store.addRole(roleName1,"me");
  String roleName2="role2";
  store.addRole(roleName2,"me");
  Role role1=store.getRole(roleName1);
  Role role2=store.getRole(roleName2);
  store.grantRole(role1,"fred",PrincipalType.USER,"bob",PrincipalType.USER,false);
  store.grantRole(role2,roleName1,PrincipalType.ROLE,"admin",PrincipalType.ROLE,true);
  store.grantRole(role2,"fred",PrincipalType.USER,"admin",PrincipalType.ROLE,false);
  List<MRoleMap> maps=store.listRoles("fred",PrincipalType.USER);
  Assert.assertEquals(3,maps.size());
  boolean sawRole1=false, sawRole2=false, sawPublic=false;
  for (  MRoleMap map : maps) {
    if (map.getRole().getRoleName().equals(roleName1)) {
      sawRole1=true;
      Assert.assertEquals("fred",map.getPrincipalName());
      Assert.assertEquals(PrincipalType.USER.toString(),map.getPrincipalType());
      Assert.assertTrue(map.getAddTime() >= now);
      Assert.assertEquals("bob",map.getGrantor());
      Assert.assertEquals(PrincipalType.USER.toString(),map.getGrantorType());
      Assert.assertFalse(map.getGrantOption());
    }
 else     if (map.getRole().getRoleName().equals(roleName2)) {
      sawRole2=true;
      Assert.assertEquals("fred",map.getPrincipalName());
      Assert.assertEquals(PrincipalType.USER.toString(),map.getPrincipalType());
      LOG.debug("now " + now + " add time "+ map.getAddTime());
      Assert.assertTrue(map.getAddTime() >= now);
      Assert.assertEquals("admin",map.getGrantor());
      Assert.assertEquals(PrincipalType.ROLE.toString(),map.getGrantorType());
      Assert.assertFalse(map.getGrantOption());
    }
 else     if (map.getRole().getRoleName().equals(HiveMetaStore.PUBLIC)) {
      sawPublic=true;
      Assert.assertEquals("fred",map.getPrincipalName());
      Assert.assertEquals(PrincipalType.USER.toString(),map.getPrincipalType());
      Assert.assertFalse(map.getGrantOption());
    }
 else {
      Assert.fail("Unknown role name " + map.getRole().getRoleName());
    }
  }
  Assert.assertTrue(sawRole1 && sawRole2 && sawPublic);
  maps=store.listRoles("fred",PrincipalType.ROLE);
  Assert.assertEquals(0,maps.size());
  maps=store.listRoles(roleName1,PrincipalType.ROLE);
  Assert.assertEquals(1,maps.size());
  MRoleMap map=maps.get(0);
  Assert.assertEquals(roleName1,map.getPrincipalName());
  Assert.assertEquals(PrincipalType.ROLE.toString(),map.getPrincipalType());
  Assert.assertEquals(roleName2,map.getRole().getRoleName());
  Assert.assertTrue(map.getAddTime() <= now);
  Assert.assertEquals("admin",map.getGrantor());
  Assert.assertEquals(PrincipalType.ROLE.toString(),map.getGrantorType());
  Assert.assertTrue(map.getGrantOption());
  maps=store.listRoleMembers(roleName1);
  Assert.assertEquals(1,maps.size());
  Assert.assertEquals("fred",maps.get(0).getPrincipalName());
  Assert.assertEquals(PrincipalType.USER.toString(),maps.get(0).getPrincipalType());
  Assert.assertTrue(maps.get(0).getAddTime() >= now);
  Assert.assertEquals("bob",maps.get(0).getGrantor());
  Assert.assertEquals(PrincipalType.USER.toString(),maps.get(0).getGrantorType());
  Assert.assertFalse(maps.get(0).getGrantOption());
  maps=store.listRoleMembers(roleName2);
  Assert.assertEquals(2,maps.size());
  boolean sawFred=false;
  sawRole1=false;
  for (  MRoleMap m : maps) {
    if ("fred".equals(m.getPrincipalName()))     sawFred=true;
 else     if (roleName1.equals(m.getPrincipalName()))     sawRole1=true;
 else     Assert.fail("Unexpected principal " + m.getPrincipalName());
  }
  Assert.assertTrue(sawFred && sawRole1);
  store.revokeRole(role2,roleName1,PrincipalType.ROLE,true);
  maps=store.listRoles(roleName1,PrincipalType.ROLE);
  Assert.assertEquals(1,maps.size());
  Assert.assertEquals(roleName2,maps.get(0).getRole().getRoleName());
  Assert.assertFalse(maps.get(0).getGrantOption());
  store.removeRole(roleName1);
  maps=store.listRoles("fred",PrincipalType.USER);
  Assert.assertEquals(2,maps.size());
  sawRole2=sawPublic=false;
  for (  MRoleMap m : maps) {
    if (m.getRole().getRoleName().equals(roleName2))     sawRole2=true;
 else     if (m.getRole().getRoleName().equals(HiveMetaStore.PUBLIC))     sawPublic=true;
 else     Assert.fail("Unknown role " + m.getRole().getRoleName());
  }
  Assert.assertTrue(sawRole2 && sawPublic);
  maps=store.listRoles(roleName1,PrincipalType.ROLE);
  Assert.assertEquals(0,maps.size());
  store.revokeRole(role2,"fred",PrincipalType.USER,false);
  maps=store.listRoles("fred",PrincipalType.USER);
  Assert.assertEquals(1,maps.size());
  Assert.assertEquals(HiveMetaStore.PUBLIC,maps.get(0).getRole().getRoleName());
}
