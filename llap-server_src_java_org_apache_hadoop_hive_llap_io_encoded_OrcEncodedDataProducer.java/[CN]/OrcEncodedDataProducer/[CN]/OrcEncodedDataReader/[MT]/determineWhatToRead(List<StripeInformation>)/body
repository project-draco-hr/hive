{
  long offset=split.getStart(), maxOffset=offset + split.getLength();
  stripeIxFrom=stripeIxTo=-1;
  int stripeIx=0;
  if (LlapIoImpl.LOG.isDebugEnabled()) {
    String tmp="FileSplit {" + split.getStart() + ", "+ split.getLength()+ "}; stripes ";
    for (    StripeInformation stripe : stripes) {
      tmp+="{" + stripe.getOffset() + ", "+ stripe.getLength()+ "}, ";
    }
    LlapIoImpl.LOG.debug(tmp);
  }
  List<Integer> stripeRgCounts=new ArrayList<Integer>(stripes.size());
  for (  StripeInformation stripe : stripes) {
    long stripeStart=stripe.getOffset();
    if (offset > stripeStart)     continue;
    if (stripeIxFrom == -1) {
      if (DebugUtils.isTraceEnabled()) {
        LlapIoImpl.LOG.info("Including from " + stripeIx + " ("+ stripeStart+ " >= "+ offset+ ")");
      }
      stripeIxFrom=stripeIx;
    }
    if (stripeStart >= maxOffset) {
      if (DebugUtils.isTraceEnabled()) {
        LlapIoImpl.LOG.info("Including until " + stripeIxTo + " ("+ stripeStart+ " >= "+ maxOffset+ ")");
      }
      stripeIxTo=stripeIx;
      break;
    }
    int rgCount=(int)Math.ceil((double)stripe.getNumberOfRows() / orcReader.getRowIndexStride());
    stripeRgCounts.add(rgCount);
    ++stripeIx;
  }
  if (stripeIxTo == -1) {
    if (DebugUtils.isTraceEnabled()) {
      LlapIoImpl.LOG.info("Including until " + stripeIx + " (end of file)");
    }
    stripeIxTo=stripeIx;
  }
  readState=new long[stripeRgCounts.size()][][];
  for (int i=0; i < stripeRgCounts.size(); ++i) {
    int bitmaskSize=align64(stripeRgCounts.get(i)) >>> 6;
    readState[i]=new long[columnIds.size()][];
    for (int j=0; j < columnIds.size(); ++j) {
      readState[i][j]=new long[bitmaskSize];
    }
  }
  rgsPerStripe=new int[stripeRgCounts.size()];
  for (int i=0; i < rgsPerStripe.length; ++i) {
    rgsPerStripe[i]=stripeRgCounts.get(i);
  }
}
