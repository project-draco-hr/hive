{
  LlapIoImpl.LOG.info("Processing split for " + internedFilePath);
  if (isStopped)   return null;
  orcReader=null;
  OrcFileMetadata metadata=metadataCache.getFileMetadata(internedFilePath);
  if (metadata == null) {
    orcReader=createOrcReader(split);
    metadata=new OrcFileMetadata(orcReader);
    metadataCache.putFileMetadata(internedFilePath,metadata);
  }
  if (columnIds == null) {
    columnIds=new ArrayList<Integer>(metadata.getTypes().size());
    for (int i=1; i < metadata.getTypes().size(); ++i) {
      columnIds.add(i);
    }
  }
  determineStripesToRead(metadata.getStripes());
  if (readState.length == 0) {
    consumer.setDone();
    return null;
  }
  int stride=metadata.getRowIndexStride();
  ArrayList<OrcStripeMetadata> stripeMetadatas=null;
  boolean[] globalIncludes=OrcInputFormat.genIncludedColumns(metadata.getTypes(),columnIds,true);
  RecordReader[] stripeReaders=new RecordReader[readState.length];
  if (sarg != null && stride != 0) {
    stripeMetadatas=readStripesMetadata(metadata,globalIncludes,stripeReaders);
  }
  determineRgsToRead(metadata.getStripes(),metadata.getTypes(),globalIncludes,stride,stripeMetadatas);
  if (isStopped)   return null;
  List<Integer>[] stripeColsToRead=produceDataFromCache(metadata.getStripes(),stride);
  for (int stripeIxMod=0; stripeIxMod < stripeReaders.length; ++stripeIxMod) {
    RecordReader stripeReader=stripeReaders[stripeIxMod];
    if (stripeColsToRead != null && stripeColsToRead[stripeIxMod].isEmpty()) {
      if (stripeReader != null) {
        stripeReader.close();
        stripeReaders[stripeIxMod]=null;
      }
      continue;
    }
    if (stripeReader != null)     continue;
    StripeInformation si=metadata.getStripes().get(stripeIxFrom + stripeIxMod);
    if (orcReader == null) {
      orcReader=createOrcReader(split);
    }
    stripeReader=orcReader.rows(si.getOffset(),si.getLength(),globalIncludes);
    stripeReader.prepareEncodedColumnRead();
    stripeReaders[stripeIxMod]=stripeReader;
  }
  OrcBatchKey stripeKey=new OrcBatchKey(internedFilePath,-1,0);
  for (int stripeIxMod=0; stripeIxMod < stripeReaders.length; ++stripeIxMod) {
    RecordReader stripeReader=stripeReaders[stripeIxMod];
    if (stripeReader == null)     continue;
    List<Integer> colsToRead=stripeColsToRead == null ? null : stripeColsToRead[stripeIxMod];
    boolean[] stripeIncludes=null;
    boolean[][] colRgs=readState[stripeIxMod];
    if (colsToRead == null || colsToRead.size() == colRgs.length) {
      colsToRead=columnIds;
      stripeIncludes=globalIncludes;
    }
 else {
      stripeIncludes=OrcInputFormat.genIncludedColumns(metadata.getTypes(),colsToRead,true);
      boolean[][] colRgs2=new boolean[colsToRead.size()][];
      for (int i=0, i2=-1; i < colRgs.length; ++i) {
        if (colRgs[i] == null)         continue;
        colRgs2[i2]=colRgs[i];
        ++i2;
      }
      colRgs=colRgs2;
    }
    OrcStripeMetadata stripeMetadata;
    int stripeIx=stripeIxMod + stripeIxFrom;
    if (stripeMetadatas != null) {
      stripeMetadata=stripeMetadatas.get(stripeIxMod);
    }
 else {
      stripeKey.stripeIx=stripeIx;
      stripeMetadata=metadataCache.getStripeMetadata(stripeKey);
      if (stripeMetadata == null) {
        stripeMetadata=new OrcStripeMetadata(stripeReader,stripeKey.stripeIx,stripeIncludes);
        metadataCache.putStripeMetadata(stripeKey,stripeMetadata);
        stripeKey=new OrcBatchKey(internedFilePath,-1,0);
      }
    }
    stripeReader.setMetadata(stripeMetadata.getRowIndexes(),stripeMetadata.getEncodings(),stripeMetadata.getStreams());
    Consumer<EncodedColumnBatch<OrcBatchKey>> consumer=(cache == null) ? this.consumer : this;
    try {
      stripeReader.readEncodedColumns(stripeIx,stripeIncludes,colRgs,lowLevelCache,consumer);
    }
 catch (    Throwable t) {
      consumer.setError(t);
    }
    stripeReader.close();
  }
  consumer.setDone();
  if (DebugUtils.isTraceMttEnabled()) {
    LlapIoImpl.LOG.info("done processing " + split);
  }
  return null;
}
