{
  TypeInfo typeInfo=TypeInfoUtils.getTypeInfoFromTypeString("struct<c1:boolean,c2:tinyint" + ",c3:smallint,c4:int,c5:bigint,c6:float,c7:double,c8:binary," + "c9:string,c10:struct<c1:int>,c11:map<int,int>,c12:uniontype<int>"+ ",c13:array<timestamp>>");
  StructObjectInspector inspector=(StructObjectInspector)OrcStruct.createObjectInspector(typeInfo);
  assertEquals("struct<c1:boolean,c2:tinyint,c3:smallint,c4:int,c5:" + "bigint,c6:float,c7:double,c8:binary,c9:string,c10:struct<" + "c1:int>,c11:map<int,int>,c12:uniontype<int>,c13:array<timestamp>>",inspector.getTypeName());
  assertEquals(null,inspector.getAllStructFieldRefs().get(0).getFieldComment());
  assertEquals(null,inspector.getStructFieldRef("UNKNOWN"));
  OrcStruct s1=new OrcStruct(13);
  for (int i=0; i < 13; ++i) {
    s1.setFieldValue(i,i);
  }
  List<Object> list=new ArrayList<Object>();
  list.addAll(Arrays.asList(0,1,2,3,4,5,6,7,8,9,10,11,12));
  assertEquals(list,inspector.getStructFieldsDataAsList(s1));
  ListObjectInspector listOI=(ListObjectInspector)inspector.getAllStructFieldRefs().get(12).getFieldObjectInspector();
  assertEquals(ObjectInspector.Category.LIST,listOI.getCategory());
  assertEquals(10,listOI.getListElement(list,10));
  assertEquals(13,listOI.getListLength(list));
  Map<Integer,Integer> map=new HashMap<Integer,Integer>();
  map.put(1,2);
  map.put(2,4);
  map.put(3,6);
  MapObjectInspector mapOI=(MapObjectInspector)inspector.getAllStructFieldRefs().get(10).getFieldObjectInspector();
  assertEquals(3,mapOI.getMapSize(map));
  assertEquals(4,mapOI.getMapValueElement(map,2));
}
