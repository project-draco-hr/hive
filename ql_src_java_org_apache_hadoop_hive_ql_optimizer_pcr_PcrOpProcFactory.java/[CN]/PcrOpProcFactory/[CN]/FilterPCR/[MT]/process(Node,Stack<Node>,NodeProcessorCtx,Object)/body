{
  PcrOpWalkerCtx owc=(PcrOpWalkerCtx)procCtx;
  FilterOperator fop=(FilterOperator)nd;
  FilterOperator fop2=null;
  Node tmp=stack.pop();
  Node tmp2=stack.pop();
  TableScanOperator top=null;
  Operator<? extends OperatorDesc> pop=null;
  if (tmp2 instanceof TableScanOperator) {
    top=(TableScanOperator)tmp2;
    pop=top;
  }
 else {
    top=(TableScanOperator)stack.peek();
    fop2=(FilterOperator)tmp2;
    pop=fop2;
  }
  stack.push(tmp2);
  stack.push(tmp);
  if (fop2 != null && !fop2.getConf().getIsSamplingPred()) {
    return null;
  }
  if (fop.getConf().getIsSamplingPred()) {
    return null;
  }
  if (fop.getParentOperators().size() > 1) {
    return null;
  }
  ParseContext pctx=owc.getParseContext();
  PrunedPartitionList prunedPartList;
  try {
    String alias=(String)owc.getParseContext().getTopOps().keySet().toArray()[0];
    prunedPartList=pctx.getPrunedPartitions(alias,top);
  }
 catch (  HiveException e) {
    throw new SemanticException(e.getMessage(),e);
  }
  ExprNodeDesc predicate=fop.getConf().getPredicate();
  String alias=top.getConf().getAlias();
  ArrayList<Partition> partitions=new ArrayList<Partition>();
  if (prunedPartList == null) {
    return null;
  }
  for (  Partition p : prunedPartList.getConfirmedPartns()) {
    if (!p.getTable().isPartitioned()) {
      return null;
    }
  }
  for (  Partition p : prunedPartList.getUnknownPartns()) {
    if (!p.getTable().isPartitioned()) {
      return null;
    }
  }
  partitions.addAll(prunedPartList.getConfirmedPartns());
  partitions.addAll(prunedPartList.getUnknownPartns());
  PcrExprProcFactory.NodeInfoWrapper wrapper=PcrExprProcFactory.walkExprTree(alias,partitions,top.getConf().getVirtualCols(),predicate);
  if (wrapper.state == PcrExprProcFactory.WalkState.TRUE) {
    owc.getOpToRemove().add(new PcrOpWalkerCtx.OpToDeleteInfo(pop,fop));
  }
 else   if (wrapper.state != PcrExprProcFactory.WalkState.FALSE) {
    fop.getConf().setPredicate(wrapper.outExpr);
  }
 else {
    LOG.warn("Filter passes no row");
    fop.getConf().setPredicate(wrapper.outExpr);
  }
  return null;
}
