{
  ParquetInputSplit split;
  if (oldSplit instanceof FileSplit) {
    final Path finalPath=((FileSplit)oldSplit).getPath();
    jobConf=projectionPusher.pushProjectionsAndFilters(conf,finalPath.getParent());
    FilterCompat.Filter filter=setFilter(jobConf);
    final ParquetMetadata parquetMetadata=ParquetFileReader.readFooter(jobConf,finalPath);
    final List<BlockMetaData> blocks=parquetMetadata.getBlocks();
    final FileMetaData fileMetaData=parquetMetadata.getFileMetaData();
    final ReadContext readContext=new DataWritableReadSupport().init(new InitContext(jobConf,null,fileMetaData.getSchema()));
    schemaSize=MessageTypeParser.parseMessageType(readContext.getReadSupportMetadata().get(DataWritableReadSupport.HIVE_TABLE_AS_PARQUET_SCHEMA)).getFieldCount();
    final List<BlockMetaData> splitGroup=new ArrayList<BlockMetaData>();
    final long splitStart=((FileSplit)oldSplit).getStart();
    final long splitLength=((FileSplit)oldSplit).getLength();
    for (    final BlockMetaData block : blocks) {
      final long firstDataPage=block.getColumns().get(0).getFirstDataPageOffset();
      if (firstDataPage >= splitStart && firstDataPage < splitStart + splitLength) {
        splitGroup.add(block);
      }
    }
    if (splitGroup.isEmpty()) {
      LOG.warn("Skipping split, could not find row group in: " + (FileSplit)oldSplit);
      return null;
    }
    if (filter != null) {
      filtedBlocks=RowGroupFilter.filterRowGroups(filter,splitGroup,fileMetaData.getSchema());
      if (filtedBlocks.isEmpty()) {
        LOG.debug("All row groups are dropped due to filter predicates");
        return null;
      }
      long droppedBlocks=splitGroup.size() - filtedBlocks.size();
      if (droppedBlocks > 0) {
        LOG.debug("Dropping " + droppedBlocks + " row groups that do not pass filter predicate");
      }
    }
 else {
      filtedBlocks=splitGroup;
    }
    if (HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_PARQUET_TIMESTAMP_SKIP_CONVERSION)) {
      skipTimestampConversion=!Strings.nullToEmpty(fileMetaData.getCreatedBy()).startsWith("parquet-mr");
    }
    split=new ParquetInputSplit(finalPath,splitStart,splitLength,((FileSplit)oldSplit).getLocations(),filtedBlocks,readContext.getRequestedSchema().toString(),fileMetaData.getSchema().toString(),fileMetaData.getKeyValueMetaData(),readContext.getReadSupportMetadata());
    return split;
  }
 else {
    throw new IllegalArgumentException("Unknown split type: " + oldSplit);
  }
}
