{
  ParquetInputSplit split;
  if (oldSplit instanceof FileSplit) {
    final Path finalPath=((FileSplit)oldSplit).getPath();
    final JobConf cloneJob=projectionPusher.pushProjectionsAndFilters(conf,finalPath.getParent());
    final ParquetMetadata parquetMetadata=ParquetFileReader.readFooter(cloneJob,finalPath);
    final List<BlockMetaData> blocks=parquetMetadata.getBlocks();
    final FileMetaData fileMetaData=parquetMetadata.getFileMetaData();
    final ReadContext readContext=new DataWritableReadSupport().init(cloneJob,fileMetaData.getKeyValueMetaData(),fileMetaData.getSchema());
    schemaSize=MessageTypeParser.parseMessageType(readContext.getReadSupportMetadata().get(DataWritableReadSupport.HIVE_SCHEMA_KEY)).getFieldCount();
    final List<BlockMetaData> splitGroup=new ArrayList<BlockMetaData>();
    final long splitStart=((FileSplit)oldSplit).getStart();
    final long splitLength=((FileSplit)oldSplit).getLength();
    for (    final BlockMetaData block : blocks) {
      final long firstDataPage=block.getColumns().get(0).getFirstDataPageOffset();
      if (firstDataPage >= splitStart && firstDataPage < splitStart + splitLength) {
        splitGroup.add(block);
      }
    }
    if (splitGroup.isEmpty()) {
      LOG.warn("Skipping split, could not find row group in: " + (FileSplit)oldSplit);
      split=null;
    }
 else {
      split=new ParquetInputSplit(finalPath,splitStart,splitLength,((FileSplit)oldSplit).getLocations(),splitGroup,readContext.getRequestedSchema().toString(),fileMetaData.getSchema().toString(),fileMetaData.getKeyValueMetaData(),readContext.getReadSupportMetadata());
    }
  }
 else {
    throw new IllegalArgumentException("Unknown split type: " + oldSplit);
  }
  return split;
}
