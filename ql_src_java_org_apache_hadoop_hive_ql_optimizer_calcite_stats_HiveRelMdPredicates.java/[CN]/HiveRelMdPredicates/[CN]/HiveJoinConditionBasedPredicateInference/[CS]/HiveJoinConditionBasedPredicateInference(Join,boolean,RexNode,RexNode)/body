{
  super();
  this.joinRel=joinRel;
  this.isSemiJoin=isSemiJoin;
  nFieldsLeft=joinRel.getLeft().getRowType().getFieldList().size();
  nFieldsRight=joinRel.getRight().getRowType().getFieldList().size();
  nSysFields=joinRel.getSystemFieldList().size();
  leftFieldsBitSet=ImmutableBitSet.range(nSysFields,nSysFields + nFieldsLeft);
  rightFieldsBitSet=ImmutableBitSet.range(nSysFields + nFieldsLeft,nSysFields + nFieldsLeft + nFieldsRight);
  allFieldsBitSet=ImmutableBitSet.range(0,nSysFields + nFieldsLeft + nFieldsRight);
  exprFields=Maps.newHashMap();
  allExprsDigests=new HashSet<String>();
  if (lPreds == null) {
    leftChildPredicates=null;
  }
 else {
    Mappings.TargetMapping leftMapping=Mappings.createShiftMapping(nSysFields + nFieldsLeft,nSysFields,0,nFieldsLeft);
    leftChildPredicates=lPreds.accept(new RexPermuteInputsShuttle(leftMapping,joinRel.getInput(0)));
    for (    RexNode r : RelOptUtil.conjunctions(leftChildPredicates)) {
      exprFields.put(r.toString(),RelOptUtil.InputFinder.bits(r));
      allExprsDigests.add(r.toString());
    }
  }
  if (rPreds == null) {
    rightChildPredicates=null;
  }
 else {
    Mappings.TargetMapping rightMapping=Mappings.createShiftMapping(nSysFields + nFieldsLeft + nFieldsRight,nSysFields + nFieldsLeft,0,nFieldsRight);
    rightChildPredicates=rPreds.accept(new RexPermuteInputsShuttle(rightMapping,joinRel.getInput(1)));
    for (    RexNode r : RelOptUtil.conjunctions(rightChildPredicates)) {
      exprFields.put(r.toString(),RelOptUtil.InputFinder.bits(r));
      allExprsDigests.add(r.toString());
    }
  }
  equivalence=Maps.newTreeMap();
  equalityPredicates=new HashSet<String>();
  for (int i=0; i < nSysFields + nFieldsLeft + nFieldsRight; i++) {
    equivalence.put(i,BitSets.of(i));
  }
  RexBuilder rexBuilder=joinRel.getCluster().getRexBuilder();
  List<RexNode> exprs=RelOptUtil.conjunctions(compose(rexBuilder,ImmutableList.of(joinRel.getCondition())));
  final EquivalenceFinder eF=new EquivalenceFinder();
  new ArrayList<Void>(Lists.transform(exprs,new Function<RexNode,Void>(){
    public Void apply(    RexNode input){
      return input.accept(eF);
    }
  }
));
  equivalence=BitSets.closure(equivalence);
}
