{
  RexBuilder rB=union.getCluster().getRexBuilder();
  Map<String,RexNode> finalPreds=new HashMap<>();
  List<RexNode> finalResidualPreds=new ArrayList<>();
  for (int i=0; i < union.getInputs().size(); i++) {
    RelNode input=union.getInputs().get(i);
    RelOptPredicateList info=mq.getPulledUpPredicates(input);
    if (info.pulledUpPredicates.isEmpty()) {
      return RelOptPredicateList.EMPTY;
    }
    Map<String,RexNode> preds=new HashMap<>();
    List<RexNode> residualPreds=new ArrayList<>();
    for (    RexNode pred : info.pulledUpPredicates) {
      final String predString=pred.toString();
      if (i == 0) {
        preds.put(predString,pred);
        continue;
      }
      if (finalPreds.containsKey(predString)) {
        preds.put(predString,pred);
      }
 else {
        residualPreds.add(pred);
      }
    }
    finalResidualPreds.add(RexUtil.composeConjunction(rB,residualPreds,false));
    for (    Entry<String,RexNode> e : finalPreds.entrySet()) {
      if (!preds.containsKey(e.getKey())) {
        for (int j=0; j < i; j++) {
          finalResidualPreds.set(j,RexUtil.composeConjunction(rB,Lists.newArrayList(finalResidualPreds.get(j),e.getValue()),false));
        }
      }
    }
    finalPreds=preds;
  }
  List<RexNode> preds=new ArrayList<>(finalPreds.values());
  RexNode disjPred=RexUtil.composeDisjunction(rB,finalResidualPreds,false);
  if (!disjPred.isAlwaysTrue()) {
    preds.add(disjPred);
  }
  return RelOptPredicateList.of(preds);
}
