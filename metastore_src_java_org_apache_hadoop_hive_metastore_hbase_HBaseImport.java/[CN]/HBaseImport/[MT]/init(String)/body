{
  Options options=new Options();
  doAll=doKerberos=false;
  parallel=1;
  batchSize=1000;
  options.addOption(OptionBuilder.withLongOpt("all").withDescription("Import the full metastore").create('a'));
  options.addOption(OptionBuilder.withLongOpt("batchsize").withDescription("Number of partitions to read and write in a batch, defaults to 1000").hasArg().create('b'));
  options.addOption(OptionBuilder.withLongOpt("database").withDescription("Import a single database").hasArgs().create('d'));
  options.addOption(OptionBuilder.withLongOpt("help").withDescription("You're looking at it").create('h'));
  options.addOption(OptionBuilder.withLongOpt("function").withDescription("Import a single function").hasArgs().create('f'));
  options.addOption(OptionBuilder.withLongOpt("kerberos").withDescription("Import all kerberos related objects (master key, tokens)").create('k'));
  options.addOption(OptionBuilder.withLongOpt("parallel").withDescription("Parallel factor for loading (only applied to tables and partitions), " + "defaults to 1").hasArg().create('p'));
  options.addOption(OptionBuilder.withLongOpt("role").withDescription("Import a single role").hasArgs().create('r'));
  options.addOption(OptionBuilder.withLongOpt("tables").withDescription("Import a single tables").hasArgs().create('t'));
  CommandLine cli=new GnuParser().parse(options,args);
  if (cli.hasOption('h')) {
    printHelp(options);
    return 1;
  }
  boolean hasCmd=false;
  if (cli.hasOption('a')) {
    hasCmd=true;
    doAll=true;
  }
  if (cli.hasOption('b')) {
    batchSize=Integer.parseInt(cli.getOptionValue('b'));
  }
  if (cli.hasOption('d')) {
    hasCmd=true;
    dbsToImport=Arrays.asList(cli.getOptionValues('d'));
  }
  if (cli.hasOption('f')) {
    hasCmd=true;
    functionsToImport=Arrays.asList(cli.getOptionValues('f'));
  }
  if (cli.hasOption('p')) {
    parallel=Integer.parseInt(cli.getOptionValue('p'));
  }
  if (cli.hasOption('r')) {
    hasCmd=true;
    rolesToImport=Arrays.asList(cli.getOptionValues('r'));
  }
  if (cli.hasOption('k')) {
    doKerberos=true;
  }
  if (cli.hasOption('t')) {
    hasCmd=true;
    tablesToImport=Arrays.asList(cli.getOptionValues('t'));
  }
  if (!hasCmd) {
    printHelp(options);
    return 1;
  }
  dbs=new ArrayList<>();
  partitionedTables=new LinkedBlockingQueue<>();
  tableNameQueue=new LinkedBlockingQueue<>();
  indexNameQueue=new LinkedBlockingQueue<>();
  partQueue=new ArrayBlockingQueue<>(parallel * 2);
  return 0;
}
