{
  try {
    ExprNodeDesc column=new ExprNodeColumnDesc(TypeInfoFactory.stringTypeInfo,"field1",null,false);
    List<ExprNodeDesc> children=Lists.newArrayList();
    children.add(column);
    ExprNodeGenericFuncDesc node=new ExprNodeGenericFuncDesc(TypeInfoFactory.stringTypeInfo,new GenericUDFOPNotNull(),children);
    assertNotNull(node);
    String filterExpr=Utilities.serializeExpression(node);
    conf.set(TableScanDesc.FILTER_EXPR_CONF_STR,filterExpr);
    List<IndexSearchCondition> sConditions=handler.getSearchConditions(conf);
    assertEquals(sConditions.size(),1);
    IndexSearchCondition sc=sConditions.get(0);
    new PushdownTuple(sc,handler.getPrimitiveComparison(sc.getColumnDesc().getTypeString(),sc),handler.getCompareOp(sc.getComparisonOp(),sc));
    fail("Should fail: compare op not registered for index analyzer. Should leave undesirable residual predicate");
  }
 catch (  RuntimeException e) {
    assertTrue(e.getMessage().contains("Unexpected residual predicate: field1 is not null"));
  }
catch (  Exception e) {
    fail(StringUtils.stringifyException(e));
  }
}
