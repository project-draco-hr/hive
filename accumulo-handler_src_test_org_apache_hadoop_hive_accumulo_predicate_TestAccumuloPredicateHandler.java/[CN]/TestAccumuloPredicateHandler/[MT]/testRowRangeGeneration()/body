{
  List<String> columnNames=Arrays.asList("key","column");
  List<TypeInfo> columnTypes=Arrays.<TypeInfo>asList(TypeInfoFactory.stringTypeInfo,TypeInfoFactory.stringTypeInfo);
  conf.set(serdeConstants.LIST_COLUMNS,Joiner.on(',').join(columnNames));
  conf.set(serdeConstants.LIST_COLUMN_TYPES,"string,string");
  String columnMappingStr=":rowID,cf:f1";
  conf.set(AccumuloSerDeParameters.COLUMN_MAPPINGS,columnMappingStr);
  columnMapper=new ColumnMapper(columnMappingStr,ColumnEncoding.STRING.getName(),columnNames,columnTypes);
  ExprNodeDesc column=new ExprNodeColumnDesc(TypeInfoFactory.intTypeInfo,"key",null,false);
  ExprNodeDesc constant=new ExprNodeConstantDesc(TypeInfoFactory.intTypeInfo,100);
  List<ExprNodeDesc> children=Lists.newArrayList();
  children.add(constant);
  children.add(column);
  ExprNodeGenericFuncDesc node=new ExprNodeGenericFuncDesc(TypeInfoFactory.stringTypeInfo,new GenericUDFOPLessThan(),children);
  assertNotNull(node);
  String filterExpr=SerializationUtilities.serializeExpression(node);
  conf.set(TableScanDesc.FILTER_EXPR_CONF_STR,filterExpr);
  List<Range> ranges=handler.getRanges(conf,columnMapper);
  Assert.assertEquals(1,ranges.size());
  Assert.assertEquals(new Range(new Text("100"),false,null,false),ranges.get(0));
}
