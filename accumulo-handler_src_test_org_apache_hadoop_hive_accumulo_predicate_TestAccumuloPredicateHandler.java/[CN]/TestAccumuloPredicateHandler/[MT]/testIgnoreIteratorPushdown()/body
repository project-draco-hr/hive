{
  conf=new JobConf();
  List<String> columnNames=Arrays.asList("field1","field2","rid");
  List<TypeInfo> columnTypes=Arrays.<TypeInfo>asList(TypeInfoFactory.stringTypeInfo,TypeInfoFactory.intTypeInfo,TypeInfoFactory.stringTypeInfo);
  conf.set(serdeConstants.LIST_COLUMNS,Joiner.on(',').join(columnNames));
  conf.set(serdeConstants.LIST_COLUMN_TYPES,"string,int,string");
  String columnMappingStr="cf:f1,cf:f2,:rowID";
  conf.set(AccumuloSerDeParameters.COLUMN_MAPPINGS,columnMappingStr);
  columnMapper=new ColumnMapper(columnMappingStr,ColumnEncoding.STRING.getName(),columnNames,columnTypes);
  ExprNodeDesc column=new ExprNodeColumnDesc(TypeInfoFactory.stringTypeInfo,"field1",null,false);
  ExprNodeDesc constant=new ExprNodeConstantDesc(TypeInfoFactory.stringTypeInfo,"aaa");
  List<ExprNodeDesc> children=Lists.newArrayList();
  children.add(column);
  children.add(constant);
  ExprNodeDesc node=new ExprNodeGenericFuncDesc(TypeInfoFactory.stringTypeInfo,new GenericUDFOPEqualOrLessThan(),children);
  assertNotNull(node);
  ExprNodeDesc column2=new ExprNodeColumnDesc(TypeInfoFactory.intTypeInfo,"field2",null,false);
  ExprNodeDesc constant2=new ExprNodeConstantDesc(TypeInfoFactory.intTypeInfo,5);
  List<ExprNodeDesc> children2=Lists.newArrayList();
  children2.add(column2);
  children2.add(constant2);
  ExprNodeDesc node2=new ExprNodeGenericFuncDesc(TypeInfoFactory.stringTypeInfo,new GenericUDFOPGreaterThan(),children2);
  assertNotNull(node2);
  List<ExprNodeDesc> bothFilters=Lists.newArrayList();
  bothFilters.add(node);
  bothFilters.add(node2);
  ExprNodeGenericFuncDesc both=new ExprNodeGenericFuncDesc(TypeInfoFactory.stringTypeInfo,new GenericUDFOPAnd(),bothFilters);
  String filterExpr=Utilities.serializeExpression(both);
  conf.set(TableScanDesc.FILTER_EXPR_CONF_STR,filterExpr);
  conf.setBoolean(AccumuloSerDeParameters.ITERATOR_PUSHDOWN_KEY,false);
  try {
    List<IteratorSetting> iterators=handler.getIterators(conf,columnMapper);
    assertEquals(iterators.size(),0);
  }
 catch (  Exception e) {
    fail(StringUtils.stringifyException(e));
  }
}
