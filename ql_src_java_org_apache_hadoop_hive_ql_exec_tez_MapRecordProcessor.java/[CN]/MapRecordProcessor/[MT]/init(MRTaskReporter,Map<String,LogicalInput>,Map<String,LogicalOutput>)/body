{
  perfLogger.PerfLogBegin(CLASS_NAME,PerfLogger.TEZ_INIT_OPERATORS);
  super.init(mrReporter,inputs,outputs);
  String key=processorContext.getTaskVertexName() + MAP_PLAN_KEY;
  cacheKeys.add(key);
  mapWork=(MapWork)cache.retrieve(key,new Callable<Object>(){
    @Override public Object call(){
      return Utilities.getMapWork(jconf);
    }
  }
);
  Utilities.setMapWork(jconf,mapWork);
  String prefixes=jconf.get(DagUtils.TEZ_MERGE_WORK_FILE_PREFIXES);
  if (prefixes != null) {
    mergeWorkList=new ArrayList<MapWork>();
    for (    final String prefix : prefixes.split(",")) {
      if (prefix == null || prefix.isEmpty()) {
        continue;
      }
      key=processorContext.getTaskVertexName() + prefix;
      cacheKeys.add(key);
      mergeWorkList.add((MapWork)cache.retrieve(key,new Callable<Object>(){
        @Override public Object call(){
          return Utilities.getMergeWork(jconf,prefix);
        }
      }
));
    }
  }
  MapredContext.init(true,new JobConf(jconf));
  ((TezContext)MapredContext.get()).setInputs(inputs);
  ((TezContext)MapredContext.get()).setTezProcessorContext(processorContext);
  legacyMRInput=getMRInput(inputs);
  if (legacyMRInput != null) {
    Configuration updatedConf=legacyMRInput.getConfigUpdates();
    if (updatedConf != null) {
      for (      Entry<String,String> entry : updatedConf) {
        jconf.set(entry.getKey(),entry.getValue());
      }
    }
  }
  createOutputMap();
  for (  Entry<String,LogicalOutput> outputEntry : outputs.entrySet()) {
    l4j.debug("Starting Output: " + outputEntry.getKey());
    outputEntry.getValue().start();
    ((TezKVOutputCollector)outMap.get(outputEntry.getKey())).initialize();
  }
  try {
    CompilationOpContext runtimeCtx=new CompilationOpContext();
    if (mapWork.getVectorMode()) {
      mapOp=new VectorMapOperator(runtimeCtx);
    }
 else {
      mapOp=new MapOperator(runtimeCtx);
    }
    mapOp.clearConnectedOperators();
    mapOp.setExecContext(execContext);
    boolean fromCache=false;
    if (mergeWorkList != null) {
      AbstractMapOperator mergeMapOp=null;
      for (      BaseWork mergeWork : mergeWorkList) {
        MapWork mergeMapWork=(MapWork)mergeWork;
        if (mergeMapWork.getVectorMode()) {
          mergeMapOp=new VectorMapOperator(runtimeCtx);
        }
 else {
          mergeMapOp=new MapOperator(runtimeCtx);
        }
        mergeMapOpList.add(mergeMapOp);
        if (mergeMapOp != null) {
          mergeMapOp.setConf(mergeMapWork);
          l4j.info("Input name is " + mergeMapWork.getName());
          jconf.set(Utilities.INPUT_NAME,mergeMapWork.getName());
          mergeMapOp.initialize(jconf,null);
          MultiMRInput multiMRInput=multiMRInputMap.get(mergeMapWork.getName());
          boolean skipRead=false;
          if (multiMRInput == null) {
            l4j.info("Multi MR Input for work " + mergeMapWork.getName() + " is null. Skipping read.");
            skipRead=true;
          }
 else {
            Collection<KeyValueReader> keyValueReaders=multiMRInput.getKeyValueReaders();
            if ((keyValueReaders == null) || (keyValueReaders.isEmpty())) {
              l4j.info("Key value readers are null or empty and hence skipping read. " + "KeyValueReaders = " + keyValueReaders);
              skipRead=true;
            }
          }
          if (skipRead) {
            List<Operator<?>> children=new ArrayList<Operator<?>>();
            children.addAll(mergeMapOp.getConf().getAliasToWork().values());
            mergeMapOp.initEmptyInputChildren(children,jconf);
          }
 else {
            mergeMapOp.setChildren(jconf);
          }
          Operator<? extends OperatorDesc> finalOp=getFinalOp(mergeMapOp);
          if (finalOp instanceof TezDummyStoreOperator) {
            ((TezDummyStoreOperator)finalOp).setFetchDone(skipRead);
            mapOp.setConnectedOperators(mergeMapWork.getTag(),(DummyStoreOperator)finalOp);
          }
 else {
            fromCache=true;
          }
          mergeMapOp.passExecContext(new ExecMapperContext(jconf));
          mergeMapOp.initializeLocalWork(jconf);
        }
      }
    }
    if (!fromCache) {
      ((TezContext)(MapredContext.get())).setDummyOpsMap(mapOp.getConnectedOperators());
    }
    mapOp.setConf(mapWork);
    l4j.info("Main input name is " + mapWork.getName());
    jconf.set(Utilities.INPUT_NAME,mapWork.getName());
    mapOp.initialize(jconf,null);
    mapOp.setChildren(jconf);
    mapOp.passExecContext(execContext);
    l4j.info(mapOp.dump(0));
    mapOp.initializeLocalWork(jconf);
    initializeMapRecordSources();
    mapOp.initializeMapOperator(jconf);
    if ((mergeMapOpList != null) && mergeMapOpList.isEmpty() == false) {
      for (      AbstractMapOperator mergeMapOp : mergeMapOpList) {
        jconf.set(Utilities.INPUT_NAME,mergeMapOp.getConf().getName());
        mergeMapOp.initializeMapOperator(jconf);
      }
    }
    List<HashTableDummyOperator> dummyOps=mapWork.getDummyOps();
    jconf.set(Utilities.INPUT_NAME,mapWork.getName());
    if (dummyOps != null) {
      for (      Operator<? extends OperatorDesc> dummyOp : dummyOps) {
        dummyOp.setExecContext(execContext);
        dummyOp.initialize(jconf,null);
      }
    }
    OperatorUtils.setChildrenCollector(mapOp.getChildOperators(),outMap);
    mapOp.setReporter(reporter);
    MapredContext.get().setReporter(reporter);
  }
 catch (  Throwable e) {
    abort=true;
    if (e instanceof OutOfMemoryError) {
      throw (OutOfMemoryError)e;
    }
 else {
      throw new RuntimeException("Map operator initialization failed",e);
    }
  }
  perfLogger.PerfLogEnd(CLASS_NAME,PerfLogger.TEZ_INIT_OPERATORS);
}
