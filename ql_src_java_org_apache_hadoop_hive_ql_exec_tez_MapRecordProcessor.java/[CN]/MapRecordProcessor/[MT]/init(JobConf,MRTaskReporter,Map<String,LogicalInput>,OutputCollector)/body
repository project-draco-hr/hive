{
  super.init(jconf,mrReporter,inputs,out);
  MRInput mrInput=getMRInput(inputs);
  Configuration updatedConf=mrInput.getConfigUpdates();
  if (updatedConf != null) {
    for (    Entry<String,String> entry : updatedConf) {
      jconf.set(entry.getKey(),entry.getValue());
    }
  }
  ObjectCache cache=ObjectCacheFactory.getCache(jconf);
  try {
    execContext.setJc(jconf);
    MapWork mrwork=(MapWork)cache.retrieve(MAP_PLAN_KEY);
    if (mrwork == null) {
      mrwork=Utilities.getMapWork(jconf);
      cache.cache(MAP_PLAN_KEY,mrwork);
    }
    mapOp=new MapOperator();
    mapOp.setConf(mrwork);
    mapOp.setChildren(jconf);
    l4j.info(mapOp.dump(0));
    MapredContext.init(true,new JobConf(jconf));
    mapOp.setExecContext(execContext);
    mapOp.initializeLocalWork(jconf);
    mapOp.initialize(jconf,null);
    mapOp.setOutputCollector(out);
    mapOp.setReporter(reporter);
    MapredContext.get().setReporter(reporter);
  }
 catch (  Throwable e) {
    abort=true;
    if (e instanceof OutOfMemoryError) {
      throw (OutOfMemoryError)e;
    }
 else {
      throw new RuntimeException("Map operator initialization failed",e);
    }
  }
}
