{
  try {
    Connection dbConn=null;
    Statement stmt=null;
    ResultSet rs=null;
    try {
      dbConn=getDbConn(Connection.TRANSACTION_READ_COMMITTED);
      stmt=dbConn.createStatement();
      String s="select txn_id from TXNS where " + "txn_id not in (select tc_txnid from TXN_COMPONENTS) and " + "txn_state = '" + TXN_ABORTED + "'";
      LOG.debug("Going to execute query <" + s + ">");
      rs=stmt.executeQuery(s);
      List<Long> txnids=new ArrayList<>();
      while (rs.next())       txnids.add(rs.getLong(1));
      close(rs);
      if (txnids.size() <= 0) {
        return;
      }
      List<String> queries=new ArrayList<String>();
      StringBuilder prefix=new StringBuilder();
      StringBuilder suffix=new StringBuilder();
      prefix.append("delete from TXNS where ");
      suffix.append("");
      TxnUtils.buildQueryWithINClause(conf,queries,prefix,suffix,txnids,"txn_id",false,false);
      for (      String query : queries) {
        LOG.debug("Going to execute update <" + query + ">");
        int rc=stmt.executeUpdate(query);
        LOG.info("Removed " + rc + "  empty Aborted transactions from TXNS");
      }
      LOG.info("Aborted transactions removed from TXNS: " + txnids);
      LOG.debug("Going to commit");
      dbConn.commit();
    }
 catch (    SQLException e) {
      LOG.error("Unable to delete from txns table " + e.getMessage());
      LOG.debug("Going to rollback");
      rollbackDBConn(dbConn);
      checkRetryable(dbConn,e,"cleanEmptyAbortedTxns");
      throw new MetaException("Unable to connect to transaction database " + StringUtils.stringifyException(e));
    }
 finally {
      close(rs,stmt,dbConn);
    }
  }
 catch (  RetryException e) {
    cleanEmptyAbortedTxns();
  }
}
