{
  try {
    Connection dbConn=null;
    Statement stmt=null;
    ResultSet rs=null;
    try {
      dbConn=getDbConn(Connection.TRANSACTION_READ_COMMITTED);
      stmt=dbConn.createStatement();
      String s="select txn_id from TXNS where " + "txn_id not in (select tc_txnid from TXN_COMPONENTS) and " + "txn_state = '" + TXN_ABORTED + "'";
      LOG.debug("Going to execute query <" + s + ">");
      rs=stmt.executeQuery(s);
      List<Long> txnids=new ArrayList<>();
      while (rs.next())       txnids.add(rs.getLong(1));
      close(rs);
      if (txnids.size() <= 0) {
        return;
      }
      for (int i=0; i < txnids.size() / TIMED_OUT_TXN_ABORT_BATCH_SIZE; i++) {
        List<Long> txnIdBatch=txnids.subList(i * TIMED_OUT_TXN_ABORT_BATCH_SIZE,(i + 1) * TIMED_OUT_TXN_ABORT_BATCH_SIZE);
        deleteTxns(dbConn,stmt,txnIdBatch);
      }
      int partialBatchSize=txnids.size() % TIMED_OUT_TXN_ABORT_BATCH_SIZE;
      if (partialBatchSize > 0) {
        List<Long> txnIdBatch=txnids.subList(txnids.size() - partialBatchSize,txnids.size());
        deleteTxns(dbConn,stmt,txnIdBatch);
      }
    }
 catch (    SQLException e) {
      LOG.error("Unable to delete from txns table " + e.getMessage());
      LOG.debug("Going to rollback");
      rollbackDBConn(dbConn);
      checkRetryable(dbConn,e,"cleanEmptyAbortedTxns");
      throw new MetaException("Unable to connect to transaction database " + StringUtils.stringifyException(e));
    }
 finally {
      close(rs,stmt,dbConn);
    }
  }
 catch (  RetryException e) {
    cleanEmptyAbortedTxns();
  }
}
