{
  try {
    Connection dbConn=null;
    Statement stmt=null;
    try {
      dbConn=getDbConn(Connection.TRANSACTION_SERIALIZABLE);
      stmt=dbConn.createStatement();
      String s="select txn_id from TXNS where " + "txn_id not in (select tc_txnid from TXN_COMPONENTS) and " + "txn_state = '" + TXN_ABORTED + "'";
      LOG.debug("Going to execute query <" + s + ">");
      ResultSet rs=stmt.executeQuery(s);
      Set<Long> txnids=new HashSet<Long>();
      while (rs.next())       txnids.add(rs.getLong(1));
      if (txnids.size() > 0) {
        StringBuilder buf=new StringBuilder("delete from TXNS where txn_id in (");
        boolean first=true;
        for (        long tid : txnids) {
          if (first)           first=false;
 else           buf.append(", ");
          buf.append(tid);
        }
        buf.append(")");
        String bufStr=buf.toString();
        LOG.debug("Going to execute update <" + bufStr + ">");
        int rc=stmt.executeUpdate(bufStr);
        LOG.debug("Removed " + rc + " records from txns");
        LOG.debug("Going to commit");
        dbConn.commit();
      }
    }
 catch (    SQLException e) {
      LOG.error("Unable to delete from txns table " + e.getMessage());
      LOG.debug("Going to rollback");
      rollbackDBConn(dbConn);
      checkRetryable(dbConn,e,"cleanEmptyAbortedTxns");
      throw new MetaException("Unable to connect to transaction database " + StringUtils.stringifyException(e));
    }
 finally {
      closeDbConn(dbConn);
      closeStmt(stmt);
    }
  }
 catch (  RetryException e) {
    cleanEmptyAbortedTxns();
  }
}
