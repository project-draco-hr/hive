{
  try {
    Connection dbConn=getDbConn(Connection.TRANSACTION_SERIALIZABLE);
    CompactionInfo info=new CompactionInfo();
    Statement stmt=null;
    try {
      stmt=dbConn.createStatement();
      String s="select cq_id, cq_database, cq_table, cq_partition, " + "cq_type from COMPACTION_QUEUE where cq_state = '" + INITIATED_STATE + "'";
      LOG.debug("Going to execute query <" + s + ">");
      ResultSet rs=stmt.executeQuery(s);
      if (!rs.next()) {
        LOG.debug("No compactions found ready to compact");
        dbConn.rollback();
        return null;
      }
      info.id=rs.getLong(1);
      info.dbname=rs.getString(2);
      info.tableName=rs.getString(3);
      info.partName=rs.getString(4);
switch (rs.getString(5).charAt(0)) {
case MAJOR_TYPE:
        info.type=CompactionType.MAJOR;
      break;
case MINOR_TYPE:
    info.type=CompactionType.MINOR;
  break;
default :
throw new MetaException("Unexpected compaction type " + rs.getString(5));
}
long now=getDbTime(dbConn);
s="update COMPACTION_QUEUE set cq_worker_id = '" + workerId + "', "+ "cq_start = "+ now+ ", cq_state = '"+ WORKING_STATE+ "' where cq_id = "+ info.id;
LOG.debug("Going to execute update <" + s + ">");
if (stmt.executeUpdate(s) != 1) {
LOG.error("Unable to update compaction record");
LOG.debug("Going to rollback");
dbConn.rollback();
}
LOG.debug("Going to commit");
dbConn.commit();
return info;
}
 catch (SQLException e) {
LOG.error("Unable to select next element for compaction, " + e.getMessage());
try {
LOG.debug("Going to rollback");
dbConn.rollback();
}
 catch (SQLException e1) {
}
detectDeadlock(e,"findNextToCompact");
throw new MetaException("Unable to connect to transaction database " + StringUtils.stringifyException(e));
}
 finally {
closeDbConn(dbConn);
closeStmt(stmt);
}
}
 catch (DeadlockException e) {
return findNextToCompact(workerId);
}
 finally {
deadlockCnt=0;
}
}
