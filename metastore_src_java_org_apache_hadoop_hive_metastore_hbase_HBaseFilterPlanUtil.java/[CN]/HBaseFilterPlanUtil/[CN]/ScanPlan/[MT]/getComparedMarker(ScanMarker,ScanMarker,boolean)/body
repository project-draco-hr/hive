{
  if (lStartMarker == null) {
    return rStartMarker;
  }
 else   if (rStartMarker == null) {
    return lStartMarker;
  }
  TypeInfo expectedType=TypeInfoUtils.getTypeInfoFromTypeString(lStartMarker.type);
  ObjectInspector outputOI=TypeInfoUtils.getStandardWritableObjectInspectorFromTypeInfo(expectedType);
  Converter lConverter=ObjectInspectorConverters.getConverter(PrimitiveObjectInspectorFactory.javaStringObjectInspector,outputOI);
  Converter rConverter=ObjectInspectorConverters.getConverter(PrimitiveObjectInspectorFactory.javaStringObjectInspector,outputOI);
  Comparable lValue=(Comparable)lConverter.convert(lStartMarker.value);
  Comparable rValue=(Comparable)rConverter.convert(rStartMarker.value);
  int compareRes=lValue.compareTo(rValue);
  if (compareRes == 0) {
    if (lStartMarker.isInclusive == rStartMarker.isInclusive) {
      return lStartMarker;
    }
    boolean isInclusive=true;
    if (getGreater) {
      isInclusive=false;
    }
    return new ScanMarker(lStartMarker.value,isInclusive,lStartMarker.type);
  }
  if (getGreater) {
    return compareRes == 1 ? lStartMarker : rStartMarker;
  }
  return compareRes == -1 ? lStartMarker : rStartMarker;
}
