{
  ScanPlan leafPlan=new ScanPlan();
  curPlan=leafPlan;
  final boolean INCLUSIVE=true;
switch (node.operator) {
case EQUALS:
    leafPlan.setStartMarker(node.keyName,nameToType.get(node.keyName),node.value.toString(),INCLUSIVE);
  leafPlan.setEndMarker(node.keyName,nameToType.get(node.keyName),node.value.toString(),INCLUSIVE);
break;
case GREATERTHAN:
leafPlan.setStartMarker(node.keyName,nameToType.get(node.keyName),node.value.toString(),!INCLUSIVE);
break;
case GREATERTHANOREQUALTO:
leafPlan.setStartMarker(node.keyName,nameToType.get(node.keyName),node.value.toString(),INCLUSIVE);
break;
case LESSTHAN:
leafPlan.setEndMarker(node.keyName,nameToType.get(node.keyName),node.value.toString(),!INCLUSIVE);
break;
case LESSTHANOREQUALTO:
leafPlan.setEndMarker(node.keyName,nameToType.get(node.keyName),node.value.toString(),INCLUSIVE);
break;
case LIKE:
leafPlan.ops.add(new Operator(Operator.Type.LIKE,node.keyName,node.value.toString()));
break;
case NOTEQUALS:
case NOTEQUALS2:
leafPlan.ops.add(new Operator(Operator.Type.NOTEQUALS,node.keyName,node.value.toString()));
break;
}
}
