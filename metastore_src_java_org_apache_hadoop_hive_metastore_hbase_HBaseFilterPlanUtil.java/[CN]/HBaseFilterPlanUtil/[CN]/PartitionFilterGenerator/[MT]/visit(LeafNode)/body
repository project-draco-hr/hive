{
  ScanPlan leafPlan=new ScanPlan();
  curPlan=leafPlan;
  if (!isFirstParitionColumn(node.keyName)) {
    leafPlan.setFilter(generateScanFilter(node));
    return;
  }
  if (!(node.value instanceof String)) {
    return;
  }
  final boolean INCLUSIVE=true;
switch (node.operator) {
case EQUALS:
    leafPlan.setStartMarker(toBytes(node.value),INCLUSIVE);
  leafPlan.setEndMarker(toBytes(node.value),INCLUSIVE);
break;
case GREATERTHAN:
leafPlan.setStartMarker(toBytes(node.value),!INCLUSIVE);
break;
case GREATERTHANOREQUALTO:
leafPlan.setStartMarker(toBytes(node.value),INCLUSIVE);
break;
case LESSTHAN:
leafPlan.setEndMarker(toBytes(node.value),!INCLUSIVE);
break;
case LESSTHANOREQUALTO:
leafPlan.setEndMarker(toBytes(node.value),INCLUSIVE);
break;
case LIKE:
case NOTEQUALS:
case NOTEQUALS2:
hasUnsupportedCondition=true;
break;
}
}
