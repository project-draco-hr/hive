{
  if (arguments[0] == null || arguments[1] == null) {
    return null;
  }
  Object left=arguments[0].get();
  Object right=arguments[1].get();
  if (left == null && right == null) {
    return null;
  }
  if (resultOI.getPrimitiveCategory() == PrimitiveCategory.DECIMAL) {
    HiveDecimal hdLeft=PrimitiveObjectInspectorUtils.getHiveDecimal(left,leftOI);
    HiveDecimal hdRight=PrimitiveObjectInspectorUtils.getHiveDecimal(right,rightOI);
    if (hdLeft == null || hdRight == null) {
      return null;
    }
    HiveDecimalWritable result=evaluate(hdLeft,hdRight);
    return resultOI.getPrimitiveWritableObject(result);
  }
  left=converterLeft.convert(left);
  if (left == null) {
    return null;
  }
  right=converterRight.convert(right);
  if (right == null) {
    return null;
  }
switch (resultOI.getPrimitiveCategory()) {
case BYTE:
    return evaluate((ByteWritable)left,(ByteWritable)right);
case SHORT:
  return evaluate((ShortWritable)left,(ShortWritable)right);
case INT:
return evaluate((IntWritable)left,(IntWritable)right);
case LONG:
return evaluate((LongWritable)left,(LongWritable)right);
case FLOAT:
return evaluate((FloatWritable)left,(FloatWritable)right);
case DOUBLE:
return evaluate((DoubleWritable)left,(DoubleWritable)right);
default :
throw new RuntimeException("Unexpected type in evaluating " + opName + ": "+ resultOI.getPrimitiveCategory());
}
}
