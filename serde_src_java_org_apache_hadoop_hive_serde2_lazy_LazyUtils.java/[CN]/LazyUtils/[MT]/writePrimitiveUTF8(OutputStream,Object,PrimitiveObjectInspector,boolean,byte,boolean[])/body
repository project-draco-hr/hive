{
switch (oi.getPrimitiveCategory()) {
case BOOLEAN:
{
      boolean b=((BooleanObjectInspector)oi).get(o);
      if (b) {
        out.write(trueBytes,0,trueBytes.length);
      }
 else {
        out.write(falseBytes,0,falseBytes.length);
      }
      break;
    }
case BYTE:
{
    LazyInteger.writeUTF8(out,((ByteObjectInspector)oi).get(o));
    break;
  }
case SHORT:
{
  LazyInteger.writeUTF8(out,((ShortObjectInspector)oi).get(o));
  break;
}
case INT:
{
LazyInteger.writeUTF8(out,((IntObjectInspector)oi).get(o));
break;
}
case LONG:
{
LazyLong.writeUTF8(out,((LongObjectInspector)oi).get(o));
break;
}
case FLOAT:
{
float f=((FloatObjectInspector)oi).get(o);
ByteBuffer b=Text.encode(String.valueOf(f));
out.write(b.array(),0,b.limit());
break;
}
case DOUBLE:
{
double d=((DoubleObjectInspector)oi).get(o);
ByteBuffer b=Text.encode(String.valueOf(d));
out.write(b.array(),0,b.limit());
break;
}
case STRING:
{
Text t=((StringObjectInspector)oi).getPrimitiveWritableObject(o);
writeEscaped(out,t.getBytes(),0,t.getLength(),escaped,escapeChar,needsEscape);
break;
}
case CHAR:
{
HiveCharWritable hc=((HiveCharObjectInspector)oi).getPrimitiveWritableObject(o);
Text t=hc.getPaddedValue();
writeEscaped(out,t.getBytes(),0,t.getLength(),escaped,escapeChar,needsEscape);
break;
}
case VARCHAR:
{
HiveVarcharWritable hc=((HiveVarcharObjectInspector)oi).getPrimitiveWritableObject(o);
Text t=hc.getTextValue();
writeEscaped(out,t.getBytes(),0,t.getLength(),escaped,escapeChar,needsEscape);
break;
}
case BINARY:
{
BytesWritable bw=((BinaryObjectInspector)oi).getPrimitiveWritableObject(o);
byte[] toEncode=new byte[bw.getLength()];
System.arraycopy(bw.getBytes(),0,toEncode,0,bw.getLength());
byte[] toWrite=Base64.encodeBase64(toEncode);
out.write(toWrite,0,toWrite.length);
break;
}
case DATE:
{
LazyDate.writeUTF8(out,((DateObjectInspector)oi).getPrimitiveWritableObject(o));
break;
}
case TIMESTAMP:
{
LazyTimestamp.writeUTF8(out,((TimestampObjectInspector)oi).getPrimitiveWritableObject(o));
break;
}
case DECIMAL:
{
LazyHiveDecimal.writeUTF8(out,((HiveDecimalObjectInspector)oi).getPrimitiveJavaObject(o));
break;
}
default :
{
throw new RuntimeException("Hive internal error.");
}
}
}
