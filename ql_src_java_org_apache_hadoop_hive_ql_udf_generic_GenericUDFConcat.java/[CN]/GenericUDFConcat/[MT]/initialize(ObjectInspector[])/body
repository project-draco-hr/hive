{
  argumentOIs=arguments;
  PrimitiveCategory currentCategory;
  PrimitiveObjectInspector poi;
  boolean fixedLengthReturnValue=true;
  int returnLength=0;
  for (int idx=0; idx < arguments.length; ++idx) {
    if (arguments[idx].getCategory() != Category.PRIMITIVE) {
      throw new UDFArgumentException("CONCAT only takes primitive arguments");
    }
    poi=(PrimitiveObjectInspector)arguments[idx];
    currentCategory=poi.getPrimitiveCategory();
    if (idx == 0) {
      returnType=currentCategory;
    }
switch (currentCategory) {
case BINARY:
      fixedLengthReturnValue=false;
    if (returnType != currentCategory) {
      returnType=PrimitiveCategory.STRING;
    }
  break;
case VARCHAR:
if (!fixedLengthReturnValue) {
  returnType=PrimitiveCategory.STRING;
}
break;
default :
returnType=PrimitiveCategory.STRING;
fixedLengthReturnValue=false;
break;
}
if (fixedLengthReturnValue) {
returnLength+=GenericUDFUtils.StringHelper.getFixedStringSizeForType(poi);
if (returnType == PrimitiveCategory.VARCHAR && returnLength > HiveVarchar.MAX_VARCHAR_LENGTH) {
returnType=PrimitiveCategory.STRING;
fixedLengthReturnValue=false;
}
}
}
if (returnType == PrimitiveCategory.BINARY) {
bw=new BytesWritable[arguments.length];
return PrimitiveObjectInspectorFactory.writableBinaryObjectInspector;
}
 else {
createStringConverters();
returnHelper=new GenericUDFUtils.StringHelper(returnType);
switch (returnType) {
case STRING:
return PrimitiveObjectInspectorFactory.writableStringObjectInspector;
case VARCHAR:
VarcharTypeInfo typeInfo=TypeInfoFactory.getVarcharTypeInfo(returnLength);
return PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(typeInfo);
default :
throw new UDFArgumentException("Unexpected CONCAT return type of " + returnType);
}
}
}
