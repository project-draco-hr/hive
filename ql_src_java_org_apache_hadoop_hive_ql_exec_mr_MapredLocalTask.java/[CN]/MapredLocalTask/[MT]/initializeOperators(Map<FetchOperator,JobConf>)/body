{
  for (  Map.Entry<String,Operator<? extends OperatorDesc>> entry : work.getAliasToWork().entrySet()) {
    LOG.debug("initializeOperators: " + entry.getKey() + ", children = "+ entry.getValue().getChildOperators());
  }
  for (  Map.Entry<String,FetchWork> entry : work.getAliasToFetchWork().entrySet()) {
    if (entry.getValue() == null) {
      continue;
    }
    JobConf jobClone=new JobConf(job);
    TableScanOperator ts=(TableScanOperator)work.getAliasToWork().get(entry.getKey());
    ColumnProjectionUtils.appendReadColumns(jobClone,ts.getNeededColumnIDs(),ts.getNeededColumns());
    HiveInputFormat.pushFilters(jobClone,ts);
    FetchOperator fetchOp=new FetchOperator(entry.getValue(),jobClone);
    fetchOpJobConfMap.put(fetchOp,jobClone);
    fetchOperators.put(entry.getKey(),fetchOp);
    l4j.info("fetchoperator for " + entry.getKey() + " created");
  }
  for (  Map.Entry<String,FetchOperator> entry : fetchOperators.entrySet()) {
    String alias=entry.getKey();
    Operator<? extends OperatorDesc> forwardOp=work.getAliasToWork().get(alias);
    forwardOp.passExecContext(execContext);
    FetchOperator fetchOp=entry.getValue();
    JobConf jobConf=fetchOpJobConfMap.get(fetchOp);
    if (jobConf == null) {
      jobConf=job;
    }
    ObjectInspector objectInspector=fetchOp.getOutputObjectInspector();
    forwardOp.initialize(jobConf,new ObjectInspector[]{objectInspector});
    l4j.info("fetchoperator for " + entry.getKey() + " initialized");
  }
}
