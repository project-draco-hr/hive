{
  Configuration conf=getConf();
  args=new GenericOptionsParser(conf,args).getRemainingArgs();
  String serverUri=args[0];
  String inputTableName=args[1];
  String outputTableName=args[2];
  if (args.length > 3)   filter=args[3];
  String dbName=null;
  String principalID=System.getProperty(HCatConstants.HCAT_METASTORE_PRINCIPAL);
  if (principalID != null)   conf.set(HCatConstants.HCAT_METASTORE_PRINCIPAL,principalID);
  Job job=new Job(conf,"WriteTextPartitioned");
  HCatInputFormat.setInput(job,InputJobInfo.create(dbName,inputTableName,filter));
  job.setInputFormatClass(HCatInputFormat.class);
  job.setJarByClass(WriteTextPartitioned.class);
  job.setMapperClass(Map.class);
  job.setOutputKeyClass(WritableComparable.class);
  job.setOutputValueClass(DefaultHCatRecord.class);
  job.setNumReduceTasks(0);
  java.util.Map<String,String> partitionVals=null;
  if (filter != null) {
    String[] s=filter.split("=");
    String val=s[1].replace('"',' ').trim();
    partitionVals=new HashMap<String,String>(1);
    partitionVals.put(s[0],val);
  }
  HCatOutputFormat.setOutput(job,OutputJobInfo.create(dbName,outputTableName,partitionVals));
  HCatSchema s=HCatInputFormat.getTableSchema(job);
  List<HCatFieldSchema> fss=new ArrayList<HCatFieldSchema>(3);
  fss.add(s.get(0));
  fss.add(s.get(1));
  fss.add(s.get(3));
  HCatOutputFormat.setSchema(job,new HCatSchema(fss));
  job.setOutputFormatClass(HCatOutputFormat.class);
  return (job.waitForCompletion(true) ? 0 : 1);
}
