{
  conf.setVar(HiveConf.ConfVars.HIVE_ZOOKEEPER_QUORUM,"localhost");
  conf.setVar(HiveConf.ConfVars.HIVE_ZOOKEEPER_CLIENT_PORT,String.valueOf(server.getPort()));
  File workDir=new File(System.getProperty("test.tmp.dir"));
  File jsonReportFile=new File(workDir,"json_reportingzk1");
  jsonReportFile.delete();
  conf.setBoolVar(HiveConf.ConfVars.HIVE_SERVER2_METRICS_ENABLED,true);
  conf.setBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY,false);
  conf.setVar(HiveConf.ConfVars.HIVE_METRICS_REPORTER,MetricsReporting.JSON_FILE.name() + "," + MetricsReporting.JMX.name());
  conf.setVar(HiveConf.ConfVars.HIVE_METRICS_JSON_FILE_LOCATION,jsonReportFile.toString());
  conf.setVar(HiveConf.ConfVars.HIVE_METRICS_JSON_FILE_INTERVAL,"100ms");
  MetricsFactory.init(conf);
  HiveLockManagerCtx ctx=new HiveLockManagerCtx(conf);
  ZooKeeperHiveLockManager zMgr=new ZooKeeperHiveLockManager();
  zMgr.setContext(ctx);
  ZooKeeperHiveLock curLock=zMgr.lock(hiveLock,HiveLockMode.SHARED,false);
  Thread.sleep(2000);
  byte[] jsonData=Files.readAllBytes(Paths.get(jsonReportFile.getAbsolutePath()));
  ObjectMapper objectMapper=new ObjectMapper();
  JsonNode rootNode=objectMapper.readTree(jsonData);
  JsonNode countersNode=rootNode.path("counters");
  JsonNode zkLockNode=countersNode.path("zookeeper_hive_sharedlocks");
  JsonNode zkLockCountNode=zkLockNode.path("count");
  Assert.assertTrue(zkLockCountNode.asInt() == 1);
  zMgr.unlock(curLock);
  Thread.sleep(2000);
  jsonData=Files.readAllBytes(Paths.get(jsonReportFile.getAbsolutePath()));
  objectMapper=new ObjectMapper();
  rootNode=objectMapper.readTree(jsonData);
  countersNode=rootNode.path("counters");
  zkLockNode=countersNode.path("zookeeper_hive_sharedlocks");
  zkLockCountNode=zkLockNode.path("count");
  Assert.assertTrue(zkLockCountNode.asInt() == 0);
  zMgr.close();
}
