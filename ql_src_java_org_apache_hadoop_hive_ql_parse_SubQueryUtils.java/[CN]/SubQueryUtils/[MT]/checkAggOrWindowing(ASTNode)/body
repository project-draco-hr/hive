{
  int exprTokenType=expressionTree.getToken().getType();
  if (exprTokenType == HiveParser.TOK_FUNCTION || exprTokenType == HiveParser.TOK_FUNCTIONDI || exprTokenType == HiveParser.TOK_FUNCTIONSTAR) {
    assert(expressionTree.getChildCount() != 0);
    if (expressionTree.getChild(expressionTree.getChildCount() - 1).getType() == HiveParser.TOK_WINDOWSPEC) {
      return 2;
    }
    if (expressionTree.getChild(0).getType() == HiveParser.Identifier) {
      String functionName=SemanticAnalyzer.unescapeIdentifier(expressionTree.getChild(0).getText());
      if (FunctionRegistry.getGenericUDAFResolver(functionName) != null) {
        return 1;
      }
    }
  }
  int r=0;
  for (int i=0; i < expressionTree.getChildCount(); i++) {
    int c=checkAggOrWindowing((ASTNode)expressionTree.getChild(i));
    r=Math.max(r,c);
  }
  return r;
}
