{
  if (parser.printSet.contains(this) && !hasMultiReduceOp) {
    if (type != null) {
      printer.println(TezJsonParser.prefixString(indentFlag,"|<-") + " Please refer to the previous " + this.name+ " ["+ type+ "]");
    }
 else {
      printer.println(TezJsonParser.prefixString(indentFlag,"|<-") + " Please refer to the previous " + this.name);
    }
    return;
  }
  parser.printSet.add(this);
  if (type != null) {
    printer.println(TezJsonParser.prefixString(indentFlag,"|<-") + this.name + " ["+ type+ "]"+ this.executionMode);
  }
 else   if (this.name != null) {
    printer.println(TezJsonParser.prefixString(indentFlag) + this.name + this.executionMode);
  }
  if (hasMultiReduceOp && !callingVertex.union) {
    Op choose=null;
    for (    Op op : this.rootOps) {
      if (op.outputVertexName.equals(callingVertex.name)) {
        choose=op;
      }
    }
    if (choose != null) {
      choose.print(printer,indentFlag,false);
    }
 else {
      throw new Exception("Can not find the right reduce output operator for vertex " + this.name);
    }
  }
 else {
    for (    Op op : this.rootOps) {
      if (this.dummy) {
        op.print(printer,indentFlag,true);
      }
 else {
        op.print(printer,indentFlag,false);
      }
    }
  }
  if (this.union) {
    for (int index=0; index < this.parentConnections.size(); index++) {
      Connection connection=this.parentConnections.get(index);
      List<Boolean> unionFlag=new ArrayList<>();
      unionFlag.addAll(indentFlag);
      if (index != this.parentConnections.size() - 1) {
        unionFlag.add(true);
      }
 else {
        unionFlag.add(false);
      }
      connection.from.print(printer,unionFlag,connection.type,this);
    }
  }
}
