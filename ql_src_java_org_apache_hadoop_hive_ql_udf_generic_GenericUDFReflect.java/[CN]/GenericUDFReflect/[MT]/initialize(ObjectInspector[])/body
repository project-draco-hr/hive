{
  if (arguments.length < 2) {
    throw new UDFArgumentLengthException("The function GenericUDFReflect(class,method[,arg1[,arg2]...])" + " accepts 2 or more arguments.");
  }
  for (int i=0; i < 2; i++) {
    if (!(arguments[i] instanceof StringObjectInspector)) {
      throw new UDFArgumentTypeException(i,"The first 2 parameters of GenericUDFReflect(class,method[,arg1[,arg2]...])" + " should be string.");
    }
  }
  classNameOI=(StringObjectInspector)ObjectInspectorUtils.getStandardObjectInspector(arguments[0]);
  methodNameOI=(StringObjectInspector)ObjectInspectorUtils.getStandardObjectInspector(arguments[1]);
  parameterTypes=new PrimitiveTypeEntry[arguments.length - 2];
  parameterClasses=new Class[arguments.length - 2];
  for (int i=2; i < arguments.length; i++) {
    if (arguments[i].getCategory() != ObjectInspector.Category.PRIMITIVE) {
      throw new UDFArgumentTypeException(i,"The parameters of GenericUDFReflect(class,method[,arg1[,arg2]...])" + " must be primitive (int, double, string, etc).");
    }
    PrimitiveCategory category=((PrimitiveObjectInspector)arguments[i]).getPrimitiveCategory();
    parameterTypes[i - 2]=PrimitiveObjectInspectorUtils.getTypeEntryFromPrimitiveCategory(category);
    parameterClasses[i - 2]=parameterTypes[i - 2].primitiveJavaType == null ? parameterTypes[i - 2].primitiveJavaClass : parameterTypes[i - 2].primitiveJavaType;
  }
  parameterJavaValues=new Object[arguments.length - 2];
  argumentOIs=new PrimitiveObjectInspector[arguments.length];
  for (int i=0; i < arguments.length; i++) {
    argumentOIs[i]=(PrimitiveObjectInspector)arguments[i];
  }
  return PrimitiveObjectInspectorFactory.getPrimitiveJavaObjectInspector(PrimitiveCategory.STRING);
}
