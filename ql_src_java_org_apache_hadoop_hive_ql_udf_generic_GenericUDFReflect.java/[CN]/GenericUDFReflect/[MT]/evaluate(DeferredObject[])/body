{
  boolean classNameChanged=false;
  ObjectInspector newClassNameOI=argumentOIs[0];
  Object newClassName=arguments[0].get();
  if (className == null || ObjectInspectorUtils.compare(className,classNameOI,newClassName,newClassNameOI) != 0) {
    className=ObjectInspectorUtils.copyToStandardObject(newClassName,newClassNameOI);
    String classNameString=classNameOI.getPrimitiveJavaObject(className);
    try {
      c=Class.forName(classNameString);
    }
 catch (    ClassNotFoundException ex) {
      throw new HiveException("UDFReflect evaluate ",ex);
    }
    try {
      o=null;
      o=ReflectionUtils.newInstance(c,null);
    }
 catch (    Exception e) {
    }
    classNameChanged=true;
  }
  ObjectInspector newMethodNameOI=argumentOIs[1];
  Object newMethodName=arguments[1].get();
  if (methodName == null || ObjectInspectorUtils.compare(methodName,methodNameOI,newMethodName,newMethodNameOI) != 0 || classNameChanged) {
    methodName=ObjectInspectorUtils.copyToStandardObject(newMethodName,newMethodNameOI);
    String methodNameString=methodNameOI.getPrimitiveJavaObject(methodName);
    try {
      m=findMethod(c,methodNameString,parameterTypes,parameterClasses);
    }
 catch (    Exception e) {
      throw new HiveException("UDFReflect getMethod ",e);
    }
  }
  for (int i=2; i < arguments.length; i++) {
    parameterJavaValues[i - 2]=argumentOIs[i].getPrimitiveJavaObject(arguments[i].get());
  }
  try {
    result=String.valueOf(m.invoke(o,parameterJavaValues));
    return result;
  }
 catch (  IllegalArgumentException e1) {
    System.err.println("UDFReflect evaluate " + e1 + " method = "+ m+ " args = "+ Arrays.asList(parameterJavaValues));
  }
catch (  IllegalAccessException e1) {
    System.err.println("UDFReflect evaluate " + e1 + " method = "+ m+ " args = "+ Arrays.asList(parameterJavaValues));
  }
catch (  InvocationTargetException e1) {
    System.err.println("UDFReflect evaluate " + e1 + " method = "+ m+ " args = "+ Arrays.asList(parameterJavaValues));
  }
  return null;
}
