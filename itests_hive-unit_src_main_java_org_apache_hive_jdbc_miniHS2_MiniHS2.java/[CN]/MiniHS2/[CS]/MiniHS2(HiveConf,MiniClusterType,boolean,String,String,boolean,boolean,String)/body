{
  super(hiveConf,"localhost",(usePortsFromConf ? hiveConf.getIntVar(HiveConf.ConfVars.HIVE_SERVER2_THRIFT_PORT) : MetaStoreUtils.findFreePort()),(usePortsFromConf ? hiveConf.getIntVar(HiveConf.ConfVars.HIVE_SERVER2_THRIFT_HTTP_PORT) : MetaStoreUtils.findFreePort()));
  this.miniClusterType=miniClusterType;
  this.useMiniKdc=useMiniKdc;
  this.serverPrincipal=serverPrincipal;
  this.isMetastoreRemote=isMetastoreRemote;
  baseDir=Files.createTempDir();
  localFS=FileSystem.getLocal(hiveConf);
  FileSystem fs;
  if (miniClusterType != MiniClusterType.DFS_ONLY) {
    dfs=ShimLoader.getHadoopShims().getMiniDfs(hiveConf,4,true,null);
    fs=dfs.getFileSystem();
    String uriString=WindowsPathUtil.getHdfsUriString(fs.getUri().toString());
switch (miniClusterType) {
case TEZ:
      mr=ShimLoader.getHadoopShims().getMiniTezCluster(hiveConf,4,uriString);
    break;
case LLAP:
  if (usePortsFromConf) {
    hiveConf.setBoolean("minillap.usePortsFromConf",true);
  }
llapCluster=LlapItUtils.startAndGetMiniLlapCluster(hiveConf,null,null);
mr=ShimLoader.getHadoopShims().getMiniTezCluster(hiveConf,4,uriString);
break;
case MR:
mr=ShimLoader.getHadoopShims().getMiniMrCluster(hiveConf,4,uriString,1);
break;
default :
throw new IllegalArgumentException("Unsupported cluster type " + mr);
}
mr.setupConfiguration(getHiveConf());
baseDfsDir=new Path(new Path(fs.getUri()),"/base");
}
 else {
fs=FileSystem.getLocal(hiveConf);
baseDfsDir=new Path("file://" + baseDir.toURI().getPath());
}
if (useMiniKdc) {
hiveConf.setVar(ConfVars.HIVE_SERVER2_KERBEROS_PRINCIPAL,serverPrincipal);
hiveConf.setVar(ConfVars.HIVE_SERVER2_KERBEROS_KEYTAB,serverKeytab);
hiveConf.setVar(ConfVars.HIVE_SERVER2_AUTHENTICATION,authType);
}
String metaStoreURL="jdbc:derby:" + baseDir.getAbsolutePath() + File.separator+ "test_metastore-"+ hs2Counter.incrementAndGet()+ ";create=true";
fs.mkdirs(baseDfsDir);
Path wareHouseDir=new Path(baseDfsDir,"warehouse");
FileSystem.mkdirs(fs,wareHouseDir,FULL_PERM);
fs.mkdirs(wareHouseDir);
setWareHouseDir(wareHouseDir.toString());
System.setProperty(HiveConf.ConfVars.METASTORECONNECTURLKEY.varname,metaStoreURL);
hiveConf.setVar(HiveConf.ConfVars.METASTORECONNECTURLKEY,metaStoreURL);
if (!usePortsFromConf) {
setBinaryPort(MetaStoreUtils.findFreePort());
}
hiveConf.setVar(ConfVars.HIVE_SERVER2_THRIFT_BIND_HOST,getHost());
hiveConf.setIntVar(ConfVars.HIVE_SERVER2_THRIFT_PORT,getBinaryPort());
hiveConf.setIntVar(ConfVars.HIVE_SERVER2_THRIFT_HTTP_PORT,getHttpPort());
Path scratchDir=new Path(baseDfsDir,"scratch");
Utilities.createDirsWithPermission(hiveConf,scratchDir,WRITE_ALL_PERM,true);
System.setProperty(HiveConf.ConfVars.SCRATCHDIR.varname,scratchDir.toString());
hiveConf.setVar(ConfVars.SCRATCHDIR,scratchDir.toString());
String localScratchDir=baseDir.getPath() + File.separator + "scratch";
System.setProperty(HiveConf.ConfVars.LOCALSCRATCHDIR.varname,localScratchDir);
hiveConf.setVar(ConfVars.LOCALSCRATCHDIR,localScratchDir);
}
