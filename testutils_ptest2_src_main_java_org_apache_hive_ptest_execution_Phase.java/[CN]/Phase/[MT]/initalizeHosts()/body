{
  List<ListenableFuture<List<RemoteCommandResult>>> futures=Lists.newArrayList();
  ListeningExecutorService executor=MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(hostExecutors.size()));
  try {
    for (    final HostExecutor hostExecutor : hostExecutors) {
      futures.add(executor.submit(new Callable<List<RemoteCommandResult>>(){
        @Override public List<RemoteCommandResult> call() throws Exception {
          return initalizeHost(hostExecutor);
        }
      }
));
    }
    List<RemoteCommandResult> results=Lists.newArrayList();
    for (    ListenableFuture<List<RemoteCommandResult>> future : futures) {
      List<RemoteCommandResult> result=future.get();
      if (result != null) {
        results.addAll(result);
      }
    }
    executor.shutdown();
    return results;
  }
  finally {
    if (executor.isShutdown()) {
      executor.shutdownNow();
    }
  }
}
