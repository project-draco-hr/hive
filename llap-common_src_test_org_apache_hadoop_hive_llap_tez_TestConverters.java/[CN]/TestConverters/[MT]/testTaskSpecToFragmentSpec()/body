{
  ByteBuffer procBb=ByteBuffer.allocate(4);
  procBb.putInt(0,200);
  UserPayload processorPayload=UserPayload.create(procBb);
  ProcessorDescriptor processorDescriptor=ProcessorDescriptor.create("fakeProcessorName").setUserPayload(processorPayload);
  ByteBuffer input1Bb=ByteBuffer.allocate(4);
  input1Bb.putInt(0,300);
  UserPayload input1Payload=UserPayload.create(input1Bb);
  InputDescriptor id1=InputDescriptor.create("input1ClassName").setUserPayload(input1Payload);
  InputSpec inputSpec1=new InputSpec("sourceVertexName1",id1,33);
  InputSpec inputSpec2=new InputSpec("sourceVertexName2",id1,44);
  List<InputSpec> inputSpecList=Lists.newArrayList(inputSpec1,inputSpec2);
  ByteBuffer output1Bb=ByteBuffer.allocate(4);
  output1Bb.putInt(0,400);
  UserPayload output1Payload=UserPayload.create(output1Bb);
  OutputDescriptor od1=OutputDescriptor.create("output1ClassName").setUserPayload(output1Payload);
  OutputSpec outputSpec1=new OutputSpec("destVertexName1",od1,55);
  OutputSpec outputSpec2=new OutputSpec("destVertexName2",od1,66);
  List<OutputSpec> outputSpecList=Lists.newArrayList(outputSpec1,outputSpec2);
  ApplicationId appId=ApplicationId.newInstance(1000,100);
  TezDAGID tezDagId=TezDAGID.getInstance(appId,300);
  TezVertexID tezVertexId=TezVertexID.getInstance(tezDagId,400);
  TezTaskID tezTaskId=TezTaskID.getInstance(tezVertexId,500);
  TezTaskAttemptID tezTaskAttemptId=TezTaskAttemptID.getInstance(tezTaskId,600);
  TaskSpec taskSpec=new TaskSpec(tezTaskAttemptId,"dagName","vertexName",10,processorDescriptor,inputSpecList,outputSpecList,null);
  SignableVertexSpec vertexProto=Converters.convertTaskSpecToProto(taskSpec,0,"","").build();
  assertEquals("dagName",vertexProto.getDagName());
  assertEquals("vertexName",vertexProto.getVertexName());
  assertEquals(appId.toString(),vertexProto.getVertexIdentifier().getApplicationIdString());
  assertEquals(tezDagId.getId(),vertexProto.getVertexIdentifier().getDagId());
  assertEquals(processorDescriptor.getClassName(),vertexProto.getProcessorDescriptor().getClassName());
  assertEquals(processorDescriptor.getUserPayload().getPayload(),vertexProto.getProcessorDescriptor().getUserPayload().getUserPayload().asReadOnlyByteBuffer());
  assertEquals(2,vertexProto.getInputSpecsCount());
  assertEquals(2,vertexProto.getOutputSpecsCount());
  verifyInputSpecAndProto(inputSpec1,vertexProto.getInputSpecs(0));
  verifyInputSpecAndProto(inputSpec2,vertexProto.getInputSpecs(1));
  verifyOutputSpecAndProto(outputSpec1,vertexProto.getOutputSpecs(0));
  verifyOutputSpecAndProto(outputSpec2,vertexProto.getOutputSpecs(1));
}
