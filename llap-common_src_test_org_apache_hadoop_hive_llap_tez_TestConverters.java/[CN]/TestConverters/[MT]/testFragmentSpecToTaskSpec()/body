{
  ByteBuffer procBb=ByteBuffer.allocate(4);
  procBb.putInt(0,200);
  ByteBuffer input1Bb=ByteBuffer.allocate(4);
  input1Bb.putInt(0,300);
  ByteBuffer output1Bb=ByteBuffer.allocate(4);
  output1Bb.putInt(0,400);
  ApplicationId appId=ApplicationId.newInstance(1000,100);
  TezDAGID tezDagId=TezDAGID.getInstance(appId,300);
  TezVertexID tezVertexId=TezVertexID.getInstance(tezDagId,400);
  TezTaskID tezTaskId=TezTaskID.getInstance(tezVertexId,500);
  TezTaskAttemptID tezTaskAttemptId=TezTaskAttemptID.getInstance(tezTaskId,600);
  SignableVertexSpec.Builder builder=SignableVertexSpec.newBuilder();
  builder.setVertexIdentifier(Converters.createVertexIdentifier(tezTaskAttemptId,0));
  builder.setDagName("dagName");
  builder.setVertexName("vertexName");
  builder.setProcessorDescriptor(EntityDescriptorProto.newBuilder().setClassName("fakeProcessorName").setUserPayload(UserPayloadProto.newBuilder().setUserPayload(ByteString.copyFrom(procBb))));
  builder.addInputSpecs(IOSpecProto.newBuilder().setConnectedVertexName("sourceVertexName1").setPhysicalEdgeCount(33).setIoDescriptor(EntityDescriptorProto.newBuilder().setClassName("input1ClassName").setUserPayload(UserPayloadProto.newBuilder().setUserPayload(ByteString.copyFrom(input1Bb)))));
  builder.addInputSpecs(IOSpecProto.newBuilder().setConnectedVertexName("sourceVertexName2").setPhysicalEdgeCount(44).setIoDescriptor(EntityDescriptorProto.newBuilder().setClassName("input1ClassName").setUserPayload(UserPayloadProto.newBuilder().setUserPayload(ByteString.copyFrom(input1Bb)))));
  builder.addOutputSpecs(IOSpecProto.newBuilder().setConnectedVertexName("destVertexName1").setPhysicalEdgeCount(55).setIoDescriptor(EntityDescriptorProto.newBuilder().setClassName("outputClassName").setUserPayload(UserPayloadProto.newBuilder().setUserPayload(ByteString.copyFrom(output1Bb)))));
  builder.addOutputSpecs(IOSpecProto.newBuilder().setConnectedVertexName("destVertexName2").setPhysicalEdgeCount(66).setIoDescriptor(EntityDescriptorProto.newBuilder().setClassName("outputClassName").setUserPayload(UserPayloadProto.newBuilder().setUserPayload(ByteString.copyFrom(output1Bb)))));
  SignableVertexSpec vertexProto=builder.build();
  TaskSpec taskSpec=Converters.getTaskSpecfromProto(vertexProto,0,0,null);
  assertEquals("dagName",taskSpec.getDAGName());
  assertEquals("vertexName",taskSpec.getVertexName());
  assertEquals(tezTaskAttemptId,taskSpec.getTaskAttemptID());
  assertEquals("fakeProcessorName",taskSpec.getProcessorDescriptor().getClassName());
  byte[] serialized=new byte[taskSpec.getProcessorDescriptor().getUserPayload().getPayload().remaining()];
  taskSpec.getProcessorDescriptor().getUserPayload().getPayload().get(serialized);
  assertArrayEquals(procBb.array(),serialized);
  assertEquals(2,taskSpec.getInputs().size());
  assertEquals(2,taskSpec.getOutputs().size());
  verifyInputSpecAndProto(taskSpec.getInputs().get(0),vertexProto.getInputSpecs(0));
  verifyInputSpecAndProto(taskSpec.getInputs().get(1),vertexProto.getInputSpecs(1));
  verifyOutputSpecAndProto(taskSpec.getOutputs().get(0),vertexProto.getOutputSpecs(0));
  verifyOutputSpecAndProto(taskSpec.getOutputs().get(1),vertexProto.getOutputSpecs(1));
}
