{
  SparkWork originalWork=originalTask.getWork();
  Collection<BaseWork> allBaseWorks=originalWork.getAllWorkUnsorted();
  for (  BaseWork work : allBaseWorks) {
    if (containsOp(work,SparkHashTableSinkOperator.class) || containsOp(work,MapJoinOperator.class)) {
      work.setMapRedLocalWork(new MapredLocalWork());
    }
  }
  Context ctx=physicalContext.getContext();
  for (  BaseWork work : allBaseWorks) {
    Operator<? extends OperatorDesc> op=getOp(work,MapJoinOperator.class);
    if (op != null) {
      MapJoinOperator mapJoinOp=(MapJoinOperator)op;
      Path tmpPath=Utilities.generateTmpPath(ctx.getMRTmpPath(),originalTask.getId());
      MapredLocalWork bigTableLocalWork=work.getMapRedLocalWork();
      List<Operator<? extends OperatorDesc>> dummyOps=new ArrayList<Operator<? extends OperatorDesc>>(work.getDummyOps());
      bigTableLocalWork.setDummyParentOp(dummyOps);
      SparkBucketMapJoinContext bucketMJCxt=null;
      MapJoinDesc mapJoinDesc=mapJoinOp.getConf();
      if (mapJoinDesc.isBucketMapJoin()) {
        bucketMJCxt=new SparkBucketMapJoinContext();
        bigTableLocalWork.setBucketMapjoinContext(bucketMJCxt);
        bucketMJCxt.setAliasBucketFileNameMapping(mapJoinDesc.getAliasBucketFileNameMapping());
        bucketMJCxt.setBucketFileNameMapping(mapJoinDesc.getBigTableBucketNumMapping());
        bucketMJCxt.setMapJoinBigTableAlias(mapJoinDesc.getBigTableAlias());
        bucketMJCxt.setBucketMatcherClass(org.apache.hadoop.hive.ql.exec.DefaultBucketMatcher.class);
        bucketMJCxt.setBigTablePartSpecToFileMapping(mapJoinDesc.getBigTablePartSpecToFileMapping());
        bucketMJCxt.setPosToAliasMap(mapJoinOp.getPosToAliasMap());
        ((MapWork)work).setUseBucketizedHiveInputFormat(true);
        bigTableLocalWork.setInputFileChangeSensitive(true);
      }
      for (      BaseWork parentWork : originalWork.getParents(work)) {
        if (containsOp(parentWork,SparkHashTableSinkOperator.class)) {
          MapredLocalWork parentLocalWork=parentWork.getMapRedLocalWork();
          parentLocalWork.setTmpHDFSPath(tmpPath);
          if (bucketMJCxt != null) {
            ((MapWork)parentWork).setUseBucketizedHiveInputFormat(true);
            parentLocalWork.setBucketMapjoinContext(bucketMJCxt);
            parentLocalWork.setInputFileChangeSensitive(true);
          }
        }
      }
      bigTableLocalWork.setTmpPath(tmpPath);
    }
  }
}
