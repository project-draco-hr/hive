{
  List<BaseWork> parentWorks=sparkWork.getParents(work);
  if (sparkWork != targetWork) {
    targetWork.add(work);
    for (    BaseWork childWork : sparkWork.getChildren(work)) {
      if (targetWork.contains(childWork)) {
        targetWork.connect(work,childWork,sparkWork.getEdgeProperty(work,childWork));
      }
    }
  }
  if (!containsOp(work,MapJoinOperator.class)) {
    for (    BaseWork parent : parentWorks) {
      moveWork(sparkWork,parent,targetWork);
    }
  }
 else {
    SparkWork parentWork=new SparkWork(physicalContext.conf.getVar(HiveConf.ConfVars.HIVEQUERYID));
    parentWork.setCloneToWork(sparkWork.getCloneToWork());
    dependencyGraph.get(targetWork).add(parentWork);
    dependencyGraph.put(parentWork,new ArrayList<SparkWork>());
    sparkWorkMap.put(work,parentWork);
    for (    BaseWork parent : parentWorks) {
      if (containsOp(parent,HashTableSinkOperator.class)) {
        moveWork(sparkWork,parent,parentWork);
      }
 else {
        moveWork(sparkWork,parent,targetWork);
      }
    }
  }
}
