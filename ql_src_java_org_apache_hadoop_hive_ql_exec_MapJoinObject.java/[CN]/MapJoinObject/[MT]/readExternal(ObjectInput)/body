{
  try {
    metadataTag=in.readInt();
    objectTypeTag=in.readInt();
    MapJoinObjectCtx ctx=MapJoinOperator.getMapMetadata().get(new Integer(metadataTag));
    Writable val=null;
    assert((objectTypeTag == 1) || (objectTypeTag == 2));
    if (objectTypeTag == 1) {
      val=new BytesWritable();
      val.readFields(in);
      obj=(ArrayList<Object>)ctx.getDeserializer().deserialize(val);
    }
 else     if (objectTypeTag == 2) {
      int sz=in.readInt();
      Vector<ArrayList<Object>> res=new Vector<ArrayList<Object>>();
      for (int pos=0; pos < sz; pos++) {
        ArrayList<Object> memObj=new ArrayList<Object>();
        val=new Text();
        val.readFields(in);
        StructObjectInspector objIns=(StructObjectInspector)ctx.getDeserObjInspector();
        LazyStruct lazyObj=(LazyStruct)(((LazyObject)ctx.getDeserializer().deserialize(val)).getObject());
        List<? extends StructField> listFields=objIns.getAllStructFieldRefs();
        int k=0;
        for (        StructField fld : listFields) {
          memObj.add(objIns.getStructFieldData(lazyObj,fld));
        }
        res.add(memObj);
      }
      obj=res;
    }
  }
 catch (  Exception e) {
    throw new IOException(e.getMessage());
  }
}
