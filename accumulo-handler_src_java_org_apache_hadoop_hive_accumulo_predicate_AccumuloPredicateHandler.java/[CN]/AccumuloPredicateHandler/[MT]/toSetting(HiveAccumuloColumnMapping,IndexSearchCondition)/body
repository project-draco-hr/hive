{
  iteratorCount++;
  final IteratorSetting is=new IteratorSetting(iteratorCount,PrimitiveComparisonFilter.FILTER_PREFIX + iteratorCount,PrimitiveComparisonFilter.class);
  final String type=sc.getColumnDesc().getTypeString();
  final String comparisonOpStr=sc.getComparisonOp();
  PushdownTuple tuple;
  try {
    tuple=new PushdownTuple(sc,getPrimitiveComparison(type,sc),getCompareOp(comparisonOpStr,sc));
  }
 catch (  NoSuchPrimitiveComparisonException e) {
    throw new SerDeException("No configured PrimitiveComparison class for " + type,e);
  }
catch (  NoSuchCompareOpException e) {
    throw new SerDeException("No configured CompareOp class for " + comparisonOpStr,e);
  }
  is.addOption(PrimitiveComparisonFilter.P_COMPARE_CLASS,tuple.getpCompare().getClass().getName());
  is.addOption(PrimitiveComparisonFilter.COMPARE_OPT_CLASS,tuple.getcOpt().getClass().getName());
  is.addOption(PrimitiveComparisonFilter.CONST_VAL,new String(Base64.encodeBase64(tuple.getConstVal())));
  is.addOption(PrimitiveComparisonFilter.COLUMN,accumuloColumnMapping.serialize());
  return is;
}
