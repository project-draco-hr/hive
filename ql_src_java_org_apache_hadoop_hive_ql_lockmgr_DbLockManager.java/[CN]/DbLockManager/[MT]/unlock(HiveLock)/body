{
  long lockId=((DbHiveLock)hiveLock).lockId;
  boolean removed=false;
  try {
    LOG.debug("Unlocking " + hiveLock);
    client.unlock(lockId);
    removed=locks.remove(hiveLock);
    Metrics metrics=MetricsFactory.getInstance();
    if (metrics != null) {
      try {
        metrics.decrementCounter(MetricsConstant.METASTORE_HIVE_LOCKS);
      }
 catch (      Exception e) {
        LOG.warn("Error Reporting hive client metastore unlock operation to Metrics system",e);
      }
    }
    LOG.debug("Removed a lock " + removed);
  }
 catch (  NoSuchLockException e) {
    removed=locks.remove(hiveLock);
    LOG.error("Metastore could find no record of lock " + JavaUtils.lockIdToString(lockId));
    throw new LockException(e,ErrorMsg.LOCK_NO_SUCH_LOCK,JavaUtils.lockIdToString(lockId));
  }
catch (  TxnOpenException e) {
    throw new RuntimeException("Attempt to unlock lock " + JavaUtils.lockIdToString(lockId) + "associated with an open transaction, "+ e.getMessage(),e);
  }
catch (  TException e) {
    throw new LockException(ErrorMsg.METASTORE_COMMUNICATION_FAILED.getMsg(),e);
  }
 finally {
    if (removed) {
      LOG.debug("Removed a lock " + hiveLock);
    }
  }
}
