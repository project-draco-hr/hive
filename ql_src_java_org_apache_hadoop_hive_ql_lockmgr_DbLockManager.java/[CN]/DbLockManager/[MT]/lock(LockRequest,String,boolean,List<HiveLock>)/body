{
  Objects.requireNonNull(queryId,"queryId cannot be null");
  nextSleep=50;
  MAX_SLEEP=Math.max(15000,conf.getTimeVar(HiveConf.ConfVars.HIVE_LOCK_SLEEP_BETWEEN_RETRIES,TimeUnit.MILLISECONDS));
  int maxNumWaits=Math.max(0,conf.getIntVar(HiveConf.ConfVars.HIVE_LOCK_NUMRETRIES));
  try {
    LOG.info("Requesting: queryId=" + queryId + " "+ lock);
    LockResponse res=client.lock(lock);
    LOG.info("Response to queryId=" + queryId + " "+ res);
    if (!isBlocking) {
      if (res.getState() == LockState.WAITING) {
        return LockState.WAITING;
      }
    }
    int numRetries=0;
    long startRetry=System.currentTimeMillis();
    while (res.getState() == LockState.WAITING && numRetries++ < maxNumWaits) {
      backoff();
      res=client.checkLock(res.getLockid());
    }
    long retryDuration=System.currentTimeMillis() - startRetry;
    DbHiveLock hl=new DbHiveLock(res.getLockid(),queryId,lock.getTxnid());
    if (locks.size() > 0) {
      boolean logMsg=false;
      for (      DbHiveLock l : locks) {
        if (l.txnId != hl.txnId) {
          logMsg=true;
          break;
        }
 else         if (l.txnId == 0) {
          if (!l.queryId.equals(hl.queryId)) {
            logMsg=true;
            break;
          }
        }
      }
      if (logMsg) {
        LOG.warn("adding new DbHiveLock(" + hl + ") while we are already tracking locks: "+ locks);
      }
    }
    locks.add(hl);
    if (res.getState() != LockState.ACQUIRED) {
      if (res.getState() == LockState.WAITING) {
        unlock(hl);
        LockException le=new LockException(null,ErrorMsg.LOCK_ACQUIRE_TIMEDOUT,lock.toString(),Long.toString(retryDuration),res.toString());
        if (conf.getBoolVar(HiveConf.ConfVars.TXN_MGR_DUMP_LOCK_STATE_ON_ACQUIRE_TIMEOUT)) {
          showLocksNewFormat(le.getMessage());
        }
        throw le;
      }
      throw new LockException(ErrorMsg.LOCK_CANNOT_BE_ACQUIRED.getMsg() + " " + res);
    }
    acquiredLocks.add(hl);
    Metrics metrics=MetricsFactory.getInstance();
    if (metrics != null) {
      try {
        metrics.incrementCounter(MetricsConstant.METASTORE_HIVE_LOCKS);
      }
 catch (      Exception e) {
        LOG.warn("Error Reporting hive client metastore lock operation to Metrics system",e);
      }
    }
    return res.getState();
  }
 catch (  NoSuchTxnException e) {
    LOG.error("Metastore could not find " + JavaUtils.txnIdToString(lock.getTxnid()));
    throw new LockException(e,ErrorMsg.TXN_NO_SUCH_TRANSACTION,JavaUtils.txnIdToString(lock.getTxnid()));
  }
catch (  TxnAbortedException e) {
    LockException le=new LockException(e,ErrorMsg.TXN_ABORTED,JavaUtils.txnIdToString(lock.getTxnid()),e.getMessage());
    LOG.error(le.getMessage());
    throw le;
  }
catch (  TException e) {
    throw new LockException(ErrorMsg.METASTORE_COMMUNICATION_FAILED.getMsg(),e);
  }
}
