{
  try {
    LOG.info("Requesting: queryId=" + queryId + " "+ lock);
    LockResponse res=client.lock(lock);
    LOG.info("Response to queryId=" + queryId + " "+ res);
    if (!isBlocking) {
      if (res.getState() == LockState.WAITING) {
        return LockState.WAITING;
      }
    }
    while (res.getState() == LockState.WAITING) {
      backoff();
      res=client.checkLock(res.getLockid());
    }
    DbHiveLock hl=new DbHiveLock(res.getLockid());
    locks.add(hl);
    if (res.getState() != LockState.ACQUIRED) {
      throw new LockException(ErrorMsg.LOCK_CANNOT_BE_ACQUIRED.getMsg());
    }
    acquiredLocks.add(hl);
    Metrics metrics=MetricsFactory.getInstance();
    if (metrics != null) {
      try {
        metrics.incrementCounter(MetricsConstant.METASTORE_HIVE_LOCKS);
      }
 catch (      Exception e) {
        LOG.warn("Error Reporting hive client metastore lock operation to Metrics system",e);
      }
    }
    return res.getState();
  }
 catch (  NoSuchTxnException e) {
    LOG.error("Metastore could not find txnid " + lock.getTxnid());
    throw new LockException(ErrorMsg.TXNMGR_NOT_INSTANTIATED.getMsg(),e);
  }
catch (  TxnAbortedException e) {
    LOG.error("Transaction " + JavaUtils.txnIdToString(lock.getTxnid()) + " already aborted.");
    throw new LockException(e,ErrorMsg.TXN_ABORTED,JavaUtils.txnIdToString(lock.getTxnid()));
  }
catch (  TException e) {
    throw new LockException(ErrorMsg.METASTORE_COMMUNICATION_FAILED.getMsg(),e);
  }
}
