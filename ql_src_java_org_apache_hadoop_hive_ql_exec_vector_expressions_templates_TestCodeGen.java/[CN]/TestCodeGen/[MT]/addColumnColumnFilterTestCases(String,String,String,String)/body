{
  TestSuiteClassName template=TestSuiteClassName.TestColumnColumnFilterVectorExpressionEvaluation;
  String templateFile=CodeGen.joinPath(this.templateDirectory,template.toString() + ".txt");
  String templateString=removeTemplateComments(CodeGen.readFile(templateFile));
  for (  Boolean[] testMatrix : new Boolean[][]{{false,true,true,true},{false,false,false,false},{true,false,true,false},{true,true,false,false},{true,false,false,true}}) {
    String testCase=templateString;
    testCase=testCase.replaceAll("<TestName>","test" + vectorExpClassName + createNullRepeatingNameFragment("C1",testMatrix[0],testMatrix[1])+ createNullRepeatingNameFragment("C2",testMatrix[2],testMatrix[3]));
    testCase=testCase.replaceAll("<VectorExpClassName>",vectorExpClassName);
    testCase=testCase.replaceAll("<InputColumnVectorType1>",inputColumnVectorType1);
    testCase=testCase.replaceAll("<InputColumnVectorType2>",inputColumnVectorType2);
    testCase=testCase.replaceAll("<Column1HasNulls>",testMatrix[0].toString());
    testCase=testCase.replaceAll("<Column1IsRepeating>",testMatrix[1].toString());
    testCase=testCase.replaceAll("<Column2HasNulls>",testMatrix[2].toString());
    testCase=testCase.replaceAll("<Column2IsRepeating>",testMatrix[3].toString());
    testCase=testCase.replaceAll("<Operator>",operatorSymbol);
    testsuites.get(template).append(testCase);
  }
}
