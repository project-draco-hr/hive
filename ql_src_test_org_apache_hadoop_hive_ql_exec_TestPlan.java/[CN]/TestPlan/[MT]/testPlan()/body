{
  final String F1="#affiliations";
  final String F2="friends[0].friendid";
  try {
    ExprNodeDesc expr1=new ExprNodeColumnDesc(TypeInfoFactory.stringTypeInfo,F1,"",false);
    ExprNodeDesc expr2=new ExprNodeColumnDesc(TypeInfoFactory.stringTypeInfo,F2,"",false);
    ExprNodeDesc filterExpr=TypeCheckProcFactory.DefaultExprProcessor.getFuncExprNodeDesc("==",expr1,expr2);
    FilterDesc filterCtx=new FilterDesc(filterExpr,false);
    Operator<FilterDesc> op=OperatorFactory.get(FilterDesc.class);
    op.setConf(filterCtx);
    ArrayList<String> aliasList=new ArrayList<String>();
    aliasList.add("a");
    LinkedHashMap<String,ArrayList<String>> pa=new LinkedHashMap<String,ArrayList<String>>();
    pa.put("/tmp/testfolder",aliasList);
    TableDesc tblDesc=Utilities.defaultTd;
    PartitionDesc partDesc=new PartitionDesc(tblDesc,null);
    LinkedHashMap<String,PartitionDesc> pt=new LinkedHashMap<String,PartitionDesc>();
    pt.put("/tmp/testfolder",partDesc);
    LinkedHashMap<String,Operator<? extends OperatorDesc>> ao=new LinkedHashMap<String,Operator<? extends OperatorDesc>>();
    ao.put("a",op);
    MapredWork mrwork=new MapredWork();
    mrwork.getMapWork().setPathToAliases(pa);
    mrwork.getMapWork().setPathToPartitionInfo(pt);
    mrwork.getMapWork().setAliasToWork(ao);
    JobConf job=new JobConf(TestPlan.class);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    Utilities.serializePlan(mrwork,baos,job);
    baos.close();
    String v1=baos.toString();
    job.set("fs.default.name","file:///");
    Utilities.setMapRedWork(job,mrwork,new Path(System.getProperty("java.io.tmpdir") + File.separator + System.getProperty("user.name")+ File.separator+ "hive"));
    MapredWork mrwork2=Utilities.getMapRedWork(job);
    Utilities.clearWork(job);
    baos.reset();
    Utilities.serializePlan(mrwork2,baos,job);
    baos.close();
    assertEquals(v1,baos.toString());
  }
 catch (  Exception excp) {
    excp.printStackTrace();
    throw excp;
  }
  System.out.println("Serialization/Deserialization of plan successful");
}
