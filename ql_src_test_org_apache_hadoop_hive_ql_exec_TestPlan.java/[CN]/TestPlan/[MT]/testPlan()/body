{
  final String F1="#affiliations";
  final String F2="friends[0].friendid";
  try {
    exprNodeDesc expr1=new exprNodeColumnDesc(TypeInfoFactory.stringTypeInfo,F1);
    exprNodeDesc expr2=new exprNodeColumnDesc(TypeInfoFactory.stringTypeInfo,F2);
    exprNodeDesc filterExpr=TypeCheckProcFactory.DefaultExprProcessor.getFuncExprNodeDesc("==",expr1,expr2);
    filterDesc filterCtx=new filterDesc(filterExpr);
    Operator<filterDesc> op=OperatorFactory.get(filterDesc.class);
    op.setConf(filterCtx);
    ArrayList<String> aliasList=new ArrayList<String>();
    aliasList.add("a");
    LinkedHashMap<String,ArrayList<String>> pa=new LinkedHashMap<String,ArrayList<String>>();
    pa.put("/tmp/testfolder",aliasList);
    tableDesc tblDesc=Utilities.defaultTd;
    partitionDesc partDesc=new partitionDesc(tblDesc,null);
    LinkedHashMap<String,partitionDesc> pt=new LinkedHashMap<String,partitionDesc>();
    pt.put("/tmp/testfolder",partDesc);
    HashMap<String,Operator<? extends Serializable>> ao=new HashMap<String,Operator<? extends Serializable>>();
    ao.put("a",op);
    mapredWork mrwork=new mapredWork();
    mrwork.setPathToAliases(pa);
    mrwork.setPathToPartitionInfo(pt);
    mrwork.setAliasToWork(ao);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    Utilities.serializeMapRedWork(mrwork,baos);
    baos.close();
    String v1=baos.toString();
    JobConf job=new JobConf(TestPlan.class);
    job.set("fs.default.name","file:///");
    Utilities.setMapRedWork(job,mrwork);
    mapredWork mrwork2=Utilities.getMapRedWork(job);
    Utilities.clearMapRedWork(job);
    baos.reset();
    Utilities.serializeMapRedWork(mrwork2,baos);
    baos.close();
    assertEquals(v1,baos.toString());
  }
 catch (  Exception excp) {
    excp.printStackTrace();
    throw excp;
  }
  System.out.println("Serialization/Deserialization of plan successful");
}
