{
  Path p=new Path(fromPath);
  URI fromURI=p.toUri();
  String fromScheme=fromURI.getScheme();
  if (StringUtils.isEmpty(fromScheme)) {
    if (isLocal) {
      if (!fromPath.startsWith("/")) {
        p=new Path(System.getProperty("user.dir"),fromPath);
      }
      fromScheme="file";
    }
 else {
      if (!fromPath.startsWith("/") && StringUtils.isEmpty(fromURI.getAuthority())) {
        p=new Path(new Path("/user/" + System.getProperty("user.name")),fromPath);
      }
    }
  }
  fs=FileSystem.get(fromURI,conf);
  String fromAuthority=null;
  if (StringUtils.isEmpty(fromScheme)) {
    fromScheme=fs.getUri().getScheme();
    fromAuthority=fs.getUri().getAuthority();
  }
  if (fromScheme.equals("hdfs")) {
    fromAuthority=StringUtils.isEmpty(fromURI.getAuthority()) ? fs.getUri().getAuthority() : fromURI.getAuthority();
  }
  try {
    fromURI=new URI(fromScheme,fromAuthority,p.toString(),null,null);
  }
 catch (  URISyntaxException e) {
    throw new RuntimeException(e);
  }
  return fromURI;
}
