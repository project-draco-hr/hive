{
  conf=new JobConf();
  conf.set("bucket_count","1");
  conf.set(hive_metastoreConstants.TABLE_IS_TRANSACTIONAL,"true");
  conf.setBoolean(HiveConf.ConfVars.HIVE_TRANSACTIONAL_TABLE_SCAN.varname,true);
  conf.set(hive_metastoreConstants.TABLE_TRANSACTIONAL_PROPERTIES,"default");
  conf.setInt(HiveConf.ConfVars.HIVE_TXN_OPERATIONAL_PROPERTIES.varname,AcidUtils.AcidOperationalProperties.getDefault().toInt());
  conf.set(IOConstants.SCHEMA_EVOLUTION_COLUMNS,DummyRow.getColumnNamesProperty());
  conf.set(IOConstants.SCHEMA_EVOLUTION_COLUMNS_TYPES,DummyRow.getColumnTypesProperty());
  conf.setBoolean(HiveConf.ConfVars.HIVE_VECTORIZATION_ENABLED.varname,true);
  conf.set(HiveConf.ConfVars.HIVE_ORC_SPLIT_STRATEGY.varname,"BI");
  fs=FileSystem.getLocal(conf);
  Path workDir=new Path(System.getProperty("test.tmp.dir","target" + File.separator + "test"+ File.separator+ "tmp"));
  root=new Path(workDir,"TestVectorizedOrcAcidRowBatch.testDump");
  fs.delete(root,true);
  ObjectInspector inspector;
synchronized (TestOrcFile.class) {
    inspector=ObjectInspectorFactory.getReflectionObjectInspector(DummyRow.class,ObjectInspectorFactory.ObjectInspectorOptions.JAVA);
  }
  int bucket=0;
  AcidOutputFormat.Options options=new AcidOutputFormat.Options(conf).filesystem(fs).bucket(bucket).writingBase(false).minimumTransactionId(1).maximumTransactionId(NUM_OTID).inspector(inspector).reporter(Reporter.NULL).recordIdColumn(1).finalDestination(root);
  RecordUpdater updater=new OrcRecordUpdater(root,options);
  for (long i=1; i <= NUM_OTID; ++i) {
    for (long j=0; j < NUM_ROWID_PER_OTID; ++j) {
      long payload=(i - 1) * NUM_ROWID_PER_OTID + j;
      updater.insert(i,new DummyRow(payload,j,i,bucket));
    }
  }
  updater.close(false);
  long currTxnId=NUM_OTID + 1;
  options.minimumTransactionId(currTxnId).maximumTransactionId(currTxnId);
  updater=new OrcRecordUpdater(root,options);
  for (long i=1; i <= NUM_OTID; ++i) {
    for (long j=0; j < NUM_ROWID_PER_OTID; j+=1) {
      if (j % 2 == 0 && j % 3 != 0) {
        updater.delete(currTxnId,new DummyRow(-1,j,i,bucket));
      }
    }
  }
  updater.close(false);
  currTxnId=NUM_OTID + 2;
  options.minimumTransactionId(currTxnId).maximumTransactionId(currTxnId);
  updater=new OrcRecordUpdater(root,options);
  for (long i=1; i <= NUM_OTID; ++i) {
    for (long j=0; j < NUM_ROWID_PER_OTID; j+=1) {
      if (j % 2 != 0 && j % 3 == 0) {
        updater.delete(currTxnId,new DummyRow(-1,j,i,bucket));
      }
    }
  }
  updater.close(false);
  currTxnId=NUM_OTID + 3;
  options.minimumTransactionId(currTxnId).maximumTransactionId(currTxnId);
  updater=new OrcRecordUpdater(root,options);
  for (long i=1; i <= NUM_OTID; ++i) {
    for (long j=0; j < NUM_ROWID_PER_OTID; j+=1) {
      if (j % 2 == 0 && j % 3 == 0) {
        updater.delete(currTxnId,new DummyRow(-1,j,i,bucket));
      }
    }
  }
  updater.close(false);
}
