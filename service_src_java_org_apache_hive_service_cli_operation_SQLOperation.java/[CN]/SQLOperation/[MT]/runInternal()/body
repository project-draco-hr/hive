{
  setState(OperationState.PENDING);
  boolean runAsync=shouldRunAsync();
  final boolean asyncPrepare=runAsync && HiveConf.getBoolVar(queryState.getConf(),HiveConf.ConfVars.HIVE_SERVER2_ASYNC_EXEC_ASYNC_COMPILE);
  if (!asyncPrepare) {
    prepare(queryState);
  }
  if (!runAsync) {
    runQuery();
  }
 else {
    final SessionState parentSessionState=SessionState.get();
    final Hive parentHive=parentSession.getSessionHive();
    final PerfLogger parentPerfLogger=SessionState.getPerfLogger();
    final UserGroupInformation currentUGI=getCurrentUGI();
    Runnable backgroundOperation=new Runnable(){
      @Override public void run(){
        PrivilegedExceptionAction<Object> doAsAction=new PrivilegedExceptionAction<Object>(){
          @Override public Object run() throws HiveSQLException {
            Hive.set(parentHive);
            SessionState.setCurrentSessionState(parentSessionState);
            PerfLogger.setPerfLogger(parentPerfLogger);
            registerCurrentOperationLog();
            registerLoggingContext();
            try {
              if (asyncPrepare) {
                prepare(queryState);
              }
              runQuery();
            }
 catch (            HiveSQLException e) {
              setOperationException(e);
              LOG.error("Error running hive query: ",e);
            }
 finally {
              unregisterLoggingContext();
              unregisterOperationLog();
            }
            return null;
          }
        }
;
        try {
          currentUGI.doAs(doAsAction);
        }
 catch (        Exception e) {
          setOperationException(new HiveSQLException(e));
          LOG.error("Error running hive query as user : " + currentUGI.getShortUserName(),e);
        }
 finally {
          if (ThreadWithGarbageCleanup.currentThread() instanceof ThreadWithGarbageCleanup) {
            ThreadWithGarbageCleanup currentThread=(ThreadWithGarbageCleanup)ThreadWithGarbageCleanup.currentThread();
            currentThread.cacheThreadLocalRawStore();
          }
        }
      }
    }
;
    try {
      Future<?> backgroundHandle=getParentSession().getSessionManager().submitBackgroundOperation(backgroundOperation);
      setBackgroundHandle(backgroundHandle);
    }
 catch (    RejectedExecutionException rejected) {
      setState(OperationState.ERROR);
      throw new HiveSQLException("The background threadpool cannot accept" + " new task for execution, please retry the operation",rejected);
    }
  }
}
