{
  setState(OperationState.PENDING);
  final HiveConf opConfig=getConfigForOperation();
  prepare(opConfig);
  if (!shouldRunAsync()) {
    runInternal(opConfig);
  }
 else {
    final SessionState parentSessionState=SessionState.get();
    final Hive sessionHive=getCurrentHive();
    final UserGroupInformation currentUGI=getCurrentUGI(opConfig);
    Runnable backgroundOperation=new Runnable(){
      @Override public void run(){
        PrivilegedExceptionAction<Object> doAsAction=new PrivilegedExceptionAction<Object>(){
          @Override public Object run() throws HiveSQLException {
            Hive.set(sessionHive);
            SessionState.setCurrentSessionState(parentSessionState);
            try {
              runInternal(opConfig);
            }
 catch (            HiveSQLException e) {
              setOperationException(e);
              LOG.error("Error running hive query: ",e);
            }
            return null;
          }
        }
;
        try {
          ShimLoader.getHadoopShims().doAs(currentUGI,doAsAction);
        }
 catch (        Exception e) {
          setOperationException(new HiveSQLException(e));
          LOG.error("Error running hive query as user : " + currentUGI.getShortUserName(),e);
        }
      }
    }
;
    try {
      Future<?> backgroundHandle=getParentSession().getSessionManager().submitBackgroundOperation(backgroundOperation);
      setBackgroundHandle(backgroundHandle);
    }
 catch (    RejectedExecutionException rejected) {
      setState(OperationState.ERROR);
      throw new HiveSQLException("The background threadpool cannot accept" + " new task for execution, please retry the operation",rejected);
    }
  }
}
