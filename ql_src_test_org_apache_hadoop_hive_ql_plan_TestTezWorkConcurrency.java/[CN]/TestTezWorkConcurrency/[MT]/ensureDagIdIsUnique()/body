{
  final int threadCount=5;
  final CountDownLatch threadReadyToStartSignal=new CountDownLatch(threadCount);
  final CountDownLatch startThreadSignal=new CountDownLatch(1);
  final int numberOfTezWorkToCreatePerThread=100;
  List<FutureTask<Set<String>>> tasks=Lists.newArrayList();
  for (int i=0; i < threadCount; i++) {
    tasks.add(new FutureTask<>(new Callable<Set<String>>(){
      @Override public Set<String> call() throws Exception {
        threadReadyToStartSignal.countDown();
        startThreadSignal.await();
        return generateTezWorkDagIds(numberOfTezWorkToCreatePerThread);
      }
    }
));
  }
  ExecutorService executor=Executors.newFixedThreadPool(threadCount);
  for (  FutureTask<Set<String>> task : tasks) {
    executor.execute(task);
  }
  threadReadyToStartSignal.await();
  startThreadSignal.countDown();
  Set<String> allTezWorkDagIds=getAllTezWorkDagIds(tasks);
  assertEquals(threadCount * numberOfTezWorkToCreatePerThread,allTezWorkDagIds.size());
}
