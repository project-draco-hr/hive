{
  String filterExprSerialized=jobConf.get(TableScanDesc.FILTER_EXPR_CONF_STR);
  if (filterExprSerialized == null) {
    return tableSplit;
  }
  ExprNodeDesc filterExpr=Utilities.deserializeExpression(filterExprSerialized,jobConf);
  String colName=jobConf.get(Constants.LIST_COLUMNS).split(",")[iKey];
  String colType=jobConf.get(Constants.LIST_COLUMN_TYPES).split(",")[iKey];
  IndexPredicateAnalyzer analyzer=newIndexPredicateAnalyzer(colName,colType,isKeyBinary);
  List<IndexSearchCondition> searchConditions=new ArrayList<IndexSearchCondition>();
  ExprNodeDesc residualPredicate=analyzer.analyzePredicate(filterExpr,searchConditions);
  if (residualPredicate != null) {
    throw new RuntimeException("Unexpected residual predicate " + residualPredicate.getExprString());
  }
  if (searchConditions.size() != 1) {
    throw new RuntimeException("Exactly one search condition expected in push down");
  }
  IndexSearchCondition sc=searchConditions.get(0);
  ExprNodeConstantEvaluator eval=new ExprNodeConstantEvaluator(sc.getConstantDesc());
  PrimitiveObjectInspector objInspector;
  Object writable;
  try {
    objInspector=(PrimitiveObjectInspector)eval.initialize(null);
    writable=eval.evaluate(null);
  }
 catch (  ClassCastException cce) {
    throw new IOException("Currently only primitve types are supported. Found: " + sc.getConstantDesc().getTypeString());
  }
catch (  HiveException e) {
    throw new IOException(e);
  }
  byte[] constantVal=getConstantVal(writable,objInspector,isKeyBinary);
  byte[] startRow=HConstants.EMPTY_START_ROW, stopRow=HConstants.EMPTY_END_ROW;
  String comparisonOp=sc.getComparisonOp();
  if ("org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqual".equals(comparisonOp)) {
    startRow=constantVal;
    stopRow=getNextBA(constantVal);
  }
 else   if ("org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPLessThan".equals(comparisonOp)) {
    stopRow=constantVal;
  }
 else   if ("org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrGreaterThan".equals(comparisonOp)) {
    startRow=constantVal;
  }
 else   if ("org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPGreaterThan".equals(comparisonOp)) {
    startRow=getNextBA(constantVal);
  }
 else   if ("org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrLessThan".equals(comparisonOp)) {
    stopRow=getNextBA(constantVal);
  }
 else {
    throw new IOException(comparisonOp + " is not a supported comparison operator");
  }
  if (tableSplit != null) {
    tableSplit=new TableSplit(tableSplit.getTableName(),startRow,stopRow,tableSplit.getRegionLocation());
  }
  scan.setStartRow(startRow);
  scan.setStopRow(stopRow);
  return tableSplit;
}
