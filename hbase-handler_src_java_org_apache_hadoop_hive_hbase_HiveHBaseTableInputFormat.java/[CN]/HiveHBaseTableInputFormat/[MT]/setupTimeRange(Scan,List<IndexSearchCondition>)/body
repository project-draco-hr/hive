{
  long start=0;
  long end=Long.MAX_VALUE;
  for (  IndexSearchCondition sc : conditions) {
    long timestamp=getTimestampVal(sc);
    String comparisonOp=sc.getComparisonOp();
    if ("org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqual".equals(comparisonOp)) {
      start=timestamp;
      end=timestamp + 1;
    }
 else     if ("org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPLessThan".equals(comparisonOp)) {
      end=timestamp;
    }
 else     if ("org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrGreaterThan".equals(comparisonOp)) {
      start=timestamp;
    }
 else     if ("org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPGreaterThan".equals(comparisonOp)) {
      start=timestamp + 1;
    }
 else     if ("org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrLessThan".equals(comparisonOp)) {
      end=timestamp + 1;
    }
 else {
      throw new IOException(comparisonOp + " is not a supported comparison operator");
    }
  }
  scan.setTimeRange(start,end);
}
