{
  Scan scan=new Scan();
  String filterObjectSerialized=jobConf.get(TableScanDesc.FILTER_OBJECT_CONF_STR);
  if (filterObjectSerialized != null) {
    HBaseScanRange range=SerializationUtilities.deserializeObject(filterObjectSerialized,HBaseScanRange.class);
    try {
      range.setup(scan,jobConf);
    }
 catch (    Exception e) {
      throw new IOException(e);
    }
    return scan;
  }
  String filterExprSerialized=jobConf.get(TableScanDesc.FILTER_EXPR_CONF_STR);
  if (filterExprSerialized == null) {
    return scan;
  }
  ExprNodeGenericFuncDesc filterExpr=SerializationUtilities.deserializeExpression(filterExprSerialized);
  String keyColName=jobConf.get(serdeConstants.LIST_COLUMNS).split(",")[iKey];
  ArrayList<TypeInfo> cols=TypeInfoUtils.getTypeInfosFromTypeString(jobConf.get(serdeConstants.LIST_COLUMN_TYPES));
  String colType=cols.get(iKey).getTypeName();
  boolean isKeyComparable=isKeyBinary || colType.equalsIgnoreCase("string");
  String tsColName=null;
  if (iTimestamp >= 0) {
    tsColName=jobConf.get(serdeConstants.LIST_COLUMNS).split(",")[iTimestamp];
  }
  IndexPredicateAnalyzer analyzer=newIndexPredicateAnalyzer(keyColName,isKeyComparable,tsColName);
  List<IndexSearchCondition> conditions=new ArrayList<IndexSearchCondition>();
  ExprNodeDesc residualPredicate=analyzer.analyzePredicate(filterExpr,conditions);
  if (residualPredicate != null) {
    LOG.debug("Ignoring residual predicate " + residualPredicate.getExprString());
  }
  Map<String,List<IndexSearchCondition>> split=HiveHBaseInputFormatUtil.decompose(conditions);
  List<IndexSearchCondition> keyConditions=split.get(keyColName);
  if (keyConditions != null && !keyConditions.isEmpty()) {
    setupKeyRange(scan,keyConditions,isKeyBinary);
  }
  List<IndexSearchCondition> tsConditions=split.get(tsColName);
  if (tsConditions != null && !tsConditions.isEmpty()) {
    setupTimeRange(scan,tsConditions);
  }
  return scan;
}
