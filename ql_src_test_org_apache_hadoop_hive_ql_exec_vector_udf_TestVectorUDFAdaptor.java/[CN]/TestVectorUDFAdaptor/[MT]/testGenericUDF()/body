{
  ExprNodeGenericFuncDesc funcDesc;
  GenericUDF genericUDF=new GenericUDFIsNull();
  TypeInfo typeInfoStr=TypeInfoFactory.stringTypeInfo;
  List<ExprNodeDesc> children=new ArrayList<ExprNodeDesc>();
  children.add(new ExprNodeColumnDesc(typeInfoStr,"col0","tablename",false));
  children.add(new ExprNodeConstantDesc(typeInfoStr,"UNKNOWN"));
  VectorUDFArgDesc[] argDescs=new VectorUDFArgDesc[2];
  for (int i=0; i < 2; i++) {
    argDescs[i]=new VectorUDFArgDesc();
  }
  argDescs[0].setVariable(0);
  argDescs[1].setConstant((ExprNodeConstantDesc)children.get(1));
  funcDesc=new ExprNodeGenericFuncDesc(typeInfoStr,genericUDF,"myisnull",children);
  VectorUDFAdaptor vudf=null;
  try {
    vudf=new VectorUDFAdaptor(funcDesc,3,"String",argDescs);
  }
 catch (  HiveException e) {
    assertTrue(false);
  }
  VectorizedRowBatch b;
  byte[] red=null;
  byte[] unknown=null;
  try {
    red="red".getBytes("UTF-8");
    unknown="UNKNOWN".getBytes("UTF-8");
  }
 catch (  Exception e) {
    ;
  }
  BytesColumnVector out;
  b=getBatchStrDblLongWithStrOut();
  b.cols[0].noNulls=false;
  b.cols[0].isNull[0]=true;
  vudf.evaluate(b);
  out=(BytesColumnVector)b.cols[3];
  int cmp=StringExpr.compare(red,0,red.length,out.vector[1],out.start[1],out.length[1]);
  assertEquals(0,cmp);
  cmp=StringExpr.compare(unknown,0,unknown.length,out.vector[0],out.start[0],out.length[0]);
  assertEquals(0,cmp);
  assertTrue(out.noNulls || !out.isNull[0]);
}
