{
  ExprNodeGenericFuncDesc funcDesc;
  TypeInfo typeInfo=TypeInfoFactory.longTypeInfo;
  GenericUDFBridge genericUDFBridge=new GenericUDFBridge("longudf",false,LongUDF.class.getName());
  List<ExprNodeDesc> children=new ArrayList<ExprNodeDesc>();
  ExprNodeColumnDesc colDesc=new ExprNodeColumnDesc(typeInfo,"col0","tablename",false);
  children.add(colDesc);
  VectorUDFArgDesc[] argDescs=new VectorUDFArgDesc[1];
  argDescs[0]=new VectorUDFArgDesc();
  argDescs[0].setVariable(0);
  funcDesc=new ExprNodeGenericFuncDesc(typeInfo,genericUDFBridge,genericUDFBridge.getUdfName(),children);
  VectorUDFAdaptor vudf=null;
  try {
    vudf=new VectorUDFAdaptor(funcDesc,1,"Long",argDescs);
  }
 catch (  HiveException e) {
    assertTrue(false);
  }
  VectorizedRowBatch b=getBatchLongInLongOut();
  vudf.evaluate(b);
  LongColumnVector out=(LongColumnVector)b.cols[1];
  assertEquals(1000,out.vector[0]);
  assertEquals(1001,out.vector[1]);
  assertEquals(1002,out.vector[2]);
  assertTrue(out.noNulls);
  assertFalse(out.isRepeating);
  b=getBatchLongInLongOut();
  out=(LongColumnVector)b.cols[1];
  b.cols[0].noNulls=false;
  vudf.evaluate(b);
  assertFalse(out.noNulls);
  assertEquals(1000,out.vector[0]);
  assertEquals(1001,out.vector[1]);
  assertTrue(out.isNull[2]);
  assertFalse(out.isRepeating);
  b=getBatchLongInLongOut();
  out=(LongColumnVector)b.cols[1];
  b.cols[0].isRepeating=true;
  vudf.evaluate(b);
  assertTrue(b.cols[1].isRepeating && out.vector[0] == 1000 || !b.cols[1].isRepeating && out.vector[2] == 1000);
  assertEquals(3,b.size);
}
