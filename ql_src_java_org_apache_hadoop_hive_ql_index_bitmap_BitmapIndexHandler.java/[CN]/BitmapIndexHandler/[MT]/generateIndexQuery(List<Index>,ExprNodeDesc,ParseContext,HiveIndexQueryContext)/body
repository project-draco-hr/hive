{
  Map<Index,ExprNodeDesc> indexPredicates=decomposePredicate(predicate,indexes,queryContext);
  if (indexPredicates == null) {
    LOG.info("No decomposed predicate found");
    queryContext.setQueryTasks(null);
    return;
  }
  List<BitmapInnerQuery> iqs=new ArrayList<BitmapInnerQuery>(indexes.size());
  int i=0;
  for (  Index index : indexes) {
    ExprNodeDesc indexPredicate=indexPredicates.get(index);
    if (indexPredicate != null) {
      iqs.add(new BitmapInnerQuery(index.getIndexTableName(),indexPredicate,"ind" + i++));
    }
  }
  queryContext.setIndexInputFormat(HiveIndexedInputFormat.class.getName());
  StringBuilder qlCommand=new StringBuilder("INSERT OVERWRITE DIRECTORY ");
  String tmpFile=pctx.getContext().getMRTmpFileURI();
  qlCommand.append("\"" + tmpFile + "\" ");
  qlCommand.append("SELECT bucketname AS `_bucketname` , COLLECT_SET(offset) AS `_offsets` FROM ");
  qlCommand.append("(SELECT `_bucketname` AS bucketname , `_offset` AS offset FROM ");
  BitmapQuery head=iqs.get(0);
  for (i=1; i < iqs.size(); i++) {
    head=new BitmapOuterQuery("oind" + i,head,iqs.get(i));
  }
  qlCommand.append(head.toString());
  qlCommand.append(" WHERE NOT EWAH_BITMAP_EMPTY(" + head.getAlias() + ".`_bitmaps`) ) tmp_index GROUP BY bucketname");
  LOG.info("Generating tasks for re-entrant QL query: " + qlCommand.toString());
  HiveConf queryConf=new HiveConf(pctx.getConf(),BitmapIndexHandler.class);
  HiveConf.setBoolVar(queryConf,HiveConf.ConfVars.COMPRESSRESULT,false);
  Driver driver=new Driver(queryConf);
  driver.compile(qlCommand.toString(),false);
  queryContext.setIndexIntermediateFile(tmpFile);
  queryContext.addAdditionalSemanticInputs(driver.getPlan().getInputs());
  queryContext.setQueryTasks(driver.getPlan().getRootTasks());
}
