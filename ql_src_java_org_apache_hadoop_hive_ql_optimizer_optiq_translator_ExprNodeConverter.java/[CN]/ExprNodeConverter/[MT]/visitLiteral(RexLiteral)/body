{
  RelDataType lType=literal.getType();
switch (literal.getTypeName()) {
case BOOLEAN:
    return new ExprNodeConstantDesc(TypeInfoFactory.booleanTypeInfo,literal.getValue3());
case TINYINT:
  return new ExprNodeConstantDesc(TypeInfoFactory.byteTypeInfo,literal.getValue3());
case SMALLINT:
return new ExprNodeConstantDesc(TypeInfoFactory.shortTypeInfo,literal.getValue3());
case INTEGER:
return new ExprNodeConstantDesc(TypeInfoFactory.intTypeInfo,literal.getValue3());
case BIGINT:
return new ExprNodeConstantDesc(TypeInfoFactory.longTypeInfo,literal.getValue3());
case FLOAT:
return new ExprNodeConstantDesc(TypeInfoFactory.floatTypeInfo,literal.getValue3());
case DOUBLE:
return new ExprNodeConstantDesc(TypeInfoFactory.doubleTypeInfo,literal.getValue3());
case DATE:
return new ExprNodeConstantDesc(TypeInfoFactory.dateTypeInfo,literal.getValue3());
case TIMESTAMP:
return new ExprNodeConstantDesc(TypeInfoFactory.timestampTypeInfo,literal.getValue3());
case BINARY:
return new ExprNodeConstantDesc(TypeInfoFactory.binaryTypeInfo,literal.getValue3());
case DECIMAL:
return new ExprNodeConstantDesc(TypeInfoFactory.getDecimalTypeInfo(lType.getPrecision(),lType.getScale()),literal.getValue3());
case VARCHAR:
return new ExprNodeConstantDesc(TypeInfoFactory.getVarcharTypeInfo(lType.getPrecision()),new HiveVarchar((String)literal.getValue3(),lType.getPrecision()));
case CHAR:
return new ExprNodeConstantDesc(TypeInfoFactory.getCharTypeInfo(lType.getPrecision()),new HiveChar((String)literal.getValue3(),lType.getPrecision()));
case OTHER:
default :
return new ExprNodeConstantDesc(TypeInfoFactory.voidTypeInfo,literal.getValue3());
}
}
