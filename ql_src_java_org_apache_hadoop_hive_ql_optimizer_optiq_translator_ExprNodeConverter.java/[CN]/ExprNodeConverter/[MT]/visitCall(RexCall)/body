{
  ExprNodeGenericFuncDesc gfDesc=null;
  if (!deep) {
    return null;
  }
  List<ExprNodeDesc> args=new LinkedList<ExprNodeDesc>();
  for (  RexNode operand : call.operands) {
    args.add(operand.accept(this));
  }
  if (ASTConverter.isFlat(call)) {
    ArrayList<ExprNodeDesc> tmpExprArgs=new ArrayList<ExprNodeDesc>();
    tmpExprArgs.addAll(args.subList(0,2));
    gfDesc=new ExprNodeGenericFuncDesc(TypeConverter.convert(call.getType()),SqlFunctionConverter.getHiveUDF(call.getOperator(),call.getType(),2),tmpExprArgs);
    for (int i=2; i < call.operands.size(); i++) {
      tmpExprArgs=new ArrayList<ExprNodeDesc>();
      tmpExprArgs.add(gfDesc);
      tmpExprArgs.add(args.get(i));
      gfDesc=new ExprNodeGenericFuncDesc(TypeConverter.convert(call.getType()),SqlFunctionConverter.getHiveUDF(call.getOperator(),call.getType(),2),tmpExprArgs);
    }
  }
 else {
    gfDesc=new ExprNodeGenericFuncDesc(TypeConverter.convert(call.getType()),SqlFunctionConverter.getHiveUDF(call.getOperator(),call.getType(),args.size()),args);
  }
  return gfDesc;
}
