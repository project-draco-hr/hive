{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case INDEXNAME:
      if (field.type == TType.STRING) {
        this.indexName=iprot.readString();
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case INDEXHANDLERCLASS:
  if (field.type == TType.STRING) {
    this.indexHandlerClass=iprot.readString();
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case DBNAME:
if (field.type == TType.STRING) {
this.dbName=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case ORIGTABLENAME:
if (field.type == TType.STRING) {
this.origTableName=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case CREATETIME:
if (field.type == TType.I32) {
this.createTime=iprot.readI32();
this.__isset.createTime=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case LASTACCESSTIME:
if (field.type == TType.I32) {
this.lastAccessTime=iprot.readI32();
this.__isset.lastAccessTime=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case INDEXTABLENAME:
if (field.type == TType.STRING) {
this.indexTableName=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case SD:
if (field.type == TType.STRUCT) {
this.sd=new StorageDescriptor();
this.sd.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case PARAMETERS:
if (field.type == TType.MAP) {
{
TMap _map49=iprot.readMapBegin();
this.parameters=new HashMap<String,String>(2 * _map49.size);
for (int _i50=0; _i50 < _map49.size; ++_i50) {
String _key51;
String _val52;
_key51=iprot.readString();
_val52=iprot.readString();
this.parameters.put(_key51,_val52);
}
iprot.readMapEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case DEFERREDREBUILD:
if (field.type == TType.BOOL) {
this.deferredRebuild=iprot.readBool();
this.__isset.deferredRebuild=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
