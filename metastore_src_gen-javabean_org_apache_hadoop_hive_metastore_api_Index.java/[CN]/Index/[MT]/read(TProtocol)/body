{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case INDEXNAME:
      if (field.type == TType.STRING) {
        this.indexName=iprot.readString();
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case INDEXTYPE:
  if (field.type == TType.I32) {
    this.indexType=iprot.readI32();
    this.__isset.indexType=true;
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case TABLENAME:
if (field.type == TType.STRING) {
this.tableName=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case DBNAME:
if (field.type == TType.STRING) {
this.dbName=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case COLNAMES:
if (field.type == TType.LIST) {
{
TList _list44=iprot.readListBegin();
this.colNames=new ArrayList<String>(_list44.size);
for (int _i45=0; _i45 < _list44.size; ++_i45) {
String _elem46;
_elem46=iprot.readString();
this.colNames.add(_elem46);
}
iprot.readListEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case PARTNAME:
if (field.type == TType.STRING) {
this.partName=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
