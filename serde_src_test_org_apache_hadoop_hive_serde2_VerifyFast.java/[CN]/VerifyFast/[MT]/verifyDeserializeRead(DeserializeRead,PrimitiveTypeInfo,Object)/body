{
  boolean isNull;
  isNull=deserializeRead.readCheckNull();
  if (isNull) {
    if (object != null) {
      TestCase.fail("Field reports null but object is not null");
    }
    return;
  }
 else   if (object == null) {
    TestCase.fail("Field report not null but object is null");
  }
switch (primitiveTypeInfo.getPrimitiveCategory()) {
case BOOLEAN:
{
      boolean value=deserializeRead.readBoolean();
      if (!(object instanceof Boolean)) {
        TestCase.fail("Boolean expected object not Boolean");
      }
      Boolean expected=(Boolean)object;
      if (value != expected) {
        TestCase.fail("Boolean field mismatch (expected " + expected + " found "+ value+ ")");
      }
    }
  break;
case BYTE:
{
  byte value=deserializeRead.readByte();
  if (!(object instanceof Byte)) {
    TestCase.fail("Byte expected object not Byte");
  }
  Byte expected=(Byte)object;
  if (value != expected) {
    TestCase.fail("Byte field mismatch (expected " + (int)expected + " found "+ (int)value+ ")");
  }
}
break;
case SHORT:
{
short value=deserializeRead.readShort();
if (!(object instanceof Short)) {
TestCase.fail("Short expected object not Short");
}
Short expected=(Short)object;
if (value != expected) {
TestCase.fail("Short field mismatch (expected " + expected + " found "+ value+ ")");
}
}
break;
case INT:
{
int value=deserializeRead.readInt();
if (!(object instanceof Integer)) {
TestCase.fail("Integer expected object not Integer");
}
Integer expected=(Integer)object;
if (value != expected) {
TestCase.fail("Int field mismatch (expected " + expected + " found "+ value+ ")");
}
}
break;
case LONG:
{
long value=deserializeRead.readLong();
if (!(object instanceof Long)) {
TestCase.fail("Long expected object not Long");
}
Long expected=(Long)object;
if (value != expected) {
TestCase.fail("Long field mismatch (expected " + expected + " found "+ value+ ")");
}
}
break;
case FLOAT:
{
float value=deserializeRead.readFloat();
Float expected=(Float)object;
if (!(object instanceof Float)) {
TestCase.fail("Float expected object not Float");
}
if (value != expected) {
TestCase.fail("Float field mismatch (expected " + expected + " found "+ value+ ")");
}
}
break;
case DOUBLE:
{
double value=deserializeRead.readDouble();
Double expected=(Double)object;
if (!(object instanceof Double)) {
TestCase.fail("Double expected object not Double");
}
if (value != expected) {
TestCase.fail("Double field mismatch (expected " + expected + " found "+ value+ ")");
}
}
break;
case STRING:
{
DeserializeRead.ReadStringResults readStringResults=deserializeRead.createReadStringResults();
deserializeRead.readString(readStringResults);
byte[] stringBytes=Arrays.copyOfRange(readStringResults.bytes,readStringResults.start,readStringResults.start + readStringResults.length);
Text text=new Text(stringBytes);
String string=text.toString();
String expected=(String)object;
if (!string.equals(expected)) {
TestCase.fail("String field mismatch (expected '" + expected + "' found '"+ string+ "')");
}
}
break;
case CHAR:
{
DeserializeRead.ReadHiveCharResults readHiveCharResults=deserializeRead.createReadHiveCharResults();
deserializeRead.readHiveChar(readHiveCharResults);
HiveChar hiveChar=readHiveCharResults.getHiveChar();
HiveChar expected=(HiveChar)object;
if (!hiveChar.equals(expected)) {
TestCase.fail("Char field mismatch (expected '" + expected + "' found '"+ hiveChar+ "')");
}
}
break;
case VARCHAR:
{
DeserializeRead.ReadHiveVarcharResults readHiveVarcharResults=deserializeRead.createReadHiveVarcharResults();
deserializeRead.readHiveVarchar(readHiveVarcharResults);
HiveVarchar hiveVarchar=readHiveVarcharResults.getHiveVarchar();
HiveVarchar expected=(HiveVarchar)object;
if (!hiveVarchar.equals(expected)) {
TestCase.fail("Varchar field mismatch (expected '" + expected + "' found '"+ hiveVarchar+ "')");
}
}
break;
case DECIMAL:
{
DeserializeRead.ReadDecimalResults readDecimalResults=deserializeRead.createReadDecimalResults();
deserializeRead.readHiveDecimal(readDecimalResults);
HiveDecimal value=readDecimalResults.getHiveDecimal();
if (value == null) {
TestCase.fail("Decimal field evaluated to NULL");
}
HiveDecimal expected=(HiveDecimal)object;
if (!value.equals(expected)) {
DecimalTypeInfo decimalTypeInfo=(DecimalTypeInfo)primitiveTypeInfo;
int precision=decimalTypeInfo.getPrecision();
int scale=decimalTypeInfo.getScale();
TestCase.fail("Decimal field mismatch (expected " + expected.toString() + " found "+ value.toString()+ ") precision "+ precision+ ", scale "+ scale);
}
}
break;
case DATE:
{
DeserializeRead.ReadDateResults readDateResults=deserializeRead.createReadDateResults();
deserializeRead.readDate(readDateResults);
Date value=readDateResults.getDate();
Date expected=(Date)object;
if (!value.equals(expected)) {
TestCase.fail("Date field mismatch (expected " + expected.toString() + " found "+ value.toString()+ ")");
}
}
break;
case TIMESTAMP:
{
DeserializeRead.ReadTimestampResults readTimestampResults=deserializeRead.createReadTimestampResults();
deserializeRead.readTimestamp(readTimestampResults);
Timestamp value=readTimestampResults.getTimestamp();
Timestamp expected=(Timestamp)object;
if (!value.equals(expected)) {
TestCase.fail("Timestamp field mismatch (expected " + expected.toString() + " found "+ value.toString()+ ")");
}
}
break;
case INTERVAL_YEAR_MONTH:
{
DeserializeRead.ReadIntervalYearMonthResults readIntervalYearMonthResults=deserializeRead.createReadIntervalYearMonthResults();
deserializeRead.readIntervalYearMonth(readIntervalYearMonthResults);
HiveIntervalYearMonth value=readIntervalYearMonthResults.getHiveIntervalYearMonth();
HiveIntervalYearMonth expected=(HiveIntervalYearMonth)object;
if (!value.equals(expected)) {
TestCase.fail("HiveIntervalYearMonth field mismatch (expected " + expected.toString() + " found "+ value.toString()+ ")");
}
}
break;
case INTERVAL_DAY_TIME:
{
DeserializeRead.ReadIntervalDayTimeResults readIntervalDayTimeResults=deserializeRead.createReadIntervalDayTimeResults();
deserializeRead.readIntervalDayTime(readIntervalDayTimeResults);
HiveIntervalDayTime value=readIntervalDayTimeResults.getHiveIntervalDayTime();
HiveIntervalDayTime expected=(HiveIntervalDayTime)object;
if (!value.equals(expected)) {
TestCase.fail("HiveIntervalDayTime field mismatch (expected " + expected.toString() + " found "+ value.toString()+ ")");
}
}
break;
case BINARY:
{
DeserializeRead.ReadBinaryResults readBinaryResults=deserializeRead.createReadBinaryResults();
deserializeRead.readBinary(readBinaryResults);
byte[] byteArray=Arrays.copyOfRange(readBinaryResults.bytes,readBinaryResults.start,readBinaryResults.start + readBinaryResults.length);
byte[] expected=(byte[])object;
if (byteArray.length != expected.length) {
TestCase.fail("Byte Array field mismatch (expected " + expected + " found "+ byteArray+ ")");
}
for (int b=0; b < byteArray.length; b++) {
if (byteArray[b] != expected[b]) {
TestCase.fail("Byte Array field mismatch (expected " + expected + " found "+ byteArray+ ")");
}
}
}
break;
default :
throw new Error("Unknown primitive category " + primitiveTypeInfo.getPrimitiveCategory());
}
}
