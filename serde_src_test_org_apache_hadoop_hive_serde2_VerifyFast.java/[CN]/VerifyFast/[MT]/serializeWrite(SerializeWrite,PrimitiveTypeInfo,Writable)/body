{
  if (writable == null) {
    serializeWrite.writeNull();
    return;
  }
switch (primitiveTypeInfo.getPrimitiveCategory()) {
case BOOLEAN:
{
      boolean value=((BooleanWritable)writable).get();
      serializeWrite.writeBoolean(value);
    }
  break;
case BYTE:
{
  byte value=((ByteWritable)writable).get();
  serializeWrite.writeByte(value);
}
break;
case SHORT:
{
short value=((ShortWritable)writable).get();
serializeWrite.writeShort(value);
}
break;
case INT:
{
int value=((IntWritable)writable).get();
serializeWrite.writeInt(value);
}
break;
case LONG:
{
long value=((LongWritable)writable).get();
serializeWrite.writeLong(value);
}
break;
case FLOAT:
{
float value=((FloatWritable)writable).get();
serializeWrite.writeFloat(value);
}
break;
case DOUBLE:
{
double value=((DoubleWritable)writable).get();
serializeWrite.writeDouble(value);
}
break;
case STRING:
{
Text value=(Text)writable;
byte[] stringBytes=value.getBytes();
int stringLength=stringBytes.length;
serializeWrite.writeString(stringBytes,0,stringLength);
}
break;
case CHAR:
{
HiveChar value=((HiveCharWritable)writable).getHiveChar();
serializeWrite.writeHiveChar(value);
}
break;
case VARCHAR:
{
HiveVarchar value=((HiveVarcharWritable)writable).getHiveVarchar();
serializeWrite.writeHiveVarchar(value);
}
break;
case DECIMAL:
{
HiveDecimal value=((HiveDecimalWritable)writable).getHiveDecimal();
DecimalTypeInfo decTypeInfo=(DecimalTypeInfo)primitiveTypeInfo;
serializeWrite.writeHiveDecimal(value,decTypeInfo.scale());
}
break;
case DATE:
{
Date value=((DateWritable)writable).get();
serializeWrite.writeDate(value);
}
break;
case TIMESTAMP:
{
Timestamp value=((TimestampWritable)writable).getTimestamp();
serializeWrite.writeTimestamp(value);
}
break;
case INTERVAL_YEAR_MONTH:
{
HiveIntervalYearMonth value=((HiveIntervalYearMonthWritable)writable).getHiveIntervalYearMonth();
serializeWrite.writeHiveIntervalYearMonth(value);
}
break;
case INTERVAL_DAY_TIME:
{
HiveIntervalDayTime value=((HiveIntervalDayTimeWritable)writable).getHiveIntervalDayTime();
serializeWrite.writeHiveIntervalDayTime(value);
}
break;
case BINARY:
{
BytesWritable byteWritable=(BytesWritable)writable;
byte[] binaryBytes=byteWritable.getBytes();
int length=byteWritable.getLength();
serializeWrite.writeBinary(binaryBytes,0,length);
}
break;
default :
throw new Error("Unknown primitive category " + primitiveTypeInfo.getPrimitiveCategory().name());
}
}
