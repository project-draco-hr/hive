{
  if (batch.size == batch.getMaxSize()) {
    writer.addRowBatch(batch);
    batch.reset();
  }
  int row=batch.size++;
  LongColumnVector aColumn=(LongColumnVector)batch.cols[0];
  BytesColumnVector bColumn=(BytesColumnVector)batch.cols[1];
  LongColumnVector cColumn=(LongColumnVector)batch.cols[2];
  ListColumnVector dColumn=(ListColumnVector)batch.cols[3];
  StructColumnVector dStruct=(StructColumnVector)dColumn.child;
  LongColumnVector dInt=(LongColumnVector)dStruct.fields[0];
  if (a == null) {
    aColumn.noNulls=false;
    aColumn.isNull[row]=true;
  }
 else {
    aColumn.vector[row]=a;
  }
  if (b == null) {
    bColumn.noNulls=false;
    bColumn.isNull[row]=true;
  }
 else {
    bColumn.setVal(row,b.getBytes());
  }
  if (c == null) {
    cColumn.noNulls=false;
    cColumn.isNull[row]=true;
  }
 else {
    cColumn.vector[row]=c ? 1 : 0;
  }
  if (d == null) {
    dColumn.noNulls=false;
    dColumn.isNull[row]=true;
  }
 else {
    dColumn.offsets[row]=dColumn.childCount;
    dColumn.lengths[row]=d.length;
    dColumn.childCount+=d.length;
    for (int e=0; e < d.length; ++e) {
      dInt.vector[(int)dColumn.offsets[row] + e]=d[e];
    }
  }
}
