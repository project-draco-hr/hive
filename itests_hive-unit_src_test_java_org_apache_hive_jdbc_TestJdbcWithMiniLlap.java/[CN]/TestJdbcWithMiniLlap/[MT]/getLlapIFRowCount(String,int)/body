{
  String url=miniHS2.getJdbcURL();
  String user=System.getProperty("user.name");
  String pwd=user;
  LlapRowInputFormat inputFormat=new LlapRowInputFormat();
  JobConf job=new JobConf(conf);
  job.set(LlapBaseInputFormat.URL_KEY,url);
  job.set(LlapBaseInputFormat.USER_KEY,user);
  job.set(LlapBaseInputFormat.PWD_KEY,pwd);
  job.set(LlapBaseInputFormat.QUERY_KEY,query);
  InputSplit[] splits=inputFormat.getSplits(job,numSplits);
  assertTrue(splits.length > 0);
  boolean first=true;
  int rowCount=0;
  for (  InputSplit split : splits) {
    System.out.println("Processing split " + split.getLocations());
    int numColumns=2;
    RecordReader<NullWritable,Row> reader=inputFormat.getRecordReader(split,job,null);
    if (reader instanceof LlapRowRecordReader && first) {
      Schema schema=((LlapRowRecordReader)reader).getSchema();
      System.out.println("" + schema);
      assertEquals(numColumns,schema.getColumns().size());
    }
    if (first) {
      System.out.println("Results: ");
      System.out.println("");
      first=false;
    }
    Row row=reader.createValue();
    while (reader.next(NullWritable.get(),row)) {
      for (int idx=0; idx < numColumns; idx++) {
        if (idx > 0) {
          System.out.print(", ");
        }
        System.out.print(row.getValue(idx));
      }
      System.out.println("");
      ++rowCount;
    }
  }
  return rowCount;
}
