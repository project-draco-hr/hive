{
  for (int i=1; i < ast.getChildCount(); i++) {
    int explainOptions=ast.getChild(i).getType();
    if (explainOptions == HiveParser.KW_FORMATTED) {
      config.setFormatted(true);
    }
 else     if (explainOptions == HiveParser.KW_EXTENDED) {
      config.setExtended(true);
    }
 else     if (explainOptions == HiveParser.KW_DEPENDENCY) {
      config.setDependency(true);
    }
 else     if (explainOptions == HiveParser.KW_LOGICAL) {
      config.setLogical(true);
    }
 else     if (explainOptions == HiveParser.KW_AUTHORIZATION) {
      config.setAuthorize(true);
    }
 else     if (explainOptions == HiveParser.KW_ANALYZE) {
      config.setAnalyze(AnalyzeState.RUNNING);
      config.setExplainRootPath(ctx.getMRTmpPath());
    }
  }
  ctx.setExplainConfig(config);
  ASTNode input=(ASTNode)ast.getChild(0);
  if (config.getAnalyze() == AnalyzeState.RUNNING) {
    String query=ctx.getTokenRewriteStream().toString(input.getTokenStartIndex(),input.getTokenStopIndex());
    LOG.info("Explain analyze (running phase) for query " + query);
    Context runCtx=null;
    try {
      runCtx=new Context(conf);
      runCtx.setExplainConfig(config);
      Driver driver=new Driver(conf,runCtx);
      driver.run(query);
      while (driver.getResults(new ArrayList<String>())) {
      }
      config.setOpIdToRuntimeNumRows(aggregateStats(config.getExplainRootPath()));
    }
 catch (    IOException e1) {
      throw new SemanticException(e1);
    }
catch (    CommandNeedRetryException e) {
      throw new SemanticException(e);
    }
    ctx.resetOpContext();
    ctx.resetStream();
    TaskFactory.resetId();
    LOG.info("Explain analyze (analyzing phase) for query " + query);
    config.setAnalyze(AnalyzeState.ANALYZING);
  }
  BaseSemanticAnalyzer sem=SemanticAnalyzerFactory.get(queryState,input);
  sem.analyze(input,ctx);
  sem.validate();
  ctx.setResFile(ctx.getLocalTmpPath());
  List<Task<? extends Serializable>> tasks=sem.getAllRootTasks();
  if (tasks == null) {
    tasks=Collections.emptyList();
  }
  FetchTask fetchTask=sem.getFetchTask();
  if (fetchTask != null) {
    fetchTask.getWork().initializeForFetch(ctx.getOpContext());
  }
  ParseContext pCtx=null;
  if (sem instanceof SemanticAnalyzer) {
    pCtx=((SemanticAnalyzer)sem).getParseContext();
  }
  config.setUserLevelExplain(!config.isExtended() && !config.isFormatted() && !config.isDependency()&& !config.isLogical()&& !config.isAuthorize()&& (HiveConf.getBoolVar(ctx.getConf(),HiveConf.ConfVars.HIVE_EXPLAIN_USER) && HiveConf.getVar(conf,HiveConf.ConfVars.HIVE_EXECUTION_ENGINE).equals("tez")));
  ExplainWork work=new ExplainWork(ctx.getResFile(),pCtx,tasks,fetchTask,sem,config,ctx.getCboInfo());
  work.setAppendTaskType(HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVEEXPLAINDEPENDENCYAPPENDTASKTYPES));
  ExplainTask explTask=(ExplainTask)TaskFactory.get(work,conf);
  fieldList=explTask.getResultSchema();
  rootTasks.add(explTask);
}
