{
  ctx.setExplain(true);
  BaseSemanticAnalyzer sem=SemanticAnalyzerFactory.get(conf,(ASTNode)ast.getChild(0));
  sem.analyze((ASTNode)ast.getChild(0),ctx);
  sem.validate();
  boolean extended=false;
  boolean formatted=false;
  if (ast.getChildCount() == 2) {
    int explainOptions=ast.getChild(1).getType();
    formatted=(explainOptions == HiveParser.KW_FORMATTED);
    extended=(explainOptions == HiveParser.KW_EXTENDED);
  }
  ctx.setResFile(new Path(ctx.getLocalTmpFileURI()));
  List<Task<? extends Serializable>> tasks=sem.getRootTasks();
  Task<? extends Serializable> fetchTask=sem.getFetchTask();
  if (tasks == null) {
    if (fetchTask != null) {
      tasks=new ArrayList<Task<? extends Serializable>>();
      tasks.add(fetchTask);
    }
  }
 else   if (fetchTask != null) {
    tasks.add(fetchTask);
  }
  Task<? extends Serializable> explTask=TaskFactory.get(new ExplainWork(ctx.getResFile().toString(),tasks,((ASTNode)ast.getChild(0)).toStringTree(),extended,formatted),conf);
  fieldList=explTask.getResultSchema();
  rootTasks.add(explTask);
}
