{
  metrics.startScope(scopeName);
  final MetricsScope fooScope=metrics.getScope(scopeName);
  expectIOE(new Callable<Long>(){
    @Override public Long call() throws Exception {
      Long num=fooScope.getNumCounter();
      return num;
    }
  }
);
  expectIOE(new Callable<Long>(){
    @Override public Long call() throws Exception {
      Long time=fooScope.getTimeCounter();
      return time;
    }
  }
);
  expectIOE(new Callable<Void>(){
    @Override public Void call() throws Exception {
      fooScope.open();
      return null;
    }
  }
);
  assertSame(fooScope,metrics.getScope(scopeName));
  Thread.sleep(periodMs + 1);
  metrics.endScope(scopeName);
  expectIOE(new Callable<Void>(){
    @Override public Void call() throws Exception {
      metrics.endScope(scopeName);
      return null;
    }
  }
);
  assertEquals(Long.valueOf(1),fooScope.getNumCounter());
  final long t1=fooScope.getTimeCounter().longValue();
  assertTrue(t1 > periodMs);
  assertSame(fooScope,metrics.getScope(scopeName));
  metrics.startScope(scopeName);
  expectIOE(new Callable<Void>(){
    @Override public Void call() throws Exception {
      metrics.startScope(scopeName);
      return null;
    }
  }
);
  assertEquals(Long.valueOf(1),fooScope.getNumCounter());
  assertEquals(t1,fooScope.getTimeCounter().longValue());
  assertSame(fooScope,metrics.getScope(scopeName));
  Thread.sleep(periodMs + 1);
  fooScope.reopen();
  assertEquals(Long.valueOf(2),fooScope.getNumCounter());
  assertTrue(fooScope.getTimeCounter().longValue() > 2 * periodMs);
  Thread.sleep(periodMs + 1);
  fooScope.close();
  assertEquals(Long.valueOf(3),fooScope.getNumCounter());
  assertTrue(fooScope.getTimeCounter().longValue() > 3 * periodMs);
  Double avgT=(Double)metrics.get("foo.avg_t");
  assertTrue(avgT.doubleValue() > periodMs);
}
