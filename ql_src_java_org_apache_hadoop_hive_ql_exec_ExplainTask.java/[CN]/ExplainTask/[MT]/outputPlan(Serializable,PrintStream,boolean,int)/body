{
  Annotation note=work.getClass().getAnnotation(explain.class);
  if (note instanceof explain) {
    explain xpl_note=(explain)note;
    if (extended || xpl_note.normalExplain()) {
      out.print(indentString(indent));
      out.println(xpl_note.displayName());
    }
  }
  if (work instanceof Operator) {
    Operator<? extends Serializable> operator=(Operator<? extends Serializable>)work;
    if (operator.getConf() != null) {
      outputPlan(operator.getConf(),out,extended,indent);
    }
    if (operator.getChildOperators() != null) {
      for (      Operator<? extends Serializable> op : operator.getChildOperators()) {
        outputPlan(op,out,extended,indent + 2);
      }
    }
    return;
  }
  Method[] methods=work.getClass().getMethods();
  Arrays.sort(methods,new MethodComparator());
  for (  Method m : methods) {
    int prop_indents=indent + 2;
    note=m.getAnnotation(explain.class);
    if (note instanceof explain) {
      explain xpl_note=(explain)note;
      if (extended || xpl_note.normalExplain()) {
        Object val=m.invoke(work);
        if (val == null) {
          continue;
        }
        String header=null;
        if (!xpl_note.displayName().equals("")) {
          header=indentString(prop_indents) + xpl_note.displayName() + ":";
        }
 else {
          prop_indents=indent;
          header=indentString(prop_indents);
        }
        if (isPrintable(val)) {
          out.printf("%s ",header);
          out.println(val);
          continue;
        }
        try {
          Map<?,?> mp=(Map<?,?>)val;
          outputMap(mp,header,out,extended,prop_indents + 2);
          continue;
        }
 catch (        ClassCastException ce) {
        }
        try {
          List<?> l=(List<?>)val;
          outputList(l,header,out,extended,prop_indents + 2);
          continue;
        }
 catch (        ClassCastException ce) {
        }
        try {
          Serializable s=(Serializable)val;
          out.println(header);
          outputPlan(s,out,extended,prop_indents + 2);
          continue;
        }
 catch (        ClassCastException ce) {
        }
      }
    }
  }
}
