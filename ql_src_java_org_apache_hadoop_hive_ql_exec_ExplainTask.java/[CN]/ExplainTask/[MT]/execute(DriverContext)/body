{
  PrintStream out=null;
  try {
    Path resFile=work.getResFile();
    OutputStream outS=resFile.getFileSystem(conf).create(resFile);
    out=new PrintStream(outS);
    if (work.isLogical()) {
      JSONObject jsonLogicalPlan=getJSONLogicalPlan(out,work);
      if (work.isFormatted()) {
        out.print(jsonLogicalPlan);
      }
    }
 else     if (work.isAuthorize()) {
      JSONObject jsonAuth=collectAuthRelatedEntities(out,work);
      if (work.isFormatted()) {
        out.print(jsonAuth);
      }
    }
 else     if (work.getDependency()) {
      JSONObject jsonDependencies=getJSONDependencies(work);
      out.print(jsonDependencies);
    }
 else {
      if (work.getDependency()) {
        JSONObject jsonDependencies=getJSONDependencies(work);
        out.print(jsonDependencies);
      }
 else {
        if (work.isUserLevelExplain()) {
          JsonParser jsonParser=JsonParserFactory.getParser(conf);
          if (jsonParser != null) {
            work.setFormatted(true);
            JSONObject jsonPlan=getJSONPlan(out,work);
            if (work.getCboInfo() != null) {
              jsonPlan.put("cboInfo",work.getCboInfo());
            }
            jsonParser.print(jsonPlan,out);
          }
 else {
            throw new SemanticException("Hive UserLevelExplain only supports tez engine right now.");
          }
        }
 else {
          JSONObject jsonPlan=getJSONPlan(out,work);
          if (work.isFormatted()) {
            out.print(jsonPlan);
          }
        }
      }
    }
    out.close();
    out=null;
    return (0);
  }
 catch (  Exception e) {
    console.printError("Failed with exception " + e.getMessage(),"\n" + StringUtils.stringifyException(e));
    return (1);
  }
 finally {
    IOUtils.closeStream(out);
  }
}
