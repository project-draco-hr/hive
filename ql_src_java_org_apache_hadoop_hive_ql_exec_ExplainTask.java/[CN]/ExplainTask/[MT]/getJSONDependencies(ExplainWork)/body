{
  assert(work.getDependency());
  JSONObject outJSONObject=new JSONObject();
  List<Map<String,String>> inputTableInfo=new ArrayList<Map<String,String>>();
  Set<String> inputPartitions=new HashSet<String>();
  Set<String> inputTables=new HashSet<String>();
  Table table=null;
  for (  ReadEntity input : work.getInputs()) {
switch (input.getType()) {
case TABLE:
      table=input.getTable();
    break;
case PARTITION:
  inputPartitions.add(input.getPartition().getCompleteName());
table=input.getPartition().getTable();
break;
default :
table=null;
break;
}
if (table != null && !inputTables.contains(table.getCompleteName())) {
Map<String,String> tableInfo=new HashMap<String,String>();
tableInfo.put("tablename",table.getCompleteName());
tableInfo.put("tabletype",table.getTableType().toString());
inputTableInfo.add(tableInfo);
inputTables.add(table.getCompleteName());
}
}
outJSONObject.put("input_tables",inputTableInfo);
outJSONObject.put("input_partitions",inputPartitions);
return outJSONObject;
}
