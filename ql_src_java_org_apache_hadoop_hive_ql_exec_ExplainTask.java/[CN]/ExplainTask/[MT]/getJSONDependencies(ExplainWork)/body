{
  assert(work.getDependency());
  JSONObject outJSONObject=new JSONObject();
  List<Map<String,String>> inputTableInfo=new ArrayList<Map<String,String>>();
  List<Map<String,String>> inputPartitionInfo=new ArrayList<Map<String,String>>();
  for (  ReadEntity input : work.getInputs()) {
switch (input.getType()) {
case TABLE:
      Table table=input.getTable();
    Map<String,String> tableInfo=new LinkedHashMap<String,String>();
  tableInfo.put("tablename",table.getCompleteName());
tableInfo.put("tabletype",table.getTableType().toString());
if ((input.getParents() != null) && (!input.getParents().isEmpty())) {
tableInfo.put("tableParents",input.getParents().toString());
}
inputTableInfo.add(tableInfo);
break;
case PARTITION:
Map<String,String> partitionInfo=new HashMap<String,String>();
partitionInfo.put("partitionName",input.getPartition().getCompleteName());
if ((input.getParents() != null) && (!input.getParents().isEmpty())) {
partitionInfo.put("partitionParents",input.getParents().toString());
}
inputPartitionInfo.add(partitionInfo);
break;
default :
break;
}
}
outJSONObject.put("input_tables",inputTableInfo);
outJSONObject.put("input_partitions",inputPartitionInfo);
return outJSONObject;
}
