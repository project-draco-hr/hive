{
  Annotation note=work.getClass().getAnnotation(Explain.class);
  String keyJSONObject=null;
  if (note instanceof Explain) {
    Explain xpl_note=(Explain)note;
    if (extended || xpl_note.normalExplain()) {
      keyJSONObject=xpl_note.displayName();
      if (out != null) {
        out.print(indentString(indent));
        out.println(xpl_note.displayName());
      }
    }
  }
  JSONObject json=jsonOutput ? new JSONObject() : null;
  if (work instanceof Operator) {
    Operator<? extends OperatorDesc> operator=(Operator<? extends OperatorDesc>)work;
    if (operator.getConf() != null) {
      JSONObject jsonOut=outputPlan(operator.getConf(),out,extended,jsonOutput,jsonOutput ? 0 : indent);
      if (jsonOutput) {
        json.put(operator.getOperatorId(),jsonOut);
      }
    }
    if (operator.getChildOperators() != null) {
      for (      Operator<? extends OperatorDesc> op : operator.getChildOperators()) {
        JSONObject jsonOut=outputPlan(op,out,extended,jsonOutput,jsonOutput ? 0 : indent + 2);
        if (jsonOutput) {
          json.put(operator.getOperatorId(),jsonOut);
        }
      }
    }
    if (jsonOutput) {
      if (keyJSONObject != null) {
        JSONObject ret=new JSONObject();
        ret.put(keyJSONObject,json);
        return ret;
      }
      return json;
    }
    return null;
  }
  Method[] methods=work.getClass().getMethods();
  Arrays.sort(methods,new MethodComparator());
  for (  Method m : methods) {
    int prop_indents=jsonOutput ? 0 : indent + 2;
    note=m.getAnnotation(Explain.class);
    if (note instanceof Explain) {
      Explain xpl_note=(Explain)note;
      if (extended || xpl_note.normalExplain()) {
        Object val=null;
        try {
          val=m.invoke(work);
        }
 catch (        InvocationTargetException ex) {
          val=null;
        }
        if (val == null) {
          continue;
        }
        String header=null;
        if (!xpl_note.displayName().equals("")) {
          header=indentString(prop_indents) + xpl_note.displayName() + ":";
        }
 else {
          prop_indents=indent;
          header=indentString(prop_indents);
        }
        if (isPrintable(val)) {
          if (out != null) {
            out.printf("%s ",header);
            out.println(val);
          }
          if (jsonOutput) {
            json.put(header,val.toString());
          }
          continue;
        }
        try {
          Map<?,?> mp=(Map<?,?>)val;
          JSONObject jsonOut=outputMap(mp,header,out,extended,jsonOutput,jsonOutput ? 0 : prop_indents + 2);
          if (jsonOutput) {
            json.put(header,jsonOut);
          }
          continue;
        }
 catch (        ClassCastException ce) {
        }
        try {
          List<?> l=(List<?>)val;
          JSONArray jsonOut=outputList(l,header,out,extended,jsonOutput,jsonOutput ? 0 : prop_indents + 2);
          if (jsonOutput) {
            json.put(header,jsonOut);
          }
          continue;
        }
 catch (        ClassCastException ce) {
        }
        try {
          Serializable s=(Serializable)val;
          if (out != null) {
            out.println(header);
          }
          JSONObject jsonOut=outputPlan(s,out,extended,jsonOutput,jsonOutput ? 0 : prop_indents + 2);
          if (jsonOutput) {
            json.put(header,jsonOut);
          }
          continue;
        }
 catch (        ClassCastException ce) {
        }
      }
    }
  }
  if (jsonOutput) {
    if (keyJSONObject != null) {
      JSONObject ret=new JSONObject();
      ret.put(keyJSONObject,json);
      return ret;
    }
    return json;
  }
  return null;
}
