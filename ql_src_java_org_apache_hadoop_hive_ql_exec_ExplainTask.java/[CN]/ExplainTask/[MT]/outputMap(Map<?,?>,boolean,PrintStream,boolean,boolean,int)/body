{
  TreeMap<Object,Object> tree=new TreeMap<Object,Object>();
  tree.putAll(mp);
  JSONObject json=jsonOutput ? new JSONObject() : null;
  if (out != null && hasHeader && !mp.isEmpty()) {
    out.println();
  }
  for (  Entry<?,?> ent : tree.entrySet()) {
    if (out != null) {
      out.print(indentString(indent));
      out.printf("%s ",ent.getKey().toString());
    }
    if (isPrintable(ent.getValue())) {
      if (out != null) {
        out.print(ent.getValue());
        out.println();
      }
      if (jsonOutput) {
        json.put(ent.getKey().toString(),ent.getValue().toString());
      }
    }
 else     if (ent.getValue() instanceof List) {
      if (ent.getValue() != null && !((List<?>)ent.getValue()).isEmpty() && ((List<?>)ent.getValue()).get(0) != null && ((List<?>)ent.getValue()).get(0) instanceof TezWork.Dependency) {
        if (out != null) {
          boolean isFirst=true;
          for (          TezWork.Dependency dep : (List<TezWork.Dependency>)ent.getValue()) {
            if (!isFirst) {
              out.print(", ");
            }
 else {
              out.print("<- ");
              isFirst=false;
            }
            out.print(dep.getName());
            out.print(" (");
            out.print(dep.getType());
            out.print(")");
          }
          out.println();
        }
        if (jsonOutput) {
          for (          TezWork.Dependency dep : (List<TezWork.Dependency>)ent.getValue()) {
            JSONObject jsonDep=new JSONObject();
            jsonDep.put("parent",dep.getName());
            jsonDep.put("type",dep.getType());
            json.accumulate(ent.getKey().toString(),jsonDep);
          }
        }
      }
 else       if (ent.getValue() != null && !((List<?>)ent.getValue()).isEmpty() && ((List<?>)ent.getValue()).get(0) != null && ((List<?>)ent.getValue()).get(0) instanceof SparkWork.Dependency) {
        if (out != null) {
          boolean isFirst=true;
          for (          SparkWork.Dependency dep : (List<SparkWork.Dependency>)ent.getValue()) {
            if (!isFirst) {
              out.print(", ");
            }
 else {
              out.print("<- ");
              isFirst=false;
            }
            out.print(dep.getName());
            out.print(" (");
            out.print(dep.getShuffleType());
            out.print(", ");
            out.print(dep.getNumPartitions());
            out.print(")");
          }
          out.println();
        }
        if (jsonOutput) {
          for (          SparkWork.Dependency dep : (List<SparkWork.Dependency>)ent.getValue()) {
            JSONObject jsonDep=new JSONObject();
            jsonDep.put("parent",dep.getName());
            jsonDep.put("type",dep.getShuffleType());
            jsonDep.put("partitions",dep.getNumPartitions());
            json.accumulate(ent.getKey().toString(),jsonDep);
          }
        }
      }
 else {
        if (out != null) {
          out.print(ent.getValue().toString());
          out.println();
        }
        if (jsonOutput) {
          json.put(ent.getKey().toString(),ent.getValue().toString());
        }
      }
    }
 else     if (ent.getValue() instanceof Map) {
      if (out != null) {
        out.print(ent.getValue().toString());
        out.println();
      }
      if (jsonOutput) {
        json.put(ent.getKey().toString(),ent.getValue().toString());
      }
    }
 else     if (ent.getValue() instanceof Serializable) {
      if (out != null) {
        out.println();
      }
      JSONObject jsonOut=outputPlan((Serializable)ent.getValue(),out,extended,jsonOutput,jsonOutput ? 0 : indent + 2);
      if (jsonOutput) {
        json.put(ent.getKey().toString(),jsonOut);
      }
    }
 else {
      if (out != null) {
        out.println();
      }
    }
  }
  return jsonOutput ? json : null;
}
