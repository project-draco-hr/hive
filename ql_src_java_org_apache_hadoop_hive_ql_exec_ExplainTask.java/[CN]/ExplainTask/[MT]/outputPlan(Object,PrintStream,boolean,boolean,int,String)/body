{
  Annotation note=AnnotationUtils.getAnnotation(work.getClass(),Explain.class);
  String keyJSONObject=null;
  if (note instanceof Explain) {
    Explain xpl_note=(Explain)note;
    boolean invokeFlag=false;
    if (this.work != null && this.work.isUserLevelExplain()) {
      invokeFlag=Level.USER.in(xpl_note.explainLevels());
    }
 else {
      if (extended) {
        invokeFlag=Level.EXTENDED.in(xpl_note.explainLevels());
      }
 else {
        invokeFlag=Level.DEFAULT.in(xpl_note.explainLevels());
      }
    }
    if (invokeFlag) {
      keyJSONObject=xpl_note.displayName();
      if (out != null) {
        out.print(indentString(indent));
        if (appendToHeader != null && !appendToHeader.isEmpty()) {
          out.println(xpl_note.displayName() + appendToHeader);
        }
 else {
          out.println(xpl_note.displayName());
        }
      }
    }
  }
  JSONObject json=jsonOutput ? new JSONObject() : null;
  if (work instanceof Operator) {
    Operator<? extends OperatorDesc> operator=(Operator<? extends OperatorDesc>)work;
    if (operator.getConf() != null) {
      String appender=isLogical ? " (" + operator.getOperatorId() + ")" : "";
      JSONObject jsonOut=outputPlan(operator.getConf(),out,extended,jsonOutput,jsonOutput ? 0 : indent,appender);
      if (this.work != null && this.work.isUserLevelExplain()) {
        if (jsonOut != null && jsonOut.length() > 0) {
          ((JSONObject)jsonOut.get(JSONObject.getNames(jsonOut)[0])).put("OperatorId:",operator.getOperatorId());
        }
      }
      if (jsonOutput) {
        json=jsonOut;
      }
    }
    if (!visitedOps.contains(operator) || !isLogical) {
      visitedOps.add(operator);
      if (operator.getChildOperators() != null) {
        int cindent=jsonOutput ? 0 : indent + 2;
        for (        Operator<? extends OperatorDesc> op : operator.getChildOperators()) {
          JSONObject jsonOut=outputPlan(op,out,extended,jsonOutput,cindent);
          if (jsonOutput) {
            ((JSONObject)json.get(JSONObject.getNames(json)[0])).accumulate("children",jsonOut);
          }
        }
      }
    }
    if (jsonOutput) {
      return json;
    }
    return null;
  }
  Method[] methods=work.getClass().getMethods();
  Arrays.sort(methods,new MethodComparator());
  for (  Method m : methods) {
    int prop_indents=jsonOutput ? 0 : indent + 2;
    note=AnnotationUtils.getAnnotation(m,Explain.class);
    if (note instanceof Explain) {
      Explain xpl_note=(Explain)note;
      boolean invokeFlag=false;
      if (this.work != null && this.work.isUserLevelExplain()) {
        invokeFlag=Level.USER.in(xpl_note.explainLevels());
      }
 else {
        if (extended) {
          invokeFlag=Level.EXTENDED.in(xpl_note.explainLevels());
        }
 else {
          invokeFlag=Level.DEFAULT.in(xpl_note.explainLevels());
        }
      }
      if (invokeFlag) {
        Object val=null;
        try {
          val=m.invoke(work);
        }
 catch (        InvocationTargetException ex) {
          val=null;
        }
        if (val == null) {
          continue;
        }
        String header=null;
        boolean skipHeader=xpl_note.skipHeader();
        boolean emptyHeader=false;
        if (!xpl_note.displayName().equals("")) {
          header=indentString(prop_indents) + xpl_note.displayName() + ":";
        }
 else {
          emptyHeader=true;
          prop_indents=indent;
          header=indentString(prop_indents);
        }
        if (isPrintable(val)) {
          if (out != null && shouldPrint(xpl_note,val)) {
            if (!skipHeader) {
              out.print(header);
              out.print(" ");
            }
            out.println(val);
          }
          if (jsonOutput && shouldPrint(xpl_note,val)) {
            json.put(header,val.toString());
          }
          continue;
        }
        int ind=0;
        if (!jsonOutput) {
          if (!skipHeader) {
            ind=prop_indents + 2;
          }
 else {
            ind=indent;
          }
        }
        if (val instanceof Map) {
          Map<?,?> mp=(Map<?,?>)val;
          if (out != null && !skipHeader && mp != null && !mp.isEmpty()) {
            out.print(header);
          }
          JSONObject jsonOut=outputMap(mp,!skipHeader && !emptyHeader,out,extended,jsonOutput,ind);
          if (jsonOutput && !mp.isEmpty()) {
            json.put(header,jsonOut);
          }
          continue;
        }
        if (val instanceof List || val instanceof Set) {
          List l=val instanceof List ? (List)val : new ArrayList((Set)val);
          if (out != null && !skipHeader && l != null && !l.isEmpty()) {
            out.print(header);
          }
          JSONArray jsonOut=outputList(l,out,!skipHeader && !emptyHeader,extended,jsonOutput,ind);
          if (jsonOutput && !l.isEmpty()) {
            json.put(header,jsonOut);
          }
          continue;
        }
        try {
          if (!skipHeader && out != null) {
            out.println(header);
          }
          JSONObject jsonOut=outputPlan(val,out,extended,jsonOutput,ind);
          if (jsonOutput) {
            if (!skipHeader) {
              json.put(header,jsonOut);
            }
 else {
              for (              String k : JSONObject.getNames(jsonOut)) {
                json.put(k,jsonOut.get(k));
              }
            }
          }
          continue;
        }
 catch (        ClassCastException ce) {
        }
      }
    }
  }
  if (jsonOutput) {
    if (keyJSONObject != null) {
      JSONObject ret=new JSONObject();
      ret.put(keyJSONObject,json);
      return ret;
    }
    return json;
  }
  return null;
}
