{
  Runnable runnable;
  if (conf.containsKey(ClientUtils.CONF_KEY_IN_PROCESS)) {
    LOG.warn("!!!! Running remote driver in-process. !!!!");
    runnable=new Runnable(){
      @Override public void run(){
        List<String> args=Lists.newArrayList();
        args.add("--remote");
        args.add(String.format("%s/%s",SparkClientFactory.akkaUrl,name));
        args.add("--secret");
        args.add(SparkClientFactory.secret);
        for (        Map.Entry<String,String> e : conf.entrySet()) {
          args.add("--conf");
          args.add(String.format("%s=%s",e.getKey(),e.getValue()));
        }
        try {
          RemoteDriver.main(args.toArray(new String[args.size()]));
        }
 catch (        Exception e) {
          LOG.error("Error running driver.",e);
        }
      }
    }
;
  }
 else {
    File properties=File.createTempFile("spark-submit.",".properties");
    if (!properties.setReadable(false) || !properties.setReadable(true,true)) {
      throw new IOException("Cannot change permissions of job properties file.");
    }
    Properties allProps=new Properties();
    for (    Map.Entry<String,String> e : conf.entrySet()) {
      allProps.put(e.getKey(),e.getValue());
    }
    allProps.put(ClientUtils.CONF_KEY_SECRET,SparkClientFactory.secret);
    Writer writer=new OutputStreamWriter(new FileOutputStream(properties),Charsets.UTF_8);
    try {
      allProps.store(writer,"Spark Context configuration");
    }
  finally {
      writer.close();
    }
    String master=conf.get("spark.master");
    Preconditions.checkArgument(master != null,"spark.master is not defined.");
    List<String> argv=Lists.newArrayList();
    if (conf.get("spark.home") != null) {
      argv.add(new File(conf.get("spark.home"),"bin/spark-submit").getAbsolutePath());
    }
 else {
      LOG.info("No spark.home provided, calling SparkSubmit directly.");
      argv.add(new File(System.getProperty("java.home"),"bin/java").getAbsolutePath());
      if (master.startsWith("local") || master.startsWith("mesos") || master.endsWith("-client")|| master.startsWith("spark")) {
        String mem=conf.get("spark.driver.memory");
        if (mem != null) {
          argv.add("-Xms" + mem);
          argv.add("-Xmx" + mem);
        }
        String cp=conf.get("spark.driver.extraClassPath");
        if (cp != null) {
          argv.add("-classpath");
          argv.add(cp);
        }
        String libPath=conf.get("spark.driver.extraLibPath");
        if (libPath != null) {
          argv.add("-Djava.library.path=" + libPath);
        }
        String extra=conf.get("spark.driver.extraJavaOptions");
        if (extra != null) {
          for (          String opt : extra.split("[ ]")) {
            if (!opt.trim().isEmpty()) {
              argv.add(opt.trim());
            }
          }
        }
      }
      argv.add("org.apache.spark.deploy.SparkSubmit");
    }
    argv.add("--properties-file");
    argv.add(properties.getAbsolutePath());
    argv.add("--class");
    argv.add(RemoteDriver.class.getName());
    String jar="spark-internal";
    if (SparkContext.jarOfClass(this.getClass()).isDefined()) {
      jar=SparkContext.jarOfClass(this.getClass()).get();
    }
    argv.add(jar);
    argv.add("--remote");
    argv.add(String.format("%s/%s",SparkClientFactory.akkaUrl,name));
    LOG.debug("Running client driver with argv: {}",Joiner.on(" ").join(argv));
    ProcessBuilder pb=new ProcessBuilder(argv.toArray(new String[argv.size()]));
    pb.environment().clear();
    final Process child=pb.start();
    int childId=childIdGenerator.incrementAndGet();
    redirect("stdout-redir-" + childId,child.getInputStream(),System.out);
    redirect("stderr-redir-" + childId,child.getErrorStream(),System.err);
    runnable=new Runnable(){
      @Override public void run(){
        try {
          int exitCode=child.waitFor();
          if (exitCode != 0) {
            LOG.warn("Child process exited with code {}.",exitCode);
          }
        }
 catch (        Exception e) {
          LOG.warn("Exception while waiting for child process.",e);
        }
      }
    }
;
  }
  Thread thread=new Thread(runnable);
  thread.setDaemon(true);
  thread.setName("Driver");
  thread.start();
  return thread;
}
