{
  String detail=details.get(index++);
  if (!detail.startsWith("*")) {
    return null;
  }
  int i1=detail.indexOf(':');
  int i3=detail.lastIndexOf(':');
  int i2=detail.substring(0,i3).lastIndexOf(':');
  String exceptionClass=detail.substring(1,i1);
  String exceptionMessage=detail.substring(i1 + 1,i2);
  Throwable ex=newInstance(exceptionClass,exceptionMessage);
  int length=Integer.parseInt(detail.substring(i2 + 1,i3));
  int unique=Integer.parseInt(detail.substring(i3 + 1));
  int i=0;
  StackTraceElement[] trace=new StackTraceElement[length];
  for (; i <= unique; i++) {
    detail=details.get(index++);
    int j1=detail.indexOf(':');
    int j3=detail.lastIndexOf(':');
    int j2=detail.substring(0,j3).lastIndexOf(':');
    String className=detail.substring(0,j1);
    String methodName=detail.substring(j1 + 1,j2);
    String fileName=detail.substring(j2 + 1,j3);
    if (fileName.isEmpty()) {
      fileName=null;
    }
    int lineNumber=Integer.parseInt(detail.substring(j3 + 1));
    trace[i]=new StackTraceElement(className,methodName,fileName,lineNumber);
  }
  int common=trace.length - i;
  if (common > 0) {
    System.arraycopy(parent,parent.length - common,trace,trace.length - common,common);
  }
  if (details.size() > index) {
    ex.initCause(toStackTrace(details,trace,index));
  }
  ex.setStackTrace(trace);
  return ex;
}
