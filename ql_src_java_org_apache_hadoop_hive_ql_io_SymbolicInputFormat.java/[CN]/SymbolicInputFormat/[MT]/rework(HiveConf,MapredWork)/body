{
  Map<Path,PartitionDesc> pathToParts=work.getMapWork().getPathToPartitionInfo();
  List<Path> toRemovePaths=new ArrayList<>();
  Map<Path,PartitionDesc> toAddPathToPart=new HashMap<>();
  Map<Path,ArrayList<String>> pathToAliases=work.getMapWork().getPathToAliases();
  for (  Map.Entry<Path,PartitionDesc> pathPartEntry : pathToParts.entrySet()) {
    Path path=pathPartEntry.getKey();
    PartitionDesc partDesc=pathPartEntry.getValue();
    if (partDesc.getInputFileFormatClass().equals(SymlinkTextInputFormat.class)) {
      partDesc.setInputFileFormatClass(TextInputFormat.class);
      FileSystem fileSystem=path.getFileSystem(job);
      FileStatus fStatus=fileSystem.getFileStatus(path);
      FileStatus[] symlinks=null;
      if (!fStatus.isDir()) {
        symlinks=new FileStatus[]{fStatus};
      }
 else {
        symlinks=fileSystem.listStatus(path,FileUtils.HIDDEN_FILES_PATH_FILTER);
      }
      toRemovePaths.add(path);
      ArrayList<String> aliases=pathToAliases.remove(path);
      for (      FileStatus symlink : symlinks) {
        BufferedReader reader=null;
        try {
          reader=new BufferedReader(new InputStreamReader(fileSystem.open(symlink.getPath())));
          partDesc.setInputFileFormatClass(TextInputFormat.class);
          String line;
          while ((line=reader.readLine()) != null) {
            FileStatus[] matches=fileSystem.globStatus(new Path(line));
            for (            FileStatus fileStatus : matches) {
              Path schemaLessPath=Path.getPathWithoutSchemeAndAuthority(fileStatus.getPath());
              toAddPathToPart.put(schemaLessPath,partDesc);
              pathToAliases.put(schemaLessPath,aliases);
            }
          }
        }
  finally {
          org.apache.hadoop.io.IOUtils.closeStream(reader);
        }
      }
    }
  }
  for (  Entry<Path,PartitionDesc> toAdd : toAddPathToPart.entrySet()) {
    work.getMapWork().addPathToPartitionInfo(toAdd.getKey(),toAdd.getValue());
  }
  for (  Path toRemove : toRemovePaths) {
    work.getMapWork().removePathToPartitionInfo(toRemove);
  }
}
