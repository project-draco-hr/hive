{
  MapredWork mapredWork=(MapredWork)currTask.getWork();
  MapredLocalWork localwork=mapredWork.getMapLocalWork();
  if (localwork != null) {
    Context ctx=physicalContext.getContext();
    String tmpFileURI=Utilities.generateTmpURI(ctx.getLocalTmpFileURI(),currTask.getId());
    localwork.setTmpFileURI(tmpFileURI);
    String hdfsTmpURI=Utilities.generateTmpURI(ctx.getMRTmpFileURI(),currTask.getId());
    mapredWork.setTmpHDFSFileURI(hdfsTmpURI);
    MapredLocalTask localTask=(MapredLocalTask)TaskFactory.get(localwork,physicalContext.getParseContext().getConf());
    localTask.setBackupTask(currTask.getBackupTask());
    localTask.setBackupChildrenTasks(currTask.getBackupChildrenTasks());
    currTask.setBackupChildrenTasks(null);
    currTask.setBackupTask(null);
    if (currTask.getTaskTag() == Task.CONVERTED_MAPJOIN) {
      localTask.setTaskTag(Task.CONVERTED_LOCAL_MAPJOIN);
    }
 else {
      localTask.setTaskTag(Task.LOCAL_MAPJOIN);
    }
    LocalMapJoinProcCtx localMapJoinProcCtx=adjustLocalTask(localTask);
    List<Operator<? extends Serializable>> dummyOps=localMapJoinProcCtx.getDummyParentOp();
    MapredLocalWork newLocalWork=new MapredLocalWork();
    newLocalWork.setDummyParentOp(dummyOps);
    newLocalWork.setTmpFileURI(tmpFileURI);
    newLocalWork.setInputFileChangeSensitive(localwork.getInputFileChangeSensitive());
    newLocalWork.setBucketMapjoinContext(localwork.copyPartSpecMappingOnly());
    mapredWork.setMapLocalWork(newLocalWork);
    List<Task<? extends Serializable>> parentTasks=currTask.getParentTasks();
    currTask.setParentTasks(null);
    if (parentTasks != null) {
      for (      Task<? extends Serializable> tsk : parentTasks) {
        tsk.addDependentTask(localTask);
        tsk.removeDependentTask(currTask);
      }
    }
 else {
      if (conditionalTask == null) {
        physicalContext.addToRootTask(localTask);
        physicalContext.removeFromRootTask(currTask);
      }
 else {
        List<Task<? extends Serializable>> listTask=conditionalTask.getListTasks();
        ConditionalWork conditionalWork=conditionalTask.getWork();
        int index=listTask.indexOf(currTask);
        listTask.set(index,localTask);
        List<Serializable> listWork=(List<Serializable>)conditionalWork.getListWorks();
        index=listWork.indexOf(mapredWork);
        listWork.set(index,(Serializable)localwork);
        conditionalWork.setListWorks(listWork);
        ConditionalResolver resolver=conditionalTask.getResolver();
        if (resolver instanceof ConditionalResolverSkewJoin) {
          ConditionalResolverSkewJoinCtx context=(ConditionalResolverSkewJoinCtx)conditionalTask.getResolverCtx();
          HashMap<String,Task<? extends Serializable>> bigKeysDirToTaskMap=context.getDirToTaskMap();
          HashMap<String,Task<? extends Serializable>> newbigKeysDirToTaskMap=new HashMap<String,Task<? extends Serializable>>();
          for (          Map.Entry<String,Task<? extends Serializable>> entry : bigKeysDirToTaskMap.entrySet()) {
            Task<? extends Serializable> task=entry.getValue();
            String key=entry.getKey();
            if (task.equals(currTask)) {
              newbigKeysDirToTaskMap.put(key,localTask);
            }
 else {
              newbigKeysDirToTaskMap.put(key,task);
            }
          }
          context.setDirToTaskMap(newbigKeysDirToTaskMap);
          conditionalTask.setResolverCtx(context);
        }
 else         if (resolver instanceof ConditionalResolverCommonJoin) {
          ConditionalResolverCommonJoinCtx context=(ConditionalResolverCommonJoinCtx)conditionalTask.getResolverCtx();
          HashMap<String,Task<? extends Serializable>> aliasToWork=context.getAliasToTask();
          HashMap<String,Task<? extends Serializable>> newAliasToWork=new HashMap<String,Task<? extends Serializable>>();
          for (          Map.Entry<String,Task<? extends Serializable>> entry : aliasToWork.entrySet()) {
            Task<? extends Serializable> task=entry.getValue();
            String key=entry.getKey();
            if (task.equals(currTask)) {
              newAliasToWork.put(key,localTask);
            }
 else {
              newAliasToWork.put(key,task);
            }
          }
          context.setAliasToTask(newAliasToWork);
          conditionalTask.setResolverCtx(context);
        }
      }
    }
    localTask.addDependentTask(currTask);
  }
}
