{
  ArrayList<Object> signature=new ArrayList<Object>();
  signature.add(structFieldNames);
  signature.add(structFieldObjectInspectors);
  signature.add(Byte.valueOf(separator));
  signature.add(nullSequence.toString());
  signature.add(Boolean.valueOf(lastColumnTakesRest));
  signature.add(Boolean.valueOf(escaped));
  signature.add(Byte.valueOf(escapeChar));
  signature.add(option);
  if (structFieldComments != null) {
    signature.add(structFieldComments);
  }
  LazySimpleStructObjectInspector result=cachedLazySimpleStructObjectInspector.get(signature);
  if (result == null) {
switch (option) {
case JAVA:
      result=new LazySimpleStructObjectInspector(structFieldNames,structFieldObjectInspectors,structFieldComments,separator,nullSequence,lastColumnTakesRest,escaped,escapeChar);
    break;
case AVRO:
  result=new AvroLazyObjectInspector(structFieldNames,structFieldObjectInspectors,structFieldComments,separator,nullSequence,lastColumnTakesRest,escaped,escapeChar);
break;
default :
throw new IllegalArgumentException("Illegal ObjectInspector type [" + option + "]");
}
cachedLazySimpleStructObjectInspector.put(signature,result);
}
return result;
}
