{
  for (int i=0; i < keyExpressions.length; ++i) {
    keyExpressions[i].evaluate(batch);
  }
  for (int i=0; i < longIndices.length; ++i) {
    int keyIndex=longIndices[i];
    int columnIndex=keyExpressions[keyIndex].getOutputColumn();
    LongColumnVector columnVector=(LongColumnVector)batch.cols[columnIndex];
    if (columnVector.noNulls && !columnVector.isRepeating && !batch.selectedInUse) {
      assignLongNoNullsNoRepeatingNoSelection(i,batch.size,columnVector);
    }
 else     if (columnVector.noNulls && !columnVector.isRepeating && batch.selectedInUse) {
      assignLongNoNullsNoRepeatingSelection(i,batch.size,columnVector,batch.selected);
    }
 else     if (columnVector.noNulls && columnVector.isRepeating) {
      assignLongNoNullsRepeating(i,batch.size,columnVector);
    }
 else     if (!columnVector.noNulls && !columnVector.isRepeating && !batch.selectedInUse) {
      assignLongNullsNoRepeatingNoSelection(i,batch.size,columnVector);
    }
 else     if (!columnVector.noNulls && columnVector.isRepeating) {
      assignLongNullsRepeating(i,batch.size,columnVector);
    }
 else     if (!columnVector.noNulls && !columnVector.isRepeating && batch.selectedInUse) {
      assignLongNullsNoRepeatingSelection(i,batch.size,columnVector,batch.selected);
    }
 else {
      throw new HiveException(String.format("Unimplemented Long null/repeat/selected combination %b/%b/%b",columnVector.noNulls,columnVector.isRepeating,batch.selectedInUse));
    }
  }
  for (int i=0; i < doubleIndices.length; ++i) {
    int keyIndex=doubleIndices[i];
    int columnIndex=keyExpressions[keyIndex].getOutputColumn();
    DoubleColumnVector columnVector=(DoubleColumnVector)batch.cols[columnIndex];
    if (columnVector.noNulls && !columnVector.isRepeating && !batch.selectedInUse) {
      assignDoubleNoNullsNoRepeatingNoSelection(i,batch.size,columnVector);
    }
 else     if (columnVector.noNulls && !columnVector.isRepeating && batch.selectedInUse) {
      assignDoubleNoNullsNoRepeatingSelection(i,batch.size,columnVector,batch.selected);
    }
 else     if (columnVector.noNulls && columnVector.isRepeating) {
      assignDoubleNoNullsRepeating(i,batch.size,columnVector);
    }
 else     if (!columnVector.noNulls && !columnVector.isRepeating && !batch.selectedInUse) {
      assignDoubleNullsNoRepeatingNoSelection(i,batch.size,columnVector);
    }
 else     if (!columnVector.noNulls && columnVector.isRepeating) {
      assignDoubleNullsRepeating(i,batch.size,columnVector);
    }
 else     if (!columnVector.noNulls && !columnVector.isRepeating && batch.selectedInUse) {
      assignDoubleNullsNoRepeatingSelection(i,batch.size,columnVector,batch.selected);
    }
 else {
      throw new HiveException(String.format("Unimplemented Double null/repeat/selected combination %b/%b/%b",columnVector.noNulls,columnVector.isRepeating,batch.selectedInUse));
    }
  }
  for (int i=0; i < stringIndices.length; ++i) {
    int keyIndex=stringIndices[i];
    int columnIndex=keyExpressions[keyIndex].getOutputColumn();
    BytesColumnVector columnVector=(BytesColumnVector)batch.cols[columnIndex];
    if (columnVector.noNulls && !columnVector.isRepeating && !batch.selectedInUse) {
      assignStringNoNullsNoRepeatingNoSelection(i,batch.size,columnVector);
    }
 else     if (columnVector.noNulls && !columnVector.isRepeating && batch.selectedInUse) {
      assignStringNoNullsNoRepeatingSelection(i,batch.size,columnVector,batch.selected);
    }
 else     if (columnVector.noNulls && columnVector.isRepeating) {
      assignStringNoNullsRepeating(i,batch.size,columnVector);
    }
 else     if (!columnVector.noNulls && !columnVector.isRepeating && !batch.selectedInUse) {
      assignStringNullsNoRepeatingNoSelection(i,batch.size,columnVector);
    }
 else     if (!columnVector.noNulls && columnVector.isRepeating) {
      assignStringNullsRepeating(i,batch.size,columnVector);
    }
 else     if (!columnVector.noNulls && !columnVector.isRepeating && batch.selectedInUse) {
      assignStringNullsNoRepeatingSelection(i,batch.size,columnVector,batch.selected);
    }
 else {
      throw new HiveException(String.format("Unimplemented String null/repeat/selected combination %b/%b/%b",columnVector.noNulls,columnVector.isRepeating,batch.selectedInUse));
    }
  }
  for (int i=0; i < decimalIndices.length; ++i) {
    int keyIndex=decimalIndices[i];
    int columnIndex=keyExpressions[keyIndex].getOutputColumn();
    DecimalColumnVector columnVector=(DecimalColumnVector)batch.cols[columnIndex];
    if (columnVector.noNulls && !columnVector.isRepeating && !batch.selectedInUse) {
      assignDecimalNoNullsNoRepeatingNoSelection(i,batch.size,columnVector);
    }
 else     if (columnVector.noNulls && !columnVector.isRepeating && batch.selectedInUse) {
      assignDecimalNoNullsNoRepeatingSelection(i,batch.size,columnVector,batch.selected);
    }
 else     if (columnVector.noNulls && columnVector.isRepeating) {
      assignDecimalNoNullsRepeating(i,batch.size,columnVector);
    }
 else     if (!columnVector.noNulls && !columnVector.isRepeating && !batch.selectedInUse) {
      assignDecimalNullsNoRepeatingNoSelection(i,batch.size,columnVector);
    }
 else     if (!columnVector.noNulls && columnVector.isRepeating) {
      assignDecimalNullsRepeating(i,batch.size,columnVector);
    }
 else     if (!columnVector.noNulls && !columnVector.isRepeating && batch.selectedInUse) {
      assignDecimalNullsNoRepeatingSelection(i,batch.size,columnVector,batch.selected);
    }
 else {
      throw new HiveException(String.format("Unimplemented Decimal null/repeat/selected combination %b/%b/%b",columnVector.noNulls,columnVector.isRepeating,batch.selectedInUse));
    }
  }
  for (int i=0; i < timestampIndices.length; ++i) {
    int keyIndex=timestampIndices[i];
    int columnIndex=keyExpressions[keyIndex].getOutputColumn();
    TimestampColumnVector columnVector=(TimestampColumnVector)batch.cols[columnIndex];
    if (columnVector.noNulls && !columnVector.isRepeating && !batch.selectedInUse) {
      assignTimestampNoNullsNoRepeatingNoSelection(i,batch.size,columnVector);
    }
 else     if (columnVector.noNulls && !columnVector.isRepeating && batch.selectedInUse) {
      assignTimestampNoNullsNoRepeatingSelection(i,batch.size,columnVector,batch.selected);
    }
 else     if (columnVector.noNulls && columnVector.isRepeating) {
      assignTimestampNoNullsRepeating(i,batch.size,columnVector);
    }
 else     if (!columnVector.noNulls && !columnVector.isRepeating && !batch.selectedInUse) {
      assignTimestampNullsNoRepeatingNoSelection(i,batch.size,columnVector);
    }
 else     if (!columnVector.noNulls && columnVector.isRepeating) {
      assignTimestampNullsRepeating(i,batch.size,columnVector);
    }
 else     if (!columnVector.noNulls && !columnVector.isRepeating && batch.selectedInUse) {
      assignTimestampNullsNoRepeatingSelection(i,batch.size,columnVector,batch.selected);
    }
 else {
      throw new HiveException(String.format("Unimplemented timestamp null/repeat/selected combination %b/%b/%b",columnVector.noNulls,columnVector.isRepeating,batch.selectedInUse));
    }
  }
  for (int i=0; i < intervalDayTimeIndices.length; ++i) {
    int keyIndex=intervalDayTimeIndices[i];
    int columnIndex=keyExpressions[keyIndex].getOutputColumn();
    IntervalDayTimeColumnVector columnVector=(IntervalDayTimeColumnVector)batch.cols[columnIndex];
    if (columnVector.noNulls && !columnVector.isRepeating && !batch.selectedInUse) {
      assignIntervalDayTimeNoNullsNoRepeatingNoSelection(i,batch.size,columnVector);
    }
 else     if (columnVector.noNulls && !columnVector.isRepeating && batch.selectedInUse) {
      assignIntervalDayTimeNoNullsNoRepeatingSelection(i,batch.size,columnVector,batch.selected);
    }
 else     if (columnVector.noNulls && columnVector.isRepeating) {
      assignIntervalDayTimeNoNullsRepeating(i,batch.size,columnVector);
    }
 else     if (!columnVector.noNulls && !columnVector.isRepeating && !batch.selectedInUse) {
      assignIntervalDayTimeNullsNoRepeatingNoSelection(i,batch.size,columnVector);
    }
 else     if (!columnVector.noNulls && columnVector.isRepeating) {
      assignIntervalDayTimeNullsRepeating(i,batch.size,columnVector);
    }
 else     if (!columnVector.noNulls && !columnVector.isRepeating && batch.selectedInUse) {
      assignIntervalDayTimeNullsNoRepeatingSelection(i,batch.size,columnVector,batch.selected);
    }
 else {
      throw new HiveException(String.format("Unimplemented intervalDayTime null/repeat/selected combination %b/%b/%b",columnVector.noNulls,columnVector.isRepeating,batch.selectedInUse));
    }
  }
  for (int i=0; i < batch.size; ++i) {
    vectorHashKeyWrappers[i].setHashKey();
  }
}
