{
  VectorHashKeyWrapperBatch compiledKeyWrapperBatch=new VectorHashKeyWrapperBatch(keyExpressions.length);
  compiledKeyWrapperBatch.keyExpressions=keyExpressions;
  compiledKeyWrapperBatch.keysFixedSize=0;
  for (int i=0; i < keyExpressions.length; ++i) {
    compiledKeyWrapperBatch.addKey(keyExpressions[i].getOutputType());
  }
  compiledKeyWrapperBatch.finishAdding();
  compiledKeyWrapperBatch.vectorHashKeyWrappers=new VectorHashKeyWrapper[VectorizedRowBatch.DEFAULT_SIZE];
  for (int i=0; i < VectorizedRowBatch.DEFAULT_SIZE; ++i) {
    compiledKeyWrapperBatch.vectorHashKeyWrappers[i]=compiledKeyWrapperBatch.allocateKeyWrapper();
  }
  JavaDataModel model=JavaDataModel.get();
  compiledKeyWrapperBatch.keysFixedSize+=JavaDataModel.alignUp(model.object() + model.ref() * MODEL_REFERENCES_COUNT + model.primitive1(),model.memoryAlign());
  compiledKeyWrapperBatch.keysFixedSize+=model.lengthForLongArrayOfSize(compiledKeyWrapperBatch.longIndices.length);
  compiledKeyWrapperBatch.keysFixedSize+=model.lengthForDoubleArrayOfSize(compiledKeyWrapperBatch.doubleIndices.length);
  compiledKeyWrapperBatch.keysFixedSize+=model.lengthForObjectArrayOfSize(compiledKeyWrapperBatch.stringIndices.length);
  compiledKeyWrapperBatch.keysFixedSize+=model.lengthForObjectArrayOfSize(compiledKeyWrapperBatch.decimalIndices.length);
  compiledKeyWrapperBatch.keysFixedSize+=model.lengthForObjectArrayOfSize(compiledKeyWrapperBatch.timestampIndices.length);
  compiledKeyWrapperBatch.keysFixedSize+=model.lengthForIntArrayOfSize(compiledKeyWrapperBatch.longIndices.length) * 2;
  compiledKeyWrapperBatch.keysFixedSize+=model.lengthForBooleanArrayOfSize(keyExpressions.length);
  return compiledKeyWrapperBatch;
}
