{
  final boolean invert=columnSortOrderIsDesc[fieldIndex];
  int b=inputByteBuffer.read(invert) - 1;
  assert(b == 1 || b == -1 || b == 0);
  boolean positive=b != -1;
  int factor=inputByteBuffer.read(invert) ^ 0x80;
  for (int i=0; i < 3; i++) {
    factor=(factor << 8) + (inputByteBuffer.read(invert) & 0xff);
  }
  if (!positive) {
    factor=-factor;
  }
  int start=inputByteBuffer.tell();
  int length=0;
  do {
    b=inputByteBuffer.read(positive ? invert : !invert);
    assert(b != 1);
    if (b == 0) {
      break;
    }
    length++;
  }
 while (true);
  if (tempDecimalBuffer == null || tempDecimalBuffer.length < length) {
    tempDecimalBuffer=new byte[length];
  }
  inputByteBuffer.seek(start);
  for (int i=0; i < length; ++i) {
    tempDecimalBuffer[i]=inputByteBuffer.read(positive ? invert : !invert);
  }
  inputByteBuffer.read(positive ? invert : !invert);
  String digits=new String(tempDecimalBuffer,0,length,BinarySortableSerDe.decimalCharSet);
  BigInteger bi=new BigInteger(digits);
  HiveDecimal bd=HiveDecimal.create(bi).scaleByPowerOfTen(factor - length);
  if (!positive) {
    bd=bd.negate();
  }
  if (tempHiveDecimalWritable == null) {
    tempHiveDecimalWritable=new HiveDecimalWritable();
  }
  tempHiveDecimalWritable.set(bd);
  saveDecimalTypeInfo=(DecimalTypeInfo)primitiveTypeInfos[fieldIndex];
  int precision=saveDecimalTypeInfo.getPrecision();
  int scale=saveDecimalTypeInfo.getScale();
  saveDecimal=tempHiveDecimalWritable.getHiveDecimal(precision,scale);
  return (saveDecimal == null);
}
