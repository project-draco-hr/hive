{
  if (arguments.length != 2) {
    throw new UDFArgumentException(opName + " requires two arguments.");
  }
  argumentOIs=arguments;
  for (int i=0; i < arguments.length; i++) {
    Category category=arguments[i].getCategory();
    if (category != Category.PRIMITIVE) {
      throw new UDFArgumentTypeException(i,"The " + GenericUDFUtils.getOrdinal(i + 1) + " argument of "+ opName+ "  is expected to a "+ Category.PRIMITIVE.toString().toLowerCase()+ " type, but "+ category.toString().toLowerCase()+ " is found");
    }
  }
  if (TypeInfoUtils.getTypeInfoFromObjectInspector(arguments[0]).equals(TypeInfoFactory.stringTypeInfo) && TypeInfoUtils.getTypeInfoFromObjectInspector(arguments[1]).equals(TypeInfoFactory.stringTypeInfo)) {
    soi0=(StringObjectInspector)arguments[0];
    soi1=(StringObjectInspector)arguments[1];
    if (soi0.preferWritable() || soi1.preferWritable()) {
      compareType=CompareType.COMPARE_TEXT;
    }
 else {
      compareType=CompareType.COMPARE_STRING;
    }
  }
 else   if (TypeInfoUtils.getTypeInfoFromObjectInspector(arguments[0]).equals(TypeInfoFactory.intTypeInfo) && TypeInfoUtils.getTypeInfoFromObjectInspector(arguments[1]).equals(TypeInfoFactory.intTypeInfo)) {
    compareType=CompareType.COMPARE_INT;
    ioi0=(IntObjectInspector)arguments[0];
    ioi1=(IntObjectInspector)arguments[1];
  }
 else   if (TypeInfoUtils.getTypeInfoFromObjectInspector(arguments[0]).equals(TypeInfoFactory.longTypeInfo) && TypeInfoUtils.getTypeInfoFromObjectInspector(arguments[1]).equals(TypeInfoFactory.longTypeInfo)) {
    compareType=CompareType.COMPARE_LONG;
    loi0=(LongObjectInspector)arguments[0];
    loi1=(LongObjectInspector)arguments[1];
  }
 else   if (TypeInfoUtils.getTypeInfoFromObjectInspector(arguments[0]).equals(TypeInfoFactory.byteTypeInfo) && TypeInfoUtils.getTypeInfoFromObjectInspector(arguments[1]).equals(TypeInfoFactory.byteTypeInfo)) {
    compareType=CompareType.COMPARE_BYTE;
    byoi0=(ByteObjectInspector)arguments[0];
    byoi1=(ByteObjectInspector)arguments[1];
  }
 else   if (TypeInfoUtils.getTypeInfoFromObjectInspector(arguments[0]).equals(TypeInfoFactory.booleanTypeInfo) && TypeInfoUtils.getTypeInfoFromObjectInspector(arguments[1]).equals(TypeInfoFactory.booleanTypeInfo)) {
    compareType=CompareType.COMPARE_BOOL;
    boi0=(BooleanObjectInspector)arguments[0];
    boi1=(BooleanObjectInspector)arguments[1];
  }
 else {
    TypeInfo oiTypeInfo0=TypeInfoUtils.getTypeInfoFromObjectInspector(arguments[0]);
    TypeInfo oiTypeInfo1=TypeInfoUtils.getTypeInfoFromObjectInspector(arguments[1]);
    if (oiTypeInfo0 != oiTypeInfo1) {
      compareType=CompareType.NEED_CONVERT;
      TypeInfo compareType=FunctionRegistry.getCommonClassForComparison(oiTypeInfo0,oiTypeInfo1);
      compareOI=TypeInfoUtils.getStandardWritableObjectInspectorFromTypeInfo((compareType == null) ? TypeInfoFactory.doubleTypeInfo : compareType);
      converter0=ObjectInspectorConverters.getConverter(arguments[0],compareOI);
      converter1=ObjectInspectorConverters.getConverter(arguments[1],compareOI);
    }
 else {
      compareType=CompareType.SAME_TYPE;
    }
  }
  return PrimitiveObjectInspectorFactory.writableBooleanObjectInspector;
}
