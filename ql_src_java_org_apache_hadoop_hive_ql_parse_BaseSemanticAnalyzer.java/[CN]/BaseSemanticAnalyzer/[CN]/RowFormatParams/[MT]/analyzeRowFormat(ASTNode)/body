{
  child=(ASTNode)child.getChild(0);
  int numChildRowFormat=child.getChildCount();
  for (int numC=0; numC < numChildRowFormat; numC++) {
    ASTNode rowChild=(ASTNode)child.getChild(numC);
switch (rowChild.getToken().getType()) {
case HiveParser.TOK_TABLEROWFORMATFIELD:
      fieldDelim=unescapeSQLString(rowChild.getChild(0).getText());
    if (rowChild.getChildCount() >= 2) {
      fieldEscape=unescapeSQLString(rowChild.getChild(1).getText());
    }
  break;
case HiveParser.TOK_TABLEROWFORMATCOLLITEMS:
collItemDelim=unescapeSQLString(rowChild.getChild(0).getText());
break;
case HiveParser.TOK_TABLEROWFORMATMAPKEYS:
mapKeyDelim=unescapeSQLString(rowChild.getChild(0).getText());
break;
case HiveParser.TOK_TABLEROWFORMATLINES:
lineDelim=unescapeSQLString(rowChild.getChild(0).getText());
if (!lineDelim.equals("\n") && !lineDelim.equals("10")) {
throw new SemanticException(SemanticAnalyzer.generateErrorMessage(rowChild,ErrorMsg.LINES_TERMINATED_BY_NON_NEWLINE.getMsg()));
}
break;
case HiveParser.TOK_TABLEROWFORMATNULL:
nullFormat=unescapeSQLString(rowChild.getChild(0).getText());
break;
default :
throw new AssertionError("Unkown Token: " + rowChild);
}
}
}
