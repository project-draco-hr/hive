{
  boolean storageFormat=false;
switch (child.getToken().getType()) {
case HiveParser.TOK_TBLSEQUENCEFILE:
    inputFormat=SEQUENCEFILE_INPUT;
  outputFormat=SEQUENCEFILE_OUTPUT;
storageFormat=true;
break;
case HiveParser.TOK_TBLTEXTFILE:
inputFormat=TEXTFILE_INPUT;
outputFormat=TEXTFILE_OUTPUT;
storageFormat=true;
break;
case HiveParser.TOK_TBLRCFILE:
inputFormat=RCFILE_INPUT;
outputFormat=RCFILE_OUTPUT;
if (shared.serde == null) {
shared.serde=conf.getVar(HiveConf.ConfVars.HIVEDEFAULTRCFILESERDE);
}
storageFormat=true;
break;
case HiveParser.TOK_TBLORCFILE:
inputFormat=ORCFILE_INPUT;
outputFormat=ORCFILE_OUTPUT;
shared.serde=ORCFILE_SERDE;
storageFormat=true;
break;
case HiveParser.TOK_TBLPARQUETFILE:
inputFormat=PARQUETFILE_INPUT;
outputFormat=PARQUETFILE_OUTPUT;
shared.serde=PARQUETFILE_SERDE;
storageFormat=true;
break;
case HiveParser.TOK_TABLEFILEFORMAT:
inputFormat=unescapeSQLString(child.getChild(0).getText());
outputFormat=unescapeSQLString(child.getChild(1).getText());
storageFormat=true;
break;
case HiveParser.TOK_STORAGEHANDLER:
storageHandler=unescapeSQLString(child.getChild(0).getText());
if (child.getChildCount() == 2) {
readProps((ASTNode)(child.getChild(1).getChild(0)),shared.serdeProps);
}
storageFormat=true;
break;
}
return storageFormat;
}
