{
  for (int i=0; i < keyExpressions.length; ++i) {
    keyExpressions[i].evaluate(vrb);
  }
  for (int i=0; i < longIndices.length; ++i) {
    int keyIndex=longIndices[i];
    int columnIndex=keyExpressions[keyIndex].getOutputColumn();
    LongColumnVector columnVector=(LongColumnVector)vrb.cols[columnIndex];
    if (columnVector.noNulls && !columnVector.isRepeating && !vrb.selectedInUse) {
      assignLongNoNullsNoRepeatingNoSelection(i,vrb.size,columnVector);
    }
 else     if (columnVector.noNulls && !columnVector.isRepeating && vrb.selectedInUse) {
      assignLongNoNullsNoRepeatingSelection(i,vrb.size,columnVector,vrb.selected);
    }
 else     if (columnVector.noNulls && columnVector.isRepeating) {
      assignLongNoNullsRepeating(i,vrb.size,columnVector);
    }
 else     if (!columnVector.noNulls && !columnVector.isRepeating && !vrb.selectedInUse) {
      assignLongNullsNoRepeatingNoSelection(i,vrb.size,columnVector);
    }
 else     if (!columnVector.noNulls && columnVector.isRepeating) {
      assignLongNullsRepeating(i,vrb.size,columnVector);
    }
 else     if (!columnVector.noNulls && !columnVector.isRepeating && vrb.selectedInUse) {
      assignLongNullsNoRepeatingSelection(i,vrb.size,columnVector,vrb.selected);
    }
 else {
      throw new HiveException(String.format("Unimplemented Long null/repeat/selected combination %b/%b/%b",columnVector.noNulls,columnVector.isRepeating,vrb.selectedInUse));
    }
  }
  for (int i=0; i < doubleIndices.length; ++i) {
    int keyIndex=doubleIndices[i];
    int columnIndex=keyExpressions[keyIndex].getOutputColumn();
    DoubleColumnVector columnVector=(DoubleColumnVector)vrb.cols[columnIndex];
    if (columnVector.noNulls && !columnVector.isRepeating && !vrb.selectedInUse) {
      assignDoubleNoNullsNoRepeatingNoSelection(i,vrb.size,columnVector);
    }
 else     if (columnVector.noNulls && !columnVector.isRepeating && vrb.selectedInUse) {
      assignDoubleNoNullsNoRepeatingSelection(i,vrb.size,columnVector,vrb.selected);
    }
 else     if (columnVector.noNulls && columnVector.isRepeating) {
      assignDoubleNoNullsRepeating(i,vrb.size,columnVector);
    }
 else     if (!columnVector.noNulls && !columnVector.isRepeating && !vrb.selectedInUse) {
      assignDoubleNullsNoRepeatingNoSelection(i,vrb.size,columnVector);
    }
 else     if (!columnVector.noNulls && columnVector.isRepeating) {
      assignDoubleNullsRepeating(i,vrb.size,columnVector);
    }
 else     if (!columnVector.noNulls && !columnVector.isRepeating && vrb.selectedInUse) {
      assignDoubleNullsNoRepeatingSelection(i,vrb.size,columnVector,vrb.selected);
    }
 else {
      throw new HiveException(String.format("Unimplemented Double null/repeat/selected combination %b/%b/%b",columnVector.noNulls,columnVector.isRepeating,vrb.selectedInUse));
    }
  }
  for (int i=0; i < vrb.size; ++i) {
    vectorHashKeyWrappers[i].setHashKey();
  }
}
