{
  Context ctx=pctx.getContext();
  Map<String,TableScanOperator> topOps=pctx.getTopOps();
  GlobalLimitCtx globalLimitCtx=pctx.getGlobalLimitCtx();
  Map<String,SplitSample> nameToSplitSample=pctx.getNameToSplitSample();
  if (ctx.getTryCount() == 0 && topOps.size() == 1 && !globalLimitCtx.ifHasTransformOrUDTF() && nameToSplitSample.isEmpty()) {
    TableScanOperator ts=topOps.values().iterator().next();
    LimitOperator tempGlobalLimit=checkQbpForGlobalLimit(ts);
    if (tempGlobalLimit != null) {
      LimitDesc tempGlobalLimitDesc=tempGlobalLimit.getConf();
      Table tab=ts.getConf().getTableMetadata();
      Set<FilterOperator> filterOps=OperatorUtils.findOperators(ts,FilterOperator.class);
      if (!tab.isPartitioned()) {
        if (filterOps.size() == 0) {
          Integer tempOffset=tempGlobalLimitDesc.getOffset();
          globalLimitCtx.enableOpt(tempGlobalLimitDesc.getLimit(),(tempOffset == null) ? 0 : tempOffset);
        }
      }
 else {
        if (onlyContainsPartnCols(tab,filterOps)) {
          String alias=(String)topOps.keySet().toArray()[0];
          PrunedPartitionList partsList=pctx.getPrunedPartitions(alias,ts);
          if (!partsList.hasUnknownPartitions()) {
            Integer tempOffset=tempGlobalLimitDesc.getOffset();
            globalLimitCtx.enableOpt(tempGlobalLimitDesc.getLimit(),(tempOffset == null) ? 0 : tempOffset);
          }
        }
      }
      if (globalLimitCtx.isEnable()) {
        LOG.info("Qualify the optimize that reduces input size for 'offset' for offset " + globalLimitCtx.getGlobalOffset());
        LOG.info("Qualify the optimize that reduces input size for 'limit' for limit " + globalLimitCtx.getGlobalLimit());
      }
    }
  }
  return pctx;
}
