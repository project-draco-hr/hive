{
  Initialize();
  String tableName=newTableName("MyTable");
  String databaseName=newTableName("MyDatabase");
  String hbaseTableName=(databaseName + "." + tableName).toLowerCase();
  String db_dir=getTestDir() + "/hbasedb";
  String dbquery="CREATE DATABASE IF NOT EXISTS " + databaseName + " LOCATION '"+ db_dir+ "'";
  String tableQuery="CREATE TABLE " + databaseName + "."+ tableName+ "(key string, testqualifier1 string, testqualifier2 string) STORED BY "+ "'org.apache.hcatalog.hbase.HBaseHCatStorageHandler'"+ "TBLPROPERTIES ('hbase.columns.mapping'=':key,testFamily:testQualifier1,testFamily:testQualifier2')";
  CommandProcessorResponse responseOne=hcatDriver.run(dbquery);
  assertEquals(0,responseOne.getResponseCode());
  CommandProcessorResponse responseTwo=hcatDriver.run(tableQuery);
  assertEquals(0,responseTwo.getResponseCode());
  HBaseAdmin hAdmin=new HBaseAdmin(getHbaseConf());
  boolean doesTableExist=hAdmin.tableExists(hbaseTableName);
  assertTrue(doesTableExist);
  populateHBaseTable(hbaseTableName,5);
  Configuration conf=new Configuration(hcatConf);
  conf.set(HCatConstants.HCAT_KEY_HIVE_CONF,HCatUtil.serialize(getHiveConf().getAllProperties()));
  Path outputDir=new Path(getTestDir(),"mapred/testHbaseTableMRRead");
  FileSystem fs=getFileSystem();
  if (fs.exists(outputDir)) {
    fs.delete(outputDir,true);
  }
  Job job=new Job(conf,"hbase-mr-read-test");
  job.setJarByClass(this.getClass());
  job.setMapperClass(MapReadHTable.class);
  MapReadHTable.resetCounters();
  job.setInputFormatClass(HCatInputFormat.class);
  InputJobInfo inputJobInfo=InputJobInfo.create(databaseName,tableName,null);
  HCatInputFormat.setInput(job,inputJobInfo);
  job.setOutputFormatClass(TextOutputFormat.class);
  TextOutputFormat.setOutputPath(job,outputDir);
  job.setMapOutputKeyClass(BytesWritable.class);
  job.setMapOutputValueClass(Text.class);
  job.setOutputKeyClass(BytesWritable.class);
  job.setOutputValueClass(Text.class);
  job.setNumReduceTasks(0);
  assertTrue(job.waitForCompletion(true));
  assertFalse(MapReadHTable.error);
  assertEquals(MapReadHTable.count,1);
  String dropTableQuery="DROP TABLE " + hbaseTableName;
  CommandProcessorResponse responseThree=hcatDriver.run(dropTableQuery);
  assertEquals(0,responseThree.getResponseCode());
  boolean isHbaseTableThere=hAdmin.tableExists(hbaseTableName);
  assertFalse(isHbaseTableThere);
  String dropDB="DROP DATABASE " + databaseName;
  CommandProcessorResponse responseFour=hcatDriver.run(dropDB);
  assertEquals(0,responseFour.getResponseCode());
}
