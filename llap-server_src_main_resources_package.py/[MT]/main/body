def main(args):
    version = os.getenv('HIVE_VERSION')
    if (not version):
        version = strftime('%d%b%Y', gmtime())
    home = os.getenv('HIVE_HOME')
    output = ('llap-slider-%(version)s' % {'version': version, })
    parser = argparse.ArgumentParser()
    parser.add_argument('--instances', type=int, default=1)
    parser.add_argument('--output', default=output)
    parser.add_argument('--input', required=True)
    parser.add_argument('--args', default='')
    parser.add_argument('--name', default='llap0')
    parser.add_argument('--loglevel', default='INFO')
    parser.add_argument('--chaosmonkey', type=int, default='0')
    (args, unknown_args) = parser.parse_known_args(args)
    input = args.input
    output = args.output
    if (not input):
        print 'Cannot find input files'
        sys.exit(1)
        return
    config = json_parse(open(join(input, 'config.json')).read())
    resource = LlapResource(config)
    monkey_percentage = 5
    vars = {'home': home, 'version': version, 'instances': args.instances, 'heap': resource.heap_size, 'container.mb': resource.container_size, 'container.cores': resource.container_cores, 'hadoop_home': os.getenv('HADOOP_HOME'), 'java_home': os.getenv('JAVA_HOME'), 'name': args.name, 'daemon_args': args.args, 'daemon_loglevel': args.loglevel, 'monkey_interval': args.chaosmonkey, 'monkey_percentage': monkey_percentage, 'monkey_enabled': (args.chaosmonkey > 0), }
    if (not exists(output)):
        os.makedirs(output)
    src = join(home, 'scripts', 'llap', 'bin')
    dst = join(input, 'bin')
    if exists(dst):
        shutil.rmtree(dst)
    shutil.copytree(src, dst)
    tmp = join(output, 'tmp')
    pkg = join(tmp, 'package')
    src = join(home, 'scripts', 'llap', 'slider')
    dst = join(pkg, 'scripts')
    if exists(dst):
        shutil.rmtree(dst)
    shutil.copytree(src, dst)
    with open(join(tmp, 'metainfo.xml'), 'w') as f:
        f.write((metainfo % vars))
    os.mkdir(join(pkg, 'files'))
    tarball = tarfile.open(join(pkg, 'files', ('llap-%s.tar.gz' % version)), 'w:gz')
    tarball.add(input, '')
    tarball.close()
    zipped = zipfile.ZipFile(join(output, ('llap-%s.zip' % version)), 'w')
    zipdir(tmp, zipped)
    zipped.close()
    shutil.rmtree(tmp)
    with open(join(output, 'appConfig.json'), 'w') as f:
        f.write((appConfig % vars))
    with open(join(output, 'resources.json'), 'w') as f:
        f.write((resources % vars))
    with open(join(output, 'run.sh'), 'w') as f:
        f.write((runner % vars))
    os.chmod(join(output, 'run.sh'), 448)
    print ('Prepared %s/run.sh for running LLAP on Slider' % output)
