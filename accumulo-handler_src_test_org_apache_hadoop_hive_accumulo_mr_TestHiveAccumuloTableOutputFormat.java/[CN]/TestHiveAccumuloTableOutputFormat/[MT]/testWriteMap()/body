{
  Instance inst=new MockInstance(test.getMethodName());
  Connector conn=inst.getConnector("root",new PasswordToken(""));
  HiveAccumuloTableOutputFormat outputFormat=new HiveAccumuloTableOutputFormat();
  String table=test.getMethodName();
  conn.tableOperations().create(table);
  JobConf conf=new JobConf();
  conf.set(AccumuloConnectionParameters.INSTANCE_NAME,inst.getInstanceName());
  conf.set(AccumuloConnectionParameters.USER_NAME,"root");
  conf.set(AccumuloConnectionParameters.USER_PASS,"");
  conf.setBoolean(AccumuloConnectionParameters.USE_MOCK_INSTANCE,true);
  conf.set(AccumuloConnectionParameters.TABLE_NAME,test.getMethodName());
  FileSystem local=FileSystem.getLocal(conf);
  outputFormat.checkOutputSpecs(local,conf);
  RecordWriter<Text,Mutation> recordWriter=outputFormat.getRecordWriter(local,conf,null,null);
  List<String> names=Arrays.asList("row","col1");
  List<TypeInfo> types=Arrays.<TypeInfo>asList(TypeInfoFactory.stringTypeInfo,TypeInfoFactory.stringTypeInfo);
  Properties tableProperties=new Properties();
  tableProperties.setProperty(AccumuloSerDeParameters.COLUMN_MAPPINGS,":rowID,cf:*");
  tableProperties.setProperty(serdeConstants.FIELD_DELIM," ");
  tableProperties.setProperty(serdeConstants.LIST_COLUMNS,Joiner.on(',').join(names));
  tableProperties.setProperty(serdeConstants.LIST_COLUMN_TYPES,Joiner.on(',').join(types));
  AccumuloSerDeParameters accumuloSerDeParams=new AccumuloSerDeParameters(new Configuration(),tableProperties,AccumuloSerDe.class.getSimpleName());
  LazySerDeParameters serDeParams=accumuloSerDeParams.getSerDeParameters();
  AccumuloRowSerializer serializer=new AccumuloRowSerializer(0,serDeParams,accumuloSerDeParams.getColumnMappings(),AccumuloSerDeParameters.DEFAULT_VISIBILITY_LABEL,accumuloSerDeParams.getRowIdFactory());
  TypeInfo stringTypeInfo=TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.STRING_TYPE_NAME);
  LazyStringObjectInspector stringOI=(LazyStringObjectInspector)LazyFactory.createLazyObjectInspector(stringTypeInfo,new byte[]{0},0,serDeParams.getNullSequence(),serDeParams.isEscaped(),serDeParams.getEscapeChar());
  LazyMapObjectInspector mapOI=LazyObjectInspectorFactory.getLazySimpleMapObjectInspector(stringOI,stringOI,(byte)',',(byte)':',serDeParams.getNullSequence(),serDeParams.isEscaped(),serDeParams.getEscapeChar());
  LazySimpleStructObjectInspector structOI=(LazySimpleStructObjectInspector)LazyObjectInspectorFactory.getLazySimpleStructObjectInspector(Arrays.asList("row","data"),Arrays.asList(stringOI,mapOI),(byte)' ',serDeParams.getNullSequence(),serDeParams.isLastColumnTakesRest(),serDeParams.isEscaped(),serDeParams.getEscapeChar());
  LazyStruct struct=(LazyStruct)LazyFactory.createLazyObject(structOI);
  ByteArrayRef bytes=new ByteArrayRef();
  bytes.setData("row cq1:value1,cq2:value2".getBytes());
  struct.init(bytes,0,bytes.getData().length);
  Mutation m=serializer.serialize(struct,structOI);
  recordWriter.write(new Text(table),m);
  recordWriter.close(null);
  Iterator<Entry<Key,Value>> iter=conn.createScanner(table,new Authorizations()).iterator();
  Assert.assertTrue("Iterator did not have an element as expected",iter.hasNext());
  Entry<Key,Value> entry=iter.next();
  Key k=entry.getKey();
  Value v=entry.getValue();
  Assert.assertEquals("row",k.getRow().toString());
  Assert.assertEquals("cf",k.getColumnFamily().toString());
  Assert.assertEquals("cq1",k.getColumnQualifier().toString());
  Assert.assertEquals(AccumuloSerDeParameters.DEFAULT_VISIBILITY_LABEL,k.getColumnVisibilityParsed());
  Assert.assertEquals("value1",new String(v.get()));
  Assert.assertTrue("Iterator did not have an element as expected",iter.hasNext());
  entry=iter.next();
  k=entry.getKey();
  v=entry.getValue();
  Assert.assertEquals("row",k.getRow().toString());
  Assert.assertEquals("cf",k.getColumnFamily().toString());
  Assert.assertEquals("cq2",k.getColumnQualifier().toString());
  Assert.assertEquals(AccumuloSerDeParameters.DEFAULT_VISIBILITY_LABEL,k.getColumnVisibilityParsed());
  Assert.assertEquals("value2",new String(v.get()));
  Assert.assertFalse("Iterator unexpectedly had more data",iter.hasNext());
}
