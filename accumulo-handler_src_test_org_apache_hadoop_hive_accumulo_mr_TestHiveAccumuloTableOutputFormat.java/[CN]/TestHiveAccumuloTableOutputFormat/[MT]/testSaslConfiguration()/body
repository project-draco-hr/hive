{
  final HiveAccumuloTableOutputFormat outputFormat=Mockito.mock(HiveAccumuloTableOutputFormat.class);
  final AuthenticationToken authToken=Mockito.mock(AuthenticationToken.class);
  final Token hadoopToken=Mockito.mock(Token.class);
  final HiveAccumuloHelper helper=Mockito.mock(HiveAccumuloHelper.class);
  final AccumuloConnectionParameters cnxnParams=Mockito.mock(AccumuloConnectionParameters.class);
  final Connector connector=Mockito.mock(Connector.class);
  conf.set("hadoop.security.authentication","kerberos");
  UserGroupInformation.setConfiguration(conf);
  UserGroupInformation user1=UserGroupInformation.createUserForTesting(user,new String[0]);
  Mockito.when(outputFormat.getCurrentUser()).thenReturn(user1);
  conf.unset(AccumuloConnectionParameters.USER_PASS);
  Mockito.doCallRealMethod().when(outputFormat).configureAccumuloOutputFormat(conf);
  Mockito.when(outputFormat.getHelper()).thenReturn(helper);
  Mockito.when(outputFormat.getConnectionParams(conf)).thenReturn(cnxnParams);
  Mockito.when(cnxnParams.getConnector()).thenReturn(connector);
  Mockito.when(helper.getDelegationToken(connector)).thenReturn(authToken);
  Mockito.when(helper.getHadoopToken(authToken)).thenReturn(hadoopToken);
  Mockito.when(cnxnParams.useSasl()).thenReturn(true);
  Mockito.when(cnxnParams.getAccumuloUserName()).thenReturn(user);
  Mockito.when(cnxnParams.getAccumuloInstanceName()).thenReturn(instanceName);
  Mockito.when(cnxnParams.getZooKeepers()).thenReturn(zookeepers);
  Mockito.when(outputFormat.hasKerberosCredentials(user1)).thenReturn(true);
  outputFormat.configureAccumuloOutputFormat(conf);
  Mockito.verify(outputFormat).setZooKeeperInstanceWithErrorChecking(conf,instanceName,zookeepers,true);
  Mockito.verify(outputFormat).setConnectorInfoWithErrorChecking(conf,user,authToken);
  Mockito.verify(outputFormat).setDefaultAccumuloTableName(conf,outputTable);
  Mockito.verify(helper).mergeTokenIntoJobConf(conf,hadoopToken);
  Collection<Token<? extends TokenIdentifier>> tokens=user1.getTokens();
  Assert.assertEquals(1,tokens.size());
  Assert.assertEquals(hadoopToken,tokens.iterator().next());
}
