{
  this.ast=ast;
switch (ast.getToken().getType()) {
case HiveParser.TOK_CREATETABLE:
    hook=new CreateTableHook();
  return hook.preAnalyze(context,ast);
case HiveParser.TOK_CREATEDATABASE:
hook=new CreateDatabaseHook();
return hook.preAnalyze(context,ast);
case HiveParser.TOK_SHOWDATABASES:
case HiveParser.TOK_DROPDATABASE:
case HiveParser.TOK_SWITCHDATABASE:
return ast;
case HiveParser.TOK_DROPTABLE:
case HiveParser.TOK_DESCTABLE:
case HiveParser.TOK_ALTERTABLE_ADDCOLS:
case HiveParser.TOK_ALTERTABLE_RENAME:
case HiveParser.TOK_ALTERTABLE_DROPPARTS:
case HiveParser.TOK_ALTERTABLE_PROPERTIES:
case HiveParser.TOK_ALTERTABLE_SERIALIZER:
case HiveParser.TOK_ALTERTABLE_SERDEPROPERTIES:
case HiveParser.TOK_SHOW_TABLESTATUS:
case HiveParser.TOK_SHOWTABLES:
case HiveParser.TOK_SHOWPARTITIONS:
return ast;
case HiveParser.TOK_ALTERTABLE_ADDPARTS:
hook=new AddPartitionHook();
return hook.preAnalyze(context,ast);
case HiveParser.TOK_ALTERTABLE_PARTITION:
if (((ASTNode)ast.getChild(1)).getToken().getType() == HiveParser.TOK_ALTERTABLE_FILEFORMAT) {
hook=new AlterTableFileFormatHook();
return hook.preAnalyze(context,ast);
}
 else {
return ast;
}
case HiveParser.TOK_EXPORT:
case HiveParser.TOK_IMPORT:
return ast;
default :
throw new SemanticException("Operation not supported.");
}
}
