{
  final List<RexNode> merges=new ArrayList<>();
  final List<RelDataTypeField> fieldList=inputRowType.getFieldList();
  if (leftSubTotal >= 0) {
    final RelDataType type=fieldList.get(leftSubTotal).getType();
    merges.add(rexBuilder.makeInputRef(type,leftSubTotal));
  }
  if (rightSubTotal >= 0) {
    final RelDataType type=fieldList.get(rightSubTotal).getType();
    merges.add(rexBuilder.makeInputRef(type,rightSubTotal));
  }
  RexNode node;
switch (merges.size()) {
case 1:
    node=merges.get(0);
  break;
case 2:
node=rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY,merges);
node=rexBuilder.makeAbstractCast(aggregateCall.type,node);
break;
default :
throw new AssertionError("unexpected count " + merges);
}
int ordinal=extra.register(node);
return AggregateCall.create(new HiveSqlSumAggFunction(returnTypeInference,operandTypeInference,operandTypeChecker),false,ImmutableList.of(ordinal),-1,aggregateCall.type,aggregateCall.name);
}
