{
  if (childExpressions != null) {
    super.evaluateChildren(batch);
  }
  ColumnVector inputColVector=batch.cols[colNum];
  int[] sel=batch.selected;
  boolean[] nullPos=inputColVector.isNull;
  int n=batch.size;
  long[] outputVector=((LongColumnVector)batch.cols[outputColumn]).vector;
  if (n <= 0) {
    return;
  }
  batch.cols[outputColumn].noNulls=true;
  if (inputColVector.isRepeating && inputColVector.noNulls) {
    outputVector[0]=0;
    batch.cols[outputColumn].isRepeating=true;
  }
 else   if (inputColVector.isRepeating && !inputColVector.noNulls) {
    outputVector[0]=nullPos[0] ? 1 : 0;
    batch.cols[outputColumn].isRepeating=true;
  }
 else   if (!inputColVector.isRepeating && inputColVector.noNulls) {
    if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        outputVector[i]=0;
      }
    }
 else {
      for (int i=0; i != n; i++) {
        outputVector[i]=0;
      }
    }
    batch.cols[outputColumn].isRepeating=false;
  }
 else {
    if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        outputVector[i]=nullPos[i] ? 1 : 0;
      }
    }
 else {
      for (int i=0; i != n; i++) {
        outputVector[i]=nullPos[i] ? 1 : 0;
      }
    }
    batch.cols[outputColumn].isRepeating=false;
  }
}
