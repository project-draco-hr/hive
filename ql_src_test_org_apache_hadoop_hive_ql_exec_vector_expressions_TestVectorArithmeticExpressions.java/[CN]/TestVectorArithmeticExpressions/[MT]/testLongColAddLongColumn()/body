{
  int seed=17;
  VectorizedRowBatch vrg=VectorizedRowGroupGenUtil.getVectorizedRowBatch(VectorizedRowBatch.DEFAULT_SIZE,6,seed);
  LongColumnVector lcv0=(LongColumnVector)vrg.cols[0];
  LongColumnVector lcv1=(LongColumnVector)vrg.cols[1];
  LongColumnVector lcv2=(LongColumnVector)vrg.cols[2];
  LongColumnVector lcv3=(LongColumnVector)vrg.cols[3];
  LongColumnVector lcv4=(LongColumnVector)vrg.cols[4];
  LongColumnVector lcv5=(LongColumnVector)vrg.cols[5];
  LongColAddLongColumn expr=new LongColAddLongColumn(0,1,2);
  expr.evaluate(vrg);
  for (int i=0; i < VectorizedRowBatch.DEFAULT_SIZE; i++) {
    assertEquals((i + 1) * seed * 3,lcv2.vector[i]);
  }
  assertTrue(lcv2.noNulls);
  lcv1.noNulls=false;
  lcv1.isNull[1]=true;
  lcv2.isRepeating=true;
  lcv2.noNulls=true;
  expr.evaluate(vrg);
  assertTrue(lcv2.isNull[1]);
  assertFalse(lcv2.noNulls);
  assertFalse(lcv2.isRepeating);
  verifyLongNullDataVectorEntries(lcv2,vrg.selected,vrg.selectedInUse,vrg.size);
  lcv0.noNulls=false;
  lcv0.isNull[1]=true;
  lcv0.isNull[3]=true;
  expr.evaluate(vrg);
  assertTrue(lcv2.isNull[1]);
  assertTrue(lcv2.isNull[3]);
  assertFalse(lcv2.noNulls);
  verifyLongNullDataVectorEntries(lcv2,vrg.selected,vrg.selectedInUse,vrg.size);
  lcv3.isRepeating=true;
  LongColAddLongColumn expr2=new LongColAddLongColumn(3,4,5);
  expr2.evaluate(vrg);
  for (int i=0; i < VectorizedRowBatch.DEFAULT_SIZE; i++) {
    assertEquals(seed * (4 + 5 * (i + 1)),lcv5.vector[i]);
  }
  lcv4.noNulls=false;
  lcv4.isNull[0]=true;
  expr2.evaluate(vrg);
  assertTrue(lcv5.isNull[0]);
  assertFalse(lcv5.noNulls);
  verifyLongNullDataVectorEntries(lcv5,vrg.selected,vrg.selectedInUse,vrg.size);
  lcv3.isRepeating=true;
  lcv3.noNulls=false;
  lcv3.isNull[0]=true;
  expr2.evaluate(vrg);
  assertFalse(lcv5.noNulls);
  assertTrue(lcv5.isRepeating);
  assertTrue(lcv5.isNull[0]);
  verifyLongNullDataVectorEntries(lcv5,vrg.selected,vrg.selectedInUse,vrg.size);
  vrg.selectedInUse=false;
  lcv0.noNulls=true;
  lcv1.noNulls=true;
  lcv0.isRepeating=false;
  lcv1.isRepeating=false;
  lcv2.noNulls=false;
  lcv2.isRepeating=true;
  expr.evaluate(vrg);
  assertTrue(lcv2.noNulls);
  assertFalse(lcv2.isRepeating);
}
