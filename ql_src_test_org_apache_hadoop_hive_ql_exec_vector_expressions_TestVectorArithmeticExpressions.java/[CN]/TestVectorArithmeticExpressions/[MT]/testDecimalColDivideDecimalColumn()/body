{
  VectorizedRowBatch b=getVectorizedRowBatch3DecimalCols();
  DecimalColumnVector in1=(DecimalColumnVector)b.cols[1];
  for (int i=0; i < 3; i++) {
    in1.vector[i]=new Decimal128("0.50",(short)2);
  }
  VectorExpression expr=new DecimalColDivideDecimalColumn(0,1,2);
  expr.evaluate(b);
  DecimalColumnVector r=(DecimalColumnVector)b.cols[2];
  assertTrue(r.vector[0].equals(new Decimal128("2.40",(short)2)));
  assertTrue(r.vector[1].equals(new Decimal128("-6.60",(short)2)));
  assertTrue(r.vector[2].equals(new Decimal128("0",(short)2)));
  b.cols[0].noNulls=false;
  b.cols[0].isNull[0]=true;
  expr.evaluate(b);
  assertFalse(r.noNulls);
  assertTrue(r.isNull[0]);
  b=getVectorizedRowBatch3DecimalCols();
  b.cols[1].noNulls=false;
  b.cols[1].isNull[0]=true;
  r=(DecimalColumnVector)b.cols[2];
  expr.evaluate(b);
  assertFalse(r.noNulls);
  assertTrue(r.isNull[0]);
  b=getVectorizedRowBatch3DecimalCols();
  b.cols[0].noNulls=false;
  b.cols[0].isNull[0]=true;
  b.cols[1].noNulls=false;
  b.cols[1].isNull[0]=true;
  expr.evaluate(b);
  assertFalse(r.noNulls);
  assertTrue(r.isNull[0]);
  assertFalse(r.isNull[1]);
  assertFalse(r.isNull[2]);
  b=getVectorizedRowBatch3DecimalCols();
  b.cols[0].isRepeating=true;
  expr.evaluate(b);
  r=(DecimalColumnVector)b.cols[2];
  assertTrue(r.vector[2].equals(new Decimal128("1.20",(short)2)));
  b=getVectorizedRowBatch3DecimalCols();
  b.cols[1].isRepeating=true;
  expr.evaluate(b);
  r=(DecimalColumnVector)b.cols[2];
  assertTrue(r.vector[2].equals(new Decimal128("0",(short)2)));
  b=getVectorizedRowBatch3DecimalCols();
  b.cols[0].isRepeating=true;
  b.cols[1].isRepeating=true;
  expr.evaluate(b);
  r=(DecimalColumnVector)b.cols[2];
  assertTrue(r.isRepeating);
  assertTrue(r.vector[0].equals(new Decimal128("1.20",(short)2)));
  b=getVectorizedRowBatch3DecimalCols();
  ((DecimalColumnVector)b.cols[1]).vector[0].update(0);
  expr.evaluate(b);
  r=(DecimalColumnVector)b.cols[2];
  assertFalse(r.noNulls);
  assertTrue(r.isNull[0]);
}
