{
  VectorizedRowBatch b=getVectorizedRowBatch3DecimalCols();
  HiveDecimal d=HiveDecimal.create("2.00");
  VectorExpression expr=new DecimalColModuloDecimalScalar(0,d,2);
  expr.evaluate(b);
  DecimalColumnVector r=(DecimalColumnVector)b.cols[2];
  assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("1.20")));
  assertTrue(r.vector[1].getHiveDecimal().equals(HiveDecimal.create("-1.30")));
  assertTrue(r.vector[2].getHiveDecimal().equals(HiveDecimal.create("0")));
  DecimalColumnVector in=(DecimalColumnVector)b.cols[0];
  in.vector[0].set(HiveDecimal.create("15.40"));
  in.vector[1].set(HiveDecimal.create("-17.20"));
  in.vector[2].set(HiveDecimal.create("70.00"));
  d=HiveDecimal.create("4.75");
  expr=new DecimalColModuloDecimalScalar(0,d,2);
  expr.evaluate(b);
  assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("1.15")));
  assertTrue(r.vector[1].getHiveDecimal().equals(HiveDecimal.create("-2.95")));
  assertTrue(r.vector[2].getHiveDecimal().equals(HiveDecimal.create("3.50")));
  d=HiveDecimal.create("0.00");
  expr=new DecimalColModuloDecimalScalar(0,d,2);
  expr.evaluate(b);
  assertFalse(r.noNulls);
  assertTrue(r.isNull[0]);
  assertTrue(r.isRepeating);
}
