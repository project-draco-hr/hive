{
  VectorizedRowBatch b=getVectorizedRowBatch3DecimalCols();
  HiveDecimal d=HiveDecimal.create("3.96");
  VectorExpression expr=new DecimalScalarDivideDecimalColumn(d,0,2);
  expr.evaluate(b);
  DecimalColumnVector r=(DecimalColumnVector)b.cols[2];
  assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("3.3")));
  assertTrue(r.vector[1].getHiveDecimal().equals(HiveDecimal.create("-1.2")));
  assertFalse(r.noNulls);
  assertTrue(r.isNull[2]);
  b=getVectorizedRowBatch3DecimalCols();
  DecimalColumnVector in=(DecimalColumnVector)b.cols[0];
  r=(DecimalColumnVector)b.cols[2];
  in.noNulls=false;
  in.isNull[0]=true;
  expr.evaluate(b);
  assertTrue(!r.noNulls);
  assertTrue(r.isNull[0]);
  b=getVectorizedRowBatch3DecimalCols();
  in=(DecimalColumnVector)b.cols[0];
  in.isRepeating=true;
  expr.evaluate(b);
  r=(DecimalColumnVector)b.cols[2];
  assertTrue(r.isRepeating);
  assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("3.3")));
  b=getVectorizedRowBatch3DecimalCols();
  in=(DecimalColumnVector)b.cols[0];
  in.isRepeating=true;
  in.isNull[0]=true;
  in.noNulls=false;
  expr.evaluate(b);
  r=(DecimalColumnVector)b.cols[2];
  assertTrue(r.isRepeating);
  assertTrue(!r.noNulls);
  assertTrue(r.isNull[0]);
}
