{
  if (argClasses.size() != 3) {
    return null;
  }
  List<Class<?>> pClasses=new ArrayList<Class<?>>(3);
  pClasses.add(Boolean.class);
  for (int i=0; i < classPriority.length; i++) {
    if (ObjectInspectorUtils.generalizePrimitive(argClasses.get(1)) == classPriority[i] || ObjectInspectorUtils.generalizePrimitive(argClasses.get(2)) == classPriority[i]) {
      pClasses.add(classPriority[i]);
      pClasses.add(classPriority[i]);
      break;
    }
  }
  if (pClasses.size() != 3) {
    return null;
  }
  System.err.println("Matched UDFIF: " + pClasses);
  Method udfMethod=null;
  for (  Method m : Arrays.asList(udfClass.getMethods())) {
    if (m.getName().equals("evaluate")) {
      Class<?>[] argumentTypeInfos=m.getParameterTypes();
      boolean match=(argumentTypeInfos.length == pClasses.size());
      for (int i=0; i < pClasses.size() && match; i++) {
        Class<?> accepted=ObjectInspectorUtils.generalizePrimitive(argumentTypeInfos[i]);
        if (accepted != pClasses.get(i)) {
          match=false;
        }
      }
      if (match) {
        if (udfMethod != null) {
          throw new AmbiguousMethodException(udfClass,argClasses);
        }
 else {
          udfMethod=m;
        }
      }
    }
  }
  return udfMethod;
}
