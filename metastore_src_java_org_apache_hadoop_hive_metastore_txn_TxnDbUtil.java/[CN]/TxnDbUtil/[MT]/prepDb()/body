{
  Connection conn=null;
  Statement stmt=null;
  try {
    conn=getConnection();
    stmt=conn.createStatement();
    stmt.execute("CREATE TABLE TXNS (" + "  TXN_ID bigint PRIMARY KEY," + "  TXN_STATE char(1) NOT NULL,"+ "  TXN_STARTED bigint NOT NULL,"+ "  TXN_LAST_HEARTBEAT bigint NOT NULL,"+ "  TXN_USER varchar(128) NOT NULL,"+ "  TXN_HOST varchar(128) NOT NULL)");
    stmt.execute("CREATE TABLE TXN_COMPONENTS (" + "  TC_TXNID bigint REFERENCES TXNS (TXN_ID)," + "  TC_DATABASE varchar(128) NOT NULL,"+ "  TC_TABLE varchar(128),"+ "  TC_PARTITION varchar(767))");
    stmt.execute("CREATE TABLE COMPLETED_TXN_COMPONENTS (" + "  CTC_TXNID bigint," + "  CTC_DATABASE varchar(128) NOT NULL,"+ "  CTC_TABLE varchar(128),"+ "  CTC_PARTITION varchar(767))");
    stmt.execute("CREATE TABLE NEXT_TXN_ID (" + "  NTXN_NEXT bigint NOT NULL)");
    stmt.execute("INSERT INTO NEXT_TXN_ID VALUES(1)");
    stmt.execute("CREATE TABLE HIVE_LOCKS (" + " HL_LOCK_EXT_ID bigint NOT NULL," + " HL_LOCK_INT_ID bigint NOT NULL,"+ " HL_TXNID bigint,"+ " HL_DB varchar(128) NOT NULL,"+ " HL_TABLE varchar(128),"+ " HL_PARTITION varchar(767),"+ " HL_LOCK_STATE char(1) NOT NULL,"+ " HL_LOCK_TYPE char(1) NOT NULL,"+ " HL_LAST_HEARTBEAT bigint NOT NULL,"+ " HL_ACQUIRED_AT bigint,"+ " HL_USER varchar(128) NOT NULL,"+ " HL_HOST varchar(128) NOT NULL,"+ " PRIMARY KEY(HL_LOCK_EXT_ID, HL_LOCK_INT_ID))");
    stmt.execute("CREATE INDEX HL_TXNID_INDEX ON HIVE_LOCKS (HL_TXNID)");
    stmt.execute("CREATE TABLE NEXT_LOCK_ID (" + " NL_NEXT bigint NOT NULL)");
    stmt.execute("INSERT INTO NEXT_LOCK_ID VALUES(1)");
    stmt.execute("CREATE TABLE COMPACTION_QUEUE (" + " CQ_ID bigint PRIMARY KEY," + " CQ_DATABASE varchar(128) NOT NULL,"+ " CQ_TABLE varchar(128) NOT NULL,"+ " CQ_PARTITION varchar(767),"+ " CQ_STATE char(1) NOT NULL,"+ " CQ_TYPE char(1) NOT NULL,"+ " CQ_WORKER_ID varchar(128),"+ " CQ_START bigint,"+ " CQ_RUN_AS varchar(128),"+ " CQ_HIGHEST_TXN_ID bigint,"+ " CQ_META_INFO varchar(2048) for bit data,"+ " CQ_HADOOP_JOB_ID varchar(32))");
    stmt.execute("CREATE TABLE NEXT_COMPACTION_QUEUE_ID (NCQ_NEXT bigint NOT NULL)");
    stmt.execute("INSERT INTO NEXT_COMPACTION_QUEUE_ID VALUES(1)");
    stmt.execute("CREATE TABLE COMPLETED_COMPACTIONS (" + " CC_ID bigint PRIMARY KEY," + " CC_DATABASE varchar(128) NOT NULL,"+ " CC_TABLE varchar(128) NOT NULL,"+ " CC_PARTITION varchar(767),"+ " CC_STATE char(1) NOT NULL,"+ " CC_TYPE char(1) NOT NULL,"+ " CC_WORKER_ID varchar(128),"+ " CC_START bigint,"+ " CC_END bigint,"+ " CC_RUN_AS varchar(128),"+ " CC_HIGHEST_TXN_ID bigint,"+ " CC_META_INFO varchar(2048) for bit data,"+ " CC_HADOOP_JOB_ID varchar(32))");
    stmt.execute("CREATE TABLE AUX_TABLE (" + "  MT_KEY1 varchar(128) NOT NULL," + "  MT_KEY2 bigint NOT NULL,"+ "  MT_COMMENT varchar(255),"+ "  PRIMARY KEY(MT_KEY1, MT_KEY2)"+ ")");
    conn.commit();
  }
 catch (  SQLException e) {
    try {
      conn.rollback();
    }
 catch (    SQLException re) {
      System.err.println("Error rolling back: " + re.getMessage());
    }
    if (e instanceof SQLTransactionRollbackException && deadlockCnt++ < 5) {
      LOG.warn("Caught deadlock, retrying db creation");
      prepDb();
    }
 else {
      throw e;
    }
  }
 finally {
    deadlockCnt=0;
    closeResources(conn,stmt,null);
  }
}
