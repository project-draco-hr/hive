{
  ExprWalkerInfo exprContext=new ExprWalkerInfo(op,opContext.getRowResolver(op));
  Map<Rule,NodeProcessor> exprRules=new LinkedHashMap<Rule,NodeProcessor>();
  exprRules.put(new RuleRegExp("R1",exprNodeColumnDesc.class.getName() + "%"),getColumnProcessor());
  exprRules.put(new RuleRegExp("R2",exprNodeFieldDesc.class.getName() + "%"),getFuncProcessor());
  exprRules.put(new RuleRegExp("R3",exprNodeFuncDesc.class.getName() + "%"),getFuncProcessor());
  exprRules.put(new RuleRegExp("R4",exprNodeIndexDesc.class.getName() + "%"),getIndexProcessor());
  exprRules.put(new RuleRegExp("R5",exprNodeGenericFuncDesc.class.getName() + "%"),getGenericFuncProcessor());
  Dispatcher disp=new DefaultRuleDispatcher(getDefaultExprProcessor(),exprRules,exprContext);
  GraphWalker egw=new DefaultGraphWalker(disp);
  List<Node> startNodes=new ArrayList<Node>();
  List<exprNodeDesc> clonedPreds=new ArrayList<exprNodeDesc>();
  for (  exprNodeDesc node : preds) {
    clonedPreds.add((exprNodeDesc)node.clone());
  }
  startNodes.addAll(clonedPreds);
  egw.startWalking(startNodes,null);
  for (  exprNodeDesc pred : clonedPreds) {
    extractFinalCandidates(pred,exprContext);
  }
  return exprContext;
}
