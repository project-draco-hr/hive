{
  if (ranges == null)   return null;
  DiskRangeList prev=ranges.prev;
  FileCache subCache=cache.get(fileKey);
  if (subCache == null || !subCache.incRef()) {
    long totalMissed=ranges.getTotalLength();
    metrics.incrCacheRequestedBytes(totalMissed);
    if (qfCounters != null) {
      qfCounters.recordCacheMiss(totalMissed);
    }
    if (prev != null && gotAllData != null) {
      gotAllData.value=false;
    }
    return ranges;
  }
  try {
    if (prev == null) {
      prev=new MutateHelper(ranges);
    }
    if (gotAllData != null) {
      gotAllData.value=true;
    }
    DiskRangeList current=ranges;
    while (current != null) {
      metrics.incrCacheRequestedBytes(current.getLength());
      DiskRangeList next=current.next;
      getOverlappingRanges(baseOffset,current,subCache.cache,factory,gotAllData);
      current=next;
    }
  }
  finally {
    subCache.decRef();
  }
  if (qfCounters != null) {
    DiskRangeList current=prev.next;
    long bytesHit=0, bytesMissed=0;
    while (current != null) {
      if (current.hasData()) {
        bytesHit+=current.getLength();
      }
 else {
        bytesMissed+=current.getLength();
      }
      current=current.next;
    }
    qfCounters.recordCacheHit(bytesHit);
    qfCounters.recordCacheMiss(bytesMissed);
  }
  return prev.next;
}
