{
  while (true) {
    int evictionsSinceLast=newEvictions.getAndSet(0);
    if (evictionsSinceLast > 0)     break;
synchronized (newEvictions) {
      newEvictions.wait(10000);
    }
  }
  long endTime=System.nanoTime() + approxCleanupIntervalSec * 1000000000L;
  int leftToCheck=0;
  for (  FileCache fc : cache.values()) {
    leftToCheck+=fc.cache.size();
  }
  Iterator<Map.Entry<Object,FileCache>> iter=cache.entrySet().iterator();
  boolean isPastEndTime=false;
  while (iter.hasNext()) {
    FileCache fc=iter.next().getValue();
    if (!fc.incRef()) {
      throw new AssertionError("Something other than cleanup is removing elements from map");
    }
    Iterator<Map.Entry<Long,LlapDataBuffer>> subIter=fc.cache.entrySet().iterator();
    boolean isEmpty=true;
    while (subIter.hasNext()) {
      long time=-1;
      isPastEndTime=isPastEndTime || ((time=System.nanoTime()) >= endTime);
      Thread.sleep(((leftToCheck <= 0) || isPastEndTime) ? 1 : (endTime - time) / (1000000L * leftToCheck));
      if (subIter.next().getValue().isInvalid()) {
        subIter.remove();
      }
 else {
        isEmpty=false;
      }
      --leftToCheck;
    }
    if (!isEmpty) {
      fc.decRef();
      continue;
    }
    if (!fc.startEvicting())     continue;
    if (fc.cache.isEmpty()) {
      fc.commitEvicting();
      iter.remove();
    }
 else {
      fc.abortEvicting();
    }
  }
}
