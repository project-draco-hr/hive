{
  Calendar cal=Calendar.getInstance();
  cal.set(Calendar.YEAR,1968);
  cal.set(Calendar.MONTH,Calendar.MAY);
  cal.set(Calendar.DAY_OF_MONTH,23);
  cal.set(Calendar.HOUR_OF_DAY,0);
  cal.setTimeZone(TimeZone.getTimeZone("GMT"));
  Timestamp ts=new Timestamp(cal.getTimeInMillis());
  NanoTime nt=NanoTimeUtils.getNanoTime(ts);
  Assert.assertEquals(nt.getJulianDay(),2440000);
  Timestamp tsFetched=NanoTimeUtils.getTimestamp(nt);
  Assert.assertEquals(tsFetched,ts);
  Calendar cal1=Calendar.getInstance();
  cal1.set(Calendar.YEAR,2005);
  cal1.set(Calendar.MONTH,Calendar.JANUARY);
  cal1.set(Calendar.DAY_OF_MONTH,1);
  cal1.set(Calendar.HOUR_OF_DAY,0);
  cal1.setTimeZone(TimeZone.getTimeZone("GMT"));
  Timestamp ts1=new Timestamp(cal1.getTimeInMillis());
  NanoTime nt1=NanoTimeUtils.getNanoTime(ts1);
  Timestamp ts1Fetched=NanoTimeUtils.getTimestamp(nt1);
  Assert.assertEquals(ts1Fetched,ts1);
  Calendar cal2=Calendar.getInstance();
  cal2.set(Calendar.YEAR,2005);
  cal2.set(Calendar.MONTH,Calendar.JANUARY);
  cal2.set(Calendar.DAY_OF_MONTH,31);
  cal2.set(Calendar.HOUR_OF_DAY,0);
  cal2.setTimeZone(TimeZone.getTimeZone("UTC"));
  Timestamp ts2=new Timestamp(cal2.getTimeInMillis());
  NanoTime nt2=NanoTimeUtils.getNanoTime(ts2);
  Timestamp ts2Fetched=NanoTimeUtils.getTimestamp(nt2);
  Assert.assertEquals(ts2Fetched,ts2);
  Assert.assertEquals(nt2.getJulianDay() - nt1.getJulianDay(),30);
}
