{
  Text nullSequence=new Text("\\N");
  ObjectInspector oi=LazyFactory.createLazyObjectInspector(TypeInfoUtils.getTypeInfosFromTypeString("map<int,string>").get(0),new byte[]{(byte)1,(byte)2},0,nullSequence,false,(byte)0);
  LazyHBaseCellMap b=new LazyHBaseCellMap((LazyMapObjectInspector)oi);
  List<KeyValue> kvs=new ArrayList<KeyValue>();
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfa:col1"),0,Bytes.toBytes("cfacol1")));
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfa:col2"),0,Bytes.toBytes("cfacol2")));
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfb:2"),0,Bytes.toBytes("def")));
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfb:-1"),0,Bytes.toBytes("")));
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfb:0"),0,Bytes.toBytes("0")));
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfb:8"),0,Bytes.toBytes("abc")));
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfc:col3"),0,Bytes.toBytes("cfccol3")));
  Result r=new Result(kvs);
  b.init(r,"cfb".getBytes());
  assertEquals(new Text("def"),((LazyString)b.getMapValueElement(new IntWritable(2))).getWritableObject());
  assertNull(b.getMapValueElement(new IntWritable(-1)));
  assertEquals(new Text("0"),((LazyString)b.getMapValueElement(new IntWritable(0))).getWritableObject());
  assertEquals(new Text("abc"),((LazyString)b.getMapValueElement(new IntWritable(8))).getWritableObject());
  assertNull(b.getMapValueElement(new IntWritable(12345)));
  assertEquals("{0:'0',2:'def',8:'abc'}".replace('\'','\"'),SerDeUtils.getJSONString(b,oi));
}
