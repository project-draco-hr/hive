{
  Text nullSequence=new Text("\\N");
  ObjectInspector oi=LazyFactory.createLazyObjectInspector(TypeInfoUtils.getTypeInfosFromTypeString("map<string,string>").get(0),new byte[]{(byte)'#',(byte)'\t'},0,nullSequence,false,(byte)0);
  LazyHBaseCellMap b=new LazyHBaseCellMap((LazyMapObjectInspector)oi);
  List<KeyValue> kvs=new ArrayList<KeyValue>();
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfa"),Bytes.toBytes("col1"),Bytes.toBytes("cfacol1")));
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfa"),Bytes.toBytes("col2"),Bytes.toBytes("cfacol2")));
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfb"),Bytes.toBytes("2"),Bytes.toBytes("d\tf")));
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfb"),Bytes.toBytes("-1"),Bytes.toBytes("")));
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfb"),Bytes.toBytes("0"),Bytes.toBytes("0")));
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfb"),Bytes.toBytes("8"),Bytes.toBytes("abc")));
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfc"),Bytes.toBytes("col3"),Bytes.toBytes("cfccol3")));
  Result r=new Result(kvs);
  b.init(r,"cfb".getBytes());
  assertEquals(new Text("d\tf"),((LazyString)b.getMapValueElement(new Text("2"))).getWritableObject());
  assertNull(b.getMapValueElement(new Text("-1")));
  assertEquals(new Text("0"),((LazyString)b.getMapValueElement(new Text("0"))).getWritableObject());
  assertEquals(new Text("abc"),((LazyString)b.getMapValueElement(new Text("8"))).getWritableObject());
  assertNull(b.getMapValueElement(new Text("-")));
  assertEquals("{'0':'0','2':'d\\tf','8':'abc'}".replace('\'','\"'),SerDeUtils.getJSONString(b,oi));
}
