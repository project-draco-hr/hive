{
  Text nullSequence=new Text("\\N");
  ObjectInspector oi=LazyFactory.createLazyObjectInspector(TypeInfoUtils.getTypeInfosFromTypeString("map<string,string>").get(0),new byte[]{(byte)'#',(byte)'\t'},0,nullSequence,false,(byte)0);
  LazyHBaseCellMap b=new LazyHBaseCellMap((LazyMapObjectInspector)oi);
  HbaseMapWritable<byte[],Cell> cells=new HbaseMapWritable<byte[],Cell>();
  cells.put("cfa:col1".getBytes(),new Cell("cfacol1".getBytes(),0));
  cells.put("cfa:col2".getBytes(),new Cell("cfacol2".getBytes(),0));
  cells.put("cfb:2".getBytes(),new Cell("d\tf".getBytes(),0));
  cells.put("cfb:-1".getBytes(),new Cell("".getBytes(),0));
  cells.put("cfb:0".getBytes(),new Cell("0".getBytes(),0));
  cells.put("cfb:8".getBytes(),new Cell("abc".getBytes(),0));
  cells.put("cfc:col3".getBytes(),new Cell("cfccol3".getBytes(),0));
  RowResult rr=new RowResult("test-row".getBytes(),cells);
  b.init(rr,"cfb:");
  assertEquals(new Text("d\tf"),((LazyString)b.getMapValueElement(new Text("2"))).getWritableObject());
  assertNull(b.getMapValueElement(new Text("-1")));
  assertEquals(new Text("0"),((LazyString)b.getMapValueElement(new Text("0"))).getWritableObject());
  assertEquals(new Text("abc"),((LazyString)b.getMapValueElement(new Text("8"))).getWritableObject());
  assertNull(b.getMapValueElement(new Text("-")));
  assertEquals("{'0':'0','2':'d\\tf','8':'abc'}".replace('\'','\"'),SerDeUtils.getJSONString(b,oi));
}
