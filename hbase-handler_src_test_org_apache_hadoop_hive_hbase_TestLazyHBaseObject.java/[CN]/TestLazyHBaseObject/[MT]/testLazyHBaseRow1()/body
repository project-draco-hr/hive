{
  List<TypeInfo> fieldTypeInfos=TypeInfoUtils.getTypeInfosFromTypeString("string,int,array<string>,map<string,string>,string");
  List<String> fieldNames=Arrays.asList(new String[]{"key","a","b","c","d"});
  Text nullSequence=new Text("\\N");
  List<String> hbaseColumnNames=Arrays.asList(new String[]{":key","cfa:a","cfa:b","cfb:c","cfb:d"});
  List<byte[]> hbaseColumnNamesBytes=HBaseSerDe.initColumnNamesBytes(hbaseColumnNames);
  ObjectInspector oi=LazyFactory.createLazyStructInspector(fieldNames,fieldTypeInfos,new byte[]{' ',':','='},nullSequence,false,false,(byte)0);
  LazyHBaseRow o=new LazyHBaseRow((LazySimpleStructObjectInspector)oi);
  List<KeyValue> kvs=new ArrayList<KeyValue>();
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfa"),Bytes.toBytes("a"),0,Bytes.toBytes("123")));
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfa"),Bytes.toBytes("b"),0,Bytes.toBytes("a:b:c")));
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfb"),Bytes.toBytes("c"),0,Bytes.toBytes("d=e:f=g")));
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfb"),Bytes.toBytes("d"),0,Bytes.toBytes("hi")));
  Result r=new Result(kvs);
  o.init(r,hbaseColumnNames,hbaseColumnNamesBytes);
  assertEquals(("{'key':'test-row','a':123,'b':['a','b','c']," + "'c':{'d':'e','f':'g'},'d':'hi'}").replace("'","\""),SerDeUtils.getJSONString(o,oi));
  kvs.clear();
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfa"),Bytes.toBytes("a"),0,Bytes.toBytes("123")));
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfb"),Bytes.toBytes("c"),0,Bytes.toBytes("d=e:f=g")));
  r=new Result(kvs);
  o.init(r,hbaseColumnNames,hbaseColumnNamesBytes);
  assertEquals(("{'key':'test-row','a':123,'b':null," + "'c':{'d':'e','f':'g'},'d':null}").replace("'","\""),SerDeUtils.getJSONString(o,oi));
  kvs.clear();
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfa"),Bytes.toBytes("b"),0,Bytes.toBytes("a")));
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfb"),Bytes.toBytes("c"),0,Bytes.toBytes("d=\\N:f=g:h")));
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfb"),Bytes.toBytes("d"),0,Bytes.toBytes("no")));
  r=new Result(kvs);
  o.init(r,hbaseColumnNames,hbaseColumnNamesBytes);
  assertEquals(("{'key':'test-row','a':null,'b':['a']," + "'c':{'d':null,'f':'g','h':null},'d':'no'}").replace("'","\""),SerDeUtils.getJSONString(o,oi));
  kvs.clear();
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfa"),Bytes.toBytes("b"),0,Bytes.toBytes(":a::")));
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfb"),Bytes.toBytes("d"),0,Bytes.toBytes("no")));
  r=new Result(kvs);
  o.init(r,hbaseColumnNames,hbaseColumnNamesBytes);
  assertEquals(("{'key':'test-row','a':null,'b':['','a','','']," + "'c':null,'d':'no'}").replace("'","\""),SerDeUtils.getJSONString(o,oi));
  kvs.clear();
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfa"),Bytes.toBytes("a"),0,Bytes.toBytes("123")));
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfa"),Bytes.toBytes("b"),0,Bytes.toBytes("")));
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfb"),Bytes.toBytes("c"),0,Bytes.toBytes("")));
  kvs.add(new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfb"),Bytes.toBytes("d"),0,Bytes.toBytes("")));
  r=new Result(kvs);
  o.init(r,hbaseColumnNames,hbaseColumnNamesBytes);
  assertEquals("{'key':'test-row','a':123,'b':[],'c':{},'d':''}".replace("'","\""),SerDeUtils.getJSONString(o,oi));
}
