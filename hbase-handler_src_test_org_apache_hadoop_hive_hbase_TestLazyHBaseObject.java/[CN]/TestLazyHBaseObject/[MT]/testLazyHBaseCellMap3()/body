{
  Text nullSequence=new Text("\\N");
  TypeInfo mapBinaryIntKeyValue=TypeInfoUtils.getTypeInfoFromTypeString("map<int,int>");
  ObjectInspector oi=LazyFactory.createLazyObjectInspector(mapBinaryIntKeyValue,new byte[]{(byte)1,(byte)2},0,nullSequence,false,(byte)0);
  LazyHBaseCellMap hbaseCellMap=new LazyHBaseCellMap((LazyMapObjectInspector)oi);
  List<KeyValue> kvs=new ArrayList<KeyValue>();
  byte[] rowKey="row-key".getBytes();
  byte[] cfInt="cf-int".getBytes();
  kvs.add(new KeyValue(rowKey,cfInt,Bytes.toBytes(1),Bytes.toBytes(1)));
  Result result=new Result(kvs);
  List<Boolean> mapBinaryStorage=new ArrayList<Boolean>();
  mapBinaryStorage.add(true);
  mapBinaryStorage.add(true);
  hbaseCellMap.init(result,cfInt,mapBinaryStorage);
  IntWritable expectedIntValue=new IntWritable(1);
  LazyPrimitive<?,?> lazyPrimitive=(LazyPrimitive<?,?>)hbaseCellMap.getMapValueElement(expectedIntValue);
  assertEquals(expectedIntValue,lazyPrimitive.getWritableObject());
  kvs.clear();
  kvs.add(new KeyValue(rowKey,cfInt,Bytes.toBytes(Integer.MIN_VALUE),Bytes.toBytes(Integer.MIN_VALUE)));
  result=new Result(kvs);
  hbaseCellMap.init(result,cfInt,mapBinaryStorage);
  expectedIntValue=new IntWritable(Integer.MIN_VALUE);
  lazyPrimitive=(LazyPrimitive<?,?>)hbaseCellMap.getMapValueElement(expectedIntValue);
  assertEquals(expectedIntValue,lazyPrimitive.getWritableObject());
  kvs.clear();
  kvs.add(new KeyValue(rowKey,cfInt,Bytes.toBytes(Integer.MAX_VALUE),Bytes.toBytes(Integer.MAX_VALUE)));
  result=new Result(kvs);
  hbaseCellMap.init(result,cfInt,mapBinaryStorage);
  expectedIntValue=new IntWritable(Integer.MAX_VALUE);
  lazyPrimitive=(LazyPrimitive<?,?>)hbaseCellMap.getMapValueElement(expectedIntValue);
  assertEquals(expectedIntValue,lazyPrimitive.getWritableObject());
  TypeInfo mapBinaryByteKeyValue=TypeInfoUtils.getTypeInfoFromTypeString("map<tinyint,tinyint>");
  oi=LazyFactory.createLazyObjectInspector(mapBinaryByteKeyValue,new byte[]{(byte)1,(byte)2},0,nullSequence,false,(byte)0);
  hbaseCellMap=new LazyHBaseCellMap((LazyMapObjectInspector)oi);
  byte[] cfByte="cf-byte".getBytes();
  kvs.clear();
  kvs.add(new KeyValue(rowKey,cfByte,new byte[]{(byte)1},new byte[]{(byte)1}));
  result=new Result(kvs);
  hbaseCellMap.init(result,cfByte,mapBinaryStorage);
  ByteWritable expectedByteValue=new ByteWritable((byte)1);
  lazyPrimitive=(LazyPrimitive<?,?>)hbaseCellMap.getMapValueElement(expectedByteValue);
  assertEquals(expectedByteValue,lazyPrimitive.getWritableObject());
  kvs.clear();
  kvs.add(new KeyValue(rowKey,cfByte,new byte[]{Byte.MIN_VALUE},new byte[]{Byte.MIN_VALUE}));
  result=new Result(kvs);
  hbaseCellMap.init(result,cfByte,mapBinaryStorage);
  expectedByteValue=new ByteWritable(Byte.MIN_VALUE);
  lazyPrimitive=(LazyPrimitive<?,?>)hbaseCellMap.getMapValueElement(expectedByteValue);
  assertEquals(expectedByteValue,lazyPrimitive.getWritableObject());
  kvs.clear();
  kvs.add(new KeyValue(rowKey,cfByte,new byte[]{Byte.MAX_VALUE},new byte[]{Byte.MAX_VALUE}));
  result=new Result(kvs);
  hbaseCellMap.init(result,cfByte,mapBinaryStorage);
  expectedByteValue=new ByteWritable(Byte.MAX_VALUE);
  lazyPrimitive=(LazyPrimitive<?,?>)hbaseCellMap.getMapValueElement(expectedByteValue);
  assertEquals(expectedByteValue,lazyPrimitive.getWritableObject());
  TypeInfo mapBinaryShortKeyValue=TypeInfoUtils.getTypeInfoFromTypeString("map<smallint,smallint>");
  oi=LazyFactory.createLazyObjectInspector(mapBinaryShortKeyValue,new byte[]{(byte)1,(byte)2},0,nullSequence,false,(byte)0);
  hbaseCellMap=new LazyHBaseCellMap((LazyMapObjectInspector)oi);
  byte[] cfShort="cf-short".getBytes();
  kvs.clear();
  kvs.add(new KeyValue(rowKey,cfShort,Bytes.toBytes((short)1),Bytes.toBytes((short)1)));
  result=new Result(kvs);
  hbaseCellMap.init(result,cfShort,mapBinaryStorage);
  ShortWritable expectedShortValue=new ShortWritable((short)1);
  lazyPrimitive=(LazyPrimitive<?,?>)hbaseCellMap.getMapValueElement(expectedShortValue);
  assertEquals(expectedShortValue,lazyPrimitive.getWritableObject());
  kvs.clear();
  kvs.add(new KeyValue(rowKey,cfShort,Bytes.toBytes(Short.MIN_VALUE),Bytes.toBytes(Short.MIN_VALUE)));
  result=new Result(kvs);
  hbaseCellMap.init(result,cfShort,mapBinaryStorage);
  expectedShortValue=new ShortWritable(Short.MIN_VALUE);
  lazyPrimitive=(LazyPrimitive<?,?>)hbaseCellMap.getMapValueElement(expectedShortValue);
  assertEquals(expectedShortValue,lazyPrimitive.getWritableObject());
  kvs.clear();
  kvs.add(new KeyValue(rowKey,cfShort,Bytes.toBytes(Short.MAX_VALUE),Bytes.toBytes(Short.MAX_VALUE)));
  result=new Result(kvs);
  hbaseCellMap.init(result,cfShort,mapBinaryStorage);
  expectedShortValue=new ShortWritable(Short.MAX_VALUE);
  lazyPrimitive=(LazyPrimitive<?,?>)hbaseCellMap.getMapValueElement(expectedShortValue);
  assertEquals(expectedShortValue,lazyPrimitive.getWritableObject());
  TypeInfo mapBinaryLongKeyValue=TypeInfoUtils.getTypeInfoFromTypeString("map<bigint,bigint>");
  oi=LazyFactory.createLazyObjectInspector(mapBinaryLongKeyValue,new byte[]{(byte)1,(byte)2},0,nullSequence,false,(byte)0);
  hbaseCellMap=new LazyHBaseCellMap((LazyMapObjectInspector)oi);
  byte[] cfLong="cf-long".getBytes();
  kvs.clear();
  kvs.add(new KeyValue(rowKey,cfLong,Bytes.toBytes((long)1),Bytes.toBytes((long)1)));
  result=new Result(kvs);
  hbaseCellMap.init(result,cfLong,mapBinaryStorage);
  LongWritable expectedLongValue=new LongWritable(1);
  lazyPrimitive=(LazyPrimitive<?,?>)hbaseCellMap.getMapValueElement(expectedLongValue);
  assertEquals(expectedLongValue,lazyPrimitive.getWritableObject());
  kvs.clear();
  kvs.add(new KeyValue(rowKey,cfLong,Bytes.toBytes(Long.MIN_VALUE),Bytes.toBytes(Long.MIN_VALUE)));
  result=new Result(kvs);
  hbaseCellMap.init(result,cfLong,mapBinaryStorage);
  expectedLongValue=new LongWritable(Long.MIN_VALUE);
  lazyPrimitive=(LazyPrimitive<?,?>)hbaseCellMap.getMapValueElement(expectedLongValue);
  assertEquals(expectedLongValue,lazyPrimitive.getWritableObject());
  kvs.clear();
  kvs.add(new KeyValue(rowKey,cfLong,Bytes.toBytes(Long.MAX_VALUE),Bytes.toBytes(Long.MAX_VALUE)));
  result=new Result(kvs);
  hbaseCellMap.init(result,cfLong,mapBinaryStorage);
  expectedLongValue=new LongWritable(Long.MAX_VALUE);
  lazyPrimitive=(LazyPrimitive<?,?>)hbaseCellMap.getMapValueElement(expectedLongValue);
  assertEquals(expectedLongValue,lazyPrimitive.getWritableObject());
  TypeInfo mapBinaryFloatKeyValue=TypeInfoUtils.getTypeInfoFromTypeString("map<float,float>");
  oi=LazyFactory.createLazyObjectInspector(mapBinaryFloatKeyValue,new byte[]{(byte)1,(byte)2},0,nullSequence,false,(byte)0);
  hbaseCellMap=new LazyHBaseCellMap((LazyMapObjectInspector)oi);
  byte[] cfFloat="cf-float".getBytes();
  kvs.clear();
  kvs.add(new KeyValue(rowKey,cfFloat,Bytes.toBytes((float)1.0F),Bytes.toBytes((float)1.0F)));
  result=new Result(kvs);
  hbaseCellMap.init(result,cfFloat,mapBinaryStorage);
  FloatWritable expectedFloatValue=new FloatWritable(1.0F);
  lazyPrimitive=(LazyPrimitive<?,?>)hbaseCellMap.getMapValueElement(expectedFloatValue);
  assertEquals(expectedFloatValue,lazyPrimitive.getWritableObject());
  kvs.clear();
  kvs.add(new KeyValue(rowKey,cfFloat,Bytes.toBytes((float)Float.MIN_VALUE),Bytes.toBytes((float)Float.MIN_VALUE)));
  result=new Result(kvs);
  hbaseCellMap.init(result,cfFloat,mapBinaryStorage);
  expectedFloatValue=new FloatWritable(Float.MIN_VALUE);
  lazyPrimitive=(LazyPrimitive<?,?>)hbaseCellMap.getMapValueElement(expectedFloatValue);
  assertEquals(expectedFloatValue,lazyPrimitive.getWritableObject());
  kvs.clear();
  kvs.add(new KeyValue(rowKey,cfFloat,Bytes.toBytes((float)Float.MAX_VALUE),Bytes.toBytes((float)Float.MAX_VALUE)));
  result=new Result(kvs);
  hbaseCellMap.init(result,cfFloat,mapBinaryStorage);
  expectedFloatValue=new FloatWritable(Float.MAX_VALUE);
  lazyPrimitive=(LazyPrimitive<?,?>)hbaseCellMap.getMapValueElement(expectedFloatValue);
  assertEquals(expectedFloatValue,lazyPrimitive.getWritableObject());
  TypeInfo mapBinaryDoubleKeyValue=TypeInfoUtils.getTypeInfoFromTypeString("map<double,double>");
  oi=LazyFactory.createLazyObjectInspector(mapBinaryDoubleKeyValue,new byte[]{(byte)1,(byte)2},0,nullSequence,false,(byte)0);
  hbaseCellMap=new LazyHBaseCellMap((LazyMapObjectInspector)oi);
  byte[] cfDouble="cf-double".getBytes();
  kvs.clear();
  kvs.add(new KeyValue(rowKey,cfDouble,Bytes.toBytes(1.0),Bytes.toBytes(1.0)));
  result=new Result(kvs);
  hbaseCellMap.init(result,cfDouble,mapBinaryStorage);
  DoubleWritable expectedDoubleValue=new DoubleWritable(1.0);
  lazyPrimitive=(LazyPrimitive<?,?>)hbaseCellMap.getMapValueElement(expectedDoubleValue);
  assertEquals(expectedDoubleValue,lazyPrimitive.getWritableObject());
  kvs.clear();
  kvs.add(new KeyValue(rowKey,cfDouble,Bytes.toBytes(Double.MIN_VALUE),Bytes.toBytes(Double.MIN_VALUE)));
  result=new Result(kvs);
  hbaseCellMap.init(result,cfDouble,mapBinaryStorage);
  expectedDoubleValue=new DoubleWritable(Double.MIN_VALUE);
  lazyPrimitive=(LazyPrimitive<?,?>)hbaseCellMap.getMapValueElement(expectedDoubleValue);
  assertEquals(expectedDoubleValue,lazyPrimitive.getWritableObject());
  kvs.clear();
  kvs.add(new KeyValue(rowKey,cfDouble,Bytes.toBytes(Double.MAX_VALUE),Bytes.toBytes(Double.MAX_VALUE)));
  result=new Result(kvs);
  hbaseCellMap.init(result,cfDouble,mapBinaryStorage);
  expectedDoubleValue=new DoubleWritable(Double.MAX_VALUE);
  lazyPrimitive=(LazyPrimitive<?,?>)hbaseCellMap.getMapValueElement(expectedDoubleValue);
  assertEquals(expectedDoubleValue,lazyPrimitive.getWritableObject());
  TypeInfo mapBinaryBooleanKeyValue=TypeInfoUtils.getTypeInfoFromTypeString("map<boolean,boolean>");
  oi=LazyFactory.createLazyObjectInspector(mapBinaryBooleanKeyValue,new byte[]{(byte)1,(byte)2},0,nullSequence,false,(byte)0);
  hbaseCellMap=new LazyHBaseCellMap((LazyMapObjectInspector)oi);
  byte[] cfBoolean="cf-boolean".getBytes();
  kvs.clear();
  kvs.add(new KeyValue(rowKey,cfBoolean,Bytes.toBytes(false),Bytes.toBytes(false)));
  result=new Result(kvs);
  hbaseCellMap.init(result,cfBoolean,mapBinaryStorage);
  BooleanWritable expectedBooleanValue=new BooleanWritable(false);
  lazyPrimitive=(LazyPrimitive<?,?>)hbaseCellMap.getMapValueElement(expectedBooleanValue);
  assertEquals(expectedBooleanValue,lazyPrimitive.getWritableObject());
  kvs.clear();
  kvs.add(new KeyValue(rowKey,cfBoolean,Bytes.toBytes(true),Bytes.toBytes(true)));
  result=new Result(kvs);
  hbaseCellMap.init(result,cfBoolean,mapBinaryStorage);
  expectedBooleanValue=new BooleanWritable(true);
  lazyPrimitive=(LazyPrimitive<?,?>)hbaseCellMap.getMapValueElement(expectedBooleanValue);
  assertEquals(expectedBooleanValue,lazyPrimitive.getWritableObject());
}
