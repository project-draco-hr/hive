{
  final List<RexNode> operands;
switch (rex.getKind()) {
case AND:
    incrementAndCheck();
  operands=RexUtil.flattenAnd(((RexCall)rex).getOperands());
final List<RexNode> cnfOperands=Lists.newArrayList();
for (RexNode node : operands) {
RexNode cnf=toCnf2(node);
switch (cnf.getKind()) {
case AND:
  incrementAndCheck();
cnfOperands.addAll(((RexCall)cnf).getOperands());
break;
default :
incrementAndCheck();
cnfOperands.add(cnf);
}
}
return and(cnfOperands);
case OR:
incrementAndCheck();
operands=RexUtil.flattenOr(((RexCall)rex).getOperands());
final RexNode head=operands.get(0);
final RexNode headCnf=toCnf2(head);
final List<RexNode> headCnfs=RelOptUtil.conjunctions(headCnf);
final RexNode tail=or(Util.skip(operands));
final RexNode tailCnf=toCnf2(tail);
final List<RexNode> tailCnfs=RelOptUtil.conjunctions(tailCnf);
final List<RexNode> list=Lists.newArrayList();
for (RexNode h : headCnfs) {
for (RexNode t : tailCnfs) {
list.add(or(ImmutableList.of(h,t)));
}
}
return and(list);
case NOT:
final RexNode arg=((RexCall)rex).getOperands().get(0);
switch (arg.getKind()) {
case NOT:
return toCnf2(((RexCall)arg).getOperands().get(0));
case OR:
operands=((RexCall)arg).getOperands();
List<RexNode> transformedDisj=new ArrayList<>();
for (RexNode input : RexUtil.flattenOr(operands)) {
transformedDisj.add(rexBuilder.makeCall(input.getType(),SqlStdOperatorTable.NOT,ImmutableList.of(input)));
}
return toCnf2(and(transformedDisj));
case AND:
operands=((RexCall)arg).getOperands();
List<RexNode> transformedConj=new ArrayList<>();
for (RexNode input : RexUtil.flattenAnd(operands)) {
transformedConj.add(rexBuilder.makeCall(input.getType(),SqlStdOperatorTable.NOT,ImmutableList.of(input)));
}
return toCnf2(or(transformedConj));
default :
incrementAndCheck();
return rex;
}
default :
incrementAndCheck();
return rex;
}
}
