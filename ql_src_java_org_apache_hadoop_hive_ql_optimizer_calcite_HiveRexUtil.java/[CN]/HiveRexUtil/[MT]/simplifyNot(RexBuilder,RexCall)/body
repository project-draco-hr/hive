{
  final RexNode a=call.getOperands().get(0);
switch (a.getKind()) {
case NOT:
    return simplify(rexBuilder,((RexCall)a).getOperands().get(0));
}
final SqlKind negateKind=a.getKind().negate();
if (a.getKind() != negateKind) {
  return simplify(rexBuilder,rexBuilder.makeCall(op(negateKind),ImmutableList.of(((RexCall)a).getOperands().get(0))));
}
final SqlKind negateKind2=negate(a.getKind());
if (a.getKind() != negateKind2) {
  return simplify(rexBuilder,rexBuilder.makeCall(op(negateKind2),((RexCall)a).getOperands()));
}
if (a.getKind() == SqlKind.AND) {
  final List<RexNode> newOperands=new ArrayList<>();
  for (  RexNode operand : ((RexCall)a).getOperands()) {
    newOperands.add(simplify(rexBuilder,rexBuilder.makeCall(SqlStdOperatorTable.NOT,operand)));
  }
  return simplify(rexBuilder,rexBuilder.makeCall(SqlStdOperatorTable.OR,newOperands));
}
if (a.getKind() == SqlKind.OR) {
  final List<RexNode> newOperands=new ArrayList<>();
  for (  RexNode operand : ((RexCall)a).getOperands()) {
    newOperands.add(simplify(rexBuilder,rexBuilder.makeCall(SqlStdOperatorTable.NOT,operand)));
  }
  return simplify(rexBuilder,rexBuilder.makeCall(SqlStdOperatorTable.AND,newOperands));
}
return call;
}
