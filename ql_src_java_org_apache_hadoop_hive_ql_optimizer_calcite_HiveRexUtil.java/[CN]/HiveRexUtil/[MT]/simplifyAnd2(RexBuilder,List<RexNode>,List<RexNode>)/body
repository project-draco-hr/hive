{
  if (terms.contains(rexBuilder.makeLiteral(false))) {
    return rexBuilder.makeLiteral(false);
  }
  if (terms.isEmpty() && notTerms.isEmpty()) {
    return rexBuilder.makeLiteral(true);
  }
  if (terms.size() == 1 && notTerms.isEmpty()) {
    return simplify(rexBuilder,terms.get(0));
  }
  for (  RexNode notDisjunction : notTerms) {
    final List<RexNode> terms2=RelOptUtil.conjunctions(notDisjunction);
    if (terms.containsAll(terms2)) {
      return rexBuilder.makeLiteral(false);
    }
  }
  for (  RexNode notDisjunction : notTerms) {
    terms.add(simplify(rexBuilder,rexBuilder.makeCall(SqlStdOperatorTable.NOT,notDisjunction)));
  }
  return RexUtil.composeConjunction(rexBuilder,terms,false);
}
