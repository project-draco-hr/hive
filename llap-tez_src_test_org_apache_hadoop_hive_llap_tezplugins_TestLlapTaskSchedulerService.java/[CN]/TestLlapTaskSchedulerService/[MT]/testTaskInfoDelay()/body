{
  LlapTaskSchedulerService.LocalityDelayConf localityDelayConf1=new LlapTaskSchedulerService.LocalityDelayConf(3000);
  ControlledClock clock=new ControlledClock(new MonotonicClock());
  clock.setTime(clock.getTime());
  LlapTaskSchedulerService.TaskInfo taskInfo=new LlapTaskSchedulerService.TaskInfo(localityDelayConf1,clock,new Object(),new Object(),mock(Priority.class),mock(Resource.class),null,null,clock.getTime());
  assertFalse(taskInfo.shouldForceLocality());
  assertEquals(3000,taskInfo.getDelay(TimeUnit.MILLISECONDS));
  assertTrue(taskInfo.shouldDelayForLocality(clock.getTime()));
  clock.setTime(clock.getTime() + 500);
  assertEquals(2500,taskInfo.getDelay(TimeUnit.MILLISECONDS));
  assertTrue(taskInfo.shouldDelayForLocality(clock.getTime()));
  clock.setTime(clock.getTime() + 2500);
  assertEquals(0,taskInfo.getDelay(TimeUnit.MILLISECONDS));
  assertFalse(taskInfo.shouldDelayForLocality(clock.getTime()));
  LlapTaskSchedulerService.LocalityDelayConf localityDelayConf2=new LlapTaskSchedulerService.LocalityDelayConf(0);
  taskInfo=new LlapTaskSchedulerService.TaskInfo(localityDelayConf2,clock,new Object(),new Object(),mock(Priority.class),mock(Resource.class),null,null,clock.getTime());
  assertFalse(taskInfo.shouldDelayForLocality(clock.getTime()));
  assertFalse(taskInfo.shouldForceLocality());
  assertTrue(taskInfo.getDelay(TimeUnit.MILLISECONDS) < 0);
  LlapTaskSchedulerService.LocalityDelayConf localityDelayConf3=new LlapTaskSchedulerService.LocalityDelayConf(-1);
  taskInfo=new LlapTaskSchedulerService.TaskInfo(localityDelayConf3,clock,new Object(),new Object(),mock(Priority.class),mock(Resource.class),null,null,clock.getTime());
  assertTrue(taskInfo.shouldDelayForLocality(clock.getTime()));
  assertTrue(taskInfo.shouldForceLocality());
  assertFalse(taskInfo.getDelay(TimeUnit.MILLISECONDS) < 0);
}
