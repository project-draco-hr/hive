{
  key.numberRows=bufferedRecords;
  Compressor compressor=null;
  NonSyncDataOutputBuffer valueBuffer=null;
  CompressionOutputStream deflateFilter=null;
  DataOutputStream deflateOut=null;
  boolean isCompressed=isCompressed();
  int valueLength=0;
  if (isCompressed) {
    ReflectionUtils.setConf(codec,this.conf);
    compressor=CodecPool.getCompressor(codec);
    valueBuffer=new NonSyncDataOutputBuffer();
    deflateFilter=codec.createOutputStream(valueBuffer,compressor);
    deflateOut=new DataOutputStream(deflateFilter);
  }
  for (int columnIndex=0; columnIndex < columnNumber; columnIndex++) {
    ColumnBuffer currentBuf=columnBuffers[columnIndex];
    currentBuf.flushGroup();
    NonSyncDataOutputBuffer columnValue=currentBuf.columnValBuffer;
    int colLen;
    int plainLen=columnValuePlainLength[columnIndex];
    if (isCompressed) {
      if (deflateFilter instanceof SchemaAwareCompressionOutputStream) {
        ((SchemaAwareCompressionOutputStream)deflateFilter).setColumnIndex(columnIndex);
      }
      deflateFilter.resetState();
      deflateOut.write(columnValue.getData(),0,columnValue.getLength());
      deflateOut.flush();
      deflateFilter.finish();
      colLen=valueBuffer.getLength() - valueLength;
    }
 else {
      colLen=columnValuePlainLength[columnIndex];
    }
    valueLength+=colLen;
    key.setColumnLenInfo(colLen,currentBuf.valLenBuffer,plainLen,columnIndex);
    plainTotalColumnLength[columnIndex]+=plainLen;
    comprTotalColumnLength[columnIndex]+=colLen;
    columnValuePlainLength[columnIndex]=0;
  }
  int keyLength=key.getSize();
  if (keyLength < 0) {
    throw new IOException("negative length keys not allowed: " + key);
  }
  if (compressor != null) {
    CodecPool.returnCompressor(compressor);
  }
  writeKey(key,keyLength + valueLength,keyLength);
  if (isCompressed) {
    out.write(valueBuffer.getData(),0,valueBuffer.getLength());
  }
 else {
    for (int columnIndex=0; columnIndex < columnNumber; ++columnIndex) {
      NonSyncDataOutputBuffer buf=columnBuffers[columnIndex].columnValBuffer;
      out.write(buf.getData(),0,buf.getLength());
    }
  }
  clearColumnBuffers();
  bufferedRecords=0;
  columnBufferSize=0;
}
