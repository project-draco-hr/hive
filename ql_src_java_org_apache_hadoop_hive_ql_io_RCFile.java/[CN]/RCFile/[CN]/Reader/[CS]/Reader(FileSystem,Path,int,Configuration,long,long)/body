{
  conf.setInt("io.file.buffer.size",bufferSize);
  this.file=file;
  in=fs.open(file,bufferSize);
  this.conf=conf;
  end=start + length;
  if (start > 0) {
    seek(0);
    init();
    seek(start);
  }
 else {
    init();
  }
  columnNumber=Integer.parseInt(metadata.get(new Text(COLUMN_NUMBER_METADATA_STR)).toString());
  java.util.ArrayList<Integer> notSkipIDs=HiveFileFormatUtils.getReadColumnIDs(conf);
  skippedColIDs=new boolean[columnNumber];
  if (notSkipIDs.size() > 0) {
    for (int i=0; i < skippedColIDs.length; i++) {
      skippedColIDs[i]=true;
    }
    for (    int read : notSkipIDs) {
      if (read < columnNumber)       skippedColIDs[read]=false;
    }
  }
 else {
    for (int i=0; i < skippedColIDs.length; i++) {
      skippedColIDs[i]=false;
    }
  }
  loadColumnNum=columnNumber;
  if (skippedColIDs != null && skippedColIDs.length > 0) {
    for (int i=0; i < skippedColIDs.length; i++) {
      if (skippedColIDs[i])       loadColumnNum-=1;
    }
  }
  colValLenBufferReadIn=new NonSyncDataInputBuffer[columnNumber];
  columnRowReadIndex=new int[columnNumber];
  for (int i=0; i < columnNumber; i++) {
    columnRowReadIndex[i]=0;
    if (!skippedColIDs[i])     colValLenBufferReadIn[i]=new NonSyncDataInputBuffer();
  }
  currentKey=createKeyBuffer();
  currentValue=new ValueBuffer(null,columnNumber,skippedColIDs,codec);
}
