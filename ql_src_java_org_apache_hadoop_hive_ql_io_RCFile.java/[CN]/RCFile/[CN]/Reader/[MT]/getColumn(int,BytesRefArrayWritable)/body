{
  int selColIdx=revPrjColIDs[columnID];
  if (selColIdx == -1) {
    return null;
  }
  if (rest == null) {
    rest=new BytesRefArrayWritable();
  }
  rest.resetValid(recordsNumInValBuffer);
  if (!currentValue.inited) {
    currentValueBuffer();
  }
  int columnNextRowStart=0;
  fetchColumnTempBuf.reset(currentKey.allCellValLenBuffer[columnID].getData(),currentKey.allCellValLenBuffer[columnID].getLength());
  SelectedColumn selCol=selectedColumns[selColIdx];
  byte[] uncompData=null;
  ValueBuffer.LazyDecompressionCallbackImpl decompCallBack=null;
  boolean decompressed=currentValue.decompressedFlag[selColIdx];
  if (decompressed) {
    uncompData=currentValue.loadedColumnsValueBuffer[selColIdx].getData();
  }
 else {
    decompCallBack=currentValue.lazyDecompressCallbackObjs[selColIdx];
  }
  for (int i=0; i < recordsNumInValBuffer; i++) {
    colAdvanceRow(selColIdx,selCol);
    int length=selCol.prvLength;
    BytesRefWritable currentCell=rest.get(i);
    if (decompressed) {
      currentCell.set(uncompData,columnNextRowStart,length);
    }
 else {
      currentCell.set(decompCallBack,columnNextRowStart,length);
    }
    columnNextRowStart=columnNextRowStart + length;
  }
  return rest;
}
