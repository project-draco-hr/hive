{
  seekToNextKeyBuffer();
  currentRecordLength=readRecordLength();
  if (currentRecordLength == -1) {
    keyInit=false;
    return -1;
  }
  currentKeyLength=in.readInt();
  compressedKeyLen=in.readInt();
  if (decompress) {
    keyTempBuffer.reset();
    keyTempBuffer.write(in,compressedKeyLen);
    keyDecompressBuffer.reset(keyTempBuffer.getData(),compressedKeyLen);
    CompressionInputStream deflatFilter=codec.createInputStream(keyDecompressBuffer,keyDecompressor);
    DataInputStream compressedIn=new DataInputStream(deflatFilter);
    deflatFilter.resetState();
    keyDecompressedData.reset();
    keyDecompressedData.write(compressedIn,currentKeyLength);
    keyDataIn.reset(keyDecompressedData.getData(),currentKeyLength);
    currentKey.readFields(keyDataIn);
  }
 else {
    currentKey.readFields(in);
  }
  keyInit=true;
  currentValue.inited=false;
  readRowsIndexInBuffer=0;
  recordsNumInValBuffer=currentKey.numberRows;
  for (int selIx=0; selIx < selectedColumns.length; selIx++) {
    SelectedColumn col=selectedColumns[selIx];
    int colIx=col.colIndex;
    NonSyncDataOutputBuffer buf=currentKey.allCellValLenBuffer[colIx];
    colValLenBufferReadIn[selIx].reset(buf.getData(),buf.getLength());
    col.rowReadIndex=0;
    col.runLength=0;
    col.prvLength=-1;
  }
  return currentKeyLength;
}
