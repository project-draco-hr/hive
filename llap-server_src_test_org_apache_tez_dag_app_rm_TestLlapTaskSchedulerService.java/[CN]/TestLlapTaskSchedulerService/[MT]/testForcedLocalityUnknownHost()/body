{
  Priority priority1=Priority.newInstance(1);
  String[] hostsKnown=new String[]{HOST1};
  String[] hostsUnknown=new String[]{HOST2};
  TestTaskSchedulerServiceWrapper tsWrapper=new TestTaskSchedulerServiceWrapper(2000,hostsKnown,1,1,-1l);
  try {
    Object task1="task1";
    Object clientCookie1="cookie1";
    Object task2="task2";
    Object clientCookie2="cookie2";
    tsWrapper.controlScheduler(true);
    tsWrapper.allocateTask(task1,hostsUnknown,priority1,clientCookie1);
    tsWrapper.allocateTask(task2,hostsKnown,priority1,clientCookie2);
    while (true) {
      tsWrapper.signalSchedulerRun();
      tsWrapper.awaitSchedulerRun();
      if (tsWrapper.ts.dagStats.numTotalAllocations == 2) {
        break;
      }
    }
    ArgumentCaptor<Object> argumentCaptor=ArgumentCaptor.forClass(Object.class);
    verify(tsWrapper.mockAppCallback,times(2)).taskAllocated(argumentCaptor.capture(),any(Object.class),any(Container.class));
    assertEquals(2,argumentCaptor.getAllValues().size());
    assertEquals(task1,argumentCaptor.getAllValues().get(0));
    assertEquals(task2,argumentCaptor.getAllValues().get(1));
  }
  finally {
    tsWrapper.shutdown();
  }
}
