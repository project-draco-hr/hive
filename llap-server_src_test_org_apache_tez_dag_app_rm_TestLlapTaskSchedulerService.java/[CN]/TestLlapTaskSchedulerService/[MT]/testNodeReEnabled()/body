{
  TestTaskSchedulerServiceWrapper tsWrapper=new TestTaskSchedulerServiceWrapper(1000l);
  try {
    Priority priority1=Priority.newInstance(1);
    String[] hosts1=new String[]{HOST1};
    String[] hosts2=new String[]{HOST2};
    String[] hosts3=new String[]{HOST3};
    Object task1=new Object();
    Object clientCookie1=new Object();
    Object task2=new Object();
    Object clientCookie2=new Object();
    Object task3=new Object();
    Object clientCookie3=new Object();
    tsWrapper.allocateTask(task1,hosts1,priority1,clientCookie1);
    tsWrapper.allocateTask(task2,hosts2,priority1,clientCookie2);
    tsWrapper.allocateTask(task3,hosts3,priority1,clientCookie3);
    verify(tsWrapper.mockAppCallback,times(3)).taskAllocated(any(Object.class),any(Object.class),any(Container.class));
    assertEquals(3,tsWrapper.ts.dagStats.numLocalAllocations);
    assertEquals(0,tsWrapper.ts.dagStats.numAllocationsNoLocalityRequest);
    tsWrapper.resetAppCallback();
    tsWrapper.rejectExecution(task1);
    tsWrapper.rejectExecution(task2);
    tsWrapper.rejectExecution(task3);
    assertEquals(3,tsWrapper.ts.dagStats.numRejectedTasks);
    assertEquals(0,tsWrapper.ts.instanceToNodeMap.size());
    assertEquals(3,tsWrapper.ts.disabledNodes.size());
    Object task4=new Object();
    Object clientCookie4=new Object();
    Object task5=new Object();
    Object clientCookie5=new Object();
    Object task6=new Object();
    Object clientCookie6=new Object();
    tsWrapper.allocateTask(task4,hosts1,priority1,clientCookie4);
    tsWrapper.allocateTask(task5,hosts2,priority1,clientCookie5);
    tsWrapper.allocateTask(task6,hosts3,priority1,clientCookie6);
    Thread.sleep(3000l);
    ArgumentCaptor<Container> argumentCaptor=ArgumentCaptor.forClass(Container.class);
    verify(tsWrapper.mockAppCallback,times(3)).taskAllocated(any(Object.class),any(Object.class),argumentCaptor.capture());
    assertEquals(4,tsWrapper.ts.dagStats.numLocalAllocations);
    assertEquals(0,tsWrapper.ts.dagStats.numAllocationsNoLocalityRequest);
    assertEquals(2,tsWrapper.ts.dagStats.numNonLocalAllocations);
  }
  finally {
    tsWrapper.shutdown();
  }
}
