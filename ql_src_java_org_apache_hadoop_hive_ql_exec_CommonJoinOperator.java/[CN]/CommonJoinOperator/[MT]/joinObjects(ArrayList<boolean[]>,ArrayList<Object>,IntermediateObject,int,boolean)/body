{
  ArrayList<boolean[]> resNulls=new ArrayList<boolean[]>();
  boolean newObjNull=newObj == dummyObj[joinPos] ? true : false;
  if (joinPos == 0) {
    if (newObjNull)     return null;
    boolean[] nulls=new boolean[1];
    nulls[0]=newObjNull;
    resNulls.add(nulls);
    return resNulls;
  }
  int left=condn[joinPos - 1].getLeft();
  int type=condn[joinPos - 1].getType();
  if (((type == joinDesc.RIGHT_OUTER_JOIN) || (type == joinDesc.FULL_OUTER_JOIN)) && !newObjNull && (inputNulls == null)&& firstRow) {
    boolean[] newNulls=new boolean[intObj.getCurSize()];
    for (int i=0; i < newNulls.length - 1; i++)     newNulls[i]=true;
    newNulls[newNulls.length - 1]=false;
    resNulls.add(newNulls);
    return resNulls;
  }
  if (inputNulls == null)   return null;
  if (type == joinDesc.INNER_JOIN)   return joinObjectsInnerJoin(resNulls,inputNulls,newObj,intObj,left,newObjNull);
 else   if (type == joinDesc.LEFT_OUTER_JOIN)   return joinObjectsLeftOuterJoin(resNulls,inputNulls,newObj,intObj,left,newObjNull);
 else   if (type == joinDesc.RIGHT_OUTER_JOIN)   return joinObjectsRightOuterJoin(resNulls,inputNulls,newObj,intObj,left,newObjNull,firstRow);
  assert(type == joinDesc.FULL_OUTER_JOIN);
  return joinObjectsFullOuterJoin(resNulls,inputNulls,newObj,intObj,left,newObjNull,firstRow);
}
