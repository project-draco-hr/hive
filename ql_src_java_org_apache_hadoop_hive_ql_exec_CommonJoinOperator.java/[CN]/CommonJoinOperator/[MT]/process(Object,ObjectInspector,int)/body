{
  try {
    alias=(byte)tag;
    if ((lastAlias == null) || (!lastAlias.equals(alias)))     nextSz=joinEmitInterval;
    ArrayList<Object> nr=computeValues(row,rowInspector,joinValues.get(alias),joinValuesObjectInspectors);
    int sz=storage.get(alias).size();
    if (alias == numValues - 1) {
      if (sz == joinEmitInterval) {
        checkAndGenObject();
        storage.get(alias).clear();
      }
    }
 else {
      if (sz == nextSz) {
        StructObjectInspector soi=(StructObjectInspector)rowInspector;
        StructField sf=soi.getStructFieldRef(Utilities.ReduceField.KEY.toString());
        Object keyObject=soi.getStructFieldData(row,sf);
        LOG.warn("table " + alias + " has "+ sz+ " rows for join key "+ keyObject);
        nextSz=getNextSize(nextSz);
      }
    }
    storage.get(alias).add(nr);
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new HiveException(e);
  }
}
