{
  boolean childFirstRow=firstRow;
  boolean skipping=false;
  if (aliasNum < numAliases) {
    AbstractRowContainer<ArrayList<Object>> aliasRes=storage[order[aliasNum]];
    for (ArrayList<Object> newObj=aliasRes.first(); newObj != null; newObj=aliasRes.next()) {
      if (aliasNum > 0 && condn[aliasNum - 1].getType() == JoinDesc.LEFT_SEMI_JOIN && newObj != dummyObj[aliasNum]) {
        skipping=true;
      }
      intObj.pushObj(newObj);
      ArrayList<boolean[]> newNulls=joinObjects(inputNulls,newObj,intObj,aliasNum,childFirstRow);
      genObject(newNulls,aliasNum + 1,intObj,firstRow);
      intObj.popObj();
      firstRow=false;
      if (skipping) {
        break;
      }
    }
  }
 else {
    if (inputNulls == null) {
      return;
    }
    Iterator<boolean[]> nullsIter=inputNulls.iterator();
    while (nullsIter.hasNext()) {
      boolean[] nullsVec=nullsIter.next();
      createForwardJoinObject(intObj,nullsVec);
    }
  }
}
