{
  if (state == State.CLOSE) {
    LOG.warn("checkAndGenObject is called after operator " + id + " "+ getName()+ " closed");
    return;
  }
  if (condn[0].getType() == JoinDesc.UNIQUE_JOIN) {
    boolean preserve=false;
    boolean hasNulls=false;
    boolean allOne=true;
    for (int i=0; i < numAliases; i++) {
      Byte alias=order[i];
      AbstractRowContainer<List<Object>> alw=storage[alias];
      if (!alw.isSingleRow()) {
        allOne=false;
      }
      if (!alw.hasRows()) {
        alw.addRow(dummyObj[i]);
        hasNulls=true;
      }
 else       if (condn[i].getPreserved()) {
        preserve=true;
      }
    }
    if (hasNulls && !preserve) {
      return;
    }
    if (allOne) {
      genAllOneUniqueJoinObject();
    }
 else {
      genUniqueJoinObject(0,0);
    }
  }
 else {
    boolean mayHasMoreThanOne=false;
    boolean hasEmpty=false;
    for (int i=0; i < numAliases; i++) {
      Byte alias=order[i];
      AbstractRowContainer<List<Object>> alw=storage[alias];
      if (noOuterJoin) {
        if (!alw.hasRows()) {
          return;
        }
 else         if (!alw.isSingleRow()) {
          mayHasMoreThanOne=true;
        }
      }
 else {
        if (!alw.hasRows()) {
          hasEmpty=true;
          alw.addRow(dummyObj[i]);
        }
 else         if (!hasEmpty && alw.isSingleRow()) {
          if (hasAnyFiltered(alias,alw.rowIter().first())) {
            hasEmpty=true;
          }
        }
 else {
          mayHasMoreThanOne=true;
          if (!hasEmpty) {
            AbstractRowContainer.RowIterator<List<Object>> iter=alw.rowIter();
            for (List<Object> row=iter.first(); row != null; row=iter.next()) {
              reportProgress();
              if (hasAnyFiltered(alias,row)) {
                hasEmpty=true;
                break;
              }
            }
          }
        }
      }
    }
    if (!hasEmpty && !mayHasMoreThanOne) {
      genAllOneUniqueJoinObject();
    }
 else     if (!hasEmpty && !hasLeftSemiJoin) {
      genUniqueJoinObject(0,0);
    }
 else {
      genJoinObject();
    }
  }
  Arrays.fill(aliasFilterTags,(byte)0xff);
}
