{
  if (condn[0].getType() == JoinDesc.UNIQUE_JOIN) {
    new IntermediateObject(new ArrayList[numAliases],0);
    boolean preserve=false;
    boolean hasNulls=false;
    boolean allOne=true;
    for (int i=0; i < numAliases; i++) {
      Byte alias=order[i];
      AbstractRowContainer<ArrayList<Object>> alw=storage.get(alias);
      if (alw.size() != 1) {
        allOne=false;
      }
      if (alw.size() == 0) {
        alw.add((ArrayList<Object>)dummyObj[i]);
        hasNulls=true;
      }
 else       if (condn[i].getPreserved()) {
        preserve=true;
      }
    }
    if (hasNulls && !preserve) {
      return;
    }
    if (allOne) {
      LOG.info("calling genAllOneUniqueJoinObject");
      genAllOneUniqueJoinObject();
      LOG.info("called genAllOneUniqueJoinObject");
    }
 else {
      LOG.trace("calling genUniqueJoinObject");
      genUniqueJoinObject(0,0);
      LOG.trace("called genUniqueJoinObject");
    }
  }
 else {
    boolean mayHasMoreThanOne=false;
    boolean hasEmpty=false;
    for (int i=0; i < numAliases; i++) {
      Byte alias=order[i];
      AbstractRowContainer<ArrayList<Object>> alw=storage.get(alias);
      if (noOuterJoin) {
        if (alw.size() == 0) {
          LOG.trace("No data for alias=" + i);
          return;
        }
 else         if (alw.size() > 1) {
          mayHasMoreThanOne=true;
        }
      }
 else {
        if (alw.size() == 0) {
          hasEmpty=true;
          alw.add((ArrayList<Object>)dummyObj[i]);
        }
 else         if (!hasEmpty && alw.size() == 1) {
          ArrayList<Object> row=alw.first();
          int numValues=joinValues.get(alias).size();
          if (row == dummyObj[alias] || (row.size() > numValues && ((BooleanWritable)(row.get(numValues))).get())) {
            hasEmpty=true;
          }
        }
 else {
          mayHasMoreThanOne=true;
          if (!hasEmpty) {
            int numValues=joinValues.get(alias).size();
            for (ArrayList<Object> row=alw.first(); row != null; row=alw.next()) {
              if (row == dummyObj[alias] || (row.size() > numValues && ((BooleanWritable)(row.get(numValues))).get())) {
                hasEmpty=true;
                break;
              }
            }
          }
        }
      }
    }
    if (!hasEmpty && !mayHasMoreThanOne) {
      LOG.trace("calling genAllOneUniqueJoinObject");
      genAllOneUniqueJoinObject();
      LOG.trace("called genAllOneUniqueJoinObject");
    }
 else     if (!hasEmpty) {
      LOG.trace("calling genUniqueJoinObject");
      genUniqueJoinObject(0,0);
      LOG.trace("called genUniqueJoinObject");
    }
 else {
      LOG.trace("calling genObject");
      genObject(null,0,new IntermediateObject(new ArrayList[numAliases],0),true);
      LOG.trace("called genObject");
    }
  }
}
