{
  this.handleSkewJoin=conf.getHandleSkewJoin();
  this.hconf=hconf;
  heartbeatInterval=HiveConf.getIntVar(hconf,HiveConf.ConfVars.HIVESENDHEARTBEAT);
  countAfterReport=0;
  totalSz=0;
  int tagLen=conf.getTagLength();
  storage=new AbstractRowContainer[tagLen];
  numAliases=conf.getExprs().size();
  joinValues=new List[tagLen];
  joinFilters=new List[tagLen];
  order=conf.getTagOrder();
  condn=conf.getConds();
  nullsafes=conf.getNullSafes();
  noOuterJoin=conf.isNoOuterJoin();
  totalSz=JoinUtil.populateJoinKeyValue(joinValues,conf.getExprs(),order,NOTSKIPBIGTABLE);
  joinFilters=new List[tagLen];
  JoinUtil.populateJoinKeyValue(joinFilters,conf.getFilters(),order,NOTSKIPBIGTABLE);
  joinValuesObjectInspectors=JoinUtil.getObjectInspectorsFromEvaluators(joinValues,inputObjInspectors,NOTSKIPBIGTABLE,tagLen);
  joinFilterObjectInspectors=JoinUtil.getObjectInspectorsFromEvaluators(joinFilters,inputObjInspectors,NOTSKIPBIGTABLE,tagLen);
  joinValuesStandardObjectInspectors=JoinUtil.getStandardObjectInspectors(joinValuesObjectInspectors,NOTSKIPBIGTABLE,tagLen);
  filterMaps=conf.getFilterMap();
  if (noOuterJoin) {
    rowContainerStandardObjectInspectors=joinValuesStandardObjectInspectors;
  }
 else {
    List<ObjectInspector>[] rowContainerObjectInspectors=new List[tagLen];
    for (    Byte alias : order) {
      ArrayList<ObjectInspector> rcOIs=new ArrayList<ObjectInspector>();
      rcOIs.addAll(joinValuesObjectInspectors[alias]);
      rcOIs.add(PrimitiveObjectInspectorFactory.writableShortObjectInspector);
      rowContainerObjectInspectors[alias]=rcOIs;
    }
    rowContainerStandardObjectInspectors=JoinUtil.getStandardObjectInspectors(rowContainerObjectInspectors,NOTSKIPBIGTABLE,tagLen);
  }
  dummyObj=new ArrayList[numAliases];
  dummyObjVectors=new RowContainer[numAliases];
  joinEmitInterval=HiveConf.getIntVar(hconf,HiveConf.ConfVars.HIVEJOINEMITINTERVAL);
  joinCacheSize=HiveConf.getIntVar(hconf,HiveConf.ConfVars.HIVEJOINCACHESIZE);
  byte pos=0;
  for (  Byte alias : order) {
    int sz=conf.getExprs().get(alias).size();
    ArrayList<Object> nr=new ArrayList<Object>(sz);
    for (int j=0; j < sz; j++) {
      nr.add(null);
    }
    if (!noOuterJoin) {
      nr.add(new ShortWritable());
    }
    dummyObj[pos]=nr;
    RowContainer<List<Object>> values=JoinUtil.getRowContainer(hconf,rowContainerStandardObjectInspectors[pos],alias,1,spillTableDesc,conf,!hasFilter(pos),reporter);
    values.addRow(dummyObj[pos]);
    dummyObjVectors[pos]=values;
    RowContainer<List<Object>> rc=JoinUtil.getRowContainer(hconf,rowContainerStandardObjectInspectors[pos],alias,joinCacheSize,spillTableDesc,conf,!hasFilter(pos),reporter);
    storage[pos]=rc;
    pos++;
  }
  forwardCache=new Object[totalSz];
  aliasFilterTags=new short[numAliases];
  Arrays.fill(aliasFilterTags,(byte)0xff);
  filterTags=new short[numAliases];
  skipVectors=new boolean[numAliases][];
  for (int i=0; i < skipVectors.length; i++) {
    skipVectors[i]=new boolean[i + 1];
  }
  intermediate=new List[numAliases];
  offsets=new int[numAliases + 1];
  int sum=0;
  for (int i=0; i < numAliases; i++) {
    offsets[i]=sum;
    sum+=joinValues[order[i]].size();
  }
  offsets[numAliases]=sum;
  outputObjInspector=getJoinOutputObjectInspector(order,joinValuesStandardObjectInspectors,conf);
  for (int i=0; i < condn.length; i++) {
    if (condn[i].getType() == JoinDesc.LEFT_SEMI_JOIN) {
      hasLeftSemiJoin=true;
    }
  }
  if (isLogInfoEnabled) {
    LOG.info("JOIN " + outputObjInspector.getTypeName() + " totalsz = "+ totalSz);
  }
}
