{
  LOG.info("COMMONJOIN " + ((StructObjectInspector)inputObjInspectors[0]).getTypeName());
  totalSz=0;
  storage=new HashMap<Byte,RowContainer<ArrayList<Object>>>();
  numAliases=conf.getExprs().size();
  joinValues=new HashMap<Byte,List<ExprNodeEvaluator>>();
  if (order == null) {
    order=conf.getTagOrder();
  }
  condn=conf.getConds();
  noOuterJoin=conf.getNoOuterJoin();
  totalSz=populateJoinKeyValue(joinValues,conf.getExprs());
  joinValuesObjectInspectors=getObjectInspectorsFromEvaluators(joinValues,inputObjInspectors);
  joinValuesStandardObjectInspectors=getStandardObjectInspectors(joinValuesObjectInspectors);
  dummyObj=new Object[numAliases];
  dummyObjVectors=new RowContainer[numAliases];
  joinEmitInterval=HiveConf.getIntVar(hconf,HiveConf.ConfVars.HIVEJOINEMITINTERVAL);
  joinCacheSize=HiveConf.getIntVar(hconf,HiveConf.ConfVars.HIVEJOINCACHESIZE);
  byte pos=0;
  for (  Byte alias : order) {
    int sz=conf.getExprs().get(alias).size();
    ArrayList<Object> nr=new ArrayList<Object>(sz);
    for (int j=0; j < sz; j++)     nr.add(null);
    dummyObj[pos]=nr;
    RowContainer<ArrayList<Object>> values=new RowContainer<ArrayList<Object>>(1);
    values.add((ArrayList<Object>)dummyObj[pos]);
    dummyObjVectors[pos]=values;
    SerDe serde=getSpillSerDe(pos);
    if (serde != null) {
      RowContainer rc=new RowContainer(joinCacheSize);
      List<String> colList=new ArrayList<String>();
      for (int i=0; i < sz; ++i)       colList.add(alias + "_VAL_" + i);
      StructObjectInspector rcOI=ObjectInspectorFactory.getStandardStructObjectInspector(colList,joinValuesStandardObjectInspectors.get(pos));
      rc.setSerDe(serde,rcOI);
      storage.put(pos,rc);
    }
 else {
      storage.put(pos,new RowContainer(1));
    }
    pos++;
  }
  forwardCache=new Object[totalSz];
  outputObjInspector=getJoinOutputObjectInspector(order,joinValuesStandardObjectInspectors,conf);
  LOG.info("JOIN " + ((StructObjectInspector)outputObjInspector).getTypeName() + " totalsz = "+ totalSz);
}
