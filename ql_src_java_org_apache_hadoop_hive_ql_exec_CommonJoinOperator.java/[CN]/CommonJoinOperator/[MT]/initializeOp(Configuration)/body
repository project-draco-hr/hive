{
  this.handleSkewJoin=conf.getHandleSkewJoin();
  this.hconf=hconf;
  heartbeatInterval=HiveConf.getIntVar(hconf,HiveConf.ConfVars.HIVESENDHEARTBEAT);
  countAfterReport=0;
  totalSz=0;
  storage=new HashMap<Byte,RowContainer<ArrayList<Object>>>();
  numAliases=conf.getExprs().size();
  joinValues=new HashMap<Byte,List<ExprNodeEvaluator>>();
  joinFilters=new HashMap<Byte,List<ExprNodeEvaluator>>();
  if (order == null) {
    order=conf.getTagOrder();
  }
  condn=conf.getConds();
  noOuterJoin=conf.isNoOuterJoin();
  totalSz=populateJoinKeyValue(joinValues,conf.getExprs());
  populateJoinKeyValue(joinFilters,conf.getFilters());
  joinValuesObjectInspectors=getObjectInspectorsFromEvaluators(joinValues,inputObjInspectors);
  joinFilterObjectInspectors=getObjectInspectorsFromEvaluators(joinFilters,inputObjInspectors);
  joinValuesStandardObjectInspectors=getStandardObjectInspectors(joinValuesObjectInspectors);
  if (noOuterJoin) {
    rowContainerStandardObjectInspectors=joinValuesStandardObjectInspectors;
  }
 else {
    Map<Byte,List<ObjectInspector>> rowContainerObjectInspectors=new HashMap<Byte,List<ObjectInspector>>();
    for (    Byte alias : order) {
      ArrayList<ObjectInspector> rcOIs=new ArrayList<ObjectInspector>();
      rcOIs.addAll(joinValuesObjectInspectors.get(alias));
      rcOIs.add(PrimitiveObjectInspectorFactory.writableBooleanObjectInspector);
      rowContainerObjectInspectors.put(alias,rcOIs);
    }
    rowContainerStandardObjectInspectors=getStandardObjectInspectors(rowContainerObjectInspectors);
  }
  dummyObj=new Object[numAliases];
  dummyObjVectors=new RowContainer[numAliases];
  joinEmitInterval=HiveConf.getIntVar(hconf,HiveConf.ConfVars.HIVEJOINEMITINTERVAL);
  joinCacheSize=HiveConf.getIntVar(hconf,HiveConf.ConfVars.HIVEJOINCACHESIZE);
  byte pos=0;
  for (  Byte alias : order) {
    int sz=conf.getExprs().get(alias).size();
    ArrayList<Object> nr=new ArrayList<Object>(sz);
    for (int j=0; j < sz; j++) {
      nr.add(null);
    }
    if (!noOuterJoin) {
      nr.add(new BooleanWritable(false));
    }
    dummyObj[pos]=nr;
    RowContainer<ArrayList<Object>> values=getRowContainer(hconf,pos,alias,1);
    values.add((ArrayList<Object>)dummyObj[pos]);
    dummyObjVectors[pos]=values;
    RowContainer rc=getRowContainer(hconf,pos,alias,joinCacheSize);
    storage.put(pos,rc);
    pos++;
  }
  forwardCache=new Object[totalSz];
  outputObjInspector=getJoinOutputObjectInspector(order,joinValuesStandardObjectInspectors,conf);
  LOG.info("JOIN " + ((StructObjectInspector)outputObjInspector).getTypeName() + " totalsz = "+ totalSz);
}
