{
  if (newObjNull) {
    Iterator<boolean[]> nullsIter=inputNulls.iterator();
    while (nullsIter.hasNext()) {
      boolean[] oldNulls=nullsIter.next();
      boolean[] newNulls=new boolean[intObj.getCurSize()];
      copyOldArray(oldNulls,newNulls);
      newNulls[oldNulls.length]=newObjNull;
      resNulls.add(newNulls);
    }
    return resNulls;
  }
  if (inputNulls.isEmpty() && firstRow) {
    boolean[] newNulls=new boolean[intObj.getCurSize()];
    for (int i=0; i < intObj.getCurSize() - 1; i++) {
      newNulls[i]=true;
    }
    newNulls[intObj.getCurSize() - 1]=newObjNull;
    resNulls.add(newNulls);
    return resNulls;
  }
  boolean allOldObjsNull=firstRow;
  Iterator<boolean[]> nullsIter=inputNulls.iterator();
  while (nullsIter.hasNext()) {
    boolean[] oldNulls=nullsIter.next();
    if (!oldNulls[left]) {
      allOldObjsNull=false;
      break;
    }
  }
  if (isRightFiltered(left,right,newObj)) {
    allOldObjsNull=true;
  }
  boolean rhsPreserved=false;
  nullsIter=inputNulls.iterator();
  while (nullsIter.hasNext()) {
    boolean[] oldNulls=nullsIter.next();
    boolean oldObjNull=oldNulls[left] || allOldObjsNull || isLeftFiltered(left,right,intObj.getObjs()[left]);
    if (!oldObjNull) {
      boolean[] newNulls=new boolean[intObj.getCurSize()];
      copyOldArray(oldNulls,newNulls);
      newNulls[oldNulls.length]=newObjNull;
      resNulls.add(newNulls);
    }
 else     if (oldObjNull) {
      boolean[] newNulls=new boolean[intObj.getCurSize()];
      copyOldArray(oldNulls,newNulls);
      newNulls[oldNulls.length]=true;
      resNulls.add(newNulls);
      if (allOldObjsNull && !rhsPreserved) {
        newNulls=new boolean[intObj.getCurSize()];
        for (int i=0; i < oldNulls.length; i++) {
          newNulls[i]=true;
        }
        newNulls[oldNulls.length]=false;
        resNulls.add(newNulls);
        rhsPreserved=true;
      }
    }
  }
  return resNulls;
}
