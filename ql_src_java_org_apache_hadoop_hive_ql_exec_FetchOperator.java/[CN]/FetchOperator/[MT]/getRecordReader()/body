{
  if (!iterSplits.hasNext()) {
    FetchInputFormatSplit[] splits=getNextSplits();
    if (splits == null) {
      return null;
    }
    if (!isPartitioned || convertedOI == null) {
      currSerDe=tableSerDe;
      ObjectConverter=null;
    }
 else {
      currSerDe=needConversion(currDesc) ? currDesc.getDeserializer(job) : tableSerDe;
      ObjectInspector inputOI=currSerDe.getObjectInspector();
      ObjectConverter=ObjectInspectorConverters.getConverter(inputOI,convertedOI);
    }
    if (isPartitioned) {
      row[1]=createPartValue(currDesc,partKeyOI);
    }
    iterSplits=Arrays.asList(splits).iterator();
    if (LOG.isDebugEnabled()) {
      LOG.debug("Creating fetchTask with deserializer typeinfo: " + currSerDe.getObjectInspector().getTypeName());
      LOG.debug("deserializer properties:\ntable properties: " + currDesc.getTableDesc().getProperties() + "\npartition properties: "+ currDesc.getProperties());
    }
  }
  final FetchInputFormatSplit target=iterSplits.next();
  @SuppressWarnings("unchecked") final RecordReader<WritableComparable,Writable> reader=target.getRecordReader(job);
  if (hasVC || work.getSplitSample() != null) {
    currRecReader=new HiveRecordReader<WritableComparable,Writable>(reader,job){
      @Override public boolean doNext(      WritableComparable key,      Writable value) throws IOException {
        if (target.shrinkedLength > 0 && context.getIoCxt().getCurrentBlockStart() > target.shrinkedLength) {
          return false;
        }
        return super.doNext(key,value);
      }
    }
;
    ((HiveContextAwareRecordReader)currRecReader).initIOContext(target,job,target.inputFormat.getClass(),reader);
  }
 else {
    currRecReader=reader;
  }
  key=currRecReader.createKey();
  value=currRecReader.createValue();
  headerCount=footerCount=0;
  return currRecReader;
}
