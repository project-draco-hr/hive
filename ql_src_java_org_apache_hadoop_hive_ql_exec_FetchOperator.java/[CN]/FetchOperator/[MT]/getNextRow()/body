{
  try {
    while (true) {
      boolean opNotEOF=true;
      if (context != null) {
        context.resetRow();
      }
      if (currRecReader == null) {
        currRecReader=getRecordReader();
        if (currRecReader == null) {
          return null;
        }
        headerCount=0;
        footerCount=0;
        TableDesc table=null;
        if (currTbl != null) {
          table=currTbl;
        }
 else         if (currPart != null) {
          table=currPart.getTableDesc();
        }
        if (table != null) {
          headerCount=Utilities.getHeaderCount(table);
          footerCount=Utilities.getFooterCount(table,job);
        }
        opNotEOF=Utilities.skipHeader(currRecReader,headerCount,key,value);
        if (opNotEOF) {
          if (footerCount > 0) {
            footerBuffer=new FooterBuffer();
            opNotEOF=footerBuffer.initializeBuffer(job,currRecReader,footerCount,key,value);
          }
        }
      }
      if (opNotEOF && footerBuffer == null) {
        opNotEOF=currRecReader.next(key,value);
      }
      if (opNotEOF && footerBuffer != null) {
        opNotEOF=footerBuffer.updateBuffer(job,currRecReader,key,value);
      }
      if (opNotEOF) {
        if (operator != null && context != null && context.inputFileChanged()) {
          try {
            operator.cleanUpInputFileChanged();
          }
 catch (          HiveException e) {
            throw new IOException(e);
          }
        }
        if (hasVC) {
          vcValues=MapOperator.populateVirtualColumnValues(context,vcCols,vcValues,serde);
          row[isPartitioned ? 2 : 1]=vcValues;
        }
        row[0]=partTblObjectInspectorConverter.convert(serde.deserialize(value));
        if (hasVC || isPartitioned) {
          inspectable.o=row;
          inspectable.oi=rowObjectInspector;
          return inspectable;
        }
        inspectable.o=row[0];
        inspectable.oi=tblSerde.getObjectInspector();
        return inspectable;
      }
 else {
        currRecReader.close();
        currRecReader=null;
      }
    }
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}
