{
  try {
    while (true) {
      boolean opNotEOF=true;
      if (context != null) {
        context.resetRow();
      }
      if (currRecReader == null) {
        currRecReader=getRecordReader();
        if (currRecReader == null) {
          return null;
        }
        headerCount=Utilities.getHeaderCount(currDesc.getTableDesc());
        footerCount=Utilities.getFooterCount(currDesc.getTableDesc(),job);
        opNotEOF=Utilities.skipHeader(currRecReader,headerCount,key,value);
        if (opNotEOF && footerCount > 0) {
          footerBuffer=new FooterBuffer();
          opNotEOF=footerBuffer.initializeBuffer(job,currRecReader,footerCount,key,value);
        }
      }
      if (opNotEOF && footerBuffer == null) {
        opNotEOF=currRecReader.next(key,value);
      }
      if (opNotEOF && footerBuffer != null) {
        opNotEOF=footerBuffer.updateBuffer(job,currRecReader,key,value);
      }
      if (opNotEOF) {
        if (operator != null && context != null && context.inputFileChanged()) {
          operator.cleanUpInputFileChanged();
        }
        if (hasVC) {
          row[isPartitioned ? 2 : 1]=MapOperator.populateVirtualColumnValues(context,vcCols,vcValues,currSerDe);
        }
        Object deserialized=currSerDe.deserialize(value);
        if (ObjectConverter != null) {
          deserialized=ObjectConverter.convert(deserialized);
        }
        if (hasVC || isPartitioned) {
          row[0]=deserialized;
          inspectable.o=row;
        }
 else {
          inspectable.o=deserialized;
        }
        inspectable.oi=currSerDe.getObjectInspector();
        return inspectable;
      }
 else {
        currRecReader.close();
        currRecReader=null;
      }
    }
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}
