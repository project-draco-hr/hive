{
  int newLogicalHashBucketCount=logicalHashBucketCount * 2;
  int newLogicalHashBucketMask=newLogicalHashBucketCount - 1;
  int newMetricPutConflict=0;
  int newLargestNumberOfSteps=0;
  int newSlotPairArraySize=newLogicalHashBucketCount * 2;
  long[] newSlotPairs=new long[newSlotPairArraySize];
  for (int slot=0; slot < logicalHashBucketCount; slot++) {
    int pairIndex=slot * 2;
    long valueRef=slotPairs[pairIndex];
    if (valueRef != 0) {
      long tableKey=slotPairs[pairIndex + 1];
      long hashCode=HashCodeUtil.calculateLongHashCode(tableKey);
      int intHashCode=(int)hashCode;
      int newSlot=intHashCode & newLogicalHashBucketMask;
      long newProbeSlot=newSlot;
      int newPairIndex;
      int i=0;
      while (true) {
        newPairIndex=newSlot * 2;
        long newValueRef=newSlotPairs[newPairIndex];
        if (newValueRef == 0) {
          break;
        }
        ++newMetricPutConflict;
        newProbeSlot+=(++i);
        newSlot=(int)(newProbeSlot & newLogicalHashBucketMask);
      }
      if (newLargestNumberOfSteps < i) {
        if (isLogDebugEnabled) {
          LOG.debug("Probed " + i + " slots (the longest so far) to find space");
        }
        newLargestNumberOfSteps=i;
      }
      newSlotPairs[newPairIndex]=valueRef;
      newSlotPairs[newPairIndex + 1]=tableKey;
    }
  }
  slotPairs=newSlotPairs;
  logicalHashBucketCount=newLogicalHashBucketCount;
  logicalHashBucketMask=newLogicalHashBucketMask;
  metricPutConflict=newMetricPutConflict;
  largestNumberOfSteps=newLargestNumberOfSteps;
  resizeThreshold=(int)(logicalHashBucketCount * loadFactor);
  metricExpands++;
}
