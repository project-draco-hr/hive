{
  for (int idx=0; idx < Math.min(arguments.length,3); ++idx) {
    if (arguments[idx].getCategory() != Category.PRIMITIVE || PrimitiveObjectInspectorUtils.getPrimitiveGrouping(((PrimitiveObjectInspector)arguments[idx]).getPrimitiveCategory()) != PrimitiveGrouping.STRING_GROUP) {
      throw new UDFArgumentException("All argument should be string/character type");
    }
  }
  soi_text=ObjectInspectorConverters.getConverter(arguments[0],PrimitiveObjectInspectorFactory.javaStringObjectInspector);
  if (arguments.length > 1) {
    soi_de1=ObjectInspectorConverters.getConverter(arguments[1],PrimitiveObjectInspectorFactory.javaStringObjectInspector);
  }
  if (arguments.length > 2) {
    soi_de2=ObjectInspectorConverters.getConverter(arguments[2],PrimitiveObjectInspectorFactory.javaStringObjectInspector);
  }
  return ObjectInspectorFactory.getStandardMapObjectInspector(PrimitiveObjectInspectorFactory.javaStringObjectInspector,PrimitiveObjectInspectorFactory.javaStringObjectInspector);
}
