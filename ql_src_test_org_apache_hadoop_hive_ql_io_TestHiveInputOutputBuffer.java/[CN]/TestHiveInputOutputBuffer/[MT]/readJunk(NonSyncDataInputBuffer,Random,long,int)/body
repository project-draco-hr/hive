{
  r.setSeed(seed);
  for (int i=0; i < iter; ++i) {
switch (r.nextInt(numCases)) {
case 0:
      assertEquals((byte)(r.nextInt() & 0xFF),in.readByte());
    break;
case 1:
  assertEquals((short)(r.nextInt() & 0xFFFF),in.readShort());
break;
case 2:
assertEquals(r.nextInt(),in.readInt());
break;
case 3:
assertEquals(r.nextLong(),in.readLong());
break;
case 4:
assertEquals(Double.doubleToLongBits(r.nextDouble()),Double.doubleToLongBits(in.readDouble()));
break;
case 5:
assertEquals(Float.floatToIntBits(r.nextFloat()),Float.floatToIntBits(in.readFloat()));
break;
case 6:
int len=r.nextInt(1024);
final byte[] vb=new byte[len];
r.nextBytes(vb);
final byte[] b=new byte[len];
in.readFully(b,0,len);
assertArrayEquals(vb,b);
r.nextBytes(vb);
in.read(b,0,len);
assertArrayEquals(vb,b);
r.nextBytes(vb);
in.readFully(b);
assertArrayEquals(vb,b);
break;
case 7:
assertEquals(r.nextBoolean(),in.readBoolean());
break;
case 8:
assertEquals((char)r.nextInt(),in.readChar());
break;
case 9:
int actualUB=in.readUnsignedByte();
assertTrue(actualUB >= 0);
assertTrue(actualUB <= 255);
assertEquals(r.nextInt() & 0xFF,actualUB);
break;
case 10:
int actualUS=in.readUnsignedShort();
assertTrue(actualUS >= 0);
assertTrue(actualUS <= 0xFFFF);
assertEquals(r.nextInt() & 0xFFFF,actualUS);
break;
case 11:
String expectedString1=composeString(1024,r);
assertEquals(expectedString1,in.readUTF());
String expectedString2=composeString(1024,r);
assertEquals(expectedString2,NonSyncDataInputBuffer.readUTF(in));
break;
case 12:
assertEquals(asciiLine1,in.readLine());
assertEquals(asciiLine2,in.readLine());
break;
case 13:
in.skipBytes(8);
r.nextLong();
assertEquals(r.nextLong(),in.readLong());
break;
}
}
}
