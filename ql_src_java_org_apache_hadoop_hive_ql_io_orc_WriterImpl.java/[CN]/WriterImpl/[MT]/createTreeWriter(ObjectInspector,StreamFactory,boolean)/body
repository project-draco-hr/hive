{
switch (inspector.getCategory()) {
case PRIMITIVE:
switch (((PrimitiveObjectInspector)inspector).getPrimitiveCategory()) {
case BOOLEAN:
      return new BooleanTreeWriter(streamFactory.getNextColumnId(),inspector,streamFactory,nullable);
case BYTE:
    return new ByteTreeWriter(streamFactory.getNextColumnId(),inspector,streamFactory,nullable);
case SHORT:
case INT:
case LONG:
  return new IntegerTreeWriter(streamFactory.getNextColumnId(),inspector,streamFactory,nullable);
case FLOAT:
return new FloatTreeWriter(streamFactory.getNextColumnId(),inspector,streamFactory,nullable);
case DOUBLE:
return new DoubleTreeWriter(streamFactory.getNextColumnId(),inspector,streamFactory,nullable);
case STRING:
return new StringTreeWriter(streamFactory.getNextColumnId(),inspector,streamFactory,nullable);
case BINARY:
return new BinaryTreeWriter(streamFactory.getNextColumnId(),inspector,streamFactory,nullable);
case TIMESTAMP:
return new TimestampTreeWriter(streamFactory.getNextColumnId(),inspector,streamFactory,nullable);
default :
throw new IllegalArgumentException("Bad primitive category " + ((PrimitiveObjectInspector)inspector).getPrimitiveCategory());
}
case STRUCT:
return new StructTreeWriter(streamFactory.getNextColumnId(),inspector,streamFactory,nullable);
case MAP:
return new MapTreeWriter(streamFactory.getNextColumnId(),inspector,streamFactory,nullable);
case LIST:
return new ListTreeWriter(streamFactory.getNextColumnId(),inspector,streamFactory,nullable);
case UNION:
return new UnionTreeWriter(streamFactory.getNextColumnId(),inspector,streamFactory,nullable);
default :
throw new IllegalArgumentException("Bad category: " + inspector.getCategory());
}
}
