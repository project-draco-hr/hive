{
switch (schema.getCategory()) {
case BOOLEAN:
    return new BooleanTreeWriter(streamFactory.getNextColumnId(),inspector,schema,streamFactory,nullable);
case BYTE:
  return new ByteTreeWriter(streamFactory.getNextColumnId(),inspector,schema,streamFactory,nullable);
case SHORT:
case INT:
case LONG:
return new IntegerTreeWriter(streamFactory.getNextColumnId(),inspector,schema,streamFactory,nullable);
case FLOAT:
return new FloatTreeWriter(streamFactory.getNextColumnId(),inspector,schema,streamFactory,nullable);
case DOUBLE:
return new DoubleTreeWriter(streamFactory.getNextColumnId(),inspector,schema,streamFactory,nullable);
case STRING:
return new StringTreeWriter(streamFactory.getNextColumnId(),inspector,schema,streamFactory,nullable);
case CHAR:
return new CharTreeWriter(streamFactory.getNextColumnId(),inspector,schema,streamFactory,nullable);
case VARCHAR:
return new VarcharTreeWriter(streamFactory.getNextColumnId(),inspector,schema,streamFactory,nullable);
case BINARY:
return new BinaryTreeWriter(streamFactory.getNextColumnId(),inspector,schema,streamFactory,nullable);
case TIMESTAMP:
return new TimestampTreeWriter(streamFactory.getNextColumnId(),inspector,schema,streamFactory,nullable);
case DATE:
return new DateTreeWriter(streamFactory.getNextColumnId(),inspector,schema,streamFactory,nullable);
case DECIMAL:
return new DecimalTreeWriter(streamFactory.getNextColumnId(),inspector,schema,streamFactory,nullable);
case STRUCT:
return new StructTreeWriter(streamFactory.getNextColumnId(),inspector,schema,streamFactory,nullable);
case MAP:
return new MapTreeWriter(streamFactory.getNextColumnId(),inspector,schema,streamFactory,nullable);
case LIST:
return new ListTreeWriter(streamFactory.getNextColumnId(),inspector,schema,streamFactory,nullable);
case UNION:
return new UnionTreeWriter(streamFactory.getNextColumnId(),inspector,schema,streamFactory,nullable);
default :
throw new IllegalArgumentException("Bad category: " + schema.getCategory());
}
}
