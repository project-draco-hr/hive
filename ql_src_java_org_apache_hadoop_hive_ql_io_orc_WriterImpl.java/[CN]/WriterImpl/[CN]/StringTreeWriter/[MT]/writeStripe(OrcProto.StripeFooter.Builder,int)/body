{
  final int[] dumpOrder=new int[dictionary.size()];
  dictionary.visit(new StringRedBlackTree.Visitor(){
    private int currentId=0;
    @Override public void visit(    StringRedBlackTree.VisitorContext context) throws IOException {
      context.writeBytes(stringOutput);
      lengthOutput.write(context.getLength());
      dumpOrder[context.getOriginalPosition()]=currentId++;
    }
  }
);
  int length=rows.size();
  int rowIndexEntry=0;
  OrcProto.RowIndex.Builder rowIndex=getRowIndex();
  for (int i=0; i <= length; ++i) {
    if (buildIndex) {
      while (i == rowIndexValueCount.get(rowIndexEntry) && rowIndexEntry < savedRowIndex.size()) {
        OrcProto.RowIndexEntry.Builder base=savedRowIndex.get(rowIndexEntry++).toBuilder();
        rowOutput.getPosition(new RowIndexPositionRecorder(base));
        rowIndex.addEntry(base.build());
      }
    }
    if (i != length) {
      rowOutput.write(dumpOrder[rows.get(i)]);
    }
  }
  super.writeStripe(builder,requiredIndexEntries);
  stringOutput.flush();
  lengthOutput.flush();
  rowOutput.flush();
  dictionary.clear();
  rows.clear();
  savedRowIndex.clear();
  rowIndexValueCount.clear();
  recordPosition(rowIndexPosition);
  rowIndexValueCount.add(0L);
}
