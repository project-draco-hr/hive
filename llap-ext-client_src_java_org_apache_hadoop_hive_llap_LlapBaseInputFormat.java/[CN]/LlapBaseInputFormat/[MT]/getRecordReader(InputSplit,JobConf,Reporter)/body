{
  LlapInputSplit llapSplit=(LlapInputSplit)split;
  HiveConf.setVar(job,HiveConf.ConfVars.LLAP_ZK_REGISTRY_USER,llapSplit.getLlapUser());
  SubmitWorkInfo submitWorkInfo=SubmitWorkInfo.fromBytes(llapSplit.getPlanBytes());
  ServiceInstance serviceInstance=getServiceInstance(job,llapSplit);
  String host=serviceInstance.getHost();
  int llapSubmitPort=serviceInstance.getRpcPort();
  LOG.info("Found service instance for host " + host + " with rpc port "+ llapSubmitPort+ " and outputformat port "+ serviceInstance.getOutputFormatPort());
  byte[] llapTokenBytes=llapSplit.getTokenBytes();
  Token<LlapTokenIdentifier> llapToken=null;
  if (llapTokenBytes != null) {
    DataInputBuffer in=new DataInputBuffer();
    in.reset(llapTokenBytes,0,llapTokenBytes.length);
    llapToken=new Token<LlapTokenIdentifier>();
    llapToken.readFields(in);
  }
  LlapRecordReaderTaskUmbilicalExternalResponder umbilicalResponder=new LlapRecordReaderTaskUmbilicalExternalResponder();
  LlapTaskUmbilicalExternalClient llapClient=new LlapTaskUmbilicalExternalClient(job,submitWorkInfo.getTokenIdentifier(),submitWorkInfo.getToken(),umbilicalResponder,llapToken);
  llapClient.init(job);
  llapClient.start();
  SubmitWorkRequestProto submitWorkRequestProto=constructSubmitWorkRequestProto(submitWorkInfo,llapSplit.getSplitNum(),llapClient.getAddress(),submitWorkInfo.getToken(),llapSplit.getFragmentBytes(),llapSplit.getFragmentBytesSignature());
  llapClient.submitWork(submitWorkRequestProto,host,llapSubmitPort);
  String id=HiveConf.getVar(job,HiveConf.ConfVars.HIVEQUERYID) + "_" + llapSplit.getSplitNum();
  Socket socket=new Socket(host,serviceInstance.getOutputFormatPort());
  LOG.debug("Socket connected");
  socket.getOutputStream().write(id.getBytes());
  socket.getOutputStream().write(0);
  socket.getOutputStream().flush();
  LOG.info("Registered id: " + id);
  @SuppressWarnings("rawtypes") LlapBaseRecordReader recordReader=new LlapBaseRecordReader(socket.getInputStream(),llapSplit.getSchema(),Text.class,job);
  umbilicalResponder.setRecordReader(recordReader);
  return recordReader;
}
