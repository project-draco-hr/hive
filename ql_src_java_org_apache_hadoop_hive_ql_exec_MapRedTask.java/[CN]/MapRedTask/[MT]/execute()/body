{
  try {
    String hadoopExec=conf.getVar(HiveConf.ConfVars.HADOOPBIN);
    String hiveJar=conf.getJar();
    String addedJars=ExecDriver.getResourceFiles(conf,SessionState.ResourceType.JAR);
    if (!StringUtils.isEmpty(addedJars)) {
      String auxJars=conf.getAuxJars();
      if (StringUtils.isEmpty(auxJars)) {
        auxJars=addedJars;
      }
 else {
        auxJars=auxJars + "," + addedJars;
      }
      conf.setAuxJars(auxJars);
    }
    String hiveConfArgs=ExecDriver.generateCmdLine(conf);
    String auxJars=conf.getAuxJars();
    if (StringUtils.isEmpty(auxJars)) {
      auxJars=" ";
    }
 else {
      auxJars=" -libjars " + auxJars + " ";
    }
    mapredWork plan=getWork();
    File planFile=File.createTempFile("plan",".xml");
    LOG.info("Generating plan file " + planFile.toString());
    FileOutputStream out=new FileOutputStream(planFile);
    Utilities.serializeMapRedWork(plan,out);
    String isSilent="true".equalsIgnoreCase(System.getProperty("test.silent")) ? "-silent" : "";
    String cmdLine=hadoopExec + " jar " + auxJars+ " "+ hiveJar+ " org.apache.hadoop.hive.ql.exec.ExecDriver -plan "+ planFile.toString()+ " "+ isSilent+ " "+ hiveConfArgs;
    String files=ExecDriver.getResourceFiles(conf,SessionState.ResourceType.FILE);
    if (!files.isEmpty()) {
      cmdLine=cmdLine + " -files " + files;
    }
    LOG.info("Executing: " + cmdLine);
    Process executor=null;
    int hadoopMem=conf.getIntVar(HiveConf.ConfVars.HIVEHADOOPMAXMEM);
    if (hadoopMem == 0)     executor=Runtime.getRuntime().exec(cmdLine);
 else {
      Map<String,String> variables=System.getenv();
      String[] env=new String[variables.size() + 1];
      int pos=0;
      for (      Map.Entry<String,String> entry : variables.entrySet()) {
        String name=entry.getKey();
        String value=entry.getValue();
        env[pos++]=name + "=" + value;
      }
      env[pos]=new String("HADOOP_HEAPSIZE=" + hadoopMem);
      executor=Runtime.getRuntime().exec(cmdLine,env);
    }
    StreamPrinter outPrinter=new StreamPrinter(executor.getInputStream(),null,System.out);
    StreamPrinter errPrinter=new StreamPrinter(executor.getErrorStream(),null,System.err);
    outPrinter.start();
    errPrinter.start();
    int exitVal=executor.waitFor();
    if (exitVal != 0) {
      LOG.error("Execution failed with exit status: " + exitVal);
    }
 else {
      LOG.info("Execution completed successfully");
    }
    return exitVal;
  }
 catch (  Exception e) {
    e.printStackTrace();
    LOG.error("Exception: " + e.getMessage());
    return (1);
  }
}
