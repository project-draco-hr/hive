{
  TableScanOperator ts=(TableScanOperator)nd;
  AnnotateOpTraitsProcCtx opTraitsCtx=(AnnotateOpTraitsProcCtx)procCtx;
  Table table=ts.getConf().getTableMetadata();
  PrunedPartitionList prunedPartList=null;
  try {
    prunedPartList=opTraitsCtx.getParseContext().getPrunedPartitions(ts.getConf().getAlias(),ts);
  }
 catch (  HiveException e) {
    prunedPartList=null;
  }
  boolean isBucketed=checkBucketedTable(table,opTraitsCtx.getParseContext(),prunedPartList);
  List<List<String>> bucketColsList=new ArrayList<List<String>>();
  List<List<String>> sortedColsList=new ArrayList<List<String>>();
  int numBuckets=-1;
  if (isBucketed) {
    bucketColsList.add(table.getBucketCols());
    numBuckets=table.getNumBuckets();
    List<String> sortCols=new ArrayList<String>();
    for (    Order colSortOrder : table.getSortCols()) {
      sortCols.add(colSortOrder.getCol());
    }
    sortedColsList.add(sortCols);
  }
  OpTraits opTraits=new OpTraits(bucketColsList,numBuckets,sortedColsList);
  ts.setOpTraits(opTraits);
  return null;
}
