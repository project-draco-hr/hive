{
  JoinOperator joinOp=(JoinOperator)nd;
  List<List<String>> bucketColsList=new ArrayList<List<String>>();
  List<List<String>> sortColsList=new ArrayList<List<String>>();
  byte pos=0;
  int numReduceSinks=0;
  for (  Operator<? extends OperatorDesc> parentOp : joinOp.getParentOperators()) {
    if (!(parentOp instanceof ReduceSinkOperator)) {
      break;
    }
    ReduceSinkOperator rsOp=(ReduceSinkOperator)parentOp;
    if (rsOp.getOpTraits() == null) {
      ReduceSinkRule rsRule=new ReduceSinkRule();
      rsRule.process(rsOp,stack,procCtx,nodeOutputs);
    }
    OpTraits parentOpTraits=rsOp.getOpTraits();
    bucketColsList.add(getOutputColNames(joinOp,parentOpTraits.getBucketColNames(),pos));
    sortColsList.add(getOutputColNames(joinOp,parentOpTraits.getSortCols(),pos));
    if (parentOpTraits.getNumReduceSinks() > numReduceSinks) {
      numReduceSinks=parentOpTraits.getNumReduceSinks();
    }
    pos++;
  }
  joinOp.setOpTraits(new OpTraits(bucketColsList,-1,bucketColsList,numReduceSinks));
  return null;
}
