{
  SerDe keySerde=keyContext.getSerDe(), valSerde=valueContext.getSerDe();
  if (writeHelper == null) {
    LOG.info("Initializing container with " + keySerde.getClass().getName() + " and "+ valSerde.getClass().getName());
    LazyBinaryStructObjectInspector valSoi=(LazyBinaryStructObjectInspector)valSerde.getObjectInspector();
    writeHelper=new MapJoinBytesTableContainer.LazyBinaryKvWriter(keySerde,valSoi,valueContext.hasFilterTag());
    if (internalValueOi == null) {
      internalValueOi=valSoi;
    }
    if (sortableSortOrders == null) {
      sortableSortOrders=((BinarySortableSerDe)keySerde).getSortOrders();
    }
  }
  writeHelper.setKeyValue(currentKey,currentValue);
  int keyHash=writeHelper.getHashFromKey();
  int partitionId=keyHash & (hashPartitions.length - 1);
  HashPartition hashPartition=hashPartitions[partitionId];
  if (isOnDisk(partitionId) || isHashMapSpilledOnCreation(partitionId)) {
    KeyValueContainer kvContainer=hashPartition.getSidefileKVContainer();
    kvContainer.add((HiveKey)currentKey,(BytesWritable)currentValue);
  }
 else {
    hashPartition.hashMap.put(writeHelper,keyHash);
    totalInMemRowCount++;
    if ((totalInMemRowCount & (this.memoryCheckFrequency - 1)) == 0 && !lastPartitionInMem) {
      if (isMemoryFull()) {
        if ((numPartitionsSpilled == hashPartitions.length - 1)) {
          LOG.warn("This LAST partition in memory won't be spilled!");
          lastPartitionInMem=true;
        }
 else {
          int biggest=biggestPartition();
          numPartitionsSpilled++;
          spillPartition(biggest);
          this.setSpill(true);
        }
      }
    }
  }
  return null;
}
