{
  HashPartition partition=hashPartitions[partitionId];
  int inMemRowCount=partition.hashMap.getNumValues();
  Path path=Files.createTempFile("partition-" + partitionId + "-",null);
  OutputStream outputStream=Files.newOutputStream(path);
  com.esotericsoftware.kryo.io.Output output=new com.esotericsoftware.kryo.io.Output(outputStream);
  Kryo kryo=Utilities.runtimeSerializationKryo.get();
  kryo.writeObject(output,partition.hashMap);
  output.close();
  outputStream.close();
  partition.hashMapLocalPath=path;
  partition.hashMapOnDisk=true;
  LOG.info("Spilling hash partition " + partitionId + " (Rows: "+ inMemRowCount+ ", Mem size: "+ partition.hashMap.memorySize()+ "): "+ path);
  LOG.info("Memory usage before spilling: " + memoryUsed);
  long memFreed=partition.hashMap.memorySize();
  memoryUsed-=memFreed;
  LOG.info("Memory usage after spilling: " + memoryUsed);
  partition.rowsOnDisk=inMemRowCount;
  totalInMemRowCount-=inMemRowCount;
  partition.hashMap.clear();
  return memFreed;
}
