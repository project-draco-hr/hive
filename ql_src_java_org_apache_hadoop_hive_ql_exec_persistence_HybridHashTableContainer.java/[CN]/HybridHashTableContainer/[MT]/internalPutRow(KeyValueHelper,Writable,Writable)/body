{
  int keyHash=keyValueHelper.getHashFromKey();
  int partitionId=keyHash & (hashPartitions.length - 1);
  HashPartition hashPartition=hashPartitions[partitionId];
  if (isOnDisk(partitionId) || isHashMapSpilledOnCreation(partitionId)) {
    KeyValueContainer kvContainer=hashPartition.getSidefileKVContainer();
    kvContainer.add((HiveKey)currentKey,(BytesWritable)currentValue);
  }
 else {
    hashPartition.hashMap.put(keyValueHelper,keyHash);
    totalInMemRowCount++;
    if ((totalInMemRowCount & (this.memoryCheckFrequency - 1)) == 0 && !lastPartitionInMem) {
      if (isMemoryFull()) {
        if ((numPartitionsSpilled == hashPartitions.length - 1)) {
          LOG.warn("This LAST partition in memory won't be spilled!");
          lastPartitionInMem=true;
        }
 else {
          int biggest=biggestPartition();
          numPartitionsSpilled++;
          spillPartition(biggest);
          this.setSpill(true);
        }
      }
    }
  }
  return null;
}
