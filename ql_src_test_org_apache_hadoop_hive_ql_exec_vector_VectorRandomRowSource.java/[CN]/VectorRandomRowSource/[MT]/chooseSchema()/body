{
  HashSet hashSet=null;
  boolean allTypes;
  boolean onlyOne=(r.nextInt(100) == 7);
  if (onlyOne) {
    columnCount=1;
    allTypes=false;
  }
 else {
    allTypes=r.nextBoolean();
    if (allTypes) {
      columnCount=possibleHiveTypeNames.length;
      hashSet=new HashSet<Integer>();
    }
 else {
      columnCount=1 + r.nextInt(20);
    }
  }
  typeNames=new ArrayList<String>(columnCount);
  primitiveCategories=new PrimitiveCategory[columnCount];
  primitiveTypeInfos=new PrimitiveTypeInfo[columnCount];
  primitiveObjectInspectorList=new ArrayList<ObjectInspector>(columnCount);
  List<String> columnNames=new ArrayList<String>(columnCount);
  for (int c=0; c < columnCount; c++) {
    columnNames.add(String.format("col%d",c));
    String typeName;
    if (onlyOne) {
      typeName=possibleHiveTypeNames[r.nextInt(possibleHiveTypeNames.length)];
    }
 else {
      int typeNum;
      if (allTypes) {
        while (true) {
          typeNum=r.nextInt(possibleHiveTypeNames.length);
          Integer typeNumInteger=new Integer(typeNum);
          if (!hashSet.contains(typeNumInteger)) {
            hashSet.add(typeNumInteger);
            break;
          }
        }
      }
 else {
        typeNum=r.nextInt(possibleHiveTypeNames.length);
      }
      typeName=possibleHiveTypeNames[typeNum];
    }
    if (typeName.equals("char")) {
      int maxLength=1 + r.nextInt(100);
      typeName=String.format("char(%d)",maxLength);
    }
 else     if (typeName.equals("varchar")) {
      int maxLength=1 + r.nextInt(100);
      typeName=String.format("varchar(%d)",maxLength);
    }
 else     if (typeName.equals("decimal")) {
      typeName=String.format("decimal(%d,%d)",HiveDecimal.SYSTEM_DEFAULT_PRECISION,HiveDecimal.SYSTEM_DEFAULT_SCALE);
    }
    PrimitiveTypeInfo primitiveTypeInfo=(PrimitiveTypeInfo)TypeInfoUtils.getTypeInfoFromTypeString(typeName);
    primitiveTypeInfos[c]=primitiveTypeInfo;
    PrimitiveCategory primitiveCategory=primitiveTypeInfo.getPrimitiveCategory();
    primitiveCategories[c]=primitiveCategory;
    primitiveObjectInspectorList.add(PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(primitiveTypeInfo));
    typeNames.add(typeName);
  }
  rowStructObjectInspector=ObjectInspectorFactory.getStandardStructObjectInspector(columnNames,primitiveObjectInspectorList);
  alphabets=new String[columnCount];
}
