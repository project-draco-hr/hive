{
  PrimitiveCategory primitiveCategory=primitiveCategories[column];
  PrimitiveTypeInfo primitiveTypeInfo=primitiveTypeInfos[column];
  try {
switch (primitiveCategory) {
case BOOLEAN:
      return Boolean.valueOf(r.nextInt(1) == 1);
case BYTE:
    return Byte.valueOf((byte)r.nextInt());
case SHORT:
  return Short.valueOf((short)r.nextInt());
case INT:
return Integer.valueOf(r.nextInt());
case LONG:
return Long.valueOf(r.nextLong());
case DATE:
return RandomTypeUtil.getRandDate(r);
case FLOAT:
return Float.valueOf(r.nextFloat() * 10 - 5);
case DOUBLE:
return Double.valueOf(r.nextDouble() * 10 - 5);
case STRING:
case CHAR:
case VARCHAR:
{
String result;
if (alphabets != null && alphabets[column] != null) {
result=RandomTypeUtil.getRandString(r,alphabets[column],r.nextInt(10));
}
 else {
result=RandomTypeUtil.getRandString(r);
}
if (addEscapables && result.length() > 0) {
int escapeCount=1 + r.nextInt(2);
for (int i=0; i < escapeCount; i++) {
int index=r.nextInt(result.length());
String begin=result.substring(0,index);
String end=result.substring(index);
Character needsEscapeChar=needsEscapeStr.charAt(r.nextInt(needsEscapeStr.length()));
result=begin + needsEscapeChar + end;
}
}
switch (primitiveCategory) {
case STRING:
return result;
case CHAR:
return new HiveChar(result,((CharTypeInfo)primitiveTypeInfo).getLength());
case VARCHAR:
return new HiveChar(result,((VarcharTypeInfo)primitiveTypeInfo).getLength());
default :
throw new Error("Unknown primitive category " + primitiveCategory);
}
}
case BINARY:
return getRandBinary(r,1 + r.nextInt(100));
case TIMESTAMP:
return RandomTypeUtil.getRandTimestamp(r);
case INTERVAL_YEAR_MONTH:
return getRandIntervalYearMonth(r);
case INTERVAL_DAY_TIME:
return getRandIntervalDayTime(r);
case DECIMAL:
return getRandHiveDecimal(r,(DecimalTypeInfo)primitiveTypeInfo);
default :
throw new Error("Unknown primitive category " + primitiveCategory);
}
}
 catch (Exception e) {
throw new RuntimeException("randomObject failed on column " + column + " type "+ primitiveCategory,e);
}
}
