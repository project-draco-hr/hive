{
  HCatRecordObjectInspector oi=cachedHCatRecordObjectInspectors.get(typeInfo);
  if (oi == null) {
    LOG.debug("Got asked for OI for " + typeInfo.getCategory() + "["+ typeInfo.getTypeName()+ "]");
switch (typeInfo.getCategory()) {
case STRUCT:
      StructTypeInfo structTypeInfo=(StructTypeInfo)typeInfo;
    List<String> fieldNames=structTypeInfo.getAllStructFieldNames();
  List<TypeInfo> fieldTypeInfos=structTypeInfo.getAllStructFieldTypeInfos();
List<ObjectInspector> fieldObjectInspectors=new ArrayList<ObjectInspector>(fieldTypeInfos.size());
for (int i=0; i < fieldTypeInfos.size(); i++) {
fieldObjectInspectors.add(getStandardObjectInspectorFromTypeInfo(fieldTypeInfos.get(i)));
}
oi=new HCatRecordObjectInspector(fieldNames,fieldObjectInspectors);
break;
default :
throw new SerDeException("TypeInfo [" + typeInfo.getTypeName() + "] was not of struct type - HCatRecord expected struct type, got ["+ typeInfo.getCategory().toString()+ "]");
}
cachedHCatRecordObjectInspectors.put(typeInfo,oi);
}
return oi;
}
