{
  if (hasTag != null)   return;
  BinaryComparable b=(BinaryComparable)key;
  Object o=keySerDe.deserialize(key);
  StructObjectInspector soi=(StructObjectInspector)keySerDe.getObjectInspector();
  List<? extends StructField> fields=soi.getAllStructFieldRefs();
  Object[] data=new Object[fields.size()];
  List<ObjectInspector> fois=new ArrayList<ObjectInspector>(fields.size());
  for (int i=0; i < fields.size(); i++) {
    data[i]=soi.getStructFieldData(o,fields.get(i));
    fois.add(fields.get(i).getFieldObjectInspector());
  }
  Output output=new Output();
  BinarySortableSerDe.serializeStruct(output,data,fois,new boolean[fields.size()]);
  hasTag=(output.getLength() != b.getLength());
  if (hasTag) {
    LOG.error("Tag found in keys and will be removed. This should not happen.");
    if (output.getLength() != (b.getLength() - 1)) {
      throw new SerDeException("Unexpected tag: " + b.getLength() + " reserialized to "+ output.getLength());
    }
  }
}
