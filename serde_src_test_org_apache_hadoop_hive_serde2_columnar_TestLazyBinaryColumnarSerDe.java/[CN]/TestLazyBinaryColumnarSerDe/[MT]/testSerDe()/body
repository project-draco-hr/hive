{
  StructObjectInspector oi=(StructObjectInspector)ObjectInspectorFactory.getReflectionObjectInspector(OuterStruct.class,ObjectInspectorOptions.JAVA);
  String cols=ObjectInspectorUtils.getFieldNames(oi);
  Properties props=new Properties();
  props.setProperty(serdeConstants.LIST_COLUMNS,cols);
  props.setProperty(serdeConstants.LIST_COLUMN_TYPES,ObjectInspectorUtils.getFieldTypes(oi));
  LazyBinaryColumnarSerDe serde=new LazyBinaryColumnarSerDe();
  SerDeUtils.initializeSerDe(serde,new Configuration(),props,null);
  OuterStruct outerStruct=new OuterStruct();
  outerStruct.mByte=1;
  outerStruct.mShort=2;
  outerStruct.mInt=3;
  outerStruct.mLong=4l;
  outerStruct.mFloat=5.01f;
  outerStruct.mDouble=6.001d;
  outerStruct.mString="seven";
  outerStruct.mBA=new byte[]{'2'};
  InnerStruct is1=new InnerStruct(8,9l);
  InnerStruct is2=new InnerStruct(10,11l);
  outerStruct.mArray=new ArrayList<InnerStruct>(2);
  outerStruct.mArray.add(is1);
  outerStruct.mArray.add(is2);
  outerStruct.mMap=new TreeMap<String,InnerStruct>();
  outerStruct.mMap.put(new String("twelve"),new InnerStruct(13,14l));
  outerStruct.mMap.put(new String("fifteen"),new InnerStruct(16,17l));
  outerStruct.mStruct=new InnerStruct(18,19l);
  BytesRefArrayWritable braw=(BytesRefArrayWritable)serde.serialize(outerStruct,oi);
  ObjectInspector out_oi=serde.getObjectInspector();
  Object out_o=serde.deserialize(braw);
  if (0 != ObjectInspectorUtils.compare(outerStruct,oi,out_o,out_oi,new CrossMapEqualComparer())) {
    System.out.println("expected = " + SerDeUtils.getJSONString(outerStruct,oi));
    System.out.println("actual = " + SerDeUtils.getJSONString(out_o,out_oi));
    fail("Deserialized object does not compare");
  }
}
