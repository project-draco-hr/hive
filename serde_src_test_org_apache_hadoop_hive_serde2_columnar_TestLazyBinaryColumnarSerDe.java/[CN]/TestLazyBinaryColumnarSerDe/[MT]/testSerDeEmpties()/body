{
  StructObjectInspector oi=(StructObjectInspector)ObjectInspectorFactory.getReflectionObjectInspector(OuterStruct.class,ObjectInspectorOptions.JAVA);
  String cols=ObjectInspectorUtils.getFieldNames(oi);
  Properties props=new Properties();
  props.setProperty(Constants.LIST_COLUMNS,cols);
  props.setProperty(Constants.LIST_COLUMN_TYPES,ObjectInspectorUtils.getFieldTypes(oi));
  LazyBinaryColumnarSerDe serde=new LazyBinaryColumnarSerDe();
  serde.initialize(new Configuration(),props);
  OuterStruct outerStruct=new OuterStruct();
  outerStruct.mByte=101;
  outerStruct.mShort=2002;
  outerStruct.mInt=3003;
  outerStruct.mLong=4004l;
  outerStruct.mFloat=5005.01f;
  outerStruct.mDouble=6006.001d;
  outerStruct.mString="";
  ByteArrayRef ba=new ByteArrayRef();
  ba.setData(new byte[]{'a'});
  outerStruct.mBA=ba;
  outerStruct.mArray=new ArrayList<InnerStruct>();
  outerStruct.mMap=new TreeMap<String,InnerStruct>();
  outerStruct.mStruct=new InnerStruct(180018,190019l);
  BytesRefArrayWritable braw=(BytesRefArrayWritable)serde.serialize(outerStruct,oi);
  ObjectInspector out_oi=serde.getObjectInspector();
  Object out_o=serde.deserialize(braw);
  if (0 != ObjectInspectorUtils.compare(outerStruct,oi,out_o,out_oi,new SimpleMapEqualComparer())) {
    System.out.println("expected = " + SerDeUtils.getJSONString(outerStruct,oi));
    System.out.println("actual = " + SerDeUtils.getJSONString(out_o,out_oi));
    fail("Deserialized object does not compare");
  }
}
