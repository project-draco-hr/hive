{
  TTransportFactory transportFactory;
  TSaslServerTransport.Factory serverTransportFactory;
  if (hadoopAuth.equalsIgnoreCase("kerberos") && !authTypeStr.equalsIgnoreCase(AuthTypes.NOSASL.getAuthName())) {
    try {
      serverTransportFactory=saslServer.createSaslServerTransportFactory(getSaslProperties());
    }
 catch (    TTransportException e) {
      throw new LoginException(e.getMessage());
    }
    if (authTypeStr.equalsIgnoreCase(AuthTypes.KERBEROS.getAuthName())) {
    }
 else     if (authTypeStr.equalsIgnoreCase(AuthTypes.NONE.getAuthName()) || authTypeStr.equalsIgnoreCase(AuthTypes.LDAP.getAuthName()) || authTypeStr.equalsIgnoreCase(AuthTypes.PAM.getAuthName())|| authTypeStr.equalsIgnoreCase(AuthTypes.CUSTOM.getAuthName())) {
      try {
        serverTransportFactory.addServerDefinition("PLAIN",authTypeStr,null,new HashMap<String,String>(),new PlainSaslHelper.PlainServerCallbackHandler(authTypeStr));
      }
 catch (      AuthenticationException e) {
        throw new LoginException("Error setting callback handler" + e);
      }
    }
 else {
      throw new LoginException("Unsupported authentication type " + authTypeStr);
    }
    transportFactory=saslServer.wrapTransportFactory(serverTransportFactory);
  }
 else   if (authTypeStr.equalsIgnoreCase(AuthTypes.NONE.getAuthName()) || authTypeStr.equalsIgnoreCase(AuthTypes.LDAP.getAuthName()) || authTypeStr.equalsIgnoreCase(AuthTypes.PAM.getAuthName())|| authTypeStr.equalsIgnoreCase(AuthTypes.CUSTOM.getAuthName())) {
    transportFactory=PlainSaslHelper.getPlainTransportFactory(authTypeStr);
  }
 else   if (authTypeStr.equalsIgnoreCase(AuthTypes.NOSASL.getAuthName())) {
    transportFactory=new TTransportFactory();
  }
 else {
    throw new LoginException("Unsupported authentication type " + authTypeStr);
  }
  return transportFactory;
}
