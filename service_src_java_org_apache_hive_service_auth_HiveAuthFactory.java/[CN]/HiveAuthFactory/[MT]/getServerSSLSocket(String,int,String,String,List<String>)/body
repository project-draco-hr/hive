{
  TSSLTransportFactory.TSSLTransportParameters params=new TSSLTransportFactory.TSSLTransportParameters();
  params.setKeyStore(keyStorePath,keyStorePassWord);
  InetSocketAddress serverAddress;
  if (hiveHost == null || hiveHost.isEmpty()) {
    serverAddress=new InetSocketAddress(portNum);
  }
 else {
    serverAddress=new InetSocketAddress(hiveHost,portNum);
  }
  TServerSocket thriftServerSocket=TSSLTransportFactory.getServerSocket(portNum,0,serverAddress.getAddress(),params);
  if (thriftServerSocket.getServerSocket() instanceof SSLServerSocket) {
    List<String> sslVersionBlacklistLocal=new ArrayList<String>();
    for (    String sslVersion : sslVersionBlacklist) {
      sslVersionBlacklistLocal.add(sslVersion.trim().toLowerCase());
    }
    SSLServerSocket sslServerSocket=(SSLServerSocket)thriftServerSocket.getServerSocket();
    List<String> enabledProtocols=new ArrayList<String>();
    for (    String protocol : sslServerSocket.getEnabledProtocols()) {
      if (sslVersionBlacklistLocal.contains(protocol.toLowerCase())) {
        LOG.debug("Disabling SSL Protocol: " + protocol);
      }
 else {
        enabledProtocols.add(protocol);
      }
    }
    sslServerSocket.setEnabledProtocols(enabledProtocols.toArray(new String[0]));
    LOG.info("SSL Server Socket Enabled Protocols: " + Arrays.toString(sslServerSocket.getEnabledProtocols()));
  }
  return thriftServerSocket;
}
