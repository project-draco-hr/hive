{
  if (arguments.length != 1) {
    throw new UDFArgumentException(opName + " requires one argument.");
  }
  Category category=arguments[0].getCategory();
  if (category != Category.PRIMITIVE) {
    throw new UDFArgumentTypeException(0,"The " + GenericUDFUtils.getOrdinal(1) + " argument of "+ opName+ "  is expected to a "+ Category.PRIMITIVE.toString().toLowerCase()+ " type, but "+ category.toString().toLowerCase()+ " is found");
  }
  inputOI=(PrimitiveObjectInspector)arguments[0];
  if (!FunctionRegistry.isNumericType(inputOI.getTypeInfo()) && (inputOI.getTypeInfo() != TypeInfoFactory.intervalDayTimeTypeInfo) && (inputOI.getTypeInfo() != TypeInfoFactory.intervalYearMonthTypeInfo)) {
    throw new UDFArgumentTypeException(0,"The " + GenericUDFUtils.getOrdinal(1) + " argument of "+ opName+ "  is expected to be a "+ "numeric or interval type, but "+ inputOI.getTypeName()+ " is found");
  }
  PrimitiveTypeInfo resultTypeInfo=deriveResultTypeInfo(inputOI.getTypeInfo());
  resultOI=PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(resultTypeInfo);
  converter=ObjectInspectorConverters.getConverter(inputOI,resultOI);
  return resultOI;
}
