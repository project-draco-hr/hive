{
  if (childExpressions != null) {
    super.evaluateChildren(batch);
  }
  LongColumnVector inputColVector1=(LongColumnVector)batch.cols[colNum1];
  DoubleColumnVector inputColVector2=(DoubleColumnVector)batch.cols[colNum2];
  DoubleColumnVector outputColVector=(DoubleColumnVector)batch.cols[outputColumn];
  int[] sel=batch.selected;
  int n=batch.size;
  long[] vector1=inputColVector1.vector;
  double[] vector2=inputColVector2.vector;
  double[] outputVector=outputColVector.vector;
  if (n == 0) {
    return;
  }
  outputColVector.isRepeating=inputColVector1.isRepeating && inputColVector2.isRepeating || inputColVector1.isRepeating && !inputColVector1.noNulls && inputColVector1.isNull[0] || inputColVector2.isRepeating && !inputColVector2.noNulls && inputColVector2.isNull[0];
  NullUtil.propagateNullsColCol(inputColVector1,inputColVector2,outputColVector,sel,n,batch.selectedInUse);
  if (inputColVector1.isRepeating && inputColVector2.isRepeating) {
    outputVector[0]=vector1[0] % vector2[0];
  }
 else   if (inputColVector1.isRepeating) {
    if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        outputVector[i]=vector1[0] % vector2[i];
      }
    }
 else {
      for (int i=0; i != n; i++) {
        outputVector[i]=vector1[0] % vector2[i];
      }
    }
  }
 else   if (inputColVector2.isRepeating) {
    if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        outputVector[i]=vector1[i] % vector2[0];
      }
    }
 else {
      for (int i=0; i != n; i++) {
        outputVector[i]=vector1[i] % vector2[0];
      }
    }
  }
 else {
    if (batch.selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        outputVector[i]=vector1[i] % vector2[i];
      }
    }
 else {
      for (int i=0; i != n; i++) {
        outputVector[i]=vector1[i] % vector2[i];
      }
    }
  }
  NullUtil.setNullDataEntriesDouble(outputColVector,batch.selectedInUse,sel,n);
}
