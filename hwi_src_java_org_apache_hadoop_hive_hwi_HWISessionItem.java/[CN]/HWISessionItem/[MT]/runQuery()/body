{
  FileOutputStream fos=null;
  if (this.getResultFile() != null) {
    try {
      fos=new FileOutputStream(new File(this.resultFile));
      ss.out=new PrintStream(fos,true,"UTF-8");
    }
 catch (    java.io.FileNotFoundException fex) {
      l4j.error(this.getSessionName() + " opening resultfile " + this.resultFile,fex);
    }
catch (    java.io.UnsupportedEncodingException uex) {
      l4j.error(this.getSessionName() + " opening resultfile " + this.resultFile,uex);
    }
  }
 else {
    l4j.debug(this.getSessionName() + " Output file was not specified");
  }
  l4j.debug(this.getSessionName() + " state is now QUERY_RUNNING.");
  this.status=WebSessionItemStatus.QUERY_RUNNING;
  queryRet=new ArrayList<Integer>(this.queries.size());
  for (int i=0; i < this.queries.size(); i++) {
    String cmd=queries.get(i);
    String cmd_trimmed=cmd.trim();
    String[] tokens=cmd_trimmed.split("\\s+");
    String cmd_1=cmd_trimmed.substring(tokens[0].length()).trim();
    CommandProcessor proc=CommandProcessorFactory.get(tokens[0]);
    if (proc != null) {
      if (proc instanceof Driver) {
        Driver qp=(Driver)proc;
        queryRet.add(new Integer(qp.run(cmd)));
        Vector<String> res=new Vector<String>();
        try {
          while (qp.getResults(res)) {
            resultBucket.add(res);
            if (resultBucket.size() > resultBucketMaxSize)             resultBucket.remove(0);
            for (            String row : res) {
              if (ss != null) {
                if (ss.out != null)                 ss.out.println(row);
              }
 else {
                throw new RuntimeException("ss was null");
              }
            }
          }
        }
 catch (        IOException ex) {
          l4j.error(this.getSessionName() + " getting results " + this.getResultFile()+ " caused exception.",ex);
        }
        qp.close();
      }
 else {
        queryRet.add(new Integer(proc.run(cmd_1)));
      }
    }
 else {
      l4j.error(this.getSessionName() + " query processor was not found for query " + cmd);
    }
  }
  try {
    if (fos != null) {
      fos.close();
    }
  }
 catch (  IOException ex) {
    l4j.error(this.getSessionName() + " closing result file " + this.getResultFile()+ " caused exception.",ex);
  }
  this.status=WebSessionItemStatus.READY;
  l4j.debug(this.getSessionName() + " state is now READY");
synchronized (this.runnable) {
    this.runnable.notifyAll();
  }
}
