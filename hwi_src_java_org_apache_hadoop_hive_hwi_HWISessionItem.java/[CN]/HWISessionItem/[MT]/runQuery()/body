{
  FileOutputStream fos=null;
  if (getResultFile() != null) {
    try {
      fos=new FileOutputStream(new File(resultFile));
      ss.out=new PrintStream(fos,true,"UTF-8");
    }
 catch (    java.io.FileNotFoundException fex) {
      l4j.error(getSessionName() + " opening resultfile " + resultFile,fex);
    }
catch (    java.io.UnsupportedEncodingException uex) {
      l4j.error(getSessionName() + " opening resultfile " + resultFile,uex);
    }
  }
 else {
    l4j.debug(getSessionName() + " Output file was not specified");
  }
  l4j.debug(getSessionName() + " state is now QUERY_RUNNING.");
  status=WebSessionItemStatus.QUERY_RUNNING;
  queryRet=new ArrayList<Integer>(queries.size());
  for (int i=0; i < queries.size(); i++) {
    String cmd=queries.get(i);
    String cmd_trimmed=cmd.trim();
    String[] tokens=cmd_trimmed.split("\\s+");
    String cmd_1=cmd_trimmed.substring(tokens[0].length()).trim();
    CommandProcessor proc=null;
    try {
      proc=CommandProcessorFactory.get(tokens[0]);
    }
 catch (    SQLException e) {
      l4j.error(getSessionName() + " error processing " + cmd,e);
    }
    if (proc != null) {
      if (proc instanceof Driver) {
        Driver qp=(Driver)proc;
        qp.setTryCount(Integer.MAX_VALUE);
        try {
          queryRet.add(Integer.valueOf(qp.run(cmd).getResponseCode()));
          ArrayList<String> res=new ArrayList<String>();
          try {
            while (qp.getResults(res)) {
              ArrayList<String> resCopy=new ArrayList<String>();
              resCopy.addAll(res);
              resultBucket.add(resCopy);
              if (resultBucket.size() > resultBucketMaxSize) {
                resultBucket.remove(0);
              }
              for (              String row : res) {
                if (ss != null) {
                  if (ss.out != null) {
                    ss.out.println(row);
                  }
                }
 else {
                  throw new RuntimeException("ss was null");
                }
              }
              res.clear();
            }
          }
 catch (          IOException ex) {
            l4j.error(getSessionName() + " getting results " + getResultFile()+ " caused exception.",ex);
          }
        }
 catch (        CommandNeedRetryException e) {
          l4j.error(getSessionName() + " Exception when executing",e);
        }
 finally {
          qp.close();
        }
      }
 else {
        try {
          queryRet.add(Integer.valueOf(proc.run(cmd_1).getResponseCode()));
        }
 catch (        CommandNeedRetryException e) {
          l4j.error(getSessionName() + " Exception when executing",e);
        }
      }
    }
 else {
      l4j.error(getSessionName() + " query processor was not found for query " + cmd);
    }
  }
  try {
    if (fos != null) {
      fos.close();
    }
  }
 catch (  IOException ex) {
    l4j.error(getSessionName() + " closing result file " + getResultFile()+ " caused exception.",ex);
  }
  status=WebSessionItemStatus.READY;
  l4j.debug(getSessionName() + " state is now READY");
synchronized (runnable) {
    runnable.notifyAll();
  }
}
