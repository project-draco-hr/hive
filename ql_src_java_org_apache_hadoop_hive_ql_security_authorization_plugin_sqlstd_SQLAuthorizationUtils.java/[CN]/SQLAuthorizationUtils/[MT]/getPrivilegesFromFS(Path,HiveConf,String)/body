{
  RequiredPrivileges availPrivs=new RequiredPrivileges();
  FileSystem fs;
  try {
    fs=FileSystem.get(filePath.toUri(),conf);
    FileStatus[] fileMatches=fs.globStatus(filePath);
    if ((fileMatches != null) && (fileMatches.length > 1)) {
      LOG.debug("Checking fs privileges for multiple files that matched {}",filePath.toString());
      addPrivilegesFromFS(userName,availPrivs,fs,fileMatches,true);
    }
 else {
      FileStatus fileStatus=FileUtils.getFileStatusOrNull(fs,filePath);
      boolean pickParent=(fileStatus == null);
      if (pickParent) {
        fileStatus=FileUtils.getPathOrParentThatExists(fs,filePath.getParent());
      }
      Path path=fileStatus.getPath();
      if (pickParent) {
        LOG.debug("Checking fs privileges for parent path {} for nonexistent {}",path.toString(),filePath.toString());
        addPrivilegesFromFS(userName,availPrivs,fs,fileStatus,false);
      }
 else {
        LOG.debug("Checking fs privileges for path itself {}, originally specified as {}",path.toString(),filePath.toString());
        addPrivilegesFromFS(userName,availPrivs,fs,fileStatus,true);
      }
    }
  }
 catch (  Exception e) {
    String msg="Error getting permissions for " + filePath + ": "+ e.getMessage();
    throw new HiveAuthzPluginException(msg,e);
  }
  return availPrivs;
}
