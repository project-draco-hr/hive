{
  if (s == null || likePattern == null) {
    return null;
  }
  if (!likePattern.equals(lastLikePattern)) {
    lastLikePattern.set(likePattern);
    String strLikePattern=likePattern.toString();
    parseSimplePattern(strLikePattern);
    if (type == PatternType.COMPLEX) {
      p=Pattern.compile(likePatternToRegExp(strLikePattern));
    }
  }
  if (type == PatternType.COMPLEX) {
    Matcher m=p.matcher(s.toString());
    result.set(m.matches());
  }
 else {
    int startS=0;
    int endS=s.getLength();
    if (endS < simplePattern.getLength()) {
      result.set(false);
      return result;
    }
switch (type) {
case BEGIN:
      endS=simplePattern.getLength();
    break;
case END:
  startS=endS - simplePattern.getLength();
break;
case NONE:
if (simplePattern.getLength() != s.getLength()) {
result.set(false);
return result;
}
break;
}
result.set(find(s,simplePattern,startS,endS));
}
return result;
}
