{
  chooseStreamingSide();
  checkInputsCorrectOrder();
  Set<JoinAlgorithm> possibleAlgorithms=obtainJoinAlgorithms();
  RelOptCost selfCost=null;
  if (LOG.isDebugEnabled()) {
    LOG.debug("Join algorithm selection for: " + this);
  }
  for (  JoinAlgorithm possibleAlgorithm : possibleAlgorithms) {
switch (possibleAlgorithm) {
case COMMON_JOIN:
      RelOptCost commonJoinCost=computeSelfCostCommonJoin();
    if (LOG.isDebugEnabled()) {
      LOG.debug(JoinAlgorithm.COMMON_JOIN + " cost: " + commonJoinCost);
    }
  if (selfCost == null || commonJoinCost.isLt(selfCost)) {
    this.joinAlgorithm=JoinAlgorithm.COMMON_JOIN;
    selfCost=commonJoinCost;
  }
break;
case MAP_JOIN:
RelOptCost mapJoinCost=computeSelfCostMapJoin();
if (LOG.isDebugEnabled()) {
LOG.debug(JoinAlgorithm.MAP_JOIN + " cost: " + mapJoinCost);
}
if (selfCost == null || mapJoinCost.isLt(selfCost)) {
this.joinAlgorithm=JoinAlgorithm.MAP_JOIN;
selfCost=mapJoinCost;
}
break;
case BUCKET_JOIN:
RelOptCost bucketJoinCost=computeSelfCostBucketJoin();
if (LOG.isDebugEnabled()) {
LOG.debug(JoinAlgorithm.BUCKET_JOIN + " cost: " + bucketJoinCost);
}
if (selfCost == null || bucketJoinCost.isLt(selfCost)) {
this.joinAlgorithm=JoinAlgorithm.BUCKET_JOIN;
selfCost=bucketJoinCost;
}
break;
case SMB_JOIN:
RelOptCost smbJoinCost=computeSelfCostSMBJoin();
if (LOG.isDebugEnabled()) {
LOG.debug(JoinAlgorithm.SMB_JOIN + " cost: " + smbJoinCost);
}
if (selfCost == null || smbJoinCost.isLt(selfCost)) {
this.joinAlgorithm=JoinAlgorithm.SMB_JOIN;
selfCost=smbJoinCost;
}
break;
default :
}
}
if (LOG.isDebugEnabled()) {
LOG.debug(this.joinAlgorithm + " selected");
}
return selfCost;
}
