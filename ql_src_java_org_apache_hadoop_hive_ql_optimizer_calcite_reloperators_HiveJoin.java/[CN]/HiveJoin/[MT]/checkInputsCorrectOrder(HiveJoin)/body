{
  ImmutableBitSet.Builder sortedInputs=new ImmutableBitSet.Builder();
  JoinPredicateInfo joinPredInfo=HiveCalciteUtil.JoinPredicateInfo.constructJoinPredicateInfo(join);
  List<ImmutableIntList> joinKeysInChildren=new ArrayList<ImmutableIntList>();
  joinKeysInChildren.add(ImmutableIntList.copyOf(joinPredInfo.getProjsFromLeftPartOfJoinKeysInChildSchema()));
  joinKeysInChildren.add(ImmutableIntList.copyOf(joinPredInfo.getProjsFromRightPartOfJoinKeysInChildSchema()));
  for (int i=0; i < join.getInputs().size(); i++) {
    boolean correctOrderFound=RelCollations.contains(RelMetadataQuery.collations(join.getInputs().get(i)),joinKeysInChildren.get(i));
    if (correctOrderFound) {
      sortedInputs.set(i);
    }
  }
  return sortedInputs.build();
}
