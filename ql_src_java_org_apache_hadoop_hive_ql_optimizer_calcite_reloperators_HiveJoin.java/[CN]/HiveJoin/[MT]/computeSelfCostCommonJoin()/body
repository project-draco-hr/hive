{
  final Double leftRCount=RelMetadataQuery.getRowCount(getLeft());
  final Double rightRCount=RelMetadataQuery.getRowCount(getRight());
  if (leftRCount == null || rightRCount == null) {
    return null;
  }
  final double rCount=leftRCount + rightRCount;
  ImmutableList<Double> cardinalities=new ImmutableList.Builder<Double>().add(leftRCount).add(rightRCount).build();
  final double cpuCost=HiveCostUtil.computeCommonJoinCPUCost(cardinalities,ImmutableBitSet.range(2));
  final Double leftRAverageSize=RelMetadataQuery.getAverageRowSize(getLeft());
  final Double rightRAverageSize=RelMetadataQuery.getAverageRowSize(getRight());
  if (leftRAverageSize == null || rightRAverageSize == null) {
    return null;
  }
  ImmutableList<Pair<Double,Double>> relationInfos=new ImmutableList.Builder<Pair<Double,Double>>().add(new Pair<Double,Double>(leftRCount,leftRAverageSize)).add(new Pair<Double,Double>(rightRCount,rightRAverageSize)).build();
  final double ioCost=HiveCostUtil.computeCommonJoinIOCost(relationInfos);
  return HiveCost.FACTORY.makeCost(rCount,cpuCost,ioCost);
}
