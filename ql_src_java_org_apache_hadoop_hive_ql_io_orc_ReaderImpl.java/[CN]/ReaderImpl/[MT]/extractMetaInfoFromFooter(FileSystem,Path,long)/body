{
  FSDataInputStream file=fs.open(path);
  long size;
  if (maxFileLength == Long.MAX_VALUE) {
    size=fs.getFileStatus(path).getLen();
  }
 else {
    size=maxFileLength;
  }
  int readSize=(int)Math.min(size,DIRECTORY_SIZE_GUESS);
  file.seek(size - readSize);
  ByteBuffer buffer=ByteBuffer.allocate(readSize);
  file.readFully(buffer.array(),buffer.arrayOffset() + buffer.position(),buffer.remaining());
  int psLen=buffer.get(readSize - 1) & 0xff;
  ensureOrcFooter(file,path,psLen,buffer);
  int psOffset=readSize - 1 - psLen;
  CodedInputStream in=CodedInputStream.newInstance(buffer.array(),buffer.arrayOffset() + psOffset,psLen);
  OrcProto.PostScript ps=OrcProto.PostScript.parseFrom(in);
  checkOrcVersion(LOG,path,ps.getVersionList());
  int footerSize=(int)ps.getFooterLength();
  int metadataSize=(int)ps.getMetadataLength();
switch (ps.getCompression()) {
case NONE:
    break;
case ZLIB:
  break;
case SNAPPY:
break;
case LZO:
break;
default :
throw new IllegalArgumentException("Unknown compression");
}
int extra=Math.max(0,psLen + 1 + footerSize+ metadataSize - readSize);
if (extra > 0) {
file.seek(size - readSize - extra);
ByteBuffer extraBuf=ByteBuffer.allocate(extra + readSize);
file.readFully(extraBuf.array(),extraBuf.arrayOffset() + extraBuf.position(),extra);
extraBuf.position(extra);
extraBuf.put(buffer);
buffer=extraBuf;
buffer.position(0);
buffer.limit(footerSize + metadataSize);
}
 else {
buffer.position(psOffset - footerSize - metadataSize);
buffer.limit(psOffset);
}
buffer.mark();
file.close();
return new FileMetaInfo(ps.getCompression().toString(),(int)ps.getCompressionBlockSize(),(int)ps.getMetadataLength(),buffer,ps.getVersionList());
}
