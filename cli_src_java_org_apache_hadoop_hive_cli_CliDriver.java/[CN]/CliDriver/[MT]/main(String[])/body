{
  OptionsProcessor oproc=new OptionsProcessor();
  if (!oproc.process_stage1(args)) {
    System.exit(1);
  }
  SessionState.initHiveLog4j();
  CliSessionState ss=new CliSessionState(new HiveConf(SessionState.class));
  ss.in=System.in;
  try {
    ss.out=new PrintStream(System.out,true,"UTF-8");
    ss.err=new PrintStream(System.err,true,"UTF-8");
  }
 catch (  UnsupportedEncodingException e) {
    System.exit(3);
  }
  if (!oproc.process_stage2(ss)) {
    System.exit(2);
  }
  HiveConf conf=ss.getConf();
  for (  Map.Entry<Object,Object> item : ss.cmdProperties.entrySet()) {
    conf.set((String)item.getKey(),(String)item.getValue());
  }
  if (!ShimLoader.getHadoopShims().usesJobShell()) {
    ClassLoader loader=conf.getClassLoader();
    String auxJars=HiveConf.getVar(conf,HiveConf.ConfVars.HIVEAUXJARS);
    if (StringUtils.isNotBlank(auxJars)) {
      loader=Utilities.addToClassPath(loader,StringUtils.split(auxJars,","));
    }
    conf.setClassLoader(loader);
    Thread.currentThread().setContextClassLoader(loader);
  }
  SessionState.start(ss);
  CliDriver cli=new CliDriver();
  if (ss.execString != null) {
    System.exit(cli.processLine(ss.execString));
  }
  try {
    if (ss.fileName != null) {
      System.exit(cli.processReader(new BufferedReader(new FileReader(ss.fileName))));
    }
  }
 catch (  FileNotFoundException e) {
    System.err.println("Could not open input file for reading. (" + e.getMessage() + ")");
    System.exit(3);
  }
  ConsoleReader reader=new ConsoleReader();
  reader.setBellEnabled(false);
  List<SimpleCompletor> completors=new LinkedList<SimpleCompletor>();
  completors.add(new SimpleCompletor(new String[]{"set","from","create","load","describe","quit","exit"}));
  reader.addCompletor(new ArgumentCompletor(completors));
  String line;
  final String HISTORYFILE=".hivehistory";
  String historyFile=System.getProperty("user.home") + File.separator + HISTORYFILE;
  reader.setHistory(new History(new File(historyFile)));
  int ret=0;
  String prefix="";
  String curPrompt=prompt;
  while ((line=reader.readLine(curPrompt + "> ")) != null) {
    if (!prefix.equals("")) {
      prefix+='\n';
    }
    if (line.trim().endsWith(";")) {
      line=prefix + line;
      ret=cli.processLine(line);
      prefix="";
      curPrompt=prompt;
    }
 else {
      prefix=prefix + line;
      curPrompt=prompt2;
      continue;
    }
  }
  System.exit(ret);
}
