{
  OptionsProcessor oproc=new OptionsProcessor();
  if (!oproc.process_stage1(args)) {
    return 1;
  }
  boolean logInitFailed=false;
  String logInitDetailMessage;
  try {
    logInitDetailMessage=LogUtils.initHiveLog4j();
  }
 catch (  LogInitializationException e) {
    logInitFailed=true;
    logInitDetailMessage=e.getMessage();
  }
  CliSessionState ss=new CliSessionState(new HiveConf(SessionState.class));
  ss.in=System.in;
  try {
    ss.out=new PrintStream(System.out,true,"UTF-8");
    ss.info=new PrintStream(System.err,true,"UTF-8");
    ss.err=new CachingPrintStream(System.err,true,"UTF-8");
  }
 catch (  UnsupportedEncodingException e) {
    return 3;
  }
  if (!oproc.process_stage2(ss)) {
    return 2;
  }
  if (!ss.getIsSilent()) {
    if (logInitFailed) {
      System.err.println(logInitDetailMessage);
    }
 else {
      SessionState.getConsole().printInfo(logInitDetailMessage);
    }
  }
  HiveConf conf=ss.getConf();
  for (  Map.Entry<Object,Object> item : ss.cmdProperties.entrySet()) {
    conf.set((String)item.getKey(),(String)item.getValue());
    ss.getOverriddenConfigurations().put((String)item.getKey(),(String)item.getValue());
  }
  prompt=conf.getVar(HiveConf.ConfVars.CLIPROMPT);
  prompt=new VariableSubstitution(new HiveVariableSource(){
    @Override public Map<String,String> getHiveVariable(){
      return SessionState.get().getHiveVariables();
    }
  }
).substitute(conf,prompt);
  prompt2=spacesForString(prompt);
  SessionState.start(ss);
  try {
    return executeDriver(ss,conf,oproc);
  }
  finally {
    ss.close();
  }
}
