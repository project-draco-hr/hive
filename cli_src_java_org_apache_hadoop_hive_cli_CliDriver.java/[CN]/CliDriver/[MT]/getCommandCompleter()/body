{
  List<String> candidateStrings=new ArrayList<String>();
  for (  String s : FunctionRegistry.getFunctionNames()) {
    if (s.matches("[a-z_]+")) {
      candidateStrings.add(s + "(");
    }
 else {
      candidateStrings.add(s);
    }
  }
  for (  String s : HiveParser.getKeywords()) {
    candidateStrings.add(s);
    candidateStrings.add(s.toLowerCase());
  }
  StringsCompleter strCompleter=new StringsCompleter(candidateStrings);
  ArgumentDelimiter delim=new AbstractArgumentDelimiter(){
    @Override public boolean isDelimiterChar(    CharSequence buffer,    int pos){
      char c=buffer.charAt(pos);
      return (Character.isWhitespace(c) || c == '(' || c == ')' || c == '[' || c == ']');
    }
  }
;
  final ArgumentCompleter argCompleter=new ArgumentCompleter(delim,strCompleter);
  argCompleter.setStrict(false);
  Completer customCompletor=new Completer(){
    @Override public int complete(    String buffer,    int offset,    List completions){
      List<String> comp=completions;
      int ret=argCompleter.complete(buffer,offset,completions);
      if (completions.size() == 1) {
        if (comp.get(0).endsWith("( ")) {
          comp.set(0,comp.get(0).trim());
        }
      }
      return ret;
    }
  }
;
  HiveConf.ConfVars[] confs=HiveConf.ConfVars.values();
  String[] vars=new String[confs.length];
  for (int i=0; i < vars.length; i++) {
    vars[i]=confs[i].varname;
  }
  ArgumentCompleter.ArgumentDelimiter delimiter=new ArgumentCompleter.AbstractArgumentDelimiter(){
    @Override public boolean isDelimiterChar(    CharSequence buffer,    int pos){
      char c=buffer.charAt(pos);
      return c == '.';
    }
  }
;
  StringsCompleter setCompleter=new StringsCompleter("set"){
    @Override public int complete(    String buffer,    int cursor,    List clist){
      return buffer != null && buffer.equals("set") ? super.complete(buffer,cursor,clist) : -1;
    }
  }
;
  ArgumentCompleter confCompleter=new ArgumentCompleter(delimiter,setCompleter);
  ArgumentCompleter propCompleter=new ArgumentCompleter(new Completer[]{setCompleter,confCompleter}){
    @Override @SuppressWarnings("unchecked") public int complete(    String buffer,    int offset,    List completions){
      int ret=super.complete(buffer,offset,completions);
      if (completions.size() == 1) {
        completions.set(0,((String)completions.get(0)).trim());
      }
      return ret;
    }
  }
;
  return new Completer[]{propCompleter,customCompletor};
}
