{
  CliSessionState ss=(CliSessionState)SessionState.get();
  ss.setLastCommand(cmd);
  ss.updateThreadName();
  ss.err.flush();
  String cmd_trimmed=cmd.trim();
  String[] tokens=tokenizeCmd(cmd_trimmed);
  int ret=0;
  if (cmd_trimmed.toLowerCase().equals("quit") || cmd_trimmed.toLowerCase().equals("exit")) {
    ss.close();
    System.exit(0);
  }
 else   if (tokens[0].equalsIgnoreCase("source")) {
    String cmd_1=getFirstCmd(cmd_trimmed,tokens[0].length());
    cmd_1=new VariableSubstitution(new HiveVariableSource(){
      @Override public Map<String,String> getHiveVariable(){
        return SessionState.get().getHiveVariables();
      }
    }
).substitute(ss.getConf(),cmd_1);
    File sourceFile=new File(cmd_1);
    if (!sourceFile.isFile()) {
      console.printError("File: " + cmd_1 + " is not a file.");
      ret=1;
    }
 else {
      try {
        ret=processFile(cmd_1);
      }
 catch (      IOException e) {
        console.printError("Failed processing file " + cmd_1 + " "+ e.getLocalizedMessage(),stringifyException(e));
        ret=1;
      }
    }
  }
 else   if (cmd_trimmed.startsWith("!")) {
    String shell_cmd=cmd_trimmed.substring(1);
    shell_cmd=new VariableSubstitution(new HiveVariableSource(){
      @Override public Map<String,String> getHiveVariable(){
        return SessionState.get().getHiveVariables();
      }
    }
).substitute(ss.getConf(),shell_cmd);
    try {
      ShellCmdExecutor executor=new ShellCmdExecutor(shell_cmd,ss.out,ss.err);
      ret=executor.execute();
      if (ret != 0) {
        console.printError("Command failed with exit code = " + ret);
      }
    }
 catch (    Exception e) {
      console.printError("Exception raised from Shell command " + e.getLocalizedMessage(),stringifyException(e));
      ret=1;
    }
  }
 else {
    try {
      CommandProcessor proc=CommandProcessorFactory.get(tokens,(HiveConf)conf);
      ret=processLocalCmd(cmd,proc,ss);
    }
 catch (    SQLException e) {
      console.printError("Failed processing command " + tokens[0] + " "+ e.getLocalizedMessage(),org.apache.hadoop.util.StringUtils.stringifyException(e));
      ret=1;
    }
  }
  ss.resetThreadName();
  return ret;
}
