{
  SessionState ss=SessionState.get();
  String cmd_trimmed=cmd.trim();
  String[] tokens=cmd_trimmed.split("\\s+");
  String cmd_1=cmd_trimmed.substring(tokens[0].length());
  int ret=0;
  if (tokens[0].toLowerCase().equals("set")) {
    ret=sp.run(cmd_1);
  }
 else   if (cmd_trimmed.toLowerCase().equals("quit") || cmd_trimmed.toLowerCase().equals("exit")) {
    System.exit(0);
  }
 else   if (cmd_trimmed.startsWith("!")) {
    String shell_cmd=cmd_trimmed.substring(1);
    try {
      Process executor=Runtime.getRuntime().exec(shell_cmd);
      StreamPrinter outPrinter=new StreamPrinter(executor.getInputStream(),null,ss.out);
      StreamPrinter errPrinter=new StreamPrinter(executor.getErrorStream(),null,ss.err);
      outPrinter.start();
      errPrinter.start();
      ret=executor.waitFor();
      if (ret != 0) {
        console.printError("Command failed with exit code = " + ret);
      }
    }
 catch (    Exception e) {
      console.printError("Exception raised from Shell command " + e.getLocalizedMessage(),org.apache.hadoop.util.StringUtils.stringifyException(e));
      ret=1;
    }
  }
 else   if (tokens[0].toLowerCase().equals("dfs")) {
    String[] alt_tokens=new String[tokens.length - 1];
    System.arraycopy(tokens,1,alt_tokens,0,tokens.length - 1);
    tokens=alt_tokens;
    try {
      PrintStream oldOut=System.out;
      System.setOut(ss.out);
      ret=dfs.run(tokens);
      System.setOut(oldOut);
      if (ret != 0) {
        console.printError("Command failed with exit code = " + ret);
      }
    }
 catch (    Exception e) {
      console.printError("Exception raised from DFSShell.run " + e.getLocalizedMessage(),org.apache.hadoop.util.StringUtils.stringifyException(e));
      ret=1;
    }
  }
 else   if (tokens[0].toLowerCase().equals("list")) {
    SessionState.ResourceType t;
    if (tokens.length < 2 || (t=SessionState.find_resource_type(tokens[1])) == null) {
      console.printError("Usage: list [" + StringUtils.join(SessionState.ResourceType.values(),"|") + "] [<value> [<value>]*]");
      ret=1;
    }
 else {
      List<String> filter=null;
      if (tokens.length >= 3) {
        System.arraycopy(tokens,2,tokens,0,tokens.length - 2);
        filter=Arrays.asList(tokens);
      }
      Set<String> s=ss.list_resource(t,filter);
      if (s != null && !s.isEmpty())       ss.out.println(StringUtils.join(s,"\n"));
    }
  }
 else   if (tokens[0].toLowerCase().equals("add")) {
    SessionState.ResourceType t;
    if (tokens.length < 3 || (t=SessionState.find_resource_type(tokens[1])) == null) {
      console.printError("Usage: add [" + StringUtils.join(SessionState.ResourceType.values(),"|") + "] <value> [<value>]*");
      ret=1;
    }
 else {
      for (int i=2; i < tokens.length; i++) {
        ss.add_resource(t,tokens[i]);
      }
    }
  }
 else   if (tokens[0].toLowerCase().equals("delete")) {
    SessionState.ResourceType t;
    if (tokens.length < 2 || (t=SessionState.find_resource_type(tokens[1])) == null) {
      console.printError("Usage: delete [" + StringUtils.join(SessionState.ResourceType.values(),"|") + "] [<value>]");
      ret=1;
    }
 else     if (tokens.length >= 3) {
      for (int i=2; i < tokens.length; i++) {
        ss.delete_resource(t,tokens[i]);
      }
    }
 else {
      ss.delete_resource(t);
    }
  }
 else   if (!StringUtils.isBlank(cmd_trimmed)) {
    PrintStream out=ss.out;
    long start=System.currentTimeMillis();
    ret=qp.run(cmd);
    Vector<String> res=new Vector<String>();
    while (qp.getResults(res)) {
      for (      String r : res) {
        out.println(r);
      }
      res.clear();
      if (out.checkError()) {
        break;
      }
    }
    int cret=qp.close();
    if (ret == 0) {
      ret=cret;
    }
    long end=System.currentTimeMillis();
    if (end > start) {
      double timeTaken=(double)(end - start) / 1000.0;
      console.printInfo("Time taken: " + timeTaken + " seconds",null);
    }
  }
  return ret;
}
