{
  String[] tokens=cmd.split("\\s+");
  String cmd_1=cmd.substring(tokens[0].length());
  int ret=0;
  if (tokens[0].equals("set")) {
    ret=sp.run(cmd_1);
  }
 else   if (cmd.equals("quit") || cmd.equals("exit")) {
    System.exit(0);
  }
 else   if (cmd.startsWith("!")) {
    SessionState ss=SessionState.get();
    String shell_cmd=cmd.substring(1);
    if (shell_cmd.endsWith(";")) {
      shell_cmd=shell_cmd.substring(0,shell_cmd.length() - 1);
    }
    try {
      Process executor=Runtime.getRuntime().exec(shell_cmd);
      StreamPrinter outPrinter=new StreamPrinter(executor.getInputStream(),null,ss.out);
      StreamPrinter errPrinter=new StreamPrinter(executor.getErrorStream(),null,ss.err);
      outPrinter.start();
      errPrinter.start();
      int exitVal=executor.waitFor();
      if (exitVal != 0) {
        ss.err.write((new String("Command failed with exit code = " + exitVal)).getBytes());
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else {
    ret=qp.run(cmd);
    Vector<Vector<String>> res=new Vector<Vector<String>>();
    while (qp.getResults(res)) {
      SessionState ss=SessionState.get();
      OutputStream out=ss.out;
      try {
        for (        Vector<String> row : res) {
          for (          String col : row) {
            out.write(col == null ? Utilities.nullStringOutput.getBytes() : col.getBytes());
            out.write(Utilities.tabCode);
          }
          out.write(Utilities.newLineCode);
        }
        res.clear();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  return ret;
}
