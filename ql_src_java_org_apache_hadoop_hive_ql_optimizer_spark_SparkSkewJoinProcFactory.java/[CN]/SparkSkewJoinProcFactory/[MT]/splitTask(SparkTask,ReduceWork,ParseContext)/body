{
  SparkWork currentWork=currentTask.getWork();
  Set<Operator<? extends OperatorDesc>> reduceSinkSet=SparkMapJoinResolver.getOp(reduceWork,ReduceSinkOperator.class);
  if (currentWork.getChildren(reduceWork).size() == 1 && canSplit(currentWork) && reduceSinkSet.size() == 1) {
    ReduceSinkOperator reduceSink=(ReduceSinkOperator)reduceSinkSet.iterator().next();
    BaseWork childWork=currentWork.getChildren(reduceWork).get(0);
    SparkEdgeProperty originEdge=currentWork.getEdgeProperty(reduceWork,childWork);
    currentWork.disconnect(reduceWork,childWork);
    SparkWork newWork=new SparkWork(parseContext.getConf().getVar(HiveConf.ConfVars.HIVEQUERYID));
    newWork.add(childWork);
    copyWorkGraph(currentWork,newWork,childWork,true);
    copyWorkGraph(currentWork,newWork,childWork,false);
    for (    BaseWork baseWork : newWork.getAllWorkUnsorted()) {
      currentWork.remove(baseWork);
      currentWork.getCloneToWork().remove(baseWork);
    }
    Context baseCtx=parseContext.getContext();
    Path taskTmpDir=baseCtx.getMRTmpPath();
    Operator<? extends OperatorDesc> rsParent=reduceSink.getParentOperators().get(0);
    TableDesc tableDesc=PlanUtils.getIntermediateFileTableDesc(PlanUtils.getFieldSchemasFromRowSchema(rsParent.getSchema(),"temporarycol"));
    TableScanOperator tableScanOp=GenMapRedUtils.createTemporaryFile(rsParent,reduceSink,taskTmpDir,tableDesc,parseContext);
    MapWork mapWork=PlanUtils.getMapRedWork().getMapWork();
    mapWork.setName("Map " + GenSparkUtils.getUtils().getNextSeqNumber());
    newWork.add(mapWork);
    newWork.connect(mapWork,childWork,originEdge);
    String streamDesc=taskTmpDir.toUri().toString();
    if (GenMapRedUtils.needsTagging((ReduceWork)childWork)) {
      Operator<? extends OperatorDesc> childReducer=((ReduceWork)childWork).getReducer();
      String id=null;
      if (childReducer instanceof JoinOperator) {
        if (parseContext.getJoinOps().contains(childReducer)) {
          id=((JoinOperator)childReducer).getConf().getId();
        }
      }
 else       if (childReducer instanceof MapJoinOperator) {
        if (parseContext.getMapJoinOps().contains(childReducer)) {
          id=((MapJoinOperator)childReducer).getConf().getId();
        }
      }
 else       if (childReducer instanceof SMBMapJoinOperator) {
        if (parseContext.getSmbMapJoinOps().contains(childReducer)) {
          id=((SMBMapJoinOperator)childReducer).getConf().getId();
        }
      }
      if (id != null) {
        streamDesc=id + ":$INTNAME";
      }
 else {
        streamDesc="$INTNAME";
      }
      String origStreamDesc=streamDesc;
      int pos=0;
      while (mapWork.getAliasToWork().get(streamDesc) != null) {
        streamDesc=origStreamDesc.concat(String.valueOf(++pos));
      }
    }
    GenMapRedUtils.setTaskPlan(taskTmpDir.toUri().toString(),streamDesc,tableScanOp,mapWork,false,tableDesc);
    @SuppressWarnings("unchecked") Task<? extends Serializable> newTask=TaskFactory.get(newWork,parseContext.getConf());
    List<Task<? extends Serializable>> childTasks=currentTask.getChildTasks();
    if (childTasks != null && childTasks.size() > 0) {
      Task<? extends Serializable> childTask=childTasks.get(0);
      currentTask.removeDependentTask(childTask);
      newTask.addDependentTask(childTask);
    }
    currentTask.addDependentTask(newTask);
    newTask.setFetchSource(currentTask.isFetchSource());
  }
}
