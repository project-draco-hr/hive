{
  clearSslConfOverlay(confOverlay);
  setBinaryConfOverlay(confOverlay);
  miniHS2.start(confOverlay);
  DriverManager.setLoginTimeout(4);
  try {
    hs2Conn=DriverManager.getConnection(miniHS2.getJdbcURL("default",SSL_CONN_PARAMS),System.getProperty("user.name"),"bar");
    fail("SSL connection should fail with NON-SSL server");
  }
 catch (  SQLException e) {
    assertEquals("08S01",e.getSQLState().trim());
  }
  System.setProperty(JAVA_TRUST_STORE_PROP,dataFileDir + File.separator + TRUST_STORE_NAME);
  System.setProperty(JAVA_TRUST_STORE_PASS_PROP,KEY_STORE_TRUST_STORE_PASSWORD);
  try {
    hs2Conn=DriverManager.getConnection(miniHS2.getJdbcURL() + ";ssl=true",System.getProperty("user.name"),"bar");
    fail("SSL connection should fail with NON-SSL server");
  }
 catch (  SQLException e) {
    assertEquals("08S01",e.getSQLState().trim());
  }
  miniHS2.stop();
  System.clearProperty(JAVA_TRUST_STORE_PROP);
  System.clearProperty(JAVA_TRUST_STORE_PASS_PROP);
  setHttpConfOverlay(confOverlay);
  miniHS2.start(confOverlay);
  try {
    hs2Conn=DriverManager.getConnection(miniHS2.getJdbcURL("default",SSL_CONN_PARAMS),System.getProperty("user.name"),"bar");
    fail("SSL connection should fail with NON-SSL server");
  }
 catch (  SQLException e) {
    assertEquals("08S01",e.getSQLState().trim());
  }
}
